
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c96c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800cb50  0800cb50  0001cb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d914  0800d914  00020a14  2**0
                  CONTENTS
  4 .ARM          00000000  0800d914  0800d914  00020a14  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d914  0800d914  00020a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d914  0800d914  0001d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d918  0800d918  0001d918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a14  20000000  0800d91c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000a14  0800e330  00020a14  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ef4  0800e330  00020ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a3d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012df8  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b2  00000000  00000000  00033878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00035d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dea  00000000  00000000  00036ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002495  00000000  00000000  00037caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fd2  00000000  00000000  0003a13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc21  00000000  00000000  00052111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f04  00000000  00000000  000f1d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f6c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a14 	.word	0x20000a14
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cb38 	.word	0x0800cb38

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a18 	.word	0x20000a18
 8000220:	0800cb38 	.word	0x0800cb38

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f023 030f 	bic.w	r3, r3, #15
 8000244:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	f043 030c 	orr.w	r3, r3, #12
 8000252:	b2db      	uxtb	r3, r3
 8000254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	7b7b      	ldrb	r3, [r7, #13]
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	f043 030c 	orr.w	r3, r3, #12
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800026a:	7b3b      	ldrb	r3, [r7, #12]
 800026c:	f043 0308 	orr.w	r3, r3, #8
 8000270:	b2db      	uxtb	r3, r3
 8000272:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000274:	bf00      	nop
 8000276:	4825      	ldr	r0, [pc, #148]	; (800030c <lcd_send_cmd+0xd8>)
 8000278:	f00a f93f 	bl	800a4fa <HAL_I2C_GetError>
 800027c:	4603      	mov	r3, r0
 800027e:	2b04      	cmp	r3, #4
 8000280:	d0f9      	beq.n	8000276 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000282:	bf00      	nop
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <lcd_send_cmd+0xd8>)
 8000286:	f00a f92b 	bl	800a4e0 <HAL_I2C_GetState>
 800028a:	4603      	mov	r3, r0
 800028c:	2b20      	cmp	r3, #32
 800028e:	d1f9      	bne.n	8000284 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <lcd_send_cmd+0xdc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d116      	bne.n	80002c6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
 800029c:	e00f      	b.n	80002be <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3310      	adds	r3, #16
 80002a2:	443b      	add	r3, r7
 80002a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	f022 0208 	bic.w	r2, r2, #8
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	3310      	adds	r3, #16
 80002b2:	443b      	add	r3, r7
 80002b4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	3301      	adds	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d9ec      	bls.n	800029e <lcd_send_cmd+0x6a>
 80002c4:	e015      	b.n	80002f2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	73bb      	strb	r3, [r7, #14]
 80002ca:	e00f      	b.n	80002ec <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	3310      	adds	r3, #16
 80002d0:	443b      	add	r3, r7
 80002d2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	f042 0208 	orr.w	r2, r2, #8
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	3310      	adds	r3, #16
 80002e0:	443b      	add	r3, r7
 80002e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d9ec      	bls.n	80002cc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002f2:	f107 0208 	add.w	r2, r7, #8
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2304      	movs	r3, #4
 80002fc:	214e      	movs	r1, #78	; 0x4e
 80002fe:	4803      	ldr	r0, [pc, #12]	; (800030c <lcd_send_cmd+0xd8>)
 8000300:	f009 fc8e 	bl	8009c20 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000a5c 	.word	0x20000a5c
 8000310:	20000a30 	.word	0x20000a30

08000314 <lcd_send_data>:

void lcd_send_data (char data) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af02      	add	r7, sp, #8
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f023 030f 	bic.w	r3, r3, #15
 8000324:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800032c:	7b7b      	ldrb	r3, [r7, #13]
 800032e:	f043 030d 	orr.w	r3, r3, #13
 8000332:	b2db      	uxtb	r3, r3
 8000334:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000336:	7b7b      	ldrb	r3, [r7, #13]
 8000338:	f043 0309 	orr.w	r3, r3, #9
 800033c:	b2db      	uxtb	r3, r3
 800033e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000340:	7b3b      	ldrb	r3, [r7, #12]
 8000342:	f043 030d 	orr.w	r3, r3, #13
 8000346:	b2db      	uxtb	r3, r3
 8000348:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800034a:	7b3b      	ldrb	r3, [r7, #12]
 800034c:	f043 0309 	orr.w	r3, r3, #9
 8000350:	b2db      	uxtb	r3, r3
 8000352:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000354:	bf00      	nop
 8000356:	4825      	ldr	r0, [pc, #148]	; (80003ec <lcd_send_data+0xd8>)
 8000358:	f00a f8cf 	bl	800a4fa <HAL_I2C_GetError>
 800035c:	4603      	mov	r3, r0
 800035e:	2b04      	cmp	r3, #4
 8000360:	d0f9      	beq.n	8000356 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000362:	bf00      	nop
 8000364:	4821      	ldr	r0, [pc, #132]	; (80003ec <lcd_send_data+0xd8>)
 8000366:	f00a f8bb 	bl	800a4e0 <HAL_I2C_GetState>
 800036a:	4603      	mov	r3, r0
 800036c:	2b20      	cmp	r3, #32
 800036e:	d1f9      	bne.n	8000364 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <lcd_send_data+0xdc>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d116      	bne.n	80003a6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e00f      	b.n	800039e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3310      	adds	r3, #16
 8000382:	443b      	add	r3, r7
 8000384:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f022 0208 	bic.w	r2, r2, #8
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	3310      	adds	r3, #16
 8000392:	443b      	add	r3, r7
 8000394:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d9ec      	bls.n	800037e <lcd_send_data+0x6a>
 80003a4:	e015      	b.n	80003d2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	e00f      	b.n	80003cc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	3310      	adds	r3, #16
 80003b0:	443b      	add	r3, r7
 80003b2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	f042 0208 	orr.w	r2, r2, #8
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	3310      	adds	r3, #16
 80003c0:	443b      	add	r3, r7
 80003c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	3301      	adds	r3, #1
 80003ca:	73bb      	strb	r3, [r7, #14]
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d9ec      	bls.n	80003ac <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003d2:	f107 0208 	add.w	r2, r7, #8
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2304      	movs	r3, #4
 80003dc:	214e      	movs	r1, #78	; 0x4e
 80003de:	4803      	ldr	r0, [pc, #12]	; (80003ec <lcd_send_data+0xd8>)
 80003e0:	f009 fc1e 	bl	8009c20 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000a5c 	.word	0x20000a5c
 80003f0:	20000a30 	.word	0x20000a30

080003f4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while (*str) {
 80003fc:	e006      	b.n	800040c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff84 	bl	8000314 <lcd_send_data>
	while (*str) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f4      	bne.n	80003fe <lcd_send_string+0xa>
	}
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	f023 030f 	bic.w	r3, r3, #15
 8000430:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	f043 030d 	orr.w	r3, r3, #13
 800043e:	b2db      	uxtb	r3, r3
 8000440:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000442:	7b7b      	ldrb	r3, [r7, #13]
 8000444:	f043 0309 	orr.w	r3, r3, #9
 8000448:	b2db      	uxtb	r3, r3
 800044a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800044c:	7b3b      	ldrb	r3, [r7, #12]
 800044e:	f043 030d 	orr.w	r3, r3, #13
 8000452:	b2db      	uxtb	r3, r3
 8000454:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8000456:	7b3b      	ldrb	r3, [r7, #12]
 8000458:	f043 0309 	orr.w	r3, r3, #9
 800045c:	b2db      	uxtb	r3, r3
 800045e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000460:	bf00      	nop
 8000462:	4825      	ldr	r0, [pc, #148]	; (80004f8 <lcd_send_char+0xd8>)
 8000464:	f00a f849 	bl	800a4fa <HAL_I2C_GetError>
 8000468:	4603      	mov	r3, r0
 800046a:	2b04      	cmp	r3, #4
 800046c:	d0f9      	beq.n	8000462 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800046e:	bf00      	nop
 8000470:	4821      	ldr	r0, [pc, #132]	; (80004f8 <lcd_send_char+0xd8>)
 8000472:	f00a f835 	bl	800a4e0 <HAL_I2C_GetState>
 8000476:	4603      	mov	r3, r0
 8000478:	2b20      	cmp	r3, #32
 800047a:	d1f9      	bne.n	8000470 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <lcd_send_char+0xdc>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d116      	bne.n	80004b2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e00f      	b.n	80004aa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	3310      	adds	r3, #16
 800048e:	443b      	add	r3, r7
 8000490:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	f022 0208 	bic.w	r2, r2, #8
 800049a:	b2d2      	uxtb	r2, r2
 800049c:	3310      	adds	r3, #16
 800049e:	443b      	add	r3, r7
 80004a0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	3301      	adds	r3, #1
 80004a8:	73fb      	strb	r3, [r7, #15]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d9ec      	bls.n	800048a <lcd_send_char+0x6a>
 80004b0:	e015      	b.n	80004de <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	73bb      	strb	r3, [r7, #14]
 80004b6:	e00f      	b.n	80004d8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	3310      	adds	r3, #16
 80004bc:	443b      	add	r3, r7
 80004be:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	f042 0208 	orr.w	r2, r2, #8
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	3310      	adds	r3, #16
 80004cc:	443b      	add	r3, r7
 80004ce:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	3301      	adds	r3, #1
 80004d6:	73bb      	strb	r3, [r7, #14]
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d9ec      	bls.n	80004b8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80004de:	f107 0208 	add.w	r2, r7, #8
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2304      	movs	r3, #4
 80004e8:	214e      	movs	r1, #78	; 0x4e
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <lcd_send_char+0xd8>)
 80004ec:	f009 fb98 	bl	8009c20 <HAL_I2C_Master_Transmit>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000a5c 	.word	0x20000a5c
 80004fc:	20000a30 	.word	0x20000a30

08000500 <lcd_init>:

void lcd_init (void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fe95 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800050a:	2028      	movs	r0, #40	; 0x28
 800050c:	f7ff fe92 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000510:	200c      	movs	r0, #12
 8000512:	f7ff fe8f 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	f7ff fe8c 	bl	8000234 <lcd_send_cmd>
	lcd_backlight(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f86d 	bl	80005fc <lcd_backlight>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}

08000526 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	460a      	mov	r2, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	337f      	adds	r3, #127	; 0x7f
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe76 	bl	8000234 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000548:	e008      	b.n	800055c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d105      	bne.n	800055c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	3b41      	subs	r3, #65	; 0x41
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe6c 	bl	8000234 <lcd_send_cmd>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	603a      	str	r2, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	460b      	mov	r3, r1
 8000572:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffd3 	bl	8000526 <lcd_gotoxy>
	lcd_send_string(str);
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f7ff ff37 	bl	80003f4 <lcd_send_string>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	460b      	mov	r3, r1
 800059a:	71bb      	strb	r3, [r7, #6]
 800059c:	4613      	mov	r3, r2
 800059e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffbd 	bl	8000526 <lcd_gotoxy>
    lcd_send_char(ch);
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff36 	bl	8000420 <lcd_send_char>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <lcd_clear>:

void lcd_clear(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fe37 	bl	8000234 <lcd_send_cmd>
    HAL_Delay(2);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f008 fb9e 	bl	8008d08 <HAL_Delay>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff9d 	bl	8000526 <lcd_gotoxy>

    lcd_send_char(' ');
 80005ec:	2020      	movs	r0, #32
 80005ee:	f7ff ff17 	bl	8000420 <lcd_send_char>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <lcd_backlight+0x20>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fe11 	bl	8000234 <lcd_send_cmd>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000a30 	.word	0x20000a30

08000620 <lcd_cursor>:

void lcd_cursor(int state) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d106      	bne.n	800063c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800062e:	200e      	movs	r0, #14
 8000630:	f7ff fe00 	bl	8000234 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000634:	200f      	movs	r0, #15
 8000636:	f7ff fdfd 	bl	8000234 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800063a:	e002      	b.n	8000642 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800063c:	200c      	movs	r0, #12
 800063e:	f7ff fdf9 	bl	8000234 <lcd_send_cmd>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000650:	f3bf 8f4f 	dsb	sy
}
 8000654:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800065e:	4904      	ldr	r1, [pc, #16]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_SystemReset+0x28>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000666:	f3bf 8f4f 	dsb	sy
}
 800066a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <__NVIC_SystemReset+0x20>
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	05fa0004 	.word	0x05fa0004

08000678 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff fdcf 	bl	8000224 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	3301      	adds	r3, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f00c f904 	bl	800c898 <malloc>
 8000690:	4603      	mov	r3, r0
 8000692:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <copyText+0x2a>
        strcpy(result, text);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f00c fa35 	bl	800cb0c <strcpy>
    }
    return result;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80006b6:	20c8      	movs	r0, #200	; 0xc8
 80006b8:	f008 fb26 	bl	8008d08 <HAL_Delay>
	lcd_clear();
 80006bc:	f7ff ff7e 	bl	80005bc <lcd_clear>
	if(type == 1 && page == 0) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d143      	bne.n	800074e <printTemplate+0xa2>
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d140      	bne.n	800074e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80006cc:	4a9d      	ldr	r2, [pc, #628]	; (8000944 <printTemplate+0x298>)
 80006ce:	2101      	movs	r1, #1
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff ff47 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "0");
 80006d6:	4a9c      	ldr	r2, [pc, #624]	; (8000948 <printTemplate+0x29c>)
 80006d8:	2103      	movs	r1, #3
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff ff42 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "1");
 80006e0:	4a9a      	ldr	r2, [pc, #616]	; (800094c <printTemplate+0x2a0>)
 80006e2:	2104      	movs	r1, #4
 80006e4:	2002      	movs	r0, #2
 80006e6:	f7ff ff3d 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "2");
 80006ea:	4a99      	ldr	r2, [pc, #612]	; (8000950 <printTemplate+0x2a4>)
 80006ec:	2105      	movs	r1, #5
 80006ee:	2002      	movs	r0, #2
 80006f0:	f7ff ff38 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "3");
 80006f4:	4a97      	ldr	r2, [pc, #604]	; (8000954 <printTemplate+0x2a8>)
 80006f6:	2106      	movs	r1, #6
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ff33 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "4");
 80006fe:	4a96      	ldr	r2, [pc, #600]	; (8000958 <printTemplate+0x2ac>)
 8000700:	2107      	movs	r1, #7
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff2e 	bl	8000564 <lcd_print>
		lcd_print(2, 10, "5");
 8000708:	4a94      	ldr	r2, [pc, #592]	; (800095c <printTemplate+0x2b0>)
 800070a:	210a      	movs	r1, #10
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff ff29 	bl	8000564 <lcd_print>
		lcd_print(2, 11, "6");
 8000712:	4a93      	ldr	r2, [pc, #588]	; (8000960 <printTemplate+0x2b4>)
 8000714:	210b      	movs	r1, #11
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff ff24 	bl	8000564 <lcd_print>
		lcd_print(2, 12, "7");
 800071c:	4a91      	ldr	r2, [pc, #580]	; (8000964 <printTemplate+0x2b8>)
 800071e:	210c      	movs	r1, #12
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff ff1f 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "8");
 8000726:	4a90      	ldr	r2, [pc, #576]	; (8000968 <printTemplate+0x2bc>)
 8000728:	210d      	movs	r1, #13
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff ff1a 	bl	8000564 <lcd_print>
		lcd_print(2, 14, "9");
 8000730:	4a8e      	ldr	r2, [pc, #568]	; (800096c <printTemplate+0x2c0>)
 8000732:	210e      	movs	r1, #14
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff ff15 	bl	8000564 <lcd_print>
		lcd_print(1, 5, machineID);
 800073a:	4a8d      	ldr	r2, [pc, #564]	; (8000970 <printTemplate+0x2c4>)
 800073c:	2105      	movs	r1, #5
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff10 	bl	8000564 <lcd_print>
		lcd_gotoxy(2, 3);
 8000744:	2103      	movs	r1, #3
 8000746:	2002      	movs	r0, #2
 8000748:	f7ff feed 	bl	8000526 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 800074c:	e0f5      	b.n	800093a <printTemplate+0x28e>
	} else if(type == 2) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d178      	bne.n	8000846 <printTemplate+0x19a>
		if(page == 1) {
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d114      	bne.n	8000784 <printTemplate+0xd8>
			lcd_clear();
 800075a:	f7ff ff2f 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f008 fad2 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000764:	4a83      	ldr	r2, [pc, #524]	; (8000974 <printTemplate+0x2c8>)
 8000766:	2101      	movs	r1, #1
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fefb 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800076e:	4a82      	ldr	r2, [pc, #520]	; (8000978 <printTemplate+0x2cc>)
 8000770:	2107      	movs	r1, #7
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fef6 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000778:	4a80      	ldr	r2, [pc, #512]	; (800097c <printTemplate+0x2d0>)
 800077a:	2101      	movs	r1, #1
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fef1 	bl	8000564 <lcd_print>
}
 8000782:	e0da      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 2) {
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d114      	bne.n	80007b4 <printTemplate+0x108>
			lcd_clear();
 800078a:	f7ff ff17 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f008 faba 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000794:	4a77      	ldr	r2, [pc, #476]	; (8000974 <printTemplate+0x2c8>)
 8000796:	2101      	movs	r1, #1
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff fee3 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800079e:	4a76      	ldr	r2, [pc, #472]	; (8000978 <printTemplate+0x2cc>)
 80007a0:	2107      	movs	r1, #7
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fede 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80007a8:	4a75      	ldr	r2, [pc, #468]	; (8000980 <printTemplate+0x2d4>)
 80007aa:	2101      	movs	r1, #1
 80007ac:	2002      	movs	r0, #2
 80007ae:	f7ff fed9 	bl	8000564 <lcd_print>
}
 80007b2:	e0c2      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 3) {
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d114      	bne.n	80007e4 <printTemplate+0x138>
			lcd_clear();
 80007ba:	f7ff feff 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f008 faa2 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007c4:	4a6b      	ldr	r2, [pc, #428]	; (8000974 <printTemplate+0x2c8>)
 80007c6:	2101      	movs	r1, #1
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fecb 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007ce:	4a6a      	ldr	r2, [pc, #424]	; (8000978 <printTemplate+0x2cc>)
 80007d0:	2107      	movs	r1, #7
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fec6 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80007d8:	4a6a      	ldr	r2, [pc, #424]	; (8000984 <printTemplate+0x2d8>)
 80007da:	2101      	movs	r1, #1
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff fec1 	bl	8000564 <lcd_print>
}
 80007e2:	e0aa      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 4) {
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d114      	bne.n	8000814 <printTemplate+0x168>
			lcd_clear();
 80007ea:	f7ff fee7 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f008 fa8a 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007f4:	4a5f      	ldr	r2, [pc, #380]	; (8000974 <printTemplate+0x2c8>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff feb3 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007fe:	4a5e      	ldr	r2, [pc, #376]	; (8000978 <printTemplate+0x2cc>)
 8000800:	2107      	movs	r1, #7
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff feae 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000808:	4a5f      	ldr	r2, [pc, #380]	; (8000988 <printTemplate+0x2dc>)
 800080a:	2101      	movs	r1, #1
 800080c:	2002      	movs	r0, #2
 800080e:	f7ff fea9 	bl	8000564 <lcd_print>
}
 8000812:	e092      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 5) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	2b05      	cmp	r3, #5
 8000818:	f040 808f 	bne.w	800093a <printTemplate+0x28e>
			lcd_clear();
 800081c:	f7ff fece 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f008 fa71 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000826:	4a53      	ldr	r2, [pc, #332]	; (8000974 <printTemplate+0x2c8>)
 8000828:	2101      	movs	r1, #1
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff fe9a 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000830:	4a51      	ldr	r2, [pc, #324]	; (8000978 <printTemplate+0x2cc>)
 8000832:	2107      	movs	r1, #7
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff fe95 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800083a:	4a54      	ldr	r2, [pc, #336]	; (800098c <printTemplate+0x2e0>)
 800083c:	2101      	movs	r1, #1
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff fe90 	bl	8000564 <lcd_print>
}
 8000844:	e079      	b.n	800093a <printTemplate+0x28e>
	} else if(type == 3) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b03      	cmp	r3, #3
 800084a:	d176      	bne.n	800093a <printTemplate+0x28e>
		if(page == 1) {
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d114      	bne.n	800087c <printTemplate+0x1d0>
			lcd_clear();
 8000852:	f7ff feb3 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000856:	2064      	movs	r0, #100	; 0x64
 8000858:	f008 fa56 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800085c:	4a4c      	ldr	r2, [pc, #304]	; (8000990 <printTemplate+0x2e4>)
 800085e:	2101      	movs	r1, #1
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fe7f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000866:	4a4b      	ldr	r2, [pc, #300]	; (8000994 <printTemplate+0x2e8>)
 8000868:	2107      	movs	r1, #7
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff fe7a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000870:	4a42      	ldr	r2, [pc, #264]	; (800097c <printTemplate+0x2d0>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fe75 	bl	8000564 <lcd_print>
}
 800087a:	e05e      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 2) {
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d114      	bne.n	80008ac <printTemplate+0x200>
			lcd_clear();
 8000882:	f7ff fe9b 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000886:	2064      	movs	r0, #100	; 0x64
 8000888:	f008 fa3e 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800088c:	4a40      	ldr	r2, [pc, #256]	; (8000990 <printTemplate+0x2e4>)
 800088e:	2101      	movs	r1, #1
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fe67 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000896:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <printTemplate+0x2e8>)
 8000898:	2107      	movs	r1, #7
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fe62 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008a0:	4a37      	ldr	r2, [pc, #220]	; (8000980 <printTemplate+0x2d4>)
 80008a2:	2101      	movs	r1, #1
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fe5d 	bl	8000564 <lcd_print>
}
 80008aa:	e046      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 3) {
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d114      	bne.n	80008dc <printTemplate+0x230>
			lcd_clear();
 80008b2:	f7ff fe83 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f008 fa26 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008bc:	4a34      	ldr	r2, [pc, #208]	; (8000990 <printTemplate+0x2e4>)
 80008be:	2101      	movs	r1, #1
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff fe4f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008c6:	4a33      	ldr	r2, [pc, #204]	; (8000994 <printTemplate+0x2e8>)
 80008c8:	2107      	movs	r1, #7
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff fe4a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008d0:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <printTemplate+0x2d8>)
 80008d2:	2101      	movs	r1, #1
 80008d4:	2002      	movs	r0, #2
 80008d6:	f7ff fe45 	bl	8000564 <lcd_print>
}
 80008da:	e02e      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 4) {
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d114      	bne.n	800090c <printTemplate+0x260>
			lcd_clear();
 80008e2:	f7ff fe6b 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008e6:	2064      	movs	r0, #100	; 0x64
 80008e8:	f008 fa0e 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008ec:	4a28      	ldr	r2, [pc, #160]	; (8000990 <printTemplate+0x2e4>)
 80008ee:	2101      	movs	r1, #1
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fe37 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008f6:	4a27      	ldr	r2, [pc, #156]	; (8000994 <printTemplate+0x2e8>)
 80008f8:	2107      	movs	r1, #7
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fe32 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <printTemplate+0x2dc>)
 8000902:	2101      	movs	r1, #1
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff fe2d 	bl	8000564 <lcd_print>
}
 800090a:	e016      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 5) {
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	2b05      	cmp	r3, #5
 8000910:	d113      	bne.n	800093a <printTemplate+0x28e>
			lcd_clear();
 8000912:	f7ff fe53 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000916:	2064      	movs	r0, #100	; 0x64
 8000918:	f008 f9f6 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <printTemplate+0x2e4>)
 800091e:	2101      	movs	r1, #1
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fe1f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000926:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <printTemplate+0x2e8>)
 8000928:	2107      	movs	r1, #7
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fe1a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <printTemplate+0x2e0>)
 8000932:	2101      	movs	r1, #1
 8000934:	2002      	movs	r0, #2
 8000936:	f7ff fe15 	bl	8000564 <lcd_print>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800cb50 	.word	0x0800cb50
 8000948:	0800cb58 	.word	0x0800cb58
 800094c:	0800cb5c 	.word	0x0800cb5c
 8000950:	0800cb60 	.word	0x0800cb60
 8000954:	0800cb64 	.word	0x0800cb64
 8000958:	0800cb68 	.word	0x0800cb68
 800095c:	0800cb6c 	.word	0x0800cb6c
 8000960:	0800cb70 	.word	0x0800cb70
 8000964:	0800cb74 	.word	0x0800cb74
 8000968:	0800cb78 	.word	0x0800cb78
 800096c:	0800cb7c 	.word	0x0800cb7c
 8000970:	20000bd8 	.word	0x20000bd8
 8000974:	0800cb80 	.word	0x0800cb80
 8000978:	20000be4 	.word	0x20000be4
 800097c:	0800cb88 	.word	0x0800cb88
 8000980:	0800cb9c 	.word	0x0800cb9c
 8000984:	0800cbb0 	.word	0x0800cbb0
 8000988:	0800cbc4 	.word	0x0800cbc4
 800098c:	0800cbd8 	.word	0x0800cbd8
 8000990:	0800cbec 	.word	0x0800cbec
 8000994:	20000bf8 	.word	0x20000bf8

08000998 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <getCharFromCursorPosition+0x1c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000960 	.word	0x20000960

080009b8 <takeMachineID>:
		strncpy(wifiPass, (char *)&eepromData[passStartPos], 20);
		wifiPass[20] = '\0';
	}
}

void takeMachineID(int state) {
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b08b      	sub	sp, #44	; 0x2c
 80009bc:	af04      	add	r7, sp, #16
 80009be:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fe2d 	bl	8000620 <lcd_cursor>

    int cursorPosition = 3;
 80009c6:	2303      	movs	r3, #3
 80009c8:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 80009ce:	2305      	movs	r3, #5
 80009d0:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 80009d8:	220c      	movs	r2, #12
 80009da:	2100      	movs	r1, #0
 80009dc:	4899      	ldr	r0, [pc, #612]	; (8000c44 <takeMachineID+0x28c>)
 80009de:	f00c f851 	bl	800ca84 <memset>
    }
    HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f008 f990 	bl	8008d08 <HAL_Delay>

    printTemplate(1, 0);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff fe5e 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80009f0:	2108      	movs	r1, #8
 80009f2:	4895      	ldr	r0, [pc, #596]	; (8000c48 <takeMachineID+0x290>)
 80009f4:	f008 ff58 	bl	80098a8 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d138      	bne.n	8000a70 <takeMachineID+0xb8>
        	lcd_cursor(0);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fe0e 	bl	8000620 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000a04:	4b8f      	ldr	r3, [pc, #572]	; (8000c44 <takeMachineID+0x28c>)
 8000a06:	7adb      	ldrb	r3, [r3, #11]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d110      	bne.n	8000a2e <takeMachineID+0x76>
        		lcd_clear();
 8000a0c:	f7ff fdd6 	bl	80005bc <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000a10:	4a8e      	ldr	r2, [pc, #568]	; (8000c4c <takeMachineID+0x294>)
 8000a12:	2101      	movs	r1, #1
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fda5 	bl	8000564 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000a1a:	4a8d      	ldr	r2, [pc, #564]	; (8000c50 <takeMachineID+0x298>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f7ff fda0 	bl	8000564 <lcd_print>
        		HAL_Delay(1200);
 8000a24:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000a28:	f008 f96e 	bl	8008d08 <HAL_Delay>
        		goto mainSection;
 8000a2c:	e7c8      	b.n	80009c0 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000a2e:	4b89      	ldr	r3, [pc, #548]	; (8000c54 <takeMachineID+0x29c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b88      	ldr	r3, [pc, #544]	; (8000c58 <takeMachineID+0x2a0>)
 8000a36:	4413      	add	r3, r2
 8000a38:	4a82      	ldr	r2, [pc, #520]	; (8000c44 <takeMachineID+0x28c>)
 8000a3a:	461c      	mov	r4, r3
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a40:	6020      	str	r0, [r4, #0]
 8000a42:	6061      	str	r1, [r4, #4]
 8000a44:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000a46:	20c8      	movs	r0, #200	; 0xc8
 8000a48:	f008 f95e 	bl	8008d08 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000a4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	236e      	movs	r3, #110	; 0x6e
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	4b80      	ldr	r3, [pc, #512]	; (8000c58 <takeMachineID+0x2a0>)
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	236e      	movs	r3, #110	; 0x6e
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	21a0      	movs	r1, #160	; 0xa0
 8000a60:	487e      	ldr	r0, [pc, #504]	; (8000c5c <takeMachineID+0x2a4>)
 8000a62:	f009 f9db 	bl	8009e1c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6a:	f008 f94d 	bl	8008d08 <HAL_Delay>

            break;
 8000a6e:	e0e5      	b.n	8000c3c <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000a70:	2101      	movs	r1, #1
 8000a72:	4875      	ldr	r0, [pc, #468]	; (8000c48 <takeMachineID+0x290>)
 8000a74:	f008 ff18 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d112      	bne.n	8000aa4 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d102      	bne.n	8000a8a <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000a84:	230a      	movs	r3, #10
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e008      	b.n	8000a9c <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2b0e      	cmp	r3, #14
 8000a8e:	d102      	bne.n	8000a96 <takeMachineID+0xde>
                cursorPosition = 3;
 8000a90:	2303      	movs	r3, #3
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e002      	b.n	8000a9c <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000a9c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000aa0:	f008 f932 	bl	8008d08 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	486e      	ldr	r0, [pc, #440]	; (8000c60 <takeMachineID+0x2a8>)
 8000aa8:	f008 fefe 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d112      	bne.n	8000ad8 <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d102      	bne.n	8000abe <takeMachineID+0x106>
                cursorPosition = 14;
 8000ab8:	230e      	movs	r3, #14
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e008      	b.n	8000ad0 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b0a      	cmp	r3, #10
 8000ac2:	d102      	bne.n	8000aca <takeMachineID+0x112>
            	cursorPosition = 7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e002      	b.n	8000ad0 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000ad0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ad4:	f008 f918 	bl	8008d08 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ad8:	2102      	movs	r1, #2
 8000ada:	485b      	ldr	r0, [pc, #364]	; (8000c48 <takeMachineID+0x290>)
 8000adc:	f008 fee4 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d16c      	bne.n	8000bc0 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d105      	bne.n	8000af8 <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000aec:	4a55      	ldr	r2, [pc, #340]	; (8000c44 <takeMachineID+0x28c>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4413      	add	r3, r2
 8000af2:	2230      	movs	r2, #48	; 0x30
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e04f      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d105      	bne.n	8000b0a <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000afe:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <takeMachineID+0x28c>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4413      	add	r3, r2
 8000b04:	2231      	movs	r2, #49	; 0x31
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e046      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d105      	bne.n	8000b1c <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000b10:	4a4c      	ldr	r2, [pc, #304]	; (8000c44 <takeMachineID+0x28c>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4413      	add	r3, r2
 8000b16:	2232      	movs	r2, #50	; 0x32
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e03d      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d105      	bne.n	8000b2e <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000b22:	4a48      	ldr	r2, [pc, #288]	; (8000c44 <takeMachineID+0x28c>)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4413      	add	r3, r2
 8000b28:	2233      	movs	r2, #51	; 0x33
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e034      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	2b07      	cmp	r3, #7
 8000b32:	d105      	bne.n	8000b40 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000b34:	4a43      	ldr	r2, [pc, #268]	; (8000c44 <takeMachineID+0x28c>)
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4413      	add	r3, r2
 8000b3a:	2234      	movs	r2, #52	; 0x34
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e02b      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b0a      	cmp	r3, #10
 8000b44:	d105      	bne.n	8000b52 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000b46:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <takeMachineID+0x28c>)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2235      	movs	r2, #53	; 0x35
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e022      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b0b      	cmp	r3, #11
 8000b56:	d105      	bne.n	8000b64 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000b58:	4a3a      	ldr	r2, [pc, #232]	; (8000c44 <takeMachineID+0x28c>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	2236      	movs	r2, #54	; 0x36
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e019      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	2b0c      	cmp	r3, #12
 8000b68:	d105      	bne.n	8000b76 <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <takeMachineID+0x28c>)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4413      	add	r3, r2
 8000b70:	2237      	movs	r2, #55	; 0x37
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	e010      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	d105      	bne.n	8000b88 <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000b7c:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <takeMachineID+0x28c>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4413      	add	r3, r2
 8000b82:	2238      	movs	r2, #56	; 0x38
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e007      	b.n	8000b98 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2b0e      	cmp	r3, #14
 8000b8c:	d104      	bne.n	8000b98 <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <takeMachineID+0x28c>)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4413      	add	r3, r2
 8000b94:	2239      	movs	r2, #57	; 0x39
 8000b96:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	b2d9      	uxtb	r1, r3
 8000b9c:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <takeMachineID+0x28c>)
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fcf1 	bl	800058e <lcd_print_char>

        	writeLoc++;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000bb8:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000bbc:	f008 f8a4 	bl	8008d08 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4821      	ldr	r0, [pc, #132]	; (8000c48 <takeMachineID+0x290>)
 8000bc4:	f008 fe70 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d12f      	bne.n	8000c2e <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <takeMachineID+0x28c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d027      	beq.n	8000c26 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <takeMachineID+0x28c>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4413      	add	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	3304      	adds	r3, #4
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fcf0 	bl	80005d0 <lcd_delete_char>
                HAL_Delay(50);
 8000bf0:	2032      	movs	r0, #50	; 0x32
 8000bf2:	f008 f889 	bl	8008d08 <HAL_Delay>

                if(writeLoc > 5) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b05      	cmp	r3, #5
 8000bfa:	dd03      	ble.n	8000c04 <takeMachineID+0x24c>
                	writeLoc--;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e004      	b.n	8000c0e <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	dc01      	bgt.n	8000c0e <takeMachineID+0x256>
                	writeLoc = 5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd03      	ble.n	8000c1c <takeMachineID+0x264>
                	machineIDLoc--;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e004      	b.n	8000c26 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da01      	bge.n	8000c26 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000c26:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c2a:	f008 f86d 	bl	8008d08 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4619      	mov	r1, r3
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fc76 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c3a:	e6d9      	b.n	80009f0 <takeMachineID+0x38>
    }
}
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	20000bd8 	.word	0x20000bd8
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	0800cbf4 	.word	0x0800cbf4
 8000c50:	0800cc08 	.word	0x0800cc08
 8000c54:	200009b1 	.word	0x200009b1
 8000c58:	20000b40 	.word	0x20000b40
 8000c5c:	20000a5c 	.word	0x20000a5c
 8000c60:	40011000 	.word	0x40011000

08000c64 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b08b      	sub	sp, #44	; 0x2c
 8000c68:	af04      	add	r7, sp, #16
 8000c6a:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fcd7 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d104      	bne.n	8000c82 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000c78:	2214      	movs	r2, #20
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	488f      	ldr	r0, [pc, #572]	; (8000ebc <takeWifiSSID+0x258>)
 8000c7e:	f00b ff01 	bl	800ca84 <memset>
    }

    int realCharPos = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000c86:	4b8e      	ldr	r3, [pc, #568]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
    page = 1;
 8000c8c:	4b8d      	ldr	r3, [pc, #564]	; (8000ec4 <takeWifiSSID+0x260>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000c96:	2307      	movs	r3, #7
 8000c98:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f7ff fd05 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4888      	ldr	r0, [pc, #544]	; (8000ec8 <takeWifiSSID+0x264>)
 8000ca6:	f008 fdff 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d139      	bne.n	8000d24 <takeWifiSSID+0xc0>
            lcd_cursor(0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fcb5 	bl	8000620 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000cb6:	4881      	ldr	r0, [pc, #516]	; (8000ebc <takeWifiSSID+0x258>)
 8000cb8:	f7ff fab4 	bl	8000224 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b14      	cmp	r3, #20
 8000cc0:	d910      	bls.n	8000ce4 <takeWifiSSID+0x80>
                lcd_clear();
 8000cc2:	f7ff fc7b 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000cc6:	4a81      	ldr	r2, [pc, #516]	; (8000ecc <takeWifiSSID+0x268>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fc4a 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000cd0:	4a7f      	ldr	r2, [pc, #508]	; (8000ed0 <takeWifiSSID+0x26c>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff fc45 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8000cda:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000cde:	f008 f813 	bl	8008d08 <HAL_Delay>
                goto mainSSIDSection;
 8000ce2:	e7c3      	b.n	8000c6c <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8000ce4:	4b7b      	ldr	r3, [pc, #492]	; (8000ed4 <takeWifiSSID+0x270>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b7b      	ldr	r3, [pc, #492]	; (8000ed8 <takeWifiSSID+0x274>)
 8000cec:	18d4      	adds	r4, r2, r3
 8000cee:	4873      	ldr	r0, [pc, #460]	; (8000ebc <takeWifiSSID+0x258>)
 8000cf0:	f7ff fa98 	bl	8000224 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4970      	ldr	r1, [pc, #448]	; (8000ebc <takeWifiSSID+0x258>)
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f00b ff0e 	bl	800cb1c <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000d00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d04:	9302      	str	r3, [sp, #8]
 8000d06:	236e      	movs	r3, #110	; 0x6e
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	4b73      	ldr	r3, [pc, #460]	; (8000ed8 <takeWifiSSID+0x274>)
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	236e      	movs	r3, #110	; 0x6e
 8000d10:	2200      	movs	r2, #0
 8000d12:	21a0      	movs	r1, #160	; 0xa0
 8000d14:	4871      	ldr	r0, [pc, #452]	; (8000edc <takeWifiSSID+0x278>)
 8000d16:	f009 f881 	bl	8009e1c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000d1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d1e:	f007 fff3 	bl	8008d08 <HAL_Delay>

            break;
 8000d22:	e14b      	b.n	8000fbc <takeWifiSSID+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d24:	2101      	movs	r1, #1
 8000d26:	4868      	ldr	r0, [pc, #416]	; (8000ec8 <takeWifiSSID+0x264>)
 8000d28:	f008 fdbe 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d166      	bne.n	8000e00 <takeWifiSSID+0x19c>
        	realCharPos++;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2b50      	cmp	r3, #80	; 0x50
 8000d3c:	dd01      	ble.n	8000d42 <takeWifiSSID+0xde>
        		realCharPos = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000d42:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b10      	cmp	r3, #16
 8000d48:	d152      	bne.n	8000df0 <takeWifiSSID+0x18c>
            	if(page == 1) {
 8000d4a:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <takeWifiSSID+0x260>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d10c      	bne.n	8000d6c <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8000d52:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
            		page++;
 8000d58:	4b5a      	ldr	r3, [pc, #360]	; (8000ec4 <takeWifiSSID+0x260>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a59      	ldr	r2, [pc, #356]	; (8000ec4 <takeWifiSSID+0x260>)
 8000d60:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000d62:	2102      	movs	r1, #2
 8000d64:	2002      	movs	r0, #2
 8000d66:	f7ff fca1 	bl	80006ac <printTemplate>
 8000d6a:	e046      	b.n	8000dfa <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8000d6c:	4b55      	ldr	r3, [pc, #340]	; (8000ec4 <takeWifiSSID+0x260>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d10c      	bne.n	8000d8e <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 8000d74:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
            		page++;
 8000d7a:	4b52      	ldr	r3, [pc, #328]	; (8000ec4 <takeWifiSSID+0x260>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4a50      	ldr	r2, [pc, #320]	; (8000ec4 <takeWifiSSID+0x260>)
 8000d82:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000d84:	2103      	movs	r1, #3
 8000d86:	2002      	movs	r0, #2
 8000d88:	f7ff fc90 	bl	80006ac <printTemplate>
 8000d8c:	e035      	b.n	8000dfa <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <takeWifiSSID+0x260>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d10c      	bne.n	8000db0 <takeWifiSSID+0x14c>
            		cursorPosition = 1;
 8000d96:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
            		page++;
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <takeWifiSSID+0x260>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <takeWifiSSID+0x260>)
 8000da4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000da6:	2104      	movs	r1, #4
 8000da8:	2002      	movs	r0, #2
 8000daa:	f7ff fc7f 	bl	80006ac <printTemplate>
 8000dae:	e024      	b.n	8000dfa <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8000db0:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <takeWifiSSID+0x260>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d10c      	bne.n	8000dd2 <takeWifiSSID+0x16e>
            		cursorPosition = 1;
 8000db8:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
            		page++;
 8000dbe:	4b41      	ldr	r3, [pc, #260]	; (8000ec4 <takeWifiSSID+0x260>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a3f      	ldr	r2, [pc, #252]	; (8000ec4 <takeWifiSSID+0x260>)
 8000dc6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000dc8:	2105      	movs	r1, #5
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f7ff fc6e 	bl	80006ac <printTemplate>
 8000dd0:	e013      	b.n	8000dfa <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <takeWifiSSID+0x260>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d10f      	bne.n	8000dfa <takeWifiSSID+0x196>
            		cursorPosition = 1;
 8000dda:	4b39      	ldr	r3, [pc, #228]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <takeWifiSSID+0x260>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000de6:	2101      	movs	r1, #1
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff fc5f 	bl	80006ac <printTemplate>
 8000dee:	e004      	b.n	8000dfa <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition++;
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000df8:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000dfa:	20fa      	movs	r0, #250	; 0xfa
 8000dfc:	f007 ff84 	bl	8008d08 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000e00:	2108      	movs	r1, #8
 8000e02:	4837      	ldr	r0, [pc, #220]	; (8000ee0 <takeWifiSSID+0x27c>)
 8000e04:	f008 fd50 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d172      	bne.n	8000ef4 <takeWifiSSID+0x290>
        	realCharPos--;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	dc01      	bgt.n	8000e1e <takeWifiSSID+0x1ba>
        		realCharPos = 80;
 8000e1a:	2350      	movs	r3, #80	; 0x50
 8000e1c:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d15e      	bne.n	8000ee4 <takeWifiSSID+0x280>
            	if(page == 1) {
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <takeWifiSSID+0x260>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d10a      	bne.n	8000e44 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000e30:	2210      	movs	r2, #16
 8000e32:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <takeWifiSSID+0x260>)
 8000e36:	2205      	movs	r2, #5
 8000e38:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f7ff fc35 	bl	80006ac <printTemplate>
 8000e42:	e054      	b.n	8000eee <takeWifiSSID+0x28a>
            	} else if(page == 2) {
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <takeWifiSSID+0x260>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d10a      	bne.n	8000e62 <takeWifiSSID+0x1fe>
            		cursorPosition = 16;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000e4e:	2210      	movs	r2, #16
 8000e50:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <takeWifiSSID+0x260>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f7ff fc26 	bl	80006ac <printTemplate>
 8000e60:	e045      	b.n	8000eee <takeWifiSSID+0x28a>
            	} else if(page == 3) {
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <takeWifiSSID+0x260>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d10a      	bne.n	8000e80 <takeWifiSSID+0x21c>
            		cursorPosition = 16;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <takeWifiSSID+0x260>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000e76:	2102      	movs	r1, #2
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff fc17 	bl	80006ac <printTemplate>
 8000e7e:	e036      	b.n	8000eee <takeWifiSSID+0x28a>
            	} else if(page == 4) {
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <takeWifiSSID+0x260>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d10a      	bne.n	8000e9e <takeWifiSSID+0x23a>
            		cursorPosition = 16;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000e8a:	2210      	movs	r2, #16
 8000e8c:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <takeWifiSSID+0x260>)
 8000e90:	2203      	movs	r2, #3
 8000e92:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000e94:	2103      	movs	r1, #3
 8000e96:	2002      	movs	r0, #2
 8000e98:	f7ff fc08 	bl	80006ac <printTemplate>
 8000e9c:	e027      	b.n	8000eee <takeWifiSSID+0x28a>
            	} else if(page == 5) {
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <takeWifiSSID+0x260>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	d123      	bne.n	8000eee <takeWifiSSID+0x28a>
            		cursorPosition = 16;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <takeWifiSSID+0x25c>)
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <takeWifiSSID+0x260>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff fbf9 	bl	80006ac <printTemplate>
 8000eba:	e018      	b.n	8000eee <takeWifiSSID+0x28a>
 8000ebc:	20000be4 	.word	0x20000be4
 8000ec0:	20000944 	.word	0x20000944
 8000ec4:	20000948 	.word	0x20000948
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	0800cc1c 	.word	0x0800cc1c
 8000ed0:	0800cc30 	.word	0x0800cc30
 8000ed4:	200009b2 	.word	0x200009b2
 8000ed8:	20000b40 	.word	0x20000b40
 8000edc:	20000a5c 	.word	0x20000a5c
 8000ee0:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000ee4:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <takeWifiSSID+0x360>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	4a36      	ldr	r2, [pc, #216]	; (8000fc4 <takeWifiSSID+0x360>)
 8000eec:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000eee:	20fa      	movs	r0, #250	; 0xfa
 8000ef0:	f007 ff0a 	bl	8008d08 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4834      	ldr	r0, [pc, #208]	; (8000fc8 <takeWifiSSID+0x364>)
 8000ef8:	f008 fcd6 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d11e      	bne.n	8000f40 <takeWifiSSID+0x2dc>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fd46 	bl	8000998 <getCharFromCursorPosition>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <takeWifiSSID+0x368>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4413      	add	r3, r2
 8000f16:	460a      	mov	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <takeWifiSSID+0x368>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff fb30 	bl	800058e <lcd_print_char>

            writeLoc++;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	3301      	adds	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000f3a:	20fa      	movs	r0, #250	; 0xfa
 8000f3c:	f007 fee4 	bl	8008d08 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f40:	2104      	movs	r1, #4
 8000f42:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <takeWifiSSID+0x364>)
 8000f44:	f008 fcb0 	bl	80098a8 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d12e      	bne.n	8000fac <takeWifiSSID+0x348>
        	if(strlen(wifiSSID) >= 1) {
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <takeWifiSSID+0x368>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d027      	beq.n	8000fa6 <takeWifiSSID+0x342>
        		wifiSSID[wifiNameLoc] = '\0';
 8000f56:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <takeWifiSSID+0x368>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	3306      	adds	r3, #6
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f7ff fb30 	bl	80005d0 <lcd_delete_char>
        		HAL_Delay(50);
 8000f70:	2032      	movs	r0, #50	; 0x32
 8000f72:	f007 fec9 	bl	8008d08 <HAL_Delay>
        		if(writeLoc > 7) {
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	dd03      	ble.n	8000f84 <takeWifiSSID+0x320>
        			writeLoc--;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e004      	b.n	8000f8e <takeWifiSSID+0x32a>
        		} else if(writeLoc < 7) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	dc01      	bgt.n	8000f8e <takeWifiSSID+0x32a>
        			writeLoc = 7;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd03      	ble.n	8000f9c <takeWifiSSID+0x338>
        			wifiNameLoc--;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	e004      	b.n	8000fa6 <takeWifiSSID+0x342>
        		} else if(wifiNameLoc < 0) {
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da01      	bge.n	8000fa6 <takeWifiSSID+0x342>
        			wifiNameLoc = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 8000fa6:	20fa      	movs	r0, #250	; 0xfa
 8000fa8:	f007 feae 	bl	8008d08 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <takeWifiSSID+0x360>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f7ff fab6 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fba:	e672      	b.n	8000ca2 <takeWifiSSID+0x3e>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	20000944 	.word	0x20000944
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	20000be4 	.word	0x20000be4

08000fd0 <takeWifiPass>:

void takeWifiPass(int state) {
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f7ff fb21 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d104      	bne.n	8000fee <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8000fe4:	2214      	movs	r2, #20
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	488f      	ldr	r0, [pc, #572]	; (8001228 <takeWifiPass+0x258>)
 8000fea:	f00b fd4b 	bl	800ca84 <memset>
    }

    int realCharPos = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000ff2:	4b8e      	ldr	r3, [pc, #568]	; (800122c <takeWifiPass+0x25c>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
    page = 1;
 8000ff8:	4b8d      	ldr	r3, [pc, #564]	; (8001230 <takeWifiPass+0x260>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001002:	2307      	movs	r3, #7
 8001004:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 8001006:	2101      	movs	r1, #1
 8001008:	2003      	movs	r0, #3
 800100a:	f7ff fb4f 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800100e:	2108      	movs	r1, #8
 8001010:	4888      	ldr	r0, [pc, #544]	; (8001234 <takeWifiPass+0x264>)
 8001012:	f008 fc49 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	d139      	bne.n	8001090 <takeWifiPass+0xc0>
            lcd_cursor(0);
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff faff 	bl	8000620 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8001022:	4881      	ldr	r0, [pc, #516]	; (8001228 <takeWifiPass+0x258>)
 8001024:	f7ff f8fe 	bl	8000224 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	2b14      	cmp	r3, #20
 800102c:	d910      	bls.n	8001050 <takeWifiPass+0x80>
                lcd_clear();
 800102e:	f7ff fac5 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8001032:	4a81      	ldr	r2, [pc, #516]	; (8001238 <takeWifiPass+0x268>)
 8001034:	2101      	movs	r1, #1
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fa94 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800103c:	4a7f      	ldr	r2, [pc, #508]	; (800123c <takeWifiPass+0x26c>)
 800103e:	2101      	movs	r1, #1
 8001040:	2002      	movs	r0, #2
 8001042:	f7ff fa8f 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8001046:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800104a:	f007 fe5d 	bl	8008d08 <HAL_Delay>
                goto mainPASSSection;
 800104e:	e7c3      	b.n	8000fd8 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 8001050:	4b7b      	ldr	r3, [pc, #492]	; (8001240 <takeWifiPass+0x270>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <takeWifiPass+0x274>)
 8001058:	18d4      	adds	r4, r2, r3
 800105a:	4873      	ldr	r0, [pc, #460]	; (8001228 <takeWifiPass+0x258>)
 800105c:	f7ff f8e2 	bl	8000224 <strlen>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4970      	ldr	r1, [pc, #448]	; (8001228 <takeWifiPass+0x258>)
 8001066:	4620      	mov	r0, r4
 8001068:	f00b fd58 	bl	800cb1c <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800106c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	236e      	movs	r3, #110	; 0x6e
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	4b73      	ldr	r3, [pc, #460]	; (8001244 <takeWifiPass+0x274>)
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	236e      	movs	r3, #110	; 0x6e
 800107c:	2200      	movs	r2, #0
 800107e:	21a0      	movs	r1, #160	; 0xa0
 8001080:	4871      	ldr	r0, [pc, #452]	; (8001248 <takeWifiPass+0x278>)
 8001082:	f008 fecb 	bl	8009e1c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8001086:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108a:	f007 fe3d 	bl	8008d08 <HAL_Delay>

            break;
 800108e:	e14b      	b.n	8001328 <takeWifiPass+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001090:	2101      	movs	r1, #1
 8001092:	4868      	ldr	r0, [pc, #416]	; (8001234 <takeWifiPass+0x264>)
 8001094:	f008 fc08 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d166      	bne.n	800116c <takeWifiPass+0x19c>
        	realCharPos++;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b50      	cmp	r3, #80	; 0x50
 80010a8:	dd01      	ble.n	80010ae <takeWifiPass+0xde>
        	    realCharPos = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80010ae:	4b5f      	ldr	r3, [pc, #380]	; (800122c <takeWifiPass+0x25c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d152      	bne.n	800115c <takeWifiPass+0x18c>
            	if(page == 1) {
 80010b6:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <takeWifiPass+0x260>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10c      	bne.n	80010d8 <takeWifiPass+0x108>
            		cursorPosition = 1;
 80010be:	4b5b      	ldr	r3, [pc, #364]	; (800122c <takeWifiPass+0x25c>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
            		page++;
 80010c4:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <takeWifiPass+0x260>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a59      	ldr	r2, [pc, #356]	; (8001230 <takeWifiPass+0x260>)
 80010cc:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80010ce:	2102      	movs	r1, #2
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff faeb 	bl	80006ac <printTemplate>
 80010d6:	e046      	b.n	8001166 <takeWifiPass+0x196>
            	} else if(page == 2) {
 80010d8:	4b55      	ldr	r3, [pc, #340]	; (8001230 <takeWifiPass+0x260>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d10c      	bne.n	80010fa <takeWifiPass+0x12a>
            		cursorPosition = 1;
 80010e0:	4b52      	ldr	r3, [pc, #328]	; (800122c <takeWifiPass+0x25c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
            		page++;
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <takeWifiPass+0x260>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <takeWifiPass+0x260>)
 80010ee:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80010f0:	2103      	movs	r1, #3
 80010f2:	2003      	movs	r0, #3
 80010f4:	f7ff fada 	bl	80006ac <printTemplate>
 80010f8:	e035      	b.n	8001166 <takeWifiPass+0x196>
            	} else if(page == 3) {
 80010fa:	4b4d      	ldr	r3, [pc, #308]	; (8001230 <takeWifiPass+0x260>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d10c      	bne.n	800111c <takeWifiPass+0x14c>
            		cursorPosition = 1;
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <takeWifiPass+0x25c>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
            		page++;
 8001108:	4b49      	ldr	r3, [pc, #292]	; (8001230 <takeWifiPass+0x260>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a48      	ldr	r2, [pc, #288]	; (8001230 <takeWifiPass+0x260>)
 8001110:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001112:	2104      	movs	r1, #4
 8001114:	2003      	movs	r0, #3
 8001116:	f7ff fac9 	bl	80006ac <printTemplate>
 800111a:	e024      	b.n	8001166 <takeWifiPass+0x196>
            	} else if(page == 4) {
 800111c:	4b44      	ldr	r3, [pc, #272]	; (8001230 <takeWifiPass+0x260>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d10c      	bne.n	800113e <takeWifiPass+0x16e>
            		cursorPosition = 1;
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <takeWifiPass+0x25c>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
            		page++;
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <takeWifiPass+0x260>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a3f      	ldr	r2, [pc, #252]	; (8001230 <takeWifiPass+0x260>)
 8001132:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001134:	2105      	movs	r1, #5
 8001136:	2003      	movs	r0, #3
 8001138:	f7ff fab8 	bl	80006ac <printTemplate>
 800113c:	e013      	b.n	8001166 <takeWifiPass+0x196>
            	} else if(page == 5) {
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <takeWifiPass+0x260>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b05      	cmp	r3, #5
 8001144:	d10f      	bne.n	8001166 <takeWifiPass+0x196>
            		cursorPosition = 1;
 8001146:	4b39      	ldr	r3, [pc, #228]	; (800122c <takeWifiPass+0x25c>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
            		page = 1;
 800114c:	4b38      	ldr	r3, [pc, #224]	; (8001230 <takeWifiPass+0x260>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001152:	2101      	movs	r1, #1
 8001154:	2003      	movs	r0, #3
 8001156:	f7ff faa9 	bl	80006ac <printTemplate>
 800115a:	e004      	b.n	8001166 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition++;
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <takeWifiPass+0x25c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <takeWifiPass+0x25c>)
 8001164:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001166:	20fa      	movs	r0, #250	; 0xfa
 8001168:	f007 fdce 	bl	8008d08 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800116c:	2108      	movs	r1, #8
 800116e:	4837      	ldr	r0, [pc, #220]	; (800124c <takeWifiPass+0x27c>)
 8001170:	f008 fb9a 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d172      	bne.n	8001260 <takeWifiPass+0x290>
        	realCharPos--;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3b01      	subs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	dc01      	bgt.n	800118a <takeWifiPass+0x1ba>
        	    realCharPos = 80;
 8001186:	2350      	movs	r3, #80	; 0x50
 8001188:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <takeWifiPass+0x25c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d15e      	bne.n	8001250 <takeWifiPass+0x280>
            	if(page == 1) {
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <takeWifiPass+0x260>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d10a      	bne.n	80011b0 <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <takeWifiPass+0x25c>)
 800119c:	2210      	movs	r2, #16
 800119e:	601a      	str	r2, [r3, #0]
            		page = 5;
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <takeWifiPass+0x260>)
 80011a2:	2205      	movs	r2, #5
 80011a4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80011a6:	2105      	movs	r1, #5
 80011a8:	2003      	movs	r0, #3
 80011aa:	f7ff fa7f 	bl	80006ac <printTemplate>
 80011ae:	e054      	b.n	800125a <takeWifiPass+0x28a>
            	} else if(page == 2) {
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <takeWifiPass+0x260>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d10a      	bne.n	80011ce <takeWifiPass+0x1fe>
            		cursorPosition = 16;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <takeWifiPass+0x25c>)
 80011ba:	2210      	movs	r2, #16
 80011bc:	601a      	str	r2, [r3, #0]
            		page = 1;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <takeWifiPass+0x260>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2003      	movs	r0, #3
 80011c8:	f7ff fa70 	bl	80006ac <printTemplate>
 80011cc:	e045      	b.n	800125a <takeWifiPass+0x28a>
            	} else if(page == 3) {
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <takeWifiPass+0x260>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d10a      	bne.n	80011ec <takeWifiPass+0x21c>
            		cursorPosition = 16;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <takeWifiPass+0x25c>)
 80011d8:	2210      	movs	r2, #16
 80011da:	601a      	str	r2, [r3, #0]
            		page = 2;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <takeWifiPass+0x260>)
 80011de:	2202      	movs	r2, #2
 80011e0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80011e2:	2102      	movs	r1, #2
 80011e4:	2003      	movs	r0, #3
 80011e6:	f7ff fa61 	bl	80006ac <printTemplate>
 80011ea:	e036      	b.n	800125a <takeWifiPass+0x28a>
            	} else if(page == 4) {
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <takeWifiPass+0x260>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d10a      	bne.n	800120a <takeWifiPass+0x23a>
            		cursorPosition = 16;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <takeWifiPass+0x25c>)
 80011f6:	2210      	movs	r2, #16
 80011f8:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <takeWifiPass+0x260>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001200:	2103      	movs	r1, #3
 8001202:	2003      	movs	r0, #3
 8001204:	f7ff fa52 	bl	80006ac <printTemplate>
 8001208:	e027      	b.n	800125a <takeWifiPass+0x28a>
            	} else if(page == 5) {
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <takeWifiPass+0x260>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b05      	cmp	r3, #5
 8001210:	d123      	bne.n	800125a <takeWifiPass+0x28a>
            		cursorPosition = 16;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <takeWifiPass+0x25c>)
 8001214:	2210      	movs	r2, #16
 8001216:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <takeWifiPass+0x260>)
 800121a:	2204      	movs	r2, #4
 800121c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800121e:	2104      	movs	r1, #4
 8001220:	2003      	movs	r0, #3
 8001222:	f7ff fa43 	bl	80006ac <printTemplate>
 8001226:	e018      	b.n	800125a <takeWifiPass+0x28a>
 8001228:	20000bf8 	.word	0x20000bf8
 800122c:	20000944 	.word	0x20000944
 8001230:	20000948 	.word	0x20000948
 8001234:	40010800 	.word	0x40010800
 8001238:	0800cc1c 	.word	0x0800cc1c
 800123c:	0800cc44 	.word	0x0800cc44
 8001240:	200009b3 	.word	0x200009b3
 8001244:	20000b40 	.word	0x20000b40
 8001248:	20000a5c 	.word	0x20000a5c
 800124c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001250:	4b37      	ldr	r3, [pc, #220]	; (8001330 <takeWifiPass+0x360>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4a36      	ldr	r2, [pc, #216]	; (8001330 <takeWifiPass+0x360>)
 8001258:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800125a:	20fa      	movs	r0, #250	; 0xfa
 800125c:	f007 fd54 	bl	8008d08 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001260:	2102      	movs	r1, #2
 8001262:	4834      	ldr	r0, [pc, #208]	; (8001334 <takeWifiPass+0x364>)
 8001264:	f008 fb20 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d11e      	bne.n	80012ac <takeWifiPass+0x2dc>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3b01      	subs	r3, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fb90 	bl	8000998 <getCharFromCursorPosition>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	4a2e      	ldr	r2, [pc, #184]	; (8001338 <takeWifiPass+0x368>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4413      	add	r3, r2
 8001282:	460a      	mov	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	b2d9      	uxtb	r1, r3
 800128a:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <takeWifiPass+0x368>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff f97a 	bl	800058e <lcd_print_char>

            writeLoc++;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	3301      	adds	r3, #1
 80012a4:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 80012a6:	20fa      	movs	r0, #250	; 0xfa
 80012a8:	f007 fd2e 	bl	8008d08 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80012ac:	2104      	movs	r1, #4
 80012ae:	4821      	ldr	r0, [pc, #132]	; (8001334 <takeWifiPass+0x364>)
 80012b0:	f008 fafa 	bl	80098a8 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d12e      	bne.n	8001318 <takeWifiPass+0x348>
            if(strlen(wifiPass) >= 1) {
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <takeWifiPass+0x368>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d027      	beq.n	8001312 <takeWifiPass+0x342>
            	wifiPass[wifiPassLoc] = '\0';
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <takeWifiPass+0x368>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3306      	adds	r3, #6
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4619      	mov	r1, r3
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff f97a 	bl	80005d0 <lcd_delete_char>
            	HAL_Delay(50);
 80012dc:	2032      	movs	r0, #50	; 0x32
 80012de:	f007 fd13 	bl	8008d08 <HAL_Delay>

            	if(writeLoc > 7) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	dd03      	ble.n	80012f0 <takeWifiPass+0x320>
            		writeLoc--;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e004      	b.n	80012fa <takeWifiPass+0x32a>
            	} else if(writeLoc < 7) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	dc01      	bgt.n	80012fa <takeWifiPass+0x32a>
            		writeLoc = 7;
 80012f6:	2307      	movs	r3, #7
 80012f8:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dd03      	ble.n	8001308 <takeWifiPass+0x338>
            		wifiPassLoc--;
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	3b01      	subs	r3, #1
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	e004      	b.n	8001312 <takeWifiPass+0x342>
            	} else if(wifiPassLoc < 0) {
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	da01      	bge.n	8001312 <takeWifiPass+0x342>
            		wifiPassLoc = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8001312:	20fa      	movs	r0, #250	; 0xfa
 8001314:	f007 fcf8 	bl	8008d08 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <takeWifiPass+0x360>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	2002      	movs	r0, #2
 8001322:	f7ff f900 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001326:	e672      	b.n	800100e <takeWifiPass+0x3e>
    }
}
 8001328:	bf00      	nop
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}
 8001330:	20000944 	.word	0x20000944
 8001334:	40010800 	.word	0x40010800
 8001338:	20000bf8 	.word	0x20000bf8

0800133c <checkSlideVal>:

int checkSlideVal(int state) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d111      	bne.n	800136e <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800134a:	2101      	movs	r1, #1
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <checkSlideVal+0x60>)
 800134e:	f008 faab 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <checkSlideVal+0x20>
			return 34;
 8001358:	2322      	movs	r3, #34	; 0x22
 800135a:	e01b      	b.n	8001394 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800135c:	2108      	movs	r1, #8
 800135e:	4810      	ldr	r0, [pc, #64]	; (80013a0 <checkSlideVal+0x64>)
 8001360:	f008 faa2 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d113      	bne.n	8001392 <checkSlideVal+0x56>
			return 32;
 800136a:	2320      	movs	r3, #32
 800136c:	e012      	b.n	8001394 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800136e:	2101      	movs	r1, #1
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <checkSlideVal+0x60>)
 8001372:	f008 fa99 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <checkSlideVal+0x44>
			return 35;
 800137c:	2323      	movs	r3, #35	; 0x23
 800137e:	e009      	b.n	8001394 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001380:	2108      	movs	r1, #8
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <checkSlideVal+0x64>)
 8001384:	f008 fa90 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <checkSlideVal+0x56>
			return 33;
 800138e:	2321      	movs	r3, #33	; 0x21
 8001390:	e000      	b.n	8001394 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40010800 	.word	0x40010800
 80013a0:	40011000 	.word	0x40011000

080013a4 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7fe ff36 	bl	8000224 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80013c0:	e08a      	b.n	80014d8 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80013c2:	6838      	ldr	r0, [r7, #0]
 80013c4:	f7ff ffba 	bl	800133c <checkSlideVal>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dd07      	ble.n	80013de <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80013ce:	6838      	ldr	r0, [r7, #0]
 80013d0:	f7ff ffb4 	bl	800133c <checkSlideVal>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <slideText+0x148>)
 80013da:	701a      	strb	r2, [r3, #0]
			break;
 80013dc:	e081      	b.n	80014e2 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	e075      	b.n	80014d0 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f7ff ffa9 	bl	800133c <checkSlideVal>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd09      	ble.n	8001404 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	f7ff ffa3 	bl	800133c <checkSlideVal>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <slideText+0x148>)
 80013fc:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001402:	e069      	b.n	80014d8 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	4413      	add	r3, r2
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e029      	b.n	8001462 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f7ff ff94 	bl	800133c <checkSlideVal>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	dd0b      	ble.n	8001432 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f7ff ff8e 	bl	800133c <checkSlideVal>
 8001420:	4603      	mov	r3, r0
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <slideText+0x148>)
 8001426:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001430:	e01d      	b.n	800146e <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	b2d8      	uxtb	r0, r3
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	b2d9      	uxtb	r1, r3
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	461a      	mov	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	f7ff f89c 	bl	800058e <lcd_print_char>
				HAL_Delay(30);
 8001456:	201e      	movs	r0, #30
 8001458:	f007 fc56 	bl	8008d08 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	3301      	adds	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	7dfa      	ldrb	r2, [r7, #23]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4413      	add	r3, r2
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	429a      	cmp	r2, r3
 800146c:	dbcf      	blt.n	800140e <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	3b01      	subs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	e023      	b.n	80014be <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001476:	6838      	ldr	r0, [r7, #0]
 8001478:	f7ff ff60 	bl	800133c <checkSlideVal>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	dd0b      	ble.n	800149a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f7ff ff5a 	bl	800133c <checkSlideVal>
 8001488:	4603      	mov	r3, r0
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <slideText+0x148>)
 800148e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001498:	e017      	b.n	80014ca <slideText+0x126>
				}
			     if(j >= startPos) {
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	429a      	cmp	r2, r3
 80014a0:	db0a      	blt.n	80014b8 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	b2d1      	uxtb	r1, r2
 80014aa:	2220      	movs	r2, #32
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f86e 	bl	800058e <lcd_print_char>
			    	 HAL_Delay(30);
 80014b2:	201e      	movs	r0, #30
 80014b4:	f007 fc28 	bl	8008d08 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	7dfa      	ldrb	r2, [r7, #23]
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dad5      	bge.n	8001476 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	3301      	adds	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	db85      	blt.n	80013e4 <slideText+0x40>
	while(mainLoopVal == 1) {
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	2b01      	cmp	r3, #1
 80014dc:	f43f af71 	beq.w	80013c2 <slideText+0x1e>
			     }
			}
		}
	}
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000c10 	.word	0x20000c10

080014f0 <menu>:

void menu() {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014f4:	2101      	movs	r1, #1
 80014f6:	488f      	ldr	r0, [pc, #572]	; (8001734 <menu+0x244>)
 80014f8:	f008 f9d6 	bl	80098a8 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b01      	cmp	r3, #1
 8001500:	f040 808e 	bne.w	8001620 <menu+0x130>
 8001504:	4b8c      	ldr	r3, [pc, #560]	; (8001738 <menu+0x248>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	f083 0301 	eor.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8086 	beq.w	8001620 <menu+0x130>
		menuSayac = menuSayac+1;
 8001514:	4b89      	ldr	r3, [pc, #548]	; (800173c <menu+0x24c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b87      	ldr	r3, [pc, #540]	; (800173c <menu+0x24c>)
 800151e:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001520:	4b86      	ldr	r3, [pc, #536]	; (800173c <menu+0x24c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b24      	cmp	r3, #36	; 0x24
 8001526:	d102      	bne.n	800152e <menu+0x3e>
			menuSayac = 1;
 8001528:	4b84      	ldr	r3, [pc, #528]	; (800173c <menu+0x24c>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800152e:	4b83      	ldr	r3, [pc, #524]	; (800173c <menu+0x24c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b12      	cmp	r3, #18
 8001534:	d106      	bne.n	8001544 <menu+0x54>
 8001536:	4b82      	ldr	r3, [pc, #520]	; (8001740 <menu+0x250>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <menu+0x54>
			menuSayac = 21;
 800153e:	4b7f      	ldr	r3, [pc, #508]	; (800173c <menu+0x24c>)
 8001540:	2215      	movs	r2, #21
 8001542:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001544:	4b7d      	ldr	r3, [pc, #500]	; (800173c <menu+0x24c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b08      	cmp	r3, #8
 800154a:	d106      	bne.n	800155a <menu+0x6a>
 800154c:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <menu+0x254>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <menu+0x6a>
			menuSayac = 16;
 8001554:	4b79      	ldr	r3, [pc, #484]	; (800173c <menu+0x24c>)
 8001556:	2210      	movs	r2, #16
 8001558:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800155a:	4b78      	ldr	r3, [pc, #480]	; (800173c <menu+0x24c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b0d      	cmp	r3, #13
 8001560:	d106      	bne.n	8001570 <menu+0x80>
 8001562:	4b78      	ldr	r3, [pc, #480]	; (8001744 <menu+0x254>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d102      	bne.n	8001570 <menu+0x80>
			menuSayac = 16;
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <menu+0x24c>)
 800156c:	2210      	movs	r2, #16
 800156e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001570:	4b72      	ldr	r3, [pc, #456]	; (800173c <menu+0x24c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d106      	bne.n	8001586 <menu+0x96>
 8001578:	4b72      	ldr	r3, [pc, #456]	; (8001744 <menu+0x254>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d102      	bne.n	8001586 <menu+0x96>
			menuSayac = 13;
 8001580:	4b6e      	ldr	r3, [pc, #440]	; (800173c <menu+0x24c>)
 8001582:	220d      	movs	r2, #13
 8001584:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001586:	4b6d      	ldr	r3, [pc, #436]	; (800173c <menu+0x24c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b0a      	cmp	r3, #10
 800158c:	d10a      	bne.n	80015a4 <menu+0xb4>
 800158e:	4b6e      	ldr	r3, [pc, #440]	; (8001748 <menu+0x258>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d003      	beq.n	800159e <menu+0xae>
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <menu+0x258>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d102      	bne.n	80015a4 <menu+0xb4>
			menuSayac = 11;
 800159e:	4b67      	ldr	r3, [pc, #412]	; (800173c <menu+0x24c>)
 80015a0:	220b      	movs	r2, #11
 80015a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80015a4:	4b65      	ldr	r3, [pc, #404]	; (800173c <menu+0x24c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d10e      	bne.n	80015ca <menu+0xda>
 80015ac:	4b67      	ldr	r3, [pc, #412]	; (800174c <menu+0x25c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d003      	beq.n	80015bc <menu+0xcc>
 80015b4:	4b65      	ldr	r3, [pc, #404]	; (800174c <menu+0x25c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d106      	bne.n	80015ca <menu+0xda>
 80015bc:	4b61      	ldr	r3, [pc, #388]	; (8001744 <menu+0x254>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d102      	bne.n	80015ca <menu+0xda>
			menuSayac = 16;
 80015c4:	4b5d      	ldr	r3, [pc, #372]	; (800173c <menu+0x24c>)
 80015c6:	2210      	movs	r2, #16
 80015c8:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80015ca:	4b5c      	ldr	r3, [pc, #368]	; (800173c <menu+0x24c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b0c      	cmp	r3, #12
 80015d0:	d10e      	bne.n	80015f0 <menu+0x100>
 80015d2:	4b5e      	ldr	r3, [pc, #376]	; (800174c <menu+0x25c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d003      	beq.n	80015e2 <menu+0xf2>
 80015da:	4b5c      	ldr	r3, [pc, #368]	; (800174c <menu+0x25c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d106      	bne.n	80015f0 <menu+0x100>
 80015e2:	4b58      	ldr	r3, [pc, #352]	; (8001744 <menu+0x254>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d102      	bne.n	80015f0 <menu+0x100>
			menuSayac = 13;
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <menu+0x24c>)
 80015ec:	220d      	movs	r2, #13
 80015ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015f0:	4b52      	ldr	r3, [pc, #328]	; (800173c <menu+0x24c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d106      	bne.n	8001606 <menu+0x116>
 80015f8:	4b55      	ldr	r3, [pc, #340]	; (8001750 <menu+0x260>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d102      	bne.n	8001606 <menu+0x116>
			menuSayac = 16;
 8001600:	4b4e      	ldr	r3, [pc, #312]	; (800173c <menu+0x24c>)
 8001602:	2210      	movs	r2, #16
 8001604:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001606:	4b4d      	ldr	r3, [pc, #308]	; (800173c <menu+0x24c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b18      	cmp	r3, #24
 800160c:	d106      	bne.n	800161c <menu+0x12c>
 800160e:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <menu+0x250>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <menu+0x12c>
			menuSayac = 26;
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <menu+0x24c>)
 8001618:	221a      	movs	r2, #26
 800161a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800161c:	f004 fccc 	bl	8005fb8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001620:	2108      	movs	r1, #8
 8001622:	484c      	ldr	r0, [pc, #304]	; (8001754 <menu+0x264>)
 8001624:	f008 f940 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	d175      	bne.n	800171a <menu+0x22a>
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <menu+0x248>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d06e      	beq.n	800171a <menu+0x22a>
		if (menuSayac <= 1) {
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <menu+0x24c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d802      	bhi.n	800164a <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001644:	4b3d      	ldr	r3, [pc, #244]	; (800173c <menu+0x24c>)
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800164a:	4b3c      	ldr	r3, [pc, #240]	; (800173c <menu+0x24c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <menu+0x24c>)
 8001654:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001656:	4b39      	ldr	r3, [pc, #228]	; (800173c <menu+0x24c>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b14      	cmp	r3, #20
 800165c:	d106      	bne.n	800166c <menu+0x17c>
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <menu+0x250>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <menu+0x17c>
			menuSayac = 17;
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <menu+0x24c>)
 8001668:	2211      	movs	r2, #17
 800166a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <menu+0x24c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d106      	bne.n	8001682 <menu+0x192>
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <menu+0x254>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <menu+0x192>
			menuSayac = 7;
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <menu+0x24c>)
 800167e:	2207      	movs	r2, #7
 8001680:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <menu+0x24c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d106      	bne.n	8001698 <menu+0x1a8>
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <menu+0x254>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <menu+0x1a8>
			menuSayac = 12;
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <menu+0x24c>)
 8001694:	220c      	movs	r2, #12
 8001696:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <menu+0x24c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d106      	bne.n	80016ae <menu+0x1be>
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <menu+0x254>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d102      	bne.n	80016ae <menu+0x1be>
			menuSayac = 8;
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <menu+0x24c>)
 80016aa:	2208      	movs	r2, #8
 80016ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <menu+0x24c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d10a      	bne.n	80016cc <menu+0x1dc>
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <menu+0x258>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d003      	beq.n	80016c6 <menu+0x1d6>
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <menu+0x258>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d102      	bne.n	80016cc <menu+0x1dc>
			menuSayac = 9;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <menu+0x24c>)
 80016c8:	2209      	movs	r2, #9
 80016ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <menu+0x24c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d10a      	bne.n	80016ea <menu+0x1fa>
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <menu+0x25c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d003      	beq.n	80016e4 <menu+0x1f4>
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <menu+0x25c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d102      	bne.n	80016ea <menu+0x1fa>
			menuSayac = 11;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <menu+0x24c>)
 80016e6:	220b      	movs	r2, #11
 80016e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <menu+0x24c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	d106      	bne.n	8001700 <menu+0x210>
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <menu+0x260>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d102      	bne.n	8001700 <menu+0x210>
			menuSayac = 14;
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <menu+0x24c>)
 80016fc:	220e      	movs	r2, #14
 80016fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <menu+0x24c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b19      	cmp	r3, #25
 8001706:	d106      	bne.n	8001716 <menu+0x226>
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <menu+0x250>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <menu+0x226>
			menuSayac = 23;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <menu+0x24c>)
 8001712:	2217      	movs	r2, #23
 8001714:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001716:	f004 fc4f 	bl	8005fb8 <bekle>
	}

	if (menuSayac == 0) {
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <menu+0x24c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d134      	bne.n	800178c <menu+0x29c>
		if(dilSecim == 0) {
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <menu+0x268>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d122      	bne.n	8001770 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800172a:	4a0c      	ldr	r2, [pc, #48]	; (800175c <menu+0x26c>)
 800172c:	2101      	movs	r1, #1
 800172e:	2001      	movs	r0, #1
 8001730:	e016      	b.n	8001760 <menu+0x270>
 8001732:	bf00      	nop
 8001734:	40010800 	.word	0x40010800
 8001738:	20000c3f 	.word	0x20000c3f
 800173c:	20000c10 	.word	0x20000c10
 8001740:	20000c1f 	.word	0x20000c1f
 8001744:	20000c18 	.word	0x20000c18
 8001748:	20000c19 	.word	0x20000c19
 800174c:	20000c1a 	.word	0x20000c1a
 8001750:	20000c1b 	.word	0x20000c1b
 8001754:	40011000 	.word	0x40011000
 8001758:	20000c31 	.word	0x20000c31
 800175c:	0800cc58 	.word	0x0800cc58
 8001760:	f7fe ff00 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001764:	4a94      	ldr	r2, [pc, #592]	; (80019b8 <menu+0x4c8>)
 8001766:	2101      	movs	r1, #1
 8001768:	2002      	movs	r0, #2
 800176a:	f7fe fefb 	bl	8000564 <lcd_print>
 800176e:	e00d      	b.n	800178c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001770:	4b92      	ldr	r3, [pc, #584]	; (80019bc <menu+0x4cc>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d109      	bne.n	800178c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001778:	4a91      	ldr	r2, [pc, #580]	; (80019c0 <menu+0x4d0>)
 800177a:	2101      	movs	r1, #1
 800177c:	2001      	movs	r0, #1
 800177e:	f7fe fef1 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001782:	4a90      	ldr	r2, [pc, #576]	; (80019c4 <menu+0x4d4>)
 8001784:	2101      	movs	r1, #1
 8001786:	2002      	movs	r0, #2
 8001788:	f7fe feec 	bl	8000564 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800178c:	4b8e      	ldr	r3, [pc, #568]	; (80019c8 <menu+0x4d8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	f040 82b5 	bne.w	8001d00 <menu+0x810>
		if(dilSecim == 0) {
 8001796:	4b89      	ldr	r3, [pc, #548]	; (80019bc <menu+0x4cc>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800179e:	4a8b      	ldr	r2, [pc, #556]	; (80019cc <menu+0x4dc>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7fe fede 	bl	8000564 <lcd_print>
 80017a8:	e008      	b.n	80017bc <menu+0x2cc>
		} else if(dilSecim == 1) {
 80017aa:	4b84      	ldr	r3, [pc, #528]	; (80019bc <menu+0x4cc>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d104      	bne.n	80017bc <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80017b2:	4a87      	ldr	r2, [pc, #540]	; (80019d0 <menu+0x4e0>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7fe fed4 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80017bc:	4b85      	ldr	r3, [pc, #532]	; (80019d4 <menu+0x4e4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d123      	bne.n	800180c <menu+0x31c>
			if(dilSecim == 0) {
 80017c4:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <menu+0x4cc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80017cc:	4a82      	ldr	r2, [pc, #520]	; (80019d8 <menu+0x4e8>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	2002      	movs	r0, #2
 80017d2:	f7fe fec7 	bl	8000564 <lcd_print>
 80017d6:	e008      	b.n	80017ea <menu+0x2fa>

			} else if(dilSecim == 1) {
 80017d8:	4b78      	ldr	r3, [pc, #480]	; (80019bc <menu+0x4cc>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80017e0:	4a7e      	ldr	r2, [pc, #504]	; (80019dc <menu+0x4ec>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f7fe febd 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80017ea:	4a7d      	ldr	r2, [pc, #500]	; (80019e0 <menu+0x4f0>)
 80017ec:	210f      	movs	r1, #15
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7fe feb8 	bl	8000564 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80017f4:	4b7b      	ldr	r3, [pc, #492]	; (80019e4 <menu+0x4f4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	220a      	movs	r2, #10
 80017fa:	497b      	ldr	r1, [pc, #492]	; (80019e8 <menu+0x4f8>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00b f849 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 8001802:	4a79      	ldr	r2, [pc, #484]	; (80019e8 <menu+0x4f8>)
 8001804:	210e      	movs	r1, #14
 8001806:	2002      	movs	r0, #2
 8001808:	f7fe feac 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800180c:	4b71      	ldr	r3, [pc, #452]	; (80019d4 <menu+0x4e4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d123      	bne.n	800185c <menu+0x36c>
			if(dilSecim == 0) {
 8001814:	4b69      	ldr	r3, [pc, #420]	; (80019bc <menu+0x4cc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800181c:	4a73      	ldr	r2, [pc, #460]	; (80019ec <menu+0x4fc>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f7fe fe9f 	bl	8000564 <lcd_print>
 8001826:	e008      	b.n	800183a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001828:	4b64      	ldr	r3, [pc, #400]	; (80019bc <menu+0x4cc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d104      	bne.n	800183a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001830:	4a6f      	ldr	r2, [pc, #444]	; (80019f0 <menu+0x500>)
 8001832:	2101      	movs	r1, #1
 8001834:	2002      	movs	r0, #2
 8001836:	f7fe fe95 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183a:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <menu+0x504>)
 800183c:	210f      	movs	r1, #15
 800183e:	2002      	movs	r0, #2
 8001840:	f7fe fe90 	bl	8000564 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001844:	4b6c      	ldr	r3, [pc, #432]	; (80019f8 <menu+0x508>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	220a      	movs	r2, #10
 800184a:	4967      	ldr	r1, [pc, #412]	; (80019e8 <menu+0x4f8>)
 800184c:	4618      	mov	r0, r3
 800184e:	f00b f821 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 8001852:	4a65      	ldr	r2, [pc, #404]	; (80019e8 <menu+0x4f8>)
 8001854:	210e      	movs	r1, #14
 8001856:	2002      	movs	r0, #2
 8001858:	f7fe fe84 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800185c:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <menu+0x4e4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d123      	bne.n	80018ac <menu+0x3bc>
			if(dilSecim == 0) {
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <menu+0x4cc>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800186c:	4a63      	ldr	r2, [pc, #396]	; (80019fc <menu+0x50c>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f7fe fe77 	bl	8000564 <lcd_print>
 8001876:	e008      	b.n	800188a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <menu+0x4cc>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001880:	4a5f      	ldr	r2, [pc, #380]	; (8001a00 <menu+0x510>)
 8001882:	2101      	movs	r1, #1
 8001884:	2002      	movs	r0, #2
 8001886:	f7fe fe6d 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800188a:	4a5a      	ldr	r2, [pc, #360]	; (80019f4 <menu+0x504>)
 800188c:	210f      	movs	r1, #15
 800188e:	2002      	movs	r0, #2
 8001890:	f7fe fe68 	bl	8000564 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <menu+0x514>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	220a      	movs	r2, #10
 800189a:	4953      	ldr	r1, [pc, #332]	; (80019e8 <menu+0x4f8>)
 800189c:	4618      	mov	r0, r3
 800189e:	f00a fff9 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 80018a2:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <menu+0x4f8>)
 80018a4:	210e      	movs	r1, #14
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7fe fe5c 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80018ac:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <menu+0x4e4>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d123      	bne.n	80018fc <menu+0x40c>
			if(dilSecim == 0) {
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <menu+0x4cc>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <menu+0x518>)
 80018be:	2101      	movs	r1, #1
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7fe fe4f 	bl	8000564 <lcd_print>
 80018c6:	e008      	b.n	80018da <menu+0x3ea>
			} else if(dilSecim == 1) {
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <menu+0x4cc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d104      	bne.n	80018da <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80018d0:	4a4e      	ldr	r2, [pc, #312]	; (8001a0c <menu+0x51c>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2002      	movs	r0, #2
 80018d6:	f7fe fe45 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018da:	4a46      	ldr	r2, [pc, #280]	; (80019f4 <menu+0x504>)
 80018dc:	210f      	movs	r1, #15
 80018de:	2002      	movs	r0, #2
 80018e0:	f7fe fe40 	bl	8000564 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80018e4:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <menu+0x520>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	220a      	movs	r2, #10
 80018ea:	493f      	ldr	r1, [pc, #252]	; (80019e8 <menu+0x4f8>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00a ffd1 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 80018f2:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <menu+0x4f8>)
 80018f4:	210e      	movs	r1, #14
 80018f6:	2002      	movs	r0, #2
 80018f8:	f7fe fe34 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80018fc:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <menu+0x4e4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d123      	bne.n	800194c <menu+0x45c>
			if(dilSecim == 0) {
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <menu+0x4cc>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <menu+0x524>)
 800190e:	2101      	movs	r1, #1
 8001910:	2002      	movs	r0, #2
 8001912:	f7fe fe27 	bl	8000564 <lcd_print>
 8001916:	e008      	b.n	800192a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <menu+0x4cc>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d104      	bne.n	800192a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001920:	4a3d      	ldr	r2, [pc, #244]	; (8001a18 <menu+0x528>)
 8001922:	2101      	movs	r1, #1
 8001924:	2002      	movs	r0, #2
 8001926:	f7fe fe1d 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800192a:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <menu+0x504>)
 800192c:	210f      	movs	r1, #15
 800192e:	2002      	movs	r0, #2
 8001930:	f7fe fe18 	bl	8000564 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001934:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <menu+0x52c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	220a      	movs	r2, #10
 800193a:	492b      	ldr	r1, [pc, #172]	; (80019e8 <menu+0x4f8>)
 800193c:	4618      	mov	r0, r3
 800193e:	f00a ffa9 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 8001942:	4a29      	ldr	r2, [pc, #164]	; (80019e8 <menu+0x4f8>)
 8001944:	210e      	movs	r1, #14
 8001946:	2002      	movs	r0, #2
 8001948:	f7fe fe0c 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <menu+0x4e4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d123      	bne.n	800199c <menu+0x4ac>
			if(dilSecim == 0) {
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <menu+0x4cc>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800195c:	4a30      	ldr	r2, [pc, #192]	; (8001a20 <menu+0x530>)
 800195e:	2101      	movs	r1, #1
 8001960:	2002      	movs	r0, #2
 8001962:	f7fe fdff 	bl	8000564 <lcd_print>
 8001966:	e008      	b.n	800197a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <menu+0x4cc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d104      	bne.n	800197a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001970:	4a2c      	ldr	r2, [pc, #176]	; (8001a24 <menu+0x534>)
 8001972:	2101      	movs	r1, #1
 8001974:	2002      	movs	r0, #2
 8001976:	f7fe fdf5 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <menu+0x504>)
 800197c:	210f      	movs	r1, #15
 800197e:	2002      	movs	r0, #2
 8001980:	f7fe fdf0 	bl	8000564 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <menu+0x538>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	220a      	movs	r2, #10
 800198a:	4917      	ldr	r1, [pc, #92]	; (80019e8 <menu+0x4f8>)
 800198c:	4618      	mov	r0, r3
 800198e:	f00a ff81 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <menu+0x4f8>)
 8001994:	210e      	movs	r1, #14
 8001996:	2002      	movs	r0, #2
 8001998:	f7fe fde4 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <menu+0x4e4>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d15f      	bne.n	8001a64 <menu+0x574>
			if(dilSecim == 0) {
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <menu+0x4cc>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d141      	bne.n	8001a30 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80019ac:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <menu+0x53c>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	2002      	movs	r0, #2
 80019b2:	f7fe fdd7 	bl	8000564 <lcd_print>
 80019b6:	e044      	b.n	8001a42 <menu+0x552>
 80019b8:	0800cc6c 	.word	0x0800cc6c
 80019bc:	20000c31 	.word	0x20000c31
 80019c0:	0800cc80 	.word	0x0800cc80
 80019c4:	0800cc94 	.word	0x0800cc94
 80019c8:	20000c10 	.word	0x20000c10
 80019cc:	0800cca8 	.word	0x0800cca8
 80019d0:	0800ccbc 	.word	0x0800ccbc
 80019d4:	20000c12 	.word	0x20000c12
 80019d8:	0800ccd0 	.word	0x0800ccd0
 80019dc:	0800cce0 	.word	0x0800cce0
 80019e0:	0800ccf0 	.word	0x0800ccf0
 80019e4:	20000c32 	.word	0x20000c32
 80019e8:	20000bb0 	.word	0x20000bb0
 80019ec:	0800ccf4 	.word	0x0800ccf4
 80019f0:	0800cd04 	.word	0x0800cd04
 80019f4:	0800cd14 	.word	0x0800cd14
 80019f8:	20000c33 	.word	0x20000c33
 80019fc:	0800cd18 	.word	0x0800cd18
 8001a00:	0800cd28 	.word	0x0800cd28
 8001a04:	20000c34 	.word	0x20000c34
 8001a08:	0800cd38 	.word	0x0800cd38
 8001a0c:	0800cd48 	.word	0x0800cd48
 8001a10:	20000c35 	.word	0x20000c35
 8001a14:	0800cd58 	.word	0x0800cd58
 8001a18:	0800cd68 	.word	0x0800cd68
 8001a1c:	20000c36 	.word	0x20000c36
 8001a20:	0800cd78 	.word	0x0800cd78
 8001a24:	0800cd88 	.word	0x0800cd88
 8001a28:	20000c37 	.word	0x20000c37
 8001a2c:	0800cd98 	.word	0x0800cd98
			} else if(dilSecim == 1) {
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <menu+0x680>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d104      	bne.n	8001a42 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001a38:	4a4e      	ldr	r2, [pc, #312]	; (8001b74 <menu+0x684>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f7fe fd91 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a42:	4a4d      	ldr	r2, [pc, #308]	; (8001b78 <menu+0x688>)
 8001a44:	210f      	movs	r1, #15
 8001a46:	2002      	movs	r0, #2
 8001a48:	f7fe fd8c 	bl	8000564 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <menu+0x68c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	220a      	movs	r2, #10
 8001a52:	494b      	ldr	r1, [pc, #300]	; (8001b80 <menu+0x690>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00a ff1d 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 8001a5a:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <menu+0x690>)
 8001a5c:	210e      	movs	r1, #14
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f7fe fd80 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <menu+0x694>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b07      	cmp	r3, #7
 8001a6a:	d123      	bne.n	8001ab4 <menu+0x5c4>
			if(dilSecim == 0) {
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <menu+0x680>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a74:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <menu+0x698>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f7fe fd73 	bl	8000564 <lcd_print>
 8001a7e:	e008      	b.n	8001a92 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <menu+0x680>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d104      	bne.n	8001a92 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001a88:	4a40      	ldr	r2, [pc, #256]	; (8001b8c <menu+0x69c>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	f7fe fd69 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a92:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <menu+0x688>)
 8001a94:	210f      	movs	r1, #15
 8001a96:	2002      	movs	r0, #2
 8001a98:	f7fe fd64 	bl	8000564 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <menu+0x6a0>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	4937      	ldr	r1, [pc, #220]	; (8001b80 <menu+0x690>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00a fef5 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 8001aaa:	4a35      	ldr	r2, [pc, #212]	; (8001b80 <menu+0x690>)
 8001aac:	210e      	movs	r1, #14
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f7fe fd58 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <menu+0x694>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d123      	bne.n	8001b04 <menu+0x614>
			if(dilSecim == 0) {
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <menu+0x680>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <menu+0x6a4>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f7fe fd4b 	bl	8000564 <lcd_print>
 8001ace:	e008      	b.n	8001ae2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <menu+0x680>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d104      	bne.n	8001ae2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <menu+0x6a8>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	2002      	movs	r0, #2
 8001ade:	f7fe fd41 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ae2:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <menu+0x688>)
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f7fe fd3c 	bl	8000564 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <menu+0x6ac>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	220a      	movs	r2, #10
 8001af2:	4923      	ldr	r1, [pc, #140]	; (8001b80 <menu+0x690>)
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00a fecd 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 8001afa:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <menu+0x690>)
 8001afc:	210e      	movs	r1, #14
 8001afe:	2002      	movs	r0, #2
 8001b00:	f7fe fd30 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <menu+0x694>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d123      	bne.n	8001b54 <menu+0x664>
			if(dilSecim == 0) {
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <menu+0x680>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001b14:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <menu+0x6b0>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7fe fd23 	bl	8000564 <lcd_print>
 8001b1e:	e008      	b.n	8001b32 <menu+0x642>
			} else if(dilSecim == 1) {
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <menu+0x680>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d104      	bne.n	8001b32 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001b28:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <menu+0x6b4>)
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f7fe fd19 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001b32:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <menu+0x6b8>)
 8001b34:	2110      	movs	r1, #16
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7fe fd14 	bl	8000564 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <menu+0x6bc>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	220a      	movs	r2, #10
 8001b42:	490f      	ldr	r1, [pc, #60]	; (8001b80 <menu+0x690>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f00a fea5 	bl	800c894 <itoa>
			lcd_print(2, 15, snum);
 8001b4a:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <menu+0x690>)
 8001b4c:	210f      	movs	r1, #15
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f7fe fd08 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <menu+0x694>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b0a      	cmp	r3, #10
 8001b5a:	d134      	bne.n	8001bc6 <menu+0x6d6>
			if(dilSecim == 0) {
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <menu+0x680>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d127      	bne.n	8001bb4 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <menu+0x6c0>)
 8001b66:	2101      	movs	r1, #1
 8001b68:	2002      	movs	r0, #2
 8001b6a:	f7fe fcfb 	bl	8000564 <lcd_print>
 8001b6e:	e02a      	b.n	8001bc6 <menu+0x6d6>
 8001b70:	20000c31 	.word	0x20000c31
 8001b74:	0800cda8 	.word	0x0800cda8
 8001b78:	0800cd14 	.word	0x0800cd14
 8001b7c:	20000c38 	.word	0x20000c38
 8001b80:	20000bb0 	.word	0x20000bb0
 8001b84:	20000c12 	.word	0x20000c12
 8001b88:	0800cdb8 	.word	0x0800cdb8
 8001b8c:	0800cdc8 	.word	0x0800cdc8
 8001b90:	20000c39 	.word	0x20000c39
 8001b94:	0800cdd8 	.word	0x0800cdd8
 8001b98:	0800cde8 	.word	0x0800cde8
 8001b9c:	20000c3a 	.word	0x20000c3a
 8001ba0:	0800cdf8 	.word	0x0800cdf8
 8001ba4:	0800ce08 	.word	0x0800ce08
 8001ba8:	0800ce18 	.word	0x0800ce18
 8001bac:	20000c3b 	.word	0x20000c3b
 8001bb0:	0800ce1c 	.word	0x0800ce1c
			} else if(dilSecim == 1) {
 8001bb4:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <menu+0x8d0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d104      	bne.n	8001bc6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001bbc:	4a81      	ldr	r2, [pc, #516]	; (8001dc4 <menu+0x8d4>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f7fe fccf 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	487f      	ldr	r0, [pc, #508]	; (8001dc8 <menu+0x8d8>)
 8001bca:	f007 fe6d 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d119      	bne.n	8001c08 <menu+0x718>
 8001bd4:	4b7d      	ldr	r3, [pc, #500]	; (8001dcc <menu+0x8dc>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	f083 0301 	eor.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d012      	beq.n	8001c08 <menu+0x718>
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <menu+0x8e0>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001bea:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <menu+0x8e4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <menu+0x8e4>)
 8001bf4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001bf6:	4b77      	ldr	r3, [pc, #476]	; (8001dd4 <menu+0x8e4>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b0a      	cmp	r3, #10
 8001bfc:	d902      	bls.n	8001c04 <menu+0x714>
				hataGostermeSirasi = 0;
 8001bfe:	4b75      	ldr	r3, [pc, #468]	; (8001dd4 <menu+0x8e4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c04:	f004 f9d8 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c08:	2104      	movs	r1, #4
 8001c0a:	486f      	ldr	r0, [pc, #444]	; (8001dc8 <menu+0x8d8>)
 8001c0c:	f007 fe4c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d119      	bne.n	8001c4a <menu+0x75a>
 8001c16:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <menu+0x8dc>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f083 0301 	eor.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <menu+0x75a>
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <menu+0x8e0>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10e      	bne.n	8001c4a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001c2c:	4b69      	ldr	r3, [pc, #420]	; (8001dd4 <menu+0x8e4>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <menu+0x8e4>)
 8001c36:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001c38:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <menu+0x8e4>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b0b      	cmp	r3, #11
 8001c3e:	d902      	bls.n	8001c46 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001c40:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <menu+0x8e4>)
 8001c42:	220a      	movs	r2, #10
 8001c44:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c46:	f004 f9b7 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001c4a:	2108      	movs	r1, #8
 8001c4c:	485e      	ldr	r0, [pc, #376]	; (8001dc8 <menu+0x8d8>)
 8001c4e:	f007 fe2b 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d153      	bne.n	8001d00 <menu+0x810>
 8001c58:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <menu+0x8dc>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f083 0301 	eor.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d04c      	beq.n	8001d00 <menu+0x810>
 8001c66:	4b5b      	ldr	r3, [pc, #364]	; (8001dd4 <menu+0x8e4>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d148      	bne.n	8001d00 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <menu+0x8e8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <menu+0x8ec>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001c7c:	4b58      	ldr	r3, [pc, #352]	; (8001de0 <menu+0x8f0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <menu+0x8ec>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001c8a:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <menu+0x8f4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <menu+0x8ec>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <menu+0x8f8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <menu+0x8ec>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001ca6:	4b51      	ldr	r3, [pc, #324]	; (8001dec <menu+0x8fc>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <menu+0x8ec>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <menu+0x900>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <menu+0x8ec>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001cc2:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <menu+0x904>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <menu+0x8ec>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <menu+0x908>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <menu+0x8ec>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <menu+0x90c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <menu+0x8ec>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001cec:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <menu+0x910>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <menu+0x8ec>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001cfa:	4b42      	ldr	r3, [pc, #264]	; (8001e04 <menu+0x914>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001d00:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <menu+0x918>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	f040 80fc 	bne.w	8001f02 <menu+0xa12>
		if(dilSecim == 0) {
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <menu+0x8d0>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001d12:	4a3e      	ldr	r2, [pc, #248]	; (8001e0c <menu+0x91c>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7fe fc24 	bl	8000564 <lcd_print>
 8001d1c:	e008      	b.n	8001d30 <menu+0x840>
		} else if(dilSecim == 1) {
 8001d1e:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <menu+0x8d0>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d104      	bne.n	8001d30 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <menu+0x920>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7fe fc1a 	bl	8000564 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <menu+0x8e0>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d003      	beq.n	8001d40 <menu+0x850>
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <menu+0x8e0>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d112      	bne.n	8001d66 <menu+0x876>
			if(dilSecim == 0) {
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <menu+0x8d0>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001d48:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <menu+0x924>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7fe fc09 	bl	8000564 <lcd_print>
 8001d52:	e008      	b.n	8001d66 <menu+0x876>
			} else if(dilSecim == 1) {
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <menu+0x8d0>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d104      	bne.n	8001d66 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001d5c:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <menu+0x928>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7fe fbff 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <menu+0x92c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <menu+0x8ac>
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <menu+0x8e0>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d112      	bne.n	8001d9c <menu+0x8ac>
			if(dilSecim == 0) {
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <menu+0x8d0>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001d7e:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <menu+0x930>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	2002      	movs	r0, #2
 8001d84:	f7fe fbee 	bl	8000564 <lcd_print>
 8001d88:	e008      	b.n	8001d9c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <menu+0x8d0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d104      	bne.n	8001d9c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001d92:	4a24      	ldr	r2, [pc, #144]	; (8001e24 <menu+0x934>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	2002      	movs	r0, #2
 8001d98:	f7fe fbe4 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <menu+0x92c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d14c      	bne.n	8001e3e <menu+0x94e>
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <menu+0x8e0>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d148      	bne.n	8001e3e <menu+0x94e>
			if(dilSecim == 0) {
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <menu+0x8d0>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d13b      	bne.n	8001e2c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <menu+0x938>)
 8001db6:	2101      	movs	r1, #1
 8001db8:	2002      	movs	r0, #2
 8001dba:	f7fe fbd3 	bl	8000564 <lcd_print>
 8001dbe:	e03e      	b.n	8001e3e <menu+0x94e>
 8001dc0:	20000c31 	.word	0x20000c31
 8001dc4:	0800ce30 	.word	0x0800ce30
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	20000c3f 	.word	0x20000c3f
 8001dd0:	20000c1f 	.word	0x20000c1f
 8001dd4:	20000c12 	.word	0x20000c12
 8001dd8:	20000c32 	.word	0x20000c32
 8001ddc:	20000b40 	.word	0x20000b40
 8001de0:	20000c33 	.word	0x20000c33
 8001de4:	20000c34 	.word	0x20000c34
 8001de8:	20000c35 	.word	0x20000c35
 8001dec:	20000c36 	.word	0x20000c36
 8001df0:	20000c37 	.word	0x20000c37
 8001df4:	20000c38 	.word	0x20000c38
 8001df8:	20000c39 	.word	0x20000c39
 8001dfc:	20000c3a 	.word	0x20000c3a
 8001e00:	20000c3b 	.word	0x20000c3b
 8001e04:	20000c3c 	.word	0x20000c3c
 8001e08:	20000c10 	.word	0x20000c10
 8001e0c:	0800ce44 	.word	0x0800ce44
 8001e10:	0800ce58 	.word	0x0800ce58
 8001e14:	0800ce6c 	.word	0x0800ce6c
 8001e18:	0800ce80 	.word	0x0800ce80
 8001e1c:	20000c11 	.word	0x20000c11
 8001e20:	0800ce94 	.word	0x0800ce94
 8001e24:	0800cea4 	.word	0x0800cea4
 8001e28:	0800ceb4 	.word	0x0800ceb4
			} else if(dilSecim == 1) {
 8001e2c:	4b98      	ldr	r3, [pc, #608]	; (8002090 <menu+0xba0>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d104      	bne.n	8001e3e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001e34:	4a97      	ldr	r2, [pc, #604]	; (8002094 <menu+0xba4>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f7fe fb93 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4895      	ldr	r0, [pc, #596]	; (8002098 <menu+0xba8>)
 8001e42:	f007 fd31 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d119      	bne.n	8001e80 <menu+0x990>
 8001e4c:	4b93      	ldr	r3, [pc, #588]	; (800209c <menu+0xbac>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	f083 0301 	eor.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d012      	beq.n	8001e80 <menu+0x990>
 8001e5a:	4b91      	ldr	r3, [pc, #580]	; (80020a0 <menu+0xbb0>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10e      	bne.n	8001e80 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001e62:	4b90      	ldr	r3, [pc, #576]	; (80020a4 <menu+0xbb4>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b8e      	ldr	r3, [pc, #568]	; (80020a4 <menu+0xbb4>)
 8001e6c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001e6e:	4b8d      	ldr	r3, [pc, #564]	; (80020a4 <menu+0xbb4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d902      	bls.n	8001e7c <menu+0x98c>
				calismaSekli = 0;
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <menu+0xbb4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e7c:	f004 f89c 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e80:	2104      	movs	r1, #4
 8001e82:	4885      	ldr	r0, [pc, #532]	; (8002098 <menu+0xba8>)
 8001e84:	f007 fd10 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d119      	bne.n	8001ec2 <menu+0x9d2>
 8001e8e:	4b83      	ldr	r3, [pc, #524]	; (800209c <menu+0xbac>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d012      	beq.n	8001ec2 <menu+0x9d2>
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <menu+0xbb0>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10e      	bne.n	8001ec2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001ea4:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <menu+0xbb4>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b7d      	ldr	r3, [pc, #500]	; (80020a4 <menu+0xbb4>)
 8001eae:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001eb0:	4b7c      	ldr	r3, [pc, #496]	; (80020a4 <menu+0xbb4>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <menu+0x9ce>
	    		calismaSekli = 1;
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <menu+0xbb4>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ebe:	f004 f87b 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ec2:	2108      	movs	r1, #8
 8001ec4:	4874      	ldr	r0, [pc, #464]	; (8002098 <menu+0xba8>)
 8001ec6:	f007 fcef 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d118      	bne.n	8001f02 <menu+0xa12>
 8001ed0:	4b72      	ldr	r3, [pc, #456]	; (800209c <menu+0xbac>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f083 0301 	eor.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d011      	beq.n	8001f02 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001ede:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <menu+0xbb4>)
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	4b71      	ldr	r3, [pc, #452]	; (80020a8 <menu+0xbb8>)
 8001ee4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <menu+0xbb4>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d106      	bne.n	8001efc <menu+0xa0c>
				altLimit = 1;
 8001eee:	4b6f      	ldr	r3, [pc, #444]	; (80020ac <menu+0xbbc>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ef4:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <menu+0xbbc>)
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	; (80020a8 <menu+0xbb8>)
 8001efa:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001efc:	4b6c      	ldr	r3, [pc, #432]	; (80020b0 <menu+0xbc0>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001f02:	4b6c      	ldr	r3, [pc, #432]	; (80020b4 <menu+0xbc4>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	f040 8083 	bne.w	8002012 <menu+0xb22>
		if(dilSecim == 0) {
 8001f0c:	4b60      	ldr	r3, [pc, #384]	; (8002090 <menu+0xba0>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001f14:	4a68      	ldr	r2, [pc, #416]	; (80020b8 <menu+0xbc8>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7fe fb23 	bl	8000564 <lcd_print>
 8001f1e:	e008      	b.n	8001f32 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001f20:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <menu+0xba0>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d104      	bne.n	8001f32 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001f28:	4a64      	ldr	r2, [pc, #400]	; (80020bc <menu+0xbcc>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f7fe fb19 	bl	8000564 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <menu+0xbd0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d113      	bne.n	8001f62 <menu+0xa72>
			if(dilSecim == 0) {
 8001f3a:	4b55      	ldr	r3, [pc, #340]	; (8002090 <menu+0xba0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001f42:	4a60      	ldr	r2, [pc, #384]	; (80020c4 <menu+0xbd4>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2002      	movs	r0, #2
 8001f48:	f7fe fb0c 	bl	8000564 <lcd_print>
 8001f4c:	e012      	b.n	8001f74 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001f4e:	4b50      	ldr	r3, [pc, #320]	; (8002090 <menu+0xba0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10e      	bne.n	8001f74 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001f56:	4a5c      	ldr	r2, [pc, #368]	; (80020c8 <menu+0xbd8>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f7fe fb02 	bl	8000564 <lcd_print>
 8001f60:	e008      	b.n	8001f74 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <menu+0xbd0>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d104      	bne.n	8001f74 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001f6a:	4a58      	ldr	r2, [pc, #352]	; (80020cc <menu+0xbdc>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7fe faf8 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f74:	2102      	movs	r1, #2
 8001f76:	4848      	ldr	r0, [pc, #288]	; (8002098 <menu+0xba8>)
 8001f78:	f007 fc96 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d115      	bne.n	8001fae <menu+0xabe>
 8001f82:	4b46      	ldr	r3, [pc, #280]	; (800209c <menu+0xbac>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f083 0301 	eor.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f90:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <menu+0xbd0>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <menu+0xbd0>)
 8001f9a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f9c:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <menu+0xbd0>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d902      	bls.n	8001faa <menu+0xaba>
				emniyetCercevesi = 0;
 8001fa4:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <menu+0xbd0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001faa:	f004 f805 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fae:	2104      	movs	r1, #4
 8001fb0:	4839      	ldr	r0, [pc, #228]	; (8002098 <menu+0xba8>)
 8001fb2:	f007 fc79 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d115      	bne.n	8001fe8 <menu+0xaf8>
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <menu+0xbac>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f083 0301 	eor.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00e      	beq.n	8001fe8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <menu+0xbd0>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <menu+0xbd0>)
 8001fd4:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <menu+0xbd0>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <menu+0xbd0>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fe4:	f003 ffe8 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001fe8:	2108      	movs	r1, #8
 8001fea:	482b      	ldr	r0, [pc, #172]	; (8002098 <menu+0xba8>)
 8001fec:	f007 fc5c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10d      	bne.n	8002012 <menu+0xb22>
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <menu+0xbac>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f083 0301 	eor.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <menu+0xbd0>)
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <menu+0xbb8>)
 800200a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <menu+0xbc0>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8002012:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <menu+0xbc4>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b04      	cmp	r3, #4
 8002018:	f040 80ba 	bne.w	8002190 <menu+0xca0>
		if(dilSecim == 0) {
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <menu+0xba0>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8002024:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <menu+0xbe0>)
 8002026:	2101      	movs	r1, #1
 8002028:	2001      	movs	r0, #1
 800202a:	f7fe fa9b 	bl	8000564 <lcd_print>
 800202e:	e008      	b.n	8002042 <menu+0xb52>
		} else if(dilSecim == 1) {
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <menu+0xba0>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d104      	bne.n	8002042 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <menu+0xbe4>)
 800203a:	2101      	movs	r1, #1
 800203c:	2001      	movs	r0, #1
 800203e:	f7fe fa91 	bl	8000564 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <menu+0xbe8>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d113      	bne.n	8002072 <menu+0xb82>
			if(dilSecim == 0) {
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <menu+0xba0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <menu+0xbd4>)
 8002054:	2101      	movs	r1, #1
 8002056:	2002      	movs	r0, #2
 8002058:	f7fe fa84 	bl	8000564 <lcd_print>
 800205c:	e049      	b.n	80020f2 <menu+0xc02>
			} else if(dilSecim == 1) {
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <menu+0xba0>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d145      	bne.n	80020f2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8002066:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <menu+0xbd8>)
 8002068:	2101      	movs	r1, #1
 800206a:	2002      	movs	r0, #2
 800206c:	f7fe fa7a 	bl	8000564 <lcd_print>
 8002070:	e03f      	b.n	80020f2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <menu+0xbe8>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d13b      	bne.n	80020f2 <menu+0xc02>
			if(dilSecim == 0) {
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <menu+0xba0>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d12e      	bne.n	80020e0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8002082:	4a16      	ldr	r2, [pc, #88]	; (80020dc <menu+0xbec>)
 8002084:	2101      	movs	r1, #1
 8002086:	2002      	movs	r0, #2
 8002088:	f7fe fa6c 	bl	8000564 <lcd_print>
 800208c:	e031      	b.n	80020f2 <menu+0xc02>
 800208e:	bf00      	nop
 8002090:	20000c31 	.word	0x20000c31
 8002094:	0800cec4 	.word	0x0800cec4
 8002098:	40010800 	.word	0x40010800
 800209c:	20000c3f 	.word	0x20000c3f
 80020a0:	20000c1f 	.word	0x20000c1f
 80020a4:	20000c11 	.word	0x20000c11
 80020a8:	20000b40 	.word	0x20000b40
 80020ac:	20000c16 	.word	0x20000c16
 80020b0:	20000c3c 	.word	0x20000c3c
 80020b4:	20000c10 	.word	0x20000c10
 80020b8:	0800ced4 	.word	0x0800ced4
 80020bc:	0800cee8 	.word	0x0800cee8
 80020c0:	20000c14 	.word	0x20000c14
 80020c4:	0800cefc 	.word	0x0800cefc
 80020c8:	0800cf10 	.word	0x0800cf10
 80020cc:	0800cf24 	.word	0x0800cf24
 80020d0:	0800cf34 	.word	0x0800cf34
 80020d4:	0800cf48 	.word	0x0800cf48
 80020d8:	20000c15 	.word	0x20000c15
 80020dc:	0800cf5c 	.word	0x0800cf5c
			} else if(dilSecim == 1) {
 80020e0:	4b92      	ldr	r3, [pc, #584]	; (800232c <menu+0xe3c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d104      	bne.n	80020f2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80020e8:	4a91      	ldr	r2, [pc, #580]	; (8002330 <menu+0xe40>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	2002      	movs	r0, #2
 80020ee:	f7fe fa39 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020f2:	2102      	movs	r1, #2
 80020f4:	488f      	ldr	r0, [pc, #572]	; (8002334 <menu+0xe44>)
 80020f6:	f007 fbd7 	bl	80098a8 <HAL_GPIO_ReadPin>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d115      	bne.n	800212c <menu+0xc3c>
 8002100:	4b8d      	ldr	r3, [pc, #564]	; (8002338 <menu+0xe48>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00e      	beq.n	800212c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <menu+0xe4c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b89      	ldr	r3, [pc, #548]	; (800233c <menu+0xe4c>)
 8002118:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <menu+0xe4c>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d902      	bls.n	8002128 <menu+0xc38>
				yavaslamaLimit = 0;
 8002122:	4b86      	ldr	r3, [pc, #536]	; (800233c <menu+0xe4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002128:	f003 ff46 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800212c:	2104      	movs	r1, #4
 800212e:	4881      	ldr	r0, [pc, #516]	; (8002334 <menu+0xe44>)
 8002130:	f007 fbba 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	2b01      	cmp	r3, #1
 8002138:	d115      	bne.n	8002166 <menu+0xc76>
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <menu+0xe48>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	f083 0301 	eor.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002148:	4b7c      	ldr	r3, [pc, #496]	; (800233c <menu+0xe4c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	3b01      	subs	r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b7a      	ldr	r3, [pc, #488]	; (800233c <menu+0xe4c>)
 8002152:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002154:	4b79      	ldr	r3, [pc, #484]	; (800233c <menu+0xe4c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800215c:	4b77      	ldr	r3, [pc, #476]	; (800233c <menu+0xe4c>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002162:	f003 ff29 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002166:	2108      	movs	r1, #8
 8002168:	4872      	ldr	r0, [pc, #456]	; (8002334 <menu+0xe44>)
 800216a:	f007 fb9d 	bl	80098a8 <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10d      	bne.n	8002190 <menu+0xca0>
 8002174:	4b70      	ldr	r3, [pc, #448]	; (8002338 <menu+0xe48>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f083 0301 	eor.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002182:	4b6e      	ldr	r3, [pc, #440]	; (800233c <menu+0xe4c>)
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	4b6e      	ldr	r3, [pc, #440]	; (8002340 <menu+0xe50>)
 8002188:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800218a:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <menu+0xe54>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002190:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <menu+0xe58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b05      	cmp	r3, #5
 8002196:	f040 80b9 	bne.w	800230c <menu+0xe1c>
		if(dilSecim == 0) {
 800219a:	4b64      	ldr	r3, [pc, #400]	; (800232c <menu+0xe3c>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80021a2:	4a6a      	ldr	r2, [pc, #424]	; (800234c <menu+0xe5c>)
 80021a4:	2101      	movs	r1, #1
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7fe f9dc 	bl	8000564 <lcd_print>
 80021ac:	e008      	b.n	80021c0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <menu+0xe3c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d104      	bne.n	80021c0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80021b6:	4a66      	ldr	r2, [pc, #408]	; (8002350 <menu+0xe60>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	2001      	movs	r0, #1
 80021bc:	f7fe f9d2 	bl	8000564 <lcd_print>
		}

		if(altLimit == 0) {
 80021c0:	4b64      	ldr	r3, [pc, #400]	; (8002354 <menu+0xe64>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d113      	bne.n	80021f0 <menu+0xd00>
			if(dilSecim == 0) {
 80021c8:	4b58      	ldr	r3, [pc, #352]	; (800232c <menu+0xe3c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80021d0:	4a61      	ldr	r2, [pc, #388]	; (8002358 <menu+0xe68>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7fe f9c5 	bl	8000564 <lcd_print>
 80021da:	e020      	b.n	800221e <menu+0xd2e>
			} else if(dilSecim == 1) {
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <menu+0xe3c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d11c      	bne.n	800221e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80021e4:	4a5d      	ldr	r2, [pc, #372]	; (800235c <menu+0xe6c>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	2002      	movs	r0, #2
 80021ea:	f7fe f9bb 	bl	8000564 <lcd_print>
 80021ee:	e016      	b.n	800221e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80021f0:	4b58      	ldr	r3, [pc, #352]	; (8002354 <menu+0xe64>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d112      	bne.n	800221e <menu+0xd2e>
			if(dilSecim == 0){
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <menu+0xe3c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002200:	4a57      	ldr	r2, [pc, #348]	; (8002360 <menu+0xe70>)
 8002202:	2101      	movs	r1, #1
 8002204:	2002      	movs	r0, #2
 8002206:	f7fe f9ad 	bl	8000564 <lcd_print>
 800220a:	e008      	b.n	800221e <menu+0xd2e>
			} else if(dilSecim == 1){
 800220c:	4b47      	ldr	r3, [pc, #284]	; (800232c <menu+0xe3c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d104      	bne.n	800221e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002214:	4a46      	ldr	r2, [pc, #280]	; (8002330 <menu+0xe40>)
 8002216:	2101      	movs	r1, #1
 8002218:	2002      	movs	r0, #2
 800221a:	f7fe f9a3 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800221e:	2102      	movs	r1, #2
 8002220:	4844      	ldr	r0, [pc, #272]	; (8002334 <menu+0xe44>)
 8002222:	f007 fb41 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002226:	4603      	mov	r3, r0
 8002228:	2b01      	cmp	r3, #1
 800222a:	d119      	bne.n	8002260 <menu+0xd70>
 800222c:	4b42      	ldr	r3, [pc, #264]	; (8002338 <menu+0xe48>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <menu+0xd70>
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <menu+0xe74>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10e      	bne.n	8002260 <menu+0xd70>
			altLimit = altLimit + 1;
 8002242:	4b44      	ldr	r3, [pc, #272]	; (8002354 <menu+0xe64>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	3301      	adds	r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <menu+0xe64>)
 800224c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <menu+0xe64>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d902      	bls.n	800225c <menu+0xd6c>
				altLimit = 0;
 8002256:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <menu+0xe64>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800225c:	f003 feac 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002260:	2104      	movs	r1, #4
 8002262:	4834      	ldr	r0, [pc, #208]	; (8002334 <menu+0xe44>)
 8002264:	f007 fb20 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002268:	4603      	mov	r3, r0
 800226a:	2b01      	cmp	r3, #1
 800226c:	d119      	bne.n	80022a2 <menu+0xdb2>
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <menu+0xe48>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d012      	beq.n	80022a2 <menu+0xdb2>
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <menu+0xe74>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10e      	bne.n	80022a2 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002284:	4b33      	ldr	r3, [pc, #204]	; (8002354 <menu+0xe64>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	3b01      	subs	r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <menu+0xe64>)
 800228e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <menu+0xe64>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <menu+0xdae>
		   		altLimit = 1;
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <menu+0xe64>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800229e:	f003 fe8b 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a2:	2108      	movs	r1, #8
 80022a4:	4823      	ldr	r0, [pc, #140]	; (8002334 <menu+0xe44>)
 80022a6:	f007 faff 	bl	80098a8 <HAL_GPIO_ReadPin>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d12d      	bne.n	800230c <menu+0xe1c>
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <menu+0xe48>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	f083 0301 	eor.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d026      	beq.n	800230c <menu+0xe1c>
			eepromData[5] = altLimit;
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <menu+0xe64>)
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <menu+0xe50>)
 80022c4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <menu+0xe64>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d110      	bne.n	80022f0 <menu+0xe00>
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <menu+0xe78>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <menu+0xdee>
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <menu+0xe78>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d108      	bne.n	80022f0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <menu+0xe78>)
 80022e0:	2203      	movs	r2, #3
 80022e2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <menu+0xe78>)
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <menu+0xe50>)
 80022ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80022ee:	e00a      	b.n	8002306 <menu+0xe16>
			} else if(altLimit == 0) {
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <menu+0xe64>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <menu+0xe16>
				platformSilindirTipi = 0;
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <menu+0xe7c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <menu+0xe7c>)
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <menu+0xe50>)
 8002304:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <menu+0xe54>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <menu+0xe58>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b06      	cmp	r3, #6
 8002312:	f040 80b6 	bne.w	8002482 <menu+0xf92>
		if(dilSecim == 0) {
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <menu+0xe3c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d12a      	bne.n	8002374 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800231e:	4a14      	ldr	r2, [pc, #80]	; (8002370 <menu+0xe80>)
 8002320:	2101      	movs	r1, #1
 8002322:	2001      	movs	r0, #1
 8002324:	f7fe f91e 	bl	8000564 <lcd_print>
 8002328:	e02d      	b.n	8002386 <menu+0xe96>
 800232a:	bf00      	nop
 800232c:	20000c31 	.word	0x20000c31
 8002330:	0800cf70 	.word	0x0800cf70
 8002334:	40010800 	.word	0x40010800
 8002338:	20000c3f 	.word	0x20000c3f
 800233c:	20000c15 	.word	0x20000c15
 8002340:	20000b40 	.word	0x20000b40
 8002344:	20000c3c 	.word	0x20000c3c
 8002348:	20000c10 	.word	0x20000c10
 800234c:	0800cf84 	.word	0x0800cf84
 8002350:	0800cf98 	.word	0x0800cf98
 8002354:	20000c16 	.word	0x20000c16
 8002358:	0800cefc 	.word	0x0800cefc
 800235c:	0800cf10 	.word	0x0800cf10
 8002360:	0800cf5c 	.word	0x0800cf5c
 8002364:	20000c11 	.word	0x20000c11
 8002368:	20000c1d 	.word	0x20000c1d
 800236c:	20000c23 	.word	0x20000c23
 8002370:	0800cfac 	.word	0x0800cfac
		} else if(dilSecim == 1){
 8002374:	4b7a      	ldr	r3, [pc, #488]	; (8002560 <menu+0x1070>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d104      	bne.n	8002386 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800237c:	4a79      	ldr	r2, [pc, #484]	; (8002564 <menu+0x1074>)
 800237e:	2101      	movs	r1, #1
 8002380:	2001      	movs	r0, #1
 8002382:	f7fe f8ef 	bl	8000564 <lcd_print>
		}
		if(basincSalteri == 0){
 8002386:	4b78      	ldr	r3, [pc, #480]	; (8002568 <menu+0x1078>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d113      	bne.n	80023b6 <menu+0xec6>
			if(dilSecim == 0) {
 800238e:	4b74      	ldr	r3, [pc, #464]	; (8002560 <menu+0x1070>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002396:	4a75      	ldr	r2, [pc, #468]	; (800256c <menu+0x107c>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f7fe f8e2 	bl	8000564 <lcd_print>
 80023a0:	e020      	b.n	80023e4 <menu+0xef4>
			} else if(dilSecim == 1){
 80023a2:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <menu+0x1070>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d11c      	bne.n	80023e4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80023aa:	4a71      	ldr	r2, [pc, #452]	; (8002570 <menu+0x1080>)
 80023ac:	2101      	movs	r1, #1
 80023ae:	2002      	movs	r0, #2
 80023b0:	f7fe f8d8 	bl	8000564 <lcd_print>
 80023b4:	e016      	b.n	80023e4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80023b6:	4b6c      	ldr	r3, [pc, #432]	; (8002568 <menu+0x1078>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d112      	bne.n	80023e4 <menu+0xef4>
			if(dilSecim == 0) {
 80023be:	4b68      	ldr	r3, [pc, #416]	; (8002560 <menu+0x1070>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80023c6:	4a6b      	ldr	r2, [pc, #428]	; (8002574 <menu+0x1084>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	2002      	movs	r0, #2
 80023cc:	f7fe f8ca 	bl	8000564 <lcd_print>
 80023d0:	e008      	b.n	80023e4 <menu+0xef4>
			} else if(dilSecim == 1) {
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <menu+0x1070>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d104      	bne.n	80023e4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80023da:	4a67      	ldr	r2, [pc, #412]	; (8002578 <menu+0x1088>)
 80023dc:	2101      	movs	r1, #1
 80023de:	2002      	movs	r0, #2
 80023e0:	f7fe f8c0 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023e4:	2102      	movs	r1, #2
 80023e6:	4865      	ldr	r0, [pc, #404]	; (800257c <menu+0x108c>)
 80023e8:	f007 fa5e 	bl	80098a8 <HAL_GPIO_ReadPin>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d115      	bne.n	800241e <menu+0xf2e>
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <menu+0x1090>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f083 0301 	eor.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <menu+0x1078>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b57      	ldr	r3, [pc, #348]	; (8002568 <menu+0x1078>)
 800240a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800240c:	4b56      	ldr	r3, [pc, #344]	; (8002568 <menu+0x1078>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d902      	bls.n	800241a <menu+0xf2a>
				basincSalteri = 0;
 8002414:	4b54      	ldr	r3, [pc, #336]	; (8002568 <menu+0x1078>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800241a:	f003 fdcd 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800241e:	2104      	movs	r1, #4
 8002420:	4856      	ldr	r0, [pc, #344]	; (800257c <menu+0x108c>)
 8002422:	f007 fa41 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d115      	bne.n	8002458 <menu+0xf68>
 800242c:	4b54      	ldr	r3, [pc, #336]	; (8002580 <menu+0x1090>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f083 0301 	eor.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00e      	beq.n	8002458 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800243a:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <menu+0x1078>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3b01      	subs	r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <menu+0x1078>)
 8002444:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002446:	4b48      	ldr	r3, [pc, #288]	; (8002568 <menu+0x1078>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <menu+0xf64>
		   		basincSalteri = 1;
 800244e:	4b46      	ldr	r3, [pc, #280]	; (8002568 <menu+0x1078>)
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002454:	f003 fdb0 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002458:	2108      	movs	r1, #8
 800245a:	4848      	ldr	r0, [pc, #288]	; (800257c <menu+0x108c>)
 800245c:	f007 fa24 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10d      	bne.n	8002482 <menu+0xf92>
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <menu+0x1090>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	f083 0301 	eor.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <menu+0x1078>)
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	4b42      	ldr	r3, [pc, #264]	; (8002584 <menu+0x1094>)
 800247a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800247c:	4b42      	ldr	r3, [pc, #264]	; (8002588 <menu+0x1098>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002482:	4b42      	ldr	r3, [pc, #264]	; (800258c <menu+0x109c>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b07      	cmp	r3, #7
 8002488:	f040 80f5 	bne.w	8002676 <menu+0x1186>
		if(dilSecim == 0) {
 800248c:	4b34      	ldr	r3, [pc, #208]	; (8002560 <menu+0x1070>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002494:	4a3e      	ldr	r2, [pc, #248]	; (8002590 <menu+0x10a0>)
 8002496:	2101      	movs	r1, #1
 8002498:	2001      	movs	r0, #1
 800249a:	f7fe f863 	bl	8000564 <lcd_print>
 800249e:	e008      	b.n	80024b2 <menu+0xfc2>
		} else if(dilSecim == 1){
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <menu+0x1070>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d104      	bne.n	80024b2 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80024a8:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <menu+0x10a4>)
 80024aa:	2101      	movs	r1, #1
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7fe f859 	bl	8000564 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <menu+0x10a8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d113      	bne.n	80024e2 <menu+0xff2>
			if(dilSecim == 0) {
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <menu+0x1070>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80024c2:	4a2a      	ldr	r2, [pc, #168]	; (800256c <menu+0x107c>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fe f84c 	bl	8000564 <lcd_print>
 80024cc:	e079      	b.n	80025c2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <menu+0x1070>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d175      	bne.n	80025c2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80024d6:	4a26      	ldr	r2, [pc, #152]	; (8002570 <menu+0x1080>)
 80024d8:	2101      	movs	r1, #1
 80024da:	2002      	movs	r0, #2
 80024dc:	f7fe f842 	bl	8000564 <lcd_print>
 80024e0:	e06f      	b.n	80025c2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <menu+0x10a8>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d113      	bne.n	8002512 <menu+0x1022>
			if(dilSecim == 0) {
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <menu+0x1070>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <menu+0x10ac>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	2002      	movs	r0, #2
 80024f8:	f7fe f834 	bl	8000564 <lcd_print>
 80024fc:	e061      	b.n	80025c2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <menu+0x1070>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d15d      	bne.n	80025c2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002506:	4a26      	ldr	r2, [pc, #152]	; (80025a0 <menu+0x10b0>)
 8002508:	2101      	movs	r1, #1
 800250a:	2002      	movs	r0, #2
 800250c:	f7fe f82a 	bl	8000564 <lcd_print>
 8002510:	e057      	b.n	80025c2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <menu+0x10a8>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d113      	bne.n	8002542 <menu+0x1052>
			if(dilSecim == 0) {
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <menu+0x1070>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002522:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <menu+0x10b4>)
 8002524:	2101      	movs	r1, #1
 8002526:	2002      	movs	r0, #2
 8002528:	f7fe f81c 	bl	8000564 <lcd_print>
 800252c:	e049      	b.n	80025c2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <menu+0x1070>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d145      	bne.n	80025c2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002536:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <menu+0x10b8>)
 8002538:	2101      	movs	r1, #1
 800253a:	2002      	movs	r0, #2
 800253c:	f7fe f812 	bl	8000564 <lcd_print>
 8002540:	e03f      	b.n	80025c2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <menu+0x10a8>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d13b      	bne.n	80025c2 <menu+0x10d2>
			if(dilSecim == 0) {
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <menu+0x1070>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12e      	bne.n	80025b0 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002552:	4a16      	ldr	r2, [pc, #88]	; (80025ac <menu+0x10bc>)
 8002554:	2101      	movs	r1, #1
 8002556:	2002      	movs	r0, #2
 8002558:	f7fe f804 	bl	8000564 <lcd_print>
 800255c:	e031      	b.n	80025c2 <menu+0x10d2>
 800255e:	bf00      	nop
 8002560:	20000c31 	.word	0x20000c31
 8002564:	0800cfbc 	.word	0x0800cfbc
 8002568:	20000c17 	.word	0x20000c17
 800256c:	0800cefc 	.word	0x0800cefc
 8002570:	0800cf10 	.word	0x0800cf10
 8002574:	0800cf5c 	.word	0x0800cf5c
 8002578:	0800cf70 	.word	0x0800cf70
 800257c:	40010800 	.word	0x40010800
 8002580:	20000c3f 	.word	0x20000c3f
 8002584:	20000b40 	.word	0x20000b40
 8002588:	20000c3c 	.word	0x20000c3c
 800258c:	20000c10 	.word	0x20000c10
 8002590:	0800cfcc 	.word	0x0800cfcc
 8002594:	0800cfe0 	.word	0x0800cfe0
 8002598:	20000c18 	.word	0x20000c18
 800259c:	0800cff4 	.word	0x0800cff4
 80025a0:	0800d008 	.word	0x0800d008
 80025a4:	0800d01c 	.word	0x0800d01c
 80025a8:	0800d030 	.word	0x0800d030
 80025ac:	0800d044 	.word	0x0800d044
			} else if(dilSecim == 1){
 80025b0:	4b99      	ldr	r3, [pc, #612]	; (8002818 <menu+0x1328>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d104      	bne.n	80025c2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80025b8:	4a98      	ldr	r2, [pc, #608]	; (800281c <menu+0x132c>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	2002      	movs	r0, #2
 80025be:	f7fd ffd1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c2:	2102      	movs	r1, #2
 80025c4:	4896      	ldr	r0, [pc, #600]	; (8002820 <menu+0x1330>)
 80025c6:	f007 f96f 	bl	80098a8 <HAL_GPIO_ReadPin>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d115      	bne.n	80025fc <menu+0x110c>
 80025d0:	4b94      	ldr	r3, [pc, #592]	; (8002824 <menu+0x1334>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f083 0301 	eor.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00e      	beq.n	80025fc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80025de:	4b92      	ldr	r3, [pc, #584]	; (8002828 <menu+0x1338>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b90      	ldr	r3, [pc, #576]	; (8002828 <menu+0x1338>)
 80025e8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80025ea:	4b8f      	ldr	r3, [pc, #572]	; (8002828 <menu+0x1338>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d902      	bls.n	80025f8 <menu+0x1108>
				kapiSecimleri = 0;
 80025f2:	4b8d      	ldr	r3, [pc, #564]	; (8002828 <menu+0x1338>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025f8:	f003 fcde 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fc:	2104      	movs	r1, #4
 80025fe:	4888      	ldr	r0, [pc, #544]	; (8002820 <menu+0x1330>)
 8002600:	f007 f952 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d115      	bne.n	8002636 <menu+0x1146>
 800260a:	4b86      	ldr	r3, [pc, #536]	; (8002824 <menu+0x1334>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002618:	4b83      	ldr	r3, [pc, #524]	; (8002828 <menu+0x1338>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	3b01      	subs	r3, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b81      	ldr	r3, [pc, #516]	; (8002828 <menu+0x1338>)
 8002622:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002624:	4b80      	ldr	r3, [pc, #512]	; (8002828 <menu+0x1338>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d902      	bls.n	8002632 <menu+0x1142>
		   		kapiSecimleri = 3;
 800262c:	4b7e      	ldr	r3, [pc, #504]	; (8002828 <menu+0x1338>)
 800262e:	2203      	movs	r2, #3
 8002630:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002632:	f003 fcc1 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002636:	2108      	movs	r1, #8
 8002638:	4879      	ldr	r0, [pc, #484]	; (8002820 <menu+0x1330>)
 800263a:	f007 f935 	bl	80098a8 <HAL_GPIO_ReadPin>
 800263e:	4603      	mov	r3, r0
 8002640:	2b01      	cmp	r3, #1
 8002642:	d118      	bne.n	8002676 <menu+0x1186>
 8002644:	4b77      	ldr	r3, [pc, #476]	; (8002824 <menu+0x1334>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f083 0301 	eor.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d011      	beq.n	8002676 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002652:	4b75      	ldr	r3, [pc, #468]	; (8002828 <menu+0x1338>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b75      	ldr	r3, [pc, #468]	; (800282c <menu+0x133c>)
 8002658:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800265a:	4b73      	ldr	r3, [pc, #460]	; (8002828 <menu+0x1338>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <menu+0x1180>
				altLimit = 1;
 8002662:	4b73      	ldr	r3, [pc, #460]	; (8002830 <menu+0x1340>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002668:	4b71      	ldr	r3, [pc, #452]	; (8002830 <menu+0x1340>)
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	4b6f      	ldr	r3, [pc, #444]	; (800282c <menu+0x133c>)
 800266e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002670:	4b70      	ldr	r3, [pc, #448]	; (8002834 <menu+0x1344>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <menu+0x1348>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b08      	cmp	r3, #8
 800267c:	f040 8092 	bne.w	80027a4 <menu+0x12b4>
		if(dilSecim == 0) {
 8002680:	4b65      	ldr	r3, [pc, #404]	; (8002818 <menu+0x1328>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002688:	4a6c      	ldr	r2, [pc, #432]	; (800283c <menu+0x134c>)
 800268a:	2101      	movs	r1, #1
 800268c:	2001      	movs	r0, #1
 800268e:	f7fd ff69 	bl	8000564 <lcd_print>
 8002692:	e008      	b.n	80026a6 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002694:	4b60      	ldr	r3, [pc, #384]	; (8002818 <menu+0x1328>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d104      	bne.n	80026a6 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800269c:	4a68      	ldr	r2, [pc, #416]	; (8002840 <menu+0x1350>)
 800269e:	2101      	movs	r1, #1
 80026a0:	2001      	movs	r0, #1
 80026a2:	f7fd ff5f 	bl	8000564 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <menu+0x1354>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d113      	bne.n	80026d6 <menu+0x11e6>
			if(dilSecim == 0) {
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <menu+0x1328>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80026b6:	4a64      	ldr	r2, [pc, #400]	; (8002848 <menu+0x1358>)
 80026b8:	2101      	movs	r1, #1
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7fd ff52 	bl	8000564 <lcd_print>
 80026c0:	e020      	b.n	8002704 <menu+0x1214>
			} else if(dilSecim == 1) {
 80026c2:	4b55      	ldr	r3, [pc, #340]	; (8002818 <menu+0x1328>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d11c      	bne.n	8002704 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80026ca:	4a60      	ldr	r2, [pc, #384]	; (800284c <menu+0x135c>)
 80026cc:	2101      	movs	r1, #1
 80026ce:	2002      	movs	r0, #2
 80026d0:	f7fd ff48 	bl	8000564 <lcd_print>
 80026d4:	e016      	b.n	8002704 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80026d6:	4b5b      	ldr	r3, [pc, #364]	; (8002844 <menu+0x1354>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d112      	bne.n	8002704 <menu+0x1214>
			if(dilSecim == 0){
 80026de:	4b4e      	ldr	r3, [pc, #312]	; (8002818 <menu+0x1328>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80026e6:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <menu+0x1360>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	2002      	movs	r0, #2
 80026ec:	f7fd ff3a 	bl	8000564 <lcd_print>
 80026f0:	e008      	b.n	8002704 <menu+0x1214>
			} else if(dilSecim == 1){
 80026f2:	4b49      	ldr	r3, [pc, #292]	; (8002818 <menu+0x1328>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d104      	bne.n	8002704 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80026fa:	4a56      	ldr	r2, [pc, #344]	; (8002854 <menu+0x1364>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	2002      	movs	r0, #2
 8002700:	f7fd ff30 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002704:	2102      	movs	r1, #2
 8002706:	4846      	ldr	r0, [pc, #280]	; (8002820 <menu+0x1330>)
 8002708:	f007 f8ce 	bl	80098a8 <HAL_GPIO_ReadPin>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d115      	bne.n	800273e <menu+0x124e>
 8002712:	4b44      	ldr	r3, [pc, #272]	; (8002824 <menu+0x1334>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	f083 0301 	eor.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002720:	4b48      	ldr	r3, [pc, #288]	; (8002844 <menu+0x1354>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	b2da      	uxtb	r2, r3
 8002728:	4b46      	ldr	r3, [pc, #280]	; (8002844 <menu+0x1354>)
 800272a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800272c:	4b45      	ldr	r3, [pc, #276]	; (8002844 <menu+0x1354>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d902      	bls.n	800273a <menu+0x124a>
				kapiAcTipi = 0;
 8002734:	4b43      	ldr	r3, [pc, #268]	; (8002844 <menu+0x1354>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800273a:	f003 fc3d 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800273e:	2104      	movs	r1, #4
 8002740:	4837      	ldr	r0, [pc, #220]	; (8002820 <menu+0x1330>)
 8002742:	f007 f8b1 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002746:	4603      	mov	r3, r0
 8002748:	2b01      	cmp	r3, #1
 800274a:	d115      	bne.n	8002778 <menu+0x1288>
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <menu+0x1334>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f083 0301 	eor.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00e      	beq.n	8002778 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800275a:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <menu+0x1354>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	3b01      	subs	r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <menu+0x1354>)
 8002764:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002766:	4b37      	ldr	r3, [pc, #220]	; (8002844 <menu+0x1354>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <menu+0x1284>
		   		kapiAcTipi = 1;
 800276e:	4b35      	ldr	r3, [pc, #212]	; (8002844 <menu+0x1354>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002774:	f003 fc20 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002778:	2108      	movs	r1, #8
 800277a:	4829      	ldr	r0, [pc, #164]	; (8002820 <menu+0x1330>)
 800277c:	f007 f894 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10e      	bne.n	80027a4 <menu+0x12b4>
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <menu+0x1334>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f083 0301 	eor.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <menu+0x1354>)
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <menu+0x133c>)
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800279e:	4b25      	ldr	r3, [pc, #148]	; (8002834 <menu+0x1344>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <menu+0x1348>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	f040 80b9 	bne.w	8002920 <menu+0x1430>
		if(dilSecim == 0){
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <menu+0x1328>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <menu+0x1368>)
 80027b8:	2101      	movs	r1, #1
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7fd fed2 	bl	8000564 <lcd_print>
 80027c0:	e008      	b.n	80027d4 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <menu+0x1328>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d104      	bne.n	80027d4 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80027ca:	4a24      	ldr	r2, [pc, #144]	; (800285c <menu+0x136c>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	2001      	movs	r0, #1
 80027d0:	f7fd fec8 	bl	8000564 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <menu+0x1370>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80027dc:	4a21      	ldr	r2, [pc, #132]	; (8002864 <menu+0x1374>)
 80027de:	2101      	movs	r1, #1
 80027e0:	2002      	movs	r0, #2
 80027e2:	f7fd febf 	bl	8000564 <lcd_print>
 80027e6:	e04c      	b.n	8002882 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <menu+0x1370>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d13f      	bne.n	8002870 <menu+0x1380>
			if(dilSecim == 0){
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <menu+0x1328>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <menu+0x1378>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	2002      	movs	r0, #2
 80027fe:	f7fd feb1 	bl	8000564 <lcd_print>
 8002802:	e03e      	b.n	8002882 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <menu+0x1328>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d13a      	bne.n	8002882 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800280c:	4a17      	ldr	r2, [pc, #92]	; (800286c <menu+0x137c>)
 800280e:	2101      	movs	r1, #1
 8002810:	2002      	movs	r0, #2
 8002812:	f7fd fea7 	bl	8000564 <lcd_print>
 8002816:	e034      	b.n	8002882 <menu+0x1392>
 8002818:	20000c31 	.word	0x20000c31
 800281c:	0800d058 	.word	0x0800d058
 8002820:	40010800 	.word	0x40010800
 8002824:	20000c3f 	.word	0x20000c3f
 8002828:	20000c18 	.word	0x20000c18
 800282c:	20000b40 	.word	0x20000b40
 8002830:	20000c16 	.word	0x20000c16
 8002834:	20000c3c 	.word	0x20000c3c
 8002838:	20000c10 	.word	0x20000c10
 800283c:	0800d06c 	.word	0x0800d06c
 8002840:	0800d080 	.word	0x0800d080
 8002844:	20000c1c 	.word	0x20000c1c
 8002848:	0800d094 	.word	0x0800d094
 800284c:	0800d0a4 	.word	0x0800d0a4
 8002850:	0800d0b4 	.word	0x0800d0b4
 8002854:	0800d0c8 	.word	0x0800d0c8
 8002858:	0800d0dc 	.word	0x0800d0dc
 800285c:	0800d0f0 	.word	0x0800d0f0
 8002860:	20000c19 	.word	0x20000c19
 8002864:	0800d104 	.word	0x0800d104
 8002868:	0800d118 	.word	0x0800d118
 800286c:	0800d128 	.word	0x0800d128
			}
		} else if(kapi1Tip == 2) {
 8002870:	4b8a      	ldr	r3, [pc, #552]	; (8002a9c <menu+0x15ac>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d104      	bne.n	8002882 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002878:	4a89      	ldr	r2, [pc, #548]	; (8002aa0 <menu+0x15b0>)
 800287a:	2101      	movs	r1, #1
 800287c:	2002      	movs	r0, #2
 800287e:	f7fd fe71 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002882:	2102      	movs	r1, #2
 8002884:	4887      	ldr	r0, [pc, #540]	; (8002aa4 <menu+0x15b4>)
 8002886:	f007 f80f 	bl	80098a8 <HAL_GPIO_ReadPin>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d115      	bne.n	80028bc <menu+0x13cc>
 8002890:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <menu+0x15b8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f083 0301 	eor.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00e      	beq.n	80028bc <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800289e:	4b7f      	ldr	r3, [pc, #508]	; (8002a9c <menu+0x15ac>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <menu+0x15ac>)
 80028a8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <menu+0x15ac>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d902      	bls.n	80028b8 <menu+0x13c8>
				kapi1Tip = 0;
 80028b2:	4b7a      	ldr	r3, [pc, #488]	; (8002a9c <menu+0x15ac>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028b8:	f003 fb7e 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028bc:	2104      	movs	r1, #4
 80028be:	4879      	ldr	r0, [pc, #484]	; (8002aa4 <menu+0x15b4>)
 80028c0:	f006 fff2 	bl	80098a8 <HAL_GPIO_ReadPin>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d115      	bne.n	80028f6 <menu+0x1406>
 80028ca:	4b77      	ldr	r3, [pc, #476]	; (8002aa8 <menu+0x15b8>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	f083 0301 	eor.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80028d8:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <menu+0x15ac>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b6e      	ldr	r3, [pc, #440]	; (8002a9c <menu+0x15ac>)
 80028e2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80028e4:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <menu+0x15ac>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d902      	bls.n	80028f2 <menu+0x1402>
		   		kapi1Tip = 2;
 80028ec:	4b6b      	ldr	r3, [pc, #428]	; (8002a9c <menu+0x15ac>)
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028f2:	f003 fb61 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028f6:	2108      	movs	r1, #8
 80028f8:	486a      	ldr	r0, [pc, #424]	; (8002aa4 <menu+0x15b4>)
 80028fa:	f006 ffd5 	bl	80098a8 <HAL_GPIO_ReadPin>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10d      	bne.n	8002920 <menu+0x1430>
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <menu+0x15b8>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f083 0301 	eor.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002912:	4b62      	ldr	r3, [pc, #392]	; (8002a9c <menu+0x15ac>)
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	4b65      	ldr	r3, [pc, #404]	; (8002aac <menu+0x15bc>)
 8002918:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <menu+0x15c0>)
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002920:	4b64      	ldr	r3, [pc, #400]	; (8002ab4 <menu+0x15c4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b0a      	cmp	r3, #10
 8002926:	d17f      	bne.n	8002a28 <menu+0x1538>
		if(dilSecim == 0) {
 8002928:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <menu+0x15c8>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002930:	4a62      	ldr	r2, [pc, #392]	; (8002abc <menu+0x15cc>)
 8002932:	2101      	movs	r1, #1
 8002934:	2001      	movs	r0, #1
 8002936:	f7fd fe15 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800293a:	4a61      	ldr	r2, [pc, #388]	; (8002ac0 <menu+0x15d0>)
 800293c:	2101      	movs	r1, #1
 800293e:	2002      	movs	r0, #2
 8002940:	f7fd fe10 	bl	8000564 <lcd_print>
 8002944:	e00d      	b.n	8002962 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <menu+0x15c8>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d109      	bne.n	8002962 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800294e:	4a5d      	ldr	r2, [pc, #372]	; (8002ac4 <menu+0x15d4>)
 8002950:	2101      	movs	r1, #1
 8002952:	2001      	movs	r0, #1
 8002954:	f7fd fe06 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002958:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <menu+0x15d8>)
 800295a:	2101      	movs	r1, #1
 800295c:	2002      	movs	r0, #2
 800295e:	f7fd fe01 	bl	8000564 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002962:	4b5a      	ldr	r3, [pc, #360]	; (8002acc <menu+0x15dc>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	220a      	movs	r2, #10
 8002968:	4959      	ldr	r1, [pc, #356]	; (8002ad0 <menu+0x15e0>)
 800296a:	4618      	mov	r0, r3
 800296c:	f009 ff92 	bl	800c894 <itoa>
		lcd_print(2,16,snum);
 8002970:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <menu+0x15e0>)
 8002972:	2110      	movs	r1, #16
 8002974:	2002      	movs	r0, #2
 8002976:	f7fd fdf5 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800297a:	2102      	movs	r1, #2
 800297c:	4849      	ldr	r0, [pc, #292]	; (8002aa4 <menu+0x15b4>)
 800297e:	f006 ff93 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002982:	4603      	mov	r3, r0
 8002984:	2b01      	cmp	r3, #1
 8002986:	d119      	bne.n	80029bc <menu+0x14cc>
 8002988:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <menu+0x15b8>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <menu+0x14cc>
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <menu+0x15ac>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10e      	bne.n	80029bc <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800299e:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <menu+0x15dc>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <menu+0x15dc>)
 80029a8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80029aa:	4b48      	ldr	r3, [pc, #288]	; (8002acc <menu+0x15dc>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d902      	bls.n	80029b8 <menu+0x14c8>
				kapi1AcSure = 0;
 80029b2:	4b46      	ldr	r3, [pc, #280]	; (8002acc <menu+0x15dc>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029b8:	f003 fafe 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80029bc:	2104      	movs	r1, #4
 80029be:	4839      	ldr	r0, [pc, #228]	; (8002aa4 <menu+0x15b4>)
 80029c0:	f006 ff72 	bl	80098a8 <HAL_GPIO_ReadPin>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d119      	bne.n	80029fe <menu+0x150e>
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <menu+0x15b8>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	f083 0301 	eor.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <menu+0x150e>
 80029d8:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <menu+0x15ac>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10e      	bne.n	80029fe <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80029e0:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <menu+0x15dc>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b38      	ldr	r3, [pc, #224]	; (8002acc <menu+0x15dc>)
 80029ea:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80029ec:	4b37      	ldr	r3, [pc, #220]	; (8002acc <menu+0x15dc>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d902      	bls.n	80029fa <menu+0x150a>
		   		kapi1AcSure = 5;
 80029f4:	4b35      	ldr	r3, [pc, #212]	; (8002acc <menu+0x15dc>)
 80029f6:	2205      	movs	r2, #5
 80029f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029fa:	f003 fadd 	bl	8005fb8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fe:	2108      	movs	r1, #8
 8002a00:	4828      	ldr	r0, [pc, #160]	; (8002aa4 <menu+0x15b4>)
 8002a02:	f006 ff51 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10d      	bne.n	8002a28 <menu+0x1538>
 8002a0c:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <menu+0x15b8>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f083 0301 	eor.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <menu+0x15dc>)
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <menu+0x15bc>)
 8002a20:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002a22:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <menu+0x15c0>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <menu+0x15c4>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b0b      	cmp	r3, #11
 8002a2e:	f040 80b5 	bne.w	8002b9c <menu+0x16ac>
		if(dilSecim == 0) {
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <menu+0x15c8>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002a3a:	4a26      	ldr	r2, [pc, #152]	; (8002ad4 <menu+0x15e4>)
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7fd fd90 	bl	8000564 <lcd_print>
 8002a44:	e008      	b.n	8002a58 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <menu+0x15c8>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d104      	bne.n	8002a58 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002a4e:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <menu+0x15e8>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2001      	movs	r0, #1
 8002a54:	f7fd fd86 	bl	8000564 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <menu+0x15ec>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002a60:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <menu+0x15f0>)
 8002a62:	2101      	movs	r1, #1
 8002a64:	2002      	movs	r0, #2
 8002a66:	f7fd fd7d 	bl	8000564 <lcd_print>
 8002a6a:	e048      	b.n	8002afe <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <menu+0x15ec>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d13b      	bne.n	8002aec <menu+0x15fc>
			if(dilSecim == 0) {
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <menu+0x15c8>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <menu+0x15f4>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	2002      	movs	r0, #2
 8002a82:	f7fd fd6f 	bl	8000564 <lcd_print>
 8002a86:	e03a      	b.n	8002afe <menu+0x160e>
			} else if(dilSecim == 1) {
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <menu+0x15c8>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d136      	bne.n	8002afe <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <menu+0x15f8>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	2002      	movs	r0, #2
 8002a96:	f7fd fd65 	bl	8000564 <lcd_print>
 8002a9a:	e030      	b.n	8002afe <menu+0x160e>
 8002a9c:	20000c19 	.word	0x20000c19
 8002aa0:	0800d13c 	.word	0x0800d13c
 8002aa4:	40010800 	.word	0x40010800
 8002aa8:	20000c3f 	.word	0x20000c3f
 8002aac:	20000b40 	.word	0x20000b40
 8002ab0:	20000c3c 	.word	0x20000c3c
 8002ab4:	20000c10 	.word	0x20000c10
 8002ab8:	20000c31 	.word	0x20000c31
 8002abc:	0800d14c 	.word	0x0800d14c
 8002ac0:	0800d160 	.word	0x0800d160
 8002ac4:	0800d170 	.word	0x0800d170
 8002ac8:	0800d184 	.word	0x0800d184
 8002acc:	20000c29 	.word	0x20000c29
 8002ad0:	20000bb0 	.word	0x20000bb0
 8002ad4:	0800d194 	.word	0x0800d194
 8002ad8:	0800d1a8 	.word	0x0800d1a8
 8002adc:	20000c1a 	.word	0x20000c1a
 8002ae0:	0800d104 	.word	0x0800d104
 8002ae4:	0800d118 	.word	0x0800d118
 8002ae8:	0800d128 	.word	0x0800d128
			}
		} else if(kapi2Tip == 2) {
 8002aec:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <menu+0x1828>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d104      	bne.n	8002afe <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002af4:	4a89      	ldr	r2, [pc, #548]	; (8002d1c <menu+0x182c>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	2002      	movs	r0, #2
 8002afa:	f7fd fd33 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002afe:	2102      	movs	r1, #2
 8002b00:	4887      	ldr	r0, [pc, #540]	; (8002d20 <menu+0x1830>)
 8002b02:	f006 fed1 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d115      	bne.n	8002b38 <menu+0x1648>
 8002b0c:	4b85      	ldr	r3, [pc, #532]	; (8002d24 <menu+0x1834>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	f083 0301 	eor.w	r3, r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00e      	beq.n	8002b38 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002b1a:	4b7f      	ldr	r3, [pc, #508]	; (8002d18 <menu+0x1828>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <menu+0x1828>)
 8002b24:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002b26:	4b7c      	ldr	r3, [pc, #496]	; (8002d18 <menu+0x1828>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d902      	bls.n	8002b34 <menu+0x1644>
				kapi2Tip = 0;
 8002b2e:	4b7a      	ldr	r3, [pc, #488]	; (8002d18 <menu+0x1828>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b34:	f003 fa40 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b38:	2104      	movs	r1, #4
 8002b3a:	4879      	ldr	r0, [pc, #484]	; (8002d20 <menu+0x1830>)
 8002b3c:	f006 feb4 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d115      	bne.n	8002b72 <menu+0x1682>
 8002b46:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <menu+0x1834>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	f083 0301 	eor.w	r3, r3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002b54:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <menu+0x1828>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	4b6e      	ldr	r3, [pc, #440]	; (8002d18 <menu+0x1828>)
 8002b5e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002b60:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <menu+0x1828>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d902      	bls.n	8002b6e <menu+0x167e>
		   		kapi2Tip = 2;
 8002b68:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <menu+0x1828>)
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b6e:	f003 fa23 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b72:	2108      	movs	r1, #8
 8002b74:	486a      	ldr	r0, [pc, #424]	; (8002d20 <menu+0x1830>)
 8002b76:	f006 fe97 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10d      	bne.n	8002b9c <menu+0x16ac>
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <menu+0x1834>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f083 0301 	eor.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002b8e:	4b62      	ldr	r3, [pc, #392]	; (8002d18 <menu+0x1828>)
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <menu+0x1838>)
 8002b94:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002b96:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <menu+0x183c>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b9c:	4b64      	ldr	r3, [pc, #400]	; (8002d30 <menu+0x1840>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b0c      	cmp	r3, #12
 8002ba2:	d17f      	bne.n	8002ca4 <menu+0x17b4>
		if(dilSecim == 0) {
 8002ba4:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <menu+0x1844>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002bac:	4a62      	ldr	r2, [pc, #392]	; (8002d38 <menu+0x1848>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7fd fcd7 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002bb6:	4a61      	ldr	r2, [pc, #388]	; (8002d3c <menu+0x184c>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	2002      	movs	r0, #2
 8002bbc:	f7fd fcd2 	bl	8000564 <lcd_print>
 8002bc0:	e00d      	b.n	8002bde <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <menu+0x1844>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d109      	bne.n	8002bde <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002bca:	4a5d      	ldr	r2, [pc, #372]	; (8002d40 <menu+0x1850>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7fd fcc8 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002bd4:	4a5b      	ldr	r2, [pc, #364]	; (8002d44 <menu+0x1854>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f7fd fcc3 	bl	8000564 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002bde:	4b5a      	ldr	r3, [pc, #360]	; (8002d48 <menu+0x1858>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	220a      	movs	r2, #10
 8002be4:	4959      	ldr	r1, [pc, #356]	; (8002d4c <menu+0x185c>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f009 fe54 	bl	800c894 <itoa>
		lcd_print(2,16,snum);
 8002bec:	4a57      	ldr	r2, [pc, #348]	; (8002d4c <menu+0x185c>)
 8002bee:	2110      	movs	r1, #16
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f7fd fcb7 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	4849      	ldr	r0, [pc, #292]	; (8002d20 <menu+0x1830>)
 8002bfa:	f006 fe55 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d119      	bne.n	8002c38 <menu+0x1748>
 8002c04:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <menu+0x1834>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d012      	beq.n	8002c38 <menu+0x1748>
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <menu+0x1828>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10e      	bne.n	8002c38 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002c1a:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <menu+0x1858>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <menu+0x1858>)
 8002c24:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002c26:	4b48      	ldr	r3, [pc, #288]	; (8002d48 <menu+0x1858>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d902      	bls.n	8002c34 <menu+0x1744>
				kapi2AcSure = 0;
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <menu+0x1858>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c34:	f003 f9c0 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002c38:	2104      	movs	r1, #4
 8002c3a:	4839      	ldr	r0, [pc, #228]	; (8002d20 <menu+0x1830>)
 8002c3c:	f006 fe34 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d119      	bne.n	8002c7a <menu+0x178a>
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <menu+0x1834>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	f083 0301 	eor.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <menu+0x178a>
 8002c54:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <menu+0x1828>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10e      	bne.n	8002c7a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002c5c:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <menu+0x1858>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <menu+0x1858>)
 8002c66:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002c68:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <menu+0x1858>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	d902      	bls.n	8002c76 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002c70:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <menu+0x1858>)
 8002c72:	2205      	movs	r2, #5
 8002c74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c76:	f003 f99f 	bl	8005fb8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c7a:	2108      	movs	r1, #8
 8002c7c:	4828      	ldr	r0, [pc, #160]	; (8002d20 <menu+0x1830>)
 8002c7e:	f006 fe13 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d10d      	bne.n	8002ca4 <menu+0x17b4>
 8002c88:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <menu+0x1834>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	f083 0301 	eor.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <menu+0x1858>)
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <menu+0x1838>)
 8002c9c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c9e:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <menu+0x183c>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <menu+0x1840>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b0d      	cmp	r3, #13
 8002caa:	f040 80b5 	bne.w	8002e18 <menu+0x1928>
		if(dilSecim == 0) {
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <menu+0x1844>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002cb6:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <menu+0x1860>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7fd fc52 	bl	8000564 <lcd_print>
 8002cc0:	e008      	b.n	8002cd4 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <menu+0x1844>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d104      	bne.n	8002cd4 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002cca:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <menu+0x1864>)
 8002ccc:	2101      	movs	r1, #1
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f7fd fc48 	bl	8000564 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <menu+0x1868>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002cdc:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <menu+0x186c>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2002      	movs	r0, #2
 8002ce2:	f7fd fc3f 	bl	8000564 <lcd_print>
 8002ce6:	e048      	b.n	8002d7a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <menu+0x1868>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d13b      	bne.n	8002d68 <menu+0x1878>
			if(dilSecim == 0) {
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <menu+0x1844>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002cf8:	4a19      	ldr	r2, [pc, #100]	; (8002d60 <menu+0x1870>)
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	f7fd fc31 	bl	8000564 <lcd_print>
 8002d02:	e03a      	b.n	8002d7a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <menu+0x1844>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d136      	bne.n	8002d7a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002d0c:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <menu+0x1874>)
 8002d0e:	2101      	movs	r1, #1
 8002d10:	2002      	movs	r0, #2
 8002d12:	f7fd fc27 	bl	8000564 <lcd_print>
 8002d16:	e030      	b.n	8002d7a <menu+0x188a>
 8002d18:	20000c1a 	.word	0x20000c1a
 8002d1c:	0800d13c 	.word	0x0800d13c
 8002d20:	40010800 	.word	0x40010800
 8002d24:	20000c3f 	.word	0x20000c3f
 8002d28:	20000b40 	.word	0x20000b40
 8002d2c:	20000c3c 	.word	0x20000c3c
 8002d30:	20000c10 	.word	0x20000c10
 8002d34:	20000c31 	.word	0x20000c31
 8002d38:	0800d1bc 	.word	0x0800d1bc
 8002d3c:	0800d160 	.word	0x0800d160
 8002d40:	0800d1d0 	.word	0x0800d1d0
 8002d44:	0800d184 	.word	0x0800d184
 8002d48:	20000c2a 	.word	0x20000c2a
 8002d4c:	20000bb0 	.word	0x20000bb0
 8002d50:	0800d1e4 	.word	0x0800d1e4
 8002d54:	0800d1f8 	.word	0x0800d1f8
 8002d58:	20000c1b 	.word	0x20000c1b
 8002d5c:	0800d104 	.word	0x0800d104
 8002d60:	0800d118 	.word	0x0800d118
 8002d64:	0800d128 	.word	0x0800d128
			}
		} else if(kapitablaTip == 2) {
 8002d68:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <menu+0x19e8>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d104      	bne.n	8002d7a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002d70:	4a5a      	ldr	r2, [pc, #360]	; (8002edc <menu+0x19ec>)
 8002d72:	2101      	movs	r1, #1
 8002d74:	2002      	movs	r0, #2
 8002d76:	f7fd fbf5 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	4858      	ldr	r0, [pc, #352]	; (8002ee0 <menu+0x19f0>)
 8002d7e:	f006 fd93 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d115      	bne.n	8002db4 <menu+0x18c4>
 8002d88:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <menu+0x19f4>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	f083 0301 	eor.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00e      	beq.n	8002db4 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002d96:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <menu+0x19e8>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <menu+0x19e8>)
 8002da0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002da2:	4b4d      	ldr	r3, [pc, #308]	; (8002ed8 <menu+0x19e8>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d902      	bls.n	8002db0 <menu+0x18c0>
				kapitablaTip = 0;
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <menu+0x19e8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002db0:	f003 f902 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002db4:	2104      	movs	r1, #4
 8002db6:	484a      	ldr	r0, [pc, #296]	; (8002ee0 <menu+0x19f0>)
 8002db8:	f006 fd76 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d115      	bne.n	8002dee <menu+0x18fe>
 8002dc2:	4b48      	ldr	r3, [pc, #288]	; (8002ee4 <menu+0x19f4>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	f083 0301 	eor.w	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00e      	beq.n	8002dee <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002dd0:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <menu+0x19e8>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <menu+0x19e8>)
 8002dda:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002ddc:	4b3e      	ldr	r3, [pc, #248]	; (8002ed8 <menu+0x19e8>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d902      	bls.n	8002dea <menu+0x18fa>
		   		kapitablaTip = 2;
 8002de4:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <menu+0x19e8>)
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dea:	f003 f8e5 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dee:	2108      	movs	r1, #8
 8002df0:	483b      	ldr	r0, [pc, #236]	; (8002ee0 <menu+0x19f0>)
 8002df2:	f006 fd59 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d10d      	bne.n	8002e18 <menu+0x1928>
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <menu+0x19f4>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002e0a:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <menu+0x19e8>)
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <menu+0x19f8>)
 8002e10:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002e12:	4b36      	ldr	r3, [pc, #216]	; (8002eec <menu+0x19fc>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002e18:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <menu+0x1a00>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b0e      	cmp	r3, #14
 8002e1e:	f040 80f2 	bne.w	8003006 <menu+0x1b16>
		if(dilSecim == 0) {
 8002e22:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <menu+0x1a04>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002e2a:	4a33      	ldr	r2, [pc, #204]	; (8002ef8 <menu+0x1a08>)
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7fd fb98 	bl	8000564 <lcd_print>
 8002e34:	e008      	b.n	8002e48 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002e36:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <menu+0x1a04>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d104      	bne.n	8002e48 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002e3e:	4a2f      	ldr	r2, [pc, #188]	; (8002efc <menu+0x1a0c>)
 8002e40:	2101      	movs	r1, #1
 8002e42:	2001      	movs	r0, #1
 8002e44:	f7fd fb8e 	bl	8000564 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002e48:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <menu+0x1a10>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d113      	bne.n	8002e78 <menu+0x1988>
			if(dilSecim == 0){
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <menu+0x1a04>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <menu+0x1a14>)
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f7fd fb81 	bl	8000564 <lcd_print>
 8002e62:	e071      	b.n	8002f48 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e64:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <menu+0x1a04>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d16d      	bne.n	8002f48 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002e6c:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <menu+0x1a18>)
 8002e6e:	2101      	movs	r1, #1
 8002e70:	2002      	movs	r0, #2
 8002e72:	f7fd fb77 	bl	8000564 <lcd_print>
 8002e76:	e067      	b.n	8002f48 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <menu+0x1a10>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d112      	bne.n	8002ea6 <menu+0x19b6>
			if(dilSecim == 0){
 8002e80:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <menu+0x1a04>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d104      	bne.n	8002e92 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <menu+0x1a1c>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7fd fb69 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <menu+0x1a04>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d156      	bne.n	8002f48 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002e9a:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <menu+0x1a20>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7fd fb60 	bl	8000564 <lcd_print>
 8002ea4:	e050      	b.n	8002f48 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <menu+0x1a10>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d136      	bne.n	8002f1c <menu+0x1a2c>
			if(dilSecim == 0){
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <menu+0x1a04>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <menu+0x1a24>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	2002      	movs	r0, #2
 8002ebc:	f7fd fb52 	bl	8000564 <lcd_print>
 8002ec0:	e042      	b.n	8002f48 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <menu+0x1a04>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d13e      	bne.n	8002f48 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002eca:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <menu+0x1a28>)
 8002ecc:	2101      	movs	r1, #1
 8002ece:	2002      	movs	r0, #2
 8002ed0:	f7fd fb48 	bl	8000564 <lcd_print>
 8002ed4:	e038      	b.n	8002f48 <menu+0x1a58>
 8002ed6:	bf00      	nop
 8002ed8:	20000c1b 	.word	0x20000c1b
 8002edc:	0800d13c 	.word	0x0800d13c
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	20000c3f 	.word	0x20000c3f
 8002ee8:	20000b40 	.word	0x20000b40
 8002eec:	20000c3c 	.word	0x20000c3c
 8002ef0:	20000c10 	.word	0x20000c10
 8002ef4:	20000c31 	.word	0x20000c31
 8002ef8:	0800d20c 	.word	0x0800d20c
 8002efc:	0800d220 	.word	0x0800d220
 8002f00:	20000c1d 	.word	0x20000c1d
 8002f04:	0800d234 	.word	0x0800d234
 8002f08:	0800d244 	.word	0x0800d244
 8002f0c:	0800d254 	.word	0x0800d254
 8002f10:	0800d264 	.word	0x0800d264
 8002f14:	0800d274 	.word	0x0800d274
 8002f18:	0800d288 	.word	0x0800d288
			}
		} else if(kapiTablaAcKonum == 3) {
 8002f1c:	4b9b      	ldr	r3, [pc, #620]	; (800318c <menu+0x1c9c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d111      	bne.n	8002f48 <menu+0x1a58>
			if(dilSecim == 0) {
 8002f24:	4b9a      	ldr	r3, [pc, #616]	; (8003190 <menu+0x1ca0>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002f2c:	4a99      	ldr	r2, [pc, #612]	; (8003194 <menu+0x1ca4>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2002      	movs	r0, #2
 8002f32:	f7fd fb17 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8002f36:	4b96      	ldr	r3, [pc, #600]	; (8003190 <menu+0x1ca0>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d104      	bne.n	8002f48 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002f3e:	4a96      	ldr	r2, [pc, #600]	; (8003198 <menu+0x1ca8>)
 8002f40:	2101      	movs	r1, #1
 8002f42:	2002      	movs	r0, #2
 8002f44:	f7fd fb0e 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f48:	2102      	movs	r1, #2
 8002f4a:	4894      	ldr	r0, [pc, #592]	; (800319c <menu+0x1cac>)
 8002f4c:	f006 fcac 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d115      	bne.n	8002f82 <menu+0x1a92>
 8002f56:	4b92      	ldr	r3, [pc, #584]	; (80031a0 <menu+0x1cb0>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	f083 0301 	eor.w	r3, r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002f64:	4b89      	ldr	r3, [pc, #548]	; (800318c <menu+0x1c9c>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b87      	ldr	r3, [pc, #540]	; (800318c <menu+0x1c9c>)
 8002f6e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002f70:	4b86      	ldr	r3, [pc, #536]	; (800318c <menu+0x1c9c>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d902      	bls.n	8002f7e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002f78:	4b84      	ldr	r3, [pc, #528]	; (800318c <menu+0x1c9c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f7e:	f003 f81b 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f82:	2104      	movs	r1, #4
 8002f84:	4885      	ldr	r0, [pc, #532]	; (800319c <menu+0x1cac>)
 8002f86:	f006 fc8f 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d115      	bne.n	8002fbc <menu+0x1acc>
 8002f90:	4b83      	ldr	r3, [pc, #524]	; (80031a0 <menu+0x1cb0>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f083 0301 	eor.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00e      	beq.n	8002fbc <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f9e:	4b7b      	ldr	r3, [pc, #492]	; (800318c <menu+0x1c9c>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4b79      	ldr	r3, [pc, #484]	; (800318c <menu+0x1c9c>)
 8002fa8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002faa:	4b78      	ldr	r3, [pc, #480]	; (800318c <menu+0x1c9c>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d902      	bls.n	8002fb8 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <menu+0x1c9c>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fb8:	f002 fffe 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fbc:	2108      	movs	r1, #8
 8002fbe:	4877      	ldr	r0, [pc, #476]	; (800319c <menu+0x1cac>)
 8002fc0:	f006 fc72 	bl	80098a8 <HAL_GPIO_ReadPin>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d11d      	bne.n	8003006 <menu+0x1b16>
 8002fca:	4b75      	ldr	r3, [pc, #468]	; (80031a0 <menu+0x1cb0>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	f083 0301 	eor.w	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d016      	beq.n	8003006 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002fd8:	4b6c      	ldr	r3, [pc, #432]	; (800318c <menu+0x1c9c>)
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	4b71      	ldr	r3, [pc, #452]	; (80031a4 <menu+0x1cb4>)
 8002fde:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002fe2:	4b6a      	ldr	r3, [pc, #424]	; (800318c <menu+0x1c9c>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <menu+0x1b02>
 8002fea:	4b68      	ldr	r3, [pc, #416]	; (800318c <menu+0x1c9c>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d106      	bne.n	8003000 <menu+0x1b10>
				altLimit = 1;
 8002ff2:	4b6d      	ldr	r3, [pc, #436]	; (80031a8 <menu+0x1cb8>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002ff8:	4b6b      	ldr	r3, [pc, #428]	; (80031a8 <menu+0x1cb8>)
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	4b69      	ldr	r3, [pc, #420]	; (80031a4 <menu+0x1cb4>)
 8002ffe:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <menu+0x1cbc>)
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8003006:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <menu+0x1cc0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d17f      	bne.n	800310e <menu+0x1c1e>
		if(dilSecim == 0) {
 800300e:	4b60      	ldr	r3, [pc, #384]	; (8003190 <menu+0x1ca0>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8003016:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <menu+0x1cc4>)
 8003018:	2101      	movs	r1, #1
 800301a:	2001      	movs	r0, #1
 800301c:	f7fd faa2 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003020:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <menu+0x1cc8>)
 8003022:	2101      	movs	r1, #1
 8003024:	2002      	movs	r0, #2
 8003026:	f7fd fa9d 	bl	8000564 <lcd_print>
 800302a:	e00d      	b.n	8003048 <menu+0x1b58>
		} else if(dilSecim == 1) {
 800302c:	4b58      	ldr	r3, [pc, #352]	; (8003190 <menu+0x1ca0>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d109      	bne.n	8003048 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003034:	4a61      	ldr	r2, [pc, #388]	; (80031bc <menu+0x1ccc>)
 8003036:	2101      	movs	r1, #1
 8003038:	2001      	movs	r0, #1
 800303a:	f7fd fa93 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800303e:	4a60      	ldr	r2, [pc, #384]	; (80031c0 <menu+0x1cd0>)
 8003040:	2101      	movs	r1, #1
 8003042:	2002      	movs	r0, #2
 8003044:	f7fd fa8e 	bl	8000564 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003048:	4b5e      	ldr	r3, [pc, #376]	; (80031c4 <menu+0x1cd4>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	220a      	movs	r2, #10
 800304e:	495e      	ldr	r1, [pc, #376]	; (80031c8 <menu+0x1cd8>)
 8003050:	4618      	mov	r0, r3
 8003052:	f009 fc1f 	bl	800c894 <itoa>
		lcd_print(2,16,snum);
 8003056:	4a5c      	ldr	r2, [pc, #368]	; (80031c8 <menu+0x1cd8>)
 8003058:	2110      	movs	r1, #16
 800305a:	2002      	movs	r0, #2
 800305c:	f7fd fa82 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003060:	2102      	movs	r1, #2
 8003062:	484e      	ldr	r0, [pc, #312]	; (800319c <menu+0x1cac>)
 8003064:	f006 fc20 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003068:	4603      	mov	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d119      	bne.n	80030a2 <menu+0x1bb2>
 800306e:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <menu+0x1cb0>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	f083 0301 	eor.w	r3, r3, #1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d012      	beq.n	80030a2 <menu+0x1bb2>
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <menu+0x1cdc>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10e      	bne.n	80030a2 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003084:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <menu+0x1cd4>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <menu+0x1cd4>)
 800308e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003090:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <menu+0x1cd4>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b05      	cmp	r3, #5
 8003096:	d902      	bls.n	800309e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <menu+0x1cd4>)
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800309e:	f002 ff8b 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80030a2:	2104      	movs	r1, #4
 80030a4:	483d      	ldr	r0, [pc, #244]	; (800319c <menu+0x1cac>)
 80030a6:	f006 fbff 	bl	80098a8 <HAL_GPIO_ReadPin>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d119      	bne.n	80030e4 <menu+0x1bf4>
 80030b0:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <menu+0x1cb0>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	f083 0301 	eor.w	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d012      	beq.n	80030e4 <menu+0x1bf4>
 80030be:	4b43      	ldr	r3, [pc, #268]	; (80031cc <menu+0x1cdc>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10e      	bne.n	80030e4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <menu+0x1cd4>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <menu+0x1cd4>)
 80030d0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80030d2:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <menu+0x1cd4>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80030da:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <menu+0x1cd4>)
 80030dc:	2205      	movs	r2, #5
 80030de:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80030e0:	f002 ff6a 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030e4:	2108      	movs	r1, #8
 80030e6:	482d      	ldr	r0, [pc, #180]	; (800319c <menu+0x1cac>)
 80030e8:	f006 fbde 	bl	80098a8 <HAL_GPIO_ReadPin>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10d      	bne.n	800310e <menu+0x1c1e>
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <menu+0x1cb0>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	f083 0301 	eor.w	r3, r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003100:	4b30      	ldr	r3, [pc, #192]	; (80031c4 <menu+0x1cd4>)
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <menu+0x1cb4>)
 8003106:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003108:	4b28      	ldr	r3, [pc, #160]	; (80031ac <menu+0x1cbc>)
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800310e:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <menu+0x1cc0>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b10      	cmp	r3, #16
 8003114:	f040 80bc 	bne.w	8003290 <menu+0x1da0>
		if(dilSecim == 0) {
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <menu+0x1ca0>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003120:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <menu+0x1ce0>)
 8003122:	2101      	movs	r1, #1
 8003124:	2001      	movs	r0, #1
 8003126:	f7fd fa1d 	bl	8000564 <lcd_print>
 800312a:	e008      	b.n	800313e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <menu+0x1ca0>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d104      	bne.n	800313e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <menu+0x1ce4>)
 8003136:	2101      	movs	r1, #1
 8003138:	2001      	movs	r0, #1
 800313a:	f7fd fa13 	bl	8000564 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <menu+0x1ce8>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d113      	bne.n	800316e <menu+0x1c7e>
			if(dilSecim == 0) {
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <menu+0x1ca0>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800314e:	4a11      	ldr	r2, [pc, #68]	; (8003194 <menu+0x1ca4>)
 8003150:	2101      	movs	r1, #1
 8003152:	2002      	movs	r0, #2
 8003154:	f7fd fa06 	bl	8000564 <lcd_print>
 8003158:	e04b      	b.n	80031f2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <menu+0x1ca0>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d147      	bne.n	80031f2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003162:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <menu+0x1ca8>)
 8003164:	2101      	movs	r1, #1
 8003166:	2002      	movs	r0, #2
 8003168:	f7fd f9fc 	bl	8000564 <lcd_print>
 800316c:	e041      	b.n	80031f2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <menu+0x1ce8>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d13d      	bne.n	80031f2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <menu+0x1ca0>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d130      	bne.n	80031e0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800317e:	4a17      	ldr	r2, [pc, #92]	; (80031dc <menu+0x1cec>)
 8003180:	2101      	movs	r1, #1
 8003182:	2002      	movs	r0, #2
 8003184:	f7fd f9ee 	bl	8000564 <lcd_print>
 8003188:	e033      	b.n	80031f2 <menu+0x1d02>
 800318a:	bf00      	nop
 800318c:	20000c1d 	.word	0x20000c1d
 8003190:	20000c31 	.word	0x20000c31
 8003194:	0800cefc 	.word	0x0800cefc
 8003198:	0800cf10 	.word	0x0800cf10
 800319c:	40010800 	.word	0x40010800
 80031a0:	20000c3f 	.word	0x20000c3f
 80031a4:	20000b40 	.word	0x20000b40
 80031a8:	20000c16 	.word	0x20000c16
 80031ac:	20000c3c 	.word	0x20000c3c
 80031b0:	20000c10 	.word	0x20000c10
 80031b4:	0800d29c 	.word	0x0800d29c
 80031b8:	0800d160 	.word	0x0800d160
 80031bc:	0800d2b0 	.word	0x0800d2b0
 80031c0:	0800d184 	.word	0x0800d184
 80031c4:	20000c2b 	.word	0x20000c2b
 80031c8:	20000bb0 	.word	0x20000bb0
 80031cc:	20000c1b 	.word	0x20000c1b
 80031d0:	0800d2c4 	.word	0x0800d2c4
 80031d4:	0800d2d8 	.word	0x0800d2d8
 80031d8:	20000c1e 	.word	0x20000c1e
 80031dc:	0800cf5c 	.word	0x0800cf5c
			} else if(dilSecim == 1) {
 80031e0:	4b99      	ldr	r3, [pc, #612]	; (8003448 <menu+0x1f58>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d104      	bne.n	80031f2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80031e8:	4a98      	ldr	r2, [pc, #608]	; (800344c <menu+0x1f5c>)
 80031ea:	2101      	movs	r1, #1
 80031ec:	2002      	movs	r0, #2
 80031ee:	f7fd f9b9 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f2:	2102      	movs	r1, #2
 80031f4:	4896      	ldr	r0, [pc, #600]	; (8003450 <menu+0x1f60>)
 80031f6:	f006 fb57 	bl	80098a8 <HAL_GPIO_ReadPin>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d115      	bne.n	800322c <menu+0x1d3c>
 8003200:	4b94      	ldr	r3, [pc, #592]	; (8003454 <menu+0x1f64>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f083 0301 	eor.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800320e:	4b92      	ldr	r3, [pc, #584]	; (8003458 <menu+0x1f68>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4b90      	ldr	r3, [pc, #576]	; (8003458 <menu+0x1f68>)
 8003218:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800321a:	4b8f      	ldr	r3, [pc, #572]	; (8003458 <menu+0x1f68>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d902      	bls.n	8003228 <menu+0x1d38>
				yukariYavasLimit = 0;
 8003222:	4b8d      	ldr	r3, [pc, #564]	; (8003458 <menu+0x1f68>)
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003228:	f002 fec6 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800322c:	2104      	movs	r1, #4
 800322e:	4888      	ldr	r0, [pc, #544]	; (8003450 <menu+0x1f60>)
 8003230:	f006 fb3a 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d115      	bne.n	8003266 <menu+0x1d76>
 800323a:	4b86      	ldr	r3, [pc, #536]	; (8003454 <menu+0x1f64>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	f083 0301 	eor.w	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00e      	beq.n	8003266 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003248:	4b83      	ldr	r3, [pc, #524]	; (8003458 <menu+0x1f68>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	3b01      	subs	r3, #1
 800324e:	b2da      	uxtb	r2, r3
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <menu+0x1f68>)
 8003252:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003254:	4b80      	ldr	r3, [pc, #512]	; (8003458 <menu+0x1f68>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800325c:	4b7e      	ldr	r3, [pc, #504]	; (8003458 <menu+0x1f68>)
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003262:	f002 fea9 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003266:	2108      	movs	r1, #8
 8003268:	4879      	ldr	r0, [pc, #484]	; (8003450 <menu+0x1f60>)
 800326a:	f006 fb1d 	bl	80098a8 <HAL_GPIO_ReadPin>
 800326e:	4603      	mov	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10d      	bne.n	8003290 <menu+0x1da0>
 8003274:	4b77      	ldr	r3, [pc, #476]	; (8003454 <menu+0x1f64>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f083 0301 	eor.w	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003282:	4b75      	ldr	r3, [pc, #468]	; (8003458 <menu+0x1f68>)
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	4b75      	ldr	r3, [pc, #468]	; (800345c <menu+0x1f6c>)
 8003288:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800328a:	4b75      	ldr	r3, [pc, #468]	; (8003460 <menu+0x1f70>)
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003290:	4b74      	ldr	r3, [pc, #464]	; (8003464 <menu+0x1f74>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b11      	cmp	r3, #17
 8003296:	f040 80c3 	bne.w	8003420 <menu+0x1f30>
		if(dilSecim == 0) {
 800329a:	4b6b      	ldr	r3, [pc, #428]	; (8003448 <menu+0x1f58>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80032a2:	4a71      	ldr	r2, [pc, #452]	; (8003468 <menu+0x1f78>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	2001      	movs	r0, #1
 80032a8:	f7fd f95c 	bl	8000564 <lcd_print>
 80032ac:	e008      	b.n	80032c0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80032ae:	4b66      	ldr	r3, [pc, #408]	; (8003448 <menu+0x1f58>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d104      	bne.n	80032c0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80032b6:	4a6d      	ldr	r2, [pc, #436]	; (800346c <menu+0x1f7c>)
 80032b8:	2101      	movs	r1, #1
 80032ba:	2001      	movs	r0, #1
 80032bc:	f7fd f952 	bl	8000564 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80032c0:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <menu+0x1f80>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d113      	bne.n	80032f0 <menu+0x1e00>
			if(dilSecim == 0){
 80032c8:	4b5f      	ldr	r3, [pc, #380]	; (8003448 <menu+0x1f58>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80032d0:	4a68      	ldr	r2, [pc, #416]	; (8003474 <menu+0x1f84>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	2002      	movs	r0, #2
 80032d6:	f7fd f945 	bl	8000564 <lcd_print>
 80032da:	e038      	b.n	800334e <menu+0x1e5e>
			} else if(dilSecim == 1){
 80032dc:	4b5a      	ldr	r3, [pc, #360]	; (8003448 <menu+0x1f58>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d134      	bne.n	800334e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80032e4:	4a64      	ldr	r2, [pc, #400]	; (8003478 <menu+0x1f88>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	2002      	movs	r0, #2
 80032ea:	f7fd f93b 	bl	8000564 <lcd_print>
 80032ee:	e02e      	b.n	800334e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032f0:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <menu+0x1f80>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d113      	bne.n	8003320 <menu+0x1e30>
			if(dilSecim == 0){
 80032f8:	4b53      	ldr	r3, [pc, #332]	; (8003448 <menu+0x1f58>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003300:	4a5e      	ldr	r2, [pc, #376]	; (800347c <menu+0x1f8c>)
 8003302:	2101      	movs	r1, #1
 8003304:	2002      	movs	r0, #2
 8003306:	f7fd f92d 	bl	8000564 <lcd_print>
 800330a:	e020      	b.n	800334e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800330c:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <menu+0x1f58>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d11c      	bne.n	800334e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003314:	4a5a      	ldr	r2, [pc, #360]	; (8003480 <menu+0x1f90>)
 8003316:	2101      	movs	r1, #1
 8003318:	2002      	movs	r0, #2
 800331a:	f7fd f923 	bl	8000564 <lcd_print>
 800331e:	e016      	b.n	800334e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003320:	4b53      	ldr	r3, [pc, #332]	; (8003470 <menu+0x1f80>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d112      	bne.n	800334e <menu+0x1e5e>
			if(dilSecim == 0) {
 8003328:	4b47      	ldr	r3, [pc, #284]	; (8003448 <menu+0x1f58>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003330:	4a54      	ldr	r2, [pc, #336]	; (8003484 <menu+0x1f94>)
 8003332:	2101      	movs	r1, #1
 8003334:	2002      	movs	r0, #2
 8003336:	f7fd f915 	bl	8000564 <lcd_print>
 800333a:	e008      	b.n	800334e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <menu+0x1f58>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d104      	bne.n	800334e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003344:	4a50      	ldr	r2, [pc, #320]	; (8003488 <menu+0x1f98>)
 8003346:	2101      	movs	r1, #1
 8003348:	2002      	movs	r0, #2
 800334a:	f7fd f90b 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800334e:	2102      	movs	r1, #2
 8003350:	483f      	ldr	r0, [pc, #252]	; (8003450 <menu+0x1f60>)
 8003352:	f006 faa9 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003356:	4603      	mov	r3, r0
 8003358:	2b01      	cmp	r3, #1
 800335a:	d115      	bne.n	8003388 <menu+0x1e98>
 800335c:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <menu+0x1f64>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	f083 0301 	eor.w	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00e      	beq.n	8003388 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800336a:	4b41      	ldr	r3, [pc, #260]	; (8003470 <menu+0x1f80>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <menu+0x1f80>)
 8003374:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <menu+0x1f80>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d902      	bls.n	8003384 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <menu+0x1f80>)
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003384:	f002 fe18 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003388:	2104      	movs	r1, #4
 800338a:	4831      	ldr	r0, [pc, #196]	; (8003450 <menu+0x1f60>)
 800338c:	f006 fa8c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003390:	4603      	mov	r3, r0
 8003392:	2b01      	cmp	r3, #1
 8003394:	d115      	bne.n	80033c2 <menu+0x1ed2>
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <menu+0x1f64>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	f083 0301 	eor.w	r3, r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <menu+0x1f80>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <menu+0x1f80>)
 80033ae:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80033b0:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <menu+0x1f80>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d902      	bls.n	80033be <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <menu+0x1f80>)
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033be:	f002 fdfb 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033c2:	2108      	movs	r1, #8
 80033c4:	4822      	ldr	r0, [pc, #136]	; (8003450 <menu+0x1f60>)
 80033c6:	f006 fa6f 	bl	80098a8 <HAL_GPIO_ReadPin>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d127      	bne.n	8003420 <menu+0x1f30>
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <menu+0x1f64>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	f083 0301 	eor.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <menu+0x1f80>)
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <menu+0x1f6c>)
 80033e4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <menu+0x1f80>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d003      	beq.n	80033f6 <menu+0x1f06>
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <menu+0x1f80>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d106      	bne.n	8003404 <menu+0x1f14>
				calismaSekli = 0;
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <menu+0x1f9c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80033fc:	4b23      	ldr	r3, [pc, #140]	; (800348c <menu+0x1f9c>)
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <menu+0x1f6c>)
 8003402:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <menu+0x1f80>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d106      	bne.n	800341a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800340c:	4b20      	ldr	r3, [pc, #128]	; (8003490 <menu+0x1fa0>)
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <menu+0x1fa0>)
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <menu+0x1f6c>)
 8003418:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <menu+0x1f70>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <menu+0x1f74>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b12      	cmp	r3, #18
 8003426:	f040 80d5 	bne.w	80035d4 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <menu+0x1f80>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d13c      	bne.n	80034ac <menu+0x1fbc>
			if(dilSecim == 0) {
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <menu+0x1f58>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d12e      	bne.n	8003498 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800343a:	4a16      	ldr	r2, [pc, #88]	; (8003494 <menu+0x1fa4>)
 800343c:	2101      	movs	r1, #1
 800343e:	2001      	movs	r0, #1
 8003440:	f7fd f890 	bl	8000564 <lcd_print>
 8003444:	e048      	b.n	80034d8 <menu+0x1fe8>
 8003446:	bf00      	nop
 8003448:	20000c31 	.word	0x20000c31
 800344c:	0800cf70 	.word	0x0800cf70
 8003450:	40010800 	.word	0x40010800
 8003454:	20000c3f 	.word	0x20000c3f
 8003458:	20000c1e 	.word	0x20000c1e
 800345c:	20000b40 	.word	0x20000b40
 8003460:	20000c3c 	.word	0x20000c3c
 8003464:	20000c10 	.word	0x20000c10
 8003468:	0800d2ec 	.word	0x0800d2ec
 800346c:	0800d300 	.word	0x0800d300
 8003470:	20000c1f 	.word	0x20000c1f
 8003474:	0800d314 	.word	0x0800d314
 8003478:	0800d324 	.word	0x0800d324
 800347c:	0800d334 	.word	0x0800d334
 8003480:	0800d344 	.word	0x0800d344
 8003484:	0800cefc 	.word	0x0800cefc
 8003488:	0800cf10 	.word	0x0800cf10
 800348c:	20000c11 	.word	0x20000c11
 8003490:	20000c22 	.word	0x20000c22
 8003494:	0800d354 	.word	0x0800d354
			} else if(dilSecim == 1) {
 8003498:	4b7b      	ldr	r3, [pc, #492]	; (8003688 <menu+0x2198>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d11b      	bne.n	80034d8 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80034a0:	4a7a      	ldr	r2, [pc, #488]	; (800368c <menu+0x219c>)
 80034a2:	2101      	movs	r1, #1
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7fd f85d 	bl	8000564 <lcd_print>
 80034aa:	e015      	b.n	80034d8 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034ac:	4b78      	ldr	r3, [pc, #480]	; (8003690 <menu+0x21a0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d111      	bne.n	80034d8 <menu+0x1fe8>
			if(dilSecim == 0){
 80034b4:	4b74      	ldr	r3, [pc, #464]	; (8003688 <menu+0x2198>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80034bc:	4a75      	ldr	r2, [pc, #468]	; (8003694 <menu+0x21a4>)
 80034be:	2101      	movs	r1, #1
 80034c0:	2001      	movs	r0, #1
 80034c2:	f7fd f84f 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 80034c6:	4b70      	ldr	r3, [pc, #448]	; (8003688 <menu+0x2198>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d104      	bne.n	80034d8 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80034ce:	4a72      	ldr	r2, [pc, #456]	; (8003698 <menu+0x21a8>)
 80034d0:	2101      	movs	r1, #1
 80034d2:	2001      	movs	r0, #1
 80034d4:	f7fd f846 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80034d8:	4b70      	ldr	r3, [pc, #448]	; (800369c <menu+0x21ac>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <menu+0x2018>
			if(dilSecim == 0) {
 80034e0:	4b69      	ldr	r3, [pc, #420]	; (8003688 <menu+0x2198>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80034e8:	4a6d      	ldr	r2, [pc, #436]	; (80036a0 <menu+0x21b0>)
 80034ea:	2101      	movs	r1, #1
 80034ec:	2002      	movs	r0, #2
 80034ee:	f7fd f839 	bl	8000564 <lcd_print>
 80034f2:	e020      	b.n	8003536 <menu+0x2046>
			} else if(dilSecim == 1){
 80034f4:	4b64      	ldr	r3, [pc, #400]	; (8003688 <menu+0x2198>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d11c      	bne.n	8003536 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80034fc:	4a69      	ldr	r2, [pc, #420]	; (80036a4 <menu+0x21b4>)
 80034fe:	2101      	movs	r1, #1
 8003500:	2002      	movs	r0, #2
 8003502:	f7fd f82f 	bl	8000564 <lcd_print>
 8003506:	e016      	b.n	8003536 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003508:	4b64      	ldr	r3, [pc, #400]	; (800369c <menu+0x21ac>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d112      	bne.n	8003536 <menu+0x2046>
			if(dilSecim == 0){
 8003510:	4b5d      	ldr	r3, [pc, #372]	; (8003688 <menu+0x2198>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003518:	4a63      	ldr	r2, [pc, #396]	; (80036a8 <menu+0x21b8>)
 800351a:	2101      	movs	r1, #1
 800351c:	2002      	movs	r0, #2
 800351e:	f7fd f821 	bl	8000564 <lcd_print>
 8003522:	e008      	b.n	8003536 <menu+0x2046>
			} else if(dilSecim == 1){
 8003524:	4b58      	ldr	r3, [pc, #352]	; (8003688 <menu+0x2198>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d104      	bne.n	8003536 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800352c:	4a5f      	ldr	r2, [pc, #380]	; (80036ac <menu+0x21bc>)
 800352e:	2101      	movs	r1, #1
 8003530:	2002      	movs	r0, #2
 8003532:	f7fd f817 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003536:	2102      	movs	r1, #2
 8003538:	485d      	ldr	r0, [pc, #372]	; (80036b0 <menu+0x21c0>)
 800353a:	f006 f9b5 	bl	80098a8 <HAL_GPIO_ReadPin>
 800353e:	4603      	mov	r3, r0
 8003540:	2b01      	cmp	r3, #1
 8003542:	d115      	bne.n	8003570 <menu+0x2080>
 8003544:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <menu+0x21c4>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	f083 0301 	eor.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00e      	beq.n	8003570 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003552:	4b52      	ldr	r3, [pc, #328]	; (800369c <menu+0x21ac>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4b50      	ldr	r3, [pc, #320]	; (800369c <menu+0x21ac>)
 800355c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800355e:	4b4f      	ldr	r3, [pc, #316]	; (800369c <menu+0x21ac>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d902      	bls.n	800356c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003566:	4b4d      	ldr	r3, [pc, #308]	; (800369c <menu+0x21ac>)
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800356c:	f002 fd24 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003570:	2104      	movs	r1, #4
 8003572:	484f      	ldr	r0, [pc, #316]	; (80036b0 <menu+0x21c0>)
 8003574:	f006 f998 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003578:	4603      	mov	r3, r0
 800357a:	2b01      	cmp	r3, #1
 800357c:	d115      	bne.n	80035aa <menu+0x20ba>
 800357e:	4b4d      	ldr	r3, [pc, #308]	; (80036b4 <menu+0x21c4>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	f083 0301 	eor.w	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800358c:	4b43      	ldr	r3, [pc, #268]	; (800369c <menu+0x21ac>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	3b01      	subs	r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	4b41      	ldr	r3, [pc, #260]	; (800369c <menu+0x21ac>)
 8003596:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003598:	4b40      	ldr	r3, [pc, #256]	; (800369c <menu+0x21ac>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80035a0:	4b3e      	ldr	r3, [pc, #248]	; (800369c <menu+0x21ac>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035a6:	f002 fd07 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035aa:	2108      	movs	r1, #8
 80035ac:	4840      	ldr	r0, [pc, #256]	; (80036b0 <menu+0x21c0>)
 80035ae:	f006 f97b 	bl	80098a8 <HAL_GPIO_ReadPin>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10d      	bne.n	80035d4 <menu+0x20e4>
 80035b8:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <menu+0x21c4>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	f083 0301 	eor.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80035c6:	4b35      	ldr	r3, [pc, #212]	; (800369c <menu+0x21ac>)
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <menu+0x21c8>)
 80035cc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80035ce:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <menu+0x21cc>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80035d4:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <menu+0x21d0>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b13      	cmp	r3, #19
 80035da:	f040 80d5 	bne.w	8003788 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <menu+0x21a0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d113      	bne.n	800360e <menu+0x211e>
			if(dilSecim == 0) {
 80035e6:	4b28      	ldr	r3, [pc, #160]	; (8003688 <menu+0x2198>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80035ee:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <menu+0x21d4>)
 80035f0:	2101      	movs	r1, #1
 80035f2:	2001      	movs	r0, #1
 80035f4:	f7fc ffb6 	bl	8000564 <lcd_print>
 80035f8:	e01f      	b.n	800363a <menu+0x214a>
			} else if(dilSecim == 1) {
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <menu+0x2198>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d11b      	bne.n	800363a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003602:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <menu+0x21d8>)
 8003604:	2101      	movs	r1, #1
 8003606:	2001      	movs	r0, #1
 8003608:	f7fc ffac 	bl	8000564 <lcd_print>
 800360c:	e015      	b.n	800363a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <menu+0x21a0>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d111      	bne.n	800363a <menu+0x214a>
			if(dilSecim == 0) {
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <menu+0x2198>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800361e:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <menu+0x21dc>)
 8003620:	2101      	movs	r1, #1
 8003622:	2001      	movs	r0, #1
 8003624:	f7fc ff9e 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <menu+0x2198>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d104      	bne.n	800363a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <menu+0x21e0>)
 8003632:	2101      	movs	r1, #1
 8003634:	2001      	movs	r0, #1
 8003636:	f7fc ff95 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <menu+0x21e4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d113      	bne.n	800366a <menu+0x217a>
			if(dilSecim == 0) {
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <menu+0x2198>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <menu+0x21b0>)
 800364c:	2101      	movs	r1, #1
 800364e:	2002      	movs	r0, #2
 8003650:	f7fc ff88 	bl	8000564 <lcd_print>
 8003654:	e049      	b.n	80036ea <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <menu+0x2198>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d145      	bne.n	80036ea <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800365e:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <menu+0x21b4>)
 8003660:	2101      	movs	r1, #1
 8003662:	2002      	movs	r0, #2
 8003664:	f7fc ff7e 	bl	8000564 <lcd_print>
 8003668:	e03f      	b.n	80036ea <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <menu+0x21e4>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d13b      	bne.n	80036ea <menu+0x21fa>
			if(dilSecim == 0) {
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <menu+0x2198>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d12e      	bne.n	80036d8 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800367a:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <menu+0x21b8>)
 800367c:	2101      	movs	r1, #1
 800367e:	2002      	movs	r0, #2
 8003680:	f7fc ff70 	bl	8000564 <lcd_print>
 8003684:	e031      	b.n	80036ea <menu+0x21fa>
 8003686:	bf00      	nop
 8003688:	20000c31 	.word	0x20000c31
 800368c:	0800d368 	.word	0x0800d368
 8003690:	20000c1f 	.word	0x20000c1f
 8003694:	0800d378 	.word	0x0800d378
 8003698:	0800d38c 	.word	0x0800d38c
 800369c:	20000c20 	.word	0x20000c20
 80036a0:	0800cefc 	.word	0x0800cefc
 80036a4:	0800cf10 	.word	0x0800cf10
 80036a8:	0800cf5c 	.word	0x0800cf5c
 80036ac:	0800cf70 	.word	0x0800cf70
 80036b0:	40010800 	.word	0x40010800
 80036b4:	20000c3f 	.word	0x20000c3f
 80036b8:	20000b40 	.word	0x20000b40
 80036bc:	20000c3c 	.word	0x20000c3c
 80036c0:	20000c10 	.word	0x20000c10
 80036c4:	0800d3a0 	.word	0x0800d3a0
 80036c8:	0800d3b4 	.word	0x0800d3b4
 80036cc:	0800d3c8 	.word	0x0800d3c8
 80036d0:	0800d3dc 	.word	0x0800d3dc
 80036d4:	20000c21 	.word	0x20000c21
			} else if(dilSecim == 1) {
 80036d8:	4b90      	ldr	r3, [pc, #576]	; (800391c <menu+0x242c>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d104      	bne.n	80036ea <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80036e0:	4a8f      	ldr	r2, [pc, #572]	; (8003920 <menu+0x2430>)
 80036e2:	2101      	movs	r1, #1
 80036e4:	2002      	movs	r0, #2
 80036e6:	f7fc ff3d 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ea:	2102      	movs	r1, #2
 80036ec:	488d      	ldr	r0, [pc, #564]	; (8003924 <menu+0x2434>)
 80036ee:	f006 f8db 	bl	80098a8 <HAL_GPIO_ReadPin>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d115      	bne.n	8003724 <menu+0x2234>
 80036f8:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <menu+0x2438>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003706:	4b89      	ldr	r3, [pc, #548]	; (800392c <menu+0x243c>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b87      	ldr	r3, [pc, #540]	; (800392c <menu+0x243c>)
 8003710:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003712:	4b86      	ldr	r3, [pc, #536]	; (800392c <menu+0x243c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d902      	bls.n	8003720 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800371a:	4b84      	ldr	r3, [pc, #528]	; (800392c <menu+0x243c>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003720:	f002 fc4a 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003724:	2104      	movs	r1, #4
 8003726:	487f      	ldr	r0, [pc, #508]	; (8003924 <menu+0x2434>)
 8003728:	f006 f8be 	bl	80098a8 <HAL_GPIO_ReadPin>
 800372c:	4603      	mov	r3, r0
 800372e:	2b01      	cmp	r3, #1
 8003730:	d115      	bne.n	800375e <menu+0x226e>
 8003732:	4b7d      	ldr	r3, [pc, #500]	; (8003928 <menu+0x2438>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f083 0301 	eor.w	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003740:	4b7a      	ldr	r3, [pc, #488]	; (800392c <menu+0x243c>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	3b01      	subs	r3, #1
 8003746:	b2da      	uxtb	r2, r3
 8003748:	4b78      	ldr	r3, [pc, #480]	; (800392c <menu+0x243c>)
 800374a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800374c:	4b77      	ldr	r3, [pc, #476]	; (800392c <menu+0x243c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003754:	4b75      	ldr	r3, [pc, #468]	; (800392c <menu+0x243c>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800375a:	f002 fc2d 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800375e:	2108      	movs	r1, #8
 8003760:	4870      	ldr	r0, [pc, #448]	; (8003924 <menu+0x2434>)
 8003762:	f006 f8a1 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10d      	bne.n	8003788 <menu+0x2298>
 800376c:	4b6e      	ldr	r3, [pc, #440]	; (8003928 <menu+0x2438>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800377a:	4b6c      	ldr	r3, [pc, #432]	; (800392c <menu+0x243c>)
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <menu+0x2440>)
 8003780:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <menu+0x2444>)
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003788:	4b6b      	ldr	r3, [pc, #428]	; (8003938 <menu+0x2448>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b14      	cmp	r3, #20
 800378e:	f040 80b5 	bne.w	80038fc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003792:	4b6a      	ldr	r3, [pc, #424]	; (800393c <menu+0x244c>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d113      	bne.n	80037c2 <menu+0x22d2>
			if(dilSecim == 0) {
 800379a:	4b60      	ldr	r3, [pc, #384]	; (800391c <menu+0x242c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80037a2:	4a67      	ldr	r2, [pc, #412]	; (8003940 <menu+0x2450>)
 80037a4:	2101      	movs	r1, #1
 80037a6:	2001      	movs	r0, #1
 80037a8:	f7fc fedc 	bl	8000564 <lcd_print>
 80037ac:	e020      	b.n	80037f0 <menu+0x2300>
			} else if(dilSecim == 1) {
 80037ae:	4b5b      	ldr	r3, [pc, #364]	; (800391c <menu+0x242c>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d11c      	bne.n	80037f0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80037b6:	4a63      	ldr	r2, [pc, #396]	; (8003944 <menu+0x2454>)
 80037b8:	2101      	movs	r1, #1
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7fc fed2 	bl	8000564 <lcd_print>
 80037c0:	e016      	b.n	80037f0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80037c2:	4b5e      	ldr	r3, [pc, #376]	; (800393c <menu+0x244c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d112      	bne.n	80037f0 <menu+0x2300>
			if(dilSecim == 0) {
 80037ca:	4b54      	ldr	r3, [pc, #336]	; (800391c <menu+0x242c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80037d2:	4a5d      	ldr	r2, [pc, #372]	; (8003948 <menu+0x2458>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	2001      	movs	r0, #1
 80037d8:	f7fc fec4 	bl	8000564 <lcd_print>
 80037dc:	e008      	b.n	80037f0 <menu+0x2300>
			} else if(dilSecim == 1) {
 80037de:	4b4f      	ldr	r3, [pc, #316]	; (800391c <menu+0x242c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d104      	bne.n	80037f0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80037e6:	4a59      	ldr	r2, [pc, #356]	; (800394c <menu+0x245c>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	2001      	movs	r0, #1
 80037ec:	f7fc feba 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80037f0:	4b57      	ldr	r3, [pc, #348]	; (8003950 <menu+0x2460>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d113      	bne.n	8003820 <menu+0x2330>
			if(dilSecim == 0) {
 80037f8:	4b48      	ldr	r3, [pc, #288]	; (800391c <menu+0x242c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003800:	4a54      	ldr	r2, [pc, #336]	; (8003954 <menu+0x2464>)
 8003802:	2101      	movs	r1, #1
 8003804:	2002      	movs	r0, #2
 8003806:	f7fc fead 	bl	8000564 <lcd_print>
 800380a:	e020      	b.n	800384e <menu+0x235e>
			} else if(dilSecim == 1) {
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <menu+0x242c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d11c      	bne.n	800384e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003814:	4a50      	ldr	r2, [pc, #320]	; (8003958 <menu+0x2468>)
 8003816:	2101      	movs	r1, #1
 8003818:	2002      	movs	r0, #2
 800381a:	f7fc fea3 	bl	8000564 <lcd_print>
 800381e:	e016      	b.n	800384e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <menu+0x2460>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d112      	bne.n	800384e <menu+0x235e>
			if(dilSecim == 0) {
 8003828:	4b3c      	ldr	r3, [pc, #240]	; (800391c <menu+0x242c>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003830:	4a4a      	ldr	r2, [pc, #296]	; (800395c <menu+0x246c>)
 8003832:	2101      	movs	r1, #1
 8003834:	2002      	movs	r0, #2
 8003836:	f7fc fe95 	bl	8000564 <lcd_print>
 800383a:	e008      	b.n	800384e <menu+0x235e>
			} else if(dilSecim == 1) {
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <menu+0x242c>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d104      	bne.n	800384e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003844:	4a46      	ldr	r2, [pc, #280]	; (8003960 <menu+0x2470>)
 8003846:	2101      	movs	r1, #1
 8003848:	2002      	movs	r0, #2
 800384a:	f7fc fe8b 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800384e:	2102      	movs	r1, #2
 8003850:	4834      	ldr	r0, [pc, #208]	; (8003924 <menu+0x2434>)
 8003852:	f006 f829 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d119      	bne.n	8003890 <menu+0x23a0>
 800385c:	4b32      	ldr	r3, [pc, #200]	; (8003928 <menu+0x2438>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	f083 0301 	eor.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <menu+0x23a0>
 800386a:	4b34      	ldr	r3, [pc, #208]	; (800393c <menu+0x244c>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d10e      	bne.n	8003890 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003872:	4b37      	ldr	r3, [pc, #220]	; (8003950 <menu+0x2460>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b35      	ldr	r3, [pc, #212]	; (8003950 <menu+0x2460>)
 800387c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800387e:	4b34      	ldr	r3, [pc, #208]	; (8003950 <menu+0x2460>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d902      	bls.n	800388c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <menu+0x2460>)
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800388c:	f002 fb94 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003890:	2104      	movs	r1, #4
 8003892:	4824      	ldr	r0, [pc, #144]	; (8003924 <menu+0x2434>)
 8003894:	f006 f808 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d119      	bne.n	80038d2 <menu+0x23e2>
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <menu+0x2438>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d012      	beq.n	80038d2 <menu+0x23e2>
 80038ac:	4b23      	ldr	r3, [pc, #140]	; (800393c <menu+0x244c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d10e      	bne.n	80038d2 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <menu+0x2460>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	4b24      	ldr	r3, [pc, #144]	; (8003950 <menu+0x2460>)
 80038be:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80038c0:	4b23      	ldr	r3, [pc, #140]	; (8003950 <menu+0x2460>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80038c8:	4b21      	ldr	r3, [pc, #132]	; (8003950 <menu+0x2460>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038ce:	f002 fb73 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d2:	2108      	movs	r1, #8
 80038d4:	4813      	ldr	r0, [pc, #76]	; (8003924 <menu+0x2434>)
 80038d6:	f005 ffe7 	bl	80098a8 <HAL_GPIO_ReadPin>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10d      	bne.n	80038fc <menu+0x240c>
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <menu+0x2438>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f083 0301 	eor.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d006      	beq.n	80038fc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <menu+0x2460>)
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <menu+0x2440>)
 80038f4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <menu+0x2444>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <menu+0x2448>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b15      	cmp	r3, #21
 8003902:	f040 80c2 	bne.w	8003a8a <menu+0x259a>
		if(dilSecim == 0) {
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <menu+0x242c>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d12c      	bne.n	8003968 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800390e:	4a15      	ldr	r2, [pc, #84]	; (8003964 <menu+0x2474>)
 8003910:	2101      	movs	r1, #1
 8003912:	2001      	movs	r0, #1
 8003914:	f7fc fe26 	bl	8000564 <lcd_print>
 8003918:	e02f      	b.n	800397a <menu+0x248a>
 800391a:	bf00      	nop
 800391c:	20000c31 	.word	0x20000c31
 8003920:	0800cf70 	.word	0x0800cf70
 8003924:	40010800 	.word	0x40010800
 8003928:	20000c3f 	.word	0x20000c3f
 800392c:	20000c21 	.word	0x20000c21
 8003930:	20000b40 	.word	0x20000b40
 8003934:	20000c3c 	.word	0x20000c3c
 8003938:	20000c10 	.word	0x20000c10
 800393c:	20000c1f 	.word	0x20000c1f
 8003940:	0800d3f0 	.word	0x0800d3f0
 8003944:	0800d404 	.word	0x0800d404
 8003948:	0800d418 	.word	0x0800d418
 800394c:	0800d42c 	.word	0x0800d42c
 8003950:	20000c22 	.word	0x20000c22
 8003954:	0800d440 	.word	0x0800d440
 8003958:	0800d454 	.word	0x0800d454
 800395c:	0800d464 	.word	0x0800d464
 8003960:	0800d478 	.word	0x0800d478
 8003964:	0800d488 	.word	0x0800d488
		} else if(dilSecim == 1) {
 8003968:	4b9c      	ldr	r3, [pc, #624]	; (8003bdc <menu+0x26ec>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d104      	bne.n	800397a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003970:	4a9b      	ldr	r2, [pc, #620]	; (8003be0 <menu+0x26f0>)
 8003972:	2101      	movs	r1, #1
 8003974:	2001      	movs	r0, #1
 8003976:	f7fc fdf5 	bl	8000564 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800397a:	4b9a      	ldr	r3, [pc, #616]	; (8003be4 <menu+0x26f4>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d112      	bne.n	80039a8 <menu+0x24b8>
			if(dilSecim == 0) {
 8003982:	4b96      	ldr	r3, [pc, #600]	; (8003bdc <menu+0x26ec>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800398a:	4a97      	ldr	r2, [pc, #604]	; (8003be8 <menu+0x26f8>)
 800398c:	2101      	movs	r1, #1
 800398e:	2002      	movs	r0, #2
 8003990:	f7fc fde8 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8003994:	4b91      	ldr	r3, [pc, #580]	; (8003bdc <menu+0x26ec>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d11c      	bne.n	80039d6 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800399c:	4a93      	ldr	r2, [pc, #588]	; (8003bec <menu+0x26fc>)
 800399e:	2101      	movs	r1, #1
 80039a0:	2002      	movs	r0, #2
 80039a2:	f7fc fddf 	bl	8000564 <lcd_print>
 80039a6:	e016      	b.n	80039d6 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80039a8:	4b8e      	ldr	r3, [pc, #568]	; (8003be4 <menu+0x26f4>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d112      	bne.n	80039d6 <menu+0x24e6>
			if(dilSecim == 0) {
 80039b0:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <menu+0x26ec>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80039b8:	4a8d      	ldr	r2, [pc, #564]	; (8003bf0 <menu+0x2700>)
 80039ba:	2101      	movs	r1, #1
 80039bc:	2002      	movs	r0, #2
 80039be:	f7fc fdd1 	bl	8000564 <lcd_print>
 80039c2:	e008      	b.n	80039d6 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80039c4:	4b85      	ldr	r3, [pc, #532]	; (8003bdc <menu+0x26ec>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d104      	bne.n	80039d6 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80039cc:	4a89      	ldr	r2, [pc, #548]	; (8003bf4 <menu+0x2704>)
 80039ce:	2101      	movs	r1, #1
 80039d0:	2002      	movs	r0, #2
 80039d2:	f7fc fdc7 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039d6:	2102      	movs	r1, #2
 80039d8:	4887      	ldr	r0, [pc, #540]	; (8003bf8 <menu+0x2708>)
 80039da:	f005 ff65 	bl	80098a8 <HAL_GPIO_ReadPin>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d115      	bne.n	8003a10 <menu+0x2520>
 80039e4:	4b85      	ldr	r3, [pc, #532]	; (8003bfc <menu+0x270c>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	f083 0301 	eor.w	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80039f2:	4b7c      	ldr	r3, [pc, #496]	; (8003be4 <menu+0x26f4>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	3301      	adds	r3, #1
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	4b7a      	ldr	r3, [pc, #488]	; (8003be4 <menu+0x26f4>)
 80039fc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80039fe:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <menu+0x26f4>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d902      	bls.n	8003a0c <menu+0x251c>
				platformSilindirTipi = 0;
 8003a06:	4b77      	ldr	r3, [pc, #476]	; (8003be4 <menu+0x26f4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a0c:	f002 fad4 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a10:	2104      	movs	r1, #4
 8003a12:	4879      	ldr	r0, [pc, #484]	; (8003bf8 <menu+0x2708>)
 8003a14:	f005 ff48 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d115      	bne.n	8003a4a <menu+0x255a>
 8003a1e:	4b77      	ldr	r3, [pc, #476]	; (8003bfc <menu+0x270c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	f083 0301 	eor.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00e      	beq.n	8003a4a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003a2c:	4b6d      	ldr	r3, [pc, #436]	; (8003be4 <menu+0x26f4>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	4b6b      	ldr	r3, [pc, #428]	; (8003be4 <menu+0x26f4>)
 8003a36:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003a38:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <menu+0x26f4>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003a40:	4b68      	ldr	r3, [pc, #416]	; (8003be4 <menu+0x26f4>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a46:	f002 fab7 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a4a:	2108      	movs	r1, #8
 8003a4c:	486a      	ldr	r0, [pc, #424]	; (8003bf8 <menu+0x2708>)
 8003a4e:	f005 ff2b 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d118      	bne.n	8003a8a <menu+0x259a>
 8003a58:	4b68      	ldr	r3, [pc, #416]	; (8003bfc <menu+0x270c>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	f083 0301 	eor.w	r3, r3, #1
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d011      	beq.n	8003a8a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003a66:	4b5f      	ldr	r3, [pc, #380]	; (8003be4 <menu+0x26f4>)
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <menu+0x2710>)
 8003a6c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	; (8003be4 <menu+0x26f4>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d106      	bne.n	8003a84 <menu+0x2594>
				altLimit = 1;
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <menu+0x2714>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <menu+0x2714>)
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <menu+0x2710>)
 8003a82:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003a84:	4b60      	ldr	r3, [pc, #384]	; (8003c08 <menu+0x2718>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003a8a:	4b60      	ldr	r3, [pc, #384]	; (8003c0c <menu+0x271c>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b16      	cmp	r3, #22
 8003a90:	f040 8081 	bne.w	8003b96 <menu+0x26a6>
		if(dilSecim == 0) {
 8003a94:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <menu+0x26ec>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a9c:	4a5c      	ldr	r2, [pc, #368]	; (8003c10 <menu+0x2720>)
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f7fc fd5f 	bl	8000564 <lcd_print>
 8003aa6:	e008      	b.n	8003aba <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003aa8:	4b4c      	ldr	r3, [pc, #304]	; (8003bdc <menu+0x26ec>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d104      	bne.n	8003aba <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <menu+0x2724>)
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f7fc fd55 	bl	8000564 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003aba:	4b48      	ldr	r3, [pc, #288]	; (8003bdc <menu+0x26ec>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ac2:	4a55      	ldr	r2, [pc, #340]	; (8003c18 <menu+0x2728>)
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f7fc fd4c 	bl	8000564 <lcd_print>
 8003acc:	e008      	b.n	8003ae0 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003ace:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <menu+0x26ec>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d104      	bne.n	8003ae0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003ad6:	4a51      	ldr	r2, [pc, #324]	; (8003c1c <menu+0x272c>)
 8003ad8:	2101      	movs	r1, #1
 8003ada:	2002      	movs	r0, #2
 8003adc:	f7fc fd42 	bl	8000564 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003ae0:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <menu+0x2730>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	220a      	movs	r2, #10
 8003ae6:	494f      	ldr	r1, [pc, #316]	; (8003c24 <menu+0x2734>)
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f008 fed3 	bl	800c894 <itoa>
		lcd_print(2,16,snum);
 8003aee:	4a4d      	ldr	r2, [pc, #308]	; (8003c24 <menu+0x2734>)
 8003af0:	2110      	movs	r1, #16
 8003af2:	2002      	movs	r0, #2
 8003af4:	f7fc fd36 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003af8:	2102      	movs	r1, #2
 8003afa:	483f      	ldr	r0, [pc, #252]	; (8003bf8 <menu+0x2708>)
 8003afc:	f005 fed4 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d115      	bne.n	8003b32 <menu+0x2642>
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <menu+0x270c>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003b14:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <menu+0x2730>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <menu+0x2730>)
 8003b1e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003b20:	4b3f      	ldr	r3, [pc, #252]	; (8003c20 <menu+0x2730>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d902      	bls.n	8003b2e <menu+0x263e>
				yukariValfTmr = 0;
 8003b28:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <menu+0x2730>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b2e:	f002 fa43 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b32:	2104      	movs	r1, #4
 8003b34:	4830      	ldr	r0, [pc, #192]	; (8003bf8 <menu+0x2708>)
 8003b36:	f005 feb7 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d115      	bne.n	8003b6c <menu+0x267c>
 8003b40:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <menu+0x270c>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	f083 0301 	eor.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003b4e:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <menu+0x2730>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4b32      	ldr	r3, [pc, #200]	; (8003c20 <menu+0x2730>)
 8003b58:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <menu+0x2730>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d902      	bls.n	8003b68 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003b62:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <menu+0x2730>)
 8003b64:	2205      	movs	r2, #5
 8003b66:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b68:	f002 fa26 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b6c:	2108      	movs	r1, #8
 8003b6e:	4822      	ldr	r0, [pc, #136]	; (8003bf8 <menu+0x2708>)
 8003b70:	f005 fe9a 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d10d      	bne.n	8003b96 <menu+0x26a6>
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <menu+0x270c>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	f083 0301 	eor.w	r3, r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <menu+0x2730>)
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <menu+0x2710>)
 8003b8e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <menu+0x2718>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <menu+0x271c>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b17      	cmp	r3, #23
 8003b9c:	f040 80ac 	bne.w	8003cf8 <menu+0x2808>
		if(dilSecim == 0) {
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <menu+0x26ec>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003ba8:	4a1f      	ldr	r2, [pc, #124]	; (8003c28 <menu+0x2738>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2001      	movs	r0, #1
 8003bae:	f7fc fcd9 	bl	8000564 <lcd_print>
 8003bb2:	e008      	b.n	8003bc6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <menu+0x26ec>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d104      	bne.n	8003bc6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <menu+0x273c>)
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7fc fccf 	bl	8000564 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <menu+0x26ec>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d130      	bne.n	8003c30 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <menu+0x2728>)
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f7fc fcc6 	bl	8000564 <lcd_print>
 8003bd8:	e033      	b.n	8003c42 <menu+0x2752>
 8003bda:	bf00      	nop
 8003bdc:	20000c31 	.word	0x20000c31
 8003be0:	0800d49c 	.word	0x0800d49c
 8003be4:	20000c23 	.word	0x20000c23
 8003be8:	0800d440 	.word	0x0800d440
 8003bec:	0800d454 	.word	0x0800d454
 8003bf0:	0800d464 	.word	0x0800d464
 8003bf4:	0800d478 	.word	0x0800d478
 8003bf8:	40010800 	.word	0x40010800
 8003bfc:	20000c3f 	.word	0x20000c3f
 8003c00:	20000b40 	.word	0x20000b40
 8003c04:	20000c16 	.word	0x20000c16
 8003c08:	20000c3c 	.word	0x20000c3c
 8003c0c:	20000c10 	.word	0x20000c10
 8003c10:	0800d4ac 	.word	0x0800d4ac
 8003c14:	0800d4c0 	.word	0x0800d4c0
 8003c18:	0800d160 	.word	0x0800d160
 8003c1c:	0800d4d4 	.word	0x0800d4d4
 8003c20:	20000c24 	.word	0x20000c24
 8003c24:	20000bb0 	.word	0x20000bb0
 8003c28:	0800d4e4 	.word	0x0800d4e4
 8003c2c:	0800d4f8 	.word	0x0800d4f8
			} else if(dilSecim == 1) {
 8003c30:	4b98      	ldr	r3, [pc, #608]	; (8003e94 <menu+0x29a4>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d104      	bne.n	8003c42 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003c38:	4a97      	ldr	r2, [pc, #604]	; (8003e98 <menu+0x29a8>)
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	2002      	movs	r0, #2
 8003c3e:	f7fc fc91 	bl	8000564 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003c42:	4b96      	ldr	r3, [pc, #600]	; (8003e9c <menu+0x29ac>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	220a      	movs	r2, #10
 8003c48:	4995      	ldr	r1, [pc, #596]	; (8003ea0 <menu+0x29b0>)
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f008 fe22 	bl	800c894 <itoa>
		lcd_print(2,16,snum);
 8003c50:	4a93      	ldr	r2, [pc, #588]	; (8003ea0 <menu+0x29b0>)
 8003c52:	2110      	movs	r1, #16
 8003c54:	2002      	movs	r0, #2
 8003c56:	f7fc fc85 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	4891      	ldr	r0, [pc, #580]	; (8003ea4 <menu+0x29b4>)
 8003c5e:	f005 fe23 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d115      	bne.n	8003c94 <menu+0x27a4>
 8003c68:	4b8f      	ldr	r3, [pc, #572]	; (8003ea8 <menu+0x29b8>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f083 0301 	eor.w	r3, r3, #1
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003c76:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <menu+0x29ac>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4b87      	ldr	r3, [pc, #540]	; (8003e9c <menu+0x29ac>)
 8003c80:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003c82:	4b86      	ldr	r3, [pc, #536]	; (8003e9c <menu+0x29ac>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d902      	bls.n	8003c90 <menu+0x27a0>
				asagiValfTmr = 0;
 8003c8a:	4b84      	ldr	r3, [pc, #528]	; (8003e9c <menu+0x29ac>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c90:	f002 f992 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c94:	2104      	movs	r1, #4
 8003c96:	4883      	ldr	r0, [pc, #524]	; (8003ea4 <menu+0x29b4>)
 8003c98:	f005 fe06 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d115      	bne.n	8003cce <menu+0x27de>
 8003ca2:	4b81      	ldr	r3, [pc, #516]	; (8003ea8 <menu+0x29b8>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	f083 0301 	eor.w	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00e      	beq.n	8003cce <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003cb0:	4b7a      	ldr	r3, [pc, #488]	; (8003e9c <menu+0x29ac>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	4b78      	ldr	r3, [pc, #480]	; (8003e9c <menu+0x29ac>)
 8003cba:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003cbc:	4b77      	ldr	r3, [pc, #476]	; (8003e9c <menu+0x29ac>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d902      	bls.n	8003cca <menu+0x27da>
		   		asagiValfTmr = 5;
 8003cc4:	4b75      	ldr	r3, [pc, #468]	; (8003e9c <menu+0x29ac>)
 8003cc6:	2205      	movs	r2, #5
 8003cc8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cca:	f002 f975 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cce:	2108      	movs	r1, #8
 8003cd0:	4874      	ldr	r0, [pc, #464]	; (8003ea4 <menu+0x29b4>)
 8003cd2:	f005 fde9 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d10d      	bne.n	8003cf8 <menu+0x2808>
 8003cdc:	4b72      	ldr	r3, [pc, #456]	; (8003ea8 <menu+0x29b8>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f083 0301 	eor.w	r3, r3, #1
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003cea:	4b6c      	ldr	r3, [pc, #432]	; (8003e9c <menu+0x29ac>)
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	4b6f      	ldr	r3, [pc, #444]	; (8003eac <menu+0x29bc>)
 8003cf0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003cf2:	4b6f      	ldr	r3, [pc, #444]	; (8003eb0 <menu+0x29c0>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003cf8:	4b6e      	ldr	r3, [pc, #440]	; (8003eb4 <menu+0x29c4>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b18      	cmp	r3, #24
 8003cfe:	f040 809d 	bne.w	8003e3c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003d02:	4b6d      	ldr	r3, [pc, #436]	; (8003eb8 <menu+0x29c8>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d113      	bne.n	8003d32 <menu+0x2842>
			if(dilSecim == 0) {
 8003d0a:	4b62      	ldr	r3, [pc, #392]	; (8003e94 <menu+0x29a4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003d12:	4a6a      	ldr	r2, [pc, #424]	; (8003ebc <menu+0x29cc>)
 8003d14:	2101      	movs	r1, #1
 8003d16:	2001      	movs	r0, #1
 8003d18:	f7fc fc24 	bl	8000564 <lcd_print>
 8003d1c:	e020      	b.n	8003d60 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003d1e:	4b5d      	ldr	r3, [pc, #372]	; (8003e94 <menu+0x29a4>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d11c      	bne.n	8003d60 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003d26:	4a66      	ldr	r2, [pc, #408]	; (8003ec0 <menu+0x29d0>)
 8003d28:	2101      	movs	r1, #1
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f7fc fc1a 	bl	8000564 <lcd_print>
 8003d30:	e016      	b.n	8003d60 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d32:	4b61      	ldr	r3, [pc, #388]	; (8003eb8 <menu+0x29c8>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d112      	bne.n	8003d60 <menu+0x2870>
			if(dilSecim == 0) {
 8003d3a:	4b56      	ldr	r3, [pc, #344]	; (8003e94 <menu+0x29a4>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003d42:	4a60      	ldr	r2, [pc, #384]	; (8003ec4 <menu+0x29d4>)
 8003d44:	2101      	movs	r1, #1
 8003d46:	2001      	movs	r0, #1
 8003d48:	f7fc fc0c 	bl	8000564 <lcd_print>
 8003d4c:	e008      	b.n	8003d60 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003d4e:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <menu+0x29a4>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d104      	bne.n	8003d60 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003d56:	4a5c      	ldr	r2, [pc, #368]	; (8003ec8 <menu+0x29d8>)
 8003d58:	2101      	movs	r1, #1
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f7fc fc02 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003d60:	4b4c      	ldr	r3, [pc, #304]	; (8003e94 <menu+0x29a4>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d68:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <menu+0x29dc>)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	2002      	movs	r0, #2
 8003d6e:	f7fc fbf9 	bl	8000564 <lcd_print>
 8003d72:	e008      	b.n	8003d86 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003d74:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <menu+0x29a4>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d104      	bne.n	8003d86 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003d7c:	4a46      	ldr	r2, [pc, #280]	; (8003e98 <menu+0x29a8>)
 8003d7e:	2101      	movs	r1, #1
 8003d80:	2002      	movs	r0, #2
 8003d82:	f7fc fbef 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003d86:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <menu+0x29e0>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	220a      	movs	r2, #10
 8003d8c:	4944      	ldr	r1, [pc, #272]	; (8003ea0 <menu+0x29b0>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f008 fd80 	bl	800c894 <itoa>
		lcd_print(2, 16, snum);
 8003d94:	4a42      	ldr	r2, [pc, #264]	; (8003ea0 <menu+0x29b0>)
 8003d96:	2110      	movs	r1, #16
 8003d98:	2002      	movs	r0, #2
 8003d9a:	f7fc fbe3 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4840      	ldr	r0, [pc, #256]	; (8003ea4 <menu+0x29b4>)
 8003da2:	f005 fd81 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d115      	bne.n	8003dd8 <menu+0x28e8>
 8003dac:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <menu+0x29b8>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	f083 0301 	eor.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00e      	beq.n	8003dd8 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003dba:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <menu+0x29e0>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4b43      	ldr	r3, [pc, #268]	; (8003ed0 <menu+0x29e0>)
 8003dc4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003dc6:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <menu+0x29e0>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d902      	bls.n	8003dd4 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003dce:	4b40      	ldr	r3, [pc, #256]	; (8003ed0 <menu+0x29e0>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003dd4:	f002 f8f0 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd8:	2104      	movs	r1, #4
 8003dda:	4832      	ldr	r0, [pc, #200]	; (8003ea4 <menu+0x29b4>)
 8003ddc:	f005 fd64 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d115      	bne.n	8003e12 <menu+0x2922>
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <menu+0x29b8>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	f083 0301 	eor.w	r3, r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00e      	beq.n	8003e12 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003df4:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <menu+0x29e0>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <menu+0x29e0>)
 8003dfe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003e00:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <menu+0x29e0>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b06      	cmp	r3, #6
 8003e06:	d902      	bls.n	8003e0e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003e08:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <menu+0x29e0>)
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e0e:	f002 f8d3 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e12:	2108      	movs	r1, #8
 8003e14:	4823      	ldr	r0, [pc, #140]	; (8003ea4 <menu+0x29b4>)
 8003e16:	f005 fd47 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10d      	bne.n	8003e3c <menu+0x294c>
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <menu+0x29b8>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	f083 0301 	eor.w	r3, r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003e2e:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <menu+0x29e0>)
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <menu+0x29bc>)
 8003e34:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <menu+0x29c0>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <menu+0x29c4>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b19      	cmp	r3, #25
 8003e42:	f040 80c4 	bne.w	8003fce <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003e46:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <menu+0x29c8>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d113      	bne.n	8003e76 <menu+0x2986>
			if(dilSecim == 0) {
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <menu+0x29a4>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003e56:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <menu+0x29e4>)
 8003e58:	2101      	movs	r1, #1
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f7fc fb82 	bl	8000564 <lcd_print>
 8003e60:	e047      	b.n	8003ef2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <menu+0x29a4>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d143      	bne.n	8003ef2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <menu+0x29e8>)
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f7fc fb78 	bl	8000564 <lcd_print>
 8003e74:	e03d      	b.n	8003ef2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <menu+0x29c8>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d139      	bne.n	8003ef2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <menu+0x29a4>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d12c      	bne.n	8003ee0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <menu+0x29ec>)
 8003e88:	2101      	movs	r1, #1
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	f7fc fb6a 	bl	8000564 <lcd_print>
 8003e90:	e02f      	b.n	8003ef2 <menu+0x2a02>
 8003e92:	bf00      	nop
 8003e94:	20000c31 	.word	0x20000c31
 8003e98:	0800d4d4 	.word	0x0800d4d4
 8003e9c:	20000c25 	.word	0x20000c25
 8003ea0:	20000bb0 	.word	0x20000bb0
 8003ea4:	40010800 	.word	0x40010800
 8003ea8:	20000c3f 	.word	0x20000c3f
 8003eac:	20000b40 	.word	0x20000b40
 8003eb0:	20000c3c 	.word	0x20000c3c
 8003eb4:	20000c10 	.word	0x20000c10
 8003eb8:	20000c1f 	.word	0x20000c1f
 8003ebc:	0800d50c 	.word	0x0800d50c
 8003ec0:	0800d520 	.word	0x0800d520
 8003ec4:	0800d534 	.word	0x0800d534
 8003ec8:	0800d548 	.word	0x0800d548
 8003ecc:	0800d160 	.word	0x0800d160
 8003ed0:	20000c26 	.word	0x20000c26
 8003ed4:	0800d55c 	.word	0x0800d55c
 8003ed8:	0800d570 	.word	0x0800d570
 8003edc:	0800d584 	.word	0x0800d584
			} else if(dilSecim == 1) {
 8003ee0:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <menu+0x2bc0>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d104      	bne.n	8003ef2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003ee8:	4a72      	ldr	r2, [pc, #456]	; (80040b4 <menu+0x2bc4>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7fc fb39 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003ef2:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <menu+0x2bc0>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003efa:	4a6f      	ldr	r2, [pc, #444]	; (80040b8 <menu+0x2bc8>)
 8003efc:	2101      	movs	r1, #1
 8003efe:	2002      	movs	r0, #2
 8003f00:	f7fc fb30 	bl	8000564 <lcd_print>
 8003f04:	e008      	b.n	8003f18 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003f06:	4b6a      	ldr	r3, [pc, #424]	; (80040b0 <menu+0x2bc0>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d104      	bne.n	8003f18 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003f0e:	4a6b      	ldr	r2, [pc, #428]	; (80040bc <menu+0x2bcc>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7fc fb26 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003f18:	4b69      	ldr	r3, [pc, #420]	; (80040c0 <menu+0x2bd0>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	4969      	ldr	r1, [pc, #420]	; (80040c4 <menu+0x2bd4>)
 8003f20:	4618      	mov	r0, r3
 8003f22:	f008 fcb7 	bl	800c894 <itoa>
		lcd_print(2,16,snum);
 8003f26:	4a67      	ldr	r2, [pc, #412]	; (80040c4 <menu+0x2bd4>)
 8003f28:	2110      	movs	r1, #16
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	f7fc fb1a 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f30:	2102      	movs	r1, #2
 8003f32:	4865      	ldr	r0, [pc, #404]	; (80040c8 <menu+0x2bd8>)
 8003f34:	f005 fcb8 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d115      	bne.n	8003f6a <menu+0x2a7a>
 8003f3e:	4b63      	ldr	r3, [pc, #396]	; (80040cc <menu+0x2bdc>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f083 0301 	eor.w	r3, r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00e      	beq.n	8003f6a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003f4c:	4b5c      	ldr	r3, [pc, #368]	; (80040c0 <menu+0x2bd0>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	4b5a      	ldr	r3, [pc, #360]	; (80040c0 <menu+0x2bd0>)
 8003f56:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003f58:	4b59      	ldr	r3, [pc, #356]	; (80040c0 <menu+0x2bd0>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d902      	bls.n	8003f66 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003f60:	4b57      	ldr	r3, [pc, #348]	; (80040c0 <menu+0x2bd0>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f66:	f002 f827 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	4856      	ldr	r0, [pc, #344]	; (80040c8 <menu+0x2bd8>)
 8003f6e:	f005 fc9b 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d115      	bne.n	8003fa4 <menu+0x2ab4>
 8003f78:	4b54      	ldr	r3, [pc, #336]	; (80040cc <menu+0x2bdc>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f083 0301 	eor.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00e      	beq.n	8003fa4 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003f86:	4b4e      	ldr	r3, [pc, #312]	; (80040c0 <menu+0x2bd0>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <menu+0x2bd0>)
 8003f90:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003f92:	4b4b      	ldr	r3, [pc, #300]	; (80040c0 <menu+0x2bd0>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003f9a:	4b49      	ldr	r3, [pc, #292]	; (80040c0 <menu+0x2bd0>)
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fa0:	f002 f80a 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa4:	2108      	movs	r1, #8
 8003fa6:	4848      	ldr	r0, [pc, #288]	; (80040c8 <menu+0x2bd8>)
 8003fa8:	f005 fc7e 	bl	80098a8 <HAL_GPIO_ReadPin>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d10d      	bne.n	8003fce <menu+0x2ade>
 8003fb2:	4b46      	ldr	r3, [pc, #280]	; (80040cc <menu+0x2bdc>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	f083 0301 	eor.w	r3, r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003fc0:	4b3f      	ldr	r3, [pc, #252]	; (80040c0 <menu+0x2bd0>)
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <menu+0x2be0>)
 8003fc6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003fc8:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <menu+0x2be4>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003fce:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <menu+0x2be8>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b1a      	cmp	r3, #26
 8003fd4:	f040 80ec 	bne.w	80041b0 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003fd8:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <menu+0x2bc0>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003fe0:	4a3e      	ldr	r2, [pc, #248]	; (80040dc <menu+0x2bec>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f7fc fabd 	bl	8000564 <lcd_print>
 8003fea:	e008      	b.n	8003ffe <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003fec:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <menu+0x2bc0>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d104      	bne.n	8003ffe <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003ff4:	4a3a      	ldr	r2, [pc, #232]	; (80040e0 <menu+0x2bf0>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7fc fab3 	bl	8000564 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003ffe:	4b39      	ldr	r3, [pc, #228]	; (80040e4 <menu+0x2bf4>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b63      	cmp	r3, #99	; 0x63
 8004004:	d91e      	bls.n	8004044 <menu+0x2b54>
			if(dilSecim == 0) {
 8004006:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <menu+0x2bc0>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 800400e:	4a2a      	ldr	r2, [pc, #168]	; (80040b8 <menu+0x2bc8>)
 8004010:	2101      	movs	r1, #1
 8004012:	2002      	movs	r0, #2
 8004014:	f7fc faa6 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <menu+0x2bc0>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d104      	bne.n	800402a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8004020:	4a26      	ldr	r2, [pc, #152]	; (80040bc <menu+0x2bcc>)
 8004022:	2101      	movs	r1, #1
 8004024:	2002      	movs	r0, #2
 8004026:	f7fc fa9d 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800402a:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <menu+0x2bf4>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	220a      	movs	r2, #10
 8004030:	4924      	ldr	r1, [pc, #144]	; (80040c4 <menu+0x2bd4>)
 8004032:	4618      	mov	r0, r3
 8004034:	f008 fc2e 	bl	800c894 <itoa>
			lcd_print(2,14,snum);
 8004038:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <menu+0x2bd4>)
 800403a:	210e      	movs	r1, #14
 800403c:	2002      	movs	r0, #2
 800403e:	f7fc fa91 	bl	8000564 <lcd_print>
 8004042:	e066      	b.n	8004112 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004044:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <menu+0x2bf4>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b09      	cmp	r3, #9
 800404a:	d923      	bls.n	8004094 <menu+0x2ba4>
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <menu+0x2bf4>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b63      	cmp	r3, #99	; 0x63
 8004052:	d81f      	bhi.n	8004094 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004054:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <menu+0x2bc0>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800405c:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <menu+0x2bc8>)
 800405e:	2101      	movs	r1, #1
 8004060:	2002      	movs	r0, #2
 8004062:	f7fc fa7f 	bl	8000564 <lcd_print>
 8004066:	e008      	b.n	800407a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <menu+0x2bc0>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d104      	bne.n	800407a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004070:	4a12      	ldr	r2, [pc, #72]	; (80040bc <menu+0x2bcc>)
 8004072:	2101      	movs	r1, #1
 8004074:	2002      	movs	r0, #2
 8004076:	f7fc fa75 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800407a:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <menu+0x2bf4>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	220a      	movs	r2, #10
 8004080:	4910      	ldr	r1, [pc, #64]	; (80040c4 <menu+0x2bd4>)
 8004082:	4618      	mov	r0, r3
 8004084:	f008 fc06 	bl	800c894 <itoa>
			lcd_print(2, 15, snum);
 8004088:	4a0e      	ldr	r2, [pc, #56]	; (80040c4 <menu+0x2bd4>)
 800408a:	210f      	movs	r1, #15
 800408c:	2002      	movs	r0, #2
 800408e:	f7fc fa69 	bl	8000564 <lcd_print>
 8004092:	e03e      	b.n	8004112 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <menu+0x2bf4>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b09      	cmp	r3, #9
 800409a:	d83a      	bhi.n	8004112 <menu+0x2c22>
			if(dilSecim == 0) {
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <menu+0x2bc0>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d121      	bne.n	80040e8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <menu+0x2bc8>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	2002      	movs	r0, #2
 80040aa:	f7fc fa5b 	bl	8000564 <lcd_print>
 80040ae:	e024      	b.n	80040fa <menu+0x2c0a>
 80040b0:	20000c31 	.word	0x20000c31
 80040b4:	0800d598 	.word	0x0800d598
 80040b8:	0800d160 	.word	0x0800d160
 80040bc:	0800d4d4 	.word	0x0800d4d4
 80040c0:	20000c27 	.word	0x20000c27
 80040c4:	20000bb0 	.word	0x20000bb0
 80040c8:	40010800 	.word	0x40010800
 80040cc:	20000c3f 	.word	0x20000c3f
 80040d0:	20000b40 	.word	0x20000b40
 80040d4:	20000c3c 	.word	0x20000c3c
 80040d8:	20000c10 	.word	0x20000c10
 80040dc:	0800d5ac 	.word	0x0800d5ac
 80040e0:	0800d5c0 	.word	0x0800d5c0
 80040e4:	20000c28 	.word	0x20000c28
			} else if(dilSecim == 1) {
 80040e8:	4b8f      	ldr	r3, [pc, #572]	; (8004328 <menu+0x2e38>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d104      	bne.n	80040fa <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80040f0:	4a8e      	ldr	r2, [pc, #568]	; (800432c <menu+0x2e3c>)
 80040f2:	2101      	movs	r1, #1
 80040f4:	2002      	movs	r0, #2
 80040f6:	f7fc fa35 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040fa:	4b8d      	ldr	r3, [pc, #564]	; (8004330 <menu+0x2e40>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	220a      	movs	r2, #10
 8004100:	498c      	ldr	r1, [pc, #560]	; (8004334 <menu+0x2e44>)
 8004102:	4618      	mov	r0, r3
 8004104:	f008 fbc6 	bl	800c894 <itoa>
			lcd_print(2, 16, snum);
 8004108:	4a8a      	ldr	r2, [pc, #552]	; (8004334 <menu+0x2e44>)
 800410a:	2110      	movs	r1, #16
 800410c:	2002      	movs	r0, #2
 800410e:	f7fc fa29 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004112:	2102      	movs	r1, #2
 8004114:	4888      	ldr	r0, [pc, #544]	; (8004338 <menu+0x2e48>)
 8004116:	f005 fbc7 	bl	80098a8 <HAL_GPIO_ReadPin>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d115      	bne.n	800414c <menu+0x2c5c>
 8004120:	4b86      	ldr	r3, [pc, #536]	; (800433c <menu+0x2e4c>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	f083 0301 	eor.w	r3, r3, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00e      	beq.n	800414c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 800412e:	4b80      	ldr	r3, [pc, #512]	; (8004330 <menu+0x2e40>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	3301      	adds	r3, #1
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4b7e      	ldr	r3, [pc, #504]	; (8004330 <menu+0x2e40>)
 8004138:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800413a:	4b7d      	ldr	r3, [pc, #500]	; (8004330 <menu+0x2e40>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2bb4      	cmp	r3, #180	; 0xb4
 8004140:	d902      	bls.n	8004148 <menu+0x2c58>
				makineCalismaTmr = 0;
 8004142:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <menu+0x2e40>)
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004148:	f001 ff36 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800414c:	2104      	movs	r1, #4
 800414e:	487a      	ldr	r0, [pc, #488]	; (8004338 <menu+0x2e48>)
 8004150:	f005 fbaa 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004154:	4603      	mov	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d115      	bne.n	8004186 <menu+0x2c96>
 800415a:	4b78      	ldr	r3, [pc, #480]	; (800433c <menu+0x2e4c>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	f083 0301 	eor.w	r3, r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004168:	4b71      	ldr	r3, [pc, #452]	; (8004330 <menu+0x2e40>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	3b01      	subs	r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <menu+0x2e40>)
 8004172:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004174:	4b6e      	ldr	r3, [pc, #440]	; (8004330 <menu+0x2e40>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2bb5      	cmp	r3, #181	; 0xb5
 800417a:	d902      	bls.n	8004182 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800417c:	4b6c      	ldr	r3, [pc, #432]	; (8004330 <menu+0x2e40>)
 800417e:	22b4      	movs	r2, #180	; 0xb4
 8004180:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004182:	f001 ff19 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004186:	2108      	movs	r1, #8
 8004188:	486b      	ldr	r0, [pc, #428]	; (8004338 <menu+0x2e48>)
 800418a:	f005 fb8d 	bl	80098a8 <HAL_GPIO_ReadPin>
 800418e:	4603      	mov	r3, r0
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10d      	bne.n	80041b0 <menu+0x2cc0>
 8004194:	4b69      	ldr	r3, [pc, #420]	; (800433c <menu+0x2e4c>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	f083 0301 	eor.w	r3, r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80041a2:	4b63      	ldr	r3, [pc, #396]	; (8004330 <menu+0x2e40>)
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	4b66      	ldr	r3, [pc, #408]	; (8004340 <menu+0x2e50>)
 80041a8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80041aa:	4b66      	ldr	r3, [pc, #408]	; (8004344 <menu+0x2e54>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80041b0:	4b65      	ldr	r3, [pc, #404]	; (8004348 <menu+0x2e58>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b1b      	cmp	r3, #27
 80041b6:	f040 8083 	bne.w	80042c0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 80041ba:	4a64      	ldr	r2, [pc, #400]	; (800434c <menu+0x2e5c>)
 80041bc:	2101      	movs	r1, #1
 80041be:	2001      	movs	r0, #1
 80041c0:	f7fc f9d0 	bl	8000564 <lcd_print>

		if(buzzer == 0) {
 80041c4:	4b62      	ldr	r3, [pc, #392]	; (8004350 <menu+0x2e60>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d113      	bne.n	80041f4 <menu+0x2d04>
			if(dilSecim == 0) {
 80041cc:	4b56      	ldr	r3, [pc, #344]	; (8004328 <menu+0x2e38>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80041d4:	4a5f      	ldr	r2, [pc, #380]	; (8004354 <menu+0x2e64>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	2002      	movs	r0, #2
 80041da:	f7fc f9c3 	bl	8000564 <lcd_print>
 80041de:	e020      	b.n	8004222 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80041e0:	4b51      	ldr	r3, [pc, #324]	; (8004328 <menu+0x2e38>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d11c      	bne.n	8004222 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80041e8:	4a5b      	ldr	r2, [pc, #364]	; (8004358 <menu+0x2e68>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	2002      	movs	r0, #2
 80041ee:	f7fc f9b9 	bl	8000564 <lcd_print>
 80041f2:	e016      	b.n	8004222 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80041f4:	4b56      	ldr	r3, [pc, #344]	; (8004350 <menu+0x2e60>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d112      	bne.n	8004222 <menu+0x2d32>
			if(dilSecim == 0) {
 80041fc:	4b4a      	ldr	r3, [pc, #296]	; (8004328 <menu+0x2e38>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004204:	4a55      	ldr	r2, [pc, #340]	; (800435c <menu+0x2e6c>)
 8004206:	2101      	movs	r1, #1
 8004208:	2002      	movs	r0, #2
 800420a:	f7fc f9ab 	bl	8000564 <lcd_print>
 800420e:	e008      	b.n	8004222 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004210:	4b45      	ldr	r3, [pc, #276]	; (8004328 <menu+0x2e38>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d104      	bne.n	8004222 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004218:	4a51      	ldr	r2, [pc, #324]	; (8004360 <menu+0x2e70>)
 800421a:	2101      	movs	r1, #1
 800421c:	2002      	movs	r0, #2
 800421e:	f7fc f9a1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004222:	2102      	movs	r1, #2
 8004224:	4844      	ldr	r0, [pc, #272]	; (8004338 <menu+0x2e48>)
 8004226:	f005 fb3f 	bl	80098a8 <HAL_GPIO_ReadPin>
 800422a:	4603      	mov	r3, r0
 800422c:	2b01      	cmp	r3, #1
 800422e:	d115      	bne.n	800425c <menu+0x2d6c>
 8004230:	4b42      	ldr	r3, [pc, #264]	; (800433c <menu+0x2e4c>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00e      	beq.n	800425c <menu+0x2d6c>
			buzzer = buzzer + 1;
 800423e:	4b44      	ldr	r3, [pc, #272]	; (8004350 <menu+0x2e60>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b42      	ldr	r3, [pc, #264]	; (8004350 <menu+0x2e60>)
 8004248:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800424a:	4b41      	ldr	r3, [pc, #260]	; (8004350 <menu+0x2e60>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d902      	bls.n	8004258 <menu+0x2d68>
				buzzer = 0;
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <menu+0x2e60>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004258:	f001 feae 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800425c:	2104      	movs	r1, #4
 800425e:	4836      	ldr	r0, [pc, #216]	; (8004338 <menu+0x2e48>)
 8004260:	f005 fb22 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004264:	4603      	mov	r3, r0
 8004266:	2b01      	cmp	r3, #1
 8004268:	d115      	bne.n	8004296 <menu+0x2da6>
 800426a:	4b34      	ldr	r3, [pc, #208]	; (800433c <menu+0x2e4c>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	f083 0301 	eor.w	r3, r3, #1
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00e      	beq.n	8004296 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <menu+0x2e60>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	b2da      	uxtb	r2, r3
 8004280:	4b33      	ldr	r3, [pc, #204]	; (8004350 <menu+0x2e60>)
 8004282:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004284:	4b32      	ldr	r3, [pc, #200]	; (8004350 <menu+0x2e60>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <menu+0x2da2>
		   		buzzer = 1;
 800428c:	4b30      	ldr	r3, [pc, #192]	; (8004350 <menu+0x2e60>)
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004292:	f001 fe91 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004296:	2108      	movs	r1, #8
 8004298:	4827      	ldr	r0, [pc, #156]	; (8004338 <menu+0x2e48>)
 800429a:	f005 fb05 	bl	80098a8 <HAL_GPIO_ReadPin>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d10d      	bne.n	80042c0 <menu+0x2dd0>
 80042a4:	4b25      	ldr	r3, [pc, #148]	; (800433c <menu+0x2e4c>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f083 0301 	eor.w	r3, r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 80042b2:	4b27      	ldr	r3, [pc, #156]	; (8004350 <menu+0x2e60>)
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	4b22      	ldr	r3, [pc, #136]	; (8004340 <menu+0x2e50>)
 80042b8:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80042ba:	4b22      	ldr	r3, [pc, #136]	; (8004344 <menu+0x2e54>)
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80042c0:	4b21      	ldr	r3, [pc, #132]	; (8004348 <menu+0x2e58>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b1c      	cmp	r3, #28
 80042c6:	f040 80ab 	bne.w	8004420 <menu+0x2f30>
		calismaSayModu = 0;
 80042ca:	4b26      	ldr	r3, [pc, #152]	; (8004364 <menu+0x2e74>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80042d0:	4a25      	ldr	r2, [pc, #148]	; (8004368 <menu+0x2e78>)
 80042d2:	2101      	movs	r1, #1
 80042d4:	2001      	movs	r0, #1
 80042d6:	f7fc f945 	bl	8000564 <lcd_print>

		if(demoMode == 0) {
 80042da:	4b24      	ldr	r3, [pc, #144]	; (800436c <menu+0x2e7c>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <menu+0x2e1a>
			if(dilSecim == 0) {
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <menu+0x2e38>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80042ea:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <menu+0x2e64>)
 80042ec:	2101      	movs	r1, #1
 80042ee:	2002      	movs	r0, #2
 80042f0:	f7fc f938 	bl	8000564 <lcd_print>
 80042f4:	e045      	b.n	8004382 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <menu+0x2e38>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d141      	bne.n	8004382 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <menu+0x2e68>)
 8004300:	2101      	movs	r1, #1
 8004302:	2002      	movs	r0, #2
 8004304:	f7fc f92e 	bl	8000564 <lcd_print>
 8004308:	e03b      	b.n	8004382 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <menu+0x2e7c>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d137      	bne.n	8004382 <menu+0x2e92>
			if(dilSecim == 0){
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <menu+0x2e38>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d12a      	bne.n	8004370 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800431a:	4a10      	ldr	r2, [pc, #64]	; (800435c <menu+0x2e6c>)
 800431c:	2101      	movs	r1, #1
 800431e:	2002      	movs	r0, #2
 8004320:	f7fc f920 	bl	8000564 <lcd_print>
 8004324:	e02d      	b.n	8004382 <menu+0x2e92>
 8004326:	bf00      	nop
 8004328:	20000c31 	.word	0x20000c31
 800432c:	0800d4d4 	.word	0x0800d4d4
 8004330:	20000c28 	.word	0x20000c28
 8004334:	20000bb0 	.word	0x20000bb0
 8004338:	40010800 	.word	0x40010800
 800433c:	20000c3f 	.word	0x20000c3f
 8004340:	20000b40 	.word	0x20000b40
 8004344:	20000c3c 	.word	0x20000c3c
 8004348:	20000c10 	.word	0x20000c10
 800434c:	0800d5d4 	.word	0x0800d5d4
 8004350:	20000c2c 	.word	0x20000c2c
 8004354:	0800cefc 	.word	0x0800cefc
 8004358:	0800cf10 	.word	0x0800cf10
 800435c:	0800cf5c 	.word	0x0800cf5c
 8004360:	0800cf70 	.word	0x0800cf70
 8004364:	20000c30 	.word	0x20000c30
 8004368:	0800d5e8 	.word	0x0800d5e8
 800436c:	20000c2e 	.word	0x20000c2e
			} else if(dilSecim == 1) {
 8004370:	4b71      	ldr	r3, [pc, #452]	; (8004538 <menu+0x3048>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d104      	bne.n	8004382 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004378:	4a70      	ldr	r2, [pc, #448]	; (800453c <menu+0x304c>)
 800437a:	2101      	movs	r1, #1
 800437c:	2002      	movs	r0, #2
 800437e:	f7fc f8f1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004382:	2102      	movs	r1, #2
 8004384:	486e      	ldr	r0, [pc, #440]	; (8004540 <menu+0x3050>)
 8004386:	f005 fa8f 	bl	80098a8 <HAL_GPIO_ReadPin>
 800438a:	4603      	mov	r3, r0
 800438c:	2b01      	cmp	r3, #1
 800438e:	d115      	bne.n	80043bc <menu+0x2ecc>
 8004390:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <menu+0x3054>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00e      	beq.n	80043bc <menu+0x2ecc>
			demoMode = demoMode + 1;
 800439e:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <menu+0x3058>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	4b68      	ldr	r3, [pc, #416]	; (8004548 <menu+0x3058>)
 80043a8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80043aa:	4b67      	ldr	r3, [pc, #412]	; (8004548 <menu+0x3058>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d902      	bls.n	80043b8 <menu+0x2ec8>
				demoMode = 0;
 80043b2:	4b65      	ldr	r3, [pc, #404]	; (8004548 <menu+0x3058>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043b8:	f001 fdfe 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043bc:	2104      	movs	r1, #4
 80043be:	4860      	ldr	r0, [pc, #384]	; (8004540 <menu+0x3050>)
 80043c0:	f005 fa72 	bl	80098a8 <HAL_GPIO_ReadPin>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d115      	bne.n	80043f6 <menu+0x2f06>
 80043ca:	4b5e      	ldr	r3, [pc, #376]	; (8004544 <menu+0x3054>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	f083 0301 	eor.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <menu+0x2f06>
			demoMode = demoMode - 1;
 80043d8:	4b5b      	ldr	r3, [pc, #364]	; (8004548 <menu+0x3058>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	4b59      	ldr	r3, [pc, #356]	; (8004548 <menu+0x3058>)
 80043e2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80043e4:	4b58      	ldr	r3, [pc, #352]	; (8004548 <menu+0x3058>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <menu+0x2f02>
		   		demoMode = 1;
 80043ec:	4b56      	ldr	r3, [pc, #344]	; (8004548 <menu+0x3058>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043f2:	f001 fde1 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043f6:	2108      	movs	r1, #8
 80043f8:	4851      	ldr	r0, [pc, #324]	; (8004540 <menu+0x3050>)
 80043fa:	f005 fa55 	bl	80098a8 <HAL_GPIO_ReadPin>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10d      	bne.n	8004420 <menu+0x2f30>
 8004404:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <menu+0x3054>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	f083 0301 	eor.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d006      	beq.n	8004420 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004412:	4b4d      	ldr	r3, [pc, #308]	; (8004548 <menu+0x3058>)
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	4b4d      	ldr	r3, [pc, #308]	; (800454c <menu+0x305c>)
 8004418:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800441a:	4b4d      	ldr	r3, [pc, #308]	; (8004550 <menu+0x3060>)
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004420:	4b4c      	ldr	r3, [pc, #304]	; (8004554 <menu+0x3064>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b1d      	cmp	r3, #29
 8004426:	f040 8132 	bne.w	800468e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800442a:	4b4b      	ldr	r3, [pc, #300]	; (8004558 <menu+0x3068>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d113      	bne.n	800445a <menu+0x2f6a>
 8004432:	4b4a      	ldr	r3, [pc, #296]	; (800455c <menu+0x306c>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <menu+0x2f6a>
 800443a:	4b49      	ldr	r3, [pc, #292]	; (8004560 <menu+0x3070>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <menu+0x2f6a>
 8004442:	4b48      	ldr	r3, [pc, #288]	; (8004564 <menu+0x3074>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <menu+0x2f6a>
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <menu+0x3078>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004452:	4b46      	ldr	r3, [pc, #280]	; (800456c <menu+0x307c>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	e002      	b.n	8004460 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800445a:	4b44      	ldr	r3, [pc, #272]	; (800456c <menu+0x307c>)
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004460:	4b43      	ldr	r3, [pc, #268]	; (8004570 <menu+0x3080>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d154      	bne.n	8004512 <menu+0x3022>
			if(dilSecim == 0) {
 8004468:	4b33      	ldr	r3, [pc, #204]	; (8004538 <menu+0x3048>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004470:	4a40      	ldr	r2, [pc, #256]	; (8004574 <menu+0x3084>)
 8004472:	2101      	movs	r1, #1
 8004474:	2001      	movs	r0, #1
 8004476:	f7fc f875 	bl	8000564 <lcd_print>
 800447a:	e008      	b.n	800448e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800447c:	4b2e      	ldr	r3, [pc, #184]	; (8004538 <menu+0x3048>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d104      	bne.n	800448e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004484:	4a3c      	ldr	r2, [pc, #240]	; (8004578 <menu+0x3088>)
 8004486:	2101      	movs	r1, #1
 8004488:	2001      	movs	r0, #1
 800448a:	f7fc f86b 	bl	8000564 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <menu+0x3078>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	220a      	movs	r2, #10
 8004494:	4939      	ldr	r1, [pc, #228]	; (800457c <menu+0x308c>)
 8004496:	4618      	mov	r0, r3
 8004498:	f008 f9fc 	bl	800c894 <itoa>
			lcd_print(2, 12, snum);
 800449c:	4a37      	ldr	r2, [pc, #220]	; (800457c <menu+0x308c>)
 800449e:	210c      	movs	r1, #12
 80044a0:	2002      	movs	r0, #2
 80044a2:	f7fc f85f 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <menu+0x3074>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	220a      	movs	r2, #10
 80044ac:	4933      	ldr	r1, [pc, #204]	; (800457c <menu+0x308c>)
 80044ae:	4618      	mov	r0, r3
 80044b0:	f008 f9f0 	bl	800c894 <itoa>
			lcd_print(2, 13, snum);
 80044b4:	4a31      	ldr	r2, [pc, #196]	; (800457c <menu+0x308c>)
 80044b6:	210d      	movs	r1, #13
 80044b8:	2002      	movs	r0, #2
 80044ba:	f7fc f853 	bl	8000564 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80044be:	4b28      	ldr	r3, [pc, #160]	; (8004560 <menu+0x3070>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	220a      	movs	r2, #10
 80044c4:	492d      	ldr	r1, [pc, #180]	; (800457c <menu+0x308c>)
 80044c6:	4618      	mov	r0, r3
 80044c8:	f008 f9e4 	bl	800c894 <itoa>
			lcd_print(2, 14, snum);
 80044cc:	4a2b      	ldr	r2, [pc, #172]	; (800457c <menu+0x308c>)
 80044ce:	210e      	movs	r1, #14
 80044d0:	2002      	movs	r0, #2
 80044d2:	f7fc f847 	bl	8000564 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80044d6:	4b21      	ldr	r3, [pc, #132]	; (800455c <menu+0x306c>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	220a      	movs	r2, #10
 80044dc:	4927      	ldr	r1, [pc, #156]	; (800457c <menu+0x308c>)
 80044de:	4618      	mov	r0, r3
 80044e0:	f008 f9d8 	bl	800c894 <itoa>
			lcd_print(2, 15, snum);
 80044e4:	4a25      	ldr	r2, [pc, #148]	; (800457c <menu+0x308c>)
 80044e6:	210f      	movs	r1, #15
 80044e8:	2002      	movs	r0, #2
 80044ea:	f7fc f83b 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80044ee:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <menu+0x3068>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	220a      	movs	r2, #10
 80044f4:	4921      	ldr	r1, [pc, #132]	; (800457c <menu+0x308c>)
 80044f6:	4618      	mov	r0, r3
 80044f8:	f008 f9cc 	bl	800c894 <itoa>
			lcd_print(2, 16, snum);
 80044fc:	4a1f      	ldr	r2, [pc, #124]	; (800457c <menu+0x308c>)
 80044fe:	2110      	movs	r1, #16
 8004500:	2002      	movs	r0, #2
 8004502:	f7fc f82f 	bl	8000564 <lcd_print>

			lcd_print(2, 1, "           ");
 8004506:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <menu+0x3090>)
 8004508:	2101      	movs	r1, #1
 800450a:	2002      	movs	r0, #2
 800450c:	f7fc f82a 	bl	8000564 <lcd_print>
 8004510:	e048      	b.n	80045a4 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <menu+0x3080>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d144      	bne.n	80045a4 <menu+0x30b4>
			if(dilSecim == 0) {
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <menu+0x3048>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d132      	bne.n	8004588 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004522:	4a14      	ldr	r2, [pc, #80]	; (8004574 <menu+0x3084>)
 8004524:	2101      	movs	r1, #1
 8004526:	2001      	movs	r0, #1
 8004528:	f7fc f81c 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <menu+0x3094>)
 800452e:	2101      	movs	r1, #1
 8004530:	2002      	movs	r0, #2
 8004532:	f7fc f817 	bl	8000564 <lcd_print>
 8004536:	e035      	b.n	80045a4 <menu+0x30b4>
 8004538:	20000c31 	.word	0x20000c31
 800453c:	0800cf70 	.word	0x0800cf70
 8004540:	40010800 	.word	0x40010800
 8004544:	20000c3f 	.word	0x20000c3f
 8004548:	20000c2e 	.word	0x20000c2e
 800454c:	20000b40 	.word	0x20000b40
 8004550:	20000c3c 	.word	0x20000c3c
 8004554:	20000c10 	.word	0x20000c10
 8004558:	20000c0d 	.word	0x20000c0d
 800455c:	20000c0e 	.word	0x20000c0e
 8004560:	200009b4 	.word	0x200009b4
 8004564:	200009b5 	.word	0x200009b5
 8004568:	20000c0f 	.word	0x20000c0f
 800456c:	20000c51 	.word	0x20000c51
 8004570:	20000c30 	.word	0x20000c30
 8004574:	0800d5f8 	.word	0x0800d5f8
 8004578:	0800d60c 	.word	0x0800d60c
 800457c:	20000bb0 	.word	0x20000bb0
 8004580:	0800d620 	.word	0x0800d620
 8004584:	0800d62c 	.word	0x0800d62c
			} else if(dilSecim == 1) {
 8004588:	4b94      	ldr	r3, [pc, #592]	; (80047dc <menu+0x32ec>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d109      	bne.n	80045a4 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004590:	4a93      	ldr	r2, [pc, #588]	; (80047e0 <menu+0x32f0>)
 8004592:	2101      	movs	r1, #1
 8004594:	2001      	movs	r0, #1
 8004596:	f7fb ffe5 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800459a:	4a92      	ldr	r2, [pc, #584]	; (80047e4 <menu+0x32f4>)
 800459c:	2101      	movs	r1, #1
 800459e:	2002      	movs	r0, #2
 80045a0:	f7fb ffe0 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80045a4:	2102      	movs	r1, #2
 80045a6:	4890      	ldr	r0, [pc, #576]	; (80047e8 <menu+0x32f8>)
 80045a8:	f005 f97e 	bl	80098a8 <HAL_GPIO_ReadPin>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d119      	bne.n	80045e6 <menu+0x30f6>
 80045b2:	4b8e      	ldr	r3, [pc, #568]	; (80047ec <menu+0x32fc>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	f083 0301 	eor.w	r3, r3, #1
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d012      	beq.n	80045e6 <menu+0x30f6>
 80045c0:	4b8b      	ldr	r3, [pc, #556]	; (80047f0 <menu+0x3300>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80045c8:	4b8a      	ldr	r3, [pc, #552]	; (80047f4 <menu+0x3304>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <menu+0x3304>)
 80045d2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80045d4:	4b87      	ldr	r3, [pc, #540]	; (80047f4 <menu+0x3304>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d902      	bls.n	80045e2 <menu+0x30f2>
				calismaSayModu = 0;
 80045dc:	4b85      	ldr	r3, [pc, #532]	; (80047f4 <menu+0x3304>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045e2:	f001 fce9 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80045e6:	2104      	movs	r1, #4
 80045e8:	487f      	ldr	r0, [pc, #508]	; (80047e8 <menu+0x32f8>)
 80045ea:	f005 f95d 	bl	80098a8 <HAL_GPIO_ReadPin>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d119      	bne.n	8004628 <menu+0x3138>
 80045f4:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <menu+0x32fc>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f083 0301 	eor.w	r3, r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d012      	beq.n	8004628 <menu+0x3138>
 8004602:	4b7b      	ldr	r3, [pc, #492]	; (80047f0 <menu+0x3300>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00e      	beq.n	8004628 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800460a:	4b7a      	ldr	r3, [pc, #488]	; (80047f4 <menu+0x3304>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	3b01      	subs	r3, #1
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <menu+0x3304>)
 8004614:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004616:	4b77      	ldr	r3, [pc, #476]	; (80047f4 <menu+0x3304>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <menu+0x3134>
		   		calismaSayModu = 1;
 800461e:	4b75      	ldr	r3, [pc, #468]	; (80047f4 <menu+0x3304>)
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004624:	f001 fcc8 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004628:	2108      	movs	r1, #8
 800462a:	486f      	ldr	r0, [pc, #444]	; (80047e8 <menu+0x32f8>)
 800462c:	f005 f93c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004630:	4603      	mov	r3, r0
 8004632:	2b01      	cmp	r3, #1
 8004634:	d12b      	bne.n	800468e <menu+0x319e>
 8004636:	4b6d      	ldr	r3, [pc, #436]	; (80047ec <menu+0x32fc>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	f083 0301 	eor.w	r3, r3, #1
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d024      	beq.n	800468e <menu+0x319e>
			eepromData[32] = 0;
 8004644:	4b6c      	ldr	r3, [pc, #432]	; (80047f8 <menu+0x3308>)
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800464c:	4b6a      	ldr	r3, [pc, #424]	; (80047f8 <menu+0x3308>)
 800464e:	2200      	movs	r2, #0
 8004650:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004652:	4b69      	ldr	r3, [pc, #420]	; (80047f8 <menu+0x3308>)
 8004654:	2200      	movs	r2, #0
 8004656:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004658:	4b67      	ldr	r3, [pc, #412]	; (80047f8 <menu+0x3308>)
 800465a:	2200      	movs	r2, #0
 800465c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800465e:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <menu+0x3308>)
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004664:	4b65      	ldr	r3, [pc, #404]	; (80047fc <menu+0x330c>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <menu+0x3310>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004670:	4b64      	ldr	r3, [pc, #400]	; (8004804 <menu+0x3314>)
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004676:	4b64      	ldr	r3, [pc, #400]	; (8004808 <menu+0x3318>)
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800467c:	4b63      	ldr	r3, [pc, #396]	; (800480c <menu+0x331c>)
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004682:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <menu+0x3304>)
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004688:	4b61      	ldr	r3, [pc, #388]	; (8004810 <menu+0x3320>)
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800468e:	4b61      	ldr	r3, [pc, #388]	; (8004814 <menu+0x3324>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b1e      	cmp	r3, #30
 8004694:	d16f      	bne.n	8004776 <menu+0x3286>
		calismaSayModu = 0;
 8004696:	4b57      	ldr	r3, [pc, #348]	; (80047f4 <menu+0x3304>)
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800469c:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <menu+0x32ec>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80046a4:	4a5c      	ldr	r2, [pc, #368]	; (8004818 <menu+0x3328>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	2001      	movs	r0, #1
 80046aa:	f7fb ff5b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80046ae:	4a5b      	ldr	r2, [pc, #364]	; (800481c <menu+0x332c>)
 80046b0:	2101      	movs	r1, #1
 80046b2:	2002      	movs	r0, #2
 80046b4:	f7fb ff56 	bl	8000564 <lcd_print>
 80046b8:	e00d      	b.n	80046d6 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80046ba:	4b48      	ldr	r3, [pc, #288]	; (80047dc <menu+0x32ec>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d109      	bne.n	80046d6 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80046c2:	4a57      	ldr	r2, [pc, #348]	; (8004820 <menu+0x3330>)
 80046c4:	2101      	movs	r1, #1
 80046c6:	2001      	movs	r0, #1
 80046c8:	f7fb ff4c 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80046cc:	4a55      	ldr	r2, [pc, #340]	; (8004824 <menu+0x3334>)
 80046ce:	2101      	movs	r1, #1
 80046d0:	2002      	movs	r0, #2
 80046d2:	f7fb ff47 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046d6:	2102      	movs	r1, #2
 80046d8:	4843      	ldr	r0, [pc, #268]	; (80047e8 <menu+0x32f8>)
 80046da:	f005 f8e5 	bl	80098a8 <HAL_GPIO_ReadPin>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d115      	bne.n	8004710 <menu+0x3220>
 80046e4:	4b41      	ldr	r3, [pc, #260]	; (80047ec <menu+0x32fc>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	f083 0301 	eor.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80046f2:	4b3a      	ldr	r3, [pc, #232]	; (80047dc <menu+0x32ec>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4b38      	ldr	r3, [pc, #224]	; (80047dc <menu+0x32ec>)
 80046fc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80046fe:	4b37      	ldr	r3, [pc, #220]	; (80047dc <menu+0x32ec>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d902      	bls.n	800470c <menu+0x321c>
				dilSecim = 0;
 8004706:	4b35      	ldr	r3, [pc, #212]	; (80047dc <menu+0x32ec>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800470c:	f001 fc54 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004710:	2104      	movs	r1, #4
 8004712:	4835      	ldr	r0, [pc, #212]	; (80047e8 <menu+0x32f8>)
 8004714:	f005 f8c8 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d115      	bne.n	800474a <menu+0x325a>
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <menu+0x32fc>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f083 0301 	eor.w	r3, r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <menu+0x325a>
			dilSecim = dilSecim - 1;
 800472c:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <menu+0x32ec>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	3b01      	subs	r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b29      	ldr	r3, [pc, #164]	; (80047dc <menu+0x32ec>)
 8004736:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004738:	4b28      	ldr	r3, [pc, #160]	; (80047dc <menu+0x32ec>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <menu+0x3256>
		   		dilSecim = 1;
 8004740:	4b26      	ldr	r3, [pc, #152]	; (80047dc <menu+0x32ec>)
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004746:	f001 fc37 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800474a:	2108      	movs	r1, #8
 800474c:	4826      	ldr	r0, [pc, #152]	; (80047e8 <menu+0x32f8>)
 800474e:	f005 f8ab 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004752:	4603      	mov	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10e      	bne.n	8004776 <menu+0x3286>
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <menu+0x32fc>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f083 0301 	eor.w	r3, r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004766:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <menu+0x32ec>)
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <menu+0x3308>)
 800476c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004770:	4b27      	ldr	r3, [pc, #156]	; (8004810 <menu+0x3320>)
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004776:	4b27      	ldr	r3, [pc, #156]	; (8004814 <menu+0x3324>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b1f      	cmp	r3, #31
 800477c:	f040 80b7 	bne.w	80048ee <menu+0x33fe>
		calismaSayModu = 0;
 8004780:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <menu+0x3304>)
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004786:	4a28      	ldr	r2, [pc, #160]	; (8004828 <menu+0x3338>)
 8004788:	2101      	movs	r1, #1
 800478a:	2001      	movs	r0, #1
 800478c:	f7fb feea 	bl	8000564 <lcd_print>

		if(iotMode == 0) {
 8004790:	4b26      	ldr	r3, [pc, #152]	; (800482c <menu+0x333c>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d113      	bne.n	80047c0 <menu+0x32d0>
			if(dilSecim == 0) {
 8004798:	4b10      	ldr	r3, [pc, #64]	; (80047dc <menu+0x32ec>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d105      	bne.n	80047ac <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80047a0:	4a23      	ldr	r2, [pc, #140]	; (8004830 <menu+0x3340>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	2002      	movs	r0, #2
 80047a6:	f7fb fedd 	bl	8000564 <lcd_print>
 80047aa:	e050      	b.n	800484e <menu+0x335e>
			} else if(dilSecim == 1) {
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <menu+0x32ec>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d14c      	bne.n	800484e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80047b4:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <menu+0x3344>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	2002      	movs	r0, #2
 80047ba:	f7fb fed3 	bl	8000564 <lcd_print>
 80047be:	e046      	b.n	800484e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <menu+0x333c>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d142      	bne.n	800484e <menu+0x335e>
			if(dilSecim == 0){
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <menu+0x32ec>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d135      	bne.n	800483c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <menu+0x3348>)
 80047d2:	2101      	movs	r1, #1
 80047d4:	2002      	movs	r0, #2
 80047d6:	f7fb fec5 	bl	8000564 <lcd_print>
 80047da:	e038      	b.n	800484e <menu+0x335e>
 80047dc:	20000c31 	.word	0x20000c31
 80047e0:	0800d60c 	.word	0x0800d60c
 80047e4:	0800d640 	.word	0x0800d640
 80047e8:	40010800 	.word	0x40010800
 80047ec:	20000c3f 	.word	0x20000c3f
 80047f0:	20000c51 	.word	0x20000c51
 80047f4:	20000c30 	.word	0x20000c30
 80047f8:	20000b40 	.word	0x20000b40
 80047fc:	20000c0f 	.word	0x20000c0f
 8004800:	200009b5 	.word	0x200009b5
 8004804:	200009b4 	.word	0x200009b4
 8004808:	20000c0e 	.word	0x20000c0e
 800480c:	20000c0d 	.word	0x20000c0d
 8004810:	20000c3c 	.word	0x20000c3c
 8004814:	20000c10 	.word	0x20000c10
 8004818:	0800d654 	.word	0x0800d654
 800481c:	0800d668 	.word	0x0800d668
 8004820:	0800d67c 	.word	0x0800d67c
 8004824:	0800d690 	.word	0x0800d690
 8004828:	0800d6a4 	.word	0x0800d6a4
 800482c:	20000c2f 	.word	0x20000c2f
 8004830:	0800cefc 	.word	0x0800cefc
 8004834:	0800cf10 	.word	0x0800cf10
 8004838:	0800cf5c 	.word	0x0800cf5c
			} else if(dilSecim == 1) {
 800483c:	4bac      	ldr	r3, [pc, #688]	; (8004af0 <menu+0x3600>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d104      	bne.n	800484e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004844:	4aab      	ldr	r2, [pc, #684]	; (8004af4 <menu+0x3604>)
 8004846:	2101      	movs	r1, #1
 8004848:	2002      	movs	r0, #2
 800484a:	f7fb fe8b 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800484e:	2102      	movs	r1, #2
 8004850:	48a9      	ldr	r0, [pc, #676]	; (8004af8 <menu+0x3608>)
 8004852:	f005 f829 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004856:	4603      	mov	r3, r0
 8004858:	2b01      	cmp	r3, #1
 800485a:	d115      	bne.n	8004888 <menu+0x3398>
 800485c:	4ba7      	ldr	r3, [pc, #668]	; (8004afc <menu+0x360c>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f083 0301 	eor.w	r3, r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00e      	beq.n	8004888 <menu+0x3398>
			iotMode = iotMode + 1;
 800486a:	4ba5      	ldr	r3, [pc, #660]	; (8004b00 <menu+0x3610>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4ba3      	ldr	r3, [pc, #652]	; (8004b00 <menu+0x3610>)
 8004874:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004876:	4ba2      	ldr	r3, [pc, #648]	; (8004b00 <menu+0x3610>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d902      	bls.n	8004884 <menu+0x3394>
				iotMode = 0;
 800487e:	4ba0      	ldr	r3, [pc, #640]	; (8004b00 <menu+0x3610>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004884:	f001 fb98 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004888:	2104      	movs	r1, #4
 800488a:	489b      	ldr	r0, [pc, #620]	; (8004af8 <menu+0x3608>)
 800488c:	f005 f80c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004890:	4603      	mov	r3, r0
 8004892:	2b01      	cmp	r3, #1
 8004894:	d115      	bne.n	80048c2 <menu+0x33d2>
 8004896:	4b99      	ldr	r3, [pc, #612]	; (8004afc <menu+0x360c>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	f083 0301 	eor.w	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <menu+0x33d2>
			iotMode = iotMode - 1;
 80048a4:	4b96      	ldr	r3, [pc, #600]	; (8004b00 <menu+0x3610>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	4b94      	ldr	r3, [pc, #592]	; (8004b00 <menu+0x3610>)
 80048ae:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80048b0:	4b93      	ldr	r3, [pc, #588]	; (8004b00 <menu+0x3610>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <menu+0x33ce>
		   		iotMode = 1;
 80048b8:	4b91      	ldr	r3, [pc, #580]	; (8004b00 <menu+0x3610>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80048be:	f001 fb7b 	bl	8005fb8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80048c2:	2108      	movs	r1, #8
 80048c4:	488c      	ldr	r0, [pc, #560]	; (8004af8 <menu+0x3608>)
 80048c6:	f004 ffef 	bl	80098a8 <HAL_GPIO_ReadPin>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10e      	bne.n	80048ee <menu+0x33fe>
 80048d0:	4b8a      	ldr	r3, [pc, #552]	; (8004afc <menu+0x360c>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f083 0301 	eor.w	r3, r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <menu+0x33fe>
			eepromData[48] = iotMode;
 80048de:	4b88      	ldr	r3, [pc, #544]	; (8004b00 <menu+0x3610>)
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <menu+0x3614>)
 80048e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80048e8:	4b87      	ldr	r3, [pc, #540]	; (8004b08 <menu+0x3618>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80048ee:	4b87      	ldr	r3, [pc, #540]	; (8004b0c <menu+0x361c>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d138      	bne.n	8004968 <menu+0x3478>
		calismaSayModu = 0;
 80048f6:	4b86      	ldr	r3, [pc, #536]	; (8004b10 <menu+0x3620>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80048fc:	4a85      	ldr	r2, [pc, #532]	; (8004b14 <menu+0x3624>)
 80048fe:	2101      	movs	r1, #1
 8004900:	2001      	movs	r0, #1
 8004902:	f7fb fe2f 	bl	8000564 <lcd_print>

		lcd_print(2, 1, machineID);
 8004906:	4a84      	ldr	r2, [pc, #528]	; (8004b18 <menu+0x3628>)
 8004908:	2101      	movs	r1, #1
 800490a:	2002      	movs	r0, #2
 800490c:	f7fb fe2a 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "    ");
 8004910:	4a82      	ldr	r2, [pc, #520]	; (8004b1c <menu+0x362c>)
 8004912:	210d      	movs	r1, #13
 8004914:	2002      	movs	r0, #2
 8004916:	f7fb fe25 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800491a:	2102      	movs	r1, #2
 800491c:	4876      	ldr	r0, [pc, #472]	; (8004af8 <menu+0x3608>)
 800491e:	f004 ffc3 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004922:	4603      	mov	r3, r0
 8004924:	2b01      	cmp	r3, #1
 8004926:	d11f      	bne.n	8004968 <menu+0x3478>
 8004928:	2104      	movs	r1, #4
 800492a:	4873      	ldr	r0, [pc, #460]	; (8004af8 <menu+0x3608>)
 800492c:	f004 ffbc 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004930:	4603      	mov	r3, r0
 8004932:	2b01      	cmp	r3, #1
 8004934:	d118      	bne.n	8004968 <menu+0x3478>
 8004936:	4b71      	ldr	r3, [pc, #452]	; (8004afc <menu+0x360c>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f083 0301 	eor.w	r3, r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d011      	beq.n	8004968 <menu+0x3478>
			takeMachineID(0);
 8004944:	2000      	movs	r0, #0
 8004946:	f7fc f837 	bl	80009b8 <takeMachineID>

			HAL_Delay(50);
 800494a:	2032      	movs	r0, #50	; 0x32
 800494c:	f004 f9dc 	bl	8008d08 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004950:	4a71      	ldr	r2, [pc, #452]	; (8004b18 <menu+0x3628>)
 8004952:	2101      	movs	r1, #1
 8004954:	2002      	movs	r0, #2
 8004956:	f7fb fe05 	bl	8000564 <lcd_print>
			lcd_print(2, 13, "    ");
 800495a:	4a70      	ldr	r2, [pc, #448]	; (8004b1c <menu+0x362c>)
 800495c:	210d      	movs	r1, #13
 800495e:	2002      	movs	r0, #2
 8004960:	f7fb fe00 	bl	8000564 <lcd_print>

			bekle();
 8004964:	f001 fb28 	bl	8005fb8 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004968:	4b68      	ldr	r3, [pc, #416]	; (8004b0c <menu+0x361c>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b21      	cmp	r3, #33	; 0x21
 800496e:	d153      	bne.n	8004a18 <menu+0x3528>
		calismaSayModu = 0;
 8004970:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <menu+0x3620>)
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004976:	4a6a      	ldr	r2, [pc, #424]	; (8004b20 <menu+0x3630>)
 8004978:	2101      	movs	r1, #1
 800497a:	2001      	movs	r0, #1
 800497c:	f7fb fdf2 	bl	8000564 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004980:	4868      	ldr	r0, [pc, #416]	; (8004b24 <menu+0x3634>)
 8004982:	f7fb fc4f 	bl	8000224 <strlen>
 8004986:	4603      	mov	r3, r0
 8004988:	2b10      	cmp	r3, #16
 800498a:	d811      	bhi.n	80049b0 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 800498c:	4a65      	ldr	r2, [pc, #404]	; (8004b24 <menu+0x3634>)
 800498e:	2101      	movs	r1, #1
 8004990:	2002      	movs	r0, #2
 8004992:	f7fb fde7 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004996:	4863      	ldr	r0, [pc, #396]	; (8004b24 <menu+0x3634>)
 8004998:	f7fb fc44 	bl	8000224 <strlen>
 800499c:	4603      	mov	r3, r0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	4a60      	ldr	r2, [pc, #384]	; (8004b28 <menu+0x3638>)
 80049a6:	4619      	mov	r1, r3
 80049a8:	2002      	movs	r0, #2
 80049aa:	f7fb fddb 	bl	8000564 <lcd_print>
 80049ae:	e005      	b.n	80049bc <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 80049b0:	2300      	movs	r3, #0
 80049b2:	2202      	movs	r2, #2
 80049b4:	2101      	movs	r1, #1
 80049b6:	485b      	ldr	r0, [pc, #364]	; (8004b24 <menu+0x3634>)
 80049b8:	f7fc fcf4 	bl	80013a4 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049bc:	2102      	movs	r1, #2
 80049be:	484e      	ldr	r0, [pc, #312]	; (8004af8 <menu+0x3608>)
 80049c0:	f004 ff72 	bl	80098a8 <HAL_GPIO_ReadPin>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d126      	bne.n	8004a18 <menu+0x3528>
 80049ca:	2104      	movs	r1, #4
 80049cc:	484a      	ldr	r0, [pc, #296]	; (8004af8 <menu+0x3608>)
 80049ce:	f004 ff6b 	bl	80098a8 <HAL_GPIO_ReadPin>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d11f      	bne.n	8004a18 <menu+0x3528>
 80049d8:	4b48      	ldr	r3, [pc, #288]	; (8004afc <menu+0x360c>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	f083 0301 	eor.w	r3, r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d018      	beq.n	8004a18 <menu+0x3528>
			takeWifiSSID(0);
 80049e6:	2000      	movs	r0, #0
 80049e8:	f7fc f93c 	bl	8000c64 <takeWifiSSID>

			HAL_Delay(100);
 80049ec:	2064      	movs	r0, #100	; 0x64
 80049ee:	f004 f98b 	bl	8008d08 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 80049f2:	4a4c      	ldr	r2, [pc, #304]	; (8004b24 <menu+0x3634>)
 80049f4:	2101      	movs	r1, #1
 80049f6:	2002      	movs	r0, #2
 80049f8:	f7fb fdb4 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80049fc:	4849      	ldr	r0, [pc, #292]	; (8004b24 <menu+0x3634>)
 80049fe:	f7fb fc11 	bl	8000224 <strlen>
 8004a02:	4603      	mov	r3, r0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	4a47      	ldr	r2, [pc, #284]	; (8004b28 <menu+0x3638>)
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7fb fda8 	bl	8000564 <lcd_print>

			bekle();
 8004a14:	f001 fad0 	bl	8005fb8 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004a18:	4b3c      	ldr	r3, [pc, #240]	; (8004b0c <menu+0x361c>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b22      	cmp	r3, #34	; 0x22
 8004a1e:	d153      	bne.n	8004ac8 <menu+0x35d8>
		calismaSayModu = 0;
 8004a20:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <menu+0x3620>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004a26:	4a41      	ldr	r2, [pc, #260]	; (8004b2c <menu+0x363c>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f7fb fd9a 	bl	8000564 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004a30:	483f      	ldr	r0, [pc, #252]	; (8004b30 <menu+0x3640>)
 8004a32:	f7fb fbf7 	bl	8000224 <strlen>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d811      	bhi.n	8004a60 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004a3c:	4a3c      	ldr	r2, [pc, #240]	; (8004b30 <menu+0x3640>)
 8004a3e:	2101      	movs	r1, #1
 8004a40:	2002      	movs	r0, #2
 8004a42:	f7fb fd8f 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a46:	483a      	ldr	r0, [pc, #232]	; (8004b30 <menu+0x3640>)
 8004a48:	f7fb fbec 	bl	8000224 <strlen>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	4a34      	ldr	r2, [pc, #208]	; (8004b28 <menu+0x3638>)
 8004a56:	4619      	mov	r1, r3
 8004a58:	2002      	movs	r0, #2
 8004a5a:	f7fb fd83 	bl	8000564 <lcd_print>
 8004a5e:	e005      	b.n	8004a6c <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004a60:	2301      	movs	r3, #1
 8004a62:	2202      	movs	r2, #2
 8004a64:	2101      	movs	r1, #1
 8004a66:	4832      	ldr	r0, [pc, #200]	; (8004b30 <menu+0x3640>)
 8004a68:	f7fc fc9c 	bl	80013a4 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4822      	ldr	r0, [pc, #136]	; (8004af8 <menu+0x3608>)
 8004a70:	f004 ff1a 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d126      	bne.n	8004ac8 <menu+0x35d8>
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	481e      	ldr	r0, [pc, #120]	; (8004af8 <menu+0x3608>)
 8004a7e:	f004 ff13 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d11f      	bne.n	8004ac8 <menu+0x35d8>
 8004a88:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <menu+0x360c>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f083 0301 	eor.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <menu+0x35d8>
			takeWifiPass(0);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fc fa9a 	bl	8000fd0 <takeWifiPass>

			HAL_Delay(50);
 8004a9c:	2032      	movs	r0, #50	; 0x32
 8004a9e:	f004 f933 	bl	8008d08 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004aa2:	4a23      	ldr	r2, [pc, #140]	; (8004b30 <menu+0x3640>)
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	2002      	movs	r0, #2
 8004aa8:	f7fb fd5c 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004aac:	4820      	ldr	r0, [pc, #128]	; (8004b30 <menu+0x3640>)
 8004aae:	f7fb fbb9 	bl	8000224 <strlen>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <menu+0x3638>)
 8004abc:	4619      	mov	r1, r3
 8004abe:	2002      	movs	r0, #2
 8004ac0:	f7fb fd50 	bl	8000564 <lcd_print>

			bekle();
 8004ac4:	f001 fa78 	bl	8005fb8 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <menu+0x361c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b23      	cmp	r3, #35	; 0x23
 8004ace:	d155      	bne.n	8004b7c <menu+0x368c>
		if(dilSecim == 0) {
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <menu+0x3600>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d131      	bne.n	8004b3c <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004ad8:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <menu+0x3644>)
 8004ada:	2101      	movs	r1, #1
 8004adc:	2001      	movs	r0, #1
 8004ade:	f7fb fd41 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <menu+0x3648>)
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	2002      	movs	r0, #2
 8004ae8:	f7fb fd3c 	bl	8000564 <lcd_print>
 8004aec:	e034      	b.n	8004b58 <menu+0x3668>
 8004aee:	bf00      	nop
 8004af0:	20000c31 	.word	0x20000c31
 8004af4:	0800cf70 	.word	0x0800cf70
 8004af8:	40010800 	.word	0x40010800
 8004afc:	20000c3f 	.word	0x20000c3f
 8004b00:	20000c2f 	.word	0x20000c2f
 8004b04:	20000b40 	.word	0x20000b40
 8004b08:	20000c3c 	.word	0x20000c3c
 8004b0c:	20000c10 	.word	0x20000c10
 8004b10:	20000c30 	.word	0x20000c30
 8004b14:	0800d6b8 	.word	0x0800d6b8
 8004b18:	20000bd8 	.word	0x20000bd8
 8004b1c:	0800d6cc 	.word	0x0800d6cc
 8004b20:	0800d6d4 	.word	0x0800d6d4
 8004b24:	20000be4 	.word	0x20000be4
 8004b28:	2000094c 	.word	0x2000094c
 8004b2c:	0800d6e8 	.word	0x0800d6e8
 8004b30:	20000bf8 	.word	0x20000bf8
 8004b34:	0800d6fc 	.word	0x0800d6fc
 8004b38:	0800d710 	.word	0x0800d710
		} else if(dilSecim == 1) {
 8004b3c:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <menu+0x3690>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d109      	bne.n	8004b58 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004b44:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <menu+0x3694>)
 8004b46:	2101      	movs	r1, #1
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f7fb fd0b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <menu+0x3698>)
 8004b50:	2101      	movs	r1, #1
 8004b52:	2002      	movs	r0, #2
 8004b54:	f7fb fd06 	bl	8000564 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b58:	2108      	movs	r1, #8
 8004b5a:	480c      	ldr	r0, [pc, #48]	; (8004b8c <menu+0x369c>)
 8004b5c:	f004 fea4 	bl	80098a8 <HAL_GPIO_ReadPin>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10a      	bne.n	8004b7c <menu+0x368c>
			menuGiris = 0;
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <menu+0x36a0>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004b6c:	f7fb fd26 	bl	80005bc <lcd_clear>
			HAL_Delay(500);
 8004b70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b74:	f004 f8c8 	bl	8008d08 <HAL_Delay>
			NVIC_SystemReset();
 8004b78:	f7fb fd68 	bl	800064c <__NVIC_SystemReset>
		}
	}
}
 8004b7c:	bf00      	nop
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000c31 	.word	0x20000c31
 8004b84:	0800d724 	.word	0x0800d724
 8004b88:	0800d738 	.word	0x0800d738
 8004b8c:	40010800 	.word	0x40010800
 8004b90:	20000c2d 	.word	0x20000c2d

08004b94 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004b9e:	48a9      	ldr	r0, [pc, #676]	; (8004e44 <loadMenuTexts+0x2b0>)
 8004ba0:	f7fb fd6a 	bl	8000678 <copyText>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4aa8      	ldr	r2, [pc, #672]	; (8004e48 <loadMenuTexts+0x2b4>)
 8004ba8:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004baa:	48a8      	ldr	r0, [pc, #672]	; (8004e4c <loadMenuTexts+0x2b8>)
 8004bac:	f7fb fd64 	bl	8000678 <copyText>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4aa7      	ldr	r2, [pc, #668]	; (8004e50 <loadMenuTexts+0x2bc>)
 8004bb4:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004bb6:	48a7      	ldr	r0, [pc, #668]	; (8004e54 <loadMenuTexts+0x2c0>)
 8004bb8:	f7fb fd5e 	bl	8000678 <copyText>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4aa6      	ldr	r2, [pc, #664]	; (8004e58 <loadMenuTexts+0x2c4>)
 8004bc0:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004bc2:	48a6      	ldr	r0, [pc, #664]	; (8004e5c <loadMenuTexts+0x2c8>)
 8004bc4:	f7fb fd58 	bl	8000678 <copyText>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4aa5      	ldr	r2, [pc, #660]	; (8004e60 <loadMenuTexts+0x2cc>)
 8004bcc:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004bce:	48a5      	ldr	r0, [pc, #660]	; (8004e64 <loadMenuTexts+0x2d0>)
 8004bd0:	f7fb fd52 	bl	8000678 <copyText>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4aa4      	ldr	r2, [pc, #656]	; (8004e68 <loadMenuTexts+0x2d4>)
 8004bd8:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004bda:	48a4      	ldr	r0, [pc, #656]	; (8004e6c <loadMenuTexts+0x2d8>)
 8004bdc:	f7fb fd4c 	bl	8000678 <copyText>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4aa3      	ldr	r2, [pc, #652]	; (8004e70 <loadMenuTexts+0x2dc>)
 8004be4:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004be6:	48a3      	ldr	r0, [pc, #652]	; (8004e74 <loadMenuTexts+0x2e0>)
 8004be8:	f7fb fd46 	bl	8000678 <copyText>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4aa2      	ldr	r2, [pc, #648]	; (8004e78 <loadMenuTexts+0x2e4>)
 8004bf0:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 82d1 	bne.w	800519c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004bfa:	48a0      	ldr	r0, [pc, #640]	; (8004e7c <loadMenuTexts+0x2e8>)
 8004bfc:	f7fb fd3c 	bl	8000678 <copyText>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4a9f      	ldr	r2, [pc, #636]	; (8004e80 <loadMenuTexts+0x2ec>)
 8004c04:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004c06:	489f      	ldr	r0, [pc, #636]	; (8004e84 <loadMenuTexts+0x2f0>)
 8004c08:	f7fb fd36 	bl	8000678 <copyText>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4a9e      	ldr	r2, [pc, #632]	; (8004e88 <loadMenuTexts+0x2f4>)
 8004c10:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004c12:	489e      	ldr	r0, [pc, #632]	; (8004e8c <loadMenuTexts+0x2f8>)
 8004c14:	f7fb fd30 	bl	8000678 <copyText>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4a9d      	ldr	r2, [pc, #628]	; (8004e90 <loadMenuTexts+0x2fc>)
 8004c1c:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004c1e:	489d      	ldr	r0, [pc, #628]	; (8004e94 <loadMenuTexts+0x300>)
 8004c20:	f7fb fd2a 	bl	8000678 <copyText>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4a9c      	ldr	r2, [pc, #624]	; (8004e98 <loadMenuTexts+0x304>)
 8004c28:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004c2a:	489c      	ldr	r0, [pc, #624]	; (8004e9c <loadMenuTexts+0x308>)
 8004c2c:	f7fb fd24 	bl	8000678 <copyText>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4a9b      	ldr	r2, [pc, #620]	; (8004ea0 <loadMenuTexts+0x30c>)
 8004c34:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004c36:	489b      	ldr	r0, [pc, #620]	; (8004ea4 <loadMenuTexts+0x310>)
 8004c38:	f7fb fd1e 	bl	8000678 <copyText>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4a9a      	ldr	r2, [pc, #616]	; (8004ea8 <loadMenuTexts+0x314>)
 8004c40:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004c42:	489a      	ldr	r0, [pc, #616]	; (8004eac <loadMenuTexts+0x318>)
 8004c44:	f7fb fd18 	bl	8000678 <copyText>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4a99      	ldr	r2, [pc, #612]	; (8004eb0 <loadMenuTexts+0x31c>)
 8004c4c:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004c4e:	4899      	ldr	r0, [pc, #612]	; (8004eb4 <loadMenuTexts+0x320>)
 8004c50:	f7fb fd12 	bl	8000678 <copyText>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4a98      	ldr	r2, [pc, #608]	; (8004eb8 <loadMenuTexts+0x324>)
 8004c58:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004c5a:	4898      	ldr	r0, [pc, #608]	; (8004ebc <loadMenuTexts+0x328>)
 8004c5c:	f7fb fd0c 	bl	8000678 <copyText>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4a97      	ldr	r2, [pc, #604]	; (8004ec0 <loadMenuTexts+0x32c>)
 8004c64:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004c66:	4897      	ldr	r0, [pc, #604]	; (8004ec4 <loadMenuTexts+0x330>)
 8004c68:	f7fb fd06 	bl	8000678 <copyText>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4a96      	ldr	r2, [pc, #600]	; (8004ec8 <loadMenuTexts+0x334>)
 8004c70:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004c72:	4896      	ldr	r0, [pc, #600]	; (8004ecc <loadMenuTexts+0x338>)
 8004c74:	f7fb fd00 	bl	8000678 <copyText>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4a95      	ldr	r2, [pc, #596]	; (8004ed0 <loadMenuTexts+0x33c>)
 8004c7c:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004c7e:	4895      	ldr	r0, [pc, #596]	; (8004ed4 <loadMenuTexts+0x340>)
 8004c80:	f7fb fcfa 	bl	8000678 <copyText>
 8004c84:	4603      	mov	r3, r0
 8004c86:	4a94      	ldr	r2, [pc, #592]	; (8004ed8 <loadMenuTexts+0x344>)
 8004c88:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004c8a:	4894      	ldr	r0, [pc, #592]	; (8004edc <loadMenuTexts+0x348>)
 8004c8c:	f7fb fcf4 	bl	8000678 <copyText>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4a93      	ldr	r2, [pc, #588]	; (8004ee0 <loadMenuTexts+0x34c>)
 8004c94:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004c96:	4893      	ldr	r0, [pc, #588]	; (8004ee4 <loadMenuTexts+0x350>)
 8004c98:	f7fb fcee 	bl	8000678 <copyText>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4a92      	ldr	r2, [pc, #584]	; (8004ee8 <loadMenuTexts+0x354>)
 8004ca0:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004ca2:	4892      	ldr	r0, [pc, #584]	; (8004eec <loadMenuTexts+0x358>)
 8004ca4:	f7fb fce8 	bl	8000678 <copyText>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4a91      	ldr	r2, [pc, #580]	; (8004ef0 <loadMenuTexts+0x35c>)
 8004cac:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004cae:	4891      	ldr	r0, [pc, #580]	; (8004ef4 <loadMenuTexts+0x360>)
 8004cb0:	f7fb fce2 	bl	8000678 <copyText>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4a90      	ldr	r2, [pc, #576]	; (8004ef8 <loadMenuTexts+0x364>)
 8004cb8:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004cba:	4890      	ldr	r0, [pc, #576]	; (8004efc <loadMenuTexts+0x368>)
 8004cbc:	f7fb fcdc 	bl	8000678 <copyText>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4a8f      	ldr	r2, [pc, #572]	; (8004f00 <loadMenuTexts+0x36c>)
 8004cc4:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004cc6:	488f      	ldr	r0, [pc, #572]	; (8004f04 <loadMenuTexts+0x370>)
 8004cc8:	f7fb fcd6 	bl	8000678 <copyText>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4a8e      	ldr	r2, [pc, #568]	; (8004f08 <loadMenuTexts+0x374>)
 8004cd0:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004cd2:	488e      	ldr	r0, [pc, #568]	; (8004f0c <loadMenuTexts+0x378>)
 8004cd4:	f7fb fcd0 	bl	8000678 <copyText>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4a8d      	ldr	r2, [pc, #564]	; (8004f10 <loadMenuTexts+0x37c>)
 8004cdc:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004cde:	488d      	ldr	r0, [pc, #564]	; (8004f14 <loadMenuTexts+0x380>)
 8004ce0:	f7fb fcca 	bl	8000678 <copyText>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4a8c      	ldr	r2, [pc, #560]	; (8004f18 <loadMenuTexts+0x384>)
 8004ce8:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004cea:	488c      	ldr	r0, [pc, #560]	; (8004f1c <loadMenuTexts+0x388>)
 8004cec:	f7fb fcc4 	bl	8000678 <copyText>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4a8b      	ldr	r2, [pc, #556]	; (8004f20 <loadMenuTexts+0x38c>)
 8004cf4:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004cf6:	488b      	ldr	r0, [pc, #556]	; (8004f24 <loadMenuTexts+0x390>)
 8004cf8:	f7fb fcbe 	bl	8000678 <copyText>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4a8a      	ldr	r2, [pc, #552]	; (8004f28 <loadMenuTexts+0x394>)
 8004d00:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004d02:	488a      	ldr	r0, [pc, #552]	; (8004f2c <loadMenuTexts+0x398>)
 8004d04:	f7fb fcb8 	bl	8000678 <copyText>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4a89      	ldr	r2, [pc, #548]	; (8004f30 <loadMenuTexts+0x39c>)
 8004d0c:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004d0e:	4889      	ldr	r0, [pc, #548]	; (8004f34 <loadMenuTexts+0x3a0>)
 8004d10:	f7fb fcb2 	bl	8000678 <copyText>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4a88      	ldr	r2, [pc, #544]	; (8004f38 <loadMenuTexts+0x3a4>)
 8004d18:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004d1a:	4888      	ldr	r0, [pc, #544]	; (8004f3c <loadMenuTexts+0x3a8>)
 8004d1c:	f7fb fcac 	bl	8000678 <copyText>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4a87      	ldr	r2, [pc, #540]	; (8004f40 <loadMenuTexts+0x3ac>)
 8004d24:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004d26:	4887      	ldr	r0, [pc, #540]	; (8004f44 <loadMenuTexts+0x3b0>)
 8004d28:	f7fb fca6 	bl	8000678 <copyText>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4a86      	ldr	r2, [pc, #536]	; (8004f48 <loadMenuTexts+0x3b4>)
 8004d30:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004d32:	4886      	ldr	r0, [pc, #536]	; (8004f4c <loadMenuTexts+0x3b8>)
 8004d34:	f7fb fca0 	bl	8000678 <copyText>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4a85      	ldr	r2, [pc, #532]	; (8004f50 <loadMenuTexts+0x3bc>)
 8004d3c:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004d3e:	4885      	ldr	r0, [pc, #532]	; (8004f54 <loadMenuTexts+0x3c0>)
 8004d40:	f7fb fc9a 	bl	8000678 <copyText>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4a84      	ldr	r2, [pc, #528]	; (8004f58 <loadMenuTexts+0x3c4>)
 8004d48:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004d4a:	4884      	ldr	r0, [pc, #528]	; (8004f5c <loadMenuTexts+0x3c8>)
 8004d4c:	f7fb fc94 	bl	8000678 <copyText>
 8004d50:	4603      	mov	r3, r0
 8004d52:	4a83      	ldr	r2, [pc, #524]	; (8004f60 <loadMenuTexts+0x3cc>)
 8004d54:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004d56:	4883      	ldr	r0, [pc, #524]	; (8004f64 <loadMenuTexts+0x3d0>)
 8004d58:	f7fb fc8e 	bl	8000678 <copyText>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4a82      	ldr	r2, [pc, #520]	; (8004f68 <loadMenuTexts+0x3d4>)
 8004d60:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004d62:	4882      	ldr	r0, [pc, #520]	; (8004f6c <loadMenuTexts+0x3d8>)
 8004d64:	f7fb fc88 	bl	8000678 <copyText>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	4a81      	ldr	r2, [pc, #516]	; (8004f70 <loadMenuTexts+0x3dc>)
 8004d6c:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004d6e:	4881      	ldr	r0, [pc, #516]	; (8004f74 <loadMenuTexts+0x3e0>)
 8004d70:	f7fb fc82 	bl	8000678 <copyText>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4a80      	ldr	r2, [pc, #512]	; (8004f78 <loadMenuTexts+0x3e4>)
 8004d78:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004d7a:	4880      	ldr	r0, [pc, #512]	; (8004f7c <loadMenuTexts+0x3e8>)
 8004d7c:	f7fb fc7c 	bl	8000678 <copyText>
 8004d80:	4603      	mov	r3, r0
 8004d82:	4a7f      	ldr	r2, [pc, #508]	; (8004f80 <loadMenuTexts+0x3ec>)
 8004d84:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004d86:	487f      	ldr	r0, [pc, #508]	; (8004f84 <loadMenuTexts+0x3f0>)
 8004d88:	f7fb fc76 	bl	8000678 <copyText>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4a7e      	ldr	r2, [pc, #504]	; (8004f88 <loadMenuTexts+0x3f4>)
 8004d90:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004d92:	487e      	ldr	r0, [pc, #504]	; (8004f8c <loadMenuTexts+0x3f8>)
 8004d94:	f7fb fc70 	bl	8000678 <copyText>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4a7d      	ldr	r2, [pc, #500]	; (8004f90 <loadMenuTexts+0x3fc>)
 8004d9c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004d9e:	487d      	ldr	r0, [pc, #500]	; (8004f94 <loadMenuTexts+0x400>)
 8004da0:	f7fb fc6a 	bl	8000678 <copyText>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4a7c      	ldr	r2, [pc, #496]	; (8004f98 <loadMenuTexts+0x404>)
 8004da8:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004daa:	487c      	ldr	r0, [pc, #496]	; (8004f9c <loadMenuTexts+0x408>)
 8004dac:	f7fb fc64 	bl	8000678 <copyText>
 8004db0:	4603      	mov	r3, r0
 8004db2:	4a7b      	ldr	r2, [pc, #492]	; (8004fa0 <loadMenuTexts+0x40c>)
 8004db4:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004db6:	487b      	ldr	r0, [pc, #492]	; (8004fa4 <loadMenuTexts+0x410>)
 8004db8:	f7fb fc5e 	bl	8000678 <copyText>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4a7a      	ldr	r2, [pc, #488]	; (8004fa8 <loadMenuTexts+0x414>)
 8004dc0:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004dc2:	487a      	ldr	r0, [pc, #488]	; (8004fac <loadMenuTexts+0x418>)
 8004dc4:	f7fb fc58 	bl	8000678 <copyText>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4a79      	ldr	r2, [pc, #484]	; (8004fb0 <loadMenuTexts+0x41c>)
 8004dcc:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004dce:	4879      	ldr	r0, [pc, #484]	; (8004fb4 <loadMenuTexts+0x420>)
 8004dd0:	f7fb fc52 	bl	8000678 <copyText>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4a78      	ldr	r2, [pc, #480]	; (8004fb8 <loadMenuTexts+0x424>)
 8004dd8:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004dda:	4878      	ldr	r0, [pc, #480]	; (8004fbc <loadMenuTexts+0x428>)
 8004ddc:	f7fb fc4c 	bl	8000678 <copyText>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4a77      	ldr	r2, [pc, #476]	; (8004fc0 <loadMenuTexts+0x42c>)
 8004de4:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004de6:	4877      	ldr	r0, [pc, #476]	; (8004fc4 <loadMenuTexts+0x430>)
 8004de8:	f7fb fc46 	bl	8000678 <copyText>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4a76      	ldr	r2, [pc, #472]	; (8004fc8 <loadMenuTexts+0x434>)
 8004df0:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004df2:	4876      	ldr	r0, [pc, #472]	; (8004fcc <loadMenuTexts+0x438>)
 8004df4:	f7fb fc40 	bl	8000678 <copyText>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4a75      	ldr	r2, [pc, #468]	; (8004fd0 <loadMenuTexts+0x43c>)
 8004dfc:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004dfe:	4875      	ldr	r0, [pc, #468]	; (8004fd4 <loadMenuTexts+0x440>)
 8004e00:	f7fb fc3a 	bl	8000678 <copyText>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4a74      	ldr	r2, [pc, #464]	; (8004fd8 <loadMenuTexts+0x444>)
 8004e08:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004e0a:	4874      	ldr	r0, [pc, #464]	; (8004fdc <loadMenuTexts+0x448>)
 8004e0c:	f7fb fc34 	bl	8000678 <copyText>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4a73      	ldr	r2, [pc, #460]	; (8004fe0 <loadMenuTexts+0x44c>)
 8004e14:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004e16:	4873      	ldr	r0, [pc, #460]	; (8004fe4 <loadMenuTexts+0x450>)
 8004e18:	f7fb fc2e 	bl	8000678 <copyText>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4a72      	ldr	r2, [pc, #456]	; (8004fe8 <loadMenuTexts+0x454>)
 8004e20:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004e22:	4872      	ldr	r0, [pc, #456]	; (8004fec <loadMenuTexts+0x458>)
 8004e24:	f7fb fc28 	bl	8000678 <copyText>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4a71      	ldr	r2, [pc, #452]	; (8004ff0 <loadMenuTexts+0x45c>)
 8004e2c:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004e2e:	4871      	ldr	r0, [pc, #452]	; (8004ff4 <loadMenuTexts+0x460>)
 8004e30:	f7fb fc22 	bl	8000678 <copyText>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4a70      	ldr	r2, [pc, #448]	; (8004ff8 <loadMenuTexts+0x464>)
 8004e38:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004e3a:	4870      	ldr	r0, [pc, #448]	; (8004ffc <loadMenuTexts+0x468>)
 8004e3c:	f7fb fc1c 	bl	8000678 <copyText>
 8004e40:	4603      	mov	r3, r0
 8004e42:	e0dd      	b.n	8005000 <loadMenuTexts+0x46c>
 8004e44:	20000000 	.word	0x20000000
 8004e48:	20000c74 	.word	0x20000c74
 8004e4c:	20000010 	.word	0x20000010
 8004e50:	20000c78 	.word	0x20000c78
 8004e54:	20000020 	.word	0x20000020
 8004e58:	20000cd0 	.word	0x20000cd0
 8004e5c:	20000030 	.word	0x20000030
 8004e60:	20000d00 	.word	0x20000d00
 8004e64:	20000040 	.word	0x20000040
 8004e68:	20000d08 	.word	0x20000d08
 8004e6c:	20000050 	.word	0x20000050
 8004e70:	20000d80 	.word	0x20000d80
 8004e74:	20000060 	.word	0x20000060
 8004e78:	20000d84 	.word	0x20000d84
 8004e7c:	20000070 	.word	0x20000070
 8004e80:	20000c7c 	.word	0x20000c7c
 8004e84:	20000080 	.word	0x20000080
 8004e88:	20000c80 	.word	0x20000c80
 8004e8c:	20000090 	.word	0x20000090
 8004e90:	20000c84 	.word	0x20000c84
 8004e94:	200000a0 	.word	0x200000a0
 8004e98:	20000c88 	.word	0x20000c88
 8004e9c:	200000b0 	.word	0x200000b0
 8004ea0:	20000c8c 	.word	0x20000c8c
 8004ea4:	200000c0 	.word	0x200000c0
 8004ea8:	20000c90 	.word	0x20000c90
 8004eac:	200000d0 	.word	0x200000d0
 8004eb0:	20000c94 	.word	0x20000c94
 8004eb4:	200000e0 	.word	0x200000e0
 8004eb8:	20000c98 	.word	0x20000c98
 8004ebc:	200000f0 	.word	0x200000f0
 8004ec0:	20000c9c 	.word	0x20000c9c
 8004ec4:	20000100 	.word	0x20000100
 8004ec8:	20000ca0 	.word	0x20000ca0
 8004ecc:	20000110 	.word	0x20000110
 8004ed0:	20000ca4 	.word	0x20000ca4
 8004ed4:	20000120 	.word	0x20000120
 8004ed8:	20000ca8 	.word	0x20000ca8
 8004edc:	20000130 	.word	0x20000130
 8004ee0:	20000cac 	.word	0x20000cac
 8004ee4:	20000140 	.word	0x20000140
 8004ee8:	20000cb0 	.word	0x20000cb0
 8004eec:	20000150 	.word	0x20000150
 8004ef0:	20000cb4 	.word	0x20000cb4
 8004ef4:	20000160 	.word	0x20000160
 8004ef8:	20000cb8 	.word	0x20000cb8
 8004efc:	20000170 	.word	0x20000170
 8004f00:	20000cbc 	.word	0x20000cbc
 8004f04:	20000180 	.word	0x20000180
 8004f08:	20000cc0 	.word	0x20000cc0
 8004f0c:	20000190 	.word	0x20000190
 8004f10:	20000cc4 	.word	0x20000cc4
 8004f14:	200001a0 	.word	0x200001a0
 8004f18:	20000cc8 	.word	0x20000cc8
 8004f1c:	200001b0 	.word	0x200001b0
 8004f20:	20000ccc 	.word	0x20000ccc
 8004f24:	200001c0 	.word	0x200001c0
 8004f28:	20000cd4 	.word	0x20000cd4
 8004f2c:	200001d0 	.word	0x200001d0
 8004f30:	20000cd8 	.word	0x20000cd8
 8004f34:	200001e0 	.word	0x200001e0
 8004f38:	20000cdc 	.word	0x20000cdc
 8004f3c:	200001f0 	.word	0x200001f0
 8004f40:	20000ce0 	.word	0x20000ce0
 8004f44:	20000200 	.word	0x20000200
 8004f48:	20000ce4 	.word	0x20000ce4
 8004f4c:	20000210 	.word	0x20000210
 8004f50:	20000ce8 	.word	0x20000ce8
 8004f54:	20000220 	.word	0x20000220
 8004f58:	20000cec 	.word	0x20000cec
 8004f5c:	20000230 	.word	0x20000230
 8004f60:	20000cf0 	.word	0x20000cf0
 8004f64:	20000240 	.word	0x20000240
 8004f68:	20000cf4 	.word	0x20000cf4
 8004f6c:	20000250 	.word	0x20000250
 8004f70:	20000cf8 	.word	0x20000cf8
 8004f74:	20000260 	.word	0x20000260
 8004f78:	20000cfc 	.word	0x20000cfc
 8004f7c:	20000270 	.word	0x20000270
 8004f80:	20000d04 	.word	0x20000d04
 8004f84:	20000280 	.word	0x20000280
 8004f88:	20000d0c 	.word	0x20000d0c
 8004f8c:	20000290 	.word	0x20000290
 8004f90:	20000d10 	.word	0x20000d10
 8004f94:	200002a0 	.word	0x200002a0
 8004f98:	20000d14 	.word	0x20000d14
 8004f9c:	200002b0 	.word	0x200002b0
 8004fa0:	20000d18 	.word	0x20000d18
 8004fa4:	200002c0 	.word	0x200002c0
 8004fa8:	20000d1c 	.word	0x20000d1c
 8004fac:	200002d0 	.word	0x200002d0
 8004fb0:	20000d20 	.word	0x20000d20
 8004fb4:	200002e0 	.word	0x200002e0
 8004fb8:	20000d24 	.word	0x20000d24
 8004fbc:	200002f0 	.word	0x200002f0
 8004fc0:	20000d28 	.word	0x20000d28
 8004fc4:	20000300 	.word	0x20000300
 8004fc8:	20000d2c 	.word	0x20000d2c
 8004fcc:	20000310 	.word	0x20000310
 8004fd0:	20000d30 	.word	0x20000d30
 8004fd4:	20000320 	.word	0x20000320
 8004fd8:	20000d34 	.word	0x20000d34
 8004fdc:	20000330 	.word	0x20000330
 8004fe0:	20000d38 	.word	0x20000d38
 8004fe4:	20000340 	.word	0x20000340
 8004fe8:	20000d3c 	.word	0x20000d3c
 8004fec:	20000350 	.word	0x20000350
 8004ff0:	20000d40 	.word	0x20000d40
 8004ff4:	20000360 	.word	0x20000360
 8004ff8:	20000d44 	.word	0x20000d44
 8004ffc:	20000370 	.word	0x20000370
 8005000:	4a3d      	ldr	r2, [pc, #244]	; (80050f8 <loadMenuTexts+0x564>)
 8005002:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005004:	483d      	ldr	r0, [pc, #244]	; (80050fc <loadMenuTexts+0x568>)
 8005006:	f7fb fb37 	bl	8000678 <copyText>
 800500a:	4603      	mov	r3, r0
 800500c:	4a3c      	ldr	r2, [pc, #240]	; (8005100 <loadMenuTexts+0x56c>)
 800500e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005010:	483c      	ldr	r0, [pc, #240]	; (8005104 <loadMenuTexts+0x570>)
 8005012:	f7fb fb31 	bl	8000678 <copyText>
 8005016:	4603      	mov	r3, r0
 8005018:	4a3b      	ldr	r2, [pc, #236]	; (8005108 <loadMenuTexts+0x574>)
 800501a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 800501c:	483b      	ldr	r0, [pc, #236]	; (800510c <loadMenuTexts+0x578>)
 800501e:	f7fb fb2b 	bl	8000678 <copyText>
 8005022:	4603      	mov	r3, r0
 8005024:	4a3a      	ldr	r2, [pc, #232]	; (8005110 <loadMenuTexts+0x57c>)
 8005026:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8005028:	483a      	ldr	r0, [pc, #232]	; (8005114 <loadMenuTexts+0x580>)
 800502a:	f7fb fb25 	bl	8000678 <copyText>
 800502e:	4603      	mov	r3, r0
 8005030:	4a39      	ldr	r2, [pc, #228]	; (8005118 <loadMenuTexts+0x584>)
 8005032:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005034:	4839      	ldr	r0, [pc, #228]	; (800511c <loadMenuTexts+0x588>)
 8005036:	f7fb fb1f 	bl	8000678 <copyText>
 800503a:	4603      	mov	r3, r0
 800503c:	4a38      	ldr	r2, [pc, #224]	; (8005120 <loadMenuTexts+0x58c>)
 800503e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005040:	4838      	ldr	r0, [pc, #224]	; (8005124 <loadMenuTexts+0x590>)
 8005042:	f7fb fb19 	bl	8000678 <copyText>
 8005046:	4603      	mov	r3, r0
 8005048:	4a37      	ldr	r2, [pc, #220]	; (8005128 <loadMenuTexts+0x594>)
 800504a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 800504c:	4837      	ldr	r0, [pc, #220]	; (800512c <loadMenuTexts+0x598>)
 800504e:	f7fb fb13 	bl	8000678 <copyText>
 8005052:	4603      	mov	r3, r0
 8005054:	4a36      	ldr	r2, [pc, #216]	; (8005130 <loadMenuTexts+0x59c>)
 8005056:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005058:	4836      	ldr	r0, [pc, #216]	; (8005134 <loadMenuTexts+0x5a0>)
 800505a:	f7fb fb0d 	bl	8000678 <copyText>
 800505e:	4603      	mov	r3, r0
 8005060:	4a35      	ldr	r2, [pc, #212]	; (8005138 <loadMenuTexts+0x5a4>)
 8005062:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005064:	4835      	ldr	r0, [pc, #212]	; (800513c <loadMenuTexts+0x5a8>)
 8005066:	f7fb fb07 	bl	8000678 <copyText>
 800506a:	4603      	mov	r3, r0
 800506c:	4a34      	ldr	r2, [pc, #208]	; (8005140 <loadMenuTexts+0x5ac>)
 800506e:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005070:	4834      	ldr	r0, [pc, #208]	; (8005144 <loadMenuTexts+0x5b0>)
 8005072:	f7fb fb01 	bl	8000678 <copyText>
 8005076:	4603      	mov	r3, r0
 8005078:	4a33      	ldr	r2, [pc, #204]	; (8005148 <loadMenuTexts+0x5b4>)
 800507a:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 800507c:	4833      	ldr	r0, [pc, #204]	; (800514c <loadMenuTexts+0x5b8>)
 800507e:	f7fb fafb 	bl	8000678 <copyText>
 8005082:	4603      	mov	r3, r0
 8005084:	4a32      	ldr	r2, [pc, #200]	; (8005150 <loadMenuTexts+0x5bc>)
 8005086:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005088:	4832      	ldr	r0, [pc, #200]	; (8005154 <loadMenuTexts+0x5c0>)
 800508a:	f7fb faf5 	bl	8000678 <copyText>
 800508e:	4603      	mov	r3, r0
 8005090:	4a31      	ldr	r2, [pc, #196]	; (8005158 <loadMenuTexts+0x5c4>)
 8005092:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005094:	4831      	ldr	r0, [pc, #196]	; (800515c <loadMenuTexts+0x5c8>)
 8005096:	f7fb faef 	bl	8000678 <copyText>
 800509a:	4603      	mov	r3, r0
 800509c:	4a30      	ldr	r2, [pc, #192]	; (8005160 <loadMenuTexts+0x5cc>)
 800509e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80050a0:	4830      	ldr	r0, [pc, #192]	; (8005164 <loadMenuTexts+0x5d0>)
 80050a2:	f7fb fae9 	bl	8000678 <copyText>
 80050a6:	4603      	mov	r3, r0
 80050a8:	4a2f      	ldr	r2, [pc, #188]	; (8005168 <loadMenuTexts+0x5d4>)
 80050aa:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80050ac:	482f      	ldr	r0, [pc, #188]	; (800516c <loadMenuTexts+0x5d8>)
 80050ae:	f7fb fae3 	bl	8000678 <copyText>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4a2e      	ldr	r2, [pc, #184]	; (8005170 <loadMenuTexts+0x5dc>)
 80050b6:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 80050b8:	482e      	ldr	r0, [pc, #184]	; (8005174 <loadMenuTexts+0x5e0>)
 80050ba:	f7fb fadd 	bl	8000678 <copyText>
 80050be:	4603      	mov	r3, r0
 80050c0:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <loadMenuTexts+0x5e4>)
 80050c2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 80050c4:	482d      	ldr	r0, [pc, #180]	; (800517c <loadMenuTexts+0x5e8>)
 80050c6:	f7fb fad7 	bl	8000678 <copyText>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <loadMenuTexts+0x5ec>)
 80050ce:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80050d0:	482c      	ldr	r0, [pc, #176]	; (8005184 <loadMenuTexts+0x5f0>)
 80050d2:	f7fb fad1 	bl	8000678 <copyText>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4a2b      	ldr	r2, [pc, #172]	; (8005188 <loadMenuTexts+0x5f4>)
 80050da:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80050dc:	482b      	ldr	r0, [pc, #172]	; (800518c <loadMenuTexts+0x5f8>)
 80050de:	f7fb facb 	bl	8000678 <copyText>
 80050e2:	4603      	mov	r3, r0
 80050e4:	4a2a      	ldr	r2, [pc, #168]	; (8005190 <loadMenuTexts+0x5fc>)
 80050e6:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80050e8:	482a      	ldr	r0, [pc, #168]	; (8005194 <loadMenuTexts+0x600>)
 80050ea:	f7fb fac5 	bl	8000678 <copyText>
 80050ee:	4603      	mov	r3, r0
 80050f0:	4a29      	ldr	r2, [pc, #164]	; (8005198 <loadMenuTexts+0x604>)
 80050f2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80050f4:	e2d3      	b.n	800569e <loadMenuTexts+0xb0a>
 80050f6:	bf00      	nop
 80050f8:	20000d48 	.word	0x20000d48
 80050fc:	20000380 	.word	0x20000380
 8005100:	20000d4c 	.word	0x20000d4c
 8005104:	20000390 	.word	0x20000390
 8005108:	20000d50 	.word	0x20000d50
 800510c:	200003a0 	.word	0x200003a0
 8005110:	20000d54 	.word	0x20000d54
 8005114:	200003b0 	.word	0x200003b0
 8005118:	20000d58 	.word	0x20000d58
 800511c:	200003c0 	.word	0x200003c0
 8005120:	20000d5c 	.word	0x20000d5c
 8005124:	200003d0 	.word	0x200003d0
 8005128:	20000d60 	.word	0x20000d60
 800512c:	200003e0 	.word	0x200003e0
 8005130:	20000d64 	.word	0x20000d64
 8005134:	200003f0 	.word	0x200003f0
 8005138:	20000d68 	.word	0x20000d68
 800513c:	20000400 	.word	0x20000400
 8005140:	20000d6c 	.word	0x20000d6c
 8005144:	20000410 	.word	0x20000410
 8005148:	20000d70 	.word	0x20000d70
 800514c:	20000420 	.word	0x20000420
 8005150:	20000d74 	.word	0x20000d74
 8005154:	20000430 	.word	0x20000430
 8005158:	20000d78 	.word	0x20000d78
 800515c:	20000440 	.word	0x20000440
 8005160:	20000d7c 	.word	0x20000d7c
 8005164:	20000450 	.word	0x20000450
 8005168:	20000d88 	.word	0x20000d88
 800516c:	20000460 	.word	0x20000460
 8005170:	20000d8c 	.word	0x20000d8c
 8005174:	20000470 	.word	0x20000470
 8005178:	20000d90 	.word	0x20000d90
 800517c:	20000480 	.word	0x20000480
 8005180:	20000d94 	.word	0x20000d94
 8005184:	20000490 	.word	0x20000490
 8005188:	20000d98 	.word	0x20000d98
 800518c:	200004a0 	.word	0x200004a0
 8005190:	20000d9c 	.word	0x20000d9c
 8005194:	200004b0 	.word	0x200004b0
 8005198:	20000da0 	.word	0x20000da0
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 800519c:	48a9      	ldr	r0, [pc, #676]	; (8005444 <loadMenuTexts+0x8b0>)
 800519e:	f7fb fa6b 	bl	8000678 <copyText>
 80051a2:	4603      	mov	r3, r0
 80051a4:	4aa8      	ldr	r2, [pc, #672]	; (8005448 <loadMenuTexts+0x8b4>)
 80051a6:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80051a8:	48a8      	ldr	r0, [pc, #672]	; (800544c <loadMenuTexts+0x8b8>)
 80051aa:	f7fb fa65 	bl	8000678 <copyText>
 80051ae:	4603      	mov	r3, r0
 80051b0:	4aa7      	ldr	r2, [pc, #668]	; (8005450 <loadMenuTexts+0x8bc>)
 80051b2:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80051b4:	48a7      	ldr	r0, [pc, #668]	; (8005454 <loadMenuTexts+0x8c0>)
 80051b6:	f7fb fa5f 	bl	8000678 <copyText>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4aa6      	ldr	r2, [pc, #664]	; (8005458 <loadMenuTexts+0x8c4>)
 80051be:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80051c0:	48a6      	ldr	r0, [pc, #664]	; (800545c <loadMenuTexts+0x8c8>)
 80051c2:	f7fb fa59 	bl	8000678 <copyText>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4aa5      	ldr	r2, [pc, #660]	; (8005460 <loadMenuTexts+0x8cc>)
 80051ca:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80051cc:	48a5      	ldr	r0, [pc, #660]	; (8005464 <loadMenuTexts+0x8d0>)
 80051ce:	f7fb fa53 	bl	8000678 <copyText>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4aa4      	ldr	r2, [pc, #656]	; (8005468 <loadMenuTexts+0x8d4>)
 80051d6:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80051d8:	48a4      	ldr	r0, [pc, #656]	; (800546c <loadMenuTexts+0x8d8>)
 80051da:	f7fb fa4d 	bl	8000678 <copyText>
 80051de:	4603      	mov	r3, r0
 80051e0:	4aa3      	ldr	r2, [pc, #652]	; (8005470 <loadMenuTexts+0x8dc>)
 80051e2:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80051e4:	48a3      	ldr	r0, [pc, #652]	; (8005474 <loadMenuTexts+0x8e0>)
 80051e6:	f7fb fa47 	bl	8000678 <copyText>
 80051ea:	4603      	mov	r3, r0
 80051ec:	4aa2      	ldr	r2, [pc, #648]	; (8005478 <loadMenuTexts+0x8e4>)
 80051ee:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80051f0:	48a2      	ldr	r0, [pc, #648]	; (800547c <loadMenuTexts+0x8e8>)
 80051f2:	f7fb fa41 	bl	8000678 <copyText>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4aa1      	ldr	r2, [pc, #644]	; (8005480 <loadMenuTexts+0x8ec>)
 80051fa:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80051fc:	48a1      	ldr	r0, [pc, #644]	; (8005484 <loadMenuTexts+0x8f0>)
 80051fe:	f7fb fa3b 	bl	8000678 <copyText>
 8005202:	4603      	mov	r3, r0
 8005204:	4aa0      	ldr	r2, [pc, #640]	; (8005488 <loadMenuTexts+0x8f4>)
 8005206:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8005208:	48a0      	ldr	r0, [pc, #640]	; (800548c <loadMenuTexts+0x8f8>)
 800520a:	f7fb fa35 	bl	8000678 <copyText>
 800520e:	4603      	mov	r3, r0
 8005210:	4a9f      	ldr	r2, [pc, #636]	; (8005490 <loadMenuTexts+0x8fc>)
 8005212:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005214:	489f      	ldr	r0, [pc, #636]	; (8005494 <loadMenuTexts+0x900>)
 8005216:	f7fb fa2f 	bl	8000678 <copyText>
 800521a:	4603      	mov	r3, r0
 800521c:	4a9e      	ldr	r2, [pc, #632]	; (8005498 <loadMenuTexts+0x904>)
 800521e:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005220:	489e      	ldr	r0, [pc, #632]	; (800549c <loadMenuTexts+0x908>)
 8005222:	f7fb fa29 	bl	8000678 <copyText>
 8005226:	4603      	mov	r3, r0
 8005228:	4a9d      	ldr	r2, [pc, #628]	; (80054a0 <loadMenuTexts+0x90c>)
 800522a:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 800522c:	489d      	ldr	r0, [pc, #628]	; (80054a4 <loadMenuTexts+0x910>)
 800522e:	f7fb fa23 	bl	8000678 <copyText>
 8005232:	4603      	mov	r3, r0
 8005234:	4a9c      	ldr	r2, [pc, #624]	; (80054a8 <loadMenuTexts+0x914>)
 8005236:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005238:	489c      	ldr	r0, [pc, #624]	; (80054ac <loadMenuTexts+0x918>)
 800523a:	f7fb fa1d 	bl	8000678 <copyText>
 800523e:	4603      	mov	r3, r0
 8005240:	4a9b      	ldr	r2, [pc, #620]	; (80054b0 <loadMenuTexts+0x91c>)
 8005242:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005244:	489b      	ldr	r0, [pc, #620]	; (80054b4 <loadMenuTexts+0x920>)
 8005246:	f7fb fa17 	bl	8000678 <copyText>
 800524a:	4603      	mov	r3, r0
 800524c:	4a9a      	ldr	r2, [pc, #616]	; (80054b8 <loadMenuTexts+0x924>)
 800524e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005250:	489a      	ldr	r0, [pc, #616]	; (80054bc <loadMenuTexts+0x928>)
 8005252:	f7fb fa11 	bl	8000678 <copyText>
 8005256:	4603      	mov	r3, r0
 8005258:	4a99      	ldr	r2, [pc, #612]	; (80054c0 <loadMenuTexts+0x92c>)
 800525a:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 800525c:	4899      	ldr	r0, [pc, #612]	; (80054c4 <loadMenuTexts+0x930>)
 800525e:	f7fb fa0b 	bl	8000678 <copyText>
 8005262:	4603      	mov	r3, r0
 8005264:	4a98      	ldr	r2, [pc, #608]	; (80054c8 <loadMenuTexts+0x934>)
 8005266:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005268:	4898      	ldr	r0, [pc, #608]	; (80054cc <loadMenuTexts+0x938>)
 800526a:	f7fb fa05 	bl	8000678 <copyText>
 800526e:	4603      	mov	r3, r0
 8005270:	4a97      	ldr	r2, [pc, #604]	; (80054d0 <loadMenuTexts+0x93c>)
 8005272:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005274:	4897      	ldr	r0, [pc, #604]	; (80054d4 <loadMenuTexts+0x940>)
 8005276:	f7fb f9ff 	bl	8000678 <copyText>
 800527a:	4603      	mov	r3, r0
 800527c:	4a96      	ldr	r2, [pc, #600]	; (80054d8 <loadMenuTexts+0x944>)
 800527e:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005280:	4896      	ldr	r0, [pc, #600]	; (80054dc <loadMenuTexts+0x948>)
 8005282:	f7fb f9f9 	bl	8000678 <copyText>
 8005286:	4603      	mov	r3, r0
 8005288:	4a95      	ldr	r2, [pc, #596]	; (80054e0 <loadMenuTexts+0x94c>)
 800528a:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 800528c:	4895      	ldr	r0, [pc, #596]	; (80054e4 <loadMenuTexts+0x950>)
 800528e:	f7fb f9f3 	bl	8000678 <copyText>
 8005292:	4603      	mov	r3, r0
 8005294:	4a94      	ldr	r2, [pc, #592]	; (80054e8 <loadMenuTexts+0x954>)
 8005296:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005298:	4894      	ldr	r0, [pc, #592]	; (80054ec <loadMenuTexts+0x958>)
 800529a:	f7fb f9ed 	bl	8000678 <copyText>
 800529e:	4603      	mov	r3, r0
 80052a0:	4a93      	ldr	r2, [pc, #588]	; (80054f0 <loadMenuTexts+0x95c>)
 80052a2:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80052a4:	4893      	ldr	r0, [pc, #588]	; (80054f4 <loadMenuTexts+0x960>)
 80052a6:	f7fb f9e7 	bl	8000678 <copyText>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4a92      	ldr	r2, [pc, #584]	; (80054f8 <loadMenuTexts+0x964>)
 80052ae:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80052b0:	4892      	ldr	r0, [pc, #584]	; (80054fc <loadMenuTexts+0x968>)
 80052b2:	f7fb f9e1 	bl	8000678 <copyText>
 80052b6:	4603      	mov	r3, r0
 80052b8:	4a91      	ldr	r2, [pc, #580]	; (8005500 <loadMenuTexts+0x96c>)
 80052ba:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80052bc:	4891      	ldr	r0, [pc, #580]	; (8005504 <loadMenuTexts+0x970>)
 80052be:	f7fb f9db 	bl	8000678 <copyText>
 80052c2:	4603      	mov	r3, r0
 80052c4:	4a90      	ldr	r2, [pc, #576]	; (8005508 <loadMenuTexts+0x974>)
 80052c6:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80052c8:	4890      	ldr	r0, [pc, #576]	; (800550c <loadMenuTexts+0x978>)
 80052ca:	f7fb f9d5 	bl	8000678 <copyText>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4a8f      	ldr	r2, [pc, #572]	; (8005510 <loadMenuTexts+0x97c>)
 80052d2:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80052d4:	488f      	ldr	r0, [pc, #572]	; (8005514 <loadMenuTexts+0x980>)
 80052d6:	f7fb f9cf 	bl	8000678 <copyText>
 80052da:	4603      	mov	r3, r0
 80052dc:	4a8e      	ldr	r2, [pc, #568]	; (8005518 <loadMenuTexts+0x984>)
 80052de:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80052e0:	488e      	ldr	r0, [pc, #568]	; (800551c <loadMenuTexts+0x988>)
 80052e2:	f7fb f9c9 	bl	8000678 <copyText>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4a8d      	ldr	r2, [pc, #564]	; (8005520 <loadMenuTexts+0x98c>)
 80052ea:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80052ec:	488d      	ldr	r0, [pc, #564]	; (8005524 <loadMenuTexts+0x990>)
 80052ee:	f7fb f9c3 	bl	8000678 <copyText>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4a8c      	ldr	r2, [pc, #560]	; (8005528 <loadMenuTexts+0x994>)
 80052f6:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80052f8:	488c      	ldr	r0, [pc, #560]	; (800552c <loadMenuTexts+0x998>)
 80052fa:	f7fb f9bd 	bl	8000678 <copyText>
 80052fe:	4603      	mov	r3, r0
 8005300:	4a8b      	ldr	r2, [pc, #556]	; (8005530 <loadMenuTexts+0x99c>)
 8005302:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005304:	488b      	ldr	r0, [pc, #556]	; (8005534 <loadMenuTexts+0x9a0>)
 8005306:	f7fb f9b7 	bl	8000678 <copyText>
 800530a:	4603      	mov	r3, r0
 800530c:	4a8a      	ldr	r2, [pc, #552]	; (8005538 <loadMenuTexts+0x9a4>)
 800530e:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005310:	488a      	ldr	r0, [pc, #552]	; (800553c <loadMenuTexts+0x9a8>)
 8005312:	f7fb f9b1 	bl	8000678 <copyText>
 8005316:	4603      	mov	r3, r0
 8005318:	4a89      	ldr	r2, [pc, #548]	; (8005540 <loadMenuTexts+0x9ac>)
 800531a:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 800531c:	4889      	ldr	r0, [pc, #548]	; (8005544 <loadMenuTexts+0x9b0>)
 800531e:	f7fb f9ab 	bl	8000678 <copyText>
 8005322:	4603      	mov	r3, r0
 8005324:	4a88      	ldr	r2, [pc, #544]	; (8005548 <loadMenuTexts+0x9b4>)
 8005326:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005328:	4888      	ldr	r0, [pc, #544]	; (800554c <loadMenuTexts+0x9b8>)
 800532a:	f7fb f9a5 	bl	8000678 <copyText>
 800532e:	4603      	mov	r3, r0
 8005330:	4a87      	ldr	r2, [pc, #540]	; (8005550 <loadMenuTexts+0x9bc>)
 8005332:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005334:	4887      	ldr	r0, [pc, #540]	; (8005554 <loadMenuTexts+0x9c0>)
 8005336:	f7fb f99f 	bl	8000678 <copyText>
 800533a:	4603      	mov	r3, r0
 800533c:	4a86      	ldr	r2, [pc, #536]	; (8005558 <loadMenuTexts+0x9c4>)
 800533e:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005340:	4886      	ldr	r0, [pc, #536]	; (800555c <loadMenuTexts+0x9c8>)
 8005342:	f7fb f999 	bl	8000678 <copyText>
 8005346:	4603      	mov	r3, r0
 8005348:	4a85      	ldr	r2, [pc, #532]	; (8005560 <loadMenuTexts+0x9cc>)
 800534a:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 800534c:	4885      	ldr	r0, [pc, #532]	; (8005564 <loadMenuTexts+0x9d0>)
 800534e:	f7fb f993 	bl	8000678 <copyText>
 8005352:	4603      	mov	r3, r0
 8005354:	4a84      	ldr	r2, [pc, #528]	; (8005568 <loadMenuTexts+0x9d4>)
 8005356:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005358:	4884      	ldr	r0, [pc, #528]	; (800556c <loadMenuTexts+0x9d8>)
 800535a:	f7fb f98d 	bl	8000678 <copyText>
 800535e:	4603      	mov	r3, r0
 8005360:	4a83      	ldr	r2, [pc, #524]	; (8005570 <loadMenuTexts+0x9dc>)
 8005362:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005364:	4883      	ldr	r0, [pc, #524]	; (8005574 <loadMenuTexts+0x9e0>)
 8005366:	f7fb f987 	bl	8000678 <copyText>
 800536a:	4603      	mov	r3, r0
 800536c:	4a82      	ldr	r2, [pc, #520]	; (8005578 <loadMenuTexts+0x9e4>)
 800536e:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005370:	4882      	ldr	r0, [pc, #520]	; (800557c <loadMenuTexts+0x9e8>)
 8005372:	f7fb f981 	bl	8000678 <copyText>
 8005376:	4603      	mov	r3, r0
 8005378:	4a81      	ldr	r2, [pc, #516]	; (8005580 <loadMenuTexts+0x9ec>)
 800537a:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 800537c:	4881      	ldr	r0, [pc, #516]	; (8005584 <loadMenuTexts+0x9f0>)
 800537e:	f7fb f97b 	bl	8000678 <copyText>
 8005382:	4603      	mov	r3, r0
 8005384:	4a80      	ldr	r2, [pc, #512]	; (8005588 <loadMenuTexts+0x9f4>)
 8005386:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005388:	4880      	ldr	r0, [pc, #512]	; (800558c <loadMenuTexts+0x9f8>)
 800538a:	f7fb f975 	bl	8000678 <copyText>
 800538e:	4603      	mov	r3, r0
 8005390:	4a7f      	ldr	r2, [pc, #508]	; (8005590 <loadMenuTexts+0x9fc>)
 8005392:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005394:	487f      	ldr	r0, [pc, #508]	; (8005594 <loadMenuTexts+0xa00>)
 8005396:	f7fb f96f 	bl	8000678 <copyText>
 800539a:	4603      	mov	r3, r0
 800539c:	4a7e      	ldr	r2, [pc, #504]	; (8005598 <loadMenuTexts+0xa04>)
 800539e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80053a0:	487e      	ldr	r0, [pc, #504]	; (800559c <loadMenuTexts+0xa08>)
 80053a2:	f7fb f969 	bl	8000678 <copyText>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4a7d      	ldr	r2, [pc, #500]	; (80055a0 <loadMenuTexts+0xa0c>)
 80053aa:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80053ac:	487d      	ldr	r0, [pc, #500]	; (80055a4 <loadMenuTexts+0xa10>)
 80053ae:	f7fb f963 	bl	8000678 <copyText>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4a7c      	ldr	r2, [pc, #496]	; (80055a8 <loadMenuTexts+0xa14>)
 80053b6:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80053b8:	487c      	ldr	r0, [pc, #496]	; (80055ac <loadMenuTexts+0xa18>)
 80053ba:	f7fb f95d 	bl	8000678 <copyText>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a7b      	ldr	r2, [pc, #492]	; (80055b0 <loadMenuTexts+0xa1c>)
 80053c2:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80053c4:	487b      	ldr	r0, [pc, #492]	; (80055b4 <loadMenuTexts+0xa20>)
 80053c6:	f7fb f957 	bl	8000678 <copyText>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4a7a      	ldr	r2, [pc, #488]	; (80055b8 <loadMenuTexts+0xa24>)
 80053ce:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80053d0:	487a      	ldr	r0, [pc, #488]	; (80055bc <loadMenuTexts+0xa28>)
 80053d2:	f7fb f951 	bl	8000678 <copyText>
 80053d6:	4603      	mov	r3, r0
 80053d8:	4a79      	ldr	r2, [pc, #484]	; (80055c0 <loadMenuTexts+0xa2c>)
 80053da:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80053dc:	4879      	ldr	r0, [pc, #484]	; (80055c4 <loadMenuTexts+0xa30>)
 80053de:	f7fb f94b 	bl	8000678 <copyText>
 80053e2:	4603      	mov	r3, r0
 80053e4:	4a78      	ldr	r2, [pc, #480]	; (80055c8 <loadMenuTexts+0xa34>)
 80053e6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80053e8:	4878      	ldr	r0, [pc, #480]	; (80055cc <loadMenuTexts+0xa38>)
 80053ea:	f7fb f945 	bl	8000678 <copyText>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a77      	ldr	r2, [pc, #476]	; (80055d0 <loadMenuTexts+0xa3c>)
 80053f2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80053f4:	4877      	ldr	r0, [pc, #476]	; (80055d4 <loadMenuTexts+0xa40>)
 80053f6:	f7fb f93f 	bl	8000678 <copyText>
 80053fa:	4603      	mov	r3, r0
 80053fc:	4a76      	ldr	r2, [pc, #472]	; (80055d8 <loadMenuTexts+0xa44>)
 80053fe:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005400:	4876      	ldr	r0, [pc, #472]	; (80055dc <loadMenuTexts+0xa48>)
 8005402:	f7fb f939 	bl	8000678 <copyText>
 8005406:	4603      	mov	r3, r0
 8005408:	4a75      	ldr	r2, [pc, #468]	; (80055e0 <loadMenuTexts+0xa4c>)
 800540a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 800540c:	4875      	ldr	r0, [pc, #468]	; (80055e4 <loadMenuTexts+0xa50>)
 800540e:	f7fb f933 	bl	8000678 <copyText>
 8005412:	4603      	mov	r3, r0
 8005414:	4a74      	ldr	r2, [pc, #464]	; (80055e8 <loadMenuTexts+0xa54>)
 8005416:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005418:	4874      	ldr	r0, [pc, #464]	; (80055ec <loadMenuTexts+0xa58>)
 800541a:	f7fb f92d 	bl	8000678 <copyText>
 800541e:	4603      	mov	r3, r0
 8005420:	4a73      	ldr	r2, [pc, #460]	; (80055f0 <loadMenuTexts+0xa5c>)
 8005422:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005424:	4873      	ldr	r0, [pc, #460]	; (80055f4 <loadMenuTexts+0xa60>)
 8005426:	f7fb f927 	bl	8000678 <copyText>
 800542a:	4603      	mov	r3, r0
 800542c:	4a72      	ldr	r2, [pc, #456]	; (80055f8 <loadMenuTexts+0xa64>)
 800542e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005430:	4872      	ldr	r0, [pc, #456]	; (80055fc <loadMenuTexts+0xa68>)
 8005432:	f7fb f921 	bl	8000678 <copyText>
 8005436:	4603      	mov	r3, r0
 8005438:	4a71      	ldr	r2, [pc, #452]	; (8005600 <loadMenuTexts+0xa6c>)
 800543a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 800543c:	4871      	ldr	r0, [pc, #452]	; (8005604 <loadMenuTexts+0xa70>)
 800543e:	f7fb f91b 	bl	8000678 <copyText>
 8005442:	e0e1      	b.n	8005608 <loadMenuTexts+0xa74>
 8005444:	200004c0 	.word	0x200004c0
 8005448:	20000c7c 	.word	0x20000c7c
 800544c:	200004d0 	.word	0x200004d0
 8005450:	20000c80 	.word	0x20000c80
 8005454:	200004e0 	.word	0x200004e0
 8005458:	20000c84 	.word	0x20000c84
 800545c:	200004f0 	.word	0x200004f0
 8005460:	20000c88 	.word	0x20000c88
 8005464:	20000500 	.word	0x20000500
 8005468:	20000c8c 	.word	0x20000c8c
 800546c:	20000510 	.word	0x20000510
 8005470:	20000c90 	.word	0x20000c90
 8005474:	20000520 	.word	0x20000520
 8005478:	20000c94 	.word	0x20000c94
 800547c:	20000530 	.word	0x20000530
 8005480:	20000c98 	.word	0x20000c98
 8005484:	20000540 	.word	0x20000540
 8005488:	20000c9c 	.word	0x20000c9c
 800548c:	20000550 	.word	0x20000550
 8005490:	20000ca0 	.word	0x20000ca0
 8005494:	20000560 	.word	0x20000560
 8005498:	20000ca4 	.word	0x20000ca4
 800549c:	20000570 	.word	0x20000570
 80054a0:	20000ca8 	.word	0x20000ca8
 80054a4:	20000580 	.word	0x20000580
 80054a8:	20000cac 	.word	0x20000cac
 80054ac:	20000590 	.word	0x20000590
 80054b0:	20000cb0 	.word	0x20000cb0
 80054b4:	200005a0 	.word	0x200005a0
 80054b8:	20000cb4 	.word	0x20000cb4
 80054bc:	200005b0 	.word	0x200005b0
 80054c0:	20000cb8 	.word	0x20000cb8
 80054c4:	200005c0 	.word	0x200005c0
 80054c8:	20000cbc 	.word	0x20000cbc
 80054cc:	200005d0 	.word	0x200005d0
 80054d0:	20000cc0 	.word	0x20000cc0
 80054d4:	200005e0 	.word	0x200005e0
 80054d8:	20000cc4 	.word	0x20000cc4
 80054dc:	200005f0 	.word	0x200005f0
 80054e0:	20000cc8 	.word	0x20000cc8
 80054e4:	20000600 	.word	0x20000600
 80054e8:	20000ccc 	.word	0x20000ccc
 80054ec:	20000610 	.word	0x20000610
 80054f0:	20000cd4 	.word	0x20000cd4
 80054f4:	20000620 	.word	0x20000620
 80054f8:	20000cd8 	.word	0x20000cd8
 80054fc:	20000630 	.word	0x20000630
 8005500:	20000cdc 	.word	0x20000cdc
 8005504:	20000640 	.word	0x20000640
 8005508:	20000ce0 	.word	0x20000ce0
 800550c:	20000650 	.word	0x20000650
 8005510:	20000ce4 	.word	0x20000ce4
 8005514:	20000660 	.word	0x20000660
 8005518:	20000ce8 	.word	0x20000ce8
 800551c:	20000670 	.word	0x20000670
 8005520:	20000cec 	.word	0x20000cec
 8005524:	20000680 	.word	0x20000680
 8005528:	20000cf0 	.word	0x20000cf0
 800552c:	20000690 	.word	0x20000690
 8005530:	20000cf4 	.word	0x20000cf4
 8005534:	200006a0 	.word	0x200006a0
 8005538:	20000cf8 	.word	0x20000cf8
 800553c:	200006b0 	.word	0x200006b0
 8005540:	20000cfc 	.word	0x20000cfc
 8005544:	200006c0 	.word	0x200006c0
 8005548:	20000d04 	.word	0x20000d04
 800554c:	200006d0 	.word	0x200006d0
 8005550:	20000d0c 	.word	0x20000d0c
 8005554:	200006e0 	.word	0x200006e0
 8005558:	20000d10 	.word	0x20000d10
 800555c:	200006f0 	.word	0x200006f0
 8005560:	20000d14 	.word	0x20000d14
 8005564:	20000700 	.word	0x20000700
 8005568:	20000d18 	.word	0x20000d18
 800556c:	20000710 	.word	0x20000710
 8005570:	20000d1c 	.word	0x20000d1c
 8005574:	20000720 	.word	0x20000720
 8005578:	20000d20 	.word	0x20000d20
 800557c:	20000730 	.word	0x20000730
 8005580:	20000d24 	.word	0x20000d24
 8005584:	20000740 	.word	0x20000740
 8005588:	20000d28 	.word	0x20000d28
 800558c:	20000750 	.word	0x20000750
 8005590:	20000d2c 	.word	0x20000d2c
 8005594:	20000760 	.word	0x20000760
 8005598:	20000d30 	.word	0x20000d30
 800559c:	20000770 	.word	0x20000770
 80055a0:	20000d34 	.word	0x20000d34
 80055a4:	20000780 	.word	0x20000780
 80055a8:	20000d38 	.word	0x20000d38
 80055ac:	20000790 	.word	0x20000790
 80055b0:	20000d3c 	.word	0x20000d3c
 80055b4:	200007a0 	.word	0x200007a0
 80055b8:	20000d40 	.word	0x20000d40
 80055bc:	200007b0 	.word	0x200007b0
 80055c0:	20000d44 	.word	0x20000d44
 80055c4:	200007c0 	.word	0x200007c0
 80055c8:	20000d48 	.word	0x20000d48
 80055cc:	200007d0 	.word	0x200007d0
 80055d0:	20000d4c 	.word	0x20000d4c
 80055d4:	200007e0 	.word	0x200007e0
 80055d8:	20000d50 	.word	0x20000d50
 80055dc:	200007f0 	.word	0x200007f0
 80055e0:	20000d54 	.word	0x20000d54
 80055e4:	20000800 	.word	0x20000800
 80055e8:	20000d58 	.word	0x20000d58
 80055ec:	20000810 	.word	0x20000810
 80055f0:	20000d5c 	.word	0x20000d5c
 80055f4:	20000820 	.word	0x20000820
 80055f8:	20000d60 	.word	0x20000d60
 80055fc:	20000830 	.word	0x20000830
 8005600:	20000d64 	.word	0x20000d64
 8005604:	20000840 	.word	0x20000840
 8005608:	4603      	mov	r3, r0
 800560a:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <loadMenuTexts+0xb14>)
 800560c:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800560e:	4827      	ldr	r0, [pc, #156]	; (80056ac <loadMenuTexts+0xb18>)
 8005610:	f7fb f832 	bl	8000678 <copyText>
 8005614:	4603      	mov	r3, r0
 8005616:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <loadMenuTexts+0xb1c>)
 8005618:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800561a:	4826      	ldr	r0, [pc, #152]	; (80056b4 <loadMenuTexts+0xb20>)
 800561c:	f7fb f82c 	bl	8000678 <copyText>
 8005620:	4603      	mov	r3, r0
 8005622:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <loadMenuTexts+0xb24>)
 8005624:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8005626:	4825      	ldr	r0, [pc, #148]	; (80056bc <loadMenuTexts+0xb28>)
 8005628:	f7fb f826 	bl	8000678 <copyText>
 800562c:	4603      	mov	r3, r0
 800562e:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <loadMenuTexts+0xb2c>)
 8005630:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005632:	4824      	ldr	r0, [pc, #144]	; (80056c4 <loadMenuTexts+0xb30>)
 8005634:	f7fb f820 	bl	8000678 <copyText>
 8005638:	4603      	mov	r3, r0
 800563a:	4a23      	ldr	r2, [pc, #140]	; (80056c8 <loadMenuTexts+0xb34>)
 800563c:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800563e:	4823      	ldr	r0, [pc, #140]	; (80056cc <loadMenuTexts+0xb38>)
 8005640:	f7fb f81a 	bl	8000678 <copyText>
 8005644:	4603      	mov	r3, r0
 8005646:	4a22      	ldr	r2, [pc, #136]	; (80056d0 <loadMenuTexts+0xb3c>)
 8005648:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800564a:	4822      	ldr	r0, [pc, #136]	; (80056d4 <loadMenuTexts+0xb40>)
 800564c:	f7fb f814 	bl	8000678 <copyText>
 8005650:	4603      	mov	r3, r0
 8005652:	4a21      	ldr	r2, [pc, #132]	; (80056d8 <loadMenuTexts+0xb44>)
 8005654:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005656:	4821      	ldr	r0, [pc, #132]	; (80056dc <loadMenuTexts+0xb48>)
 8005658:	f7fb f80e 	bl	8000678 <copyText>
 800565c:	4603      	mov	r3, r0
 800565e:	4a20      	ldr	r2, [pc, #128]	; (80056e0 <loadMenuTexts+0xb4c>)
 8005660:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005662:	4820      	ldr	r0, [pc, #128]	; (80056e4 <loadMenuTexts+0xb50>)
 8005664:	f7fb f808 	bl	8000678 <copyText>
 8005668:	4603      	mov	r3, r0
 800566a:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <loadMenuTexts+0xb54>)
 800566c:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 800566e:	481f      	ldr	r0, [pc, #124]	; (80056ec <loadMenuTexts+0xb58>)
 8005670:	f7fb f802 	bl	8000678 <copyText>
 8005674:	4603      	mov	r3, r0
 8005676:	4a1e      	ldr	r2, [pc, #120]	; (80056f0 <loadMenuTexts+0xb5c>)
 8005678:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800567a:	481e      	ldr	r0, [pc, #120]	; (80056f4 <loadMenuTexts+0xb60>)
 800567c:	f7fa fffc 	bl	8000678 <copyText>
 8005680:	4603      	mov	r3, r0
 8005682:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <loadMenuTexts+0xb64>)
 8005684:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005686:	481d      	ldr	r0, [pc, #116]	; (80056fc <loadMenuTexts+0xb68>)
 8005688:	f7fa fff6 	bl	8000678 <copyText>
 800568c:	4603      	mov	r3, r0
 800568e:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <loadMenuTexts+0xb6c>)
 8005690:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005692:	481c      	ldr	r0, [pc, #112]	; (8005704 <loadMenuTexts+0xb70>)
 8005694:	f7fa fff0 	bl	8000678 <copyText>
 8005698:	4603      	mov	r3, r0
 800569a:	4a1b      	ldr	r2, [pc, #108]	; (8005708 <loadMenuTexts+0xb74>)
 800569c:	6013      	str	r3, [r2, #0]
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000d68 	.word	0x20000d68
 80056ac:	20000850 	.word	0x20000850
 80056b0:	20000d6c 	.word	0x20000d6c
 80056b4:	20000860 	.word	0x20000860
 80056b8:	20000d70 	.word	0x20000d70
 80056bc:	20000870 	.word	0x20000870
 80056c0:	20000d74 	.word	0x20000d74
 80056c4:	20000880 	.word	0x20000880
 80056c8:	20000d78 	.word	0x20000d78
 80056cc:	20000890 	.word	0x20000890
 80056d0:	20000d7c 	.word	0x20000d7c
 80056d4:	200008a0 	.word	0x200008a0
 80056d8:	20000d88 	.word	0x20000d88
 80056dc:	200008b0 	.word	0x200008b0
 80056e0:	20000d8c 	.word	0x20000d8c
 80056e4:	200008c0 	.word	0x200008c0
 80056e8:	20000d90 	.word	0x20000d90
 80056ec:	200008d0 	.word	0x200008d0
 80056f0:	20000d94 	.word	0x20000d94
 80056f4:	200008e0 	.word	0x200008e0
 80056f8:	20000d98 	.word	0x20000d98
 80056fc:	200008f0 	.word	0x200008f0
 8005700:	20000d9c 	.word	0x20000d9c
 8005704:	20000900 	.word	0x20000900
 8005708:	20000da0 	.word	0x20000da0

0800570c <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800571c:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <lcdUpdate+0x9c>)
 800571e:	2101      	movs	r1, #1
 8005720:	2002      	movs	r0, #2
 8005722:	f7fa ff1f 	bl	8000564 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005726:	e03b      	b.n	80057a0 <lcdUpdate+0x94>
	} else if(y==2) {
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d105      	bne.n	800573a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800572e:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <lcdUpdate+0x9c>)
 8005730:	2102      	movs	r1, #2
 8005732:	2002      	movs	r0, #2
 8005734:	f7fa ff16 	bl	8000564 <lcd_print>
}
 8005738:	e032      	b.n	80057a0 <lcdUpdate+0x94>
	} else if(y==3) {
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d105      	bne.n	800574c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005740:	4a19      	ldr	r2, [pc, #100]	; (80057a8 <lcdUpdate+0x9c>)
 8005742:	2103      	movs	r1, #3
 8005744:	2002      	movs	r0, #2
 8005746:	f7fa ff0d 	bl	8000564 <lcd_print>
}
 800574a:	e029      	b.n	80057a0 <lcdUpdate+0x94>
	} else if(y==4) {
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d105      	bne.n	800575e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <lcdUpdate+0x9c>)
 8005754:	2104      	movs	r1, #4
 8005756:	2002      	movs	r0, #2
 8005758:	f7fa ff04 	bl	8000564 <lcd_print>
}
 800575c:	e020      	b.n	80057a0 <lcdUpdate+0x94>
	} else if(y==5) {
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	2b05      	cmp	r3, #5
 8005762:	d105      	bne.n	8005770 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005764:	4a10      	ldr	r2, [pc, #64]	; (80057a8 <lcdUpdate+0x9c>)
 8005766:	2105      	movs	r1, #5
 8005768:	2002      	movs	r0, #2
 800576a:	f7fa fefb 	bl	8000564 <lcd_print>
}
 800576e:	e017      	b.n	80057a0 <lcdUpdate+0x94>
	} else if(y==6) {
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b06      	cmp	r3, #6
 8005774:	d105      	bne.n	8005782 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005776:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <lcdUpdate+0x9c>)
 8005778:	2106      	movs	r1, #6
 800577a:	2002      	movs	r0, #2
 800577c:	f7fa fef2 	bl	8000564 <lcd_print>
}
 8005780:	e00e      	b.n	80057a0 <lcdUpdate+0x94>
	} else if (y==7) {
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	2b07      	cmp	r3, #7
 8005786:	d10b      	bne.n	80057a0 <lcdUpdate+0x94>
		lcd_clear();
 8005788:	f7fa ff18 	bl	80005bc <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 800578c:	4a07      	ldr	r2, [pc, #28]	; (80057ac <lcdUpdate+0xa0>)
 800578e:	2101      	movs	r1, #1
 8005790:	2001      	movs	r0, #1
 8005792:	f7fa fee7 	bl	8000564 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005796:	4a06      	ldr	r2, [pc, #24]	; (80057b0 <lcdUpdate+0xa4>)
 8005798:	2101      	movs	r1, #1
 800579a:	2002      	movs	r0, #2
 800579c:	f7fa fee2 	bl	8000564 <lcd_print>
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	0800ce18 	.word	0x0800ce18
 80057ac:	0800d74c 	.word	0x0800d74c
 80057b0:	0800d760 	.word	0x0800d760

080057b4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d11d      	bne.n	8005800 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80057c4:	4b62      	ldr	r3, [pc, #392]	; (8005950 <hataKoduLcdGoster+0x19c>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d105      	bne.n	80057d8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80057cc:	4a61      	ldr	r2, [pc, #388]	; (8005954 <hataKoduLcdGoster+0x1a0>)
 80057ce:	2101      	movs	r1, #1
 80057d0:	2001      	movs	r0, #1
 80057d2:	f7fa fec7 	bl	8000564 <lcd_print>
 80057d6:	e008      	b.n	80057ea <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80057d8:	4b5d      	ldr	r3, [pc, #372]	; (8005950 <hataKoduLcdGoster+0x19c>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d104      	bne.n	80057ea <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057e0:	4a5d      	ldr	r2, [pc, #372]	; (8005958 <hataKoduLcdGoster+0x1a4>)
 80057e2:	2101      	movs	r1, #1
 80057e4:	2001      	movs	r0, #1
 80057e6:	f7fa febd 	bl	8000564 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80057ea:	4a5c      	ldr	r2, [pc, #368]	; (800595c <hataKoduLcdGoster+0x1a8>)
 80057ec:	2101      	movs	r1, #1
 80057ee:	2002      	movs	r0, #2
 80057f0:	f7fa feb8 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80057f4:	4a5a      	ldr	r2, [pc, #360]	; (8005960 <hataKoduLcdGoster+0x1ac>)
 80057f6:	2107      	movs	r1, #7
 80057f8:	2002      	movs	r0, #2
 80057fa:	f7fa feb3 	bl	8000564 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80057fe:	e0a3      	b.n	8005948 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d11d      	bne.n	8005842 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005806:	4b52      	ldr	r3, [pc, #328]	; (8005950 <hataKoduLcdGoster+0x19c>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d105      	bne.n	800581a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 800580e:	4a51      	ldr	r2, [pc, #324]	; (8005954 <hataKoduLcdGoster+0x1a0>)
 8005810:	2101      	movs	r1, #1
 8005812:	2001      	movs	r0, #1
 8005814:	f7fa fea6 	bl	8000564 <lcd_print>
 8005818:	e008      	b.n	800582c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800581a:	4b4d      	ldr	r3, [pc, #308]	; (8005950 <hataKoduLcdGoster+0x19c>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d104      	bne.n	800582c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005822:	4a4d      	ldr	r2, [pc, #308]	; (8005958 <hataKoduLcdGoster+0x1a4>)
 8005824:	2101      	movs	r1, #1
 8005826:	2001      	movs	r0, #1
 8005828:	f7fa fe9c 	bl	8000564 <lcd_print>
		lcd_print(2, 2, "2");
 800582c:	4a4d      	ldr	r2, [pc, #308]	; (8005964 <hataKoduLcdGoster+0x1b0>)
 800582e:	2102      	movs	r1, #2
 8005830:	2002      	movs	r0, #2
 8005832:	f7fa fe97 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8005836:	4a4a      	ldr	r2, [pc, #296]	; (8005960 <hataKoduLcdGoster+0x1ac>)
 8005838:	2107      	movs	r1, #7
 800583a:	2002      	movs	r0, #2
 800583c:	f7fa fe92 	bl	8000564 <lcd_print>
}
 8005840:	e082      	b.n	8005948 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d11d      	bne.n	8005884 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005848:	4b41      	ldr	r3, [pc, #260]	; (8005950 <hataKoduLcdGoster+0x19c>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005850:	4a40      	ldr	r2, [pc, #256]	; (8005954 <hataKoduLcdGoster+0x1a0>)
 8005852:	2101      	movs	r1, #1
 8005854:	2001      	movs	r0, #1
 8005856:	f7fa fe85 	bl	8000564 <lcd_print>
 800585a:	e008      	b.n	800586e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 800585c:	4b3c      	ldr	r3, [pc, #240]	; (8005950 <hataKoduLcdGoster+0x19c>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d104      	bne.n	800586e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005864:	4a3c      	ldr	r2, [pc, #240]	; (8005958 <hataKoduLcdGoster+0x1a4>)
 8005866:	2101      	movs	r1, #1
 8005868:	2001      	movs	r0, #1
 800586a:	f7fa fe7b 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "3");
 800586e:	4a3e      	ldr	r2, [pc, #248]	; (8005968 <hataKoduLcdGoster+0x1b4>)
 8005870:	2103      	movs	r1, #3
 8005872:	2002      	movs	r0, #2
 8005874:	f7fa fe76 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8005878:	4a39      	ldr	r2, [pc, #228]	; (8005960 <hataKoduLcdGoster+0x1ac>)
 800587a:	2107      	movs	r1, #7
 800587c:	2002      	movs	r0, #2
 800587e:	f7fa fe71 	bl	8000564 <lcd_print>
}
 8005882:	e061      	b.n	8005948 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d11d      	bne.n	80058c6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800588a:	4b31      	ldr	r3, [pc, #196]	; (8005950 <hataKoduLcdGoster+0x19c>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d105      	bne.n	800589e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005892:	4a30      	ldr	r2, [pc, #192]	; (8005954 <hataKoduLcdGoster+0x1a0>)
 8005894:	2101      	movs	r1, #1
 8005896:	2001      	movs	r0, #1
 8005898:	f7fa fe64 	bl	8000564 <lcd_print>
 800589c:	e008      	b.n	80058b0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800589e:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <hataKoduLcdGoster+0x19c>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d104      	bne.n	80058b0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058a6:	4a2c      	ldr	r2, [pc, #176]	; (8005958 <hataKoduLcdGoster+0x1a4>)
 80058a8:	2101      	movs	r1, #1
 80058aa:	2001      	movs	r0, #1
 80058ac:	f7fa fe5a 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "4");
 80058b0:	4a2e      	ldr	r2, [pc, #184]	; (800596c <hataKoduLcdGoster+0x1b8>)
 80058b2:	2104      	movs	r1, #4
 80058b4:	2002      	movs	r0, #2
 80058b6:	f7fa fe55 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80058ba:	4a29      	ldr	r2, [pc, #164]	; (8005960 <hataKoduLcdGoster+0x1ac>)
 80058bc:	2107      	movs	r1, #7
 80058be:	2002      	movs	r0, #2
 80058c0:	f7fa fe50 	bl	8000564 <lcd_print>
}
 80058c4:	e040      	b.n	8005948 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d11d      	bne.n	8005908 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80058cc:	4b20      	ldr	r3, [pc, #128]	; (8005950 <hataKoduLcdGoster+0x19c>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <hataKoduLcdGoster+0x1a0>)
 80058d6:	2101      	movs	r1, #1
 80058d8:	2001      	movs	r0, #1
 80058da:	f7fa fe43 	bl	8000564 <lcd_print>
 80058de:	e008      	b.n	80058f2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80058e0:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <hataKoduLcdGoster+0x19c>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d104      	bne.n	80058f2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058e8:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <hataKoduLcdGoster+0x1a4>)
 80058ea:	2101      	movs	r1, #1
 80058ec:	2001      	movs	r0, #1
 80058ee:	f7fa fe39 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "5");
 80058f2:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <hataKoduLcdGoster+0x1bc>)
 80058f4:	2105      	movs	r1, #5
 80058f6:	2002      	movs	r0, #2
 80058f8:	f7fa fe34 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <hataKoduLcdGoster+0x1ac>)
 80058fe:	2107      	movs	r1, #7
 8005900:	2002      	movs	r0, #2
 8005902:	f7fa fe2f 	bl	8000564 <lcd_print>
}
 8005906:	e01f      	b.n	8005948 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	2b06      	cmp	r3, #6
 800590c:	d11c      	bne.n	8005948 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <hataKoduLcdGoster+0x19c>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d105      	bne.n	8005922 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005916:	4a0f      	ldr	r2, [pc, #60]	; (8005954 <hataKoduLcdGoster+0x1a0>)
 8005918:	2101      	movs	r1, #1
 800591a:	2001      	movs	r0, #1
 800591c:	f7fa fe22 	bl	8000564 <lcd_print>
 8005920:	e008      	b.n	8005934 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <hataKoduLcdGoster+0x19c>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d104      	bne.n	8005934 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 800592a:	4a0b      	ldr	r2, [pc, #44]	; (8005958 <hataKoduLcdGoster+0x1a4>)
 800592c:	2101      	movs	r1, #1
 800592e:	2001      	movs	r0, #1
 8005930:	f7fa fe18 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "6");
 8005934:	4a0f      	ldr	r2, [pc, #60]	; (8005974 <hataKoduLcdGoster+0x1c0>)
 8005936:	2106      	movs	r1, #6
 8005938:	2002      	movs	r0, #2
 800593a:	f7fa fe13 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 800593e:	4a08      	ldr	r2, [pc, #32]	; (8005960 <hataKoduLcdGoster+0x1ac>)
 8005940:	2107      	movs	r1, #7
 8005942:	2002      	movs	r0, #2
 8005944:	f7fa fe0e 	bl	8000564 <lcd_print>
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000c31 	.word	0x20000c31
 8005954:	0800d774 	.word	0x0800d774
 8005958:	0800d788 	.word	0x0800d788
 800595c:	0800cb5c 	.word	0x0800cb5c
 8005960:	0800d79c 	.word	0x0800d79c
 8005964:	0800cb60 	.word	0x0800cb60
 8005968:	0800cb64 	.word	0x0800cb64
 800596c:	0800cb68 	.word	0x0800cb68
 8005970:	0800cb6c 	.word	0x0800cb6c
 8005974:	0800cb70 	.word	0x0800cb70

08005978 <eepromKontrol>:
	HAL_Delay(500);
	lcd_clear();
	HAL_Delay(500);
}

void eepromKontrol(int type) {
 8005978:	b5b0      	push	{r4, r5, r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af04      	add	r7, sp, #16
 800597e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005980:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005984:	9302      	str	r3, [sp, #8]
 8005986:	236e      	movs	r3, #110	; 0x6e
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	4b9c      	ldr	r3, [pc, #624]	; (8005bfc <eepromKontrol+0x284>)
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	236e      	movs	r3, #110	; 0x6e
 8005990:	2200      	movs	r2, #0
 8005992:	21a0      	movs	r1, #160	; 0xa0
 8005994:	489a      	ldr	r0, [pc, #616]	; (8005c00 <eepromKontrol+0x288>)
 8005996:	f004 fb3b 	bl	800a010 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 800599a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800599e:	f003 f9b3 	bl	8008d08 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80059a2:	4b96      	ldr	r3, [pc, #600]	; (8005bfc <eepromKontrol+0x284>)
 80059a4:	78da      	ldrb	r2, [r3, #3]
 80059a6:	4b97      	ldr	r3, [pc, #604]	; (8005c04 <eepromKontrol+0x28c>)
 80059a8:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80059aa:	4b94      	ldr	r3, [pc, #592]	; (8005bfc <eepromKontrol+0x284>)
 80059ac:	785a      	ldrb	r2, [r3, #1]
 80059ae:	4b96      	ldr	r3, [pc, #600]	; (8005c08 <eepromKontrol+0x290>)
 80059b0:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80059b2:	4b92      	ldr	r3, [pc, #584]	; (8005bfc <eepromKontrol+0x284>)
 80059b4:	789a      	ldrb	r2, [r3, #2]
 80059b6:	4b95      	ldr	r3, [pc, #596]	; (8005c0c <eepromKontrol+0x294>)
 80059b8:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80059ba:	4b90      	ldr	r3, [pc, #576]	; (8005bfc <eepromKontrol+0x284>)
 80059bc:	791a      	ldrb	r2, [r3, #4]
 80059be:	4b94      	ldr	r3, [pc, #592]	; (8005c10 <eepromKontrol+0x298>)
 80059c0:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80059c2:	4b8e      	ldr	r3, [pc, #568]	; (8005bfc <eepromKontrol+0x284>)
 80059c4:	795a      	ldrb	r2, [r3, #5]
 80059c6:	4b93      	ldr	r3, [pc, #588]	; (8005c14 <eepromKontrol+0x29c>)
 80059c8:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 80059ca:	4b8c      	ldr	r3, [pc, #560]	; (8005bfc <eepromKontrol+0x284>)
 80059cc:	799a      	ldrb	r2, [r3, #6]
 80059ce:	4b92      	ldr	r3, [pc, #584]	; (8005c18 <eepromKontrol+0x2a0>)
 80059d0:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80059d2:	4b8a      	ldr	r3, [pc, #552]	; (8005bfc <eepromKontrol+0x284>)
 80059d4:	79da      	ldrb	r2, [r3, #7]
 80059d6:	4b91      	ldr	r3, [pc, #580]	; (8005c1c <eepromKontrol+0x2a4>)
 80059d8:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80059da:	4b88      	ldr	r3, [pc, #544]	; (8005bfc <eepromKontrol+0x284>)
 80059dc:	7a1a      	ldrb	r2, [r3, #8]
 80059de:	4b90      	ldr	r3, [pc, #576]	; (8005c20 <eepromKontrol+0x2a8>)
 80059e0:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80059e2:	4b86      	ldr	r3, [pc, #536]	; (8005bfc <eepromKontrol+0x284>)
 80059e4:	7a5a      	ldrb	r2, [r3, #9]
 80059e6:	4b8f      	ldr	r3, [pc, #572]	; (8005c24 <eepromKontrol+0x2ac>)
 80059e8:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80059ea:	4b84      	ldr	r3, [pc, #528]	; (8005bfc <eepromKontrol+0x284>)
 80059ec:	7a9a      	ldrb	r2, [r3, #10]
 80059ee:	4b8e      	ldr	r3, [pc, #568]	; (8005c28 <eepromKontrol+0x2b0>)
 80059f0:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80059f2:	4b82      	ldr	r3, [pc, #520]	; (8005bfc <eepromKontrol+0x284>)
 80059f4:	7ada      	ldrb	r2, [r3, #11]
 80059f6:	4b8d      	ldr	r3, [pc, #564]	; (8005c2c <eepromKontrol+0x2b4>)
 80059f8:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80059fa:	4b80      	ldr	r3, [pc, #512]	; (8005bfc <eepromKontrol+0x284>)
 80059fc:	7b1a      	ldrb	r2, [r3, #12]
 80059fe:	4b8c      	ldr	r3, [pc, #560]	; (8005c30 <eepromKontrol+0x2b8>)
 8005a00:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005a02:	4b7e      	ldr	r3, [pc, #504]	; (8005bfc <eepromKontrol+0x284>)
 8005a04:	7b5a      	ldrb	r2, [r3, #13]
 8005a06:	4b8b      	ldr	r3, [pc, #556]	; (8005c34 <eepromKontrol+0x2bc>)
 8005a08:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005a0a:	4b7c      	ldr	r3, [pc, #496]	; (8005bfc <eepromKontrol+0x284>)
 8005a0c:	7b9a      	ldrb	r2, [r3, #14]
 8005a0e:	4b8a      	ldr	r3, [pc, #552]	; (8005c38 <eepromKontrol+0x2c0>)
 8005a10:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005a12:	4b7a      	ldr	r3, [pc, #488]	; (8005bfc <eepromKontrol+0x284>)
 8005a14:	7bda      	ldrb	r2, [r3, #15]
 8005a16:	4b89      	ldr	r3, [pc, #548]	; (8005c3c <eepromKontrol+0x2c4>)
 8005a18:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005a1a:	4b78      	ldr	r3, [pc, #480]	; (8005bfc <eepromKontrol+0x284>)
 8005a1c:	7c1a      	ldrb	r2, [r3, #16]
 8005a1e:	4b88      	ldr	r3, [pc, #544]	; (8005c40 <eepromKontrol+0x2c8>)
 8005a20:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005a22:	4b76      	ldr	r3, [pc, #472]	; (8005bfc <eepromKontrol+0x284>)
 8005a24:	7c5a      	ldrb	r2, [r3, #17]
 8005a26:	4b87      	ldr	r3, [pc, #540]	; (8005c44 <eepromKontrol+0x2cc>)
 8005a28:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005a2a:	4b74      	ldr	r3, [pc, #464]	; (8005bfc <eepromKontrol+0x284>)
 8005a2c:	7c9a      	ldrb	r2, [r3, #18]
 8005a2e:	4b86      	ldr	r3, [pc, #536]	; (8005c48 <eepromKontrol+0x2d0>)
 8005a30:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005a32:	4b72      	ldr	r3, [pc, #456]	; (8005bfc <eepromKontrol+0x284>)
 8005a34:	7cda      	ldrb	r2, [r3, #19]
 8005a36:	4b85      	ldr	r3, [pc, #532]	; (8005c4c <eepromKontrol+0x2d4>)
 8005a38:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005a3a:	4b70      	ldr	r3, [pc, #448]	; (8005bfc <eepromKontrol+0x284>)
 8005a3c:	7d1a      	ldrb	r2, [r3, #20]
 8005a3e:	4b84      	ldr	r3, [pc, #528]	; (8005c50 <eepromKontrol+0x2d8>)
 8005a40:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005a42:	4b6e      	ldr	r3, [pc, #440]	; (8005bfc <eepromKontrol+0x284>)
 8005a44:	7d5a      	ldrb	r2, [r3, #21]
 8005a46:	4b83      	ldr	r3, [pc, #524]	; (8005c54 <eepromKontrol+0x2dc>)
 8005a48:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005a4a:	4b6c      	ldr	r3, [pc, #432]	; (8005bfc <eepromKontrol+0x284>)
 8005a4c:	7d9a      	ldrb	r2, [r3, #22]
 8005a4e:	4b82      	ldr	r3, [pc, #520]	; (8005c58 <eepromKontrol+0x2e0>)
 8005a50:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005a52:	4b6a      	ldr	r3, [pc, #424]	; (8005bfc <eepromKontrol+0x284>)
 8005a54:	7dda      	ldrb	r2, [r3, #23]
 8005a56:	4b81      	ldr	r3, [pc, #516]	; (8005c5c <eepromKontrol+0x2e4>)
 8005a58:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005a5a:	4b68      	ldr	r3, [pc, #416]	; (8005bfc <eepromKontrol+0x284>)
 8005a5c:	7e1a      	ldrb	r2, [r3, #24]
 8005a5e:	4b80      	ldr	r3, [pc, #512]	; (8005c60 <eepromKontrol+0x2e8>)
 8005a60:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005a62:	4b66      	ldr	r3, [pc, #408]	; (8005bfc <eepromKontrol+0x284>)
 8005a64:	7e5a      	ldrb	r2, [r3, #25]
 8005a66:	4b7f      	ldr	r3, [pc, #508]	; (8005c64 <eepromKontrol+0x2ec>)
 8005a68:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005a6a:	4b64      	ldr	r3, [pc, #400]	; (8005bfc <eepromKontrol+0x284>)
 8005a6c:	7e9a      	ldrb	r2, [r3, #26]
 8005a6e:	4b7e      	ldr	r3, [pc, #504]	; (8005c68 <eepromKontrol+0x2f0>)
 8005a70:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005a72:	4b62      	ldr	r3, [pc, #392]	; (8005bfc <eepromKontrol+0x284>)
 8005a74:	7eda      	ldrb	r2, [r3, #27]
 8005a76:	4b7d      	ldr	r3, [pc, #500]	; (8005c6c <eepromKontrol+0x2f4>)
 8005a78:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005a7a:	4b60      	ldr	r3, [pc, #384]	; (8005bfc <eepromKontrol+0x284>)
 8005a7c:	7f1a      	ldrb	r2, [r3, #28]
 8005a7e:	4b7c      	ldr	r3, [pc, #496]	; (8005c70 <eepromKontrol+0x2f8>)
 8005a80:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005a82:	4b5e      	ldr	r3, [pc, #376]	; (8005bfc <eepromKontrol+0x284>)
 8005a84:	7f5a      	ldrb	r2, [r3, #29]
 8005a86:	4b7b      	ldr	r3, [pc, #492]	; (8005c74 <eepromKontrol+0x2fc>)
 8005a88:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005a8a:	4b5c      	ldr	r3, [pc, #368]	; (8005bfc <eepromKontrol+0x284>)
 8005a8c:	7f9a      	ldrb	r2, [r3, #30]
 8005a8e:	4b7a      	ldr	r3, [pc, #488]	; (8005c78 <eepromKontrol+0x300>)
 8005a90:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005a92:	4b5a      	ldr	r3, [pc, #360]	; (8005bfc <eepromKontrol+0x284>)
 8005a94:	7fda      	ldrb	r2, [r3, #31]
 8005a96:	4b79      	ldr	r3, [pc, #484]	; (8005c7c <eepromKontrol+0x304>)
 8005a98:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005a9a:	4b58      	ldr	r3, [pc, #352]	; (8005bfc <eepromKontrol+0x284>)
 8005a9c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005aa0:	4b77      	ldr	r3, [pc, #476]	; (8005c80 <eepromKontrol+0x308>)
 8005aa2:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005aa4:	4b55      	ldr	r3, [pc, #340]	; (8005bfc <eepromKontrol+0x284>)
 8005aa6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005aaa:	4b76      	ldr	r3, [pc, #472]	; (8005c84 <eepromKontrol+0x30c>)
 8005aac:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005aae:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <eepromKontrol+0x284>)
 8005ab0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005ab4:	4b74      	ldr	r3, [pc, #464]	; (8005c88 <eepromKontrol+0x310>)
 8005ab6:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005ab8:	4b50      	ldr	r3, [pc, #320]	; (8005bfc <eepromKontrol+0x284>)
 8005aba:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005abe:	4b73      	ldr	r3, [pc, #460]	; (8005c8c <eepromKontrol+0x314>)
 8005ac0:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005ac2:	4b4e      	ldr	r3, [pc, #312]	; (8005bfc <eepromKontrol+0x284>)
 8005ac4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005ac8:	4b71      	ldr	r3, [pc, #452]	; (8005c90 <eepromKontrol+0x318>)
 8005aca:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005acc:	4b4b      	ldr	r3, [pc, #300]	; (8005bfc <eepromKontrol+0x284>)
 8005ace:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005ad2:	4b70      	ldr	r3, [pc, #448]	; (8005c94 <eepromKontrol+0x31c>)
 8005ad4:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005ad6:	4b49      	ldr	r3, [pc, #292]	; (8005bfc <eepromKontrol+0x284>)
 8005ad8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005adc:	4b6e      	ldr	r3, [pc, #440]	; (8005c98 <eepromKontrol+0x320>)
 8005ade:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005ae0:	4b46      	ldr	r3, [pc, #280]	; (8005bfc <eepromKontrol+0x284>)
 8005ae2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005ae6:	4b6d      	ldr	r3, [pc, #436]	; (8005c9c <eepromKontrol+0x324>)
 8005ae8:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005aea:	4b44      	ldr	r3, [pc, #272]	; (8005bfc <eepromKontrol+0x284>)
 8005aec:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005af0:	4b6b      	ldr	r3, [pc, #428]	; (8005ca0 <eepromKontrol+0x328>)
 8005af2:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005af4:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <eepromKontrol+0x284>)
 8005af6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005afa:	4b6a      	ldr	r3, [pc, #424]	; (8005ca4 <eepromKontrol+0x32c>)
 8005afc:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005afe:	4b3f      	ldr	r3, [pc, #252]	; (8005bfc <eepromKontrol+0x284>)
 8005b00:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005b04:	4b68      	ldr	r3, [pc, #416]	; (8005ca8 <eepromKontrol+0x330>)
 8005b06:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005b08:	4b3c      	ldr	r3, [pc, #240]	; (8005bfc <eepromKontrol+0x284>)
 8005b0a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005b0e:	4b67      	ldr	r3, [pc, #412]	; (8005cac <eepromKontrol+0x334>)
 8005b10:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005b12:	4b3a      	ldr	r3, [pc, #232]	; (8005bfc <eepromKontrol+0x284>)
 8005b14:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b18:	4b65      	ldr	r3, [pc, #404]	; (8005cb0 <eepromKontrol+0x338>)
 8005b1a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005b1c:	4b37      	ldr	r3, [pc, #220]	; (8005bfc <eepromKontrol+0x284>)
 8005b1e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005b22:	4b64      	ldr	r3, [pc, #400]	; (8005cb4 <eepromKontrol+0x33c>)
 8005b24:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005b26:	4b35      	ldr	r3, [pc, #212]	; (8005bfc <eepromKontrol+0x284>)
 8005b28:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005b2c:	4b62      	ldr	r3, [pc, #392]	; (8005cb8 <eepromKontrol+0x340>)
 8005b2e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005b30:	4b32      	ldr	r3, [pc, #200]	; (8005bfc <eepromKontrol+0x284>)
 8005b32:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005b36:	4b61      	ldr	r3, [pc, #388]	; (8005cbc <eepromKontrol+0x344>)
 8005b38:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005b3a:	4b52      	ldr	r3, [pc, #328]	; (8005c84 <eepromKontrol+0x30c>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff f828 	bl	8004b94 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005b44:	4b4e      	ldr	r3, [pc, #312]	; (8005c80 <eepromKontrol+0x308>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b09      	cmp	r3, #9
 8005b4a:	d902      	bls.n	8005b52 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005b4c:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <eepromKontrol+0x308>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005b52:	4b4a      	ldr	r3, [pc, #296]	; (8005c7c <eepromKontrol+0x304>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d902      	bls.n	8005b60 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005b5a:	4b48      	ldr	r3, [pc, #288]	; (8005c7c <eepromKontrol+0x304>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005b60:	4b45      	ldr	r3, [pc, #276]	; (8005c78 <eepromKontrol+0x300>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b09      	cmp	r3, #9
 8005b66:	d902      	bls.n	8005b6e <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005b68:	4b43      	ldr	r3, [pc, #268]	; (8005c78 <eepromKontrol+0x300>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005b6e:	4b41      	ldr	r3, [pc, #260]	; (8005c74 <eepromKontrol+0x2fc>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b09      	cmp	r3, #9
 8005b74:	d902      	bls.n	8005b7c <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005b76:	4b3f      	ldr	r3, [pc, #252]	; (8005c74 <eepromKontrol+0x2fc>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005b7c:	4b3c      	ldr	r3, [pc, #240]	; (8005c70 <eepromKontrol+0x2f8>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b09      	cmp	r3, #9
 8005b82:	d902      	bls.n	8005b8a <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005b84:	4b3a      	ldr	r3, [pc, #232]	; (8005c70 <eepromKontrol+0x2f8>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <eepromKontrol+0x290>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d902      	bls.n	8005b98 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005b92:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <eepromKontrol+0x290>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005b98:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <eepromKontrol+0x294>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d902      	bls.n	8005ba6 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <eepromKontrol+0x294>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005ba6:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <eepromKontrol+0x298>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d902      	bls.n	8005bb4 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005bae:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <eepromKontrol+0x298>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005bb4:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <eepromKontrol+0x29c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d902      	bls.n	8005bc2 <eepromKontrol+0x24a>
	    altLimit=1;
 8005bbc:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <eepromKontrol+0x29c>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <eepromKontrol+0x2a0>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d902      	bls.n	8005bd0 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005bca:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <eepromKontrol+0x2a0>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005bd0:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <eepromKontrol+0x2a4>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d902      	bls.n	8005bde <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <eepromKontrol+0x2a4>)
 8005bda:	2203      	movs	r2, #3
 8005bdc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005bde:	4b2d      	ldr	r3, [pc, #180]	; (8005c94 <eepromKontrol+0x31c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d902      	bls.n	8005bec <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005be6:	4b2b      	ldr	r3, [pc, #172]	; (8005c94 <eepromKontrol+0x31c>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <eepromKontrol+0x2a8>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d965      	bls.n	8005cc0 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <eepromKontrol+0x2a8>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	e061      	b.n	8005cc0 <eepromKontrol+0x348>
 8005bfc:	20000b40 	.word	0x20000b40
 8005c00:	20000a5c 	.word	0x20000a5c
 8005c04:	20000bae 	.word	0x20000bae
 8005c08:	20000c11 	.word	0x20000c11
 8005c0c:	20000c14 	.word	0x20000c14
 8005c10:	20000c15 	.word	0x20000c15
 8005c14:	20000c16 	.word	0x20000c16
 8005c18:	20000c17 	.word	0x20000c17
 8005c1c:	20000c18 	.word	0x20000c18
 8005c20:	20000c19 	.word	0x20000c19
 8005c24:	20000c29 	.word	0x20000c29
 8005c28:	20000c1a 	.word	0x20000c1a
 8005c2c:	20000c2a 	.word	0x20000c2a
 8005c30:	20000c1b 	.word	0x20000c1b
 8005c34:	20000c2b 	.word	0x20000c2b
 8005c38:	20000c1e 	.word	0x20000c1e
 8005c3c:	20000c1f 	.word	0x20000c1f
 8005c40:	20000c20 	.word	0x20000c20
 8005c44:	20000c21 	.word	0x20000c21
 8005c48:	20000c22 	.word	0x20000c22
 8005c4c:	20000c23 	.word	0x20000c23
 8005c50:	20000c24 	.word	0x20000c24
 8005c54:	20000c25 	.word	0x20000c25
 8005c58:	20000c26 	.word	0x20000c26
 8005c5c:	20000c27 	.word	0x20000c27
 8005c60:	20000c28 	.word	0x20000c28
 8005c64:	20000c2c 	.word	0x20000c2c
 8005c68:	20000c2e 	.word	0x20000c2e
 8005c6c:	20000c0c 	.word	0x20000c0c
 8005c70:	20000c0d 	.word	0x20000c0d
 8005c74:	20000c0e 	.word	0x20000c0e
 8005c78:	200009b4 	.word	0x200009b4
 8005c7c:	200009b5 	.word	0x200009b5
 8005c80:	20000c0f 	.word	0x20000c0f
 8005c84:	20000c31 	.word	0x20000c31
 8005c88:	20000c2f 	.word	0x20000c2f
 8005c8c:	20000c1d 	.word	0x20000c1d
 8005c90:	20000c30 	.word	0x20000c30
 8005c94:	20000c1c 	.word	0x20000c1c
 8005c98:	20000c32 	.word	0x20000c32
 8005c9c:	20000c33 	.word	0x20000c33
 8005ca0:	20000c34 	.word	0x20000c34
 8005ca4:	20000c35 	.word	0x20000c35
 8005ca8:	20000c36 	.word	0x20000c36
 8005cac:	20000c37 	.word	0x20000c37
 8005cb0:	20000c38 	.word	0x20000c38
 8005cb4:	20000c39 	.word	0x20000c39
 8005cb8:	20000c3a 	.word	0x20000c3a
 8005cbc:	20000c3b 	.word	0x20000c3b
	}

	if(kapi1AcSure>5) {
 8005cc0:	4b62      	ldr	r3, [pc, #392]	; (8005e4c <eepromKontrol+0x4d4>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d902      	bls.n	8005cce <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005cc8:	4b60      	ldr	r3, [pc, #384]	; (8005e4c <eepromKontrol+0x4d4>)
 8005cca:	2205      	movs	r2, #5
 8005ccc:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005cce:	4b60      	ldr	r3, [pc, #384]	; (8005e50 <eepromKontrol+0x4d8>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d902      	bls.n	8005cdc <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005cd6:	4b5e      	ldr	r3, [pc, #376]	; (8005e50 <eepromKontrol+0x4d8>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005cdc:	4b5d      	ldr	r3, [pc, #372]	; (8005e54 <eepromKontrol+0x4dc>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	d902      	bls.n	8005cea <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005ce4:	4b5b      	ldr	r3, [pc, #364]	; (8005e54 <eepromKontrol+0x4dc>)
 8005ce6:	2205      	movs	r2, #5
 8005ce8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005cea:	4b5b      	ldr	r3, [pc, #364]	; (8005e58 <eepromKontrol+0x4e0>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d902      	bls.n	8005cf8 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005cf2:	4b59      	ldr	r3, [pc, #356]	; (8005e58 <eepromKontrol+0x4e0>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005cf8:	4b58      	ldr	r3, [pc, #352]	; (8005e5c <eepromKontrol+0x4e4>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d902      	bls.n	8005d06 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005d00:	4b56      	ldr	r3, [pc, #344]	; (8005e5c <eepromKontrol+0x4e4>)
 8005d02:	2202      	movs	r2, #2
 8005d04:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005d06:	4b56      	ldr	r3, [pc, #344]	; (8005e60 <eepromKontrol+0x4e8>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d902      	bls.n	8005d14 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005d0e:	4b54      	ldr	r3, [pc, #336]	; (8005e60 <eepromKontrol+0x4e8>)
 8005d10:	2205      	movs	r2, #5
 8005d12:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005d14:	4b53      	ldr	r3, [pc, #332]	; (8005e64 <eepromKontrol+0x4ec>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d902      	bls.n	8005d22 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005d1c:	4b51      	ldr	r3, [pc, #324]	; (8005e64 <eepromKontrol+0x4ec>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005d22:	4b51      	ldr	r3, [pc, #324]	; (8005e68 <eepromKontrol+0x4f0>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d902      	bls.n	8005d30 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005d2a:	4b4f      	ldr	r3, [pc, #316]	; (8005e68 <eepromKontrol+0x4f0>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005d30:	4b4e      	ldr	r3, [pc, #312]	; (8005e6c <eepromKontrol+0x4f4>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d902      	bls.n	8005d3e <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005d38:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <eepromKontrol+0x4f4>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005d3e:	4b4c      	ldr	r3, [pc, #304]	; (8005e70 <eepromKontrol+0x4f8>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d902      	bls.n	8005d4c <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <eepromKontrol+0x4f8>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005d4c:	4b49      	ldr	r3, [pc, #292]	; (8005e74 <eepromKontrol+0x4fc>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d902      	bls.n	8005d5a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005d54:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <eepromKontrol+0x4fc>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005d5a:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <eepromKontrol+0x500>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d902      	bls.n	8005d68 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005d62:	4b45      	ldr	r3, [pc, #276]	; (8005e78 <eepromKontrol+0x500>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005d68:	4b44      	ldr	r3, [pc, #272]	; (8005e7c <eepromKontrol+0x504>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b05      	cmp	r3, #5
 8005d6e:	d902      	bls.n	8005d76 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005d70:	4b42      	ldr	r3, [pc, #264]	; (8005e7c <eepromKontrol+0x504>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005d76:	4b42      	ldr	r3, [pc, #264]	; (8005e80 <eepromKontrol+0x508>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b05      	cmp	r3, #5
 8005d7c:	d902      	bls.n	8005d84 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005d7e:	4b40      	ldr	r3, [pc, #256]	; (8005e80 <eepromKontrol+0x508>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005d84:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <eepromKontrol+0x50c>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b05      	cmp	r3, #5
 8005d8a:	d902      	bls.n	8005d92 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005d8c:	4b3d      	ldr	r3, [pc, #244]	; (8005e84 <eepromKontrol+0x50c>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005d92:	4b3d      	ldr	r3, [pc, #244]	; (8005e88 <eepromKontrol+0x510>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d902      	bls.n	8005da0 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005d9a:	4b3b      	ldr	r3, [pc, #236]	; (8005e88 <eepromKontrol+0x510>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005da0:	4b3a      	ldr	r3, [pc, #232]	; (8005e8c <eepromKontrol+0x514>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2bb4      	cmp	r3, #180	; 0xb4
 8005da6:	d902      	bls.n	8005dae <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005da8:	4b38      	ldr	r3, [pc, #224]	; (8005e8c <eepromKontrol+0x514>)
 8005daa:	223c      	movs	r2, #60	; 0x3c
 8005dac:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005dae:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <eepromKontrol+0x518>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d902      	bls.n	8005dbc <eepromKontrol+0x444>
	    buzzer=0;
 8005db6:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <eepromKontrol+0x518>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005dbc:	4b35      	ldr	r3, [pc, #212]	; (8005e94 <eepromKontrol+0x51c>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d902      	bls.n	8005dca <eepromKontrol+0x452>
	    demoMode=0;
 8005dc4:	4b33      	ldr	r3, [pc, #204]	; (8005e94 <eepromKontrol+0x51c>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005dca:	4b33      	ldr	r3, [pc, #204]	; (8005e98 <eepromKontrol+0x520>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d902      	bls.n	8005dd8 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005dd2:	4b31      	ldr	r3, [pc, #196]	; (8005e98 <eepromKontrol+0x520>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005dd8:	4b30      	ldr	r3, [pc, #192]	; (8005e9c <eepromKontrol+0x524>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d902      	bls.n	8005de6 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005de0:	4b2e      	ldr	r3, [pc, #184]	; (8005e9c <eepromKontrol+0x524>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005de6:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <eepromKontrol+0x528>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d902      	bls.n	8005df4 <eepromKontrol+0x47c>
		iotMode=0;
 8005dee:	4b2c      	ldr	r3, [pc, #176]	; (8005ea0 <eepromKontrol+0x528>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005df4:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <eepromKontrol+0x52c>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <eepromKontrol+0x530>)
 8005dfc:	441a      	add	r2, r3
 8005dfe:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <eepromKontrol+0x534>)
 8005e00:	6810      	ldr	r0, [r2, #0]
 8005e02:	6851      	ldr	r1, [r2, #4]
 8005e04:	6892      	ldr	r2, [r2, #8]
 8005e06:	c307      	stmia	r3!, {r0, r1, r2}
	memcpy(wifiSSID, (char *)&eepromData[ssidStartPos], 20);
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <eepromKontrol+0x538>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b26      	ldr	r3, [pc, #152]	; (8005ea8 <eepromKontrol+0x530>)
 8005e10:	4413      	add	r3, r2
 8005e12:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <eepromKontrol+0x53c>)
 8005e14:	4614      	mov	r4, r2
 8005e16:	461d      	mov	r5, r3
 8005e18:	6828      	ldr	r0, [r5, #0]
 8005e1a:	6869      	ldr	r1, [r5, #4]
 8005e1c:	68aa      	ldr	r2, [r5, #8]
 8005e1e:	68eb      	ldr	r3, [r5, #12]
 8005e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e22:	6928      	ldr	r0, [r5, #16]
 8005e24:	6020      	str	r0, [r4, #0]
	memcpy(wifiPass, (char *)&eepromData[passStartPos], 20);
 8005e26:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <eepromKontrol+0x540>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <eepromKontrol+0x530>)
 8005e2e:	4413      	add	r3, r2
 8005e30:	4a22      	ldr	r2, [pc, #136]	; (8005ebc <eepromKontrol+0x544>)
 8005e32:	4614      	mov	r4, r2
 8005e34:	461d      	mov	r5, r3
 8005e36:	6828      	ldr	r0, [r5, #0]
 8005e38:	6869      	ldr	r1, [r5, #4]
 8005e3a:	68aa      	ldr	r2, [r5, #8]
 8005e3c:	68eb      	ldr	r3, [r5, #12]
 8005e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e40:	6928      	ldr	r0, [r5, #16]
 8005e42:	6020      	str	r0, [r4, #0]

	if(iotMode == 1 && type == 1) {
		//convertAndSendData();
	}
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e4c:	20000c29 	.word	0x20000c29
 8005e50:	20000c1a 	.word	0x20000c1a
 8005e54:	20000c2a 	.word	0x20000c2a
 8005e58:	20000c1b 	.word	0x20000c1b
 8005e5c:	20000c1d 	.word	0x20000c1d
 8005e60:	20000c2b 	.word	0x20000c2b
 8005e64:	20000c1e 	.word	0x20000c1e
 8005e68:	20000c1f 	.word	0x20000c1f
 8005e6c:	20000c20 	.word	0x20000c20
 8005e70:	20000c21 	.word	0x20000c21
 8005e74:	20000c22 	.word	0x20000c22
 8005e78:	20000c23 	.word	0x20000c23
 8005e7c:	20000c24 	.word	0x20000c24
 8005e80:	20000c25 	.word	0x20000c25
 8005e84:	20000c26 	.word	0x20000c26
 8005e88:	20000c27 	.word	0x20000c27
 8005e8c:	20000c28 	.word	0x20000c28
 8005e90:	20000c2c 	.word	0x20000c2c
 8005e94:	20000c2e 	.word	0x20000c2e
 8005e98:	20000c30 	.word	0x20000c30
 8005e9c:	20000c31 	.word	0x20000c31
 8005ea0:	20000c2f 	.word	0x20000c2f
 8005ea4:	200009b1 	.word	0x200009b1
 8005ea8:	20000b40 	.word	0x20000b40
 8005eac:	20000bd8 	.word	0x20000bd8
 8005eb0:	200009b2 	.word	0x200009b2
 8005eb4:	20000be4 	.word	0x20000be4
 8005eb8:	200009b3 	.word	0x200009b3
 8005ebc:	20000bf8 	.word	0x20000bf8

08005ec0 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b089      	sub	sp, #36	; 0x24
 8005ec4:	af04      	add	r7, sp, #16
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005eca:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <hata2EEPROM+0xa4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	1e5a      	subs	r2, r3, #1
 8005ed0:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <hata2EEPROM+0xa8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	4a25      	ldr	r2, [pc, #148]	; (8005f6c <hata2EEPROM+0xac>)
 8005ed8:	5cd3      	ldrb	r3, [r2, r3]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005ede:	f000 f849 	bl	8005f74 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005ee2:	e000      	b.n	8005ee6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005ee4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e012      	b.n	8005f12 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005eec:	4b1e      	ldr	r3, [pc, #120]	; (8005f68 <hata2EEPROM+0xa8>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <hata2EEPROM+0xac>)
 8005ef6:	5cd3      	ldrb	r3, [r2, r3]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d107      	bne.n	8005f0c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005efc:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <hata2EEPROM+0xa8>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	4919      	ldr	r1, [pc, #100]	; (8005f6c <hata2EEPROM+0xac>)
 8005f06:	79fa      	ldrb	r2, [r7, #7]
 8005f08:	54ca      	strb	r2, [r1, r3]
					break;
 8005f0a:	e007      	b.n	8005f1c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <hata2EEPROM+0xa4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	dbe7      	blt.n	8005eec <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005f1c:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <hata2EEPROM+0xa8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	b299      	uxth	r1, r3
 8005f22:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <hata2EEPROM+0xa4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	b298      	uxth	r0, r3
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <hata2EEPROM+0xa8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a0f      	ldr	r2, [pc, #60]	; (8005f6c <hata2EEPROM+0xac>)
 8005f2e:	4413      	add	r3, r2
 8005f30:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <hata2EEPROM+0xa4>)
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	b292      	uxth	r2, r2
 8005f36:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005f3a:	9402      	str	r4, [sp, #8]
 8005f3c:	9201      	str	r2, [sp, #4]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	460a      	mov	r2, r1
 8005f44:	21a0      	movs	r1, #160	; 0xa0
 8005f46:	480a      	ldr	r0, [pc, #40]	; (8005f70 <hata2EEPROM+0xb0>)
 8005f48:	f003 ff68 	bl	8009e1c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f50:	f002 feda 	bl	8008d08 <HAL_Delay>
	eepromKontrol(1);
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7ff fd0f 	bl	8005978 <eepromKontrol>
}
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd90      	pop	{r4, r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000938 	.word	0x20000938
 8005f68:	2000093c 	.word	0x2000093c
 8005f6c:	20000b40 	.word	0x20000b40
 8005f70:	20000a5c 	.word	0x20000a5c

08005f74 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	e009      	b.n	8005f94 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005f80:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <eepromDataFillWithEmpty+0x38>)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f88:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <eepromDataFillWithEmpty+0x3c>)
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3301      	adds	r3, #1
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <eepromDataFillWithEmpty+0x40>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	dbf0      	blt.n	8005f80 <eepromDataFillWithEmpty+0xc>
	}
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000910 	.word	0x20000910
 8005fb0:	20000b40 	.word	0x20000b40
 8005fb4:	20000938 	.word	0x20000938

08005fb8 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
	timer1=millis;
 8005fbc:	4b47      	ldr	r3, [pc, #284]	; (80060dc <bekle+0x124>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a47      	ldr	r2, [pc, #284]	; (80060e0 <bekle+0x128>)
 8005fc2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fc4:	e002      	b.n	8005fcc <bekle+0x14>
    	butonKontrol = 1;
 8005fc6:	4b47      	ldr	r3, [pc, #284]	; (80060e4 <bekle+0x12c>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4846      	ldr	r0, [pc, #280]	; (80060e8 <bekle+0x130>)
 8005fd0:	f003 fc6a 	bl	80098a8 <HAL_GPIO_ReadPin>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d109      	bne.n	8005fee <bekle+0x36>
 8005fda:	4b40      	ldr	r3, [pc, #256]	; (80060dc <bekle+0x124>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b40      	ldr	r3, [pc, #256]	; (80060e0 <bekle+0x128>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d0ef      	beq.n	8005fc6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fe6:	e002      	b.n	8005fee <bekle+0x36>
    	butonKontrol = 1;
 8005fe8:	4b3e      	ldr	r3, [pc, #248]	; (80060e4 <bekle+0x12c>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fee:	2108      	movs	r1, #8
 8005ff0:	483e      	ldr	r0, [pc, #248]	; (80060ec <bekle+0x134>)
 8005ff2:	f003 fc59 	bl	80098a8 <HAL_GPIO_ReadPin>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d109      	bne.n	8006010 <bekle+0x58>
 8005ffc:	4b37      	ldr	r3, [pc, #220]	; (80060dc <bekle+0x124>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	4b37      	ldr	r3, [pc, #220]	; (80060e0 <bekle+0x128>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d0ef      	beq.n	8005fe8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006008:	e002      	b.n	8006010 <bekle+0x58>
    	butonKontrol = 1;
 800600a:	4b36      	ldr	r3, [pc, #216]	; (80060e4 <bekle+0x12c>)
 800600c:	2201      	movs	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006010:	2102      	movs	r1, #2
 8006012:	4835      	ldr	r0, [pc, #212]	; (80060e8 <bekle+0x130>)
 8006014:	f003 fc48 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006018:	4603      	mov	r3, r0
 800601a:	2b01      	cmp	r3, #1
 800601c:	d109      	bne.n	8006032 <bekle+0x7a>
 800601e:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <bekle+0x124>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b2f      	ldr	r3, [pc, #188]	; (80060e0 <bekle+0x128>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d0ef      	beq.n	800600a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800602a:	e002      	b.n	8006032 <bekle+0x7a>
    	butonKontrol = 1;
 800602c:	4b2d      	ldr	r3, [pc, #180]	; (80060e4 <bekle+0x12c>)
 800602e:	2201      	movs	r2, #1
 8006030:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006032:	2104      	movs	r1, #4
 8006034:	482c      	ldr	r0, [pc, #176]	; (80060e8 <bekle+0x130>)
 8006036:	f003 fc37 	bl	80098a8 <HAL_GPIO_ReadPin>
 800603a:	4603      	mov	r3, r0
 800603c:	2b01      	cmp	r3, #1
 800603e:	d109      	bne.n	8006054 <bekle+0x9c>
 8006040:	4b26      	ldr	r3, [pc, #152]	; (80060dc <bekle+0x124>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b26      	ldr	r3, [pc, #152]	; (80060e0 <bekle+0x128>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d0ef      	beq.n	800602c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800604c:	e002      	b.n	8006054 <bekle+0x9c>
    	butonKontrol = 1;
 800604e:	4b25      	ldr	r3, [pc, #148]	; (80060e4 <bekle+0x12c>)
 8006050:	2201      	movs	r2, #1
 8006052:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006054:	2108      	movs	r1, #8
 8006056:	4824      	ldr	r0, [pc, #144]	; (80060e8 <bekle+0x130>)
 8006058:	f003 fc26 	bl	80098a8 <HAL_GPIO_ReadPin>
 800605c:	4603      	mov	r3, r0
 800605e:	2b01      	cmp	r3, #1
 8006060:	d109      	bne.n	8006076 <bekle+0xbe>
 8006062:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <bekle+0x124>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b1e      	ldr	r3, [pc, #120]	; (80060e0 <bekle+0x128>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d0ef      	beq.n	800604e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800606e:	e002      	b.n	8006076 <bekle+0xbe>
    	butonKontrol = 1;
 8006070:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <bekle+0x12c>)
 8006072:	2201      	movs	r2, #1
 8006074:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006076:	2180      	movs	r1, #128	; 0x80
 8006078:	481c      	ldr	r0, [pc, #112]	; (80060ec <bekle+0x134>)
 800607a:	f003 fc15 	bl	80098a8 <HAL_GPIO_ReadPin>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <bekle+0xe0>
 8006084:	4b15      	ldr	r3, [pc, #84]	; (80060dc <bekle+0x124>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <bekle+0x128>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d0ef      	beq.n	8006070 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006090:	e002      	b.n	8006098 <bekle+0xe0>
    	butonKontrol = 1;
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <bekle+0x12c>)
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800609c:	4813      	ldr	r0, [pc, #76]	; (80060ec <bekle+0x134>)
 800609e:	f003 fc03 	bl	80098a8 <HAL_GPIO_ReadPin>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d109      	bne.n	80060bc <bekle+0x104>
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <bekle+0x124>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <bekle+0x128>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d0ee      	beq.n	8006092 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060b4:	e002      	b.n	80060bc <bekle+0x104>
    	butonKontrol = 1;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <bekle+0x12c>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060c0:	480a      	ldr	r0, [pc, #40]	; (80060ec <bekle+0x134>)
 80060c2:	f003 fbf1 	bl	80098a8 <HAL_GPIO_ReadPin>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <bekle+0x120>
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <bekle+0x124>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <bekle+0x128>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d0ee      	beq.n	80060b6 <bekle+0xfe>
    }

}
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000bb8 	.word	0x20000bb8
 80060e0:	20000bc0 	.word	0x20000bc0
 80060e4:	20000c3f 	.word	0x20000c3f
 80060e8:	40010800 	.word	0x40010800
 80060ec:	40011000 	.word	0x40011000

080060f0 <i2cTest>:

void i2cTest() {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80060f6:	463b      	mov	r3, r7
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8006102:	4b50      	ldr	r3, [pc, #320]	; (8006244 <i2cTest+0x154>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4b4e      	ldr	r3, [pc, #312]	; (8006244 <i2cTest+0x154>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8006112:	484c      	ldr	r0, [pc, #304]	; (8006244 <i2cTest+0x154>)
 8006114:	f003 fd54 	bl	8009bc0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006118:	23c0      	movs	r3, #192	; 0xc0
 800611a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800611c:	2311      	movs	r3, #17
 800611e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006120:	2301      	movs	r3, #1
 8006122:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006124:	2303      	movs	r3, #3
 8006126:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006128:	463b      	mov	r3, r7
 800612a:	4619      	mov	r1, r3
 800612c:	4846      	ldr	r0, [pc, #280]	; (8006248 <i2cTest+0x158>)
 800612e:	f003 f95b 	bl	80093e8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006132:	2201      	movs	r2, #1
 8006134:	2140      	movs	r1, #64	; 0x40
 8006136:	4844      	ldr	r0, [pc, #272]	; (8006248 <i2cTest+0x158>)
 8006138:	f003 fbcd 	bl	80098d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800613c:	2201      	movs	r2, #1
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	4841      	ldr	r0, [pc, #260]	; (8006248 <i2cTest+0x158>)
 8006142:	f003 fbc8 	bl	80098d6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006146:	200a      	movs	r0, #10
 8006148:	f002 fdde 	bl	8008d08 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800614c:	bf00      	nop
 800614e:	2140      	movs	r1, #64	; 0x40
 8006150:	483d      	ldr	r0, [pc, #244]	; (8006248 <i2cTest+0x158>)
 8006152:	f003 fba9 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006156:	4603      	mov	r3, r0
 8006158:	2b01      	cmp	r3, #1
 800615a:	d006      	beq.n	800616a <i2cTest+0x7a>
 800615c:	2180      	movs	r1, #128	; 0x80
 800615e:	483a      	ldr	r0, [pc, #232]	; (8006248 <i2cTest+0x158>)
 8006160:	f003 fba2 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006164:	4603      	mov	r3, r0
 8006166:	2b01      	cmp	r3, #1
 8006168:	d1f1      	bne.n	800614e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800616a:	2200      	movs	r2, #0
 800616c:	2180      	movs	r1, #128	; 0x80
 800616e:	4836      	ldr	r0, [pc, #216]	; (8006248 <i2cTest+0x158>)
 8006170:	f003 fbb1 	bl	80098d6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006174:	200a      	movs	r0, #10
 8006176:	f002 fdc7 	bl	8008d08 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800617a:	bf00      	nop
 800617c:	2180      	movs	r1, #128	; 0x80
 800617e:	4832      	ldr	r0, [pc, #200]	; (8006248 <i2cTest+0x158>)
 8006180:	f003 fb92 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006184:	4603      	mov	r3, r0
 8006186:	2b01      	cmp	r3, #1
 8006188:	d0f8      	beq.n	800617c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800618a:	2200      	movs	r2, #0
 800618c:	2140      	movs	r1, #64	; 0x40
 800618e:	482e      	ldr	r0, [pc, #184]	; (8006248 <i2cTest+0x158>)
 8006190:	f003 fba1 	bl	80098d6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006194:	200a      	movs	r0, #10
 8006196:	f002 fdb7 	bl	8008d08 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800619a:	bf00      	nop
 800619c:	2140      	movs	r1, #64	; 0x40
 800619e:	482a      	ldr	r0, [pc, #168]	; (8006248 <i2cTest+0x158>)
 80061a0:	f003 fb82 	bl	80098a8 <HAL_GPIO_ReadPin>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d0f8      	beq.n	800619c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80061aa:	2201      	movs	r2, #1
 80061ac:	2140      	movs	r1, #64	; 0x40
 80061ae:	4826      	ldr	r0, [pc, #152]	; (8006248 <i2cTest+0x158>)
 80061b0:	f003 fb91 	bl	80098d6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061b4:	200a      	movs	r0, #10
 80061b6:	f002 fda7 	bl	8008d08 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80061ba:	bf00      	nop
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	4822      	ldr	r0, [pc, #136]	; (8006248 <i2cTest+0x158>)
 80061c0:	f003 fb72 	bl	80098a8 <HAL_GPIO_ReadPin>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d1f8      	bne.n	80061bc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80061ca:	2201      	movs	r2, #1
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	481e      	ldr	r0, [pc, #120]	; (8006248 <i2cTest+0x158>)
 80061d0:	f003 fb81 	bl	80098d6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061d4:	200a      	movs	r0, #10
 80061d6:	f002 fd97 	bl	8008d08 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80061da:	bf00      	nop
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	481a      	ldr	r0, [pc, #104]	; (8006248 <i2cTest+0x158>)
 80061e0:	f003 fb62 	bl	80098a8 <HAL_GPIO_ReadPin>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d1f8      	bne.n	80061dc <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061ea:	23c0      	movs	r3, #192	; 0xc0
 80061ec:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80061ee:	2312      	movs	r3, #18
 80061f0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80061f2:	2301      	movs	r3, #1
 80061f4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80061f6:	2303      	movs	r3, #3
 80061f8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80061fa:	463b      	mov	r3, r7
 80061fc:	4619      	mov	r1, r3
 80061fe:	4812      	ldr	r0, [pc, #72]	; (8006248 <i2cTest+0x158>)
 8006200:	f003 f8f2 	bl	80093e8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006204:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <i2cTest+0x154>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <i2cTest+0x154>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006212:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <i2cTest+0x154>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <i2cTest+0x154>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006222:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <i2cTest+0x154>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <i2cTest+0x154>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006234:	4803      	ldr	r0, [pc, #12]	; (8006244 <i2cTest+0x154>)
 8006236:	f003 fb7f 	bl	8009938 <HAL_I2C_Init>
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000a5c 	.word	0x20000a5c
 8006248:	40010c00 	.word	0x40010c00

0800624c <checkLCDBacklight>:

void checkLCDBacklight() {
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <checkLCDBacklight+0x34>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <checkLCDBacklight+0x38>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	1ad2      	subs	r2, r2, r3
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <checkLCDBacklight+0x3c>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	460b      	mov	r3, r1
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	429a      	cmp	r2, r3
 800626a:	d303      	bcc.n	8006274 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 800626c:	2000      	movs	r0, #0
 800626e:	f7fa f9c5 	bl	80005fc <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006272:	e002      	b.n	800627a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006274:	2001      	movs	r0, #1
 8006276:	f7fa f9c1 	bl	80005fc <lcd_backlight>
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000bb8 	.word	0x20000bb8
 8006284:	20000bd4 	.word	0x20000bd4
 8006288:	20000940 	.word	0x20000940

0800628c <checkBasincSalteri>:

void checkBasincSalteri() {
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <checkBasincSalteri+0x54>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <checkBasincSalteri+0x12>
		basincVar=1;
 8006298:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <checkBasincSalteri+0x58>)
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <checkBasincSalteri+0x54>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d119      	bne.n	80062da <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80062a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062aa:	480f      	ldr	r0, [pc, #60]	; (80062e8 <checkBasincSalteri+0x5c>)
 80062ac:	f003 fafc 	bl	80098a8 <HAL_GPIO_ReadPin>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80062b6:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <checkBasincSalteri+0x60>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <checkBasincSalteri+0x64>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d90a      	bls.n	80062da <checkBasincSalteri+0x4e>
				basincVar=1;
 80062c4:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <checkBasincSalteri+0x58>)
 80062c6:	2201      	movs	r2, #1
 80062c8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80062ca:	e006      	b.n	80062da <checkBasincSalteri+0x4e>
			timer5=millis;
 80062cc:	4b07      	ldr	r3, [pc, #28]	; (80062ec <checkBasincSalteri+0x60>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a07      	ldr	r2, [pc, #28]	; (80062f0 <checkBasincSalteri+0x64>)
 80062d2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <checkBasincSalteri+0x58>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
}
 80062da:	bf00      	nop
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000c17 	.word	0x20000c17
 80062e4:	20000c13 	.word	0x20000c13
 80062e8:	40011000 	.word	0x40011000
 80062ec:	20000bb8 	.word	0x20000bb8
 80062f0:	20000bd0 	.word	0x20000bd0

080062f4 <checkBasGonder>:

void checkBasGonder() {
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80062f8:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <checkBasGonder+0x74>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d10b      	bne.n	8006318 <checkBasGonder+0x24>
 8006300:	4b1a      	ldr	r3, [pc, #104]	; (800636c <checkBasGonder+0x78>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <checkBasGonder+0x24>
 8006308:	4b19      	ldr	r3, [pc, #100]	; (8006370 <checkBasGonder+0x7c>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d103      	bne.n	8006318 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006310:	4b18      	ldr	r3, [pc, #96]	; (8006374 <checkBasGonder+0x80>)
 8006312:	2201      	movs	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	e009      	b.n	800632c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006318:	4b14      	ldr	r3, [pc, #80]	; (800636c <checkBasGonder+0x78>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f083 0301 	eor.w	r3, r3, #1
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006326:	4b13      	ldr	r3, [pc, #76]	; (8006374 <checkBasGonder+0x80>)
 8006328:	2200      	movs	r2, #0
 800632a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800632c:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <checkBasGonder+0x74>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d10b      	bne.n	800634c <checkBasGonder+0x58>
 8006334:	4b10      	ldr	r3, [pc, #64]	; (8006378 <checkBasGonder+0x84>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <checkBasGonder+0x58>
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <checkBasGonder+0x7c>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006344:	4b0d      	ldr	r3, [pc, #52]	; (800637c <checkBasGonder+0x88>)
 8006346:	2201      	movs	r2, #1
 8006348:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800634a:	e009      	b.n	8006360 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <checkBasGonder+0x84>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f083 0301 	eor.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800635a:	4b08      	ldr	r3, [pc, #32]	; (800637c <checkBasGonder+0x88>)
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr
 8006368:	20000c11 	.word	0x20000c11
 800636c:	20000c45 	.word	0x20000c45
 8006370:	20000c1f 	.word	0x20000c1f
 8006374:	20000c4c 	.word	0x20000c4c
 8006378:	20000c48 	.word	0x20000c48
 800637c:	20000c4d 	.word	0x20000c4d

08006380 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006384:	4b24      	ldr	r3, [pc, #144]	; (8006418 <checkKapiSecimleri+0x98>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800638c:	4b23      	ldr	r3, [pc, #140]	; (800641c <checkKapiSecimleri+0x9c>)
 800638e:	2201      	movs	r2, #1
 8006390:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8006392:	4b21      	ldr	r3, [pc, #132]	; (8006418 <checkKapiSecimleri+0x98>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d10e      	bne.n	80063b8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800639a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800639e:	4820      	ldr	r0, [pc, #128]	; (8006420 <checkKapiSecimleri+0xa0>)
 80063a0:	f003 fa82 	bl	80098a8 <HAL_GPIO_ReadPin>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d103      	bne.n	80063b2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80063aa:	4b1c      	ldr	r3, [pc, #112]	; (800641c <checkKapiSecimleri+0x9c>)
 80063ac:	2201      	movs	r2, #1
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	e002      	b.n	80063b8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80063b2:	4b1a      	ldr	r3, [pc, #104]	; (800641c <checkKapiSecimleri+0x9c>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80063b8:	4b17      	ldr	r3, [pc, #92]	; (8006418 <checkKapiSecimleri+0x98>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d10e      	bne.n	80063de <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80063c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063c4:	4816      	ldr	r0, [pc, #88]	; (8006420 <checkKapiSecimleri+0xa0>)
 80063c6:	f003 fa6f 	bl	80098a8 <HAL_GPIO_ReadPin>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80063d0:	4b12      	ldr	r3, [pc, #72]	; (800641c <checkKapiSecimleri+0x9c>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e002      	b.n	80063de <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <checkKapiSecimleri+0x9c>)
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80063de:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <checkKapiSecimleri+0x98>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d116      	bne.n	8006414 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80063e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063ea:	480d      	ldr	r0, [pc, #52]	; (8006420 <checkKapiSecimleri+0xa0>)
 80063ec:	f003 fa5c 	bl	80098a8 <HAL_GPIO_ReadPin>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <checkKapiSecimleri+0x8e>
 80063f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063fa:	4809      	ldr	r0, [pc, #36]	; (8006420 <checkKapiSecimleri+0xa0>)
 80063fc:	f003 fa54 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <checkKapiSecimleri+0x9c>)
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800640c:	e002      	b.n	8006414 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800640e:	4b03      	ldr	r3, [pc, #12]	; (800641c <checkKapiSecimleri+0x9c>)
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20000c18 	.word	0x20000c18
 800641c:	20000c63 	.word	0x20000c63
 8006420:	40010800 	.word	0x40010800

08006424 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006428:	4b62      	ldr	r3, [pc, #392]	; (80065b4 <checkAktifCalisma+0x190>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f041 8332 	bne.w	8007a96 <checkAktifCalisma+0x1672>
 8006432:	4b61      	ldr	r3, [pc, #388]	; (80065b8 <checkAktifCalisma+0x194>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f041 832d 	bne.w	8007a96 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800643c:	4b5f      	ldr	r3, [pc, #380]	; (80065bc <checkAktifCalisma+0x198>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d11a      	bne.n	800647a <checkAktifCalisma+0x56>
 8006444:	4b5e      	ldr	r3, [pc, #376]	; (80065c0 <checkAktifCalisma+0x19c>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <checkAktifCalisma+0x56>
 800644c:	4b5d      	ldr	r3, [pc, #372]	; (80065c4 <checkAktifCalisma+0x1a0>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <checkAktifCalisma+0x46>
 8006454:	4b5c      	ldr	r3, [pc, #368]	; (80065c8 <checkAktifCalisma+0x1a4>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f083 0301 	eor.w	r3, r3, #1
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <checkAktifCalisma+0x46>
 8006462:	4b5a      	ldr	r3, [pc, #360]	; (80065cc <checkAktifCalisma+0x1a8>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d007      	beq.n	800647a <checkAktifCalisma+0x56>
 800646a:	4b59      	ldr	r3, [pc, #356]	; (80065d0 <checkAktifCalisma+0x1ac>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d018      	beq.n	80064a4 <checkAktifCalisma+0x80>
 8006472:	4b58      	ldr	r3, [pc, #352]	; (80065d4 <checkAktifCalisma+0x1b0>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d114      	bne.n	80064a4 <checkAktifCalisma+0x80>
 800647a:	4b57      	ldr	r3, [pc, #348]	; (80065d8 <checkAktifCalisma+0x1b4>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d010      	beq.n	80064a4 <checkAktifCalisma+0x80>
 8006482:	4b56      	ldr	r3, [pc, #344]	; (80065dc <checkAktifCalisma+0x1b8>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00c      	beq.n	80064a4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800648a:	2201      	movs	r2, #1
 800648c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006490:	4853      	ldr	r0, [pc, #332]	; (80065e0 <checkAktifCalisma+0x1bc>)
 8006492:	f003 fa20 	bl	80098d6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8006496:	4b53      	ldr	r3, [pc, #332]	; (80065e4 <checkAktifCalisma+0x1c0>)
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 800649c:	4b52      	ldr	r3, [pc, #328]	; (80065e8 <checkAktifCalisma+0x1c4>)
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e008      	b.n	80064b6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064aa:	484d      	ldr	r0, [pc, #308]	; (80065e0 <checkAktifCalisma+0x1bc>)
 80064ac:	f003 fa13 	bl	80098d6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80064b0:	4b4c      	ldr	r3, [pc, #304]	; (80065e4 <checkAktifCalisma+0x1c0>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80064b6:	4b40      	ldr	r3, [pc, #256]	; (80065b8 <checkAktifCalisma+0x194>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d160      	bne.n	8006580 <checkAktifCalisma+0x15c>
 80064be:	4b46      	ldr	r3, [pc, #280]	; (80065d8 <checkAktifCalisma+0x1b4>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d05c      	beq.n	8006580 <checkAktifCalisma+0x15c>
 80064c6:	4b45      	ldr	r3, [pc, #276]	; (80065dc <checkAktifCalisma+0x1b8>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d058      	beq.n	8006580 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80064ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064d2:	4843      	ldr	r0, [pc, #268]	; (80065e0 <checkAktifCalisma+0x1bc>)
 80064d4:	f003 f9e8 	bl	80098a8 <HAL_GPIO_ReadPin>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <checkAktifCalisma+0xc2>
 80064de:	4b43      	ldr	r3, [pc, #268]	; (80065ec <checkAktifCalisma+0x1c8>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d04c      	beq.n	8006580 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064e6:	2102      	movs	r1, #2
 80064e8:	4841      	ldr	r0, [pc, #260]	; (80065f0 <checkAktifCalisma+0x1cc>)
 80064ea:	f003 f9dd 	bl	80098a8 <HAL_GPIO_ReadPin>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d145      	bne.n	8006580 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80064f4:	4b3f      	ldr	r3, [pc, #252]	; (80065f4 <checkAktifCalisma+0x1d0>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d041      	beq.n	8006580 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80064fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006500:	4837      	ldr	r0, [pc, #220]	; (80065e0 <checkAktifCalisma+0x1bc>)
 8006502:	f003 f9d1 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006506:	4603      	mov	r3, r0
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10e      	bne.n	800652a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800650c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006510:	4833      	ldr	r0, [pc, #204]	; (80065e0 <checkAktifCalisma+0x1bc>)
 8006512:	f003 f9c9 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006516:	4603      	mov	r3, r0
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800651c:	2140      	movs	r1, #64	; 0x40
 800651e:	4834      	ldr	r0, [pc, #208]	; (80065f0 <checkAktifCalisma+0x1cc>)
 8006520:	f003 f9c2 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006524:	4603      	mov	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d003      	beq.n	8006532 <checkAktifCalisma+0x10e>
 800652a:	4b24      	ldr	r3, [pc, #144]	; (80065bc <checkAktifCalisma+0x198>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d026      	beq.n	8006580 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <checkAktifCalisma+0x1a0>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f083 0301 	eor.w	r3, r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01f      	beq.n	8006580 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006540:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <checkAktifCalisma+0x19c>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f083 0301 	eor.w	r3, r3, #1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d018      	beq.n	8006580 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800654e:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <checkAktifCalisma+0x1ac>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f083 0301 	eor.w	r3, r3, #1
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d011      	beq.n	8006580 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800655c:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <checkAktifCalisma+0x1d4>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f083 0301 	eor.w	r3, r3, #1
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800656a:	4b24      	ldr	r3, [pc, #144]	; (80065fc <checkAktifCalisma+0x1d8>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f083 0301 	eor.w	r3, r3, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006578:	4b10      	ldr	r3, [pc, #64]	; (80065bc <checkAktifCalisma+0x198>)
 800657a:	2201      	movs	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e002      	b.n	8006586 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006580:	4b0e      	ldr	r3, [pc, #56]	; (80065bc <checkAktifCalisma+0x198>)
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006586:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <checkAktifCalisma+0x198>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d03a      	beq.n	8006604 <checkAktifCalisma+0x1e0>
 800658e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006592:	4817      	ldr	r0, [pc, #92]	; (80065f0 <checkAktifCalisma+0x1cc>)
 8006594:	f003 f988 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006598:	4603      	mov	r3, r0
 800659a:	2b01      	cmp	r3, #1
 800659c:	d132      	bne.n	8006604 <checkAktifCalisma+0x1e0>
 800659e:	4b18      	ldr	r3, [pc, #96]	; (8006600 <checkAktifCalisma+0x1dc>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d02e      	beq.n	8006604 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065a6:	2201      	movs	r2, #1
 80065a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065ac:	480c      	ldr	r0, [pc, #48]	; (80065e0 <checkAktifCalisma+0x1bc>)
 80065ae:	f003 f992 	bl	80098d6 <HAL_GPIO_WritePin>
 80065b2:	e02d      	b.n	8006610 <checkAktifCalisma+0x1ec>
 80065b4:	20000c2e 	.word	0x20000c2e
 80065b8:	20000c2d 	.word	0x20000c2d
 80065bc:	20000c45 	.word	0x20000c45
 80065c0:	20000c46 	.word	0x20000c46
 80065c4:	20000c48 	.word	0x20000c48
 80065c8:	20000c40 	.word	0x20000c40
 80065cc:	20000c23 	.word	0x20000c23
 80065d0:	20000c47 	.word	0x20000c47
 80065d4:	20000c22 	.word	0x20000c22
 80065d8:	20000c62 	.word	0x20000c62
 80065dc:	20000c63 	.word	0x20000c63
 80065e0:	40010c00 	.word	0x40010c00
 80065e4:	20000c64 	.word	0x20000c64
 80065e8:	20000c4f 	.word	0x20000c4f
 80065ec:	20000c4c 	.word	0x20000c4c
 80065f0:	40011000 	.word	0x40011000
 80065f4:	20000c13 	.word	0x20000c13
 80065f8:	20000c4a 	.word	0x20000c4a
 80065fc:	20000c4b 	.word	0x20000c4b
 8006600:	20000c1e 	.word	0x20000c1e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006604:	2200      	movs	r2, #0
 8006606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800660a:	4860      	ldr	r0, [pc, #384]	; (800678c <checkAktifCalisma+0x368>)
 800660c:	f003 f963 	bl	80098d6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006610:	4b5f      	ldr	r3, [pc, #380]	; (8006790 <checkAktifCalisma+0x36c>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d013      	beq.n	8006640 <checkAktifCalisma+0x21c>
 8006618:	4b5e      	ldr	r3, [pc, #376]	; (8006794 <checkAktifCalisma+0x370>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d007      	beq.n	8006630 <checkAktifCalisma+0x20c>
 8006620:	4b5c      	ldr	r3, [pc, #368]	; (8006794 <checkAktifCalisma+0x370>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d003      	beq.n	8006630 <checkAktifCalisma+0x20c>
 8006628:	4b5b      	ldr	r3, [pc, #364]	; (8006798 <checkAktifCalisma+0x374>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d107      	bne.n	8006640 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006630:	2201      	movs	r2, #1
 8006632:	2104      	movs	r1, #4
 8006634:	4855      	ldr	r0, [pc, #340]	; (800678c <checkAktifCalisma+0x368>)
 8006636:	f003 f94e 	bl	80098d6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800663a:	4b58      	ldr	r3, [pc, #352]	; (800679c <checkAktifCalisma+0x378>)
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006640:	4b56      	ldr	r3, [pc, #344]	; (800679c <checkAktifCalisma+0x378>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d02f      	beq.n	80066a8 <checkAktifCalisma+0x284>
 8006648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800664c:	484f      	ldr	r0, [pc, #316]	; (800678c <checkAktifCalisma+0x368>)
 800664e:	f003 f92b 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d106      	bne.n	8006666 <checkAktifCalisma+0x242>
 8006658:	4b51      	ldr	r3, [pc, #324]	; (80067a0 <checkAktifCalisma+0x37c>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f083 0301 	eor.w	r3, r3, #1
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <checkAktifCalisma+0x250>
 8006666:	2102      	movs	r1, #2
 8006668:	484e      	ldr	r0, [pc, #312]	; (80067a4 <checkAktifCalisma+0x380>)
 800666a:	f003 f91d 	bl	80098a8 <HAL_GPIO_ReadPin>
 800666e:	4603      	mov	r3, r0
 8006670:	2b01      	cmp	r3, #1
 8006672:	d119      	bne.n	80066a8 <checkAktifCalisma+0x284>
 8006674:	4b4c      	ldr	r3, [pc, #304]	; (80067a8 <checkAktifCalisma+0x384>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d015      	beq.n	80066a8 <checkAktifCalisma+0x284>
 800667c:	4b4b      	ldr	r3, [pc, #300]	; (80067ac <checkAktifCalisma+0x388>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d011      	beq.n	80066a8 <checkAktifCalisma+0x284>
 8006684:	4b4a      	ldr	r3, [pc, #296]	; (80067b0 <checkAktifCalisma+0x38c>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <checkAktifCalisma+0x284>
 800668c:	4b49      	ldr	r3, [pc, #292]	; (80067b4 <checkAktifCalisma+0x390>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f083 0301 	eor.w	r3, r3, #1
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d006      	beq.n	80066a8 <checkAktifCalisma+0x284>
			timer2=millis;
 800669a:	4b47      	ldr	r3, [pc, #284]	; (80067b8 <checkAktifCalisma+0x394>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a47      	ldr	r2, [pc, #284]	; (80067bc <checkAktifCalisma+0x398>)
 80066a0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80066a2:	4b44      	ldr	r3, [pc, #272]	; (80067b4 <checkAktifCalisma+0x390>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80066a8:	4b43      	ldr	r3, [pc, #268]	; (80067b8 <checkAktifCalisma+0x394>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b43      	ldr	r3, [pc, #268]	; (80067bc <checkAktifCalisma+0x398>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	4a43      	ldr	r2, [pc, #268]	; (80067c0 <checkAktifCalisma+0x39c>)
 80066b4:	7812      	ldrb	r2, [r2, #0]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d303      	bcc.n	80066c2 <checkAktifCalisma+0x29e>
 80066ba:	4b3e      	ldr	r3, [pc, #248]	; (80067b4 <checkAktifCalisma+0x390>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d111      	bne.n	80066e6 <checkAktifCalisma+0x2c2>
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <checkAktifCalisma+0x384>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f083 0301 	eor.w	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <checkAktifCalisma+0x2c2>
 80066d0:	4b36      	ldr	r3, [pc, #216]	; (80067ac <checkAktifCalisma+0x388>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f083 0301 	eor.w	r3, r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <checkAktifCalisma+0x2c2>
 80066de:	4b34      	ldr	r3, [pc, #208]	; (80067b0 <checkAktifCalisma+0x38c>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066e6:	2200      	movs	r2, #0
 80066e8:	2104      	movs	r1, #4
 80066ea:	4828      	ldr	r0, [pc, #160]	; (800678c <checkAktifCalisma+0x368>)
 80066ec:	f003 f8f3 	bl	80098d6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80066f0:	4b2a      	ldr	r3, [pc, #168]	; (800679c <checkAktifCalisma+0x378>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80066f6:	4b2f      	ldr	r3, [pc, #188]	; (80067b4 <checkAktifCalisma+0x390>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80066fc:	4b31      	ldr	r3, [pc, #196]	; (80067c4 <checkAktifCalisma+0x3a0>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006704:	4b30      	ldr	r3, [pc, #192]	; (80067c8 <checkAktifCalisma+0x3a4>)
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800670a:	4b2e      	ldr	r3, [pc, #184]	; (80067c4 <checkAktifCalisma+0x3a0>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d116      	bne.n	8006740 <checkAktifCalisma+0x31c>
 8006712:	4b2e      	ldr	r3, [pc, #184]	; (80067cc <checkAktifCalisma+0x3a8>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d112      	bne.n	8006740 <checkAktifCalisma+0x31c>
 800671a:	2101      	movs	r1, #1
 800671c:	4821      	ldr	r0, [pc, #132]	; (80067a4 <checkAktifCalisma+0x380>)
 800671e:	f003 f8c3 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <checkAktifCalisma+0x31c>
 8006728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800672c:	4817      	ldr	r0, [pc, #92]	; (800678c <checkAktifCalisma+0x368>)
 800672e:	f003 f8bb 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <checkAktifCalisma+0x3a4>)
 800673a:	2201      	movs	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e011      	b.n	8006764 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006740:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <checkAktifCalisma+0x3a0>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d10d      	bne.n	8006764 <checkAktifCalisma+0x340>
 8006748:	2101      	movs	r1, #1
 800674a:	4816      	ldr	r0, [pc, #88]	; (80067a4 <checkAktifCalisma+0x380>)
 800674c:	f003 f8ac 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006750:	4603      	mov	r3, r0
 8006752:	2b01      	cmp	r3, #1
 8006754:	d106      	bne.n	8006764 <checkAktifCalisma+0x340>
 8006756:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <checkAktifCalisma+0x3a8>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800675e:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <checkAktifCalisma+0x3a4>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006764:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <checkAktifCalisma+0x3a0>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d134      	bne.n	80067d6 <checkAktifCalisma+0x3b2>
 800676c:	4b17      	ldr	r3, [pc, #92]	; (80067cc <checkAktifCalisma+0x3a8>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d130      	bne.n	80067d6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006774:	2101      	movs	r1, #1
 8006776:	480b      	ldr	r0, [pc, #44]	; (80067a4 <checkAktifCalisma+0x380>)
 8006778:	f003 f896 	bl	80098a8 <HAL_GPIO_ReadPin>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d126      	bne.n	80067d0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006782:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <checkAktifCalisma+0x3a4>)
 8006784:	2201      	movs	r2, #1
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	e025      	b.n	80067d6 <checkAktifCalisma+0x3b2>
 800678a:	bf00      	nop
 800678c:	40010c00 	.word	0x40010c00
 8006790:	20000c45 	.word	0x20000c45
 8006794:	20000c1f 	.word	0x20000c1f
 8006798:	20000c23 	.word	0x20000c23
 800679c:	20000c49 	.word	0x20000c49
 80067a0:	20000c4c 	.word	0x20000c4c
 80067a4:	40011000 	.word	0x40011000
 80067a8:	20000c62 	.word	0x20000c62
 80067ac:	20000c63 	.word	0x20000c63
 80067b0:	20000c13 	.word	0x20000c13
 80067b4:	20000c41 	.word	0x20000c41
 80067b8:	20000bb8 	.word	0x20000bb8
 80067bc:	20000bc4 	.word	0x20000bc4
 80067c0:	20000c24 	.word	0x20000c24
 80067c4:	20000c14 	.word	0x20000c14
 80067c8:	20000c67 	.word	0x20000c67
 80067cc:	20000c11 	.word	0x20000c11
			} else {
				cerceveVar=0;
 80067d0:	4b7f      	ldr	r3, [pc, #508]	; (80069d0 <checkAktifCalisma+0x5ac>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80067d6:	4b7f      	ldr	r3, [pc, #508]	; (80069d4 <checkAktifCalisma+0x5b0>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d17c      	bne.n	80068d8 <checkAktifCalisma+0x4b4>
 80067de:	4b7e      	ldr	r3, [pc, #504]	; (80069d8 <checkAktifCalisma+0x5b4>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d078      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
 80067e6:	4b7d      	ldr	r3, [pc, #500]	; (80069dc <checkAktifCalisma+0x5b8>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d074      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80067ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067f2:	487b      	ldr	r0, [pc, #492]	; (80069e0 <checkAktifCalisma+0x5bc>)
 80067f4:	f003 f858 	bl	80098a8 <HAL_GPIO_ReadPin>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <checkAktifCalisma+0x3e2>
 80067fe:	4b79      	ldr	r3, [pc, #484]	; (80069e4 <checkAktifCalisma+0x5c0>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d068      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006806:	4b72      	ldr	r3, [pc, #456]	; (80069d0 <checkAktifCalisma+0x5ac>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d064      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
 800680e:	4b76      	ldr	r3, [pc, #472]	; (80069e8 <checkAktifCalisma+0x5c4>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	f083 0301 	eor.w	r3, r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d05d      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800681c:	2104      	movs	r1, #4
 800681e:	4873      	ldr	r0, [pc, #460]	; (80069ec <checkAktifCalisma+0x5c8>)
 8006820:	f003 f842 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <checkAktifCalisma+0x40e>
 800682a:	4b71      	ldr	r3, [pc, #452]	; (80069f0 <checkAktifCalisma+0x5cc>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d152      	bne.n	80068d8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006836:	486a      	ldr	r0, [pc, #424]	; (80069e0 <checkAktifCalisma+0x5bc>)
 8006838:	f003 f836 	bl	80098a8 <HAL_GPIO_ReadPin>
 800683c:	4603      	mov	r3, r0
 800683e:	2b01      	cmp	r3, #1
 8006840:	d10e      	bne.n	8006860 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006846:	4866      	ldr	r0, [pc, #408]	; (80069e0 <checkAktifCalisma+0x5bc>)
 8006848:	f003 f82e 	bl	80098a8 <HAL_GPIO_ReadPin>
 800684c:	4603      	mov	r3, r0
 800684e:	2b01      	cmp	r3, #1
 8006850:	d106      	bne.n	8006860 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006852:	2140      	movs	r1, #64	; 0x40
 8006854:	4865      	ldr	r0, [pc, #404]	; (80069ec <checkAktifCalisma+0x5c8>)
 8006856:	f003 f827 	bl	80098a8 <HAL_GPIO_ReadPin>
 800685a:	4603      	mov	r3, r0
 800685c:	2b01      	cmp	r3, #1
 800685e:	d003      	beq.n	8006868 <checkAktifCalisma+0x444>
 8006860:	4b64      	ldr	r3, [pc, #400]	; (80069f4 <checkAktifCalisma+0x5d0>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d037      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006868:	4b63      	ldr	r3, [pc, #396]	; (80069f8 <checkAktifCalisma+0x5d4>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f083 0301 	eor.w	r3, r3, #1
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d030      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006876:	4b61      	ldr	r3, [pc, #388]	; (80069fc <checkAktifCalisma+0x5d8>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	f083 0301 	eor.w	r3, r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d029      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006884:	4b5e      	ldr	r3, [pc, #376]	; (8006a00 <checkAktifCalisma+0x5dc>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f083 0301 	eor.w	r3, r3, #1
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d022      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006892:	4b5c      	ldr	r3, [pc, #368]	; (8006a04 <checkAktifCalisma+0x5e0>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f083 0301 	eor.w	r3, r3, #1
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01b      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80068a0:	4b59      	ldr	r3, [pc, #356]	; (8006a08 <checkAktifCalisma+0x5e4>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f083 0301 	eor.w	r3, r3, #1
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d014      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80068ae:	4b57      	ldr	r3, [pc, #348]	; (8006a0c <checkAktifCalisma+0x5e8>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	f083 0301 	eor.w	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80068bc:	2201      	movs	r2, #1
 80068be:	2102      	movs	r1, #2
 80068c0:	4847      	ldr	r0, [pc, #284]	; (80069e0 <checkAktifCalisma+0x5bc>)
 80068c2:	f003 f808 	bl	80098d6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80068c6:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <checkAktifCalisma+0x5d0>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80068cc:	4b50      	ldr	r3, [pc, #320]	; (8006a10 <checkAktifCalisma+0x5ec>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80068d2:	4b50      	ldr	r3, [pc, #320]	; (8006a14 <checkAktifCalisma+0x5f0>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80068d8:	4b46      	ldr	r3, [pc, #280]	; (80069f4 <checkAktifCalisma+0x5d0>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d033      	beq.n	8006948 <checkAktifCalisma+0x524>
 80068e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068e4:	483e      	ldr	r0, [pc, #248]	; (80069e0 <checkAktifCalisma+0x5bc>)
 80068e6:	f002 ffdf 	bl	80098a8 <HAL_GPIO_ReadPin>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d106      	bne.n	80068fe <checkAktifCalisma+0x4da>
 80068f0:	4b3c      	ldr	r3, [pc, #240]	; (80069e4 <checkAktifCalisma+0x5c0>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	f083 0301 	eor.w	r3, r3, #1
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <checkAktifCalisma+0x4f0>
 80068fe:	2104      	movs	r1, #4
 8006900:	483a      	ldr	r0, [pc, #232]	; (80069ec <checkAktifCalisma+0x5c8>)
 8006902:	f002 ffd1 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006906:	4603      	mov	r3, r0
 8006908:	2b01      	cmp	r3, #1
 800690a:	d11d      	bne.n	8006948 <checkAktifCalisma+0x524>
 800690c:	4b38      	ldr	r3, [pc, #224]	; (80069f0 <checkAktifCalisma+0x5cc>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d019      	beq.n	8006948 <checkAktifCalisma+0x524>
 8006914:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <checkAktifCalisma+0x5b4>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <checkAktifCalisma+0x524>
 800691c:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <checkAktifCalisma+0x5b8>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d011      	beq.n	8006948 <checkAktifCalisma+0x524>
 8006924:	4b2a      	ldr	r3, [pc, #168]	; (80069d0 <checkAktifCalisma+0x5ac>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00d      	beq.n	8006948 <checkAktifCalisma+0x524>
 800692c:	4b3a      	ldr	r3, [pc, #232]	; (8006a18 <checkAktifCalisma+0x5f4>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f083 0301 	eor.w	r3, r3, #1
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d006      	beq.n	8006948 <checkAktifCalisma+0x524>
			timer2=millis;
 800693a:	4b38      	ldr	r3, [pc, #224]	; (8006a1c <checkAktifCalisma+0x5f8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a38      	ldr	r2, [pc, #224]	; (8006a20 <checkAktifCalisma+0x5fc>)
 8006940:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006942:	4b35      	ldr	r3, [pc, #212]	; (8006a18 <checkAktifCalisma+0x5f4>)
 8006944:	2201      	movs	r2, #1
 8006946:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006948:	4b34      	ldr	r3, [pc, #208]	; (8006a1c <checkAktifCalisma+0x5f8>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <checkAktifCalisma+0x5fc>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a34      	ldr	r2, [pc, #208]	; (8006a24 <checkAktifCalisma+0x600>)
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	4293      	cmp	r3, r2
 8006958:	d303      	bcc.n	8006962 <checkAktifCalisma+0x53e>
 800695a:	4b2f      	ldr	r3, [pc, #188]	; (8006a18 <checkAktifCalisma+0x5f4>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d114      	bne.n	800698c <checkAktifCalisma+0x568>
 8006962:	4b1d      	ldr	r3, [pc, #116]	; (80069d8 <checkAktifCalisma+0x5b4>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f083 0301 	eor.w	r3, r3, #1
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10d      	bne.n	800698c <checkAktifCalisma+0x568>
 8006970:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <checkAktifCalisma+0x5b8>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f083 0301 	eor.w	r3, r3, #1
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <checkAktifCalisma+0x568>
 800697e:	4b14      	ldr	r3, [pc, #80]	; (80069d0 <checkAktifCalisma+0x5ac>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	f083 0301 	eor.w	r3, r3, #1
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800698c:	2200      	movs	r2, #0
 800698e:	2102      	movs	r1, #2
 8006990:	4813      	ldr	r0, [pc, #76]	; (80069e0 <checkAktifCalisma+0x5bc>)
 8006992:	f002 ffa0 	bl	80098d6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006996:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <checkAktifCalisma+0x5d0>)
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800699c:	4b1e      	ldr	r3, [pc, #120]	; (8006a18 <checkAktifCalisma+0x5f4>)
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <checkAktifCalisma+0x5d0>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d040      	beq.n	8006a2c <checkAktifCalisma+0x608>
 80069aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069ae:	480f      	ldr	r0, [pc, #60]	; (80069ec <checkAktifCalisma+0x5c8>)
 80069b0:	f002 ff7a 	bl	80098a8 <HAL_GPIO_ReadPin>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d138      	bne.n	8006a2c <checkAktifCalisma+0x608>
 80069ba:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <checkAktifCalisma+0x604>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d034      	beq.n	8006a2c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80069c2:	2201      	movs	r2, #1
 80069c4:	2101      	movs	r1, #1
 80069c6:	4806      	ldr	r0, [pc, #24]	; (80069e0 <checkAktifCalisma+0x5bc>)
 80069c8:	f002 ff85 	bl	80098d6 <HAL_GPIO_WritePin>
 80069cc:	e033      	b.n	8006a36 <checkAktifCalisma+0x612>
 80069ce:	bf00      	nop
 80069d0:	20000c67 	.word	0x20000c67
 80069d4:	20000c2d 	.word	0x20000c2d
 80069d8:	20000c62 	.word	0x20000c62
 80069dc:	20000c63 	.word	0x20000c63
 80069e0:	40010c00 	.word	0x40010c00
 80069e4:	20000c4d 	.word	0x20000c4d
 80069e8:	20000c61 	.word	0x20000c61
 80069ec:	40011000 	.word	0x40011000
 80069f0:	20000c16 	.word	0x20000c16
 80069f4:	20000c48 	.word	0x20000c48
 80069f8:	20000c45 	.word	0x20000c45
 80069fc:	20000c49 	.word	0x20000c49
 8006a00:	20000c46 	.word	0x20000c46
 8006a04:	20000c47 	.word	0x20000c47
 8006a08:	20000c4a 	.word	0x20000c4a
 8006a0c:	20000c4b 	.word	0x20000c4b
 8006a10:	20000c50 	.word	0x20000c50
 8006a14:	20000c71 	.word	0x20000c71
 8006a18:	20000c40 	.word	0x20000c40
 8006a1c:	20000bb8 	.word	0x20000bb8
 8006a20:	20000bc4 	.word	0x20000bc4
 8006a24:	20000c25 	.word	0x20000c25
 8006a28:	20000c15 	.word	0x20000c15
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4836      	ldr	r0, [pc, #216]	; (8006b0c <checkAktifCalisma+0x6e8>)
 8006a32:	f002 ff50 	bl	80098d6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <checkAktifCalisma+0x6ec>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 8080 	bne.w	8006b40 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006a40:	4b34      	ldr	r3, [pc, #208]	; (8006b14 <checkAktifCalisma+0x6f0>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d003      	beq.n	8006a50 <checkAktifCalisma+0x62c>
 8006a48:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <checkAktifCalisma+0x6f0>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d177      	bne.n	8006b40 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006a50:	4b31      	ldr	r3, [pc, #196]	; (8006b18 <checkAktifCalisma+0x6f4>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d073      	beq.n	8006b40 <checkAktifCalisma+0x71c>
 8006a58:	4b30      	ldr	r3, [pc, #192]	; (8006b1c <checkAktifCalisma+0x6f8>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d06f      	beq.n	8006b40 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a64:	4829      	ldr	r0, [pc, #164]	; (8006b0c <checkAktifCalisma+0x6e8>)
 8006a66:	f002 ff1f 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d167      	bne.n	8006b40 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a74:	482a      	ldr	r0, [pc, #168]	; (8006b20 <checkAktifCalisma+0x6fc>)
 8006a76:	f002 ff17 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <checkAktifCalisma+0x664>
 8006a80:	4b28      	ldr	r3, [pc, #160]	; (8006b24 <checkAktifCalisma+0x700>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d15b      	bne.n	8006b40 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006a88:	2140      	movs	r1, #64	; 0x40
 8006a8a:	4825      	ldr	r0, [pc, #148]	; (8006b20 <checkAktifCalisma+0x6fc>)
 8006a8c:	f002 ff0c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d10f      	bne.n	8006ab6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a9a:	481c      	ldr	r0, [pc, #112]	; (8006b0c <checkAktifCalisma+0x6e8>)
 8006a9c:	f002 ff04 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d107      	bne.n	8006ab6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006aaa:	4818      	ldr	r0, [pc, #96]	; (8006b0c <checkAktifCalisma+0x6e8>)
 8006aac:	f002 fefc 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d003      	beq.n	8006abe <checkAktifCalisma+0x69a>
 8006ab6:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <checkAktifCalisma+0x704>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d040      	beq.n	8006b40 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006abe:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <checkAktifCalisma+0x708>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f083 0301 	eor.w	r3, r3, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d039      	beq.n	8006b40 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006acc:	4b18      	ldr	r3, [pc, #96]	; (8006b30 <checkAktifCalisma+0x70c>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	f083 0301 	eor.w	r3, r3, #1
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d032      	beq.n	8006b40 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006ada:	4b16      	ldr	r3, [pc, #88]	; (8006b34 <checkAktifCalisma+0x710>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f083 0301 	eor.w	r3, r3, #1
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02b      	beq.n	8006b40 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006ae8:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <checkAktifCalisma+0x714>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	f083 0301 	eor.w	r3, r3, #1
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d024      	beq.n	8006b40 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006af6:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <checkAktifCalisma+0x718>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f083 0301 	eor.w	r3, r3, #1
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01d      	beq.n	8006b40 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006b04:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <checkAktifCalisma+0x704>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e01c      	b.n	8006b46 <checkAktifCalisma+0x722>
 8006b0c:	40010c00 	.word	0x40010c00
 8006b10:	20000c2d 	.word	0x20000c2d
 8006b14:	20000c1f 	.word	0x20000c1f
 8006b18:	20000c62 	.word	0x20000c62
 8006b1c:	20000c63 	.word	0x20000c63
 8006b20:	40011000 	.word	0x40011000
 8006b24:	20000c20 	.word	0x20000c20
 8006b28:	20000c46 	.word	0x20000c46
 8006b2c:	20000c45 	.word	0x20000c45
 8006b30:	20000c49 	.word	0x20000c49
 8006b34:	20000c48 	.word	0x20000c48
 8006b38:	20000c47 	.word	0x20000c47
 8006b3c:	20000c4b 	.word	0x20000c4b
		} else {
			devmotoryukaricalisiyor=0;
 8006b40:	4b64      	ldr	r3, [pc, #400]	; (8006cd4 <checkAktifCalisma+0x8b0>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006b46:	4b63      	ldr	r3, [pc, #396]	; (8006cd4 <checkAktifCalisma+0x8b0>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006b4e:	2201      	movs	r2, #1
 8006b50:	2120      	movs	r1, #32
 8006b52:	4861      	ldr	r0, [pc, #388]	; (8006cd8 <checkAktifCalisma+0x8b4>)
 8006b54:	f002 febf 	bl	80098d6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006b58:	4b60      	ldr	r3, [pc, #384]	; (8006cdc <checkAktifCalisma+0x8b8>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006b5e:	4b5f      	ldr	r3, [pc, #380]	; (8006cdc <checkAktifCalisma+0x8b8>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d025      	beq.n	8006bb2 <checkAktifCalisma+0x78e>
 8006b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b6a:	485d      	ldr	r0, [pc, #372]	; (8006ce0 <checkAktifCalisma+0x8bc>)
 8006b6c:	f002 fe9c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d007      	beq.n	8006b86 <checkAktifCalisma+0x762>
 8006b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b7a:	4857      	ldr	r0, [pc, #348]	; (8006cd8 <checkAktifCalisma+0x8b4>)
 8006b7c:	f002 fe94 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d115      	bne.n	8006bb2 <checkAktifCalisma+0x78e>
 8006b86:	4b57      	ldr	r3, [pc, #348]	; (8006ce4 <checkAktifCalisma+0x8c0>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d011      	beq.n	8006bb2 <checkAktifCalisma+0x78e>
 8006b8e:	4b56      	ldr	r3, [pc, #344]	; (8006ce8 <checkAktifCalisma+0x8c4>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <checkAktifCalisma+0x78e>
 8006b96:	4b55      	ldr	r3, [pc, #340]	; (8006cec <checkAktifCalisma+0x8c8>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f083 0301 	eor.w	r3, r3, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d006      	beq.n	8006bb2 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006ba4:	4b52      	ldr	r3, [pc, #328]	; (8006cf0 <checkAktifCalisma+0x8cc>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a52      	ldr	r2, [pc, #328]	; (8006cf4 <checkAktifCalisma+0x8d0>)
 8006baa:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006bac:	4b4f      	ldr	r3, [pc, #316]	; (8006cec <checkAktifCalisma+0x8c8>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006bb2:	4b4f      	ldr	r3, [pc, #316]	; (8006cf0 <checkAktifCalisma+0x8cc>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4b4f      	ldr	r3, [pc, #316]	; (8006cf4 <checkAktifCalisma+0x8d0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	4a4e      	ldr	r2, [pc, #312]	; (8006cf8 <checkAktifCalisma+0x8d4>)
 8006bbe:	7812      	ldrb	r2, [r2, #0]
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d303      	bcc.n	8006bcc <checkAktifCalisma+0x7a8>
 8006bc4:	4b49      	ldr	r3, [pc, #292]	; (8006cec <checkAktifCalisma+0x8c8>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10d      	bne.n	8006be8 <checkAktifCalisma+0x7c4>
 8006bcc:	4b45      	ldr	r3, [pc, #276]	; (8006ce4 <checkAktifCalisma+0x8c0>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f083 0301 	eor.w	r3, r3, #1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <checkAktifCalisma+0x7c4>
 8006bda:	4b43      	ldr	r3, [pc, #268]	; (8006ce8 <checkAktifCalisma+0x8c4>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f083 0301 	eor.w	r3, r3, #1
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006be8:	2200      	movs	r2, #0
 8006bea:	2120      	movs	r1, #32
 8006bec:	483a      	ldr	r0, [pc, #232]	; (8006cd8 <checkAktifCalisma+0x8b4>)
 8006bee:	f002 fe72 	bl	80098d6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006bf2:	4b3a      	ldr	r3, [pc, #232]	; (8006cdc <checkAktifCalisma+0x8b8>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006bf8:	4b3c      	ldr	r3, [pc, #240]	; (8006cec <checkAktifCalisma+0x8c8>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006bfe:	4b3f      	ldr	r3, [pc, #252]	; (8006cfc <checkAktifCalisma+0x8d8>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f040 8088 	bne.w	8006d18 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006c08:	4b3d      	ldr	r3, [pc, #244]	; (8006d00 <checkAktifCalisma+0x8dc>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d003      	beq.n	8006c18 <checkAktifCalisma+0x7f4>
 8006c10:	4b3b      	ldr	r3, [pc, #236]	; (8006d00 <checkAktifCalisma+0x8dc>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d17f      	bne.n	8006d18 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006c18:	4b32      	ldr	r3, [pc, #200]	; (8006ce4 <checkAktifCalisma+0x8c0>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d07b      	beq.n	8006d18 <checkAktifCalisma+0x8f4>
 8006c20:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <checkAktifCalisma+0x8c4>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d077      	beq.n	8006d18 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006c28:	2140      	movs	r1, #64	; 0x40
 8006c2a:	482b      	ldr	r0, [pc, #172]	; (8006cd8 <checkAktifCalisma+0x8b4>)
 8006c2c:	f002 fe3c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d170      	bne.n	8006d18 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c3a:	4827      	ldr	r0, [pc, #156]	; (8006cd8 <checkAktifCalisma+0x8b4>)
 8006c3c:	f002 fe34 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <checkAktifCalisma+0x82a>
 8006c46:	4b2f      	ldr	r3, [pc, #188]	; (8006d04 <checkAktifCalisma+0x8e0>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d164      	bne.n	8006d18 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c52:	4823      	ldr	r0, [pc, #140]	; (8006ce0 <checkAktifCalisma+0x8bc>)
 8006c54:	f002 fe28 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d10f      	bne.n	8006c7e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c62:	481f      	ldr	r0, [pc, #124]	; (8006ce0 <checkAktifCalisma+0x8bc>)
 8006c64:	f002 fe20 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d107      	bne.n	8006c7e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c72:	481b      	ldr	r0, [pc, #108]	; (8006ce0 <checkAktifCalisma+0x8bc>)
 8006c74:	f002 fe18 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d003      	beq.n	8006c86 <checkAktifCalisma+0x862>
 8006c7e:	4b22      	ldr	r3, [pc, #136]	; (8006d08 <checkAktifCalisma+0x8e4>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d048      	beq.n	8006d18 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006c86:	4b21      	ldr	r3, [pc, #132]	; (8006d0c <checkAktifCalisma+0x8e8>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f083 0301 	eor.w	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d041      	beq.n	8006d18 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006c94:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <checkAktifCalisma+0x8ec>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f083 0301 	eor.w	r3, r3, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d03a      	beq.n	8006d18 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006ca2:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <checkAktifCalisma+0x8f0>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	f083 0301 	eor.w	r3, r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d033      	beq.n	8006d18 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <checkAktifCalisma+0x8b8>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f083 0301 	eor.w	r3, r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d02c      	beq.n	8006d18 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <checkAktifCalisma+0x8b0>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	f083 0301 	eor.w	r3, r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d025      	beq.n	8006d18 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <checkAktifCalisma+0x8e4>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	e024      	b.n	8006d1e <checkAktifCalisma+0x8fa>
 8006cd4:	20000c46 	.word	0x20000c46
 8006cd8:	40011000 	.word	0x40011000
 8006cdc:	20000c4a 	.word	0x20000c4a
 8006ce0:	40010c00 	.word	0x40010c00
 8006ce4:	20000c62 	.word	0x20000c62
 8006ce8:	20000c63 	.word	0x20000c63
 8006cec:	20000c42 	.word	0x20000c42
 8006cf0:	20000bb8 	.word	0x20000bb8
 8006cf4:	20000bc4 	.word	0x20000bc4
 8006cf8:	20000c26 	.word	0x20000c26
 8006cfc:	20000c2d 	.word	0x20000c2d
 8006d00:	20000c1f 	.word	0x20000c1f
 8006d04:	20000c21 	.word	0x20000c21
 8006d08:	20000c47 	.word	0x20000c47
 8006d0c:	20000c45 	.word	0x20000c45
 8006d10:	20000c49 	.word	0x20000c49
 8006d14:	20000c48 	.word	0x20000c48
		} else {
			devmotorasagicalisiyor=0;
 8006d18:	4b96      	ldr	r3, [pc, #600]	; (8006f74 <checkAktifCalisma+0xb50>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006d1e:	4b95      	ldr	r3, [pc, #596]	; (8006f74 <checkAktifCalisma+0xb50>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006d26:	2201      	movs	r2, #1
 8006d28:	2110      	movs	r1, #16
 8006d2a:	4893      	ldr	r0, [pc, #588]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006d2c:	f002 fdd3 	bl	80098d6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006d30:	4b92      	ldr	r3, [pc, #584]	; (8006f7c <checkAktifCalisma+0xb58>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006d36:	4b91      	ldr	r3, [pc, #580]	; (8006f7c <checkAktifCalisma+0xb58>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d024      	beq.n	8006d88 <checkAktifCalisma+0x964>
 8006d3e:	2140      	movs	r1, #64	; 0x40
 8006d40:	488d      	ldr	r0, [pc, #564]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006d42:	f002 fdb1 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d007      	beq.n	8006d5c <checkAktifCalisma+0x938>
 8006d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d50:	4889      	ldr	r0, [pc, #548]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006d52:	f002 fda9 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d115      	bne.n	8006d88 <checkAktifCalisma+0x964>
 8006d5c:	4b88      	ldr	r3, [pc, #544]	; (8006f80 <checkAktifCalisma+0xb5c>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d011      	beq.n	8006d88 <checkAktifCalisma+0x964>
 8006d64:	4b87      	ldr	r3, [pc, #540]	; (8006f84 <checkAktifCalisma+0xb60>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00d      	beq.n	8006d88 <checkAktifCalisma+0x964>
 8006d6c:	4b86      	ldr	r3, [pc, #536]	; (8006f88 <checkAktifCalisma+0xb64>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	f083 0301 	eor.w	r3, r3, #1
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d006      	beq.n	8006d88 <checkAktifCalisma+0x964>
			timer2=millis;
 8006d7a:	4b84      	ldr	r3, [pc, #528]	; (8006f8c <checkAktifCalisma+0xb68>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a84      	ldr	r2, [pc, #528]	; (8006f90 <checkAktifCalisma+0xb6c>)
 8006d80:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006d82:	4b81      	ldr	r3, [pc, #516]	; (8006f88 <checkAktifCalisma+0xb64>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006d88:	4b80      	ldr	r3, [pc, #512]	; (8006f8c <checkAktifCalisma+0xb68>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b80      	ldr	r3, [pc, #512]	; (8006f90 <checkAktifCalisma+0xb6c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	4a80      	ldr	r2, [pc, #512]	; (8006f94 <checkAktifCalisma+0xb70>)
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d303      	bcc.n	8006da2 <checkAktifCalisma+0x97e>
 8006d9a:	4b7b      	ldr	r3, [pc, #492]	; (8006f88 <checkAktifCalisma+0xb64>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10d      	bne.n	8006dbe <checkAktifCalisma+0x99a>
 8006da2:	4b77      	ldr	r3, [pc, #476]	; (8006f80 <checkAktifCalisma+0xb5c>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f083 0301 	eor.w	r3, r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <checkAktifCalisma+0x99a>
 8006db0:	4b74      	ldr	r3, [pc, #464]	; (8006f84 <checkAktifCalisma+0xb60>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	f083 0301 	eor.w	r3, r3, #1
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2110      	movs	r1, #16
 8006dc2:	486d      	ldr	r0, [pc, #436]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006dc4:	f002 fd87 	bl	80098d6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006dc8:	4b6c      	ldr	r3, [pc, #432]	; (8006f7c <checkAktifCalisma+0xb58>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006dce:	4b6e      	ldr	r3, [pc, #440]	; (8006f88 <checkAktifCalisma+0xb64>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dd8:	486f      	ldr	r0, [pc, #444]	; (8006f98 <checkAktifCalisma+0xb74>)
 8006dda:	f002 fd65 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d120      	bne.n	8006e26 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006de8:	486b      	ldr	r0, [pc, #428]	; (8006f98 <checkAktifCalisma+0xb74>)
 8006dea:	f002 fd5d 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d118      	bne.n	8006e26 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006df4:	2104      	movs	r1, #4
 8006df6:	4868      	ldr	r0, [pc, #416]	; (8006f98 <checkAktifCalisma+0xb74>)
 8006df8:	f002 fd56 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d111      	bne.n	8006e26 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006e02:	2102      	movs	r1, #2
 8006e04:	4864      	ldr	r0, [pc, #400]	; (8006f98 <checkAktifCalisma+0xb74>)
 8006e06:	f002 fd4f 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006e10:	2101      	movs	r1, #1
 8006e12:	4861      	ldr	r0, [pc, #388]	; (8006f98 <checkAktifCalisma+0xb74>)
 8006e14:	f002 fd48 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006e1e:	4b5f      	ldr	r3, [pc, #380]	; (8006f9c <checkAktifCalisma+0xb78>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	e002      	b.n	8006e2c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006e26:	4b5d      	ldr	r3, [pc, #372]	; (8006f9c <checkAktifCalisma+0xb78>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006e2c:	4b5c      	ldr	r3, [pc, #368]	; (8006fa0 <checkAktifCalisma+0xb7c>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d144      	bne.n	8006ebe <checkAktifCalisma+0xa9a>
 8006e34:	4b5b      	ldr	r3, [pc, #364]	; (8006fa4 <checkAktifCalisma+0xb80>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d003      	beq.n	8006e44 <checkAktifCalisma+0xa20>
 8006e3c:	4b59      	ldr	r3, [pc, #356]	; (8006fa4 <checkAktifCalisma+0xb80>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d13c      	bne.n	8006ebe <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006e44:	2180      	movs	r1, #128	; 0x80
 8006e46:	484c      	ldr	r0, [pc, #304]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006e48:	f002 fd2e 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <checkAktifCalisma+0xa36>
 8006e52:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <checkAktifCalisma+0xb84>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00b      	beq.n	8006e72 <checkAktifCalisma+0xa4e>
 8006e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e5e:	484e      	ldr	r0, [pc, #312]	; (8006f98 <checkAktifCalisma+0xb74>)
 8006e60:	f002 fd22 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d129      	bne.n	8006ebe <checkAktifCalisma+0xa9a>
 8006e6a:	4b4f      	ldr	r3, [pc, #316]	; (8006fa8 <checkAktifCalisma+0xb84>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d125      	bne.n	8006ebe <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006e72:	2104      	movs	r1, #4
 8006e74:	4840      	ldr	r0, [pc, #256]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006e76:	f002 fd17 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d003      	beq.n	8006e88 <checkAktifCalisma+0xa64>
 8006e80:	4b4a      	ldr	r3, [pc, #296]	; (8006fac <checkAktifCalisma+0xb88>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11a      	bne.n	8006ebe <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006e88:	2102      	movs	r1, #2
 8006e8a:	483b      	ldr	r0, [pc, #236]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006e8c:	f002 fd0c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d113      	bne.n	8006ebe <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006e96:	4b46      	ldr	r3, [pc, #280]	; (8006fb0 <checkAktifCalisma+0xb8c>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	f083 0301 	eor.w	r3, r3, #1
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00c      	beq.n	8006ebe <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006ea4:	4b3d      	ldr	r3, [pc, #244]	; (8006f9c <checkAktifCalisma+0xb78>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006eac:	4b41      	ldr	r3, [pc, #260]	; (8006fb4 <checkAktifCalisma+0xb90>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006eb2:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <checkAktifCalisma+0xb68>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a40      	ldr	r2, [pc, #256]	; (8006fb8 <checkAktifCalisma+0xb94>)
 8006eb8:	6013      	str	r3, [r2, #0]
			bekle();
 8006eba:	f7ff f87d 	bl	8005fb8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006ebe:	4b33      	ldr	r3, [pc, #204]	; (8006f8c <checkAktifCalisma+0xb68>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b3d      	ldr	r3, [pc, #244]	; (8006fb8 <checkAktifCalisma+0xb94>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	4a3c      	ldr	r2, [pc, #240]	; (8006fbc <checkAktifCalisma+0xb98>)
 8006eca:	7812      	ldrb	r2, [r2, #0]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d211      	bcs.n	8006ef4 <checkAktifCalisma+0xad0>
 8006ed0:	2104      	movs	r1, #4
 8006ed2:	4829      	ldr	r0, [pc, #164]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006ed4:	f002 fce8 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <checkAktifCalisma+0xad0>
 8006ede:	4b33      	ldr	r3, [pc, #204]	; (8006fac <checkAktifCalisma+0xb88>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d006      	beq.n	8006ef4 <checkAktifCalisma+0xad0>
 8006ee6:	4b2d      	ldr	r3, [pc, #180]	; (8006f9c <checkAktifCalisma+0xb78>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	f083 0301 	eor.w	r3, r3, #1
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006ef4:	4b2f      	ldr	r3, [pc, #188]	; (8006fb4 <checkAktifCalisma+0xb90>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006efa:	4b29      	ldr	r3, [pc, #164]	; (8006fa0 <checkAktifCalisma+0xb7c>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d160      	bne.n	8006fc4 <checkAktifCalisma+0xba0>
 8006f02:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <checkAktifCalisma+0xb80>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d003      	beq.n	8006f12 <checkAktifCalisma+0xaee>
 8006f0a:	4b26      	ldr	r3, [pc, #152]	; (8006fa4 <checkAktifCalisma+0xb80>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d158      	bne.n	8006fc4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f12:	2104      	movs	r1, #4
 8006f14:	4818      	ldr	r0, [pc, #96]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006f16:	f002 fcc7 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d003      	beq.n	8006f28 <checkAktifCalisma+0xb04>
 8006f20:	4b22      	ldr	r3, [pc, #136]	; (8006fac <checkAktifCalisma+0xb88>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d14d      	bne.n	8006fc4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f28:	2102      	movs	r1, #2
 8006f2a:	4813      	ldr	r0, [pc, #76]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006f2c:	f002 fcbc 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d146      	bne.n	8006fc4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f36:	2180      	movs	r1, #128	; 0x80
 8006f38:	480f      	ldr	r0, [pc, #60]	; (8006f78 <checkAktifCalisma+0xb54>)
 8006f3a:	f002 fcb5 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d103      	bne.n	8006f4c <checkAktifCalisma+0xb28>
 8006f44:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <checkAktifCalisma+0xb84>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <checkAktifCalisma+0xb40>
 8006f4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f50:	4811      	ldr	r0, [pc, #68]	; (8006f98 <checkAktifCalisma+0xb74>)
 8006f52:	f002 fca9 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d133      	bne.n	8006fc4 <checkAktifCalisma+0xba0>
 8006f5c:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <checkAktifCalisma+0xb84>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d12f      	bne.n	8006fc4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006f64:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <checkAktifCalisma+0xb78>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d02b      	beq.n	8006fc4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <checkAktifCalisma+0xb9c>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e02a      	b.n	8006fca <checkAktifCalisma+0xba6>
 8006f74:	20000c47 	.word	0x20000c47
 8006f78:	40011000 	.word	0x40011000
 8006f7c:	20000c4b 	.word	0x20000c4b
 8006f80:	20000c62 	.word	0x20000c62
 8006f84:	20000c63 	.word	0x20000c63
 8006f88:	20000c43 	.word	0x20000c43
 8006f8c:	20000bb8 	.word	0x20000bb8
 8006f90:	20000bc4 	.word	0x20000bc4
 8006f94:	20000c26 	.word	0x20000c26
 8006f98:	40010c00 	.word	0x40010c00
 8006f9c:	20000c52 	.word	0x20000c52
 8006fa0:	20000c19 	.word	0x20000c19
 8006fa4:	20000c18 	.word	0x20000c18
 8006fa8:	20000c1c 	.word	0x20000c1c
 8006fac:	20000c16 	.word	0x20000c16
 8006fb0:	20000c3f 	.word	0x20000c3f
 8006fb4:	20000c53 	.word	0x20000c53
 8006fb8:	20000bbc 	.word	0x20000bbc
 8006fbc:	20000c29 	.word	0x20000c29
 8006fc0:	20000c54 	.word	0x20000c54
		} else {
			kapi1butonkontrol=0;
 8006fc4:	4b8b      	ldr	r3, [pc, #556]	; (80071f4 <checkAktifCalisma+0xdd0>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fca:	4b8b      	ldr	r3, [pc, #556]	; (80071f8 <checkAktifCalisma+0xdd4>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d121      	bne.n	8007016 <checkAktifCalisma+0xbf2>
 8006fd2:	4b8a      	ldr	r3, [pc, #552]	; (80071fc <checkAktifCalisma+0xdd8>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d003      	beq.n	8006fe2 <checkAktifCalisma+0xbbe>
 8006fda:	4b88      	ldr	r3, [pc, #544]	; (80071fc <checkAktifCalisma+0xdd8>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d119      	bne.n	8007016 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006fe2:	2104      	movs	r1, #4
 8006fe4:	4886      	ldr	r0, [pc, #536]	; (8007200 <checkAktifCalisma+0xddc>)
 8006fe6:	f002 fc5f 	bl	80098a8 <HAL_GPIO_ReadPin>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d003      	beq.n	8006ff8 <checkAktifCalisma+0xbd4>
 8006ff0:	4b84      	ldr	r3, [pc, #528]	; (8007204 <checkAktifCalisma+0xde0>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10e      	bne.n	8007016 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	4881      	ldr	r0, [pc, #516]	; (8007200 <checkAktifCalisma+0xddc>)
 8006ffc:	f002 fc54 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d107      	bne.n	8007016 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8007006:	4b80      	ldr	r3, [pc, #512]	; (8007208 <checkAktifCalisma+0xde4>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800700e:	4b7f      	ldr	r3, [pc, #508]	; (800720c <checkAktifCalisma+0xde8>)
 8007010:	2201      	movs	r2, #1
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	e002      	b.n	800701c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8007016:	4b7d      	ldr	r3, [pc, #500]	; (800720c <checkAktifCalisma+0xde8>)
 8007018:	2200      	movs	r2, #0
 800701a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800701c:	4b75      	ldr	r3, [pc, #468]	; (80071f4 <checkAktifCalisma+0xdd0>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <checkAktifCalisma+0xc10>
 8007024:	4b79      	ldr	r3, [pc, #484]	; (800720c <checkAktifCalisma+0xde8>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d103      	bne.n	8007034 <checkAktifCalisma+0xc10>
 800702c:	4b78      	ldr	r3, [pc, #480]	; (8007210 <checkAktifCalisma+0xdec>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007034:	2201      	movs	r2, #1
 8007036:	2180      	movs	r1, #128	; 0x80
 8007038:	4876      	ldr	r0, [pc, #472]	; (8007214 <checkAktifCalisma+0xdf0>)
 800703a:	f002 fc4c 	bl	80098d6 <HAL_GPIO_WritePin>
 800703e:	e004      	b.n	800704a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007040:	2200      	movs	r2, #0
 8007042:	2180      	movs	r1, #128	; 0x80
 8007044:	4873      	ldr	r0, [pc, #460]	; (8007214 <checkAktifCalisma+0xdf0>)
 8007046:	f002 fc46 	bl	80098d6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800704a:	4b73      	ldr	r3, [pc, #460]	; (8007218 <checkAktifCalisma+0xdf4>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d141      	bne.n	80070d6 <checkAktifCalisma+0xcb2>
 8007052:	4b6a      	ldr	r3, [pc, #424]	; (80071fc <checkAktifCalisma+0xdd8>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d003      	beq.n	8007062 <checkAktifCalisma+0xc3e>
 800705a:	4b68      	ldr	r3, [pc, #416]	; (80071fc <checkAktifCalisma+0xdd8>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b03      	cmp	r3, #3
 8007060:	d139      	bne.n	80070d6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007066:	4866      	ldr	r0, [pc, #408]	; (8007200 <checkAktifCalisma+0xddc>)
 8007068:	f002 fc1e 	bl	80098a8 <HAL_GPIO_ReadPin>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <checkAktifCalisma+0xc56>
 8007072:	4b6a      	ldr	r3, [pc, #424]	; (800721c <checkAktifCalisma+0xdf8>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <checkAktifCalisma+0xc6e>
 800707a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800707e:	4868      	ldr	r0, [pc, #416]	; (8007220 <checkAktifCalisma+0xdfc>)
 8007080:	f002 fc12 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d125      	bne.n	80070d6 <checkAktifCalisma+0xcb2>
 800708a:	4b64      	ldr	r3, [pc, #400]	; (800721c <checkAktifCalisma+0xdf8>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d121      	bne.n	80070d6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007092:	2102      	movs	r1, #2
 8007094:	485a      	ldr	r0, [pc, #360]	; (8007200 <checkAktifCalisma+0xddc>)
 8007096:	f002 fc07 	bl	80098a8 <HAL_GPIO_ReadPin>
 800709a:	4603      	mov	r3, r0
 800709c:	2b01      	cmp	r3, #1
 800709e:	d11a      	bne.n	80070d6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80070a0:	2104      	movs	r1, #4
 80070a2:	4857      	ldr	r0, [pc, #348]	; (8007200 <checkAktifCalisma+0xddc>)
 80070a4:	f002 fc00 	bl	80098a8 <HAL_GPIO_ReadPin>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d113      	bne.n	80070d6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80070ae:	4b56      	ldr	r3, [pc, #344]	; (8007208 <checkAktifCalisma+0xde4>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00f      	beq.n	80070d6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80070b6:	4b5b      	ldr	r3, [pc, #364]	; (8007224 <checkAktifCalisma+0xe00>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f083 0301 	eor.w	r3, r3, #1
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d008      	beq.n	80070d6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80070c4:	4b58      	ldr	r3, [pc, #352]	; (8007228 <checkAktifCalisma+0xe04>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80070ca:	4b58      	ldr	r3, [pc, #352]	; (800722c <checkAktifCalisma+0xe08>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a58      	ldr	r2, [pc, #352]	; (8007230 <checkAktifCalisma+0xe0c>)
 80070d0:	6013      	str	r3, [r2, #0]
			bekle();
 80070d2:	f7fe ff71 	bl	8005fb8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80070d6:	4b55      	ldr	r3, [pc, #340]	; (800722c <checkAktifCalisma+0xe08>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4b55      	ldr	r3, [pc, #340]	; (8007230 <checkAktifCalisma+0xe0c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	4a54      	ldr	r2, [pc, #336]	; (8007234 <checkAktifCalisma+0xe10>)
 80070e2:	7812      	ldrb	r2, [r2, #0]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d20d      	bcs.n	8007104 <checkAktifCalisma+0xce0>
 80070e8:	2102      	movs	r1, #2
 80070ea:	4845      	ldr	r0, [pc, #276]	; (8007200 <checkAktifCalisma+0xddc>)
 80070ec:	f002 fbdc 	bl	80098a8 <HAL_GPIO_ReadPin>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d006      	beq.n	8007104 <checkAktifCalisma+0xce0>
 80070f6:	4b44      	ldr	r3, [pc, #272]	; (8007208 <checkAktifCalisma+0xde4>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	f083 0301 	eor.w	r3, r3, #1
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007104:	4b48      	ldr	r3, [pc, #288]	; (8007228 <checkAktifCalisma+0xe04>)
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800710a:	4b43      	ldr	r3, [pc, #268]	; (8007218 <checkAktifCalisma+0xdf4>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d135      	bne.n	800717e <checkAktifCalisma+0xd5a>
 8007112:	4b3a      	ldr	r3, [pc, #232]	; (80071fc <checkAktifCalisma+0xdd8>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d003      	beq.n	8007122 <checkAktifCalisma+0xcfe>
 800711a:	4b38      	ldr	r3, [pc, #224]	; (80071fc <checkAktifCalisma+0xdd8>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b03      	cmp	r3, #3
 8007120:	d12d      	bne.n	800717e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007126:	4836      	ldr	r0, [pc, #216]	; (8007200 <checkAktifCalisma+0xddc>)
 8007128:	f002 fbbe 	bl	80098a8 <HAL_GPIO_ReadPin>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <checkAktifCalisma+0xd16>
 8007132:	4b3a      	ldr	r3, [pc, #232]	; (800721c <checkAktifCalisma+0xdf8>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <checkAktifCalisma+0xd2e>
 800713a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800713e:	4838      	ldr	r0, [pc, #224]	; (8007220 <checkAktifCalisma+0xdfc>)
 8007140:	f002 fbb2 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d119      	bne.n	800717e <checkAktifCalisma+0xd5a>
 800714a:	4b34      	ldr	r3, [pc, #208]	; (800721c <checkAktifCalisma+0xdf8>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d115      	bne.n	800717e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007152:	2102      	movs	r1, #2
 8007154:	482a      	ldr	r0, [pc, #168]	; (8007200 <checkAktifCalisma+0xddc>)
 8007156:	f002 fba7 	bl	80098a8 <HAL_GPIO_ReadPin>
 800715a:	4603      	mov	r3, r0
 800715c:	2b01      	cmp	r3, #1
 800715e:	d10e      	bne.n	800717e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007160:	2104      	movs	r1, #4
 8007162:	4827      	ldr	r0, [pc, #156]	; (8007200 <checkAktifCalisma+0xddc>)
 8007164:	f002 fba0 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d107      	bne.n	800717e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800716e:	4b26      	ldr	r3, [pc, #152]	; (8007208 <checkAktifCalisma+0xde4>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8007176:	4b30      	ldr	r3, [pc, #192]	; (8007238 <checkAktifCalisma+0xe14>)
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e002      	b.n	8007184 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800717e:	4b2e      	ldr	r3, [pc, #184]	; (8007238 <checkAktifCalisma+0xe14>)
 8007180:	2200      	movs	r2, #0
 8007182:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007184:	4b24      	ldr	r3, [pc, #144]	; (8007218 <checkAktifCalisma+0xdf4>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d11d      	bne.n	80071c8 <checkAktifCalisma+0xda4>
 800718c:	4b1b      	ldr	r3, [pc, #108]	; (80071fc <checkAktifCalisma+0xdd8>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d003      	beq.n	800719c <checkAktifCalisma+0xd78>
 8007194:	4b19      	ldr	r3, [pc, #100]	; (80071fc <checkAktifCalisma+0xdd8>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d115      	bne.n	80071c8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800719c:	2102      	movs	r1, #2
 800719e:	4818      	ldr	r0, [pc, #96]	; (8007200 <checkAktifCalisma+0xddc>)
 80071a0:	f002 fb82 	bl	80098a8 <HAL_GPIO_ReadPin>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d10e      	bne.n	80071c8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80071aa:	2104      	movs	r1, #4
 80071ac:	4814      	ldr	r0, [pc, #80]	; (8007200 <checkAktifCalisma+0xddc>)
 80071ae:	f002 fb7b 	bl	80098a8 <HAL_GPIO_ReadPin>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d107      	bne.n	80071c8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <checkAktifCalisma+0xde4>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80071c0:	4b1e      	ldr	r3, [pc, #120]	; (800723c <checkAktifCalisma+0xe18>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e002      	b.n	80071ce <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80071c8:	4b1c      	ldr	r3, [pc, #112]	; (800723c <checkAktifCalisma+0xe18>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80071ce:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <checkAktifCalisma+0xe14>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d107      	bne.n	80071e6 <checkAktifCalisma+0xdc2>
 80071d6:	4b19      	ldr	r3, [pc, #100]	; (800723c <checkAktifCalisma+0xe18>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <checkAktifCalisma+0xdc2>
 80071de:	4b12      	ldr	r3, [pc, #72]	; (8007228 <checkAktifCalisma+0xe04>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d02c      	beq.n	8007240 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80071e6:	2201      	movs	r2, #1
 80071e8:	2140      	movs	r1, #64	; 0x40
 80071ea:	480a      	ldr	r0, [pc, #40]	; (8007214 <checkAktifCalisma+0xdf0>)
 80071ec:	f002 fb73 	bl	80098d6 <HAL_GPIO_WritePin>
 80071f0:	e02b      	b.n	800724a <checkAktifCalisma+0xe26>
 80071f2:	bf00      	nop
 80071f4:	20000c54 	.word	0x20000c54
 80071f8:	20000c19 	.word	0x20000c19
 80071fc:	20000c18 	.word	0x20000c18
 8007200:	40011000 	.word	0x40011000
 8007204:	20000c16 	.word	0x20000c16
 8007208:	20000c52 	.word	0x20000c52
 800720c:	20000c55 	.word	0x20000c55
 8007210:	20000c53 	.word	0x20000c53
 8007214:	40010800 	.word	0x40010800
 8007218:	20000c1a 	.word	0x20000c1a
 800721c:	20000c1c 	.word	0x20000c1c
 8007220:	40010c00 	.word	0x40010c00
 8007224:	20000c3f 	.word	0x20000c3f
 8007228:	20000c56 	.word	0x20000c56
 800722c:	20000bb8 	.word	0x20000bb8
 8007230:	20000bbc 	.word	0x20000bbc
 8007234:	20000c2a 	.word	0x20000c2a
 8007238:	20000c57 	.word	0x20000c57
 800723c:	20000c58 	.word	0x20000c58
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007240:	2200      	movs	r2, #0
 8007242:	2140      	movs	r1, #64	; 0x40
 8007244:	488d      	ldr	r0, [pc, #564]	; (800747c <checkAktifCalisma+0x1058>)
 8007246:	f002 fb46 	bl	80098d6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800724a:	4b8d      	ldr	r3, [pc, #564]	; (8007480 <checkAktifCalisma+0x105c>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <checkAktifCalisma+0xe36>
 8007252:	4b8b      	ldr	r3, [pc, #556]	; (8007480 <checkAktifCalisma+0x105c>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d115      	bne.n	8007286 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800725a:	2104      	movs	r1, #4
 800725c:	4889      	ldr	r0, [pc, #548]	; (8007484 <checkAktifCalisma+0x1060>)
 800725e:	f002 fb23 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007262:	4603      	mov	r3, r0
 8007264:	2b01      	cmp	r3, #1
 8007266:	d003      	beq.n	8007270 <checkAktifCalisma+0xe4c>
 8007268:	4b87      	ldr	r3, [pc, #540]	; (8007488 <checkAktifCalisma+0x1064>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007270:	2102      	movs	r1, #2
 8007272:	4884      	ldr	r0, [pc, #528]	; (8007484 <checkAktifCalisma+0x1060>)
 8007274:	f002 fb18 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800727e:	4b83      	ldr	r3, [pc, #524]	; (800748c <checkAktifCalisma+0x1068>)
 8007280:	2201      	movs	r2, #1
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	e002      	b.n	800728c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007286:	4b81      	ldr	r3, [pc, #516]	; (800748c <checkAktifCalisma+0x1068>)
 8007288:	2200      	movs	r2, #0
 800728a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800728c:	4b7c      	ldr	r3, [pc, #496]	; (8007480 <checkAktifCalisma+0x105c>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d003      	beq.n	800729c <checkAktifCalisma+0xe78>
 8007294:	4b7a      	ldr	r3, [pc, #488]	; (8007480 <checkAktifCalisma+0x105c>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d111      	bne.n	80072c0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800729c:	2102      	movs	r1, #2
 800729e:	4879      	ldr	r0, [pc, #484]	; (8007484 <checkAktifCalisma+0x1060>)
 80072a0:	f002 fb02 	bl	80098a8 <HAL_GPIO_ReadPin>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d10a      	bne.n	80072c0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80072aa:	2104      	movs	r1, #4
 80072ac:	4875      	ldr	r0, [pc, #468]	; (8007484 <checkAktifCalisma+0x1060>)
 80072ae:	f002 fafb 	bl	80098a8 <HAL_GPIO_ReadPin>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80072b8:	4b75      	ldr	r3, [pc, #468]	; (8007490 <checkAktifCalisma+0x106c>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e002      	b.n	80072c6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80072c0:	4b73      	ldr	r3, [pc, #460]	; (8007490 <checkAktifCalisma+0x106c>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80072c6:	4b71      	ldr	r3, [pc, #452]	; (800748c <checkAktifCalisma+0x1068>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00f      	beq.n	80072ee <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80072ce:	4b71      	ldr	r3, [pc, #452]	; (8007494 <checkAktifCalisma+0x1070>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d10b      	bne.n	80072ee <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80072d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072da:	486f      	ldr	r0, [pc, #444]	; (8007498 <checkAktifCalisma+0x1074>)
 80072dc:	f002 fae4 	bl	80098a8 <HAL_GPIO_ReadPin>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80072e6:	4b6d      	ldr	r3, [pc, #436]	; (800749c <checkAktifCalisma+0x1078>)
 80072e8:	2201      	movs	r2, #1
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e002      	b.n	80072f4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80072ee:	4b6b      	ldr	r3, [pc, #428]	; (800749c <checkAktifCalisma+0x1078>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80072f4:	4b66      	ldr	r3, [pc, #408]	; (8007490 <checkAktifCalisma+0x106c>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00f      	beq.n	800731c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80072fc:	4b65      	ldr	r3, [pc, #404]	; (8007494 <checkAktifCalisma+0x1070>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d10b      	bne.n	800731c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007308:	4863      	ldr	r0, [pc, #396]	; (8007498 <checkAktifCalisma+0x1074>)
 800730a:	f002 facd 	bl	80098a8 <HAL_GPIO_ReadPin>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007314:	4b62      	ldr	r3, [pc, #392]	; (80074a0 <checkAktifCalisma+0x107c>)
 8007316:	2201      	movs	r2, #1
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e002      	b.n	8007322 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 800731c:	4b60      	ldr	r3, [pc, #384]	; (80074a0 <checkAktifCalisma+0x107c>)
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007322:	4b60      	ldr	r3, [pc, #384]	; (80074a4 <checkAktifCalisma+0x1080>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d137      	bne.n	800739a <checkAktifCalisma+0xf76>
 800732a:	4b5f      	ldr	r3, [pc, #380]	; (80074a8 <checkAktifCalisma+0x1084>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d003      	beq.n	800733a <checkAktifCalisma+0xf16>
 8007332:	4b5d      	ldr	r3, [pc, #372]	; (80074a8 <checkAktifCalisma+0x1084>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b03      	cmp	r3, #3
 8007338:	d12f      	bne.n	800739a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800733a:	4b54      	ldr	r3, [pc, #336]	; (800748c <checkAktifCalisma+0x1068>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <checkAktifCalisma+0xf26>
 8007342:	4b53      	ldr	r3, [pc, #332]	; (8007490 <checkAktifCalisma+0x106c>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d027      	beq.n	800739a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800734a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800734e:	484d      	ldr	r0, [pc, #308]	; (8007484 <checkAktifCalisma+0x1060>)
 8007350:	f002 faaa 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d103      	bne.n	8007362 <checkAktifCalisma+0xf3e>
 800735a:	4b4e      	ldr	r3, [pc, #312]	; (8007494 <checkAktifCalisma+0x1070>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007362:	4b4e      	ldr	r3, [pc, #312]	; (800749c <checkAktifCalisma+0x1078>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d103      	bne.n	8007372 <checkAktifCalisma+0xf4e>
 800736a:	4b4d      	ldr	r3, [pc, #308]	; (80074a0 <checkAktifCalisma+0x107c>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d013      	beq.n	800739a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007372:	4b4e      	ldr	r3, [pc, #312]	; (80074ac <checkAktifCalisma+0x1088>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00f      	beq.n	800739a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800737a:	4b4d      	ldr	r3, [pc, #308]	; (80074b0 <checkAktifCalisma+0x108c>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f083 0301 	eor.w	r3, r3, #1
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007388:	4b4a      	ldr	r3, [pc, #296]	; (80074b4 <checkAktifCalisma+0x1090>)
 800738a:	2201      	movs	r2, #1
 800738c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800738e:	4b4a      	ldr	r3, [pc, #296]	; (80074b8 <checkAktifCalisma+0x1094>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a4a      	ldr	r2, [pc, #296]	; (80074bc <checkAktifCalisma+0x1098>)
 8007394:	6013      	str	r3, [r2, #0]
			bekle();
 8007396:	f7fe fe0f 	bl	8005fb8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800739a:	4b47      	ldr	r3, [pc, #284]	; (80074b8 <checkAktifCalisma+0x1094>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b47      	ldr	r3, [pc, #284]	; (80074bc <checkAktifCalisma+0x1098>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	4a46      	ldr	r2, [pc, #280]	; (80074c0 <checkAktifCalisma+0x109c>)
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d214      	bcs.n	80073d6 <checkAktifCalisma+0xfb2>
 80073ac:	4b37      	ldr	r3, [pc, #220]	; (800748c <checkAktifCalisma+0x1068>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f083 0301 	eor.w	r3, r3, #1
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d006      	beq.n	80073c8 <checkAktifCalisma+0xfa4>
 80073ba:	4b35      	ldr	r3, [pc, #212]	; (8007490 <checkAktifCalisma+0x106c>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f083 0301 	eor.w	r3, r3, #1
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <checkAktifCalisma+0xfb2>
 80073c8:	4b38      	ldr	r3, [pc, #224]	; (80074ac <checkAktifCalisma+0x1088>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f083 0301 	eor.w	r3, r3, #1
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80073d6:	4b37      	ldr	r3, [pc, #220]	; (80074b4 <checkAktifCalisma+0x1090>)
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80073dc:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <checkAktifCalisma+0x1080>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d12b      	bne.n	800743c <checkAktifCalisma+0x1018>
 80073e4:	4b30      	ldr	r3, [pc, #192]	; (80074a8 <checkAktifCalisma+0x1084>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d003      	beq.n	80073f4 <checkAktifCalisma+0xfd0>
 80073ec:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <checkAktifCalisma+0x1084>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d123      	bne.n	800743c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80073f4:	4b25      	ldr	r3, [pc, #148]	; (800748c <checkAktifCalisma+0x1068>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <checkAktifCalisma+0xfe0>
 80073fc:	4b24      	ldr	r3, [pc, #144]	; (8007490 <checkAktifCalisma+0x106c>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01b      	beq.n	800743c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007408:	481e      	ldr	r0, [pc, #120]	; (8007484 <checkAktifCalisma+0x1060>)
 800740a:	f002 fa4d 	bl	80098a8 <HAL_GPIO_ReadPin>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d103      	bne.n	800741c <checkAktifCalisma+0xff8>
 8007414:	4b1f      	ldr	r3, [pc, #124]	; (8007494 <checkAktifCalisma+0x1070>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d007      	beq.n	800742c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800741c:	4b1f      	ldr	r3, [pc, #124]	; (800749c <checkAktifCalisma+0x1078>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <checkAktifCalisma+0x1008>
 8007424:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <checkAktifCalisma+0x107c>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800742c:	4b1f      	ldr	r3, [pc, #124]	; (80074ac <checkAktifCalisma+0x1088>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007434:	4b23      	ldr	r3, [pc, #140]	; (80074c4 <checkAktifCalisma+0x10a0>)
 8007436:	2201      	movs	r2, #1
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	e002      	b.n	8007442 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800743c:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <checkAktifCalisma+0x10a0>)
 800743e:	2200      	movs	r2, #0
 8007440:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007442:	4b18      	ldr	r3, [pc, #96]	; (80074a4 <checkAktifCalisma+0x1080>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d140      	bne.n	80074cc <checkAktifCalisma+0x10a8>
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <checkAktifCalisma+0x1084>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d003      	beq.n	800745a <checkAktifCalisma+0x1036>
 8007452:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <checkAktifCalisma+0x1084>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d138      	bne.n	80074cc <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800745a:	4b0c      	ldr	r3, [pc, #48]	; (800748c <checkAktifCalisma+0x1068>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d103      	bne.n	800746a <checkAktifCalisma+0x1046>
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <checkAktifCalisma+0x106c>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d030      	beq.n	80074cc <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800746a:	4b10      	ldr	r3, [pc, #64]	; (80074ac <checkAktifCalisma+0x1088>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d02c      	beq.n	80074cc <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007472:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <checkAktifCalisma+0x10a4>)
 8007474:	2201      	movs	r2, #1
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e02b      	b.n	80074d2 <checkAktifCalisma+0x10ae>
 800747a:	bf00      	nop
 800747c:	40010800 	.word	0x40010800
 8007480:	20000c1d 	.word	0x20000c1d
 8007484:	40011000 	.word	0x40011000
 8007488:	20000c16 	.word	0x20000c16
 800748c:	20000c5c 	.word	0x20000c5c
 8007490:	20000c5d 	.word	0x20000c5d
 8007494:	20000c1c 	.word	0x20000c1c
 8007498:	40010c00 	.word	0x40010c00
 800749c:	20000c6c 	.word	0x20000c6c
 80074a0:	20000c6d 	.word	0x20000c6d
 80074a4:	20000c1b 	.word	0x20000c1b
 80074a8:	20000c18 	.word	0x20000c18
 80074ac:	20000c52 	.word	0x20000c52
 80074b0:	20000c3f 	.word	0x20000c3f
 80074b4:	20000c59 	.word	0x20000c59
 80074b8:	20000bb8 	.word	0x20000bb8
 80074bc:	20000bbc 	.word	0x20000bbc
 80074c0:	20000c2b 	.word	0x20000c2b
 80074c4:	20000c5a 	.word	0x20000c5a
 80074c8:	20000c5b 	.word	0x20000c5b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80074cc:	4b89      	ldr	r3, [pc, #548]	; (80076f4 <checkAktifCalisma+0x12d0>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80074d2:	4b89      	ldr	r3, [pc, #548]	; (80076f8 <checkAktifCalisma+0x12d4>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d107      	bne.n	80074ea <checkAktifCalisma+0x10c6>
 80074da:	4b88      	ldr	r3, [pc, #544]	; (80076fc <checkAktifCalisma+0x12d8>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <checkAktifCalisma+0x10c6>
 80074e2:	4b84      	ldr	r3, [pc, #528]	; (80076f4 <checkAktifCalisma+0x12d0>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80074ea:	2201      	movs	r2, #1
 80074ec:	2120      	movs	r1, #32
 80074ee:	4884      	ldr	r0, [pc, #528]	; (8007700 <checkAktifCalisma+0x12dc>)
 80074f0:	f002 f9f1 	bl	80098d6 <HAL_GPIO_WritePin>
 80074f4:	e004      	b.n	8007500 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80074f6:	2200      	movs	r2, #0
 80074f8:	2120      	movs	r1, #32
 80074fa:	4881      	ldr	r0, [pc, #516]	; (8007700 <checkAktifCalisma+0x12dc>)
 80074fc:	f002 f9eb 	bl	80098d6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007500:	4b80      	ldr	r3, [pc, #512]	; (8007704 <checkAktifCalisma+0x12e0>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00e      	beq.n	8007526 <checkAktifCalisma+0x1102>
 8007508:	2102      	movs	r1, #2
 800750a:	487f      	ldr	r0, [pc, #508]	; (8007708 <checkAktifCalisma+0x12e4>)
 800750c:	f002 f9cc 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007510:	4603      	mov	r3, r0
 8007512:	2b01      	cmp	r3, #1
 8007514:	d107      	bne.n	8007526 <checkAktifCalisma+0x1102>
 8007516:	4b7d      	ldr	r3, [pc, #500]	; (800770c <checkAktifCalisma+0x12e8>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <checkAktifCalisma+0x1102>
 800751e:	4b7c      	ldr	r3, [pc, #496]	; (8007710 <checkAktifCalisma+0x12ec>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d112      	bne.n	800754c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007526:	4b7b      	ldr	r3, [pc, #492]	; (8007714 <checkAktifCalisma+0x12f0>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d066      	beq.n	80075fc <checkAktifCalisma+0x11d8>
 800752e:	2104      	movs	r1, #4
 8007530:	4875      	ldr	r0, [pc, #468]	; (8007708 <checkAktifCalisma+0x12e4>)
 8007532:	f002 f9b9 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007536:	4603      	mov	r3, r0
 8007538:	2b01      	cmp	r3, #1
 800753a:	d15f      	bne.n	80075fc <checkAktifCalisma+0x11d8>
 800753c:	4b73      	ldr	r3, [pc, #460]	; (800770c <checkAktifCalisma+0x12e8>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d05b      	beq.n	80075fc <checkAktifCalisma+0x11d8>
 8007544:	4b72      	ldr	r3, [pc, #456]	; (8007710 <checkAktifCalisma+0x12ec>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d057      	beq.n	80075fc <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800754c:	4b72      	ldr	r3, [pc, #456]	; (8007718 <checkAktifCalisma+0x12f4>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	4b70      	ldr	r3, [pc, #448]	; (8007718 <checkAktifCalisma+0x12f4>)
 8007556:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007558:	4b6f      	ldr	r3, [pc, #444]	; (8007718 <checkAktifCalisma+0x12f4>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b09      	cmp	r3, #9
 800755e:	d908      	bls.n	8007572 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007560:	4b6d      	ldr	r3, [pc, #436]	; (8007718 <checkAktifCalisma+0x12f4>)
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007566:	4b6d      	ldr	r3, [pc, #436]	; (800771c <checkAktifCalisma+0x12f8>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	3301      	adds	r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	4b6b      	ldr	r3, [pc, #428]	; (800771c <checkAktifCalisma+0x12f8>)
 8007570:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007572:	4b6a      	ldr	r3, [pc, #424]	; (800771c <checkAktifCalisma+0x12f8>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b09      	cmp	r3, #9
 8007578:	d908      	bls.n	800758c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800757a:	4b68      	ldr	r3, [pc, #416]	; (800771c <checkAktifCalisma+0x12f8>)
 800757c:	2200      	movs	r2, #0
 800757e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007580:	4b67      	ldr	r3, [pc, #412]	; (8007720 <checkAktifCalisma+0x12fc>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	3301      	adds	r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	4b65      	ldr	r3, [pc, #404]	; (8007720 <checkAktifCalisma+0x12fc>)
 800758a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 800758c:	4b64      	ldr	r3, [pc, #400]	; (8007720 <checkAktifCalisma+0x12fc>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b09      	cmp	r3, #9
 8007592:	d908      	bls.n	80075a6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007594:	4b62      	ldr	r3, [pc, #392]	; (8007720 <checkAktifCalisma+0x12fc>)
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800759a:	4b62      	ldr	r3, [pc, #392]	; (8007724 <checkAktifCalisma+0x1300>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	3301      	adds	r3, #1
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	4b60      	ldr	r3, [pc, #384]	; (8007724 <checkAktifCalisma+0x1300>)
 80075a4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80075a6:	4b5f      	ldr	r3, [pc, #380]	; (8007724 <checkAktifCalisma+0x1300>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b09      	cmp	r3, #9
 80075ac:	d908      	bls.n	80075c0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80075ae:	4b5d      	ldr	r3, [pc, #372]	; (8007724 <checkAktifCalisma+0x1300>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80075b4:	4b5c      	ldr	r3, [pc, #368]	; (8007728 <checkAktifCalisma+0x1304>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	3301      	adds	r3, #1
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	4b5a      	ldr	r3, [pc, #360]	; (8007728 <checkAktifCalisma+0x1304>)
 80075be:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80075c0:	4b59      	ldr	r3, [pc, #356]	; (8007728 <checkAktifCalisma+0x1304>)
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	4b59      	ldr	r3, [pc, #356]	; (800772c <checkAktifCalisma+0x1308>)
 80075c6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80075ca:	4b56      	ldr	r3, [pc, #344]	; (8007724 <checkAktifCalisma+0x1300>)
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	4b57      	ldr	r3, [pc, #348]	; (800772c <checkAktifCalisma+0x1308>)
 80075d0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80075d2:	4b53      	ldr	r3, [pc, #332]	; (8007720 <checkAktifCalisma+0x12fc>)
 80075d4:	781a      	ldrb	r2, [r3, #0]
 80075d6:	4b55      	ldr	r3, [pc, #340]	; (800772c <checkAktifCalisma+0x1308>)
 80075d8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80075da:	4b50      	ldr	r3, [pc, #320]	; (800771c <checkAktifCalisma+0x12f8>)
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	4b53      	ldr	r3, [pc, #332]	; (800772c <checkAktifCalisma+0x1308>)
 80075e0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80075e2:	4b4d      	ldr	r3, [pc, #308]	; (8007718 <checkAktifCalisma+0x12f4>)
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	4b51      	ldr	r3, [pc, #324]	; (800772c <checkAktifCalisma+0x1308>)
 80075e8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80075ea:	4b51      	ldr	r3, [pc, #324]	; (8007730 <checkAktifCalisma+0x130c>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80075f0:	4b44      	ldr	r3, [pc, #272]	; (8007704 <checkAktifCalisma+0x12e0>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <checkAktifCalisma+0x12f0>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80075fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007600:	484c      	ldr	r0, [pc, #304]	; (8007734 <checkAktifCalisma+0x1310>)
 8007602:	f002 f951 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d016      	beq.n	800763a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800760c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007610:	4848      	ldr	r0, [pc, #288]	; (8007734 <checkAktifCalisma+0x1310>)
 8007612:	f002 f949 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00e      	beq.n	800763a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800761c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007620:	4844      	ldr	r0, [pc, #272]	; (8007734 <checkAktifCalisma+0x1310>)
 8007622:	f002 f941 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d006      	beq.n	800763a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800762c:	2140      	movs	r1, #64	; 0x40
 800762e:	4836      	ldr	r0, [pc, #216]	; (8007708 <checkAktifCalisma+0x12e4>)
 8007630:	f002 f93a 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d103      	bne.n	8007642 <checkAktifCalisma+0x121e>
			startBasili=1;
 800763a:	4b3f      	ldr	r3, [pc, #252]	; (8007738 <checkAktifCalisma+0x1314>)
 800763c:	2201      	movs	r2, #1
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e002      	b.n	8007648 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007642:	4b3d      	ldr	r3, [pc, #244]	; (8007738 <checkAktifCalisma+0x1314>)
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007648:	4b3b      	ldr	r3, [pc, #236]	; (8007738 <checkAktifCalisma+0x1314>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d014      	beq.n	800767a <checkAktifCalisma+0x1256>
 8007650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007654:	4837      	ldr	r0, [pc, #220]	; (8007734 <checkAktifCalisma+0x1310>)
 8007656:	f002 f927 	bl	80098a8 <HAL_GPIO_ReadPin>
 800765a:	4603      	mov	r3, r0
 800765c:	2b01      	cmp	r3, #1
 800765e:	d10c      	bne.n	800767a <checkAktifCalisma+0x1256>
			hataVar=1;
 8007660:	4b36      	ldr	r3, [pc, #216]	; (800773c <checkAktifCalisma+0x1318>)
 8007662:	2201      	movs	r2, #1
 8007664:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007666:	2001      	movs	r0, #1
 8007668:	f7fe f8a4 	bl	80057b4 <hataKoduLcdGoster>
			hata2EEPROM(1);
 800766c:	2001      	movs	r0, #1
 800766e:	f7fe fc27 	bl	8005ec0 <hata2EEPROM>
			acilstophatasi=1;
 8007672:	4b33      	ldr	r3, [pc, #204]	; (8007740 <checkAktifCalisma+0x131c>)
 8007674:	2201      	movs	r2, #1
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	e018      	b.n	80076ac <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800767a:	4b31      	ldr	r3, [pc, #196]	; (8007740 <checkAktifCalisma+0x131c>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d014      	beq.n	80076ac <checkAktifCalisma+0x1288>
 8007682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007686:	482b      	ldr	r0, [pc, #172]	; (8007734 <checkAktifCalisma+0x1310>)
 8007688:	f002 f90e 	bl	80098a8 <HAL_GPIO_ReadPin>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10c      	bne.n	80076ac <checkAktifCalisma+0x1288>
 8007692:	4b29      	ldr	r3, [pc, #164]	; (8007738 <checkAktifCalisma+0x1314>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f083 0301 	eor.w	r3, r3, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 80076a0:	4b27      	ldr	r3, [pc, #156]	; (8007740 <checkAktifCalisma+0x131c>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80076a6:	2001      	movs	r0, #1
 80076a8:	f7fe f830 	bl	800570c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <checkAktifCalisma+0x1320>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f083 0301 	eor.w	r3, r3, #1
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d04c      	beq.n	8007754 <checkAktifCalisma+0x1330>
 80076ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076be:	481d      	ldr	r0, [pc, #116]	; (8007734 <checkAktifCalisma+0x1310>)
 80076c0:	f002 f8f2 	bl	80098a8 <HAL_GPIO_ReadPin>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <checkAktifCalisma+0x12ae>
 80076ca:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <checkAktifCalisma+0x1324>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d040      	beq.n	8007754 <checkAktifCalisma+0x1330>
 80076d2:	4b1e      	ldr	r3, [pc, #120]	; (800774c <checkAktifCalisma+0x1328>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d13c      	bne.n	8007754 <checkAktifCalisma+0x1330>
			hataVar=1;
 80076da:	4b18      	ldr	r3, [pc, #96]	; (800773c <checkAktifCalisma+0x1318>)
 80076dc:	2201      	movs	r2, #1
 80076de:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80076e0:	2002      	movs	r0, #2
 80076e2:	f7fe f867 	bl	80057b4 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80076e6:	2002      	movs	r0, #2
 80076e8:	f7fe fbea 	bl	8005ec0 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80076ec:	4b18      	ldr	r3, [pc, #96]	; (8007750 <checkAktifCalisma+0x132c>)
 80076ee:	2201      	movs	r2, #1
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e047      	b.n	8007784 <checkAktifCalisma+0x1360>
 80076f4:	20000c5b 	.word	0x20000c5b
 80076f8:	20000c5a 	.word	0x20000c5a
 80076fc:	20000c59 	.word	0x20000c59
 8007700:	40010800 	.word	0x40010800
 8007704:	20000c4f 	.word	0x20000c4f
 8007708:	40011000 	.word	0x40011000
 800770c:	20000c16 	.word	0x20000c16
 8007710:	20000c52 	.word	0x20000c52
 8007714:	20000c50 	.word	0x20000c50
 8007718:	20000c0d 	.word	0x20000c0d
 800771c:	20000c0e 	.word	0x20000c0e
 8007720:	200009b4 	.word	0x200009b4
 8007724:	200009b5 	.word	0x200009b5
 8007728:	20000c0f 	.word	0x20000c0f
 800772c:	20000b40 	.word	0x20000b40
 8007730:	20000c3c 	.word	0x20000c3c
 8007734:	40010c00 	.word	0x40010c00
 8007738:	20000c5e 	.word	0x20000c5e
 800773c:	20000c65 	.word	0x20000c65
 8007740:	20000c60 	.word	0x20000c60
 8007744:	20000c67 	.word	0x20000c67
 8007748:	20000c71 	.word	0x20000c71
 800774c:	20000c14 	.word	0x20000c14
 8007750:	20000c61 	.word	0x20000c61
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007754:	4b97      	ldr	r3, [pc, #604]	; (80079b4 <checkAktifCalisma+0x1590>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d013      	beq.n	8007784 <checkAktifCalisma+0x1360>
 800775c:	4b96      	ldr	r3, [pc, #600]	; (80079b8 <checkAktifCalisma+0x1594>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00f      	beq.n	8007784 <checkAktifCalisma+0x1360>
 8007764:	4b95      	ldr	r3, [pc, #596]	; (80079bc <checkAktifCalisma+0x1598>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f083 0301 	eor.w	r3, r3, #1
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d008      	beq.n	8007784 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007772:	4b90      	ldr	r3, [pc, #576]	; (80079b4 <checkAktifCalisma+0x1590>)
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007778:	4b91      	ldr	r3, [pc, #580]	; (80079c0 <checkAktifCalisma+0x159c>)
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800777e:	2002      	movs	r0, #2
 8007780:	f7fd ffc4 	bl	800570c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007784:	4b8f      	ldr	r3, [pc, #572]	; (80079c4 <checkAktifCalisma+0x15a0>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d11c      	bne.n	80077c6 <checkAktifCalisma+0x13a2>
 800778c:	4b8e      	ldr	r3, [pc, #568]	; (80079c8 <checkAktifCalisma+0x15a4>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d118      	bne.n	80077c6 <checkAktifCalisma+0x13a2>
 8007794:	4b8d      	ldr	r3, [pc, #564]	; (80079cc <checkAktifCalisma+0x15a8>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d014      	beq.n	80077c6 <checkAktifCalisma+0x13a2>
 800779c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077a0:	488b      	ldr	r0, [pc, #556]	; (80079d0 <checkAktifCalisma+0x15ac>)
 80077a2:	f002 f881 	bl	80098a8 <HAL_GPIO_ReadPin>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10c      	bne.n	80077c6 <checkAktifCalisma+0x13a2>
			hataVar=1;
 80077ac:	4b89      	ldr	r3, [pc, #548]	; (80079d4 <checkAktifCalisma+0x15b0>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80077b2:	2003      	movs	r0, #3
 80077b4:	f7fd fffe 	bl	80057b4 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80077b8:	2003      	movs	r0, #3
 80077ba:	f7fe fb81 	bl	8005ec0 <hata2EEPROM>
			basinchatasi=1;
 80077be:	4b86      	ldr	r3, [pc, #536]	; (80079d8 <checkAktifCalisma+0x15b4>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	e015      	b.n	80077f2 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80077c6:	4b84      	ldr	r3, [pc, #528]	; (80079d8 <checkAktifCalisma+0x15b4>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d011      	beq.n	80077f2 <checkAktifCalisma+0x13ce>
 80077ce:	4b7d      	ldr	r3, [pc, #500]	; (80079c4 <checkAktifCalisma+0x15a0>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d10d      	bne.n	80077f2 <checkAktifCalisma+0x13ce>
 80077d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077da:	4880      	ldr	r0, [pc, #512]	; (80079dc <checkAktifCalisma+0x15b8>)
 80077dc:	f002 f864 	bl	80098a8 <HAL_GPIO_ReadPin>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d105      	bne.n	80077f2 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80077e6:	4b7c      	ldr	r3, [pc, #496]	; (80079d8 <checkAktifCalisma+0x15b4>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80077ec:	2003      	movs	r0, #3
 80077ee:	f7fd ff8d 	bl	800570c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80077f2:	4b7b      	ldr	r3, [pc, #492]	; (80079e0 <checkAktifCalisma+0x15bc>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <checkAktifCalisma+0x13de>
 80077fa:	4b7a      	ldr	r3, [pc, #488]	; (80079e4 <checkAktifCalisma+0x15c0>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d01c      	beq.n	800783c <checkAktifCalisma+0x1418>
 8007802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007806:	4878      	ldr	r0, [pc, #480]	; (80079e8 <checkAktifCalisma+0x15c4>)
 8007808:	f002 f84e 	bl	80098a8 <HAL_GPIO_ReadPin>
 800780c:	4603      	mov	r3, r0
 800780e:	2b01      	cmp	r3, #1
 8007810:	d114      	bne.n	800783c <checkAktifCalisma+0x1418>
 8007812:	4b76      	ldr	r3, [pc, #472]	; (80079ec <checkAktifCalisma+0x15c8>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d003      	beq.n	8007822 <checkAktifCalisma+0x13fe>
 800781a:	4b74      	ldr	r3, [pc, #464]	; (80079ec <checkAktifCalisma+0x15c8>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b03      	cmp	r3, #3
 8007820:	d10c      	bne.n	800783c <checkAktifCalisma+0x1418>
			hataVar=1;
 8007822:	4b6c      	ldr	r3, [pc, #432]	; (80079d4 <checkAktifCalisma+0x15b0>)
 8007824:	2201      	movs	r2, #1
 8007826:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007828:	2004      	movs	r0, #4
 800782a:	f7fd ffc3 	bl	80057b4 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800782e:	2004      	movs	r0, #4
 8007830:	f7fe fb46 	bl	8005ec0 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007834:	4b6e      	ldr	r3, [pc, #440]	; (80079f0 <checkAktifCalisma+0x15cc>)
 8007836:	2201      	movs	r2, #1
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	e01f      	b.n	800787c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800783c:	4b6c      	ldr	r3, [pc, #432]	; (80079f0 <checkAktifCalisma+0x15cc>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01b      	beq.n	800787c <checkAktifCalisma+0x1458>
 8007844:	4b6b      	ldr	r3, [pc, #428]	; (80079f4 <checkAktifCalisma+0x15d0>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d017      	beq.n	800787c <checkAktifCalisma+0x1458>
 800784c:	4b64      	ldr	r3, [pc, #400]	; (80079e0 <checkAktifCalisma+0x15bc>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f083 0301 	eor.w	r3, r3, #1
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d010      	beq.n	800787c <checkAktifCalisma+0x1458>
 800785a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800785e:	4862      	ldr	r0, [pc, #392]	; (80079e8 <checkAktifCalisma+0x15c4>)
 8007860:	f002 f822 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d108      	bne.n	800787c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 800786a:	4b61      	ldr	r3, [pc, #388]	; (80079f0 <checkAktifCalisma+0x15cc>)
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007870:	4b5c      	ldr	r3, [pc, #368]	; (80079e4 <checkAktifCalisma+0x15c0>)
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007876:	2004      	movs	r0, #4
 8007878:	f7fd ff48 	bl	800570c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800787c:	4b58      	ldr	r3, [pc, #352]	; (80079e0 <checkAktifCalisma+0x15bc>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <checkAktifCalisma+0x1468>
 8007884:	4b5c      	ldr	r3, [pc, #368]	; (80079f8 <checkAktifCalisma+0x15d4>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01c      	beq.n	80078c6 <checkAktifCalisma+0x14a2>
 800788c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007890:	4855      	ldr	r0, [pc, #340]	; (80079e8 <checkAktifCalisma+0x15c4>)
 8007892:	f002 f809 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007896:	4603      	mov	r3, r0
 8007898:	2b01      	cmp	r3, #1
 800789a:	d114      	bne.n	80078c6 <checkAktifCalisma+0x14a2>
 800789c:	4b53      	ldr	r3, [pc, #332]	; (80079ec <checkAktifCalisma+0x15c8>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d003      	beq.n	80078ac <checkAktifCalisma+0x1488>
 80078a4:	4b51      	ldr	r3, [pc, #324]	; (80079ec <checkAktifCalisma+0x15c8>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d10c      	bne.n	80078c6 <checkAktifCalisma+0x14a2>
			hataVar=1;
 80078ac:	4b49      	ldr	r3, [pc, #292]	; (80079d4 <checkAktifCalisma+0x15b0>)
 80078ae:	2201      	movs	r2, #1
 80078b0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80078b2:	2005      	movs	r0, #5
 80078b4:	f7fd ff7e 	bl	80057b4 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80078b8:	2005      	movs	r0, #5
 80078ba:	f7fe fb01 	bl	8005ec0 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80078be:	4b4f      	ldr	r3, [pc, #316]	; (80079fc <checkAktifCalisma+0x15d8>)
 80078c0:	2201      	movs	r2, #1
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	e023      	b.n	800790e <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80078c6:	4b4d      	ldr	r3, [pc, #308]	; (80079fc <checkAktifCalisma+0x15d8>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01f      	beq.n	800790e <checkAktifCalisma+0x14ea>
 80078ce:	4b49      	ldr	r3, [pc, #292]	; (80079f4 <checkAktifCalisma+0x15d0>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01b      	beq.n	800790e <checkAktifCalisma+0x14ea>
 80078d6:	4b42      	ldr	r3, [pc, #264]	; (80079e0 <checkAktifCalisma+0x15bc>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	f083 0301 	eor.w	r3, r3, #1
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d014      	beq.n	800790e <checkAktifCalisma+0x14ea>
 80078e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078e8:	483f      	ldr	r0, [pc, #252]	; (80079e8 <checkAktifCalisma+0x15c4>)
 80078ea:	f001 ffdd 	bl	80098a8 <HAL_GPIO_ReadPin>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10c      	bne.n	800790e <checkAktifCalisma+0x14ea>
 80078f4:	4b3f      	ldr	r3, [pc, #252]	; (80079f4 <checkAktifCalisma+0x15d0>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80078fc:	4b3f      	ldr	r3, [pc, #252]	; (80079fc <checkAktifCalisma+0x15d8>)
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007902:	4b3d      	ldr	r3, [pc, #244]	; (80079f8 <checkAktifCalisma+0x15d4>)
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007908:	2005      	movs	r0, #5
 800790a:	f7fd feff 	bl	800570c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800790e:	4b2f      	ldr	r3, [pc, #188]	; (80079cc <checkAktifCalisma+0x15a8>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d107      	bne.n	8007926 <checkAktifCalisma+0x1502>
 8007916:	4b29      	ldr	r3, [pc, #164]	; (80079bc <checkAktifCalisma+0x1598>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d103      	bne.n	8007926 <checkAktifCalisma+0x1502>
 800791e:	4b38      	ldr	r3, [pc, #224]	; (8007a00 <checkAktifCalisma+0x15dc>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d014      	beq.n	8007950 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007926:	4b37      	ldr	r3, [pc, #220]	; (8007a04 <checkAktifCalisma+0x15e0>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b37      	ldr	r3, [pc, #220]	; (8007a08 <checkAktifCalisma+0x15e4>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	4a36      	ldr	r2, [pc, #216]	; (8007a0c <checkAktifCalisma+0x15e8>)
 8007932:	7812      	ldrb	r2, [r2, #0]
 8007934:	4293      	cmp	r3, r2
 8007936:	d30b      	bcc.n	8007950 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007938:	4b26      	ldr	r3, [pc, #152]	; (80079d4 <checkAktifCalisma+0x15b0>)
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800793e:	2006      	movs	r0, #6
 8007940:	f7fd ff38 	bl	80057b4 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007944:	2006      	movs	r0, #6
 8007946:	f7fe fabb 	bl	8005ec0 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 800794a:	4b31      	ldr	r3, [pc, #196]	; (8007a10 <checkAktifCalisma+0x15ec>)
 800794c:	2201      	movs	r2, #1
 800794e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007950:	4b2f      	ldr	r3, [pc, #188]	; (8007a10 <checkAktifCalisma+0x15ec>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d013      	beq.n	8007980 <checkAktifCalisma+0x155c>
 8007958:	2108      	movs	r1, #8
 800795a:	4823      	ldr	r0, [pc, #140]	; (80079e8 <checkAktifCalisma+0x15c4>)
 800795c:	f001 ffa4 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00c      	beq.n	8007980 <checkAktifCalisma+0x155c>
 8007966:	4b1e      	ldr	r3, [pc, #120]	; (80079e0 <checkAktifCalisma+0x15bc>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	f083 0301 	eor.w	r3, r3, #1
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007974:	4b26      	ldr	r3, [pc, #152]	; (8007a10 <checkAktifCalisma+0x15ec>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800797a:	2006      	movs	r0, #6
 800797c:	f7fd fec6 	bl	800570c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007980:	4b24      	ldr	r3, [pc, #144]	; (8007a14 <checkAktifCalisma+0x15f0>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <checkAktifCalisma+0x157c>
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <checkAktifCalisma+0x1598>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d107      	bne.n	80079a0 <checkAktifCalisma+0x157c>
 8007990:	4b21      	ldr	r3, [pc, #132]	; (8007a18 <checkAktifCalisma+0x15f4>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d103      	bne.n	80079a0 <checkAktifCalisma+0x157c>
 8007998:	4b19      	ldr	r3, [pc, #100]	; (8007a00 <checkAktifCalisma+0x15dc>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d03f      	beq.n	8007a20 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 80079a0:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <checkAktifCalisma+0x15f8>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80079a6:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <checkAktifCalisma+0x15c0>)
 80079a8:	2201      	movs	r2, #1
 80079aa:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80079ac:	4b12      	ldr	r3, [pc, #72]	; (80079f8 <checkAktifCalisma+0x15d4>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	e03c      	b.n	8007a2e <checkAktifCalisma+0x160a>
 80079b4:	20000c61 	.word	0x20000c61
 80079b8:	20000c67 	.word	0x20000c67
 80079bc:	20000c48 	.word	0x20000c48
 80079c0:	20000c71 	.word	0x20000c71
 80079c4:	20000c13 	.word	0x20000c13
 80079c8:	20000c17 	.word	0x20000c17
 80079cc:	20000c64 	.word	0x20000c64
 80079d0:	40011000 	.word	0x40011000
 80079d4:	20000c65 	.word	0x20000c65
 80079d8:	20000c6e 	.word	0x20000c6e
 80079dc:	40010c00 	.word	0x40010c00
 80079e0:	20000c5e 	.word	0x20000c5e
 80079e4:	20000c72 	.word	0x20000c72
 80079e8:	40010800 	.word	0x40010800
 80079ec:	20000c18 	.word	0x20000c18
 80079f0:	20000c6f 	.word	0x20000c6f
 80079f4:	20000c52 	.word	0x20000c52
 80079f8:	20000c73 	.word	0x20000c73
 80079fc:	20000c70 	.word	0x20000c70
 8007a00:	20000c47 	.word	0x20000c47
 8007a04:	20000bb8 	.word	0x20000bb8
 8007a08:	20000bcc 	.word	0x20000bcc
 8007a0c:	20000c28 	.word	0x20000c28
 8007a10:	20000c5f 	.word	0x20000c5f
 8007a14:	20000c45 	.word	0x20000c45
 8007a18:	20000c46 	.word	0x20000c46
 8007a1c:	20000c66 	.word	0x20000c66
		} else {
			makineCalisiyor=1;
 8007a20:	4b1e      	ldr	r3, [pc, #120]	; (8007a9c <checkAktifCalisma+0x1678>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007a26:	4b1e      	ldr	r3, [pc, #120]	; (8007aa0 <checkAktifCalisma+0x167c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <checkAktifCalisma+0x1680>)
 8007a2c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007a2e:	4b1e      	ldr	r3, [pc, #120]	; (8007aa8 <checkAktifCalisma+0x1684>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02f      	beq.n	8007a96 <checkAktifCalisma+0x1672>
 8007a36:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <checkAktifCalisma+0x1688>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f083 0301 	eor.w	r3, r3, #1
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d028      	beq.n	8007a96 <checkAktifCalisma+0x1672>
 8007a44:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <checkAktifCalisma+0x168c>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f083 0301 	eor.w	r3, r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d021      	beq.n	8007a96 <checkAktifCalisma+0x1672>
 8007a52:	4b18      	ldr	r3, [pc, #96]	; (8007ab4 <checkAktifCalisma+0x1690>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f083 0301 	eor.w	r3, r3, #1
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01a      	beq.n	8007a96 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007a60:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <checkAktifCalisma+0x1694>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f083 0301 	eor.w	r3, r3, #1
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d013      	beq.n	8007a96 <checkAktifCalisma+0x1672>
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <checkAktifCalisma+0x1698>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	f083 0301 	eor.w	r3, r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00c      	beq.n	8007a96 <checkAktifCalisma+0x1672>
 8007a7c:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <checkAktifCalisma+0x169c>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f083 0301 	eor.w	r3, r3, #1
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <checkAktifCalisma+0x1684>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007a90:	2007      	movs	r0, #7
 8007a92:	f7fd fe3b 	bl	800570c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007a96:	bf00      	nop
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000c66 	.word	0x20000c66
 8007aa0:	20000bb8 	.word	0x20000bb8
 8007aa4:	20000bcc 	.word	0x20000bcc
 8007aa8:	20000c65 	.word	0x20000c65
 8007aac:	20000c60 	.word	0x20000c60
 8007ab0:	20000c61 	.word	0x20000c61
 8007ab4:	20000c6e 	.word	0x20000c6e
 8007ab8:	20000c6f 	.word	0x20000c6f
 8007abc:	20000c70 	.word	0x20000c70
 8007ac0:	20000c5f 	.word	0x20000c5f

08007ac4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007ac8:	4b8b      	ldr	r3, [pc, #556]	; (8007cf8 <checkDemoModCalisma+0x234>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	f040 8229 	bne.w	8007f24 <checkDemoModCalisma+0x460>
 8007ad2:	4b8a      	ldr	r3, [pc, #552]	; (8007cfc <checkDemoModCalisma+0x238>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8224 	beq.w	8007f24 <checkDemoModCalisma+0x460>
 8007adc:	4b88      	ldr	r3, [pc, #544]	; (8007d00 <checkDemoModCalisma+0x23c>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f040 821f 	bne.w	8007f24 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007ae6:	2102      	movs	r1, #2
 8007ae8:	4886      	ldr	r0, [pc, #536]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007aea:	f001 fedd 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d11d      	bne.n	8007b30 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007af4:	4b84      	ldr	r3, [pc, #528]	; (8007d08 <checkDemoModCalisma+0x244>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	f083 0301 	eor.w	r3, r3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d016      	beq.n	8007b30 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007b02:	4b82      	ldr	r3, [pc, #520]	; (8007d0c <checkDemoModCalisma+0x248>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	f083 0301 	eor.w	r3, r3, #1
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00f      	beq.n	8007b30 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007b10:	4b7f      	ldr	r3, [pc, #508]	; (8007d10 <checkDemoModCalisma+0x24c>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f083 0301 	eor.w	r3, r3, #1
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d008      	beq.n	8007b30 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007b1e:	2201      	movs	r2, #1
 8007b20:	2104      	movs	r1, #4
 8007b22:	487c      	ldr	r0, [pc, #496]	; (8007d14 <checkDemoModCalisma+0x250>)
 8007b24:	f001 fed7 	bl	80098d6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007b28:	4b7b      	ldr	r3, [pc, #492]	; (8007d18 <checkDemoModCalisma+0x254>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	e00e      	b.n	8007b4e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007b30:	2102      	movs	r1, #2
 8007b32:	4874      	ldr	r0, [pc, #464]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007b34:	f001 feb8 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d107      	bne.n	8007b4e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2104      	movs	r1, #4
 8007b42:	4874      	ldr	r0, [pc, #464]	; (8007d14 <checkDemoModCalisma+0x250>)
 8007b44:	f001 fec7 	bl	80098d6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007b48:	4b73      	ldr	r3, [pc, #460]	; (8007d18 <checkDemoModCalisma+0x254>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007b4e:	4b72      	ldr	r3, [pc, #456]	; (8007d18 <checkDemoModCalisma+0x254>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10b      	bne.n	8007b6e <checkDemoModCalisma+0xaa>
 8007b56:	4b6d      	ldr	r3, [pc, #436]	; (8007d0c <checkDemoModCalisma+0x248>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d107      	bne.n	8007b6e <checkDemoModCalisma+0xaa>
 8007b5e:	4b6c      	ldr	r3, [pc, #432]	; (8007d10 <checkDemoModCalisma+0x24c>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d103      	bne.n	8007b6e <checkDemoModCalisma+0xaa>
 8007b66:	4b68      	ldr	r3, [pc, #416]	; (8007d08 <checkDemoModCalisma+0x244>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00c      	beq.n	8007b88 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b74:	4867      	ldr	r0, [pc, #412]	; (8007d14 <checkDemoModCalisma+0x250>)
 8007b76:	f001 feae 	bl	80098d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b80:	4864      	ldr	r0, [pc, #400]	; (8007d14 <checkDemoModCalisma+0x250>)
 8007b82:	f001 fea8 	bl	80098d6 <HAL_GPIO_WritePin>
 8007b86:	e00b      	b.n	8007ba0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b8e:	4861      	ldr	r0, [pc, #388]	; (8007d14 <checkDemoModCalisma+0x250>)
 8007b90:	f001 fea1 	bl	80098d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007b94:	2200      	movs	r2, #0
 8007b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b9a:	485e      	ldr	r0, [pc, #376]	; (8007d14 <checkDemoModCalisma+0x250>)
 8007b9c:	f001 fe9b 	bl	80098d6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	4858      	ldr	r0, [pc, #352]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007ba4:	f001 fe80 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d10d      	bne.n	8007bca <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bb2:	4854      	ldr	r0, [pc, #336]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007bb4:	f001 fe78 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007bbe:	4b56      	ldr	r3, [pc, #344]	; (8007d18 <checkDemoModCalisma+0x254>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f083 0301 	eor.w	r3, r3, #1
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007bca:	2102      	movs	r1, #2
 8007bcc:	484d      	ldr	r0, [pc, #308]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007bce:	f001 fe6b 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d125      	bne.n	8007c24 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bdc:	4849      	ldr	r0, [pc, #292]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007bde:	f001 fe63 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11d      	bne.n	8007c24 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007be8:	4b4b      	ldr	r3, [pc, #300]	; (8007d18 <checkDemoModCalisma+0x254>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f083 0301 	eor.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d016      	beq.n	8007c24 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007bf6:	4b44      	ldr	r3, [pc, #272]	; (8007d08 <checkDemoModCalisma+0x244>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	f083 0301 	eor.w	r3, r3, #1
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00f      	beq.n	8007c24 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007c04:	4b42      	ldr	r3, [pc, #264]	; (8007d10 <checkDemoModCalisma+0x24c>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f083 0301 	eor.w	r3, r3, #1
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d008      	beq.n	8007c24 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007c12:	2201      	movs	r2, #1
 8007c14:	2120      	movs	r1, #32
 8007c16:	483b      	ldr	r0, [pc, #236]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007c18:	f001 fe5d 	bl	80098d6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007c1c:	4b3b      	ldr	r3, [pc, #236]	; (8007d0c <checkDemoModCalisma+0x248>)
 8007c1e:	2201      	movs	r2, #1
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e007      	b.n	8007c34 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2120      	movs	r1, #32
 8007c28:	4836      	ldr	r0, [pc, #216]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007c2a:	f001 fe54 	bl	80098d6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007c2e:	4b37      	ldr	r3, [pc, #220]	; (8007d0c <checkDemoModCalisma+0x248>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c34:	2102      	movs	r1, #2
 8007c36:	4833      	ldr	r0, [pc, #204]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007c38:	f001 fe36 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d125      	bne.n	8007c8e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c46:	482f      	ldr	r0, [pc, #188]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007c48:	f001 fe2e 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d11d      	bne.n	8007c8e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007c52:	4b31      	ldr	r3, [pc, #196]	; (8007d18 <checkDemoModCalisma+0x254>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	f083 0301 	eor.w	r3, r3, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d016      	beq.n	8007c8e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007c60:	4b2a      	ldr	r3, [pc, #168]	; (8007d0c <checkDemoModCalisma+0x248>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f083 0301 	eor.w	r3, r3, #1
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00f      	beq.n	8007c8e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007c6e:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <checkDemoModCalisma+0x244>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f083 0301 	eor.w	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	2110      	movs	r1, #16
 8007c80:	4820      	ldr	r0, [pc, #128]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007c82:	f001 fe28 	bl	80098d6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007c86:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <checkDemoModCalisma+0x24c>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e007      	b.n	8007c9e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2110      	movs	r1, #16
 8007c92:	481c      	ldr	r0, [pc, #112]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007c94:	f001 fe1f 	bl	80098d6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <checkDemoModCalisma+0x24c>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	4818      	ldr	r0, [pc, #96]	; (8007d04 <checkDemoModCalisma+0x240>)
 8007ca2:	f001 fe01 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d139      	bne.n	8007d20 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007cac:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <checkDemoModCalisma+0x254>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f083 0301 	eor.w	r3, r3, #1
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d032      	beq.n	8007d20 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007cba:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <checkDemoModCalisma+0x24c>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	f083 0301 	eor.w	r3, r3, #1
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02b      	beq.n	8007d20 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007cc8:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <checkDemoModCalisma+0x248>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f083 0301 	eor.w	r3, r3, #1
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d024      	beq.n	8007d20 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	2102      	movs	r1, #2
 8007cda:	480e      	ldr	r0, [pc, #56]	; (8007d14 <checkDemoModCalisma+0x250>)
 8007cdc:	f001 fdfb 	bl	80098d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	480b      	ldr	r0, [pc, #44]	; (8007d14 <checkDemoModCalisma+0x250>)
 8007ce6:	f001 fdf6 	bl	80098d6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007cea:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <checkDemoModCalisma+0x244>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <checkDemoModCalisma+0x258>)
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e027      	b.n	8007d48 <checkDemoModCalisma+0x284>
 8007cf8:	20000c2e 	.word	0x20000c2e
 8007cfc:	20000c62 	.word	0x20000c62
 8007d00:	20000c2d 	.word	0x20000c2d
 8007d04:	40011000 	.word	0x40011000
 8007d08:	20000c69 	.word	0x20000c69
 8007d0c:	20000c6a 	.word	0x20000c6a
 8007d10:	20000c6b 	.word	0x20000c6b
 8007d14:	40010c00 	.word	0x40010c00
 8007d18:	20000c68 	.word	0x20000c68
 8007d1c:	20000c4e 	.word	0x20000c4e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007d20:	2104      	movs	r1, #4
 8007d22:	48a0      	ldr	r0, [pc, #640]	; (8007fa4 <checkDemoModCalisma+0x4e0>)
 8007d24:	f001 fdc0 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d10c      	bne.n	8007d48 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2102      	movs	r1, #2
 8007d32:	489d      	ldr	r0, [pc, #628]	; (8007fa8 <checkDemoModCalisma+0x4e4>)
 8007d34:	f001 fdcf 	bl	80098d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	489a      	ldr	r0, [pc, #616]	; (8007fa8 <checkDemoModCalisma+0x4e4>)
 8007d3e:	f001 fdca 	bl	80098d6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007d42:	4b9a      	ldr	r3, [pc, #616]	; (8007fac <checkDemoModCalisma+0x4e8>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007d48:	2104      	movs	r1, #4
 8007d4a:	4896      	ldr	r0, [pc, #600]	; (8007fa4 <checkDemoModCalisma+0x4e0>)
 8007d4c:	f001 fdac 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10d      	bne.n	8007d72 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007d56:	2201      	movs	r2, #1
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	4895      	ldr	r0, [pc, #596]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007d5c:	f001 fdbb 	bl	80098d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007d60:	2201      	movs	r2, #1
 8007d62:	2120      	movs	r1, #32
 8007d64:	4892      	ldr	r0, [pc, #584]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007d66:	f001 fdb6 	bl	80098d6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d6a:	4b92      	ldr	r3, [pc, #584]	; (8007fb4 <checkDemoModCalisma+0x4f0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a92      	ldr	r2, [pc, #584]	; (8007fb8 <checkDemoModCalisma+0x4f4>)
 8007d70:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007d72:	4b90      	ldr	r3, [pc, #576]	; (8007fb4 <checkDemoModCalisma+0x4f0>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	4b90      	ldr	r3, [pc, #576]	; (8007fb8 <checkDemoModCalisma+0x4f4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d909      	bls.n	8007d94 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2180      	movs	r1, #128	; 0x80
 8007d84:	488a      	ldr	r0, [pc, #552]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007d86:	f001 fda6 	bl	80098d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2120      	movs	r1, #32
 8007d8e:	4888      	ldr	r0, [pc, #544]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007d90:	f001 fda1 	bl	80098d6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007d94:	2102      	movs	r1, #2
 8007d96:	4883      	ldr	r0, [pc, #524]	; (8007fa4 <checkDemoModCalisma+0x4e0>)
 8007d98:	f001 fd86 	bl	80098a8 <HAL_GPIO_ReadPin>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d108      	bne.n	8007db4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007da2:	2201      	movs	r2, #1
 8007da4:	2140      	movs	r1, #64	; 0x40
 8007da6:	4882      	ldr	r0, [pc, #520]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007da8:	f001 fd95 	bl	80098d6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007dac:	4b81      	ldr	r3, [pc, #516]	; (8007fb4 <checkDemoModCalisma+0x4f0>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a81      	ldr	r2, [pc, #516]	; (8007fb8 <checkDemoModCalisma+0x4f4>)
 8007db2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007db4:	4b7f      	ldr	r3, [pc, #508]	; (8007fb4 <checkDemoModCalisma+0x4f0>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4b7f      	ldr	r3, [pc, #508]	; (8007fb8 <checkDemoModCalisma+0x4f4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d904      	bls.n	8007dcc <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2140      	movs	r1, #64	; 0x40
 8007dc6:	487a      	ldr	r0, [pc, #488]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007dc8:	f001 fd85 	bl	80098d6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007dcc:	4b7b      	ldr	r3, [pc, #492]	; (8007fbc <checkDemoModCalisma+0x4f8>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d058      	beq.n	8007e86 <checkDemoModCalisma+0x3c2>
 8007dd4:	4b7a      	ldr	r3, [pc, #488]	; (8007fc0 <checkDemoModCalisma+0x4fc>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d054      	beq.n	8007e86 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007ddc:	4b79      	ldr	r3, [pc, #484]	; (8007fc4 <checkDemoModCalisma+0x500>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	3301      	adds	r3, #1
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	4b77      	ldr	r3, [pc, #476]	; (8007fc4 <checkDemoModCalisma+0x500>)
 8007de6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007de8:	4b76      	ldr	r3, [pc, #472]	; (8007fc4 <checkDemoModCalisma+0x500>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b09      	cmp	r3, #9
 8007dee:	d908      	bls.n	8007e02 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007df0:	4b74      	ldr	r3, [pc, #464]	; (8007fc4 <checkDemoModCalisma+0x500>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007df6:	4b74      	ldr	r3, [pc, #464]	; (8007fc8 <checkDemoModCalisma+0x504>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	4b72      	ldr	r3, [pc, #456]	; (8007fc8 <checkDemoModCalisma+0x504>)
 8007e00:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007e02:	4b71      	ldr	r3, [pc, #452]	; (8007fc8 <checkDemoModCalisma+0x504>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b09      	cmp	r3, #9
 8007e08:	d908      	bls.n	8007e1c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007e0a:	4b6f      	ldr	r3, [pc, #444]	; (8007fc8 <checkDemoModCalisma+0x504>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007e10:	4b6e      	ldr	r3, [pc, #440]	; (8007fcc <checkDemoModCalisma+0x508>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	3301      	adds	r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	4b6c      	ldr	r3, [pc, #432]	; (8007fcc <checkDemoModCalisma+0x508>)
 8007e1a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007e1c:	4b6b      	ldr	r3, [pc, #428]	; (8007fcc <checkDemoModCalisma+0x508>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b09      	cmp	r3, #9
 8007e22:	d908      	bls.n	8007e36 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007e24:	4b69      	ldr	r3, [pc, #420]	; (8007fcc <checkDemoModCalisma+0x508>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007e2a:	4b69      	ldr	r3, [pc, #420]	; (8007fd0 <checkDemoModCalisma+0x50c>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	4b67      	ldr	r3, [pc, #412]	; (8007fd0 <checkDemoModCalisma+0x50c>)
 8007e34:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007e36:	4b66      	ldr	r3, [pc, #408]	; (8007fd0 <checkDemoModCalisma+0x50c>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b09      	cmp	r3, #9
 8007e3c:	d908      	bls.n	8007e50 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007e3e:	4b64      	ldr	r3, [pc, #400]	; (8007fd0 <checkDemoModCalisma+0x50c>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007e44:	4b63      	ldr	r3, [pc, #396]	; (8007fd4 <checkDemoModCalisma+0x510>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	4b61      	ldr	r3, [pc, #388]	; (8007fd4 <checkDemoModCalisma+0x510>)
 8007e4e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007e50:	4b60      	ldr	r3, [pc, #384]	; (8007fd4 <checkDemoModCalisma+0x510>)
 8007e52:	781a      	ldrb	r2, [r3, #0]
 8007e54:	4b60      	ldr	r3, [pc, #384]	; (8007fd8 <checkDemoModCalisma+0x514>)
 8007e56:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007e5a:	4b5d      	ldr	r3, [pc, #372]	; (8007fd0 <checkDemoModCalisma+0x50c>)
 8007e5c:	781a      	ldrb	r2, [r3, #0]
 8007e5e:	4b5e      	ldr	r3, [pc, #376]	; (8007fd8 <checkDemoModCalisma+0x514>)
 8007e60:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007e62:	4b5a      	ldr	r3, [pc, #360]	; (8007fcc <checkDemoModCalisma+0x508>)
 8007e64:	781a      	ldrb	r2, [r3, #0]
 8007e66:	4b5c      	ldr	r3, [pc, #368]	; (8007fd8 <checkDemoModCalisma+0x514>)
 8007e68:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007e6a:	4b57      	ldr	r3, [pc, #348]	; (8007fc8 <checkDemoModCalisma+0x504>)
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	4b5a      	ldr	r3, [pc, #360]	; (8007fd8 <checkDemoModCalisma+0x514>)
 8007e70:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007e72:	4b54      	ldr	r3, [pc, #336]	; (8007fc4 <checkDemoModCalisma+0x500>)
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	4b58      	ldr	r3, [pc, #352]	; (8007fd8 <checkDemoModCalisma+0x514>)
 8007e78:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007e7a:	4b58      	ldr	r3, [pc, #352]	; (8007fdc <checkDemoModCalisma+0x518>)
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007e80:	4b4f      	ldr	r3, [pc, #316]	; (8007fc0 <checkDemoModCalisma+0x4fc>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007e86:	4b56      	ldr	r3, [pc, #344]	; (8007fe0 <checkDemoModCalisma+0x51c>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 8087 	bne.w	8007f9e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007e90:	4a54      	ldr	r2, [pc, #336]	; (8007fe4 <checkDemoModCalisma+0x520>)
 8007e92:	2101      	movs	r1, #1
 8007e94:	2002      	movs	r0, #2
 8007e96:	f7f8 fb65 	bl	8000564 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007e9a:	4a53      	ldr	r2, [pc, #332]	; (8007fe8 <checkDemoModCalisma+0x524>)
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	f7f8 fb60 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007ea4:	4b4b      	ldr	r3, [pc, #300]	; (8007fd4 <checkDemoModCalisma+0x510>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	220a      	movs	r2, #10
 8007eaa:	4950      	ldr	r1, [pc, #320]	; (8007fec <checkDemoModCalisma+0x528>)
 8007eac:	4618      	mov	r0, r3
 8007eae:	f004 fcf1 	bl	800c894 <itoa>
			lcd_print(2,12,snum);
 8007eb2:	4a4e      	ldr	r2, [pc, #312]	; (8007fec <checkDemoModCalisma+0x528>)
 8007eb4:	210c      	movs	r1, #12
 8007eb6:	2002      	movs	r0, #2
 8007eb8:	f7f8 fb54 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007ebc:	4b44      	ldr	r3, [pc, #272]	; (8007fd0 <checkDemoModCalisma+0x50c>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	220a      	movs	r2, #10
 8007ec2:	494a      	ldr	r1, [pc, #296]	; (8007fec <checkDemoModCalisma+0x528>)
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f004 fce5 	bl	800c894 <itoa>
			lcd_print(2,13,snum);
 8007eca:	4a48      	ldr	r2, [pc, #288]	; (8007fec <checkDemoModCalisma+0x528>)
 8007ecc:	210d      	movs	r1, #13
 8007ece:	2002      	movs	r0, #2
 8007ed0:	f7f8 fb48 	bl	8000564 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007ed4:	4b3d      	ldr	r3, [pc, #244]	; (8007fcc <checkDemoModCalisma+0x508>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	220a      	movs	r2, #10
 8007eda:	4944      	ldr	r1, [pc, #272]	; (8007fec <checkDemoModCalisma+0x528>)
 8007edc:	4618      	mov	r0, r3
 8007ede:	f004 fcd9 	bl	800c894 <itoa>
			lcd_print(2,14,snum);
 8007ee2:	4a42      	ldr	r2, [pc, #264]	; (8007fec <checkDemoModCalisma+0x528>)
 8007ee4:	210e      	movs	r1, #14
 8007ee6:	2002      	movs	r0, #2
 8007ee8:	f7f8 fb3c 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007eec:	4b36      	ldr	r3, [pc, #216]	; (8007fc8 <checkDemoModCalisma+0x504>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	493e      	ldr	r1, [pc, #248]	; (8007fec <checkDemoModCalisma+0x528>)
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f004 fccd 	bl	800c894 <itoa>
			lcd_print(2,15,snum);
 8007efa:	4a3c      	ldr	r2, [pc, #240]	; (8007fec <checkDemoModCalisma+0x528>)
 8007efc:	210f      	movs	r1, #15
 8007efe:	2002      	movs	r0, #2
 8007f00:	f7f8 fb30 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007f04:	4b2f      	ldr	r3, [pc, #188]	; (8007fc4 <checkDemoModCalisma+0x500>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	220a      	movs	r2, #10
 8007f0a:	4938      	ldr	r1, [pc, #224]	; (8007fec <checkDemoModCalisma+0x528>)
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f004 fcc1 	bl	800c894 <itoa>
			lcd_print(2,16,snum);
 8007f12:	4a36      	ldr	r2, [pc, #216]	; (8007fec <checkDemoModCalisma+0x528>)
 8007f14:	2110      	movs	r1, #16
 8007f16:	2002      	movs	r0, #2
 8007f18:	f7f8 fb24 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 8007f1c:	4b34      	ldr	r3, [pc, #208]	; (8007ff0 <checkDemoModCalisma+0x52c>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007f22:	e03c      	b.n	8007f9e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007f24:	4b33      	ldr	r3, [pc, #204]	; (8007ff4 <checkDemoModCalisma+0x530>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d003      	beq.n	8007f34 <checkDemoModCalisma+0x470>
 8007f2c:	4b2c      	ldr	r3, [pc, #176]	; (8007fe0 <checkDemoModCalisma+0x51c>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d134      	bne.n	8007f9e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f34:	2200      	movs	r2, #0
 8007f36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f3a:	481b      	ldr	r0, [pc, #108]	; (8007fa8 <checkDemoModCalisma+0x4e4>)
 8007f3c:	f001 fccb 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f40:	2200      	movs	r2, #0
 8007f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f46:	4818      	ldr	r0, [pc, #96]	; (8007fa8 <checkDemoModCalisma+0x4e4>)
 8007f48:	f001 fcc5 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2104      	movs	r1, #4
 8007f50:	4815      	ldr	r0, [pc, #84]	; (8007fa8 <checkDemoModCalisma+0x4e4>)
 8007f52:	f001 fcc0 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2102      	movs	r1, #2
 8007f5a:	4813      	ldr	r0, [pc, #76]	; (8007fa8 <checkDemoModCalisma+0x4e4>)
 8007f5c:	f001 fcbb 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f60:	2200      	movs	r2, #0
 8007f62:	2101      	movs	r1, #1
 8007f64:	4810      	ldr	r0, [pc, #64]	; (8007fa8 <checkDemoModCalisma+0x4e4>)
 8007f66:	f001 fcb6 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2120      	movs	r1, #32
 8007f6e:	480d      	ldr	r0, [pc, #52]	; (8007fa4 <checkDemoModCalisma+0x4e0>)
 8007f70:	f001 fcb1 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f74:	2200      	movs	r2, #0
 8007f76:	2110      	movs	r1, #16
 8007f78:	480a      	ldr	r0, [pc, #40]	; (8007fa4 <checkDemoModCalisma+0x4e0>)
 8007f7a:	f001 fcac 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2180      	movs	r1, #128	; 0x80
 8007f82:	480b      	ldr	r0, [pc, #44]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007f84:	f001 fca7 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2140      	movs	r1, #64	; 0x40
 8007f8c:	4808      	ldr	r0, [pc, #32]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007f8e:	f001 fca2 	bl	80098d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f92:	2200      	movs	r2, #0
 8007f94:	2120      	movs	r1, #32
 8007f96:	4806      	ldr	r0, [pc, #24]	; (8007fb0 <checkDemoModCalisma+0x4ec>)
 8007f98:	f001 fc9d 	bl	80098d6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007f9c:	e7ff      	b.n	8007f9e <checkDemoModCalisma+0x4da>
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40011000 	.word	0x40011000
 8007fa8:	40010c00 	.word	0x40010c00
 8007fac:	20000c69 	.word	0x20000c69
 8007fb0:	40010800 	.word	0x40010800
 8007fb4:	20000bb8 	.word	0x20000bb8
 8007fb8:	20000bc8 	.word	0x20000bc8
 8007fbc:	20000c68 	.word	0x20000c68
 8007fc0:	20000c4e 	.word	0x20000c4e
 8007fc4:	20000c0d 	.word	0x20000c0d
 8007fc8:	20000c0e 	.word	0x20000c0e
 8007fcc:	200009b4 	.word	0x200009b4
 8007fd0:	200009b5 	.word	0x200009b5
 8007fd4:	20000c0f 	.word	0x20000c0f
 8007fd8:	20000b40 	.word	0x20000b40
 8007fdc:	20000c3c 	.word	0x20000c3c
 8007fe0:	20000c2d 	.word	0x20000c2d
 8007fe4:	0800d7c4 	.word	0x0800d7c4
 8007fe8:	0800d7d0 	.word	0x0800d7d0
 8007fec:	20000bb0 	.word	0x20000bb0
 8007ff0:	20000c44 	.word	0x20000c44
 8007ff4:	20000c2e 	.word	0x20000c2e

08007ff8 <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007ffe:	f7fe f925 	bl	800624c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8008002:	2101      	movs	r1, #1
 8008004:	48ad      	ldr	r0, [pc, #692]	; (80082bc <mainLoop+0x2c4>)
 8008006:	f001 fc4f 	bl	80098a8 <HAL_GPIO_ReadPin>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d136      	bne.n	800807e <mainLoop+0x86>
 8008010:	2108      	movs	r1, #8
 8008012:	48ab      	ldr	r0, [pc, #684]	; (80082c0 <mainLoop+0x2c8>)
 8008014:	f001 fc48 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d12f      	bne.n	800807e <mainLoop+0x86>
 800801e:	2102      	movs	r1, #2
 8008020:	48a6      	ldr	r0, [pc, #664]	; (80082bc <mainLoop+0x2c4>)
 8008022:	f001 fc41 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d128      	bne.n	800807e <mainLoop+0x86>
 800802c:	2104      	movs	r1, #4
 800802e:	48a3      	ldr	r0, [pc, #652]	; (80082bc <mainLoop+0x2c4>)
 8008030:	f001 fc3a 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d121      	bne.n	800807e <mainLoop+0x86>
 800803a:	2108      	movs	r1, #8
 800803c:	489f      	ldr	r0, [pc, #636]	; (80082bc <mainLoop+0x2c4>)
 800803e:	f001 fc33 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11a      	bne.n	800807e <mainLoop+0x86>
 8008048:	2180      	movs	r1, #128	; 0x80
 800804a:	489d      	ldr	r0, [pc, #628]	; (80082c0 <mainLoop+0x2c8>)
 800804c:	f001 fc2c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d113      	bne.n	800807e <mainLoop+0x86>
 8008056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800805a:	4899      	ldr	r0, [pc, #612]	; (80082c0 <mainLoop+0x2c8>)
 800805c:	f001 fc24 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008060:	4603      	mov	r3, r0
 8008062:	2b01      	cmp	r3, #1
 8008064:	d10b      	bne.n	800807e <mainLoop+0x86>
 8008066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800806a:	4895      	ldr	r0, [pc, #596]	; (80082c0 <mainLoop+0x2c8>)
 800806c:	f001 fc1c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008070:	4603      	mov	r3, r0
 8008072:	2b01      	cmp	r3, #1
 8008074:	d103      	bne.n	800807e <mainLoop+0x86>
			butonKontrol=0;
 8008076:	4b93      	ldr	r3, [pc, #588]	; (80082c4 <mainLoop+0x2cc>)
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	e003      	b.n	8008086 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800807e:	4b92      	ldr	r3, [pc, #584]	; (80082c8 <mainLoop+0x2d0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a92      	ldr	r2, [pc, #584]	; (80082cc <mainLoop+0x2d4>)
 8008084:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8008086:	4b92      	ldr	r3, [pc, #584]	; (80082d0 <mainLoop+0x2d8>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d03a      	beq.n	8008104 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800808e:	bf00      	nop
 8008090:	4890      	ldr	r0, [pc, #576]	; (80082d4 <mainLoop+0x2dc>)
 8008092:	f002 fa32 	bl	800a4fa <HAL_I2C_GetError>
 8008096:	4603      	mov	r3, r0
 8008098:	2b04      	cmp	r3, #4
 800809a:	d0f9      	beq.n	8008090 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800809c:	bf00      	nop
 800809e:	488d      	ldr	r0, [pc, #564]	; (80082d4 <mainLoop+0x2dc>)
 80080a0:	f002 fa1e 	bl	800a4e0 <HAL_I2C_GetState>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d1f9      	bne.n	800809e <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80080aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80080ae:	9302      	str	r3, [sp, #8]
 80080b0:	236e      	movs	r3, #110	; 0x6e
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	4b88      	ldr	r3, [pc, #544]	; (80082d8 <mainLoop+0x2e0>)
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	236e      	movs	r3, #110	; 0x6e
 80080ba:	2200      	movs	r2, #0
 80080bc:	21a0      	movs	r1, #160	; 0xa0
 80080be:	4885      	ldr	r0, [pc, #532]	; (80082d4 <mainLoop+0x2dc>)
 80080c0:	f001 feac 	bl	8009e1c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80080c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080c8:	f000 fe1e 	bl	8008d08 <HAL_Delay>

		  hafizaYaz=0;
 80080cc:	4b80      	ldr	r3, [pc, #512]	; (80082d0 <mainLoop+0x2d8>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80080d2:	4b82      	ldr	r3, [pc, #520]	; (80082dc <mainLoop+0x2e4>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80080da:	4a81      	ldr	r2, [pc, #516]	; (80082e0 <mainLoop+0x2e8>)
 80080dc:	2101      	movs	r1, #1
 80080de:	2002      	movs	r0, #2
 80080e0:	f7f8 fa40 	bl	8000564 <lcd_print>
 80080e4:	e008      	b.n	80080f8 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80080e6:	4b7d      	ldr	r3, [pc, #500]	; (80082dc <mainLoop+0x2e4>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d104      	bne.n	80080f8 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80080ee:	4a7d      	ldr	r2, [pc, #500]	; (80082e4 <mainLoop+0x2ec>)
 80080f0:	2101      	movs	r1, #1
 80080f2:	2002      	movs	r0, #2
 80080f4:	f7f8 fa36 	bl	8000564 <lcd_print>
		  }

		  HAL_Delay(1000);
 80080f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080fc:	f000 fe04 	bl	8008d08 <HAL_Delay>
		  lcd_clear();
 8008100:	f7f8 fa5c 	bl	80005bc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008104:	4b78      	ldr	r3, [pc, #480]	; (80082e8 <mainLoop+0x2f0>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f083 0301 	eor.w	r3, r3, #1
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d06e      	beq.n	80081f0 <mainLoop+0x1f8>
 8008112:	4870      	ldr	r0, [pc, #448]	; (80082d4 <mainLoop+0x2dc>)
 8008114:	f002 f9e4 	bl	800a4e0 <HAL_I2C_GetState>
 8008118:	4603      	mov	r3, r0
 800811a:	2b20      	cmp	r3, #32
 800811c:	d168      	bne.n	80081f0 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 800811e:	4b73      	ldr	r3, [pc, #460]	; (80082ec <mainLoop+0x2f4>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f083 0301 	eor.w	r3, r3, #1
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d044      	beq.n	80081b6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 800812c:	4a70      	ldr	r2, [pc, #448]	; (80082f0 <mainLoop+0x2f8>)
 800812e:	2101      	movs	r1, #1
 8008130:	2001      	movs	r0, #1
 8008132:	f7f8 fa17 	bl	8000564 <lcd_print>
			  if(dilSecim==0) {
 8008136:	4b69      	ldr	r3, [pc, #420]	; (80082dc <mainLoop+0x2e4>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d105      	bne.n	800814a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800813e:	4a6d      	ldr	r2, [pc, #436]	; (80082f4 <mainLoop+0x2fc>)
 8008140:	2101      	movs	r1, #1
 8008142:	2002      	movs	r0, #2
 8008144:	f7f8 fa0e 	bl	8000564 <lcd_print>
 8008148:	e008      	b.n	800815c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800814a:	4b64      	ldr	r3, [pc, #400]	; (80082dc <mainLoop+0x2e4>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d104      	bne.n	800815c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8008152:	4a69      	ldr	r2, [pc, #420]	; (80082f8 <mainLoop+0x300>)
 8008154:	2101      	movs	r1, #1
 8008156:	2002      	movs	r0, #2
 8008158:	f7f8 fa04 	bl	8000564 <lcd_print>
			  }
			  HAL_Delay(1000);
 800815c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008160:	f000 fdd2 	bl	8008d08 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008164:	bf00      	nop
 8008166:	485b      	ldr	r0, [pc, #364]	; (80082d4 <mainLoop+0x2dc>)
 8008168:	f002 f9c7 	bl	800a4fa <HAL_I2C_GetError>
 800816c:	4603      	mov	r3, r0
 800816e:	2b04      	cmp	r3, #4
 8008170:	d0f9      	beq.n	8008166 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008172:	e003      	b.n	800817c <mainLoop+0x184>
				  HAL_Delay(1000);
 8008174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008178:	f000 fdc6 	bl	8008d08 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800817c:	4855      	ldr	r0, [pc, #340]	; (80082d4 <mainLoop+0x2dc>)
 800817e:	f002 f9af 	bl	800a4e0 <HAL_I2C_GetState>
 8008182:	4603      	mov	r3, r0
 8008184:	2b20      	cmp	r3, #32
 8008186:	d1f5      	bne.n	8008174 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8008188:	4b54      	ldr	r3, [pc, #336]	; (80082dc <mainLoop+0x2e4>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d105      	bne.n	800819c <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8008190:	4a5a      	ldr	r2, [pc, #360]	; (80082fc <mainLoop+0x304>)
 8008192:	2101      	movs	r1, #1
 8008194:	2002      	movs	r0, #2
 8008196:	f7f8 f9e5 	bl	8000564 <lcd_print>
 800819a:	e008      	b.n	80081ae <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 800819c:	4b4f      	ldr	r3, [pc, #316]	; (80082dc <mainLoop+0x2e4>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d104      	bne.n	80081ae <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80081a4:	4a56      	ldr	r2, [pc, #344]	; (8008300 <mainLoop+0x308>)
 80081a6:	2101      	movs	r1, #1
 80081a8:	2002      	movs	r0, #2
 80081aa:	f7f8 f9db 	bl	8000564 <lcd_print>
			  }

			  ilkOkuma=1;
 80081ae:	4b4f      	ldr	r3, [pc, #316]	; (80082ec <mainLoop+0x2f4>)
 80081b0:	2201      	movs	r2, #1
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	e014      	b.n	80081e0 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80081b6:	4b49      	ldr	r3, [pc, #292]	; (80082dc <mainLoop+0x2e4>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d105      	bne.n	80081ca <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80081be:	4a51      	ldr	r2, [pc, #324]	; (8008304 <mainLoop+0x30c>)
 80081c0:	2101      	movs	r1, #1
 80081c2:	2002      	movs	r0, #2
 80081c4:	f7f8 f9ce 	bl	8000564 <lcd_print>
 80081c8:	e008      	b.n	80081dc <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80081ca:	4b44      	ldr	r3, [pc, #272]	; (80082dc <mainLoop+0x2e4>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d104      	bne.n	80081dc <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80081d2:	4a4d      	ldr	r2, [pc, #308]	; (8008308 <mainLoop+0x310>)
 80081d4:	2101      	movs	r1, #1
 80081d6:	2002      	movs	r0, #2
 80081d8:	f7f8 f9c4 	bl	8000564 <lcd_print>
			  }
			  lcd_clear();
 80081dc:	f7f8 f9ee 	bl	80005bc <lcd_clear>
		  }

		  lcd_clear();
 80081e0:	f7f8 f9ec 	bl	80005bc <lcd_clear>

		  eepromKontrol(1);
 80081e4:	2001      	movs	r0, #1
 80081e6:	f7fd fbc7 	bl	8005978 <eepromKontrol>
		  hafizaOku=1;
 80081ea:	4b3f      	ldr	r3, [pc, #252]	; (80082e8 <mainLoop+0x2f0>)
 80081ec:	2201      	movs	r2, #1
 80081ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80081f0:	4b46      	ldr	r3, [pc, #280]	; (800830c <mainLoop+0x314>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d11c      	bne.n	8008232 <mainLoop+0x23a>
 80081f8:	4b45      	ldr	r3, [pc, #276]	; (8008310 <mainLoop+0x318>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	f083 0301 	eor.w	r3, r3, #1
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d015      	beq.n	8008232 <mainLoop+0x23a>
 8008206:	4b43      	ldr	r3, [pc, #268]	; (8008314 <mainLoop+0x31c>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d111      	bne.n	8008232 <mainLoop+0x23a>
			lcd_clear();
 800820e:	f7f8 f9d5 	bl	80005bc <lcd_clear>
			HAL_Delay(10);
 8008212:	200a      	movs	r0, #10
 8008214:	f000 fd78 	bl	8008d08 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008218:	4a3f      	ldr	r2, [pc, #252]	; (8008318 <mainLoop+0x320>)
 800821a:	2101      	movs	r1, #1
 800821c:	2001      	movs	r0, #1
 800821e:	f7f8 f9a1 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008222:	4a3e      	ldr	r2, [pc, #248]	; (800831c <mainLoop+0x324>)
 8008224:	2101      	movs	r1, #1
 8008226:	2002      	movs	r0, #2
 8008228:	f7f8 f99c 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 800822c:	4b38      	ldr	r3, [pc, #224]	; (8008310 <mainLoop+0x318>)
 800822e:	2201      	movs	r2, #1
 8008230:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008232:	4b36      	ldr	r3, [pc, #216]	; (800830c <mainLoop+0x314>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d112      	bne.n	8008260 <mainLoop+0x268>
 800823a:	2102      	movs	r1, #2
 800823c:	481f      	ldr	r0, [pc, #124]	; (80082bc <mainLoop+0x2c4>)
 800823e:	f001 fb33 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008242:	4603      	mov	r3, r0
 8008244:	2b01      	cmp	r3, #1
 8008246:	d10b      	bne.n	8008260 <mainLoop+0x268>
 8008248:	2104      	movs	r1, #4
 800824a:	481c      	ldr	r0, [pc, #112]	; (80082bc <mainLoop+0x2c4>)
 800824c:	f001 fb2c 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008250:	4603      	mov	r3, r0
 8008252:	2b01      	cmp	r3, #1
 8008254:	d104      	bne.n	8008260 <mainLoop+0x268>
			menuGiris=1;
 8008256:	4b2d      	ldr	r3, [pc, #180]	; (800830c <mainLoop+0x314>)
 8008258:	2201      	movs	r2, #1
 800825a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800825c:	f7f8 f9ae 	bl	80005bc <lcd_clear>
		}

		if(menuGiris==1) {
 8008260:	4b2a      	ldr	r3, [pc, #168]	; (800830c <mainLoop+0x314>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d102      	bne.n	800826e <mainLoop+0x276>
			menu(&hi2c1);
 8008268:	481a      	ldr	r0, [pc, #104]	; (80082d4 <mainLoop+0x2dc>)
 800826a:	f7f9 f941 	bl	80014f0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800826e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008272:	4813      	ldr	r0, [pc, #76]	; (80082c0 <mainLoop+0x2c8>)
 8008274:	f001 fb47 	bl	8009906 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8008278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800827c:	4828      	ldr	r0, [pc, #160]	; (8008320 <mainLoop+0x328>)
 800827e:	f001 fb13 	bl	80098a8 <HAL_GPIO_ReadPin>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <mainLoop+0x2a6>
 8008288:	4b26      	ldr	r3, [pc, #152]	; (8008324 <mainLoop+0x32c>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	f083 0301 	eor.w	r3, r3, #1
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <mainLoop+0x2a6>
			stopVar=1;
 8008296:	4b24      	ldr	r3, [pc, #144]	; (8008328 <mainLoop+0x330>)
 8008298:	2201      	movs	r2, #1
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	e002      	b.n	80082a4 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 800829e:	4b22      	ldr	r3, [pc, #136]	; (8008328 <mainLoop+0x330>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80082a4:	f7fd fff2 	bl	800628c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80082a8:	f7fe f824 	bl	80062f4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80082ac:	f7fe f868 	bl	8006380 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80082b0:	f7fe f8b8 	bl	8006424 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80082b4:	f7ff fc06 	bl	8007ac4 <checkDemoModCalisma>
		checkLCDBacklight();
 80082b8:	e6a1      	b.n	8007ffe <mainLoop+0x6>
 80082ba:	bf00      	nop
 80082bc:	40010800 	.word	0x40010800
 80082c0:	40011000 	.word	0x40011000
 80082c4:	20000c3f 	.word	0x20000c3f
 80082c8:	20000bb8 	.word	0x20000bb8
 80082cc:	20000bd4 	.word	0x20000bd4
 80082d0:	20000c3c 	.word	0x20000c3c
 80082d4:	20000a5c 	.word	0x20000a5c
 80082d8:	20000b40 	.word	0x20000b40
 80082dc:	20000c31 	.word	0x20000c31
 80082e0:	0800d7e8 	.word	0x0800d7e8
 80082e4:	0800d7fc 	.word	0x0800d7fc
 80082e8:	20000c3d 	.word	0x20000c3d
 80082ec:	20000c3e 	.word	0x20000c3e
 80082f0:	0800d810 	.word	0x0800d810
 80082f4:	0800d824 	.word	0x0800d824
 80082f8:	0800d838 	.word	0x0800d838
 80082fc:	0800d84c 	.word	0x0800d84c
 8008300:	0800d860 	.word	0x0800d860
 8008304:	0800d874 	.word	0x0800d874
 8008308:	0800d888 	.word	0x0800d888
 800830c:	20000c2d 	.word	0x20000c2d
 8008310:	20000c44 	.word	0x20000c44
 8008314:	20000c2e 	.word	0x20000c2e
 8008318:	0800d74c 	.word	0x0800d74c
 800831c:	0800d760 	.word	0x0800d760
 8008320:	40010c00 	.word	0x40010c00
 8008324:	20000c65 	.word	0x20000c65
 8008328:	20000c62 	.word	0x20000c62

0800832c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008334:	4b04      	ldr	r3, [pc, #16]	; (8008348 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	4a03      	ldr	r2, [pc, #12]	; (8008348 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800833c:	6013      	str	r3, [r2, #0]
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr
 8008348:	20000bb8 	.word	0x20000bb8

0800834c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008350:	f000 fc78 	bl	8008c44 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008358:	f000 fcd6 	bl	8008d08 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800835c:	f000 f8a8 	bl	80084b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008360:	f000 f9ca 	bl	80086f8 <MX_GPIO_Init>
  MX_CAN_Init();
 8008364:	f000 f8ea 	bl	800853c <MX_CAN_Init>
  MX_I2C1_Init();
 8008368:	f000 f91c 	bl	80085a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800836c:	f000 f948 	bl	8008600 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008370:	f000 f998 	bl	80086a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008374:	2201      	movs	r2, #1
 8008376:	2140      	movs	r1, #64	; 0x40
 8008378:	4843      	ldr	r0, [pc, #268]	; (8008488 <main+0x13c>)
 800837a:	f001 faac 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800837e:	2201      	movs	r2, #1
 8008380:	2180      	movs	r1, #128	; 0x80
 8008382:	4841      	ldr	r0, [pc, #260]	; (8008488 <main+0x13c>)
 8008384:	f001 faa7 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008388:	200a      	movs	r0, #10
 800838a:	f000 fcbd 	bl	8008d08 <HAL_Delay>
  lcd_init();
 800838e:	f7f8 f8b7 	bl	8000500 <lcd_init>
  HAL_Delay(10);
 8008392:	200a      	movs	r0, #10
 8008394:	f000 fcb8 	bl	8008d08 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008398:	483c      	ldr	r0, [pc, #240]	; (800848c <main+0x140>)
 800839a:	f003 f94f 	bl	800b63c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800839e:	bf00      	nop
 80083a0:	483b      	ldr	r0, [pc, #236]	; (8008490 <main+0x144>)
 80083a2:	f002 f8aa 	bl	800a4fa <HAL_I2C_GetError>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d0f9      	beq.n	80083a0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80083ac:	bf00      	nop
 80083ae:	4838      	ldr	r0, [pc, #224]	; (8008490 <main+0x144>)
 80083b0:	f002 f896 	bl	800a4e0 <HAL_I2C_GetState>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d1f9      	bne.n	80083ae <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80083ba:	2200      	movs	r2, #0
 80083bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083c0:	4831      	ldr	r0, [pc, #196]	; (8008488 <main+0x13c>)
 80083c2:	f001 fa88 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80083c6:	2200      	movs	r2, #0
 80083c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083cc:	482e      	ldr	r0, [pc, #184]	; (8008488 <main+0x13c>)
 80083ce:	f001 fa82 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80083d2:	2200      	movs	r2, #0
 80083d4:	2104      	movs	r1, #4
 80083d6:	482c      	ldr	r0, [pc, #176]	; (8008488 <main+0x13c>)
 80083d8:	f001 fa7d 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80083dc:	2200      	movs	r2, #0
 80083de:	2102      	movs	r1, #2
 80083e0:	4829      	ldr	r0, [pc, #164]	; (8008488 <main+0x13c>)
 80083e2:	f001 fa78 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80083e6:	2200      	movs	r2, #0
 80083e8:	2101      	movs	r1, #1
 80083ea:	4827      	ldr	r0, [pc, #156]	; (8008488 <main+0x13c>)
 80083ec:	f001 fa73 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80083f0:	2200      	movs	r2, #0
 80083f2:	2120      	movs	r1, #32
 80083f4:	4827      	ldr	r0, [pc, #156]	; (8008494 <main+0x148>)
 80083f6:	f001 fa6e 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80083fa:	2200      	movs	r2, #0
 80083fc:	2110      	movs	r1, #16
 80083fe:	4825      	ldr	r0, [pc, #148]	; (8008494 <main+0x148>)
 8008400:	f001 fa69 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008404:	2200      	movs	r2, #0
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	4823      	ldr	r0, [pc, #140]	; (8008498 <main+0x14c>)
 800840a:	f001 fa64 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800840e:	2200      	movs	r2, #0
 8008410:	2140      	movs	r1, #64	; 0x40
 8008412:	4821      	ldr	r0, [pc, #132]	; (8008498 <main+0x14c>)
 8008414:	f001 fa5f 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008418:	2200      	movs	r2, #0
 800841a:	2120      	movs	r1, #32
 800841c:	481e      	ldr	r0, [pc, #120]	; (8008498 <main+0x14c>)
 800841e:	f001 fa5a 	bl	80098d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008422:	2200      	movs	r2, #0
 8008424:	2110      	movs	r1, #16
 8008426:	481c      	ldr	r0, [pc, #112]	; (8008498 <main+0x14c>)
 8008428:	f001 fa55 	bl	80098d6 <HAL_GPIO_WritePin>

  i2cTest();
 800842c:	f7fd fe60 	bl	80060f0 <i2cTest>
  HAL_Delay(100);
 8008430:	2064      	movs	r0, #100	; 0x64
 8008432:	f000 fc69 	bl	8008d08 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008436:	4a19      	ldr	r2, [pc, #100]	; (800849c <main+0x150>)
 8008438:	2101      	movs	r1, #1
 800843a:	2001      	movs	r0, #1
 800843c:	f7f8 f892 	bl	8000564 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008440:	4a17      	ldr	r2, [pc, #92]	; (80084a0 <main+0x154>)
 8008442:	2101      	movs	r1, #1
 8008444:	2002      	movs	r0, #2
 8008446:	f7f8 f88d 	bl	8000564 <lcd_print>
  HAL_Delay(1000);
 800844a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800844e:	f000 fc5b 	bl	8008d08 <HAL_Delay>
  lcd_clear();
 8008452:	f7f8 f8b3 	bl	80005bc <lcd_clear>

  eepromKontrol(0);
 8008456:	2000      	movs	r0, #0
 8008458:	f7fd fa8e 	bl	8005978 <eepromKontrol>
  HAL_Delay(200);
 800845c:	20c8      	movs	r0, #200	; 0xc8
 800845e:	f000 fc53 	bl	8008d08 <HAL_Delay>

  lcd_clear();
 8008462:	f7f8 f8ab 	bl	80005bc <lcd_clear>
  HAL_Delay(200);
 8008466:	20c8      	movs	r0, #200	; 0xc8
 8008468:	f000 fc4e 	bl	8008d08 <HAL_Delay>

  backLightTimer = millis;
 800846c:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <main+0x158>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a0d      	ldr	r2, [pc, #52]	; (80084a8 <main+0x15c>)
 8008472:	6013      	str	r3, [r2, #0]

  //ESP8266_Init(&huart1, "H.İ.D.", "asdasd0099123");

  if(machineID[11] == '\0') {
 8008474:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <main+0x160>)
 8008476:	7adb      	ldrb	r3, [r3, #11]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <main+0x136>
	  takeMachineID(0);
 800847c:	2000      	movs	r0, #0
 800847e:	f7f8 fa9b 	bl	80009b8 <takeMachineID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008482:	f7ff fdb9 	bl	8007ff8 <mainLoop>
 8008486:	e7fc      	b.n	8008482 <main+0x136>
 8008488:	40010c00 	.word	0x40010c00
 800848c:	20000ab0 	.word	0x20000ab0
 8008490:	20000a5c 	.word	0x20000a5c
 8008494:	40011000 	.word	0x40011000
 8008498:	40010800 	.word	0x40010800
 800849c:	0800d89c 	.word	0x0800d89c
 80084a0:	0800d8b0 	.word	0x0800d8b0
 80084a4:	20000bb8 	.word	0x20000bb8
 80084a8:	20000bd4 	.word	0x20000bd4
 80084ac:	20000bd8 	.word	0x20000bd8

080084b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b090      	sub	sp, #64	; 0x40
 80084b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084b6:	f107 0318 	add.w	r3, r7, #24
 80084ba:	2228      	movs	r2, #40	; 0x28
 80084bc:	2100      	movs	r1, #0
 80084be:	4618      	mov	r0, r3
 80084c0:	f004 fae0 	bl	800ca84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084c4:	1d3b      	adds	r3, r7, #4
 80084c6:	2200      	movs	r2, #0
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	605a      	str	r2, [r3, #4]
 80084cc:	609a      	str	r2, [r3, #8]
 80084ce:	60da      	str	r2, [r3, #12]
 80084d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80084d2:	2301      	movs	r3, #1
 80084d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80084da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80084dc:	2300      	movs	r3, #0
 80084de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80084e0:	2301      	movs	r3, #1
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084e4:	2302      	movs	r3, #2
 80084e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80084e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80084ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80084ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80084f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084f4:	f107 0318 	add.w	r3, r7, #24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f002 fc3f 	bl	800ad7c <HAL_RCC_OscConfig>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008504:	f000 f9a2 	bl	800884c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008508:	230f      	movs	r3, #15
 800850a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800850c:	2302      	movs	r3, #2
 800850e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008510:	2300      	movs	r3, #0
 8008512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800851e:	1d3b      	adds	r3, r7, #4
 8008520:	2102      	movs	r1, #2
 8008522:	4618      	mov	r0, r3
 8008524:	f002 feac 	bl	800b280 <HAL_RCC_ClockConfig>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800852e:	f000 f98d 	bl	800884c <Error_Handler>
  }
}
 8008532:	bf00      	nop
 8008534:	3740      	adds	r7, #64	; 0x40
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008540:	4b16      	ldr	r3, [pc, #88]	; (800859c <MX_CAN_Init+0x60>)
 8008542:	4a17      	ldr	r2, [pc, #92]	; (80085a0 <MX_CAN_Init+0x64>)
 8008544:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008546:	4b15      	ldr	r3, [pc, #84]	; (800859c <MX_CAN_Init+0x60>)
 8008548:	2210      	movs	r2, #16
 800854a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800854c:	4b13      	ldr	r3, [pc, #76]	; (800859c <MX_CAN_Init+0x60>)
 800854e:	2200      	movs	r2, #0
 8008550:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008552:	4b12      	ldr	r3, [pc, #72]	; (800859c <MX_CAN_Init+0x60>)
 8008554:	2200      	movs	r2, #0
 8008556:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008558:	4b10      	ldr	r3, [pc, #64]	; (800859c <MX_CAN_Init+0x60>)
 800855a:	2200      	movs	r2, #0
 800855c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800855e:	4b0f      	ldr	r3, [pc, #60]	; (800859c <MX_CAN_Init+0x60>)
 8008560:	2200      	movs	r2, #0
 8008562:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008564:	4b0d      	ldr	r3, [pc, #52]	; (800859c <MX_CAN_Init+0x60>)
 8008566:	2200      	movs	r2, #0
 8008568:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800856a:	4b0c      	ldr	r3, [pc, #48]	; (800859c <MX_CAN_Init+0x60>)
 800856c:	2200      	movs	r2, #0
 800856e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <MX_CAN_Init+0x60>)
 8008572:	2200      	movs	r2, #0
 8008574:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008576:	4b09      	ldr	r3, [pc, #36]	; (800859c <MX_CAN_Init+0x60>)
 8008578:	2200      	movs	r2, #0
 800857a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800857c:	4b07      	ldr	r3, [pc, #28]	; (800859c <MX_CAN_Init+0x60>)
 800857e:	2200      	movs	r2, #0
 8008580:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <MX_CAN_Init+0x60>)
 8008584:	2200      	movs	r2, #0
 8008586:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008588:	4804      	ldr	r0, [pc, #16]	; (800859c <MX_CAN_Init+0x60>)
 800858a:	f000 fbe1 	bl	8008d50 <HAL_CAN_Init>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008594:	f000 f95a 	bl	800884c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008598:	bf00      	nop
 800859a:	bd80      	pop	{r7, pc}
 800859c:	20000a34 	.word	0x20000a34
 80085a0:	40006400 	.word	0x40006400

080085a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80085a8:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085aa:	4a13      	ldr	r2, [pc, #76]	; (80085f8 <MX_I2C1_Init+0x54>)
 80085ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80085ae:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085b0:	4a12      	ldr	r2, [pc, #72]	; (80085fc <MX_I2C1_Init+0x58>)
 80085b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80085b4:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80085ba:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085bc:	2200      	movs	r2, #0
 80085be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80085c0:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80085d4:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80085da:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085dc:	2200      	movs	r2, #0
 80085de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80085e0:	4804      	ldr	r0, [pc, #16]	; (80085f4 <MX_I2C1_Init+0x50>)
 80085e2:	f001 f9a9 	bl	8009938 <HAL_I2C_Init>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80085ec:	f000 f92e 	bl	800884c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80085f0:	bf00      	nop
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000a5c 	.word	0x20000a5c
 80085f8:	40005400 	.word	0x40005400
 80085fc:	00061a80 	.word	0x00061a80

08008600 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008606:	f107 0308 	add.w	r3, r7, #8
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	605a      	str	r2, [r3, #4]
 8008610:	609a      	str	r2, [r3, #8]
 8008612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008614:	463b      	mov	r3, r7
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800861c:	4b1f      	ldr	r3, [pc, #124]	; (800869c <MX_TIM1_Init+0x9c>)
 800861e:	4a20      	ldr	r2, [pc, #128]	; (80086a0 <MX_TIM1_Init+0xa0>)
 8008620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008622:	4b1e      	ldr	r3, [pc, #120]	; (800869c <MX_TIM1_Init+0x9c>)
 8008624:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008628:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800862a:	4b1c      	ldr	r3, [pc, #112]	; (800869c <MX_TIM1_Init+0x9c>)
 800862c:	2200      	movs	r2, #0
 800862e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008630:	4b1a      	ldr	r3, [pc, #104]	; (800869c <MX_TIM1_Init+0x9c>)
 8008632:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008636:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008638:	4b18      	ldr	r3, [pc, #96]	; (800869c <MX_TIM1_Init+0x9c>)
 800863a:	2200      	movs	r2, #0
 800863c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800863e:	4b17      	ldr	r3, [pc, #92]	; (800869c <MX_TIM1_Init+0x9c>)
 8008640:	2200      	movs	r2, #0
 8008642:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008644:	4b15      	ldr	r3, [pc, #84]	; (800869c <MX_TIM1_Init+0x9c>)
 8008646:	2200      	movs	r2, #0
 8008648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800864a:	4814      	ldr	r0, [pc, #80]	; (800869c <MX_TIM1_Init+0x9c>)
 800864c:	f002 ffa6 	bl	800b59c <HAL_TIM_Base_Init>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008656:	f000 f8f9 	bl	800884c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800865a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800865e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008660:	f107 0308 	add.w	r3, r7, #8
 8008664:	4619      	mov	r1, r3
 8008666:	480d      	ldr	r0, [pc, #52]	; (800869c <MX_TIM1_Init+0x9c>)
 8008668:	f003 f950 	bl	800b90c <HAL_TIM_ConfigClockSource>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008672:	f000 f8eb 	bl	800884c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008676:	2300      	movs	r3, #0
 8008678:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800867a:	2300      	movs	r3, #0
 800867c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800867e:	463b      	mov	r3, r7
 8008680:	4619      	mov	r1, r3
 8008682:	4806      	ldr	r0, [pc, #24]	; (800869c <MX_TIM1_Init+0x9c>)
 8008684:	f003 fb3e 	bl	800bd04 <HAL_TIMEx_MasterConfigSynchronization>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800868e:	f000 f8dd 	bl	800884c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008692:	bf00      	nop
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20000ab0 	.word	0x20000ab0
 80086a0:	40012c00 	.word	0x40012c00

080086a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086aa:	4a12      	ldr	r2, [pc, #72]	; (80086f4 <MX_USART1_UART_Init+0x50>)
 80086ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80086ae:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086bc:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086be:	2200      	movs	r2, #0
 80086c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80086c8:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086ca:	220c      	movs	r2, #12
 80086cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086ce:	4b08      	ldr	r3, [pc, #32]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80086da:	4805      	ldr	r0, [pc, #20]	; (80086f0 <MX_USART1_UART_Init+0x4c>)
 80086dc:	f003 fb90 	bl	800be00 <HAL_UART_Init>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80086e6:	f000 f8b1 	bl	800884c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80086ea:	bf00      	nop
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000af8 	.word	0x20000af8
 80086f4:	40013800 	.word	0x40013800

080086f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086fe:	f107 0310 	add.w	r3, r7, #16
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	605a      	str	r2, [r3, #4]
 8008708:	609a      	str	r2, [r3, #8]
 800870a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800870c:	4b4b      	ldr	r3, [pc, #300]	; (800883c <MX_GPIO_Init+0x144>)
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	4a4a      	ldr	r2, [pc, #296]	; (800883c <MX_GPIO_Init+0x144>)
 8008712:	f043 0310 	orr.w	r3, r3, #16
 8008716:	6193      	str	r3, [r2, #24]
 8008718:	4b48      	ldr	r3, [pc, #288]	; (800883c <MX_GPIO_Init+0x144>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008724:	4b45      	ldr	r3, [pc, #276]	; (800883c <MX_GPIO_Init+0x144>)
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	4a44      	ldr	r2, [pc, #272]	; (800883c <MX_GPIO_Init+0x144>)
 800872a:	f043 0320 	orr.w	r3, r3, #32
 800872e:	6193      	str	r3, [r2, #24]
 8008730:	4b42      	ldr	r3, [pc, #264]	; (800883c <MX_GPIO_Init+0x144>)
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f003 0320 	and.w	r3, r3, #32
 8008738:	60bb      	str	r3, [r7, #8]
 800873a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800873c:	4b3f      	ldr	r3, [pc, #252]	; (800883c <MX_GPIO_Init+0x144>)
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	4a3e      	ldr	r2, [pc, #248]	; (800883c <MX_GPIO_Init+0x144>)
 8008742:	f043 0304 	orr.w	r3, r3, #4
 8008746:	6193      	str	r3, [r2, #24]
 8008748:	4b3c      	ldr	r3, [pc, #240]	; (800883c <MX_GPIO_Init+0x144>)
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	607b      	str	r3, [r7, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008754:	4b39      	ldr	r3, [pc, #228]	; (800883c <MX_GPIO_Init+0x144>)
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	4a38      	ldr	r2, [pc, #224]	; (800883c <MX_GPIO_Init+0x144>)
 800875a:	f043 0308 	orr.w	r3, r3, #8
 800875e:	6193      	str	r3, [r2, #24]
 8008760:	4b36      	ldr	r3, [pc, #216]	; (800883c <MX_GPIO_Init+0x144>)
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	603b      	str	r3, [r7, #0]
 800876a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800876c:	2200      	movs	r2, #0
 800876e:	21f0      	movs	r1, #240	; 0xf0
 8008770:	4833      	ldr	r0, [pc, #204]	; (8008840 <MX_GPIO_Init+0x148>)
 8008772:	f001 f8b0 	bl	80098d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008776:	2200      	movs	r2, #0
 8008778:	f241 0130 	movw	r1, #4144	; 0x1030
 800877c:	4831      	ldr	r0, [pc, #196]	; (8008844 <MX_GPIO_Init+0x14c>)
 800877e:	f001 f8aa 	bl	80098d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008782:	2200      	movs	r2, #0
 8008784:	f640 4107 	movw	r1, #3079	; 0xc07
 8008788:	482f      	ldr	r0, [pc, #188]	; (8008848 <MX_GPIO_Init+0x150>)
 800878a:	f001 f8a4 	bl	80098d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800878e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008792:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008794:	2300      	movs	r3, #0
 8008796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008798:	2300      	movs	r3, #0
 800879a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800879c:	f107 0310 	add.w	r3, r7, #16
 80087a0:	4619      	mov	r1, r3
 80087a2:	4828      	ldr	r0, [pc, #160]	; (8008844 <MX_GPIO_Init+0x14c>)
 80087a4:	f000 fe20 	bl	80093e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80087a8:	f248 130f 	movw	r3, #33039	; 0x810f
 80087ac:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087b6:	f107 0310 	add.w	r3, r7, #16
 80087ba:	4619      	mov	r1, r3
 80087bc:	4820      	ldr	r0, [pc, #128]	; (8008840 <MX_GPIO_Init+0x148>)
 80087be:	f000 fe13 	bl	80093e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80087c2:	23f0      	movs	r3, #240	; 0xf0
 80087c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087c6:	2301      	movs	r3, #1
 80087c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ce:	2302      	movs	r3, #2
 80087d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087d2:	f107 0310 	add.w	r3, r7, #16
 80087d6:	4619      	mov	r1, r3
 80087d8:	4819      	ldr	r0, [pc, #100]	; (8008840 <MX_GPIO_Init+0x148>)
 80087da:	f000 fe05 	bl	80093e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80087de:	f241 0330 	movw	r3, #4144	; 0x1030
 80087e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087e4:	2301      	movs	r3, #1
 80087e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ec:	2302      	movs	r3, #2
 80087ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087f0:	f107 0310 	add.w	r3, r7, #16
 80087f4:	4619      	mov	r1, r3
 80087f6:	4813      	ldr	r0, [pc, #76]	; (8008844 <MX_GPIO_Init+0x14c>)
 80087f8:	f000 fdf6 	bl	80093e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80087fc:	f640 4307 	movw	r3, #3079	; 0xc07
 8008800:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008802:	2301      	movs	r3, #1
 8008804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008806:	2300      	movs	r3, #0
 8008808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800880a:	2302      	movs	r3, #2
 800880c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800880e:	f107 0310 	add.w	r3, r7, #16
 8008812:	4619      	mov	r1, r3
 8008814:	480c      	ldr	r0, [pc, #48]	; (8008848 <MX_GPIO_Init+0x150>)
 8008816:	f000 fde7 	bl	80093e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800881a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800881e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008824:	2300      	movs	r3, #0
 8008826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008828:	f107 0310 	add.w	r3, r7, #16
 800882c:	4619      	mov	r1, r3
 800882e:	4806      	ldr	r0, [pc, #24]	; (8008848 <MX_GPIO_Init+0x150>)
 8008830:	f000 fdda 	bl	80093e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008834:	bf00      	nop
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	40021000 	.word	0x40021000
 8008840:	40010800 	.word	0x40010800
 8008844:	40011000 	.word	0x40011000
 8008848:	40010c00 	.word	0x40010c00

0800884c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008850:	bf00      	nop
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr

08008858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800885e:	4b15      	ldr	r3, [pc, #84]	; (80088b4 <HAL_MspInit+0x5c>)
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <HAL_MspInit+0x5c>)
 8008864:	f043 0301 	orr.w	r3, r3, #1
 8008868:	6193      	str	r3, [r2, #24]
 800886a:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <HAL_MspInit+0x5c>)
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	60bb      	str	r3, [r7, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008876:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <HAL_MspInit+0x5c>)
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	4a0e      	ldr	r2, [pc, #56]	; (80088b4 <HAL_MspInit+0x5c>)
 800887c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008880:	61d3      	str	r3, [r2, #28]
 8008882:	4b0c      	ldr	r3, [pc, #48]	; (80088b4 <HAL_MspInit+0x5c>)
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800888e:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <HAL_MspInit+0x60>)
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <HAL_MspInit+0x60>)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088aa:	bf00      	nop
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bc80      	pop	{r7}
 80088b2:	4770      	bx	lr
 80088b4:	40021000 	.word	0x40021000
 80088b8:	40010000 	.word	0x40010000

080088bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088c4:	f107 0310 	add.w	r3, r7, #16
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	605a      	str	r2, [r3, #4]
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1c      	ldr	r2, [pc, #112]	; (8008948 <HAL_CAN_MspInit+0x8c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d131      	bne.n	8008940 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80088dc:	4b1b      	ldr	r3, [pc, #108]	; (800894c <HAL_CAN_MspInit+0x90>)
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	4a1a      	ldr	r2, [pc, #104]	; (800894c <HAL_CAN_MspInit+0x90>)
 80088e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80088e6:	61d3      	str	r3, [r2, #28]
 80088e8:	4b18      	ldr	r3, [pc, #96]	; (800894c <HAL_CAN_MspInit+0x90>)
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088f4:	4b15      	ldr	r3, [pc, #84]	; (800894c <HAL_CAN_MspInit+0x90>)
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	4a14      	ldr	r2, [pc, #80]	; (800894c <HAL_CAN_MspInit+0x90>)
 80088fa:	f043 0304 	orr.w	r3, r3, #4
 80088fe:	6193      	str	r3, [r2, #24]
 8008900:	4b12      	ldr	r3, [pc, #72]	; (800894c <HAL_CAN_MspInit+0x90>)
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	60bb      	str	r3, [r7, #8]
 800890a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800890c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008916:	2300      	movs	r3, #0
 8008918:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800891a:	f107 0310 	add.w	r3, r7, #16
 800891e:	4619      	mov	r1, r3
 8008920:	480b      	ldr	r0, [pc, #44]	; (8008950 <HAL_CAN_MspInit+0x94>)
 8008922:	f000 fd61 	bl	80093e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800892a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800892c:	2302      	movs	r3, #2
 800892e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008930:	2303      	movs	r3, #3
 8008932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008934:	f107 0310 	add.w	r3, r7, #16
 8008938:	4619      	mov	r1, r3
 800893a:	4805      	ldr	r0, [pc, #20]	; (8008950 <HAL_CAN_MspInit+0x94>)
 800893c:	f000 fd54 	bl	80093e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008940:	bf00      	nop
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	40006400 	.word	0x40006400
 800894c:	40021000 	.word	0x40021000
 8008950:	40010800 	.word	0x40010800

08008954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800895c:	f107 0310 	add.w	r3, r7, #16
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	609a      	str	r2, [r3, #8]
 8008968:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a15      	ldr	r2, [pc, #84]	; (80089c4 <HAL_I2C_MspInit+0x70>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d123      	bne.n	80089bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008974:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <HAL_I2C_MspInit+0x74>)
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	4a13      	ldr	r2, [pc, #76]	; (80089c8 <HAL_I2C_MspInit+0x74>)
 800897a:	f043 0308 	orr.w	r3, r3, #8
 800897e:	6193      	str	r3, [r2, #24]
 8008980:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <HAL_I2C_MspInit+0x74>)
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800898c:	23c0      	movs	r3, #192	; 0xc0
 800898e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008990:	2312      	movs	r3, #18
 8008992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008994:	2303      	movs	r3, #3
 8008996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008998:	f107 0310 	add.w	r3, r7, #16
 800899c:	4619      	mov	r1, r3
 800899e:	480b      	ldr	r0, [pc, #44]	; (80089cc <HAL_I2C_MspInit+0x78>)
 80089a0:	f000 fd22 	bl	80093e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80089a4:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <HAL_I2C_MspInit+0x74>)
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	4a07      	ldr	r2, [pc, #28]	; (80089c8 <HAL_I2C_MspInit+0x74>)
 80089aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089ae:	61d3      	str	r3, [r2, #28]
 80089b0:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <HAL_I2C_MspInit+0x74>)
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80089bc:	bf00      	nop
 80089be:	3720      	adds	r7, #32
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	40005400 	.word	0x40005400
 80089c8:	40021000 	.word	0x40021000
 80089cc:	40010c00 	.word	0x40010c00

080089d0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <HAL_I2C_MspDeInit+0x38>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d10d      	bne.n	80089fe <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <HAL_I2C_MspDeInit+0x3c>)
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <HAL_I2C_MspDeInit+0x3c>)
 80089e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089ec:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80089ee:	2140      	movs	r1, #64	; 0x40
 80089f0:	4807      	ldr	r0, [pc, #28]	; (8008a10 <HAL_I2C_MspDeInit+0x40>)
 80089f2:	f000 fe8d 	bl	8009710 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80089f6:	2180      	movs	r1, #128	; 0x80
 80089f8:	4805      	ldr	r0, [pc, #20]	; (8008a10 <HAL_I2C_MspDeInit+0x40>)
 80089fa:	f000 fe89 	bl	8009710 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80089fe:	bf00      	nop
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40005400 	.word	0x40005400
 8008a0c:	40021000 	.word	0x40021000
 8008a10:	40010c00 	.word	0x40010c00

08008a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a0d      	ldr	r2, [pc, #52]	; (8008a58 <HAL_TIM_Base_MspInit+0x44>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d113      	bne.n	8008a4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008a26:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <HAL_TIM_Base_MspInit+0x48>)
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	4a0c      	ldr	r2, [pc, #48]	; (8008a5c <HAL_TIM_Base_MspInit+0x48>)
 8008a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a30:	6193      	str	r3, [r2, #24]
 8008a32:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <HAL_TIM_Base_MspInit+0x48>)
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2100      	movs	r1, #0
 8008a42:	2019      	movs	r0, #25
 8008a44:	f000 fb57 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008a48:	2019      	movs	r0, #25
 8008a4a:	f000 fb70 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008a4e:	bf00      	nop
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	40012c00 	.word	0x40012c00
 8008a5c:	40021000 	.word	0x40021000

08008a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a68:	f107 0310 	add.w	r3, r7, #16
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	605a      	str	r2, [r3, #4]
 8008a72:	609a      	str	r2, [r3, #8]
 8008a74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a20      	ldr	r2, [pc, #128]	; (8008afc <HAL_UART_MspInit+0x9c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d139      	bne.n	8008af4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008a80:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <HAL_UART_MspInit+0xa0>)
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	4a1e      	ldr	r2, [pc, #120]	; (8008b00 <HAL_UART_MspInit+0xa0>)
 8008a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a8a:	6193      	str	r3, [r2, #24]
 8008a8c:	4b1c      	ldr	r3, [pc, #112]	; (8008b00 <HAL_UART_MspInit+0xa0>)
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a98:	4b19      	ldr	r3, [pc, #100]	; (8008b00 <HAL_UART_MspInit+0xa0>)
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	4a18      	ldr	r2, [pc, #96]	; (8008b00 <HAL_UART_MspInit+0xa0>)
 8008a9e:	f043 0304 	orr.w	r3, r3, #4
 8008aa2:	6193      	str	r3, [r2, #24]
 8008aa4:	4b16      	ldr	r3, [pc, #88]	; (8008b00 <HAL_UART_MspInit+0xa0>)
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008aba:	2303      	movs	r3, #3
 8008abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008abe:	f107 0310 	add.w	r3, r7, #16
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	480f      	ldr	r0, [pc, #60]	; (8008b04 <HAL_UART_MspInit+0xa4>)
 8008ac6:	f000 fc8f 	bl	80093e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ad8:	f107 0310 	add.w	r3, r7, #16
 8008adc:	4619      	mov	r1, r3
 8008ade:	4809      	ldr	r0, [pc, #36]	; (8008b04 <HAL_UART_MspInit+0xa4>)
 8008ae0:	f000 fc82 	bl	80093e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	2025      	movs	r0, #37	; 0x25
 8008aea:	f000 fb04 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008aee:	2025      	movs	r0, #37	; 0x25
 8008af0:	f000 fb1d 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008af4:	bf00      	nop
 8008af6:	3720      	adds	r7, #32
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	40013800 	.word	0x40013800
 8008b00:	40021000 	.word	0x40021000
 8008b04:	40010800 	.word	0x40010800

08008b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b0c:	e7fe      	b.n	8008b0c <NMI_Handler+0x4>

08008b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b12:	e7fe      	b.n	8008b12 <HardFault_Handler+0x4>

08008b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b18:	e7fe      	b.n	8008b18 <MemManage_Handler+0x4>

08008b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b1e:	e7fe      	b.n	8008b1e <BusFault_Handler+0x4>

08008b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b24:	e7fe      	b.n	8008b24 <UsageFault_Handler+0x4>

08008b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b26:	b480      	push	{r7}
 8008b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b2a:	bf00      	nop
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b32:	b480      	push	{r7}
 8008b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b36:	bf00      	nop
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr

08008b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b42:	bf00      	nop
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr

08008b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b4e:	f000 f8bf 	bl	8008cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b52:	bf00      	nop
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008b5c:	4802      	ldr	r0, [pc, #8]	; (8008b68 <TIM1_UP_IRQHandler+0x10>)
 8008b5e:	f002 fdcd 	bl	800b6fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008b62:	bf00      	nop
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000ab0 	.word	0x20000ab0

08008b6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008b70:	4802      	ldr	r0, [pc, #8]	; (8008b7c <USART1_IRQHandler+0x10>)
 8008b72:	f003 f995 	bl	800bea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008b76:	bf00      	nop
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20000af8 	.word	0x20000af8

08008b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b88:	4a14      	ldr	r2, [pc, #80]	; (8008bdc <_sbrk+0x5c>)
 8008b8a:	4b15      	ldr	r3, [pc, #84]	; (8008be0 <_sbrk+0x60>)
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b94:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <_sbrk+0x64>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b9c:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <_sbrk+0x64>)
 8008b9e:	4a12      	ldr	r2, [pc, #72]	; (8008be8 <_sbrk+0x68>)
 8008ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008ba2:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <_sbrk+0x64>)
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4413      	add	r3, r2
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d207      	bcs.n	8008bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008bb0:	f003 ff80 	bl	800cab4 <__errno>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	220c      	movs	r2, #12
 8008bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbe:	e009      	b.n	8008bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008bc0:	4b08      	ldr	r3, [pc, #32]	; (8008be4 <_sbrk+0x64>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008bc6:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <_sbrk+0x64>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	4a05      	ldr	r2, [pc, #20]	; (8008be4 <_sbrk+0x64>)
 8008bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	2000c000 	.word	0x2000c000
 8008be0:	00000400 	.word	0x00000400
 8008be4:	20000da4 	.word	0x20000da4
 8008be8:	20000ef8 	.word	0x20000ef8

08008bec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008bf0:	bf00      	nop
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bc80      	pop	{r7}
 8008bf6:	4770      	bx	lr

08008bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008bf8:	480c      	ldr	r0, [pc, #48]	; (8008c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008bfa:	490d      	ldr	r1, [pc, #52]	; (8008c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008bfc:	4a0d      	ldr	r2, [pc, #52]	; (8008c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c00:	e002      	b.n	8008c08 <LoopCopyDataInit>

08008c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c06:	3304      	adds	r3, #4

08008c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c0c:	d3f9      	bcc.n	8008c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008c10:	4c0a      	ldr	r4, [pc, #40]	; (8008c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c14:	e001      	b.n	8008c1a <LoopFillZerobss>

08008c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c18:	3204      	adds	r2, #4

08008c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008c1c:	d3fb      	bcc.n	8008c16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008c1e:	f7ff ffe5 	bl	8008bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c22:	f003 ff4d 	bl	800cac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008c26:	f7ff fb91 	bl	800834c <main>
  bx lr
 8008c2a:	4770      	bx	lr
  ldr r0, =_sdata
 8008c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008c30:	20000a14 	.word	0x20000a14
  ldr r2, =_sidata
 8008c34:	0800d91c 	.word	0x0800d91c
  ldr r2, =_sbss
 8008c38:	20000a14 	.word	0x20000a14
  ldr r4, =_ebss
 8008c3c:	20000ef4 	.word	0x20000ef4

08008c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008c40:	e7fe      	b.n	8008c40 <ADC1_2_IRQHandler>
	...

08008c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008c48:	4b08      	ldr	r3, [pc, #32]	; (8008c6c <HAL_Init+0x28>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a07      	ldr	r2, [pc, #28]	; (8008c6c <HAL_Init+0x28>)
 8008c4e:	f043 0310 	orr.w	r3, r3, #16
 8008c52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c54:	2003      	movs	r0, #3
 8008c56:	f000 fa43 	bl	80090e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008c5a:	200f      	movs	r0, #15
 8008c5c:	f000 f808 	bl	8008c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008c60:	f7ff fdfa 	bl	8008858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	40022000 	.word	0x40022000

08008c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008c78:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <HAL_InitTick+0x54>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <HAL_InitTick+0x58>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	4619      	mov	r1, r3
 8008c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fa5b 	bl	800914a <HAL_SYSTICK_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e00e      	b.n	8008cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b0f      	cmp	r3, #15
 8008ca2:	d80a      	bhi.n	8008cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	f000 fa23 	bl	80090f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008cb0:	4a06      	ldr	r2, [pc, #24]	; (8008ccc <HAL_InitTick+0x5c>)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e000      	b.n	8008cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	200009b8 	.word	0x200009b8
 8008cc8:	200009c0 	.word	0x200009c0
 8008ccc:	200009bc 	.word	0x200009bc

08008cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008cd4:	4b05      	ldr	r3, [pc, #20]	; (8008cec <HAL_IncTick+0x1c>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <HAL_IncTick+0x20>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4413      	add	r3, r2
 8008ce0:	4a03      	ldr	r2, [pc, #12]	; (8008cf0 <HAL_IncTick+0x20>)
 8008ce2:	6013      	str	r3, [r2, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bc80      	pop	{r7}
 8008cea:	4770      	bx	lr
 8008cec:	200009c0 	.word	0x200009c0
 8008cf0:	20000da8 	.word	0x20000da8

08008cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <HAL_GetTick+0x10>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr
 8008d04:	20000da8 	.word	0x20000da8

08008d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d10:	f7ff fff0 	bl	8008cf4 <HAL_GetTick>
 8008d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d005      	beq.n	8008d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d22:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <HAL_Delay+0x44>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d2e:	bf00      	nop
 8008d30:	f7ff ffe0 	bl	8008cf4 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d8f7      	bhi.n	8008d30 <HAL_Delay+0x28>
  {
  }
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	200009c0 	.word	0x200009c0

08008d50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e0ed      	b.n	8008f3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d102      	bne.n	8008d74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff fda4 	bl	80088bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0201 	orr.w	r2, r2, #1
 8008d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d84:	f7ff ffb6 	bl	8008cf4 <HAL_GetTick>
 8008d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d8a:	e012      	b.n	8008db2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d8c:	f7ff ffb2 	bl	8008cf4 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b0a      	cmp	r3, #10
 8008d98:	d90b      	bls.n	8008db2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2205      	movs	r2, #5
 8008daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0c5      	b.n	8008f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0e5      	beq.n	8008d8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0202 	bic.w	r2, r2, #2
 8008dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008dd0:	f7ff ff90 	bl	8008cf4 <HAL_GetTick>
 8008dd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008dd6:	e012      	b.n	8008dfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008dd8:	f7ff ff8c 	bl	8008cf4 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b0a      	cmp	r3, #10
 8008de4:	d90b      	bls.n	8008dfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2205      	movs	r2, #5
 8008df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e09f      	b.n	8008f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e5      	bne.n	8008dd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	7e1b      	ldrb	r3, [r3, #24]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d108      	bne.n	8008e26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	e007      	b.n	8008e36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	7e5b      	ldrb	r3, [r3, #25]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d108      	bne.n	8008e50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e007      	b.n	8008e60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	7e9b      	ldrb	r3, [r3, #26]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d108      	bne.n	8008e7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0220 	orr.w	r2, r2, #32
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e007      	b.n	8008e8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0220 	bic.w	r2, r2, #32
 8008e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7edb      	ldrb	r3, [r3, #27]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d108      	bne.n	8008ea4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f022 0210 	bic.w	r2, r2, #16
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	e007      	b.n	8008eb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0210 	orr.w	r2, r2, #16
 8008eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7f1b      	ldrb	r3, [r3, #28]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d108      	bne.n	8008ece <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0208 	orr.w	r2, r2, #8
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	e007      	b.n	8008ede <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0208 	bic.w	r2, r2, #8
 8008edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	7f5b      	ldrb	r3, [r3, #29]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d108      	bne.n	8008ef8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f042 0204 	orr.w	r2, r2, #4
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	e007      	b.n	8008f08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 0204 	bic.w	r2, r2, #4
 8008f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	ea42 0103 	orr.w	r1, r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	1e5a      	subs	r2, r3, #1
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <__NVIC_SetPriorityGrouping>:
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f003 0307 	and.w	r3, r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <__NVIC_SetPriorityGrouping+0x44>)
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f64:	4013      	ands	r3, r2
 8008f66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f7a:	4a04      	ldr	r2, [pc, #16]	; (8008f8c <__NVIC_SetPriorityGrouping+0x44>)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	60d3      	str	r3, [r2, #12]
}
 8008f80:	bf00      	nop
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bc80      	pop	{r7}
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	e000ed00 	.word	0xe000ed00

08008f90 <__NVIC_GetPriorityGrouping>:
{
 8008f90:	b480      	push	{r7}
 8008f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f94:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	f003 0307 	and.w	r3, r3, #7
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	e000ed00 	.word	0xe000ed00

08008fac <__NVIC_EnableIRQ>:
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	db0b      	blt.n	8008fd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fbe:	79fb      	ldrb	r3, [r7, #7]
 8008fc0:	f003 021f 	and.w	r2, r3, #31
 8008fc4:	4906      	ldr	r1, [pc, #24]	; (8008fe0 <__NVIC_EnableIRQ+0x34>)
 8008fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	2001      	movs	r0, #1
 8008fce:	fa00 f202 	lsl.w	r2, r0, r2
 8008fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr
 8008fe0:	e000e100 	.word	0xe000e100

08008fe4 <__NVIC_SetPriority>:
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	6039      	str	r1, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	db0a      	blt.n	800900e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	490c      	ldr	r1, [pc, #48]	; (8009030 <__NVIC_SetPriority+0x4c>)
 8008ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009002:	0112      	lsls	r2, r2, #4
 8009004:	b2d2      	uxtb	r2, r2
 8009006:	440b      	add	r3, r1
 8009008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800900c:	e00a      	b.n	8009024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	b2da      	uxtb	r2, r3
 8009012:	4908      	ldr	r1, [pc, #32]	; (8009034 <__NVIC_SetPriority+0x50>)
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	f003 030f 	and.w	r3, r3, #15
 800901a:	3b04      	subs	r3, #4
 800901c:	0112      	lsls	r2, r2, #4
 800901e:	b2d2      	uxtb	r2, r2
 8009020:	440b      	add	r3, r1
 8009022:	761a      	strb	r2, [r3, #24]
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	bc80      	pop	{r7}
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	e000e100 	.word	0xe000e100
 8009034:	e000ed00 	.word	0xe000ed00

08009038 <NVIC_EncodePriority>:
{
 8009038:	b480      	push	{r7}
 800903a:	b089      	sub	sp, #36	; 0x24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	f1c3 0307 	rsb	r3, r3, #7
 8009052:	2b04      	cmp	r3, #4
 8009054:	bf28      	it	cs
 8009056:	2304      	movcs	r3, #4
 8009058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	3304      	adds	r3, #4
 800905e:	2b06      	cmp	r3, #6
 8009060:	d902      	bls.n	8009068 <NVIC_EncodePriority+0x30>
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	3b03      	subs	r3, #3
 8009066:	e000      	b.n	800906a <NVIC_EncodePriority+0x32>
 8009068:	2300      	movs	r3, #0
 800906a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800906c:	f04f 32ff 	mov.w	r2, #4294967295
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	fa02 f303 	lsl.w	r3, r2, r3
 8009076:	43da      	mvns	r2, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	401a      	ands	r2, r3
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009080:	f04f 31ff 	mov.w	r1, #4294967295
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	fa01 f303 	lsl.w	r3, r1, r3
 800908a:	43d9      	mvns	r1, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009090:	4313      	orrs	r3, r2
}
 8009092:	4618      	mov	r0, r3
 8009094:	3724      	adds	r7, #36	; 0x24
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090ac:	d301      	bcc.n	80090b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090ae:	2301      	movs	r3, #1
 80090b0:	e00f      	b.n	80090d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090b2:	4a0a      	ldr	r2, [pc, #40]	; (80090dc <SysTick_Config+0x40>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090ba:	210f      	movs	r1, #15
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	f7ff ff90 	bl	8008fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <SysTick_Config+0x40>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090ca:	4b04      	ldr	r3, [pc, #16]	; (80090dc <SysTick_Config+0x40>)
 80090cc:	2207      	movs	r2, #7
 80090ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	e000e010 	.word	0xe000e010

080090e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff ff2d 	bl	8008f48 <__NVIC_SetPriorityGrouping>
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b086      	sub	sp, #24
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	4603      	mov	r3, r0
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009108:	f7ff ff42 	bl	8008f90 <__NVIC_GetPriorityGrouping>
 800910c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	6978      	ldr	r0, [r7, #20]
 8009114:	f7ff ff90 	bl	8009038 <NVIC_EncodePriority>
 8009118:	4602      	mov	r2, r0
 800911a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff ff5f 	bl	8008fe4 <__NVIC_SetPriority>
}
 8009126:	bf00      	nop
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	4603      	mov	r3, r0
 8009136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff ff35 	bl	8008fac <__NVIC_EnableIRQ>
}
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff ffa2 	bl	800909c <SysTick_Config>
 8009158:	4603      	mov	r3, r0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b02      	cmp	r3, #2
 8009178:	d008      	beq.n	800918c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2204      	movs	r2, #4
 800917e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e020      	b.n	80091ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 020e 	bic.w	r2, r2, #14
 800919a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0201 	bic.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b4:	2101      	movs	r1, #1
 80091b6:	fa01 f202 	lsl.w	r2, r1, r2
 80091ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr

080091d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d005      	beq.n	80091fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2204      	movs	r2, #4
 80091f4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	73fb      	strb	r3, [r7, #15]
 80091fa:	e0d6      	b.n	80093aa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 020e 	bic.w	r2, r2, #14
 800920a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f022 0201 	bic.w	r2, r2, #1
 800921a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	461a      	mov	r2, r3
 8009222:	4b64      	ldr	r3, [pc, #400]	; (80093b4 <HAL_DMA_Abort_IT+0x1dc>)
 8009224:	429a      	cmp	r2, r3
 8009226:	d958      	bls.n	80092da <HAL_DMA_Abort_IT+0x102>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a62      	ldr	r2, [pc, #392]	; (80093b8 <HAL_DMA_Abort_IT+0x1e0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d04f      	beq.n	80092d2 <HAL_DMA_Abort_IT+0xfa>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a61      	ldr	r2, [pc, #388]	; (80093bc <HAL_DMA_Abort_IT+0x1e4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d048      	beq.n	80092ce <HAL_DMA_Abort_IT+0xf6>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a5f      	ldr	r2, [pc, #380]	; (80093c0 <HAL_DMA_Abort_IT+0x1e8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d040      	beq.n	80092c8 <HAL_DMA_Abort_IT+0xf0>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a5e      	ldr	r2, [pc, #376]	; (80093c4 <HAL_DMA_Abort_IT+0x1ec>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d038      	beq.n	80092c2 <HAL_DMA_Abort_IT+0xea>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a5c      	ldr	r2, [pc, #368]	; (80093c8 <HAL_DMA_Abort_IT+0x1f0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d030      	beq.n	80092bc <HAL_DMA_Abort_IT+0xe4>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a5b      	ldr	r2, [pc, #364]	; (80093cc <HAL_DMA_Abort_IT+0x1f4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d028      	beq.n	80092b6 <HAL_DMA_Abort_IT+0xde>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a52      	ldr	r2, [pc, #328]	; (80093b4 <HAL_DMA_Abort_IT+0x1dc>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d020      	beq.n	80092b0 <HAL_DMA_Abort_IT+0xd8>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a57      	ldr	r2, [pc, #348]	; (80093d0 <HAL_DMA_Abort_IT+0x1f8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d019      	beq.n	80092ac <HAL_DMA_Abort_IT+0xd4>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a55      	ldr	r2, [pc, #340]	; (80093d4 <HAL_DMA_Abort_IT+0x1fc>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d012      	beq.n	80092a8 <HAL_DMA_Abort_IT+0xd0>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a54      	ldr	r2, [pc, #336]	; (80093d8 <HAL_DMA_Abort_IT+0x200>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d00a      	beq.n	80092a2 <HAL_DMA_Abort_IT+0xca>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a52      	ldr	r2, [pc, #328]	; (80093dc <HAL_DMA_Abort_IT+0x204>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d102      	bne.n	800929c <HAL_DMA_Abort_IT+0xc4>
 8009296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800929a:	e01b      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 800929c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092a0:	e018      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092a6:	e015      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092a8:	2310      	movs	r3, #16
 80092aa:	e013      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092ac:	2301      	movs	r3, #1
 80092ae:	e011      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092b4:	e00e      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80092ba:	e00b      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092c0:	e008      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092c6:	e005      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092cc:	e002      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092ce:	2310      	movs	r3, #16
 80092d0:	e000      	b.n	80092d4 <HAL_DMA_Abort_IT+0xfc>
 80092d2:	2301      	movs	r3, #1
 80092d4:	4a42      	ldr	r2, [pc, #264]	; (80093e0 <HAL_DMA_Abort_IT+0x208>)
 80092d6:	6053      	str	r3, [r2, #4]
 80092d8:	e057      	b.n	800938a <HAL_DMA_Abort_IT+0x1b2>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a36      	ldr	r2, [pc, #216]	; (80093b8 <HAL_DMA_Abort_IT+0x1e0>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d04f      	beq.n	8009384 <HAL_DMA_Abort_IT+0x1ac>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a34      	ldr	r2, [pc, #208]	; (80093bc <HAL_DMA_Abort_IT+0x1e4>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d048      	beq.n	8009380 <HAL_DMA_Abort_IT+0x1a8>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a33      	ldr	r2, [pc, #204]	; (80093c0 <HAL_DMA_Abort_IT+0x1e8>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d040      	beq.n	800937a <HAL_DMA_Abort_IT+0x1a2>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a31      	ldr	r2, [pc, #196]	; (80093c4 <HAL_DMA_Abort_IT+0x1ec>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d038      	beq.n	8009374 <HAL_DMA_Abort_IT+0x19c>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a30      	ldr	r2, [pc, #192]	; (80093c8 <HAL_DMA_Abort_IT+0x1f0>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d030      	beq.n	800936e <HAL_DMA_Abort_IT+0x196>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a2e      	ldr	r2, [pc, #184]	; (80093cc <HAL_DMA_Abort_IT+0x1f4>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d028      	beq.n	8009368 <HAL_DMA_Abort_IT+0x190>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a26      	ldr	r2, [pc, #152]	; (80093b4 <HAL_DMA_Abort_IT+0x1dc>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d020      	beq.n	8009362 <HAL_DMA_Abort_IT+0x18a>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a2a      	ldr	r2, [pc, #168]	; (80093d0 <HAL_DMA_Abort_IT+0x1f8>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d019      	beq.n	800935e <HAL_DMA_Abort_IT+0x186>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a29      	ldr	r2, [pc, #164]	; (80093d4 <HAL_DMA_Abort_IT+0x1fc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d012      	beq.n	800935a <HAL_DMA_Abort_IT+0x182>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a27      	ldr	r2, [pc, #156]	; (80093d8 <HAL_DMA_Abort_IT+0x200>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00a      	beq.n	8009354 <HAL_DMA_Abort_IT+0x17c>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a26      	ldr	r2, [pc, #152]	; (80093dc <HAL_DMA_Abort_IT+0x204>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d102      	bne.n	800934e <HAL_DMA_Abort_IT+0x176>
 8009348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800934c:	e01b      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 800934e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009352:	e018      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 8009354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009358:	e015      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 800935a:	2310      	movs	r3, #16
 800935c:	e013      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 800935e:	2301      	movs	r3, #1
 8009360:	e011      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 8009362:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009366:	e00e      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 8009368:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800936c:	e00b      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 800936e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009372:	e008      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 8009374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009378:	e005      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 800937a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800937e:	e002      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 8009380:	2310      	movs	r3, #16
 8009382:	e000      	b.n	8009386 <HAL_DMA_Abort_IT+0x1ae>
 8009384:	2301      	movs	r3, #1
 8009386:	4a17      	ldr	r2, [pc, #92]	; (80093e4 <HAL_DMA_Abort_IT+0x20c>)
 8009388:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	4798      	blx	r3
    } 
  }
  return status;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	40020080 	.word	0x40020080
 80093b8:	40020008 	.word	0x40020008
 80093bc:	4002001c 	.word	0x4002001c
 80093c0:	40020030 	.word	0x40020030
 80093c4:	40020044 	.word	0x40020044
 80093c8:	40020058 	.word	0x40020058
 80093cc:	4002006c 	.word	0x4002006c
 80093d0:	40020408 	.word	0x40020408
 80093d4:	4002041c 	.word	0x4002041c
 80093d8:	40020430 	.word	0x40020430
 80093dc:	40020444 	.word	0x40020444
 80093e0:	40020400 	.word	0x40020400
 80093e4:	40020000 	.word	0x40020000

080093e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b08b      	sub	sp, #44	; 0x2c
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80093f2:	2300      	movs	r3, #0
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80093f6:	2300      	movs	r3, #0
 80093f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80093fa:	e179      	b.n	80096f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80093fc:	2201      	movs	r2, #1
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	fa02 f303 	lsl.w	r3, r2, r3
 8009404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	4013      	ands	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	429a      	cmp	r2, r3
 8009416:	f040 8168 	bne.w	80096ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4a96      	ldr	r2, [pc, #600]	; (8009678 <HAL_GPIO_Init+0x290>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d05e      	beq.n	80094e2 <HAL_GPIO_Init+0xfa>
 8009424:	4a94      	ldr	r2, [pc, #592]	; (8009678 <HAL_GPIO_Init+0x290>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d875      	bhi.n	8009516 <HAL_GPIO_Init+0x12e>
 800942a:	4a94      	ldr	r2, [pc, #592]	; (800967c <HAL_GPIO_Init+0x294>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d058      	beq.n	80094e2 <HAL_GPIO_Init+0xfa>
 8009430:	4a92      	ldr	r2, [pc, #584]	; (800967c <HAL_GPIO_Init+0x294>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d86f      	bhi.n	8009516 <HAL_GPIO_Init+0x12e>
 8009436:	4a92      	ldr	r2, [pc, #584]	; (8009680 <HAL_GPIO_Init+0x298>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d052      	beq.n	80094e2 <HAL_GPIO_Init+0xfa>
 800943c:	4a90      	ldr	r2, [pc, #576]	; (8009680 <HAL_GPIO_Init+0x298>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d869      	bhi.n	8009516 <HAL_GPIO_Init+0x12e>
 8009442:	4a90      	ldr	r2, [pc, #576]	; (8009684 <HAL_GPIO_Init+0x29c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d04c      	beq.n	80094e2 <HAL_GPIO_Init+0xfa>
 8009448:	4a8e      	ldr	r2, [pc, #568]	; (8009684 <HAL_GPIO_Init+0x29c>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d863      	bhi.n	8009516 <HAL_GPIO_Init+0x12e>
 800944e:	4a8e      	ldr	r2, [pc, #568]	; (8009688 <HAL_GPIO_Init+0x2a0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d046      	beq.n	80094e2 <HAL_GPIO_Init+0xfa>
 8009454:	4a8c      	ldr	r2, [pc, #560]	; (8009688 <HAL_GPIO_Init+0x2a0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d85d      	bhi.n	8009516 <HAL_GPIO_Init+0x12e>
 800945a:	2b12      	cmp	r3, #18
 800945c:	d82a      	bhi.n	80094b4 <HAL_GPIO_Init+0xcc>
 800945e:	2b12      	cmp	r3, #18
 8009460:	d859      	bhi.n	8009516 <HAL_GPIO_Init+0x12e>
 8009462:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <HAL_GPIO_Init+0x80>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	080094e3 	.word	0x080094e3
 800946c:	080094bd 	.word	0x080094bd
 8009470:	080094cf 	.word	0x080094cf
 8009474:	08009511 	.word	0x08009511
 8009478:	08009517 	.word	0x08009517
 800947c:	08009517 	.word	0x08009517
 8009480:	08009517 	.word	0x08009517
 8009484:	08009517 	.word	0x08009517
 8009488:	08009517 	.word	0x08009517
 800948c:	08009517 	.word	0x08009517
 8009490:	08009517 	.word	0x08009517
 8009494:	08009517 	.word	0x08009517
 8009498:	08009517 	.word	0x08009517
 800949c:	08009517 	.word	0x08009517
 80094a0:	08009517 	.word	0x08009517
 80094a4:	08009517 	.word	0x08009517
 80094a8:	08009517 	.word	0x08009517
 80094ac:	080094c5 	.word	0x080094c5
 80094b0:	080094d9 	.word	0x080094d9
 80094b4:	4a75      	ldr	r2, [pc, #468]	; (800968c <HAL_GPIO_Init+0x2a4>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d013      	beq.n	80094e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80094ba:	e02c      	b.n	8009516 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	623b      	str	r3, [r7, #32]
          break;
 80094c2:	e029      	b.n	8009518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	3304      	adds	r3, #4
 80094ca:	623b      	str	r3, [r7, #32]
          break;
 80094cc:	e024      	b.n	8009518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	3308      	adds	r3, #8
 80094d4:	623b      	str	r3, [r7, #32]
          break;
 80094d6:	e01f      	b.n	8009518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	330c      	adds	r3, #12
 80094de:	623b      	str	r3, [r7, #32]
          break;
 80094e0:	e01a      	b.n	8009518 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d102      	bne.n	80094f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80094ea:	2304      	movs	r3, #4
 80094ec:	623b      	str	r3, [r7, #32]
          break;
 80094ee:	e013      	b.n	8009518 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d105      	bne.n	8009504 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80094f8:	2308      	movs	r3, #8
 80094fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69fa      	ldr	r2, [r7, #28]
 8009500:	611a      	str	r2, [r3, #16]
          break;
 8009502:	e009      	b.n	8009518 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009504:	2308      	movs	r3, #8
 8009506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	615a      	str	r2, [r3, #20]
          break;
 800950e:	e003      	b.n	8009518 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009510:	2300      	movs	r3, #0
 8009512:	623b      	str	r3, [r7, #32]
          break;
 8009514:	e000      	b.n	8009518 <HAL_GPIO_Init+0x130>
          break;
 8009516:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2bff      	cmp	r3, #255	; 0xff
 800951c:	d801      	bhi.n	8009522 <HAL_GPIO_Init+0x13a>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	e001      	b.n	8009526 <HAL_GPIO_Init+0x13e>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3304      	adds	r3, #4
 8009526:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	2bff      	cmp	r3, #255	; 0xff
 800952c:	d802      	bhi.n	8009534 <HAL_GPIO_Init+0x14c>
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	e002      	b.n	800953a <HAL_GPIO_Init+0x152>
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	3b08      	subs	r3, #8
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	210f      	movs	r1, #15
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	fa01 f303 	lsl.w	r3, r1, r3
 8009548:	43db      	mvns	r3, r3
 800954a:	401a      	ands	r2, r3
 800954c:	6a39      	ldr	r1, [r7, #32]
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	fa01 f303 	lsl.w	r3, r1, r3
 8009554:	431a      	orrs	r2, r3
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80c1 	beq.w	80096ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009568:	4b49      	ldr	r3, [pc, #292]	; (8009690 <HAL_GPIO_Init+0x2a8>)
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	4a48      	ldr	r2, [pc, #288]	; (8009690 <HAL_GPIO_Init+0x2a8>)
 800956e:	f043 0301 	orr.w	r3, r3, #1
 8009572:	6193      	str	r3, [r2, #24]
 8009574:	4b46      	ldr	r3, [pc, #280]	; (8009690 <HAL_GPIO_Init+0x2a8>)
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	60bb      	str	r3, [r7, #8]
 800957e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009580:	4a44      	ldr	r2, [pc, #272]	; (8009694 <HAL_GPIO_Init+0x2ac>)
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	089b      	lsrs	r3, r3, #2
 8009586:	3302      	adds	r3, #2
 8009588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800958c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	220f      	movs	r2, #15
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	43db      	mvns	r3, r3
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4013      	ands	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a3c      	ldr	r2, [pc, #240]	; (8009698 <HAL_GPIO_Init+0x2b0>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d01f      	beq.n	80095ec <HAL_GPIO_Init+0x204>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a3b      	ldr	r2, [pc, #236]	; (800969c <HAL_GPIO_Init+0x2b4>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d019      	beq.n	80095e8 <HAL_GPIO_Init+0x200>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a3a      	ldr	r2, [pc, #232]	; (80096a0 <HAL_GPIO_Init+0x2b8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d013      	beq.n	80095e4 <HAL_GPIO_Init+0x1fc>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a39      	ldr	r2, [pc, #228]	; (80096a4 <HAL_GPIO_Init+0x2bc>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d00d      	beq.n	80095e0 <HAL_GPIO_Init+0x1f8>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a38      	ldr	r2, [pc, #224]	; (80096a8 <HAL_GPIO_Init+0x2c0>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d007      	beq.n	80095dc <HAL_GPIO_Init+0x1f4>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a37      	ldr	r2, [pc, #220]	; (80096ac <HAL_GPIO_Init+0x2c4>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d101      	bne.n	80095d8 <HAL_GPIO_Init+0x1f0>
 80095d4:	2305      	movs	r3, #5
 80095d6:	e00a      	b.n	80095ee <HAL_GPIO_Init+0x206>
 80095d8:	2306      	movs	r3, #6
 80095da:	e008      	b.n	80095ee <HAL_GPIO_Init+0x206>
 80095dc:	2304      	movs	r3, #4
 80095de:	e006      	b.n	80095ee <HAL_GPIO_Init+0x206>
 80095e0:	2303      	movs	r3, #3
 80095e2:	e004      	b.n	80095ee <HAL_GPIO_Init+0x206>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e002      	b.n	80095ee <HAL_GPIO_Init+0x206>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e000      	b.n	80095ee <HAL_GPIO_Init+0x206>
 80095ec:	2300      	movs	r3, #0
 80095ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f0:	f002 0203 	and.w	r2, r2, #3
 80095f4:	0092      	lsls	r2, r2, #2
 80095f6:	4093      	lsls	r3, r2
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80095fe:	4925      	ldr	r1, [pc, #148]	; (8009694 <HAL_GPIO_Init+0x2ac>)
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	089b      	lsrs	r3, r3, #2
 8009604:	3302      	adds	r3, #2
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d006      	beq.n	8009626 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	4924      	ldr	r1, [pc, #144]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	4313      	orrs	r3, r2
 8009622:	608b      	str	r3, [r1, #8]
 8009624:	e006      	b.n	8009634 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009626:	4b22      	ldr	r3, [pc, #136]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	43db      	mvns	r3, r3
 800962e:	4920      	ldr	r1, [pc, #128]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 8009630:	4013      	ands	r3, r2
 8009632:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d006      	beq.n	800964e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009640:	4b1b      	ldr	r3, [pc, #108]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 8009642:	68da      	ldr	r2, [r3, #12]
 8009644:	491a      	ldr	r1, [pc, #104]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	4313      	orrs	r3, r2
 800964a:	60cb      	str	r3, [r1, #12]
 800964c:	e006      	b.n	800965c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800964e:	4b18      	ldr	r3, [pc, #96]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	43db      	mvns	r3, r3
 8009656:	4916      	ldr	r1, [pc, #88]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 8009658:	4013      	ands	r3, r2
 800965a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d025      	beq.n	80096b4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009668:	4b11      	ldr	r3, [pc, #68]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	4910      	ldr	r1, [pc, #64]	; (80096b0 <HAL_GPIO_Init+0x2c8>)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	4313      	orrs	r3, r2
 8009672:	604b      	str	r3, [r1, #4]
 8009674:	e025      	b.n	80096c2 <HAL_GPIO_Init+0x2da>
 8009676:	bf00      	nop
 8009678:	10320000 	.word	0x10320000
 800967c:	10310000 	.word	0x10310000
 8009680:	10220000 	.word	0x10220000
 8009684:	10210000 	.word	0x10210000
 8009688:	10120000 	.word	0x10120000
 800968c:	10110000 	.word	0x10110000
 8009690:	40021000 	.word	0x40021000
 8009694:	40010000 	.word	0x40010000
 8009698:	40010800 	.word	0x40010800
 800969c:	40010c00 	.word	0x40010c00
 80096a0:	40011000 	.word	0x40011000
 80096a4:	40011400 	.word	0x40011400
 80096a8:	40011800 	.word	0x40011800
 80096ac:	40011c00 	.word	0x40011c00
 80096b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <HAL_GPIO_Init+0x324>)
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	43db      	mvns	r3, r3
 80096bc:	4913      	ldr	r1, [pc, #76]	; (800970c <HAL_GPIO_Init+0x324>)
 80096be:	4013      	ands	r3, r2
 80096c0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80096ce:	4b0f      	ldr	r3, [pc, #60]	; (800970c <HAL_GPIO_Init+0x324>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	490e      	ldr	r1, [pc, #56]	; (800970c <HAL_GPIO_Init+0x324>)
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	600b      	str	r3, [r1, #0]
 80096da:	e006      	b.n	80096ea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80096dc:	4b0b      	ldr	r3, [pc, #44]	; (800970c <HAL_GPIO_Init+0x324>)
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	43db      	mvns	r3, r3
 80096e4:	4909      	ldr	r1, [pc, #36]	; (800970c <HAL_GPIO_Init+0x324>)
 80096e6:	4013      	ands	r3, r2
 80096e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	3301      	adds	r3, #1
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	fa22 f303 	lsr.w	r3, r2, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f47f ae7e 	bne.w	80093fc <HAL_GPIO_Init+0x14>
  }
}
 8009700:	bf00      	nop
 8009702:	bf00      	nop
 8009704:	372c      	adds	r7, #44	; 0x2c
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr
 800970c:	40010400 	.word	0x40010400

08009710 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009710:	b480      	push	{r7}
 8009712:	b089      	sub	sp, #36	; 0x24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800971a:	2300      	movs	r3, #0
 800971c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800971e:	e0a6      	b.n	800986e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009720:	2201      	movs	r2, #1
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	fa02 f303 	lsl.w	r3, r2, r3
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	4013      	ands	r3, r2
 800972c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8099 	beq.w	8009868 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009736:	4a54      	ldr	r2, [pc, #336]	; (8009888 <HAL_GPIO_DeInit+0x178>)
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	089b      	lsrs	r3, r3, #2
 800973c:	3302      	adds	r3, #2
 800973e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009742:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	220f      	movs	r2, #15
 800974e:	fa02 f303 	lsl.w	r3, r2, r3
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	4013      	ands	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a4c      	ldr	r2, [pc, #304]	; (800988c <HAL_GPIO_DeInit+0x17c>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d01f      	beq.n	80097a0 <HAL_GPIO_DeInit+0x90>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a4b      	ldr	r2, [pc, #300]	; (8009890 <HAL_GPIO_DeInit+0x180>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d019      	beq.n	800979c <HAL_GPIO_DeInit+0x8c>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a4a      	ldr	r2, [pc, #296]	; (8009894 <HAL_GPIO_DeInit+0x184>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d013      	beq.n	8009798 <HAL_GPIO_DeInit+0x88>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a49      	ldr	r2, [pc, #292]	; (8009898 <HAL_GPIO_DeInit+0x188>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00d      	beq.n	8009794 <HAL_GPIO_DeInit+0x84>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a48      	ldr	r2, [pc, #288]	; (800989c <HAL_GPIO_DeInit+0x18c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d007      	beq.n	8009790 <HAL_GPIO_DeInit+0x80>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a47      	ldr	r2, [pc, #284]	; (80098a0 <HAL_GPIO_DeInit+0x190>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d101      	bne.n	800978c <HAL_GPIO_DeInit+0x7c>
 8009788:	2305      	movs	r3, #5
 800978a:	e00a      	b.n	80097a2 <HAL_GPIO_DeInit+0x92>
 800978c:	2306      	movs	r3, #6
 800978e:	e008      	b.n	80097a2 <HAL_GPIO_DeInit+0x92>
 8009790:	2304      	movs	r3, #4
 8009792:	e006      	b.n	80097a2 <HAL_GPIO_DeInit+0x92>
 8009794:	2303      	movs	r3, #3
 8009796:	e004      	b.n	80097a2 <HAL_GPIO_DeInit+0x92>
 8009798:	2302      	movs	r3, #2
 800979a:	e002      	b.n	80097a2 <HAL_GPIO_DeInit+0x92>
 800979c:	2301      	movs	r3, #1
 800979e:	e000      	b.n	80097a2 <HAL_GPIO_DeInit+0x92>
 80097a0:	2300      	movs	r3, #0
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	f002 0203 	and.w	r2, r2, #3
 80097a8:	0092      	lsls	r2, r2, #2
 80097aa:	4093      	lsls	r3, r2
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d132      	bne.n	8009818 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80097b2:	4b3c      	ldr	r3, [pc, #240]	; (80098a4 <HAL_GPIO_DeInit+0x194>)
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	43db      	mvns	r3, r3
 80097ba:	493a      	ldr	r1, [pc, #232]	; (80098a4 <HAL_GPIO_DeInit+0x194>)
 80097bc:	4013      	ands	r3, r2
 80097be:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80097c0:	4b38      	ldr	r3, [pc, #224]	; (80098a4 <HAL_GPIO_DeInit+0x194>)
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	43db      	mvns	r3, r3
 80097c8:	4936      	ldr	r1, [pc, #216]	; (80098a4 <HAL_GPIO_DeInit+0x194>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80097ce:	4b35      	ldr	r3, [pc, #212]	; (80098a4 <HAL_GPIO_DeInit+0x194>)
 80097d0:	68da      	ldr	r2, [r3, #12]
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	43db      	mvns	r3, r3
 80097d6:	4933      	ldr	r1, [pc, #204]	; (80098a4 <HAL_GPIO_DeInit+0x194>)
 80097d8:	4013      	ands	r3, r2
 80097da:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80097dc:	4b31      	ldr	r3, [pc, #196]	; (80098a4 <HAL_GPIO_DeInit+0x194>)
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	43db      	mvns	r3, r3
 80097e4:	492f      	ldr	r1, [pc, #188]	; (80098a4 <HAL_GPIO_DeInit+0x194>)
 80097e6:	4013      	ands	r3, r2
 80097e8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	220f      	movs	r2, #15
 80097f4:	fa02 f303 	lsl.w	r3, r2, r3
 80097f8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80097fa:	4a23      	ldr	r2, [pc, #140]	; (8009888 <HAL_GPIO_DeInit+0x178>)
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	089b      	lsrs	r3, r3, #2
 8009800:	3302      	adds	r3, #2
 8009802:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	43da      	mvns	r2, r3
 800980a:	481f      	ldr	r0, [pc, #124]	; (8009888 <HAL_GPIO_DeInit+0x178>)
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	089b      	lsrs	r3, r3, #2
 8009810:	400a      	ands	r2, r1
 8009812:	3302      	adds	r3, #2
 8009814:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	2bff      	cmp	r3, #255	; 0xff
 800981c:	d801      	bhi.n	8009822 <HAL_GPIO_DeInit+0x112>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	e001      	b.n	8009826 <HAL_GPIO_DeInit+0x116>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3304      	adds	r3, #4
 8009826:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	2bff      	cmp	r3, #255	; 0xff
 800982c:	d802      	bhi.n	8009834 <HAL_GPIO_DeInit+0x124>
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	e002      	b.n	800983a <HAL_GPIO_DeInit+0x12a>
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3b08      	subs	r3, #8
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	210f      	movs	r1, #15
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	fa01 f303 	lsl.w	r3, r1, r3
 8009848:	43db      	mvns	r3, r3
 800984a:	401a      	ands	r2, r3
 800984c:	2104      	movs	r1, #4
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	fa01 f303 	lsl.w	r3, r1, r3
 8009854:	431a      	orrs	r2, r3
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	43db      	mvns	r3, r3
 8009862:	401a      	ands	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	3301      	adds	r3, #1
 800986c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	fa22 f303 	lsr.w	r3, r2, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	f47f af52 	bne.w	8009720 <HAL_GPIO_DeInit+0x10>
  }
}
 800987c:	bf00      	nop
 800987e:	bf00      	nop
 8009880:	3724      	adds	r7, #36	; 0x24
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr
 8009888:	40010000 	.word	0x40010000
 800988c:	40010800 	.word	0x40010800
 8009890:	40010c00 	.word	0x40010c00
 8009894:	40011000 	.word	0x40011000
 8009898:	40011400 	.word	0x40011400
 800989c:	40011800 	.word	0x40011800
 80098a0:	40011c00 	.word	0x40011c00
 80098a4:	40010400 	.word	0x40010400

080098a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689a      	ldr	r2, [r3, #8]
 80098b8:	887b      	ldrh	r3, [r7, #2]
 80098ba:	4013      	ands	r3, r2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
 80098c4:	e001      	b.n	80098ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bc80      	pop	{r7}
 80098d4:	4770      	bx	lr

080098d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	807b      	strh	r3, [r7, #2]
 80098e2:	4613      	mov	r3, r2
 80098e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098e6:	787b      	ldrb	r3, [r7, #1]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80098ec:	887a      	ldrh	r2, [r7, #2]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80098f2:	e003      	b.n	80098fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80098f4:	887b      	ldrh	r3, [r7, #2]
 80098f6:	041a      	lsls	r2, r3, #16
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	611a      	str	r2, [r3, #16]
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr

08009906 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009918:	887a      	ldrh	r2, [r7, #2]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4013      	ands	r3, r2
 800991e:	041a      	lsls	r2, r3, #16
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	43d9      	mvns	r1, r3
 8009924:	887b      	ldrh	r3, [r7, #2]
 8009926:	400b      	ands	r3, r1
 8009928:	431a      	orrs	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	611a      	str	r2, [r3, #16]
}
 800992e:	bf00      	nop
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr

08009938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e12b      	b.n	8009ba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7fe fff8 	bl	8008954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2224      	movs	r2, #36	; 0x24
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0201 	bic.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800998a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800999a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800999c:	f001 fdb8 	bl	800b510 <HAL_RCC_GetPCLK1Freq>
 80099a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	4a81      	ldr	r2, [pc, #516]	; (8009bac <HAL_I2C_Init+0x274>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d807      	bhi.n	80099bc <HAL_I2C_Init+0x84>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4a80      	ldr	r2, [pc, #512]	; (8009bb0 <HAL_I2C_Init+0x278>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	bf94      	ite	ls
 80099b4:	2301      	movls	r3, #1
 80099b6:	2300      	movhi	r3, #0
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	e006      	b.n	80099ca <HAL_I2C_Init+0x92>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4a7d      	ldr	r2, [pc, #500]	; (8009bb4 <HAL_I2C_Init+0x27c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	bf94      	ite	ls
 80099c4:	2301      	movls	r3, #1
 80099c6:	2300      	movhi	r3, #0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e0e7      	b.n	8009ba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4a78      	ldr	r2, [pc, #480]	; (8009bb8 <HAL_I2C_Init+0x280>)
 80099d6:	fba2 2303 	umull	r2, r3, r2, r3
 80099da:	0c9b      	lsrs	r3, r3, #18
 80099dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a6a      	ldr	r2, [pc, #424]	; (8009bac <HAL_I2C_Init+0x274>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d802      	bhi.n	8009a0c <HAL_I2C_Init+0xd4>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	e009      	b.n	8009a20 <HAL_I2C_Init+0xe8>
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009a12:	fb02 f303 	mul.w	r3, r2, r3
 8009a16:	4a69      	ldr	r2, [pc, #420]	; (8009bbc <HAL_I2C_Init+0x284>)
 8009a18:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1c:	099b      	lsrs	r3, r3, #6
 8009a1e:	3301      	adds	r3, #1
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	6812      	ldr	r2, [r2, #0]
 8009a24:	430b      	orrs	r3, r1
 8009a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	495c      	ldr	r1, [pc, #368]	; (8009bac <HAL_I2C_Init+0x274>)
 8009a3c:	428b      	cmp	r3, r1
 8009a3e:	d819      	bhi.n	8009a74 <HAL_I2C_Init+0x13c>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	1e59      	subs	r1, r3, #1
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a4e:	1c59      	adds	r1, r3, #1
 8009a50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009a54:	400b      	ands	r3, r1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <HAL_I2C_Init+0x138>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	1e59      	subs	r1, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a68:	3301      	adds	r3, #1
 8009a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a6e:	e051      	b.n	8009b14 <HAL_I2C_Init+0x1dc>
 8009a70:	2304      	movs	r3, #4
 8009a72:	e04f      	b.n	8009b14 <HAL_I2C_Init+0x1dc>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d111      	bne.n	8009aa0 <HAL_I2C_Init+0x168>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	1e58      	subs	r0, r3, #1
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6859      	ldr	r1, [r3, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	440b      	add	r3, r1
 8009a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a8e:	3301      	adds	r3, #1
 8009a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	bf0c      	ite	eq
 8009a98:	2301      	moveq	r3, #1
 8009a9a:	2300      	movne	r3, #0
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	e012      	b.n	8009ac6 <HAL_I2C_Init+0x18e>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	1e58      	subs	r0, r3, #1
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6859      	ldr	r1, [r3, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	0099      	lsls	r1, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bf0c      	ite	eq
 8009ac0:	2301      	moveq	r3, #1
 8009ac2:	2300      	movne	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <HAL_I2C_Init+0x196>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e022      	b.n	8009b14 <HAL_I2C_Init+0x1dc>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10e      	bne.n	8009af4 <HAL_I2C_Init+0x1bc>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	1e58      	subs	r0, r3, #1
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6859      	ldr	r1, [r3, #4]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	440b      	add	r3, r1
 8009ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ae8:	3301      	adds	r3, #1
 8009aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af2:	e00f      	b.n	8009b14 <HAL_I2C_Init+0x1dc>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	1e58      	subs	r0, r3, #1
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6859      	ldr	r1, [r3, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	440b      	add	r3, r1
 8009b02:	0099      	lsls	r1, r3, #2
 8009b04:	440b      	add	r3, r1
 8009b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	6809      	ldr	r1, [r1, #0]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	69da      	ldr	r2, [r3, #28]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6911      	ldr	r1, [r2, #16]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	68d2      	ldr	r2, [r2, #12]
 8009b4e:	4311      	orrs	r1, r2
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	6812      	ldr	r2, [r2, #0]
 8009b54:	430b      	orrs	r3, r1
 8009b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	695a      	ldr	r2, [r3, #20]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0201 	orr.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	000186a0 	.word	0x000186a0
 8009bb0:	001e847f 	.word	0x001e847f
 8009bb4:	003d08ff 	.word	0x003d08ff
 8009bb8:	431bde83 	.word	0x431bde83
 8009bbc:	10624dd3 	.word	0x10624dd3

08009bc0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e021      	b.n	8009c16 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2224      	movs	r2, #36	; 0x24
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0201 	bic.w	r2, r2, #1
 8009be8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7fe fef0 	bl	80089d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	607a      	str	r2, [r7, #4]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	817b      	strh	r3, [r7, #10]
 8009c30:	4613      	mov	r3, r2
 8009c32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c34:	f7ff f85e 	bl	8008cf4 <HAL_GetTick>
 8009c38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	f040 80e0 	bne.w	8009e08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	2319      	movs	r3, #25
 8009c4e:	2201      	movs	r2, #1
 8009c50:	4970      	ldr	r1, [pc, #448]	; (8009e14 <HAL_I2C_Master_Transmit+0x1f4>)
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 fe5c 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009c5e:	2302      	movs	r3, #2
 8009c60:	e0d3      	b.n	8009e0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_I2C_Master_Transmit+0x50>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e0cc      	b.n	8009e0a <HAL_I2C_Master_Transmit+0x1ea>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d007      	beq.n	8009c96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f042 0201 	orr.w	r2, r2, #1
 8009c94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ca4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2221      	movs	r2, #33	; 0x21
 8009caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2210      	movs	r2, #16
 8009cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	893a      	ldrh	r2, [r7, #8]
 8009cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	4a50      	ldr	r2, [pc, #320]	; (8009e18 <HAL_I2C_Master_Transmit+0x1f8>)
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009cd8:	8979      	ldrh	r1, [r7, #10]
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	6a3a      	ldr	r2, [r7, #32]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f000 fc16 	bl	800a510 <I2C_MasterRequestWrite>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e08d      	b.n	8009e0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cee:	2300      	movs	r3, #0
 8009cf0:	613b      	str	r3, [r7, #16]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	613b      	str	r3, [r7, #16]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	613b      	str	r3, [r7, #16]
 8009d02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009d04:	e066      	b.n	8009dd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	6a39      	ldr	r1, [r7, #32]
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 ff1a 	bl	800ab44 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d107      	bne.n	8009d2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e06b      	b.n	8009e0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	781a      	ldrb	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d11b      	bne.n	8009da8 <HAL_I2C_Master_Transmit+0x188>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d017      	beq.n	8009da8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	3b01      	subs	r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da0:	3b01      	subs	r3, #1
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	6a39      	ldr	r1, [r7, #32]
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 ff11 	bl	800abd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00d      	beq.n	8009dd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d107      	bne.n	8009dd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e01a      	b.n	8009e0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d194      	bne.n	8009d06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2220      	movs	r2, #32
 8009df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	e000      	b.n	8009e0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009e08:	2302      	movs	r3, #2
  }
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	00100002 	.word	0x00100002
 8009e18:	ffff0000 	.word	0xffff0000

08009e1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	817b      	strh	r3, [r7, #10]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	813b      	strh	r3, [r7, #8]
 8009e32:	4613      	mov	r3, r2
 8009e34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e36:	f7fe ff5d 	bl	8008cf4 <HAL_GetTick>
 8009e3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b20      	cmp	r3, #32
 8009e46:	f040 80d9 	bne.w	8009ffc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	2319      	movs	r3, #25
 8009e50:	2201      	movs	r2, #1
 8009e52:	496d      	ldr	r1, [pc, #436]	; (800a008 <HAL_I2C_Mem_Write+0x1ec>)
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fd5b 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009e60:	2302      	movs	r3, #2
 8009e62:	e0cc      	b.n	8009ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d101      	bne.n	8009e72 <HAL_I2C_Mem_Write+0x56>
 8009e6e:	2302      	movs	r3, #2
 8009e70:	e0c5      	b.n	8009ffe <HAL_I2C_Mem_Write+0x1e2>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d007      	beq.n	8009e98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0201 	orr.w	r2, r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ea6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2221      	movs	r2, #33	; 0x21
 8009eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2240      	movs	r2, #64	; 0x40
 8009eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a3a      	ldr	r2, [r7, #32]
 8009ec2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4a4d      	ldr	r2, [pc, #308]	; (800a00c <HAL_I2C_Mem_Write+0x1f0>)
 8009ed8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009eda:	88f8      	ldrh	r0, [r7, #6]
 8009edc:	893a      	ldrh	r2, [r7, #8]
 8009ede:	8979      	ldrh	r1, [r7, #10]
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	4603      	mov	r3, r0
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fb92 	bl	800a614 <I2C_RequestMemoryWrite>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d052      	beq.n	8009f9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e081      	b.n	8009ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 fe20 	bl	800ab44 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00d      	beq.n	8009f26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d107      	bne.n	8009f22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e06b      	b.n	8009ffe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d11b      	bne.n	8009f9c <HAL_I2C_Mem_Write+0x180>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d017      	beq.n	8009f9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	781a      	ldrb	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1aa      	bne.n	8009efa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 fe13 	bl	800abd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00d      	beq.n	8009fd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	d107      	bne.n	8009fcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e016      	b.n	8009ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e000      	b.n	8009ffe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009ffc:	2302      	movs	r3, #2
  }
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3718      	adds	r7, #24
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	00100002 	.word	0x00100002
 800a00c:	ffff0000 	.word	0xffff0000

0800a010 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b08c      	sub	sp, #48	; 0x30
 800a014:	af02      	add	r7, sp, #8
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	4608      	mov	r0, r1
 800a01a:	4611      	mov	r1, r2
 800a01c:	461a      	mov	r2, r3
 800a01e:	4603      	mov	r3, r0
 800a020:	817b      	strh	r3, [r7, #10]
 800a022:	460b      	mov	r3, r1
 800a024:	813b      	strh	r3, [r7, #8]
 800a026:	4613      	mov	r3, r2
 800a028:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a02e:	f7fe fe61 	bl	8008cf4 <HAL_GetTick>
 800a032:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	f040 8244 	bne.w	800a4ca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	2319      	movs	r3, #25
 800a048:	2201      	movs	r2, #1
 800a04a:	4982      	ldr	r1, [pc, #520]	; (800a254 <HAL_I2C_Mem_Read+0x244>)
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fc5f 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a058:	2302      	movs	r3, #2
 800a05a:	e237      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_I2C_Mem_Read+0x5a>
 800a066:	2302      	movs	r3, #2
 800a068:	e230      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d007      	beq.n	800a090 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a09e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2222      	movs	r2, #34	; 0x22
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2240      	movs	r2, #64	; 0x40
 800a0ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a0c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4a62      	ldr	r2, [pc, #392]	; (800a258 <HAL_I2C_Mem_Read+0x248>)
 800a0d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0d2:	88f8      	ldrh	r0, [r7, #6]
 800a0d4:	893a      	ldrh	r2, [r7, #8]
 800a0d6:	8979      	ldrh	r1, [r7, #10]
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 fb2c 	bl	800a740 <I2C_RequestMemoryRead>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e1ec      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d113      	bne.n	800a122 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	61fb      	str	r3, [r7, #28]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	61fb      	str	r3, [r7, #28]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a11e:	601a      	str	r2, [r3, #0]
 800a120:	e1c0      	b.n	800a4a4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a126:	2b01      	cmp	r3, #1
 800a128:	d11e      	bne.n	800a168 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a138:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a13a:	b672      	cpsid	i
}
 800a13c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a13e:	2300      	movs	r3, #0
 800a140:	61bb      	str	r3, [r7, #24]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	61bb      	str	r3, [r7, #24]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	61bb      	str	r3, [r7, #24]
 800a152:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a162:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a164:	b662      	cpsie	i
}
 800a166:	e035      	b.n	800a1d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d11e      	bne.n	800a1ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a17e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a180:	b672      	cpsid	i
}
 800a182:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a1aa:	b662      	cpsie	i
}
 800a1ac:	e012      	b.n	800a1d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1be:	2300      	movs	r3, #0
 800a1c0:	613b      	str	r3, [r7, #16]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	613b      	str	r3, [r7, #16]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	613b      	str	r3, [r7, #16]
 800a1d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a1d4:	e166      	b.n	800a4a4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	f200 811f 	bhi.w	800a41e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d123      	bne.n	800a230 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 fd39 	bl	800ac64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e167      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691a      	ldr	r2, [r3, #16]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a224:	b29b      	uxth	r3, r3
 800a226:	3b01      	subs	r3, #1
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a22e:	e139      	b.n	800a4a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a234:	2b02      	cmp	r3, #2
 800a236:	d152      	bne.n	800a2de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	2200      	movs	r2, #0
 800a240:	4906      	ldr	r1, [pc, #24]	; (800a25c <HAL_I2C_Mem_Read+0x24c>)
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 fb64 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d008      	beq.n	800a260 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e13c      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
 800a252:	bf00      	nop
 800a254:	00100002 	.word	0x00100002
 800a258:	ffff0000 	.word	0xffff0000
 800a25c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a260:	b672      	cpsid	i
}
 800a262:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	691a      	ldr	r2, [r3, #16]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	1c5a      	adds	r2, r3, #1
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a290:	3b01      	subs	r3, #1
 800a292:	b29a      	uxth	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a2a6:	b662      	cpsie	i
}
 800a2a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	691a      	ldr	r2, [r3, #16]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b4:	b2d2      	uxtb	r2, r2
 800a2b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a2dc:	e0e2      	b.n	800a4a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	497b      	ldr	r1, [pc, #492]	; (800a4d4 <HAL_I2C_Mem_Read+0x4c4>)
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 fb11 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0e9      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a306:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a308:	b672      	cpsid	i
}
 800a30a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	691a      	ldr	r2, [r3, #16]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	b2d2      	uxtb	r2, r2
 800a318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a328:	3b01      	subs	r3, #1
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a334:	b29b      	uxth	r3, r3
 800a336:	3b01      	subs	r3, #1
 800a338:	b29a      	uxth	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a33e:	4b66      	ldr	r3, [pc, #408]	; (800a4d8 <HAL_I2C_Mem_Read+0x4c8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	08db      	lsrs	r3, r3, #3
 800a344:	4a65      	ldr	r2, [pc, #404]	; (800a4dc <HAL_I2C_Mem_Read+0x4cc>)
 800a346:	fba2 2303 	umull	r2, r3, r2, r3
 800a34a:	0a1a      	lsrs	r2, r3, #8
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	00da      	lsls	r2, r3, #3
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d118      	bne.n	800a396 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	f043 0220 	orr.w	r2, r3, #32
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a386:	b662      	cpsie	i
}
 800a388:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e09a      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d1d9      	bne.n	800a358 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	b2d2      	uxtb	r2, r2
 800a3c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a3e6:	b662      	cpsie	i
}
 800a3e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	691a      	ldr	r2, [r3, #16]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	b2d2      	uxtb	r2, r2
 800a3f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	1c5a      	adds	r2, r3, #1
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a406:	3b01      	subs	r3, #1
 800a408:	b29a      	uxth	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a412:	b29b      	uxth	r3, r3
 800a414:	3b01      	subs	r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a41c:	e042      	b.n	800a4a4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 fc1e 	bl	800ac64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e04c      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	b2d2      	uxtb	r2, r2
 800a43e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a44e:	3b01      	subs	r3, #1
 800a450:	b29a      	uxth	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	3b01      	subs	r3, #1
 800a45e:	b29a      	uxth	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d118      	bne.n	800a4a4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	691a      	ldr	r2, [r3, #16]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	b2d2      	uxtb	r2, r2
 800a47e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	1c5a      	adds	r2, r3, #1
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	3b01      	subs	r3, #1
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f47f ae94 	bne.w	800a1d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e000      	b.n	800a4cc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a4ca:	2302      	movs	r3, #2
  }
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3728      	adds	r7, #40	; 0x28
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	00010004 	.word	0x00010004
 800a4d8:	200009b8 	.word	0x200009b8
 800a4dc:	14f8b589 	.word	0x14f8b589

0800a4e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ee:	b2db      	uxtb	r3, r3
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bc80      	pop	{r7}
 800a4f8:	4770      	bx	lr

0800a4fa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a506:	4618      	mov	r0, r3
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr

0800a510 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af02      	add	r7, sp, #8
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	607a      	str	r2, [r7, #4]
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	460b      	mov	r3, r1
 800a51e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d006      	beq.n	800a53a <I2C_MasterRequestWrite+0x2a>
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d003      	beq.n	800a53a <I2C_MasterRequestWrite+0x2a>
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a538:	d108      	bne.n	800a54c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	e00b      	b.n	800a564 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a550:	2b12      	cmp	r3, #18
 800a552:	d107      	bne.n	800a564 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a562:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 f9cd 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00d      	beq.n	800a598 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a58a:	d103      	bne.n	800a594 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a592:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e035      	b.n	800a604 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5a0:	d108      	bne.n	800a5b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5a2:	897b      	ldrh	r3, [r7, #10]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a5b0:	611a      	str	r2, [r3, #16]
 800a5b2:	e01b      	b.n	800a5ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a5b4:	897b      	ldrh	r3, [r7, #10]
 800a5b6:	11db      	asrs	r3, r3, #7
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	f003 0306 	and.w	r3, r3, #6
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	f063 030f 	orn	r3, r3, #15
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	490e      	ldr	r1, [pc, #56]	; (800a60c <I2C_MasterRequestWrite+0xfc>)
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 fa16 	bl	800aa04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e010      	b.n	800a604 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a5e2:	897b      	ldrh	r3, [r7, #10]
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	4907      	ldr	r1, [pc, #28]	; (800a610 <I2C_MasterRequestWrite+0x100>)
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fa06 	bl	800aa04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e000      	b.n	800a604 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	00010008 	.word	0x00010008
 800a610:	00010002 	.word	0x00010002

0800a614 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af02      	add	r7, sp, #8
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	4608      	mov	r0, r1
 800a61e:	4611      	mov	r1, r2
 800a620:	461a      	mov	r2, r3
 800a622:	4603      	mov	r3, r0
 800a624:	817b      	strh	r3, [r7, #10]
 800a626:	460b      	mov	r3, r1
 800a628:	813b      	strh	r3, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a63c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	2200      	movs	r2, #0
 800a646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 f960 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00d      	beq.n	800a672 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a664:	d103      	bne.n	800a66e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a66c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e05f      	b.n	800a732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a672:	897b      	ldrh	r3, [r7, #10]
 800a674:	b2db      	uxtb	r3, r3
 800a676:	461a      	mov	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	6a3a      	ldr	r2, [r7, #32]
 800a686:	492d      	ldr	r1, [pc, #180]	; (800a73c <I2C_RequestMemoryWrite+0x128>)
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f9bb 	bl	800aa04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e04c      	b.n	800a732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a698:	2300      	movs	r3, #0
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b0:	6a39      	ldr	r1, [r7, #32]
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 fa46 	bl	800ab44 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00d      	beq.n	800a6da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d107      	bne.n	800a6d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e02b      	b.n	800a732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6da:	88fb      	ldrh	r3, [r7, #6]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d105      	bne.n	800a6ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6e0:	893b      	ldrh	r3, [r7, #8]
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	611a      	str	r2, [r3, #16]
 800a6ea:	e021      	b.n	800a730 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a6ec:	893b      	ldrh	r3, [r7, #8]
 800a6ee:	0a1b      	lsrs	r3, r3, #8
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fc:	6a39      	ldr	r1, [r7, #32]
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 fa20 	bl	800ab44 <I2C_WaitOnTXEFlagUntilTimeout>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00d      	beq.n	800a726 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d107      	bne.n	800a722 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e005      	b.n	800a732 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a726:	893b      	ldrh	r3, [r7, #8]
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	00010002 	.word	0x00010002

0800a740 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af02      	add	r7, sp, #8
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	4608      	mov	r0, r1
 800a74a:	4611      	mov	r1, r2
 800a74c:	461a      	mov	r2, r3
 800a74e:	4603      	mov	r3, r0
 800a750:	817b      	strh	r3, [r7, #10]
 800a752:	460b      	mov	r3, r1
 800a754:	813b      	strh	r3, [r7, #8]
 800a756:	4613      	mov	r3, r2
 800a758:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a768:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a778:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	2200      	movs	r2, #0
 800a782:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 f8c2 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00d      	beq.n	800a7ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a79c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7a0:	d103      	bne.n	800a7aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e0aa      	b.n	800a904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7ae:	897b      	ldrh	r3, [r7, #10]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	6a3a      	ldr	r2, [r7, #32]
 800a7c2:	4952      	ldr	r1, [pc, #328]	; (800a90c <I2C_RequestMemoryRead+0x1cc>)
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 f91d 	bl	800aa04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e097      	b.n	800a904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ec:	6a39      	ldr	r1, [r7, #32]
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f9a8 	bl	800ab44 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00d      	beq.n	800a816 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d107      	bne.n	800a812 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a810:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e076      	b.n	800a904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a816:	88fb      	ldrh	r3, [r7, #6]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d105      	bne.n	800a828 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a81c:	893b      	ldrh	r3, [r7, #8]
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	611a      	str	r2, [r3, #16]
 800a826:	e021      	b.n	800a86c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a828:	893b      	ldrh	r3, [r7, #8]
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a838:	6a39      	ldr	r1, [r7, #32]
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 f982 	bl	800ab44 <I2C_WaitOnTXEFlagUntilTimeout>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00d      	beq.n	800a862 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	d107      	bne.n	800a85e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a85c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e050      	b.n	800a904 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a862:	893b      	ldrh	r3, [r7, #8]
 800a864:	b2da      	uxtb	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86e:	6a39      	ldr	r1, [r7, #32]
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 f967 	bl	800ab44 <I2C_WaitOnTXEFlagUntilTimeout>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00d      	beq.n	800a898 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a880:	2b04      	cmp	r3, #4
 800a882:	d107      	bne.n	800a894 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a892:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e035      	b.n	800a904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f000 f82b 	bl	800a910 <I2C_WaitOnFlagUntilTimeout>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00d      	beq.n	800a8dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ce:	d103      	bne.n	800a8d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	e013      	b.n	800a904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a8dc:	897b      	ldrh	r3, [r7, #10]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	f043 0301 	orr.w	r3, r3, #1
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	6a3a      	ldr	r2, [r7, #32]
 800a8f0:	4906      	ldr	r1, [pc, #24]	; (800a90c <I2C_RequestMemoryRead+0x1cc>)
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f886 	bl	800aa04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	00010002 	.word	0x00010002

0800a910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	4613      	mov	r3, r2
 800a91e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a920:	e048      	b.n	800a9b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d044      	beq.n	800a9b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a92a:	f7fe f9e3 	bl	8008cf4 <HAL_GetTick>
 800a92e:	4602      	mov	r2, r0
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	429a      	cmp	r2, r3
 800a938:	d302      	bcc.n	800a940 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d139      	bne.n	800a9b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	0c1b      	lsrs	r3, r3, #16
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b01      	cmp	r3, #1
 800a948:	d10d      	bne.n	800a966 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	43da      	mvns	r2, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	4013      	ands	r3, r2
 800a956:	b29b      	uxth	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bf0c      	ite	eq
 800a95c:	2301      	moveq	r3, #1
 800a95e:	2300      	movne	r3, #0
 800a960:	b2db      	uxtb	r3, r3
 800a962:	461a      	mov	r2, r3
 800a964:	e00c      	b.n	800a980 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	43da      	mvns	r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	4013      	ands	r3, r2
 800a972:	b29b      	uxth	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	bf0c      	ite	eq
 800a978:	2301      	moveq	r3, #1
 800a97a:	2300      	movne	r3, #0
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	461a      	mov	r2, r3
 800a980:	79fb      	ldrb	r3, [r7, #7]
 800a982:	429a      	cmp	r2, r3
 800a984:	d116      	bne.n	800a9b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2220      	movs	r2, #32
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a0:	f043 0220 	orr.w	r2, r3, #32
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e023      	b.n	800a9fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	0c1b      	lsrs	r3, r3, #16
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d10d      	bne.n	800a9da <I2C_WaitOnFlagUntilTimeout+0xca>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	43da      	mvns	r2, r3
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bf0c      	ite	eq
 800a9d0:	2301      	moveq	r3, #1
 800a9d2:	2300      	movne	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	e00c      	b.n	800a9f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	43da      	mvns	r2, r3
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bf0c      	ite	eq
 800a9ec:	2301      	moveq	r3, #1
 800a9ee:	2300      	movne	r3, #0
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d093      	beq.n	800a922 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa12:	e071      	b.n	800aaf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa22:	d123      	bne.n	800aa6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aa3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2220      	movs	r2, #32
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa58:	f043 0204 	orr.w	r2, r3, #4
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e067      	b.n	800ab3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa72:	d041      	beq.n	800aaf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa74:	f7fe f93e 	bl	8008cf4 <HAL_GetTick>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d302      	bcc.n	800aa8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d136      	bne.n	800aaf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	0c1b      	lsrs	r3, r3, #16
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d10c      	bne.n	800aaae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	43da      	mvns	r2, r3
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	bf14      	ite	ne
 800aaa6:	2301      	movne	r3, #1
 800aaa8:	2300      	moveq	r3, #0
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	e00b      	b.n	800aac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	43da      	mvns	r2, r3
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	4013      	ands	r3, r2
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bf14      	ite	ne
 800aac0:	2301      	movne	r3, #1
 800aac2:	2300      	moveq	r3, #0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d016      	beq.n	800aaf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2220      	movs	r2, #32
 800aad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	f043 0220 	orr.w	r2, r3, #32
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e021      	b.n	800ab3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	0c1b      	lsrs	r3, r3, #16
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d10c      	bne.n	800ab1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	43da      	mvns	r2, r3
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	bf14      	ite	ne
 800ab14:	2301      	movne	r3, #1
 800ab16:	2300      	moveq	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	e00b      	b.n	800ab34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	43da      	mvns	r2, r3
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	4013      	ands	r3, r2
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	bf14      	ite	ne
 800ab2e:	2301      	movne	r3, #1
 800ab30:	2300      	moveq	r3, #0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f47f af6d 	bne.w	800aa14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab50:	e034      	b.n	800abbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f000 f8e3 	bl	800ad1e <I2C_IsAcknowledgeFailed>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e034      	b.n	800abcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab68:	d028      	beq.n	800abbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab6a:	f7fe f8c3 	bl	8008cf4 <HAL_GetTick>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d302      	bcc.n	800ab80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d11d      	bne.n	800abbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab8a:	2b80      	cmp	r3, #128	; 0x80
 800ab8c:	d016      	beq.n	800abbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	f043 0220 	orr.w	r2, r3, #32
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e007      	b.n	800abcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc6:	2b80      	cmp	r3, #128	; 0x80
 800abc8:	d1c3      	bne.n	800ab52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abe0:	e034      	b.n	800ac4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f89b 	bl	800ad1e <I2C_IsAcknowledgeFailed>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e034      	b.n	800ac5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf8:	d028      	beq.n	800ac4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abfa:	f7fe f87b 	bl	8008cf4 <HAL_GetTick>
 800abfe:	4602      	mov	r2, r0
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d302      	bcc.n	800ac10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d11d      	bne.n	800ac4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	f003 0304 	and.w	r3, r3, #4
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	d016      	beq.n	800ac4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2220      	movs	r2, #32
 800ac28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	f043 0220 	orr.w	r2, r3, #32
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e007      	b.n	800ac5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	f003 0304 	and.w	r3, r3, #4
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d1c3      	bne.n	800abe2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac70:	e049      	b.n	800ad06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d119      	bne.n	800acb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f06f 0210 	mvn.w	r2, #16
 800ac88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	e030      	b.n	800ad16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acb4:	f7fe f81e 	bl	8008cf4 <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d302      	bcc.n	800acca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d11d      	bne.n	800ad06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd4:	2b40      	cmp	r3, #64	; 0x40
 800acd6:	d016      	beq.n	800ad06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf2:	f043 0220 	orr.w	r2, r3, #32
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e007      	b.n	800ad16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	695b      	ldr	r3, [r3, #20]
 800ad0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad10:	2b40      	cmp	r3, #64	; 0x40
 800ad12:	d1ae      	bne.n	800ac72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad34:	d11b      	bne.n	800ad6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2220      	movs	r2, #32
 800ad4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	f043 0204 	orr.w	r2, r3, #4
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bc80      	pop	{r7}
 800ad78:	4770      	bx	lr
	...

0800ad7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e272      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 8087 	beq.w	800aeaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ad9c:	4b92      	ldr	r3, [pc, #584]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f003 030c 	and.w	r3, r3, #12
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d00c      	beq.n	800adc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ada8:	4b8f      	ldr	r3, [pc, #572]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f003 030c 	and.w	r3, r3, #12
 800adb0:	2b08      	cmp	r3, #8
 800adb2:	d112      	bne.n	800adda <HAL_RCC_OscConfig+0x5e>
 800adb4:	4b8c      	ldr	r3, [pc, #560]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adc0:	d10b      	bne.n	800adda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adc2:	4b89      	ldr	r3, [pc, #548]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d06c      	beq.n	800aea8 <HAL_RCC_OscConfig+0x12c>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d168      	bne.n	800aea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e24c      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ade2:	d106      	bne.n	800adf2 <HAL_RCC_OscConfig+0x76>
 800ade4:	4b80      	ldr	r3, [pc, #512]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a7f      	ldr	r2, [pc, #508]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800adea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	e02e      	b.n	800ae50 <HAL_RCC_OscConfig+0xd4>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10c      	bne.n	800ae14 <HAL_RCC_OscConfig+0x98>
 800adfa:	4b7b      	ldr	r3, [pc, #492]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a7a      	ldr	r2, [pc, #488]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	4b78      	ldr	r3, [pc, #480]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a77      	ldr	r2, [pc, #476]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	e01d      	b.n	800ae50 <HAL_RCC_OscConfig+0xd4>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae1c:	d10c      	bne.n	800ae38 <HAL_RCC_OscConfig+0xbc>
 800ae1e:	4b72      	ldr	r3, [pc, #456]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a71      	ldr	r2, [pc, #452]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae28:	6013      	str	r3, [r2, #0]
 800ae2a:	4b6f      	ldr	r3, [pc, #444]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a6e      	ldr	r2, [pc, #440]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	e00b      	b.n	800ae50 <HAL_RCC_OscConfig+0xd4>
 800ae38:	4b6b      	ldr	r3, [pc, #428]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a6a      	ldr	r2, [pc, #424]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	4b68      	ldr	r3, [pc, #416]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a67      	ldr	r2, [pc, #412]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d013      	beq.n	800ae80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae58:	f7fd ff4c 	bl	8008cf4 <HAL_GetTick>
 800ae5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae5e:	e008      	b.n	800ae72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae60:	f7fd ff48 	bl	8008cf4 <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	2b64      	cmp	r3, #100	; 0x64
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e200      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae72:	4b5d      	ldr	r3, [pc, #372]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0f0      	beq.n	800ae60 <HAL_RCC_OscConfig+0xe4>
 800ae7e:	e014      	b.n	800aeaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae80:	f7fd ff38 	bl	8008cf4 <HAL_GetTick>
 800ae84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae86:	e008      	b.n	800ae9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae88:	f7fd ff34 	bl	8008cf4 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b64      	cmp	r3, #100	; 0x64
 800ae94:	d901      	bls.n	800ae9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e1ec      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae9a:	4b53      	ldr	r3, [pc, #332]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1f0      	bne.n	800ae88 <HAL_RCC_OscConfig+0x10c>
 800aea6:	e000      	b.n	800aeaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d063      	beq.n	800af7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aeb6:	4b4c      	ldr	r3, [pc, #304]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	f003 030c 	and.w	r3, r3, #12
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00b      	beq.n	800aeda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aec2:	4b49      	ldr	r3, [pc, #292]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	f003 030c 	and.w	r3, r3, #12
 800aeca:	2b08      	cmp	r3, #8
 800aecc:	d11c      	bne.n	800af08 <HAL_RCC_OscConfig+0x18c>
 800aece:	4b46      	ldr	r3, [pc, #280]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d116      	bne.n	800af08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aeda:	4b43      	ldr	r3, [pc, #268]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 0302 	and.w	r3, r3, #2
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d005      	beq.n	800aef2 <HAL_RCC_OscConfig+0x176>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d001      	beq.n	800aef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e1c0      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aef2:	4b3d      	ldr	r3, [pc, #244]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	4939      	ldr	r1, [pc, #228]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800af02:	4313      	orrs	r3, r2
 800af04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af06:	e03a      	b.n	800af7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d020      	beq.n	800af52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af10:	4b36      	ldr	r3, [pc, #216]	; (800afec <HAL_RCC_OscConfig+0x270>)
 800af12:	2201      	movs	r2, #1
 800af14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af16:	f7fd feed 	bl	8008cf4 <HAL_GetTick>
 800af1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af1c:	e008      	b.n	800af30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af1e:	f7fd fee9 	bl	8008cf4 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e1a1      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af30:	4b2d      	ldr	r3, [pc, #180]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0302 	and.w	r3, r3, #2
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0f0      	beq.n	800af1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af3c:	4b2a      	ldr	r3, [pc, #168]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	4927      	ldr	r1, [pc, #156]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800af4c:	4313      	orrs	r3, r2
 800af4e:	600b      	str	r3, [r1, #0]
 800af50:	e015      	b.n	800af7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af52:	4b26      	ldr	r3, [pc, #152]	; (800afec <HAL_RCC_OscConfig+0x270>)
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af58:	f7fd fecc 	bl	8008cf4 <HAL_GetTick>
 800af5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af5e:	e008      	b.n	800af72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af60:	f7fd fec8 	bl	8008cf4 <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d901      	bls.n	800af72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e180      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af72:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1f0      	bne.n	800af60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0308 	and.w	r3, r3, #8
 800af86:	2b00      	cmp	r3, #0
 800af88:	d03a      	beq.n	800b000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d019      	beq.n	800afc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af92:	4b17      	ldr	r3, [pc, #92]	; (800aff0 <HAL_RCC_OscConfig+0x274>)
 800af94:	2201      	movs	r2, #1
 800af96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af98:	f7fd feac 	bl	8008cf4 <HAL_GetTick>
 800af9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af9e:	e008      	b.n	800afb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afa0:	f7fd fea8 	bl	8008cf4 <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d901      	bls.n	800afb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e160      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800afb2:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <HAL_RCC_OscConfig+0x26c>)
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	f003 0302 	and.w	r3, r3, #2
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0f0      	beq.n	800afa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800afbe:	2001      	movs	r0, #1
 800afc0:	f000 face 	bl	800b560 <RCC_Delay>
 800afc4:	e01c      	b.n	800b000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800afc6:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <HAL_RCC_OscConfig+0x274>)
 800afc8:	2200      	movs	r2, #0
 800afca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afcc:	f7fd fe92 	bl	8008cf4 <HAL_GetTick>
 800afd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afd2:	e00f      	b.n	800aff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afd4:	f7fd fe8e 	bl	8008cf4 <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d908      	bls.n	800aff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e146      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
 800afe6:	bf00      	nop
 800afe8:	40021000 	.word	0x40021000
 800afec:	42420000 	.word	0x42420000
 800aff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aff4:	4b92      	ldr	r3, [pc, #584]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e9      	bne.n	800afd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0304 	and.w	r3, r3, #4
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 80a6 	beq.w	800b15a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b00e:	2300      	movs	r3, #0
 800b010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b012:	4b8b      	ldr	r3, [pc, #556]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10d      	bne.n	800b03a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b01e:	4b88      	ldr	r3, [pc, #544]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	4a87      	ldr	r2, [pc, #540]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b028:	61d3      	str	r3, [r2, #28]
 800b02a:	4b85      	ldr	r3, [pc, #532]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b032:	60bb      	str	r3, [r7, #8]
 800b034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b036:	2301      	movs	r3, #1
 800b038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b03a:	4b82      	ldr	r3, [pc, #520]	; (800b244 <HAL_RCC_OscConfig+0x4c8>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b042:	2b00      	cmp	r3, #0
 800b044:	d118      	bne.n	800b078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b046:	4b7f      	ldr	r3, [pc, #508]	; (800b244 <HAL_RCC_OscConfig+0x4c8>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a7e      	ldr	r2, [pc, #504]	; (800b244 <HAL_RCC_OscConfig+0x4c8>)
 800b04c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b052:	f7fd fe4f 	bl	8008cf4 <HAL_GetTick>
 800b056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b058:	e008      	b.n	800b06c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b05a:	f7fd fe4b 	bl	8008cf4 <HAL_GetTick>
 800b05e:	4602      	mov	r2, r0
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	2b64      	cmp	r3, #100	; 0x64
 800b066:	d901      	bls.n	800b06c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e103      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b06c:	4b75      	ldr	r3, [pc, #468]	; (800b244 <HAL_RCC_OscConfig+0x4c8>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0f0      	beq.n	800b05a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d106      	bne.n	800b08e <HAL_RCC_OscConfig+0x312>
 800b080:	4b6f      	ldr	r3, [pc, #444]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	4a6e      	ldr	r2, [pc, #440]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b086:	f043 0301 	orr.w	r3, r3, #1
 800b08a:	6213      	str	r3, [r2, #32]
 800b08c:	e02d      	b.n	800b0ea <HAL_RCC_OscConfig+0x36e>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10c      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x334>
 800b096:	4b6a      	ldr	r3, [pc, #424]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	4a69      	ldr	r2, [pc, #420]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b09c:	f023 0301 	bic.w	r3, r3, #1
 800b0a0:	6213      	str	r3, [r2, #32]
 800b0a2:	4b67      	ldr	r3, [pc, #412]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	4a66      	ldr	r2, [pc, #408]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0a8:	f023 0304 	bic.w	r3, r3, #4
 800b0ac:	6213      	str	r3, [r2, #32]
 800b0ae:	e01c      	b.n	800b0ea <HAL_RCC_OscConfig+0x36e>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	2b05      	cmp	r3, #5
 800b0b6:	d10c      	bne.n	800b0d2 <HAL_RCC_OscConfig+0x356>
 800b0b8:	4b61      	ldr	r3, [pc, #388]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	4a60      	ldr	r2, [pc, #384]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0be:	f043 0304 	orr.w	r3, r3, #4
 800b0c2:	6213      	str	r3, [r2, #32]
 800b0c4:	4b5e      	ldr	r3, [pc, #376]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	4a5d      	ldr	r2, [pc, #372]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0ca:	f043 0301 	orr.w	r3, r3, #1
 800b0ce:	6213      	str	r3, [r2, #32]
 800b0d0:	e00b      	b.n	800b0ea <HAL_RCC_OscConfig+0x36e>
 800b0d2:	4b5b      	ldr	r3, [pc, #364]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	4a5a      	ldr	r2, [pc, #360]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0d8:	f023 0301 	bic.w	r3, r3, #1
 800b0dc:	6213      	str	r3, [r2, #32]
 800b0de:	4b58      	ldr	r3, [pc, #352]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	4a57      	ldr	r2, [pc, #348]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b0e4:	f023 0304 	bic.w	r3, r3, #4
 800b0e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d015      	beq.n	800b11e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0f2:	f7fd fdff 	bl	8008cf4 <HAL_GetTick>
 800b0f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0f8:	e00a      	b.n	800b110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0fa:	f7fd fdfb 	bl	8008cf4 <HAL_GetTick>
 800b0fe:	4602      	mov	r2, r0
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	f241 3288 	movw	r2, #5000	; 0x1388
 800b108:	4293      	cmp	r3, r2
 800b10a:	d901      	bls.n	800b110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e0b1      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b110:	4b4b      	ldr	r3, [pc, #300]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	f003 0302 	and.w	r3, r3, #2
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d0ee      	beq.n	800b0fa <HAL_RCC_OscConfig+0x37e>
 800b11c:	e014      	b.n	800b148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b11e:	f7fd fde9 	bl	8008cf4 <HAL_GetTick>
 800b122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b124:	e00a      	b.n	800b13c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b126:	f7fd fde5 	bl	8008cf4 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	f241 3288 	movw	r2, #5000	; 0x1388
 800b134:	4293      	cmp	r3, r2
 800b136:	d901      	bls.n	800b13c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b138:	2303      	movs	r3, #3
 800b13a:	e09b      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b13c:	4b40      	ldr	r3, [pc, #256]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b13e:	6a1b      	ldr	r3, [r3, #32]
 800b140:	f003 0302 	and.w	r3, r3, #2
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1ee      	bne.n	800b126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b148:	7dfb      	ldrb	r3, [r7, #23]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d105      	bne.n	800b15a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b14e:	4b3c      	ldr	r3, [pc, #240]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	4a3b      	ldr	r2, [pc, #236]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 8087 	beq.w	800b272 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b164:	4b36      	ldr	r3, [pc, #216]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	f003 030c 	and.w	r3, r3, #12
 800b16c:	2b08      	cmp	r3, #8
 800b16e:	d061      	beq.n	800b234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	2b02      	cmp	r3, #2
 800b176:	d146      	bne.n	800b206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b178:	4b33      	ldr	r3, [pc, #204]	; (800b248 <HAL_RCC_OscConfig+0x4cc>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b17e:	f7fd fdb9 	bl	8008cf4 <HAL_GetTick>
 800b182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b184:	e008      	b.n	800b198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b186:	f7fd fdb5 	bl	8008cf4 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b02      	cmp	r3, #2
 800b192:	d901      	bls.n	800b198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e06d      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b198:	4b29      	ldr	r3, [pc, #164]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1f0      	bne.n	800b186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a1b      	ldr	r3, [r3, #32]
 800b1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ac:	d108      	bne.n	800b1c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b1ae:	4b24      	ldr	r3, [pc, #144]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	4921      	ldr	r1, [pc, #132]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b1c0:	4b1f      	ldr	r3, [pc, #124]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a19      	ldr	r1, [r3, #32]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	430b      	orrs	r3, r1
 800b1d2:	491b      	ldr	r1, [pc, #108]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1d8:	4b1b      	ldr	r3, [pc, #108]	; (800b248 <HAL_RCC_OscConfig+0x4cc>)
 800b1da:	2201      	movs	r2, #1
 800b1dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1de:	f7fd fd89 	bl	8008cf4 <HAL_GetTick>
 800b1e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b1e4:	e008      	b.n	800b1f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1e6:	f7fd fd85 	bl	8008cf4 <HAL_GetTick>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d901      	bls.n	800b1f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e03d      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b1f8:	4b11      	ldr	r3, [pc, #68]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0f0      	beq.n	800b1e6 <HAL_RCC_OscConfig+0x46a>
 800b204:	e035      	b.n	800b272 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b206:	4b10      	ldr	r3, [pc, #64]	; (800b248 <HAL_RCC_OscConfig+0x4cc>)
 800b208:	2200      	movs	r2, #0
 800b20a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b20c:	f7fd fd72 	bl	8008cf4 <HAL_GetTick>
 800b210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b212:	e008      	b.n	800b226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b214:	f7fd fd6e 	bl	8008cf4 <HAL_GetTick>
 800b218:	4602      	mov	r2, r0
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d901      	bls.n	800b226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b222:	2303      	movs	r3, #3
 800b224:	e026      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b226:	4b06      	ldr	r3, [pc, #24]	; (800b240 <HAL_RCC_OscConfig+0x4c4>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1f0      	bne.n	800b214 <HAL_RCC_OscConfig+0x498>
 800b232:	e01e      	b.n	800b272 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d107      	bne.n	800b24c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e019      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
 800b240:	40021000 	.word	0x40021000
 800b244:	40007000 	.word	0x40007000
 800b248:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b24c:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <HAL_RCC_OscConfig+0x500>)
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d106      	bne.n	800b26e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d001      	beq.n	800b272 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e000      	b.n	800b274 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	40021000 	.word	0x40021000

0800b280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e0d0      	b.n	800b436 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b294:	4b6a      	ldr	r3, [pc, #424]	; (800b440 <HAL_RCC_ClockConfig+0x1c0>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 0307 	and.w	r3, r3, #7
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d910      	bls.n	800b2c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2a2:	4b67      	ldr	r3, [pc, #412]	; (800b440 <HAL_RCC_ClockConfig+0x1c0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f023 0207 	bic.w	r2, r3, #7
 800b2aa:	4965      	ldr	r1, [pc, #404]	; (800b440 <HAL_RCC_ClockConfig+0x1c0>)
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2b2:	4b63      	ldr	r3, [pc, #396]	; (800b440 <HAL_RCC_ClockConfig+0x1c0>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0307 	and.w	r3, r3, #7
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d001      	beq.n	800b2c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e0b8      	b.n	800b436 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0302 	and.w	r3, r3, #2
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d020      	beq.n	800b312 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d005      	beq.n	800b2e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b2dc:	4b59      	ldr	r3, [pc, #356]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	4a58      	ldr	r2, [pc, #352]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b2e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b2e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0308 	and.w	r3, r3, #8
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d005      	beq.n	800b300 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b2f4:	4b53      	ldr	r3, [pc, #332]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	4a52      	ldr	r2, [pc, #328]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b2fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b2fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b300:	4b50      	ldr	r3, [pc, #320]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	494d      	ldr	r1, [pc, #308]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d040      	beq.n	800b3a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d107      	bne.n	800b336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b326:	4b47      	ldr	r3, [pc, #284]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d115      	bne.n	800b35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e07f      	b.n	800b436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d107      	bne.n	800b34e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b33e:	4b41      	ldr	r3, [pc, #260]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d109      	bne.n	800b35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e073      	b.n	800b436 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b34e:	4b3d      	ldr	r3, [pc, #244]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e06b      	b.n	800b436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b35e:	4b39      	ldr	r3, [pc, #228]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	f023 0203 	bic.w	r2, r3, #3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	4936      	ldr	r1, [pc, #216]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b370:	f7fd fcc0 	bl	8008cf4 <HAL_GetTick>
 800b374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b376:	e00a      	b.n	800b38e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b378:	f7fd fcbc 	bl	8008cf4 <HAL_GetTick>
 800b37c:	4602      	mov	r2, r0
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	f241 3288 	movw	r2, #5000	; 0x1388
 800b386:	4293      	cmp	r3, r2
 800b388:	d901      	bls.n	800b38e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e053      	b.n	800b436 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b38e:	4b2d      	ldr	r3, [pc, #180]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f003 020c 	and.w	r2, r3, #12
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d1eb      	bne.n	800b378 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b3a0:	4b27      	ldr	r3, [pc, #156]	; (800b440 <HAL_RCC_ClockConfig+0x1c0>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0307 	and.w	r3, r3, #7
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d210      	bcs.n	800b3d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ae:	4b24      	ldr	r3, [pc, #144]	; (800b440 <HAL_RCC_ClockConfig+0x1c0>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f023 0207 	bic.w	r2, r3, #7
 800b3b6:	4922      	ldr	r1, [pc, #136]	; (800b440 <HAL_RCC_ClockConfig+0x1c0>)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3be:	4b20      	ldr	r3, [pc, #128]	; (800b440 <HAL_RCC_ClockConfig+0x1c0>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0307 	and.w	r3, r3, #7
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d001      	beq.n	800b3d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e032      	b.n	800b436 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d008      	beq.n	800b3ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3dc:	4b19      	ldr	r3, [pc, #100]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	4916      	ldr	r1, [pc, #88]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 0308 	and.w	r3, r3, #8
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d009      	beq.n	800b40e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b3fa:	4b12      	ldr	r3, [pc, #72]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	490e      	ldr	r1, [pc, #56]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b40e:	f000 f821 	bl	800b454 <HAL_RCC_GetSysClockFreq>
 800b412:	4602      	mov	r2, r0
 800b414:	4b0b      	ldr	r3, [pc, #44]	; (800b444 <HAL_RCC_ClockConfig+0x1c4>)
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	091b      	lsrs	r3, r3, #4
 800b41a:	f003 030f 	and.w	r3, r3, #15
 800b41e:	490a      	ldr	r1, [pc, #40]	; (800b448 <HAL_RCC_ClockConfig+0x1c8>)
 800b420:	5ccb      	ldrb	r3, [r1, r3]
 800b422:	fa22 f303 	lsr.w	r3, r2, r3
 800b426:	4a09      	ldr	r2, [pc, #36]	; (800b44c <HAL_RCC_ClockConfig+0x1cc>)
 800b428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b42a:	4b09      	ldr	r3, [pc, #36]	; (800b450 <HAL_RCC_ClockConfig+0x1d0>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fd fc1e 	bl	8008c70 <HAL_InitTick>

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	40022000 	.word	0x40022000
 800b444:	40021000 	.word	0x40021000
 800b448:	0800d8c4 	.word	0x0800d8c4
 800b44c:	200009b8 	.word	0x200009b8
 800b450:	200009bc 	.word	0x200009bc

0800b454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	2300      	movs	r3, #0
 800b460:	60bb      	str	r3, [r7, #8]
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	2300      	movs	r3, #0
 800b468:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b46a:	2300      	movs	r3, #0
 800b46c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b46e:	4b1e      	ldr	r3, [pc, #120]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f003 030c 	and.w	r3, r3, #12
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	d002      	beq.n	800b484 <HAL_RCC_GetSysClockFreq+0x30>
 800b47e:	2b08      	cmp	r3, #8
 800b480:	d003      	beq.n	800b48a <HAL_RCC_GetSysClockFreq+0x36>
 800b482:	e027      	b.n	800b4d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b484:	4b19      	ldr	r3, [pc, #100]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x98>)
 800b486:	613b      	str	r3, [r7, #16]
      break;
 800b488:	e027      	b.n	800b4da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	0c9b      	lsrs	r3, r3, #18
 800b48e:	f003 030f 	and.w	r3, r3, #15
 800b492:	4a17      	ldr	r2, [pc, #92]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b494:	5cd3      	ldrb	r3, [r2, r3]
 800b496:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d010      	beq.n	800b4c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b4a2:	4b11      	ldr	r3, [pc, #68]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	0c5b      	lsrs	r3, r3, #17
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	4a11      	ldr	r2, [pc, #68]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b4ae:	5cd3      	ldrb	r3, [r2, r3]
 800b4b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a0d      	ldr	r2, [pc, #52]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x98>)
 800b4b6:	fb03 f202 	mul.w	r2, r3, r2
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c0:	617b      	str	r3, [r7, #20]
 800b4c2:	e004      	b.n	800b4ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a0c      	ldr	r2, [pc, #48]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b4c8:	fb02 f303 	mul.w	r3, r2, r3
 800b4cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	613b      	str	r3, [r7, #16]
      break;
 800b4d2:	e002      	b.n	800b4da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b4d4:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x98>)
 800b4d6:	613b      	str	r3, [r7, #16]
      break;
 800b4d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4da:	693b      	ldr	r3, [r7, #16]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	371c      	adds	r7, #28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bc80      	pop	{r7}
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	40021000 	.word	0x40021000
 800b4ec:	007a1200 	.word	0x007a1200
 800b4f0:	0800d8dc 	.word	0x0800d8dc
 800b4f4:	0800d8ec 	.word	0x0800d8ec
 800b4f8:	003d0900 	.word	0x003d0900

0800b4fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b500:	4b02      	ldr	r3, [pc, #8]	; (800b50c <HAL_RCC_GetHCLKFreq+0x10>)
 800b502:	681b      	ldr	r3, [r3, #0]
}
 800b504:	4618      	mov	r0, r3
 800b506:	46bd      	mov	sp, r7
 800b508:	bc80      	pop	{r7}
 800b50a:	4770      	bx	lr
 800b50c:	200009b8 	.word	0x200009b8

0800b510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b514:	f7ff fff2 	bl	800b4fc <HAL_RCC_GetHCLKFreq>
 800b518:	4602      	mov	r2, r0
 800b51a:	4b05      	ldr	r3, [pc, #20]	; (800b530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	0a1b      	lsrs	r3, r3, #8
 800b520:	f003 0307 	and.w	r3, r3, #7
 800b524:	4903      	ldr	r1, [pc, #12]	; (800b534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b526:	5ccb      	ldrb	r3, [r1, r3]
 800b528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	40021000 	.word	0x40021000
 800b534:	0800d8d4 	.word	0x0800d8d4

0800b538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b53c:	f7ff ffde 	bl	800b4fc <HAL_RCC_GetHCLKFreq>
 800b540:	4602      	mov	r2, r0
 800b542:	4b05      	ldr	r3, [pc, #20]	; (800b558 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	0adb      	lsrs	r3, r3, #11
 800b548:	f003 0307 	and.w	r3, r3, #7
 800b54c:	4903      	ldr	r1, [pc, #12]	; (800b55c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b54e:	5ccb      	ldrb	r3, [r1, r3]
 800b550:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b554:	4618      	mov	r0, r3
 800b556:	bd80      	pop	{r7, pc}
 800b558:	40021000 	.word	0x40021000
 800b55c:	0800d8d4 	.word	0x0800d8d4

0800b560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <RCC_Delay+0x34>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a0a      	ldr	r2, [pc, #40]	; (800b598 <RCC_Delay+0x38>)
 800b56e:	fba2 2303 	umull	r2, r3, r2, r3
 800b572:	0a5b      	lsrs	r3, r3, #9
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	fb02 f303 	mul.w	r3, r2, r3
 800b57a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b57c:	bf00      	nop
  }
  while (Delay --);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	1e5a      	subs	r2, r3, #1
 800b582:	60fa      	str	r2, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1f9      	bne.n	800b57c <RCC_Delay+0x1c>
}
 800b588:	bf00      	nop
 800b58a:	bf00      	nop
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	bc80      	pop	{r7}
 800b592:	4770      	bx	lr
 800b594:	200009b8 	.word	0x200009b8
 800b598:	10624dd3 	.word	0x10624dd3

0800b59c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e041      	b.n	800b632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d106      	bne.n	800b5c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7fd fa26 	bl	8008a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4610      	mov	r0, r2
 800b5dc:	f000 fa82 	bl	800bae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d001      	beq.n	800b654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e044      	b.n	800b6de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0201 	orr.w	r2, r2, #1
 800b66a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a1d      	ldr	r2, [pc, #116]	; (800b6e8 <HAL_TIM_Base_Start_IT+0xac>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d018      	beq.n	800b6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a1c      	ldr	r2, [pc, #112]	; (800b6ec <HAL_TIM_Base_Start_IT+0xb0>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d013      	beq.n	800b6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b688:	d00e      	beq.n	800b6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a18      	ldr	r2, [pc, #96]	; (800b6f0 <HAL_TIM_Base_Start_IT+0xb4>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d009      	beq.n	800b6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a16      	ldr	r2, [pc, #88]	; (800b6f4 <HAL_TIM_Base_Start_IT+0xb8>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d004      	beq.n	800b6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a15      	ldr	r2, [pc, #84]	; (800b6f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d111      	bne.n	800b6cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b06      	cmp	r3, #6
 800b6b8:	d010      	beq.n	800b6dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f042 0201 	orr.w	r2, r2, #1
 800b6c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ca:	e007      	b.n	800b6dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0201 	orr.w	r2, r2, #1
 800b6da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bc80      	pop	{r7}
 800b6e6:	4770      	bx	lr
 800b6e8:	40012c00 	.word	0x40012c00
 800b6ec:	40013400 	.word	0x40013400
 800b6f0:	40000400 	.word	0x40000400
 800b6f4:	40000800 	.word	0x40000800
 800b6f8:	40000c00 	.word	0x40000c00

0800b6fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	f003 0302 	and.w	r3, r3, #2
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d122      	bne.n	800b758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d11b      	bne.n	800b758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f06f 0202 	mvn.w	r2, #2
 800b728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f9b4 	bl	800baac <HAL_TIM_IC_CaptureCallback>
 800b744:	e005      	b.n	800b752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f9a7 	bl	800ba9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f9b6 	bl	800babe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	f003 0304 	and.w	r3, r3, #4
 800b762:	2b04      	cmp	r3, #4
 800b764:	d122      	bne.n	800b7ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	f003 0304 	and.w	r3, r3, #4
 800b770:	2b04      	cmp	r3, #4
 800b772:	d11b      	bne.n	800b7ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f06f 0204 	mvn.w	r2, #4
 800b77c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2202      	movs	r2, #2
 800b782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d003      	beq.n	800b79a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f98a 	bl	800baac <HAL_TIM_IC_CaptureCallback>
 800b798:	e005      	b.n	800b7a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f97d 	bl	800ba9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f98c 	bl	800babe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	f003 0308 	and.w	r3, r3, #8
 800b7b6:	2b08      	cmp	r3, #8
 800b7b8:	d122      	bne.n	800b800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	f003 0308 	and.w	r3, r3, #8
 800b7c4:	2b08      	cmp	r3, #8
 800b7c6:	d11b      	bne.n	800b800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f06f 0208 	mvn.w	r2, #8
 800b7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2204      	movs	r2, #4
 800b7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	f003 0303 	and.w	r3, r3, #3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f960 	bl	800baac <HAL_TIM_IC_CaptureCallback>
 800b7ec:	e005      	b.n	800b7fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f953 	bl	800ba9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f962 	bl	800babe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	f003 0310 	and.w	r3, r3, #16
 800b80a:	2b10      	cmp	r3, #16
 800b80c:	d122      	bne.n	800b854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	f003 0310 	and.w	r3, r3, #16
 800b818:	2b10      	cmp	r3, #16
 800b81a:	d11b      	bne.n	800b854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f06f 0210 	mvn.w	r2, #16
 800b824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2208      	movs	r2, #8
 800b82a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 f936 	bl	800baac <HAL_TIM_IC_CaptureCallback>
 800b840:	e005      	b.n	800b84e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f929 	bl	800ba9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f938 	bl	800babe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d10e      	bne.n	800b880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d107      	bne.n	800b880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f06f 0201 	mvn.w	r2, #1
 800b878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7fc fd56 	bl	800832c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b88a:	2b80      	cmp	r3, #128	; 0x80
 800b88c:	d10e      	bne.n	800b8ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b898:	2b80      	cmp	r3, #128	; 0x80
 800b89a:	d107      	bne.n	800b8ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b8a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 faa1 	bl	800bdee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b6:	2b40      	cmp	r3, #64	; 0x40
 800b8b8:	d10e      	bne.n	800b8d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c4:	2b40      	cmp	r3, #64	; 0x40
 800b8c6:	d107      	bne.n	800b8d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f8fc 	bl	800bad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	f003 0320 	and.w	r3, r3, #32
 800b8e2:	2b20      	cmp	r3, #32
 800b8e4:	d10e      	bne.n	800b904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	f003 0320 	and.w	r3, r3, #32
 800b8f0:	2b20      	cmp	r3, #32
 800b8f2:	d107      	bne.n	800b904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f06f 0220 	mvn.w	r2, #32
 800b8fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fa6c 	bl	800bddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b904:	bf00      	nop
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b920:	2b01      	cmp	r3, #1
 800b922:	d101      	bne.n	800b928 <HAL_TIM_ConfigClockSource+0x1c>
 800b924:	2302      	movs	r3, #2
 800b926:	e0b4      	b.n	800ba92 <HAL_TIM_ConfigClockSource+0x186>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2202      	movs	r2, #2
 800b934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b94e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b960:	d03e      	beq.n	800b9e0 <HAL_TIM_ConfigClockSource+0xd4>
 800b962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b966:	f200 8087 	bhi.w	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
 800b96a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b96e:	f000 8086 	beq.w	800ba7e <HAL_TIM_ConfigClockSource+0x172>
 800b972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b976:	d87f      	bhi.n	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
 800b978:	2b70      	cmp	r3, #112	; 0x70
 800b97a:	d01a      	beq.n	800b9b2 <HAL_TIM_ConfigClockSource+0xa6>
 800b97c:	2b70      	cmp	r3, #112	; 0x70
 800b97e:	d87b      	bhi.n	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
 800b980:	2b60      	cmp	r3, #96	; 0x60
 800b982:	d050      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x11a>
 800b984:	2b60      	cmp	r3, #96	; 0x60
 800b986:	d877      	bhi.n	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
 800b988:	2b50      	cmp	r3, #80	; 0x50
 800b98a:	d03c      	beq.n	800ba06 <HAL_TIM_ConfigClockSource+0xfa>
 800b98c:	2b50      	cmp	r3, #80	; 0x50
 800b98e:	d873      	bhi.n	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
 800b990:	2b40      	cmp	r3, #64	; 0x40
 800b992:	d058      	beq.n	800ba46 <HAL_TIM_ConfigClockSource+0x13a>
 800b994:	2b40      	cmp	r3, #64	; 0x40
 800b996:	d86f      	bhi.n	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
 800b998:	2b30      	cmp	r3, #48	; 0x30
 800b99a:	d064      	beq.n	800ba66 <HAL_TIM_ConfigClockSource+0x15a>
 800b99c:	2b30      	cmp	r3, #48	; 0x30
 800b99e:	d86b      	bhi.n	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
 800b9a0:	2b20      	cmp	r3, #32
 800b9a2:	d060      	beq.n	800ba66 <HAL_TIM_ConfigClockSource+0x15a>
 800b9a4:	2b20      	cmp	r3, #32
 800b9a6:	d867      	bhi.n	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d05c      	beq.n	800ba66 <HAL_TIM_ConfigClockSource+0x15a>
 800b9ac:	2b10      	cmp	r3, #16
 800b9ae:	d05a      	beq.n	800ba66 <HAL_TIM_ConfigClockSource+0x15a>
 800b9b0:	e062      	b.n	800ba78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9c2:	f000 f980 	bl	800bcc6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b9d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	609a      	str	r2, [r3, #8]
      break;
 800b9de:	e04f      	b.n	800ba80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9f0:	f000 f969 	bl	800bcc6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	689a      	ldr	r2, [r3, #8]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba02:	609a      	str	r2, [r3, #8]
      break;
 800ba04:	e03c      	b.n	800ba80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba12:	461a      	mov	r2, r3
 800ba14:	f000 f8e0 	bl	800bbd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2150      	movs	r1, #80	; 0x50
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f000 f937 	bl	800bc92 <TIM_ITRx_SetConfig>
      break;
 800ba24:	e02c      	b.n	800ba80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba32:	461a      	mov	r2, r3
 800ba34:	f000 f8fe 	bl	800bc34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2160      	movs	r1, #96	; 0x60
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f927 	bl	800bc92 <TIM_ITRx_SetConfig>
      break;
 800ba44:	e01c      	b.n	800ba80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba52:	461a      	mov	r2, r3
 800ba54:	f000 f8c0 	bl	800bbd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2140      	movs	r1, #64	; 0x40
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 f917 	bl	800bc92 <TIM_ITRx_SetConfig>
      break;
 800ba64:	e00c      	b.n	800ba80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4610      	mov	r0, r2
 800ba72:	f000 f90e 	bl	800bc92 <TIM_ITRx_SetConfig>
      break;
 800ba76:	e003      	b.n	800ba80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba7c:	e000      	b.n	800ba80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800baa2:	bf00      	nop
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bc80      	pop	{r7}
 800baaa:	4770      	bx	lr

0800baac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	bc80      	pop	{r7}
 800babc:	4770      	bx	lr

0800babe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	bc80      	pop	{r7}
 800bace:	4770      	bx	lr

0800bad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	bc80      	pop	{r7}
 800bae0:	4770      	bx	lr
	...

0800bae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a33      	ldr	r2, [pc, #204]	; (800bbc4 <TIM_Base_SetConfig+0xe0>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d013      	beq.n	800bb24 <TIM_Base_SetConfig+0x40>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a32      	ldr	r2, [pc, #200]	; (800bbc8 <TIM_Base_SetConfig+0xe4>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d00f      	beq.n	800bb24 <TIM_Base_SetConfig+0x40>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0a:	d00b      	beq.n	800bb24 <TIM_Base_SetConfig+0x40>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a2f      	ldr	r2, [pc, #188]	; (800bbcc <TIM_Base_SetConfig+0xe8>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d007      	beq.n	800bb24 <TIM_Base_SetConfig+0x40>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a2e      	ldr	r2, [pc, #184]	; (800bbd0 <TIM_Base_SetConfig+0xec>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d003      	beq.n	800bb24 <TIM_Base_SetConfig+0x40>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a2d      	ldr	r2, [pc, #180]	; (800bbd4 <TIM_Base_SetConfig+0xf0>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d108      	bne.n	800bb36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a22      	ldr	r2, [pc, #136]	; (800bbc4 <TIM_Base_SetConfig+0xe0>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d013      	beq.n	800bb66 <TIM_Base_SetConfig+0x82>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a21      	ldr	r2, [pc, #132]	; (800bbc8 <TIM_Base_SetConfig+0xe4>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d00f      	beq.n	800bb66 <TIM_Base_SetConfig+0x82>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb4c:	d00b      	beq.n	800bb66 <TIM_Base_SetConfig+0x82>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a1e      	ldr	r2, [pc, #120]	; (800bbcc <TIM_Base_SetConfig+0xe8>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d007      	beq.n	800bb66 <TIM_Base_SetConfig+0x82>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a1d      	ldr	r2, [pc, #116]	; (800bbd0 <TIM_Base_SetConfig+0xec>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d003      	beq.n	800bb66 <TIM_Base_SetConfig+0x82>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a1c      	ldr	r2, [pc, #112]	; (800bbd4 <TIM_Base_SetConfig+0xf0>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d108      	bne.n	800bb78 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	689a      	ldr	r2, [r3, #8]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a09      	ldr	r2, [pc, #36]	; (800bbc4 <TIM_Base_SetConfig+0xe0>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d003      	beq.n	800bbac <TIM_Base_SetConfig+0xc8>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a08      	ldr	r2, [pc, #32]	; (800bbc8 <TIM_Base_SetConfig+0xe4>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d103      	bne.n	800bbb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	615a      	str	r2, [r3, #20]
}
 800bbba:	bf00      	nop
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bc80      	pop	{r7}
 800bbc2:	4770      	bx	lr
 800bbc4:	40012c00 	.word	0x40012c00
 800bbc8:	40013400 	.word	0x40013400
 800bbcc:	40000400 	.word	0x40000400
 800bbd0:	40000800 	.word	0x40000800
 800bbd4:	40000c00 	.word	0x40000c00

0800bbd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	f023 0201 	bic.w	r2, r3, #1
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f023 030a 	bic.w	r3, r3, #10
 800bc14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	621a      	str	r2, [r3, #32]
}
 800bc2a:	bf00      	nop
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bc80      	pop	{r7}
 800bc32:	4770      	bx	lr

0800bc34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b087      	sub	sp, #28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6a1b      	ldr	r3, [r3, #32]
 800bc44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	f023 0210 	bic.w	r2, r3, #16
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	031b      	lsls	r3, r3, #12
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	011b      	lsls	r3, r3, #4
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	621a      	str	r2, [r3, #32]
}
 800bc88:	bf00      	nop
 800bc8a:	371c      	adds	r7, #28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bc80      	pop	{r7}
 800bc90:	4770      	bx	lr

0800bc92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	f043 0307 	orr.w	r3, r3, #7
 800bcb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	609a      	str	r2, [r3, #8]
}
 800bcbc:	bf00      	nop
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bc80      	pop	{r7}
 800bcc4:	4770      	bx	lr

0800bcc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b087      	sub	sp, #28
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	607a      	str	r2, [r7, #4]
 800bcd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bce0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	021a      	lsls	r2, r3, #8
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	431a      	orrs	r2, r3
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	609a      	str	r2, [r3, #8]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bc80      	pop	{r7}
 800bd02:	4770      	bx	lr

0800bd04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d101      	bne.n	800bd1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd18:	2302      	movs	r3, #2
 800bd1a:	e050      	b.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2202      	movs	r2, #2
 800bd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a1b      	ldr	r2, [pc, #108]	; (800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d018      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a19      	ldr	r2, [pc, #100]	; (800bdcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d013      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd72:	d00e      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a15      	ldr	r2, [pc, #84]	; (800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d009      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a14      	ldr	r2, [pc, #80]	; (800bdd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d004      	beq.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a12      	ldr	r2, [pc, #72]	; (800bdd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d10c      	bne.n	800bdac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bc80      	pop	{r7}
 800bdc6:	4770      	bx	lr
 800bdc8:	40012c00 	.word	0x40012c00
 800bdcc:	40013400 	.word	0x40013400
 800bdd0:	40000400 	.word	0x40000400
 800bdd4:	40000800 	.word	0x40000800
 800bdd8:	40000c00 	.word	0x40000c00

0800bddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bc80      	pop	{r7}
 800bdec:	4770      	bx	lr

0800bdee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b083      	sub	sp, #12
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdf6:	bf00      	nop
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bc80      	pop	{r7}
 800bdfe:	4770      	bx	lr

0800be00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	e042      	b.n	800be98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d106      	bne.n	800be2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f7fc fe1a 	bl	8008a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2224      	movs	r2, #36	; 0x24
 800be30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	68da      	ldr	r2, [r3, #12]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fc7f 	bl	800c748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	691a      	ldr	r2, [r3, #16]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	695a      	ldr	r2, [r3, #20]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68da      	ldr	r2, [r3, #12]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2220      	movs	r2, #32
 800be8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b0ba      	sub	sp, #232	; 0xe8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800becc:	2300      	movs	r3, #0
 800bece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed6:	f003 030f 	and.w	r3, r3, #15
 800beda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10f      	bne.n	800bf06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beea:	f003 0320 	and.w	r3, r3, #32
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d009      	beq.n	800bf06 <HAL_UART_IRQHandler+0x66>
 800bef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bef6:	f003 0320 	and.w	r3, r3, #32
 800befa:	2b00      	cmp	r3, #0
 800befc:	d003      	beq.n	800bf06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fb63 	bl	800c5ca <UART_Receive_IT>
      return;
 800bf04:	e25b      	b.n	800c3be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bf06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 80de 	beq.w	800c0cc <HAL_UART_IRQHandler+0x22c>
 800bf10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d106      	bne.n	800bf2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 80d1 	beq.w	800c0cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00b      	beq.n	800bf4e <HAL_UART_IRQHandler+0xae>
 800bf36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d005      	beq.n	800bf4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf46:	f043 0201 	orr.w	r2, r3, #1
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf52:	f003 0304 	and.w	r3, r3, #4
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00b      	beq.n	800bf72 <HAL_UART_IRQHandler+0xd2>
 800bf5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d005      	beq.n	800bf72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6a:	f043 0202 	orr.w	r2, r3, #2
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf76:	f003 0302 	and.w	r3, r3, #2
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00b      	beq.n	800bf96 <HAL_UART_IRQHandler+0xf6>
 800bf7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d005      	beq.n	800bf96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8e:	f043 0204 	orr.w	r2, r3, #4
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9a:	f003 0308 	and.w	r3, r3, #8
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d011      	beq.n	800bfc6 <HAL_UART_IRQHandler+0x126>
 800bfa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d105      	bne.n	800bfba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bfae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d005      	beq.n	800bfc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfbe:	f043 0208 	orr.w	r2, r3, #8
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 81f2 	beq.w	800c3b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bfd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd4:	f003 0320 	and.w	r3, r3, #32
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d008      	beq.n	800bfee <HAL_UART_IRQHandler+0x14e>
 800bfdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfe0:	f003 0320 	and.w	r3, r3, #32
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 faee 	bl	800c5ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	695b      	ldr	r3, [r3, #20]
 800bff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bf14      	ite	ne
 800bffc:	2301      	movne	r3, #1
 800bffe:	2300      	moveq	r3, #0
 800c000:	b2db      	uxtb	r3, r3
 800c002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c00a:	f003 0308 	and.w	r3, r3, #8
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d103      	bne.n	800c01a <HAL_UART_IRQHandler+0x17a>
 800c012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c016:	2b00      	cmp	r3, #0
 800c018:	d04f      	beq.n	800c0ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f9f8 	bl	800c410 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d041      	beq.n	800c0b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3314      	adds	r3, #20
 800c034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c03c:	e853 3f00 	ldrex	r3, [r3]
 800c040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c04c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3314      	adds	r3, #20
 800c056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c05a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c05e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c06a:	e841 2300 	strex	r3, r2, [r1]
 800c06e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1d9      	bne.n	800c02e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d013      	beq.n	800c0aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c086:	4a7e      	ldr	r2, [pc, #504]	; (800c280 <HAL_UART_IRQHandler+0x3e0>)
 800c088:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fd f8a2 	bl	80091d8 <HAL_DMA_Abort_IT>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d016      	beq.n	800c0c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0a8:	e00e      	b.n	800c0c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f99c 	bl	800c3e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0b0:	e00a      	b.n	800c0c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f998 	bl	800c3e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0b8:	e006      	b.n	800c0c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f994 	bl	800c3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c0c6:	e175      	b.n	800c3b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0c8:	bf00      	nop
    return;
 800c0ca:	e173      	b.n	800c3b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	f040 814f 	bne.w	800c374 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0da:	f003 0310 	and.w	r3, r3, #16
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8148 	beq.w	800c374 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0e8:	f003 0310 	and.w	r3, r3, #16
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f000 8141 	beq.w	800c374 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60bb      	str	r3, [r7, #8]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	60bb      	str	r3, [r7, #8]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	60bb      	str	r3, [r7, #8]
 800c106:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c112:	2b00      	cmp	r3, #0
 800c114:	f000 80b6 	beq.w	800c284 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c124:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 8145 	beq.w	800c3b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c136:	429a      	cmp	r2, r3
 800c138:	f080 813e 	bcs.w	800c3b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c142:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	2b20      	cmp	r3, #32
 800c14c:	f000 8088 	beq.w	800c260 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	330c      	adds	r3, #12
 800c156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c16a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c16e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	330c      	adds	r3, #12
 800c178:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c17c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c180:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c184:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c188:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c18c:	e841 2300 	strex	r3, r2, [r1]
 800c190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1d9      	bne.n	800c150 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3314      	adds	r3, #20
 800c1a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1a6:	e853 3f00 	ldrex	r3, [r3]
 800c1aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c1ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1ae:	f023 0301 	bic.w	r3, r3, #1
 800c1b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3314      	adds	r3, #20
 800c1bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c1c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c1c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c1c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1cc:	e841 2300 	strex	r3, r2, [r1]
 800c1d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c1d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1e1      	bne.n	800c19c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3314      	adds	r3, #20
 800c1de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1e2:	e853 3f00 	ldrex	r3, [r3]
 800c1e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c1e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3314      	adds	r3, #20
 800c1f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c1fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c200:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c202:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c204:	e841 2300 	strex	r3, r2, [r1]
 800c208:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c20a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e3      	bne.n	800c1d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2220      	movs	r2, #32
 800c214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	330c      	adds	r3, #12
 800c224:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c230:	f023 0310 	bic.w	r3, r3, #16
 800c234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	330c      	adds	r3, #12
 800c23e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c242:	65ba      	str	r2, [r7, #88]	; 0x58
 800c244:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c246:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c248:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e3      	bne.n	800c21e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fc ff81 	bl	8009162 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2202      	movs	r2, #2
 800c264:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c26e:	b29b      	uxth	r3, r3
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	b29b      	uxth	r3, r3
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f8bf 	bl	800c3fa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c27c:	e09c      	b.n	800c3b8 <HAL_UART_IRQHandler+0x518>
 800c27e:	bf00      	nop
 800c280:	0800c4d5 	.word	0x0800c4d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c298:	b29b      	uxth	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f000 808e 	beq.w	800c3bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c2a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 8089 	beq.w	800c3bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	330c      	adds	r3, #12
 800c2b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	e853 3f00 	ldrex	r3, [r3]
 800c2b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	330c      	adds	r3, #12
 800c2ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c2ce:	647a      	str	r2, [r7, #68]	; 0x44
 800c2d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e3      	bne.n	800c2aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3314      	adds	r3, #20
 800c2e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	623b      	str	r3, [r7, #32]
   return(result);
 800c2f2:	6a3b      	ldr	r3, [r7, #32]
 800c2f4:	f023 0301 	bic.w	r3, r3, #1
 800c2f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3314      	adds	r3, #20
 800c302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c306:	633a      	str	r2, [r7, #48]	; 0x30
 800c308:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c30e:	e841 2300 	strex	r3, r2, [r1]
 800c312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1e3      	bne.n	800c2e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2220      	movs	r2, #32
 800c31e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	330c      	adds	r3, #12
 800c32e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	e853 3f00 	ldrex	r3, [r3]
 800c336:	60fb      	str	r3, [r7, #12]
   return(result);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f023 0310 	bic.w	r3, r3, #16
 800c33e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	330c      	adds	r3, #12
 800c348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c34c:	61fa      	str	r2, [r7, #28]
 800c34e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c350:	69b9      	ldr	r1, [r7, #24]
 800c352:	69fa      	ldr	r2, [r7, #28]
 800c354:	e841 2300 	strex	r3, r2, [r1]
 800c358:	617b      	str	r3, [r7, #20]
   return(result);
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e3      	bne.n	800c328 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2202      	movs	r2, #2
 800c364:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c36a:	4619      	mov	r1, r3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f844 	bl	800c3fa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c372:	e023      	b.n	800c3bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <HAL_UART_IRQHandler+0x4f4>
 800c380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d003      	beq.n	800c394 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f8b5 	bl	800c4fc <UART_Transmit_IT>
    return;
 800c392:	e014      	b.n	800c3be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00e      	beq.n	800c3be <HAL_UART_IRQHandler+0x51e>
 800c3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d008      	beq.n	800c3be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f8f4 	bl	800c59a <UART_EndTransmit_IT>
    return;
 800c3b2:	e004      	b.n	800c3be <HAL_UART_IRQHandler+0x51e>
    return;
 800c3b4:	bf00      	nop
 800c3b6:	e002      	b.n	800c3be <HAL_UART_IRQHandler+0x51e>
      return;
 800c3b8:	bf00      	nop
 800c3ba:	e000      	b.n	800c3be <HAL_UART_IRQHandler+0x51e>
      return;
 800c3bc:	bf00      	nop
  }
}
 800c3be:	37e8      	adds	r7, #232	; 0xe8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c3cc:	bf00      	nop
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bc80      	pop	{r7}
 800c3d4:	4770      	bx	lr

0800c3d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b083      	sub	sp, #12
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c3de:	bf00      	nop
 800c3e0:	370c      	adds	r7, #12
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bc80      	pop	{r7}
 800c3e6:	4770      	bx	lr

0800c3e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bc80      	pop	{r7}
 800c3f8:	4770      	bx	lr

0800c3fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b083      	sub	sp, #12
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c406:	bf00      	nop
 800c408:	370c      	adds	r7, #12
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bc80      	pop	{r7}
 800c40e:	4770      	bx	lr

0800c410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c410:	b480      	push	{r7}
 800c412:	b095      	sub	sp, #84	; 0x54
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	330c      	adds	r3, #12
 800c41e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c42e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	330c      	adds	r3, #12
 800c436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c438:	643a      	str	r2, [r7, #64]	; 0x40
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c43e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e5      	bne.n	800c418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3314      	adds	r3, #20
 800c452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	e853 3f00 	ldrex	r3, [r3]
 800c45a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	f023 0301 	bic.w	r3, r3, #1
 800c462:	64bb      	str	r3, [r7, #72]	; 0x48
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3314      	adds	r3, #20
 800c46a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c46c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c46e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c474:	e841 2300 	strex	r3, r2, [r1]
 800c478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1e5      	bne.n	800c44c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c484:	2b01      	cmp	r3, #1
 800c486:	d119      	bne.n	800c4bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	330c      	adds	r3, #12
 800c48e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	e853 3f00 	ldrex	r3, [r3]
 800c496:	60bb      	str	r3, [r7, #8]
   return(result);
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	f023 0310 	bic.w	r3, r3, #16
 800c49e:	647b      	str	r3, [r7, #68]	; 0x44
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	330c      	adds	r3, #12
 800c4a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4a8:	61ba      	str	r2, [r7, #24]
 800c4aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ac:	6979      	ldr	r1, [r7, #20]
 800c4ae:	69ba      	ldr	r2, [r7, #24]
 800c4b0:	e841 2300 	strex	r3, r2, [r1]
 800c4b4:	613b      	str	r3, [r7, #16]
   return(result);
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1e5      	bne.n	800c488 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2220      	movs	r2, #32
 800c4c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c4ca:	bf00      	nop
 800c4cc:	3754      	adds	r7, #84	; 0x54
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bc80      	pop	{r7}
 800c4d2:	4770      	bx	lr

0800c4d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f7ff ff7a 	bl	800c3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4f4:	bf00      	nop
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b21      	cmp	r3, #33	; 0x21
 800c50e:	d13e      	bne.n	800c58e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c518:	d114      	bne.n	800c544 <UART_Transmit_IT+0x48>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d110      	bne.n	800c544 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	461a      	mov	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c536:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	1c9a      	adds	r2, r3, #2
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	621a      	str	r2, [r3, #32]
 800c542:	e008      	b.n	800c556 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	1c59      	adds	r1, r3, #1
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	6211      	str	r1, [r2, #32]
 800c54e:	781a      	ldrb	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	3b01      	subs	r3, #1
 800c55e:	b29b      	uxth	r3, r3
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	4619      	mov	r1, r3
 800c564:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10f      	bne.n	800c58a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68da      	ldr	r2, [r3, #12]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c578:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68da      	ldr	r2, [r3, #12]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c588:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	e000      	b.n	800c590 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c58e:	2302      	movs	r3, #2
  }
}
 800c590:	4618      	mov	r0, r3
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	bc80      	pop	{r7}
 800c598:	4770      	bx	lr

0800c59a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2220      	movs	r2, #32
 800c5b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff ff02 	bl	800c3c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b08c      	sub	sp, #48	; 0x30
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b22      	cmp	r3, #34	; 0x22
 800c5dc:	f040 80ae 	bne.w	800c73c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5e8:	d117      	bne.n	800c61a <UART_Receive_IT+0x50>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d113      	bne.n	800c61a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	b29b      	uxth	r3, r3
 800c604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c608:	b29a      	uxth	r2, r3
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c612:	1c9a      	adds	r2, r3, #2
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
 800c618:	e026      	b.n	800c668 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c62c:	d007      	beq.n	800c63e <UART_Receive_IT+0x74>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10a      	bne.n	800c64c <UART_Receive_IT+0x82>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d106      	bne.n	800c64c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	b2da      	uxtb	r2, r3
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	701a      	strb	r2, [r3, #0]
 800c64a:	e008      	b.n	800c65e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	3b01      	subs	r3, #1
 800c670:	b29b      	uxth	r3, r3
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	4619      	mov	r1, r3
 800c676:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d15d      	bne.n	800c738 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68da      	ldr	r2, [r3, #12]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f022 0220 	bic.w	r2, r2, #32
 800c68a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68da      	ldr	r2, [r3, #12]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c69a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	695a      	ldr	r2, [r3, #20]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f022 0201 	bic.w	r2, r2, #1
 800c6aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d135      	bne.n	800c72e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	330c      	adds	r3, #12
 800c6ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	e853 3f00 	ldrex	r3, [r3]
 800c6d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	f023 0310 	bic.w	r3, r3, #16
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	330c      	adds	r3, #12
 800c6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e8:	623a      	str	r2, [r7, #32]
 800c6ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ec:	69f9      	ldr	r1, [r7, #28]
 800c6ee:	6a3a      	ldr	r2, [r7, #32]
 800c6f0:	e841 2300 	strex	r3, r2, [r1]
 800c6f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1e5      	bne.n	800c6c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 0310 	and.w	r3, r3, #16
 800c706:	2b10      	cmp	r3, #16
 800c708:	d10a      	bne.n	800c720 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c70a:	2300      	movs	r3, #0
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	60fb      	str	r3, [r7, #12]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	60fb      	str	r3, [r7, #12]
 800c71e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7ff fe67 	bl	800c3fa <HAL_UARTEx_RxEventCallback>
 800c72c:	e002      	b.n	800c734 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff fe51 	bl	800c3d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	e002      	b.n	800c73e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	e000      	b.n	800c73e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c73c:	2302      	movs	r3, #2
  }
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3730      	adds	r7, #48	; 0x30
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
	...

0800c748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68da      	ldr	r2, [r3, #12]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	689a      	ldr	r2, [r3, #8]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	695b      	ldr	r3, [r3, #20]
 800c774:	4313      	orrs	r3, r2
 800c776:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c782:	f023 030c 	bic.w	r3, r3, #12
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6812      	ldr	r2, [r2, #0]
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	430b      	orrs	r3, r1
 800c78e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	699a      	ldr	r2, [r3, #24]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a2c      	ldr	r2, [pc, #176]	; (800c85c <UART_SetConfig+0x114>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d103      	bne.n	800c7b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c7b0:	f7fe fec2 	bl	800b538 <HAL_RCC_GetPCLK2Freq>
 800c7b4:	60f8      	str	r0, [r7, #12]
 800c7b6:	e002      	b.n	800c7be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c7b8:	f7fe feaa 	bl	800b510 <HAL_RCC_GetPCLK1Freq>
 800c7bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	009a      	lsls	r2, r3, #2
 800c7c8:	441a      	add	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d4:	4a22      	ldr	r2, [pc, #136]	; (800c860 <UART_SetConfig+0x118>)
 800c7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7da:	095b      	lsrs	r3, r3, #5
 800c7dc:	0119      	lsls	r1, r3, #4
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	009a      	lsls	r2, r3, #2
 800c7e8:	441a      	add	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c7f4:	4b1a      	ldr	r3, [pc, #104]	; (800c860 <UART_SetConfig+0x118>)
 800c7f6:	fba3 0302 	umull	r0, r3, r3, r2
 800c7fa:	095b      	lsrs	r3, r3, #5
 800c7fc:	2064      	movs	r0, #100	; 0x64
 800c7fe:	fb00 f303 	mul.w	r3, r0, r3
 800c802:	1ad3      	subs	r3, r2, r3
 800c804:	011b      	lsls	r3, r3, #4
 800c806:	3332      	adds	r3, #50	; 0x32
 800c808:	4a15      	ldr	r2, [pc, #84]	; (800c860 <UART_SetConfig+0x118>)
 800c80a:	fba2 2303 	umull	r2, r3, r2, r3
 800c80e:	095b      	lsrs	r3, r3, #5
 800c810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c814:	4419      	add	r1, r3
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	4613      	mov	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4413      	add	r3, r2
 800c81e:	009a      	lsls	r2, r3, #2
 800c820:	441a      	add	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	fbb2 f2f3 	udiv	r2, r2, r3
 800c82c:	4b0c      	ldr	r3, [pc, #48]	; (800c860 <UART_SetConfig+0x118>)
 800c82e:	fba3 0302 	umull	r0, r3, r3, r2
 800c832:	095b      	lsrs	r3, r3, #5
 800c834:	2064      	movs	r0, #100	; 0x64
 800c836:	fb00 f303 	mul.w	r3, r0, r3
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	011b      	lsls	r3, r3, #4
 800c83e:	3332      	adds	r3, #50	; 0x32
 800c840:	4a07      	ldr	r2, [pc, #28]	; (800c860 <UART_SetConfig+0x118>)
 800c842:	fba2 2303 	umull	r2, r3, r2, r3
 800c846:	095b      	lsrs	r3, r3, #5
 800c848:	f003 020f 	and.w	r2, r3, #15
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	440a      	add	r2, r1
 800c852:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c854:	bf00      	nop
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	40013800 	.word	0x40013800
 800c860:	51eb851f 	.word	0x51eb851f

0800c864 <__itoa>:
 800c864:	1e93      	subs	r3, r2, #2
 800c866:	2b22      	cmp	r3, #34	; 0x22
 800c868:	b510      	push	{r4, lr}
 800c86a:	460c      	mov	r4, r1
 800c86c:	d904      	bls.n	800c878 <__itoa+0x14>
 800c86e:	2300      	movs	r3, #0
 800c870:	461c      	mov	r4, r3
 800c872:	700b      	strb	r3, [r1, #0]
 800c874:	4620      	mov	r0, r4
 800c876:	bd10      	pop	{r4, pc}
 800c878:	2a0a      	cmp	r2, #10
 800c87a:	d109      	bne.n	800c890 <__itoa+0x2c>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	da07      	bge.n	800c890 <__itoa+0x2c>
 800c880:	232d      	movs	r3, #45	; 0x2d
 800c882:	700b      	strb	r3, [r1, #0]
 800c884:	2101      	movs	r1, #1
 800c886:	4240      	negs	r0, r0
 800c888:	4421      	add	r1, r4
 800c88a:	f000 f8b9 	bl	800ca00 <__utoa>
 800c88e:	e7f1      	b.n	800c874 <__itoa+0x10>
 800c890:	2100      	movs	r1, #0
 800c892:	e7f9      	b.n	800c888 <__itoa+0x24>

0800c894 <itoa>:
 800c894:	f7ff bfe6 	b.w	800c864 <__itoa>

0800c898 <malloc>:
 800c898:	4b02      	ldr	r3, [pc, #8]	; (800c8a4 <malloc+0xc>)
 800c89a:	4601      	mov	r1, r0
 800c89c:	6818      	ldr	r0, [r3, #0]
 800c89e:	f000 b823 	b.w	800c8e8 <_malloc_r>
 800c8a2:	bf00      	nop
 800c8a4:	20000a10 	.word	0x20000a10

0800c8a8 <sbrk_aligned>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	4e0e      	ldr	r6, [pc, #56]	; (800c8e4 <sbrk_aligned+0x3c>)
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	6831      	ldr	r1, [r6, #0]
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	b911      	cbnz	r1, 800c8ba <sbrk_aligned+0x12>
 800c8b4:	f000 f8ee 	bl	800ca94 <_sbrk_r>
 800c8b8:	6030      	str	r0, [r6, #0]
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	4628      	mov	r0, r5
 800c8be:	f000 f8e9 	bl	800ca94 <_sbrk_r>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d00a      	beq.n	800c8dc <sbrk_aligned+0x34>
 800c8c6:	1cc4      	adds	r4, r0, #3
 800c8c8:	f024 0403 	bic.w	r4, r4, #3
 800c8cc:	42a0      	cmp	r0, r4
 800c8ce:	d007      	beq.n	800c8e0 <sbrk_aligned+0x38>
 800c8d0:	1a21      	subs	r1, r4, r0
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f000 f8de 	bl	800ca94 <_sbrk_r>
 800c8d8:	3001      	adds	r0, #1
 800c8da:	d101      	bne.n	800c8e0 <sbrk_aligned+0x38>
 800c8dc:	f04f 34ff 	mov.w	r4, #4294967295
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	20000db0 	.word	0x20000db0

0800c8e8 <_malloc_r>:
 800c8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ec:	1ccd      	adds	r5, r1, #3
 800c8ee:	f025 0503 	bic.w	r5, r5, #3
 800c8f2:	3508      	adds	r5, #8
 800c8f4:	2d0c      	cmp	r5, #12
 800c8f6:	bf38      	it	cc
 800c8f8:	250c      	movcc	r5, #12
 800c8fa:	2d00      	cmp	r5, #0
 800c8fc:	4607      	mov	r7, r0
 800c8fe:	db01      	blt.n	800c904 <_malloc_r+0x1c>
 800c900:	42a9      	cmp	r1, r5
 800c902:	d905      	bls.n	800c910 <_malloc_r+0x28>
 800c904:	230c      	movs	r3, #12
 800c906:	2600      	movs	r6, #0
 800c908:	603b      	str	r3, [r7, #0]
 800c90a:	4630      	mov	r0, r6
 800c90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c910:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c9e4 <_malloc_r+0xfc>
 800c914:	f000 f868 	bl	800c9e8 <__malloc_lock>
 800c918:	f8d8 3000 	ldr.w	r3, [r8]
 800c91c:	461c      	mov	r4, r3
 800c91e:	bb5c      	cbnz	r4, 800c978 <_malloc_r+0x90>
 800c920:	4629      	mov	r1, r5
 800c922:	4638      	mov	r0, r7
 800c924:	f7ff ffc0 	bl	800c8a8 <sbrk_aligned>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	4604      	mov	r4, r0
 800c92c:	d155      	bne.n	800c9da <_malloc_r+0xf2>
 800c92e:	f8d8 4000 	ldr.w	r4, [r8]
 800c932:	4626      	mov	r6, r4
 800c934:	2e00      	cmp	r6, #0
 800c936:	d145      	bne.n	800c9c4 <_malloc_r+0xdc>
 800c938:	2c00      	cmp	r4, #0
 800c93a:	d048      	beq.n	800c9ce <_malloc_r+0xe6>
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	4631      	mov	r1, r6
 800c940:	4638      	mov	r0, r7
 800c942:	eb04 0903 	add.w	r9, r4, r3
 800c946:	f000 f8a5 	bl	800ca94 <_sbrk_r>
 800c94a:	4581      	cmp	r9, r0
 800c94c:	d13f      	bne.n	800c9ce <_malloc_r+0xe6>
 800c94e:	6821      	ldr	r1, [r4, #0]
 800c950:	4638      	mov	r0, r7
 800c952:	1a6d      	subs	r5, r5, r1
 800c954:	4629      	mov	r1, r5
 800c956:	f7ff ffa7 	bl	800c8a8 <sbrk_aligned>
 800c95a:	3001      	adds	r0, #1
 800c95c:	d037      	beq.n	800c9ce <_malloc_r+0xe6>
 800c95e:	6823      	ldr	r3, [r4, #0]
 800c960:	442b      	add	r3, r5
 800c962:	6023      	str	r3, [r4, #0]
 800c964:	f8d8 3000 	ldr.w	r3, [r8]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d038      	beq.n	800c9de <_malloc_r+0xf6>
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	42a2      	cmp	r2, r4
 800c970:	d12b      	bne.n	800c9ca <_malloc_r+0xe2>
 800c972:	2200      	movs	r2, #0
 800c974:	605a      	str	r2, [r3, #4]
 800c976:	e00f      	b.n	800c998 <_malloc_r+0xb0>
 800c978:	6822      	ldr	r2, [r4, #0]
 800c97a:	1b52      	subs	r2, r2, r5
 800c97c:	d41f      	bmi.n	800c9be <_malloc_r+0xd6>
 800c97e:	2a0b      	cmp	r2, #11
 800c980:	d917      	bls.n	800c9b2 <_malloc_r+0xca>
 800c982:	1961      	adds	r1, r4, r5
 800c984:	42a3      	cmp	r3, r4
 800c986:	6025      	str	r5, [r4, #0]
 800c988:	bf18      	it	ne
 800c98a:	6059      	strne	r1, [r3, #4]
 800c98c:	6863      	ldr	r3, [r4, #4]
 800c98e:	bf08      	it	eq
 800c990:	f8c8 1000 	streq.w	r1, [r8]
 800c994:	5162      	str	r2, [r4, r5]
 800c996:	604b      	str	r3, [r1, #4]
 800c998:	4638      	mov	r0, r7
 800c99a:	f104 060b 	add.w	r6, r4, #11
 800c99e:	f000 f829 	bl	800c9f4 <__malloc_unlock>
 800c9a2:	f026 0607 	bic.w	r6, r6, #7
 800c9a6:	1d23      	adds	r3, r4, #4
 800c9a8:	1af2      	subs	r2, r6, r3
 800c9aa:	d0ae      	beq.n	800c90a <_malloc_r+0x22>
 800c9ac:	1b9b      	subs	r3, r3, r6
 800c9ae:	50a3      	str	r3, [r4, r2]
 800c9b0:	e7ab      	b.n	800c90a <_malloc_r+0x22>
 800c9b2:	42a3      	cmp	r3, r4
 800c9b4:	6862      	ldr	r2, [r4, #4]
 800c9b6:	d1dd      	bne.n	800c974 <_malloc_r+0x8c>
 800c9b8:	f8c8 2000 	str.w	r2, [r8]
 800c9bc:	e7ec      	b.n	800c998 <_malloc_r+0xb0>
 800c9be:	4623      	mov	r3, r4
 800c9c0:	6864      	ldr	r4, [r4, #4]
 800c9c2:	e7ac      	b.n	800c91e <_malloc_r+0x36>
 800c9c4:	4634      	mov	r4, r6
 800c9c6:	6876      	ldr	r6, [r6, #4]
 800c9c8:	e7b4      	b.n	800c934 <_malloc_r+0x4c>
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	e7cc      	b.n	800c968 <_malloc_r+0x80>
 800c9ce:	230c      	movs	r3, #12
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	603b      	str	r3, [r7, #0]
 800c9d4:	f000 f80e 	bl	800c9f4 <__malloc_unlock>
 800c9d8:	e797      	b.n	800c90a <_malloc_r+0x22>
 800c9da:	6025      	str	r5, [r4, #0]
 800c9dc:	e7dc      	b.n	800c998 <_malloc_r+0xb0>
 800c9de:	605b      	str	r3, [r3, #4]
 800c9e0:	deff      	udf	#255	; 0xff
 800c9e2:	bf00      	nop
 800c9e4:	20000dac 	.word	0x20000dac

0800c9e8 <__malloc_lock>:
 800c9e8:	4801      	ldr	r0, [pc, #4]	; (800c9f0 <__malloc_lock+0x8>)
 800c9ea:	f000 b88d 	b.w	800cb08 <__retarget_lock_acquire_recursive>
 800c9ee:	bf00      	nop
 800c9f0:	20000ef0 	.word	0x20000ef0

0800c9f4 <__malloc_unlock>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__malloc_unlock+0x8>)
 800c9f6:	f000 b888 	b.w	800cb0a <__retarget_lock_release_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	20000ef0 	.word	0x20000ef0

0800ca00 <__utoa>:
 800ca00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca02:	b08b      	sub	sp, #44	; 0x2c
 800ca04:	4605      	mov	r5, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	466e      	mov	r6, sp
 800ca0a:	4c1d      	ldr	r4, [pc, #116]	; (800ca80 <__utoa+0x80>)
 800ca0c:	f104 0c20 	add.w	ip, r4, #32
 800ca10:	4637      	mov	r7, r6
 800ca12:	6820      	ldr	r0, [r4, #0]
 800ca14:	6861      	ldr	r1, [r4, #4]
 800ca16:	3408      	adds	r4, #8
 800ca18:	c703      	stmia	r7!, {r0, r1}
 800ca1a:	4564      	cmp	r4, ip
 800ca1c:	463e      	mov	r6, r7
 800ca1e:	d1f7      	bne.n	800ca10 <__utoa+0x10>
 800ca20:	7921      	ldrb	r1, [r4, #4]
 800ca22:	6820      	ldr	r0, [r4, #0]
 800ca24:	7139      	strb	r1, [r7, #4]
 800ca26:	1e91      	subs	r1, r2, #2
 800ca28:	2922      	cmp	r1, #34	; 0x22
 800ca2a:	6038      	str	r0, [r7, #0]
 800ca2c:	f04f 0100 	mov.w	r1, #0
 800ca30:	d904      	bls.n	800ca3c <__utoa+0x3c>
 800ca32:	7019      	strb	r1, [r3, #0]
 800ca34:	460b      	mov	r3, r1
 800ca36:	4618      	mov	r0, r3
 800ca38:	b00b      	add	sp, #44	; 0x2c
 800ca3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca3c:	1e58      	subs	r0, r3, #1
 800ca3e:	4684      	mov	ip, r0
 800ca40:	fbb5 f7f2 	udiv	r7, r5, r2
 800ca44:	fb02 5617 	mls	r6, r2, r7, r5
 800ca48:	3628      	adds	r6, #40	; 0x28
 800ca4a:	446e      	add	r6, sp
 800ca4c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ca50:	460c      	mov	r4, r1
 800ca52:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ca56:	462e      	mov	r6, r5
 800ca58:	42b2      	cmp	r2, r6
 800ca5a:	463d      	mov	r5, r7
 800ca5c:	f101 0101 	add.w	r1, r1, #1
 800ca60:	d9ee      	bls.n	800ca40 <__utoa+0x40>
 800ca62:	2200      	movs	r2, #0
 800ca64:	545a      	strb	r2, [r3, r1]
 800ca66:	1919      	adds	r1, r3, r4
 800ca68:	1aa5      	subs	r5, r4, r2
 800ca6a:	42aa      	cmp	r2, r5
 800ca6c:	dae3      	bge.n	800ca36 <__utoa+0x36>
 800ca6e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ca72:	780e      	ldrb	r6, [r1, #0]
 800ca74:	3201      	adds	r2, #1
 800ca76:	7006      	strb	r6, [r0, #0]
 800ca78:	f801 5901 	strb.w	r5, [r1], #-1
 800ca7c:	e7f4      	b.n	800ca68 <__utoa+0x68>
 800ca7e:	bf00      	nop
 800ca80:	0800d8ee 	.word	0x0800d8ee

0800ca84 <memset>:
 800ca84:	4603      	mov	r3, r0
 800ca86:	4402      	add	r2, r0
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d100      	bne.n	800ca8e <memset+0xa>
 800ca8c:	4770      	bx	lr
 800ca8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca92:	e7f9      	b.n	800ca88 <memset+0x4>

0800ca94 <_sbrk_r>:
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	2300      	movs	r3, #0
 800ca98:	4d05      	ldr	r5, [pc, #20]	; (800cab0 <_sbrk_r+0x1c>)
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	602b      	str	r3, [r5, #0]
 800caa0:	f7fc f86e 	bl	8008b80 <_sbrk>
 800caa4:	1c43      	adds	r3, r0, #1
 800caa6:	d102      	bne.n	800caae <_sbrk_r+0x1a>
 800caa8:	682b      	ldr	r3, [r5, #0]
 800caaa:	b103      	cbz	r3, 800caae <_sbrk_r+0x1a>
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	bd38      	pop	{r3, r4, r5, pc}
 800cab0:	20000eec 	.word	0x20000eec

0800cab4 <__errno>:
 800cab4:	4b01      	ldr	r3, [pc, #4]	; (800cabc <__errno+0x8>)
 800cab6:	6818      	ldr	r0, [r3, #0]
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	20000a10 	.word	0x20000a10

0800cac0 <__libc_init_array>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	2600      	movs	r6, #0
 800cac4:	4d0c      	ldr	r5, [pc, #48]	; (800caf8 <__libc_init_array+0x38>)
 800cac6:	4c0d      	ldr	r4, [pc, #52]	; (800cafc <__libc_init_array+0x3c>)
 800cac8:	1b64      	subs	r4, r4, r5
 800caca:	10a4      	asrs	r4, r4, #2
 800cacc:	42a6      	cmp	r6, r4
 800cace:	d109      	bne.n	800cae4 <__libc_init_array+0x24>
 800cad0:	f000 f832 	bl	800cb38 <_init>
 800cad4:	2600      	movs	r6, #0
 800cad6:	4d0a      	ldr	r5, [pc, #40]	; (800cb00 <__libc_init_array+0x40>)
 800cad8:	4c0a      	ldr	r4, [pc, #40]	; (800cb04 <__libc_init_array+0x44>)
 800cada:	1b64      	subs	r4, r4, r5
 800cadc:	10a4      	asrs	r4, r4, #2
 800cade:	42a6      	cmp	r6, r4
 800cae0:	d105      	bne.n	800caee <__libc_init_array+0x2e>
 800cae2:	bd70      	pop	{r4, r5, r6, pc}
 800cae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cae8:	4798      	blx	r3
 800caea:	3601      	adds	r6, #1
 800caec:	e7ee      	b.n	800cacc <__libc_init_array+0xc>
 800caee:	f855 3b04 	ldr.w	r3, [r5], #4
 800caf2:	4798      	blx	r3
 800caf4:	3601      	adds	r6, #1
 800caf6:	e7f2      	b.n	800cade <__libc_init_array+0x1e>
 800caf8:	0800d914 	.word	0x0800d914
 800cafc:	0800d914 	.word	0x0800d914
 800cb00:	0800d914 	.word	0x0800d914
 800cb04:	0800d918 	.word	0x0800d918

0800cb08 <__retarget_lock_acquire_recursive>:
 800cb08:	4770      	bx	lr

0800cb0a <__retarget_lock_release_recursive>:
 800cb0a:	4770      	bx	lr

0800cb0c <strcpy>:
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb12:	f803 2b01 	strb.w	r2, [r3], #1
 800cb16:	2a00      	cmp	r2, #0
 800cb18:	d1f9      	bne.n	800cb0e <strcpy+0x2>
 800cb1a:	4770      	bx	lr

0800cb1c <memcpy>:
 800cb1c:	440a      	add	r2, r1
 800cb1e:	4291      	cmp	r1, r2
 800cb20:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb24:	d100      	bne.n	800cb28 <memcpy+0xc>
 800cb26:	4770      	bx	lr
 800cb28:	b510      	push	{r4, lr}
 800cb2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb2e:	4291      	cmp	r1, r2
 800cb30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb34:	d1f9      	bne.n	800cb2a <memcpy+0xe>
 800cb36:	bd10      	pop	{r4, pc}

0800cb38 <_init>:
 800cb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3a:	bf00      	nop
 800cb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb3e:	bc08      	pop	{r3}
 800cb40:	469e      	mov	lr, r3
 800cb42:	4770      	bx	lr

0800cb44 <_fini>:
 800cb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb46:	bf00      	nop
 800cb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb4a:	bc08      	pop	{r3}
 800cb4c:	469e      	mov	lr, r3
 800cb4e:	4770      	bx	lr
