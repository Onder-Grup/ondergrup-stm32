
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff8  0800ca98  0800ca98  0000da98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da90  0800da90  0000f11c  2**0
                  CONTENTS
  4 .ARM          00000008  0800da90  0800da90  0000ea90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da98  0800da98  0000f11c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da98  0800da98  0000ea98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da9c  0800da9c  0000ea9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800daa0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000011c  0800dbbc  0000f11c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800dbbc  0000f5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f11c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184bb  00000000  00000000  0000f145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003612  00000000  00000000  00027600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0002ac18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb1  00000000  00000000  0002bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c898  00000000  00000000  0002cda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb71  00000000  00000000  00049639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a021a  00000000  00000000  000661aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001063c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052dc  00000000  00000000  00106408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010b6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000011c 	.word	0x2000011c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ca80 	.word	0x0800ca80

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000120 	.word	0x20000120
 8000220:	0800ca80 	.word	0x0800ca80

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	@ (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	@ (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fa78 	bl	8009744 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f008 f8f0 	bl	800843c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	@ (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	@ (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	@ (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	@ (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	@ (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	@ (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	@ (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	@ (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	@ (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	@ (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	@ (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	@ (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	@ (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	@ (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	@ (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	@ (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	@ (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	@ (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	@ (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	@ (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	@ (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	@ (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	@ (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	@ (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	@ (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	@ (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	@ (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	@ (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	@ (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	@ (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	@ (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	@ (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	@ (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	@ (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	@ (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	@ (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	@ (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	@ (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	@ (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	@ (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	@ (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	@ (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	@ (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	@ (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	@ (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	@ (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	@ (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	@ (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	@ (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	@ (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	@ (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	@ (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	@ (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	@ (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	@ (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	@ (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000138 	.word	0x20000138
 80004bc:	200003bc 	.word	0x200003bc
 80004c0:	200001e5 	.word	0x200001e5
 80004c4:	20000211 	.word	0x20000211
 80004c8:	20000214 	.word	0x20000214
 80004cc:	20000215 	.word	0x20000215
 80004d0:	20000216 	.word	0x20000216
 80004d4:	20000217 	.word	0x20000217
 80004d8:	20000218 	.word	0x20000218
 80004dc:	20000219 	.word	0x20000219
 80004e0:	20000229 	.word	0x20000229
 80004e4:	2000021a 	.word	0x2000021a
 80004e8:	2000022a 	.word	0x2000022a
 80004ec:	2000021b 	.word	0x2000021b
 80004f0:	2000022b 	.word	0x2000022b
 80004f4:	2000021e 	.word	0x2000021e
 80004f8:	2000021f 	.word	0x2000021f
 80004fc:	20000220 	.word	0x20000220
 8000500:	20000221 	.word	0x20000221
 8000504:	20000222 	.word	0x20000222
 8000508:	20000223 	.word	0x20000223
 800050c:	20000224 	.word	0x20000224
 8000510:	20000225 	.word	0x20000225
 8000514:	20000226 	.word	0x20000226
 8000518:	20000227 	.word	0x20000227
 800051c:	20000228 	.word	0x20000228
 8000520:	2000022c 	.word	0x2000022c
 8000524:	2000022e 	.word	0x2000022e
 8000528:	2000020c 	.word	0x2000020c
 800052c:	2000020d 	.word	0x2000020d
 8000530:	2000020e 	.word	0x2000020e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000020f 	.word	0x2000020f
 8000540:	20000231 	.word	0x20000231
 8000544:	2000022f 	.word	0x2000022f
 8000548:	2000021d 	.word	0x2000021d
 800054c:	20000230 	.word	0x20000230
 8000550:	2000021c 	.word	0x2000021c
 8000554:	20000232 	.word	0x20000232
 8000558:	20000233 	.word	0x20000233
 800055c:	20000234 	.word	0x20000234
 8000560:	20000235 	.word	0x20000235
 8000564:	20000236 	.word	0x20000236
 8000568:	20000237 	.word	0x20000237
 800056c:	20000238 	.word	0x20000238
 8000570:	20000239 	.word	0x20000239
 8000574:	2000023a 	.word	0x2000023a
 8000578:	2000023b 	.word	0x2000023b
 800057c:	200001e4 	.word	0x200001e4
	}

	if(kapi1AcSure>5) {
 8000580:	4b57      	ldr	r3, [pc, #348]	@ (80006e0 <eepromKontrol+0x4ac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b55      	ldr	r3, [pc, #340]	@ (80006e0 <eepromKontrol+0x4ac>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b55      	ldr	r3, [pc, #340]	@ (80006e4 <eepromKontrol+0x4b0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b53      	ldr	r3, [pc, #332]	@ (80006e4 <eepromKontrol+0x4b0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b52      	ldr	r3, [pc, #328]	@ (80006e8 <eepromKontrol+0x4b4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b50      	ldr	r3, [pc, #320]	@ (80006e8 <eepromKontrol+0x4b4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b50      	ldr	r3, [pc, #320]	@ (80006ec <eepromKontrol+0x4b8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4e      	ldr	r3, [pc, #312]	@ (80006ec <eepromKontrol+0x4b8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4d      	ldr	r3, [pc, #308]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4b      	ldr	r3, [pc, #300]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b49      	ldr	r3, [pc, #292]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b48      	ldr	r3, [pc, #288]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b46      	ldr	r3, [pc, #280]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b46      	ldr	r3, [pc, #280]	@ (80006fc <eepromKontrol+0x4c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b44      	ldr	r3, [pc, #272]	@ (80006fc <eepromKontrol+0x4c8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b43      	ldr	r3, [pc, #268]	@ (8000700 <eepromKontrol+0x4cc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b41      	ldr	r3, [pc, #260]	@ (8000700 <eepromKontrol+0x4cc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b41      	ldr	r3, [pc, #260]	@ (8000704 <eepromKontrol+0x4d0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3f      	ldr	r3, [pc, #252]	@ (8000704 <eepromKontrol+0x4d0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3e      	ldr	r3, [pc, #248]	@ (8000708 <eepromKontrol+0x4d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3c      	ldr	r3, [pc, #240]	@ (8000708 <eepromKontrol+0x4d4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3c      	ldr	r3, [pc, #240]	@ (800070c <eepromKontrol+0x4d8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3a      	ldr	r3, [pc, #232]	@ (800070c <eepromKontrol+0x4d8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b39      	ldr	r3, [pc, #228]	@ (8000710 <eepromKontrol+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b37      	ldr	r3, [pc, #220]	@ (8000710 <eepromKontrol+0x4dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b37      	ldr	r3, [pc, #220]	@ (8000714 <eepromKontrol+0x4e0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <eepromKontrol+0x4e0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b34      	ldr	r3, [pc, #208]	@ (8000718 <eepromKontrol+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b32      	ldr	r3, [pc, #200]	@ (8000718 <eepromKontrol+0x4e4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b32      	ldr	r3, [pc, #200]	@ (800071c <eepromKontrol+0x4e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <eepromKontrol+0x4e8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <eepromKontrol+0x4ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	@ 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2d      	ldr	r3, [pc, #180]	@ (8000720 <eepromKontrol+0x4ec>)
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2d      	ldr	r3, [pc, #180]	@ (8000724 <eepromKontrol+0x4f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <eepromKontrol+0x4f0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <eepromKontrol+0x4f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <eepromKontrol+0x4f4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b28      	ldr	r3, [pc, #160]	@ (800072c <eepromKontrol+0x4f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b26      	ldr	r3, [pc, #152]	@ (800072c <eepromKontrol+0x4f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <eepromKontrol+0x4fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <eepromKontrol+0x4fc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <eepromKontrol+0x500>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <eepromKontrol+0x500>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f83f 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	@ 0xfa
 80006bc:	f007 febe 	bl	800843c <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f839 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	f007 feb8 	bl	800843c <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f833 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	@ 0xfa
 80006d4:	f007 feb2 	bl	800843c <HAL_Delay>

	//loadMenuTexts(dilSecim);
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000229 	.word	0x20000229
 80006e4:	2000021a 	.word	0x2000021a
 80006e8:	2000022a 	.word	0x2000022a
 80006ec:	2000021b 	.word	0x2000021b
 80006f0:	2000021d 	.word	0x2000021d
 80006f4:	2000022b 	.word	0x2000022b
 80006f8:	2000021e 	.word	0x2000021e
 80006fc:	2000021f 	.word	0x2000021f
 8000700:	20000220 	.word	0x20000220
 8000704:	20000221 	.word	0x20000221
 8000708:	20000222 	.word	0x20000222
 800070c:	20000223 	.word	0x20000223
 8000710:	20000224 	.word	0x20000224
 8000714:	20000225 	.word	0x20000225
 8000718:	20000226 	.word	0x20000226
 800071c:	20000227 	.word	0x20000227
 8000720:	20000228 	.word	0x20000228
 8000724:	2000022c 	.word	0x2000022c
 8000728:	2000022e 	.word	0x2000022e
 800072c:	20000230 	.word	0x20000230
 8000730:	20000231 	.word	0x20000231
 8000734:	2000022f 	.word	0x2000022f

08000738 <convertArrays>:

void convertArrays(int state) {
 8000738:	b480      	push	{r7}
 800073a:	b08b      	sub	sp, #44	@ 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d11d      	bne.n	8000782 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 8000746:	4b34      	ldr	r3, [pc, #208]	@ (8000818 <convertArrays+0xe0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
 8000750:	e013      	b.n	800077a <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 8000752:	4a32      	ldr	r2, [pc, #200]	@ (800081c <convertArrays+0xe4>)
 8000754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 800075c:	4a30      	ldr	r2, [pc, #192]	@ (8000820 <convertArrays+0xe8>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	7819      	ldrb	r1, [r3, #0]
 8000764:	4a2f      	ldr	r2, [pc, #188]	@ (8000824 <convertArrays+0xec>)
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	4413      	add	r3, r2
 800076a:	460a      	mov	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	3301      	adds	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	3301      	adds	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	2b0b      	cmp	r3, #11
 800077e:	dde8      	ble.n	8000752 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000780:	e045      	b.n	800080e <convertArrays+0xd6>
	} else if(state == 2) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d121      	bne.n	80007cc <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000788:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <convertArrays+0xf0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	e017      	b.n	80007c4 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <convertArrays+0xe4>)
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00e      	beq.n	80007be <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a0:	4a1e      	ldr	r2, [pc, #120]	@ (800081c <convertArrays+0xe4>)
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <convertArrays+0xf4>)
 80007ac:	5c99      	ldrb	r1, [r3, r2]
 80007ae:	4a20      	ldr	r2, [pc, #128]	@ (8000830 <convertArrays+0xf8>)
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	4413      	add	r3, r2
 80007b4:	460a      	mov	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	3301      	adds	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	3301      	adds	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	2b13      	cmp	r3, #19
 80007c8:	dde4      	ble.n	8000794 <convertArrays+0x5c>
}
 80007ca:	e020      	b.n	800080e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <convertArrays+0xfc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	e017      	b.n	8000808 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007d8:	4a10      	ldr	r2, [pc, #64]	@ (800081c <convertArrays+0xe4>)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00e      	beq.n	8000802 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007e4:	4a0d      	ldr	r2, [pc, #52]	@ (800081c <convertArrays+0xe4>)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <convertArrays+0xf4>)
 80007f0:	5c99      	ldrb	r1, [r3, r2]
 80007f2:	4a11      	ldr	r2, [pc, #68]	@ (8000838 <convertArrays+0x100>)
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	4413      	add	r3, r2
 80007f8:	460a      	mov	r2, r1
 80007fa:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	3301      	adds	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	3301      	adds	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	2b13      	cmp	r3, #19
 800080c:	dde4      	ble.n	80007d8 <convertArrays+0xa0>
}
 800080e:	bf00      	nop
 8000810:	372c      	adds	r7, #44	@ 0x2c
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000004 	.word	0x20000004
 800081c:	20000138 	.word	0x20000138
 8000820:	20000010 	.word	0x20000010
 8000824:	200001b0 	.word	0x200001b0
 8000828:	20000008 	.word	0x20000008
 800082c:	2000001c 	.word	0x2000001c
 8000830:	200001bc 	.word	0x200001bc
 8000834:	2000000c 	.word	0x2000000c
 8000838:	200001d0 	.word	0x200001d0

0800083c <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8000842:	af04      	add	r7, sp, #16
 8000844:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8000848:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 800084c:	6020      	str	r0, [r4, #0]
 800084e:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8000852:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8000856:	6001      	str	r1, [r0, #0]
 8000858:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 800085c:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000860:	600a      	str	r2, [r1, #0]
 8000862:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000866:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 800086a:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 800086c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000870:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000874:	f107 0014 	add.w	r0, r7, #20
 8000878:	220c      	movs	r2, #12
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	f00b fd03 	bl	800c286 <strncpy>
	subMachineID[12] = '\0';
 8000880:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000884:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000888:	2200      	movs	r2, #0
 800088a:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 800088c:	4a35      	ldr	r2, [pc, #212]	@ (8000964 <sendMachineData+0x128>)
 800088e:	4936      	ldr	r1, [pc, #216]	@ (8000968 <sendMachineData+0x12c>)
 8000890:	4836      	ldr	r0, [pc, #216]	@ (800096c <sendMachineData+0x130>)
 8000892:	f00b fc87 	bl	800c1a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000896:	4835      	ldr	r0, [pc, #212]	@ (800096c <sendMachineData+0x130>)
 8000898:	f7ff fcc4 	bl	8000224 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008a4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80008a8:	4930      	ldr	r1, [pc, #192]	@ (800096c <sendMachineData+0x130>)
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	f00a fe92 	bl	800b5d4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008b4:	f007 fdc2 	bl	800843c <HAL_Delay>

	sprintf(local_txA,
 80008b8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008bc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008c0:	f107 0114 	add.w	r1, r7, #20
 80008c4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008c8:	4a29      	ldr	r2, [pc, #164]	@ (8000970 <sendMachineData+0x134>)
 80008ca:	9202      	str	r2, [sp, #8]
 80008cc:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80008d0:	9201      	str	r2, [sp, #4]
 80008d2:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80008d6:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80008da:	6812      	ldr	r2, [r2, #0]
 80008dc:	9200      	str	r2, [sp, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	460a      	mov	r2, r1
 80008e2:	4924      	ldr	r1, [pc, #144]	@ (8000974 <sendMachineData+0x138>)
 80008e4:	f00b fc5e 	bl	800c1a4 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc99 	bl	8000224 <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80008f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fc:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000900:	491d      	ldr	r1, [pc, #116]	@ (8000978 <sendMachineData+0x13c>)
 8000902:	4618      	mov	r0, r3
 8000904:	f00b fc4e 	bl	800c1a4 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc89 	bl	8000224 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29a      	uxth	r2, r3
 8000916:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800091a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800091e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	f00a fe56 	bl	800b5d4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000928:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800092c:	f007 fd86 	bl	800843c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000930:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fc75 	bl	8000224 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000942:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000946:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	f00a fe42 	bl	800b5d4 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000950:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000954:	f007 fd72 	bl	800843c <HAL_Delay>
}
 8000958:	bf00      	nop
 800095a:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 800095e:	46bd      	mov	sp, r7
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	bf00      	nop
 8000964:	0800cae8 	.word	0x0800cae8
 8000968:	0800caf8 	.word	0x0800caf8
 800096c:	20000274 	.word	0x20000274
 8000970:	0800cb8c 	.word	0x0800cb8c
 8000974:	0800cb18 	.word	0x0800cb18
 8000978:	0800cba0 	.word	0x0800cba0

0800097c <hata2EEPROM>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"

void hata2EEPROM(uint8_t hataKodu) {
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b089      	sub	sp, #36	@ 0x24
 8000980:	af04      	add	r7, sp, #16
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000986:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <hata2EEPROM+0xa0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <hata2EEPROM+0xa4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4413      	add	r3, r2
 8000992:	4a24      	ldr	r2, [pc, #144]	@ (8000a24 <hata2EEPROM+0xa8>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800099a:	f000 f929 	bl	8000bf0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800099e:	e000      	b.n	80009a2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009a0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e012      	b.n	80009ce <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <hata2EEPROM+0xa4>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <hata2EEPROM+0xa8>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d107      	bne.n	80009c8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <hata2EEPROM+0xa4>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	4918      	ldr	r1, [pc, #96]	@ (8000a24 <hata2EEPROM+0xa8>)
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	54ca      	strb	r2, [r1, r3]
					break;
 80009c6:	e007      	b.n	80009d8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3301      	adds	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <hata2EEPROM+0xa0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbe7      	blt.n	80009a8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <hata2EEPROM+0xa4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b299      	uxth	r1, r3
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <hata2EEPROM+0xa0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	b298      	uxth	r0, r3
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <hata2EEPROM+0xa4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <hata2EEPROM+0xa8>)
 80009ea:	4413      	add	r3, r2
 80009ec:	4a0b      	ldr	r2, [pc, #44]	@ (8000a1c <hata2EEPROM+0xa0>)
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	b292      	uxth	r2, r2
 80009f2:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80009f6:	9402      	str	r4, [sp, #8]
 80009f8:	9201      	str	r2, [sp, #4]
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	4603      	mov	r3, r0
 80009fe:	460a      	mov	r2, r1
 8000a00:	21a0      	movs	r1, #160	@ 0xa0
 8000a02:	4809      	ldr	r0, [pc, #36]	@ (8000a28 <hata2EEPROM+0xac>)
 8000a04:	f008 fda4 	bl	8009550 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a0c:	f007 fd16 	bl	800843c <HAL_Delay>
	eepromKontrol();
 8000a10:	f7ff fc10 	bl	8000234 <eepromKontrol>
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	2000009c 	.word	0x2000009c
 8000a24:	20000138 	.word	0x20000138
 8000a28:	200003bc 	.word	0x200003bc

08000a2c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d11d      	bne.n	8000a78 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a3c:	4b62      	ldr	r3, [pc, #392]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d105      	bne.n	8000a50 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a44:	4a61      	ldr	r2, [pc, #388]	@ (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f006 ff9d 	bl	8007988 <lcd_print>
 8000a4e:	e008      	b.n	8000a62 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a50:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d104      	bne.n	8000a62 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a58:	4a5d      	ldr	r2, [pc, #372]	@ (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f006 ff93 	bl	8007988 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a62:	4a5c      	ldr	r2, [pc, #368]	@ (8000bd4 <hataKoduLcdGoster+0x1a8>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	2002      	movs	r0, #2
 8000a68:	f006 ff8e 	bl	8007988 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000a6e:	2107      	movs	r1, #7
 8000a70:	2002      	movs	r0, #2
 8000a72:	f006 ff89 	bl	8007988 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a76:	e0a3      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d11d      	bne.n	8000aba <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000a7e:	4b52      	ldr	r3, [pc, #328]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d105      	bne.n	8000a92 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000a86:	4a51      	ldr	r2, [pc, #324]	@ (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f006 ff7c 	bl	8007988 <lcd_print>
 8000a90:	e008      	b.n	8000aa4 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000a92:	4b4d      	ldr	r3, [pc, #308]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d104      	bne.n	8000aa4 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f006 ff72 	bl	8007988 <lcd_print>
		lcd_print(2, 2, "2");
 8000aa4:	4a4d      	ldr	r2, [pc, #308]	@ (8000bdc <hataKoduLcdGoster+0x1b0>)
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f006 ff6d 	bl	8007988 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aae:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f006 ff68 	bl	8007988 <lcd_print>
}
 8000ab8:	e082      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d11d      	bne.n	8000afc <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000ac0:	4b41      	ldr	r3, [pc, #260]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d105      	bne.n	8000ad4 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000ac8:	4a40      	ldr	r2, [pc, #256]	@ (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	2001      	movs	r0, #1
 8000ace:	f006 ff5b 	bl	8007988 <lcd_print>
 8000ad2:	e008      	b.n	8000ae6 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d104      	bne.n	8000ae6 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000adc:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f006 ff51 	bl	8007988 <lcd_print>
		lcd_print(2, 3, "3");
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8000be0 <hataKoduLcdGoster+0x1b4>)
 8000ae8:	2103      	movs	r1, #3
 8000aea:	2002      	movs	r0, #2
 8000aec:	f006 ff4c 	bl	8007988 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af0:	4a39      	ldr	r2, [pc, #228]	@ (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000af2:	2107      	movs	r1, #7
 8000af4:	2002      	movs	r0, #2
 8000af6:	f006 ff47 	bl	8007988 <lcd_print>
}
 8000afa:	e061      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d11d      	bne.n	8000b3e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b02:	4b31      	ldr	r3, [pc, #196]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d105      	bne.n	8000b16 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b0a:	4a30      	ldr	r2, [pc, #192]	@ (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f006 ff3a 	bl	8007988 <lcd_print>
 8000b14:	e008      	b.n	8000b28 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b16:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d104      	bne.n	8000b28 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	2001      	movs	r0, #1
 8000b24:	f006 ff30 	bl	8007988 <lcd_print>
		lcd_print(2, 4, "4");
 8000b28:	4a2e      	ldr	r2, [pc, #184]	@ (8000be4 <hataKoduLcdGoster+0x1b8>)
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f006 ff2b 	bl	8007988 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b32:	4a29      	ldr	r2, [pc, #164]	@ (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000b34:	2107      	movs	r1, #7
 8000b36:	2002      	movs	r0, #2
 8000b38:	f006 ff26 	bl	8007988 <lcd_print>
}
 8000b3c:	e040      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d11d      	bne.n	8000b80 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b44:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2001      	movs	r0, #1
 8000b52:	f006 ff19 	bl	8007988 <lcd_print>
 8000b56:	e008      	b.n	8000b6a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d104      	bne.n	8000b6a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b60:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	2001      	movs	r0, #1
 8000b66:	f006 ff0f 	bl	8007988 <lcd_print>
		lcd_print(2, 5, "5");
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000be8 <hataKoduLcdGoster+0x1bc>)
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f006 ff0a 	bl	8007988 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b74:	4a18      	ldr	r2, [pc, #96]	@ (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000b76:	2107      	movs	r1, #7
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f006 ff05 	bl	8007988 <lcd_print>
}
 8000b7e:	e01f      	b.n	8000bc0 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d11c      	bne.n	8000bc0 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d105      	bne.n	8000b9a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bcc <hataKoduLcdGoster+0x1a0>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	2001      	movs	r0, #1
 8000b94:	f006 fef8 	bl	8007988 <lcd_print>
 8000b98:	e008      	b.n	8000bac <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <hataKoduLcdGoster+0x19c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d104      	bne.n	8000bac <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <hataKoduLcdGoster+0x1a4>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f006 feee 	bl	8007988 <lcd_print>
		lcd_print(2, 6, "6");
 8000bac:	4a0f      	ldr	r2, [pc, #60]	@ (8000bec <hataKoduLcdGoster+0x1c0>)
 8000bae:	2106      	movs	r1, #6
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f006 fee9 	bl	8007988 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <hataKoduLcdGoster+0x1ac>)
 8000bb8:	2107      	movs	r1, #7
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f006 fee4 	bl	8007988 <lcd_print>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000231 	.word	0x20000231
 8000bcc:	0800cc14 	.word	0x0800cc14
 8000bd0:	0800cc24 	.word	0x0800cc24
 8000bd4:	0800cc34 	.word	0x0800cc34
 8000bd8:	0800cc38 	.word	0x0800cc38
 8000bdc:	0800cc44 	.word	0x0800cc44
 8000be0:	0800cc48 	.word	0x0800cc48
 8000be4:	0800cc4c 	.word	0x0800cc4c
 8000be8:	0800cc50 	.word	0x0800cc50
 8000bec:	0800cc54 	.word	0x0800cc54

08000bf0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e009      	b.n	8000c10 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <eepromDataFillWithEmpty+0x38>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	4a09      	ldr	r2, [pc, #36]	@ (8000c2c <eepromDataFillWithEmpty+0x3c>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <eepromDataFillWithEmpty+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dbf0      	blt.n	8000bfc <eepromDataFillWithEmpty+0xc>
	}
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000070 	.word	0x20000070
 8000c2c:	20000138 	.word	0x20000138
 8000c30:	20000098 	.word	0x20000098

08000c34 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c46:	4b50      	ldr	r3, [pc, #320]	@ (8000d88 <i2cTest+0x154>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000d88 <i2cTest+0x154>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0201 	bic.w	r2, r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c56:	484c      	ldr	r0, [pc, #304]	@ (8000d88 <i2cTest+0x154>)
 8000c58:	f008 fb4c 	bl	80092f4 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5c:	23c0      	movs	r3, #192	@ 0xc0
 8000c5e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c60:	2311      	movs	r3, #17
 8000c62:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4846      	ldr	r0, [pc, #280]	@ (8000d8c <i2cTest+0x158>)
 8000c72:	f007 ff53 	bl	8008b1c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2140      	movs	r1, #64	@ 0x40
 8000c7a:	4844      	ldr	r0, [pc, #272]	@ (8000d8c <i2cTest+0x158>)
 8000c7c:	f008 f9c5 	bl	800900a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2180      	movs	r1, #128	@ 0x80
 8000c84:	4841      	ldr	r0, [pc, #260]	@ (8000d8c <i2cTest+0x158>)
 8000c86:	f008 f9c0 	bl	800900a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c8a:	200a      	movs	r0, #10
 8000c8c:	f007 fbd6 	bl	800843c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c90:	bf00      	nop
 8000c92:	2140      	movs	r1, #64	@ 0x40
 8000c94:	483d      	ldr	r0, [pc, #244]	@ (8000d8c <i2cTest+0x158>)
 8000c96:	f008 f9a1 	bl	8008fdc <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d006      	beq.n	8000cae <i2cTest+0x7a>
 8000ca0:	2180      	movs	r1, #128	@ 0x80
 8000ca2:	483a      	ldr	r0, [pc, #232]	@ (8000d8c <i2cTest+0x158>)
 8000ca4:	f008 f99a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d1f1      	bne.n	8000c92 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	4836      	ldr	r0, [pc, #216]	@ (8000d8c <i2cTest+0x158>)
 8000cb4:	f008 f9a9 	bl	800900a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f007 fbbf 	bl	800843c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cbe:	bf00      	nop
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	4832      	ldr	r0, [pc, #200]	@ (8000d8c <i2cTest+0x158>)
 8000cc4:	f008 f98a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d0f8      	beq.n	8000cc0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2140      	movs	r1, #64	@ 0x40
 8000cd2:	482e      	ldr	r0, [pc, #184]	@ (8000d8c <i2cTest+0x158>)
 8000cd4:	f008 f999 	bl	800900a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f007 fbaf 	bl	800843c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000cde:	bf00      	nop
 8000ce0:	2140      	movs	r1, #64	@ 0x40
 8000ce2:	482a      	ldr	r0, [pc, #168]	@ (8000d8c <i2cTest+0x158>)
 8000ce4:	f008 f97a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d0f8      	beq.n	8000ce0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2140      	movs	r1, #64	@ 0x40
 8000cf2:	4826      	ldr	r0, [pc, #152]	@ (8000d8c <i2cTest+0x158>)
 8000cf4:	f008 f989 	bl	800900a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cf8:	200a      	movs	r0, #10
 8000cfa:	f007 fb9f 	bl	800843c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000cfe:	bf00      	nop
 8000d00:	2140      	movs	r1, #64	@ 0x40
 8000d02:	4822      	ldr	r0, [pc, #136]	@ (8000d8c <i2cTest+0x158>)
 8000d04:	f008 f96a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d1f8      	bne.n	8000d00 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	481e      	ldr	r0, [pc, #120]	@ (8000d8c <i2cTest+0x158>)
 8000d14:	f008 f979 	bl	800900a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f007 fb8f 	bl	800843c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d1e:	bf00      	nop
 8000d20:	2180      	movs	r1, #128	@ 0x80
 8000d22:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <i2cTest+0x158>)
 8000d24:	f008 f95a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d1f8      	bne.n	8000d20 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23c0      	movs	r3, #192	@ 0xc0
 8000d30:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d32:	2312      	movs	r3, #18
 8000d34:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4812      	ldr	r0, [pc, #72]	@ (8000d8c <i2cTest+0x158>)
 8000d44:	f007 feea 	bl	8008b1c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <i2cTest+0x154>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <i2cTest+0x154>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d56:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <i2cTest+0x154>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <i2cTest+0x154>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d66:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <i2cTest+0x154>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <i2cTest+0x154>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <i2cTest+0x154>)
 8000d7a:	f008 f977 	bl	800906c <HAL_I2C_Init>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200003bc 	.word	0x200003bc
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d9a:	20c8      	movs	r0, #200	@ 0xc8
 8000d9c:	f007 fb4e 	bl	800843c <HAL_Delay>
	lcd_clear();
 8000da0:	f006 fe1e 	bl	80079e0 <lcd_clear>
	if(type == 1 && page == 0) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d13e      	bne.n	8000e28 <printTemplate+0x98>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d13b      	bne.n	8000e28 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000db0:	4a81      	ldr	r2, [pc, #516]	@ (8000fb8 <printTemplate+0x228>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	2001      	movs	r0, #1
 8000db6:	f006 fde7 	bl	8007988 <lcd_print>
		lcd_print(2, 3, "0");
 8000dba:	4a80      	ldr	r2, [pc, #512]	@ (8000fbc <printTemplate+0x22c>)
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f006 fde2 	bl	8007988 <lcd_print>
		lcd_print(2, 4, "1");
 8000dc4:	4a7e      	ldr	r2, [pc, #504]	@ (8000fc0 <printTemplate+0x230>)
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f006 fddd 	bl	8007988 <lcd_print>
		lcd_print(2, 5, "2");
 8000dce:	4a7d      	ldr	r2, [pc, #500]	@ (8000fc4 <printTemplate+0x234>)
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f006 fdd8 	bl	8007988 <lcd_print>
		lcd_print(2, 6, "3");
 8000dd8:	4a7b      	ldr	r2, [pc, #492]	@ (8000fc8 <printTemplate+0x238>)
 8000dda:	2106      	movs	r1, #6
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f006 fdd3 	bl	8007988 <lcd_print>
		lcd_print(2, 7, "4");
 8000de2:	4a7a      	ldr	r2, [pc, #488]	@ (8000fcc <printTemplate+0x23c>)
 8000de4:	2107      	movs	r1, #7
 8000de6:	2002      	movs	r0, #2
 8000de8:	f006 fdce 	bl	8007988 <lcd_print>
		lcd_print(2, 10, "5");
 8000dec:	4a78      	ldr	r2, [pc, #480]	@ (8000fd0 <printTemplate+0x240>)
 8000dee:	210a      	movs	r1, #10
 8000df0:	2002      	movs	r0, #2
 8000df2:	f006 fdc9 	bl	8007988 <lcd_print>
		lcd_print(2, 11, "6");
 8000df6:	4a77      	ldr	r2, [pc, #476]	@ (8000fd4 <printTemplate+0x244>)
 8000df8:	210b      	movs	r1, #11
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f006 fdc4 	bl	8007988 <lcd_print>
		lcd_print(2, 12, "7");
 8000e00:	4a75      	ldr	r2, [pc, #468]	@ (8000fd8 <printTemplate+0x248>)
 8000e02:	210c      	movs	r1, #12
 8000e04:	2002      	movs	r0, #2
 8000e06:	f006 fdbf 	bl	8007988 <lcd_print>
		lcd_print(2, 13, "8");
 8000e0a:	4a74      	ldr	r2, [pc, #464]	@ (8000fdc <printTemplate+0x24c>)
 8000e0c:	210d      	movs	r1, #13
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f006 fdba 	bl	8007988 <lcd_print>
		lcd_print(2, 14, "9");
 8000e14:	4a72      	ldr	r2, [pc, #456]	@ (8000fe0 <printTemplate+0x250>)
 8000e16:	210e      	movs	r1, #14
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f006 fdb5 	bl	8007988 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e1e:	2103      	movs	r1, #3
 8000e20:	2002      	movs	r0, #2
 8000e22:	f006 fd92 	bl	800794a <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000e26:	e0c2      	b.n	8000fae <printTemplate+0x21e>
	} else if(type == 2) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d15e      	bne.n	8000eec <printTemplate+0x15c>
		if(page == 1) {
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d10f      	bne.n	8000e54 <printTemplate+0xc4>
			lcd_clear();
 8000e34:	f006 fdd4 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000e38:	2064      	movs	r0, #100	@ 0x64
 8000e3a:	f007 faff 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e3e:	4a69      	ldr	r2, [pc, #420]	@ (8000fe4 <printTemplate+0x254>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	2001      	movs	r0, #1
 8000e44:	f006 fda0 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e48:	4a67      	ldr	r2, [pc, #412]	@ (8000fe8 <printTemplate+0x258>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f006 fd9b 	bl	8007988 <lcd_print>
}
 8000e52:	e0ac      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 2) {
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d10f      	bne.n	8000e7a <printTemplate+0xea>
			lcd_clear();
 8000e5a:	f006 fdc1 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000e5e:	2064      	movs	r0, #100	@ 0x64
 8000e60:	f007 faec 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e64:	4a5f      	ldr	r2, [pc, #380]	@ (8000fe4 <printTemplate+0x254>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f006 fd8d 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e6e:	4a5f      	ldr	r2, [pc, #380]	@ (8000fec <printTemplate+0x25c>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	2002      	movs	r0, #2
 8000e74:	f006 fd88 	bl	8007988 <lcd_print>
}
 8000e78:	e099      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 3) {
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d10f      	bne.n	8000ea0 <printTemplate+0x110>
			lcd_clear();
 8000e80:	f006 fdae 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	@ 0x64
 8000e86:	f007 fad9 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e8a:	4a56      	ldr	r2, [pc, #344]	@ (8000fe4 <printTemplate+0x254>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f006 fd7a 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000e94:	4a56      	ldr	r2, [pc, #344]	@ (8000ff0 <printTemplate+0x260>)
 8000e96:	2101      	movs	r1, #1
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f006 fd75 	bl	8007988 <lcd_print>
}
 8000e9e:	e086      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 4) {
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d10f      	bne.n	8000ec6 <printTemplate+0x136>
			lcd_clear();
 8000ea6:	f006 fd9b 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000eaa:	2064      	movs	r0, #100	@ 0x64
 8000eac:	f007 fac6 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe4 <printTemplate+0x254>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f006 fd67 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000eba:	4a4e      	ldr	r2, [pc, #312]	@ (8000ff4 <printTemplate+0x264>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f006 fd62 	bl	8007988 <lcd_print>
}
 8000ec4:	e073      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 5) {
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d170      	bne.n	8000fae <printTemplate+0x21e>
			lcd_clear();
 8000ecc:	f006 fd88 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000ed0:	2064      	movs	r0, #100	@ 0x64
 8000ed2:	f007 fab3 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ed6:	4a43      	ldr	r2, [pc, #268]	@ (8000fe4 <printTemplate+0x254>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2001      	movs	r0, #1
 8000edc:	f006 fd54 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000ee0:	4a45      	ldr	r2, [pc, #276]	@ (8000ff8 <printTemplate+0x268>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f006 fd4f 	bl	8007988 <lcd_print>
}
 8000eea:	e060      	b.n	8000fae <printTemplate+0x21e>
	} else if(type == 3) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d15d      	bne.n	8000fae <printTemplate+0x21e>
		if(page == 1) {
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10f      	bne.n	8000f18 <printTemplate+0x188>
			lcd_clear();
 8000ef8:	f006 fd72 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000efc:	2064      	movs	r0, #100	@ 0x64
 8000efe:	f007 fa9d 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f02:	4a3e      	ldr	r2, [pc, #248]	@ (8000ffc <printTemplate+0x26c>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	2001      	movs	r0, #1
 8000f08:	f006 fd3e 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f0c:	4a36      	ldr	r2, [pc, #216]	@ (8000fe8 <printTemplate+0x258>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2002      	movs	r0, #2
 8000f12:	f006 fd39 	bl	8007988 <lcd_print>
}
 8000f16:	e04a      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 2) {
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d10f      	bne.n	8000f3e <printTemplate+0x1ae>
			lcd_clear();
 8000f1e:	f006 fd5f 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000f22:	2064      	movs	r0, #100	@ 0x64
 8000f24:	f007 fa8a 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f28:	4a34      	ldr	r2, [pc, #208]	@ (8000ffc <printTemplate+0x26c>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f006 fd2b 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f32:	4a2e      	ldr	r2, [pc, #184]	@ (8000fec <printTemplate+0x25c>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	2002      	movs	r0, #2
 8000f38:	f006 fd26 	bl	8007988 <lcd_print>
}
 8000f3c:	e037      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 3) {
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d10f      	bne.n	8000f64 <printTemplate+0x1d4>
			lcd_clear();
 8000f44:	f006 fd4c 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	@ 0x64
 8000f4a:	f007 fa77 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000ffc <printTemplate+0x26c>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	2001      	movs	r0, #1
 8000f54:	f006 fd18 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000f58:	4a25      	ldr	r2, [pc, #148]	@ (8000ff0 <printTemplate+0x260>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 fd13 	bl	8007988 <lcd_print>
}
 8000f62:	e024      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 4) {
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d10f      	bne.n	8000f8a <printTemplate+0x1fa>
			lcd_clear();
 8000f6a:	f006 fd39 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	@ 0x64
 8000f70:	f007 fa64 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <printTemplate+0x26c>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f006 fd05 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff4 <printTemplate+0x264>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	2002      	movs	r0, #2
 8000f84:	f006 fd00 	bl	8007988 <lcd_print>
}
 8000f88:	e011      	b.n	8000fae <printTemplate+0x21e>
		} else if(page == 5) {
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d10e      	bne.n	8000fae <printTemplate+0x21e>
			lcd_clear();
 8000f90:	f006 fd26 	bl	80079e0 <lcd_clear>
			HAL_Delay(100);
 8000f94:	2064      	movs	r0, #100	@ 0x64
 8000f96:	f007 fa51 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f9a:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <printTemplate+0x26c>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f006 fcf2 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000fa4:	4a14      	ldr	r2, [pc, #80]	@ (8000ff8 <printTemplate+0x268>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f006 fced 	bl	8007988 <lcd_print>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800cc58 	.word	0x0800cc58
 8000fbc:	0800cc60 	.word	0x0800cc60
 8000fc0:	0800cc64 	.word	0x0800cc64
 8000fc4:	0800cc68 	.word	0x0800cc68
 8000fc8:	0800cc6c 	.word	0x0800cc6c
 8000fcc:	0800cc70 	.word	0x0800cc70
 8000fd0:	0800cc74 	.word	0x0800cc74
 8000fd4:	0800cc78 	.word	0x0800cc78
 8000fd8:	0800cc7c 	.word	0x0800cc7c
 8000fdc:	0800cc80 	.word	0x0800cc80
 8000fe0:	0800cc84 	.word	0x0800cc84
 8000fe4:	0800cc88 	.word	0x0800cc88
 8000fe8:	0800cc90 	.word	0x0800cc90
 8000fec:	0800cca4 	.word	0x0800cca4
 8000ff0:	0800ccb8 	.word	0x0800ccb8
 8000ff4:	0800cccc 	.word	0x0800cccc
 8000ff8:	0800cce0 	.word	0x0800cce0
 8000ffc:	0800ccf4 	.word	0x0800ccf4

08001000 <checkSlideVal>:

int checkSlideVal(int state) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d111      	bne.n	8001032 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800100e:	2101      	movs	r1, #1
 8001010:	4813      	ldr	r0, [pc, #76]	@ (8001060 <checkSlideVal+0x60>)
 8001012:	f007 ffe3 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	d101      	bne.n	8001020 <checkSlideVal+0x20>
			return 34;
 800101c:	2322      	movs	r3, #34	@ 0x22
 800101e:	e01b      	b.n	8001058 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001020:	2108      	movs	r1, #8
 8001022:	4810      	ldr	r0, [pc, #64]	@ (8001064 <checkSlideVal+0x64>)
 8001024:	f007 ffda 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d113      	bne.n	8001056 <checkSlideVal+0x56>
			return 32;
 800102e:	2320      	movs	r3, #32
 8001030:	e012      	b.n	8001058 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001032:	2101      	movs	r1, #1
 8001034:	480a      	ldr	r0, [pc, #40]	@ (8001060 <checkSlideVal+0x60>)
 8001036:	f007 ffd1 	bl	8008fdc <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <checkSlideVal+0x44>
			return 35;
 8001040:	2323      	movs	r3, #35	@ 0x23
 8001042:	e009      	b.n	8001058 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001044:	2108      	movs	r1, #8
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <checkSlideVal+0x64>)
 8001048:	f007 ffc8 	bl	8008fdc <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <checkSlideVal+0x56>
			return 33;
 8001052:	2321      	movs	r3, #33	@ 0x21
 8001054:	e000      	b.n	8001058 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010800 	.word	0x40010800
 8001064:	40011000 	.word	0x40011000

08001068 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff f8d4 	bl	8000224 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 8001084:	e0aa      	b.n	80011dc <slideText+0x174>
		if(checkSlideVal(state) > 0) {
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f7ff ffba 	bl	8001000 <checkSlideVal>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	dd07      	ble.n	80010a2 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001092:	6838      	ldr	r0, [r7, #0]
 8001094:	f7ff ffb4 	bl	8001000 <checkSlideVal>
 8001098:	4603      	mov	r3, r0
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b54      	ldr	r3, [pc, #336]	@ (80011f0 <slideText+0x188>)
 800109e:	701a      	strb	r2, [r3, #0]
			break;
 80010a0:	e0a2      	b.n	80011e8 <slideText+0x180>
		}
		checkEditMode();
 80010a2:	f000 f935 	bl	8001310 <checkEditMode>
		if(editMode == 1) {
 80010a6:	4b53      	ldr	r3, [pc, #332]	@ (80011f4 <slideText+0x18c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	f000 809b 	beq.w	80011e6 <slideText+0x17e>
			break;
		}

		for(int z=0; z < uzunluk; z++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	e08b      	b.n	80011ce <slideText+0x166>
			if(checkSlideVal(state) > 0) {
 80010b6:	6838      	ldr	r0, [r7, #0]
 80010b8:	f7ff ffa2 	bl	8001000 <checkSlideVal>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dd09      	ble.n	80010d6 <slideText+0x6e>
				menuSayac = checkSlideVal(state);
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	f7ff ff9c 	bl	8001000 <checkSlideVal>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b48      	ldr	r3, [pc, #288]	@ (80011f0 <slideText+0x188>)
 80010ce:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 80010d4:	e082      	b.n	80011dc <slideText+0x174>
			}
			checkEditMode();
 80010d6:	f000 f91b 	bl	8001310 <checkEditMode>
			if(editMode == 1) {
 80010da:	4b46      	ldr	r3, [pc, #280]	@ (80011f4 <slideText+0x18c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d07b      	beq.n	80011da <slideText+0x172>
				break;
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	4413      	add	r3, r2
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e02f      	b.n	800114c <slideText+0xe4>
				if(checkSlideVal(state) > 0) {
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f7ff ff87 	bl	8001000 <checkSlideVal>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	dd0b      	ble.n	8001110 <slideText+0xa8>
					menuSayac = checkSlideVal(state);
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f7ff ff81 	bl	8001000 <checkSlideVal>
 80010fe:	4603      	mov	r3, r0
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b3b      	ldr	r3, [pc, #236]	@ (80011f0 <slideText+0x188>)
 8001104:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800110e:	e025      	b.n	800115c <slideText+0xf4>
				}
				checkEditMode();
 8001110:	f000 f8fe 	bl	8001310 <checkEditMode>
				if(editMode == 1) {
 8001114:	4b37      	ldr	r3, [pc, #220]	@ (80011f4 <slideText+0x18c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d01e      	beq.n	800115a <slideText+0xf2>
					break;
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	b2d8      	uxtb	r0, r3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b2d9      	uxtb	r1, r3
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	f006 fc39 	bl	80079b2 <lcd_print_char>
				HAL_Delay(30);
 8001140:	201e      	movs	r0, #30
 8001142:	f007 f97b 	bl	800843c <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	7dfa      	ldrb	r2, [r7, #23]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	4413      	add	r3, r2
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbc9      	blt.n	80010ec <slideText+0x84>
 8001158:	e000      	b.n	800115c <slideText+0xf4>
					break;
 800115a:	bf00      	nop
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	3b01      	subs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	e029      	b.n	80011b8 <slideText+0x150>
				if(checkSlideVal(state) > 0) {
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f7ff ff4b 	bl	8001000 <checkSlideVal>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd0b      	ble.n	8001188 <slideText+0x120>
					menuSayac = checkSlideVal(state);
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f7ff ff45 	bl	8001000 <checkSlideVal>
 8001176:	4603      	mov	r3, r0
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <slideText+0x188>)
 800117c:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001186:	e01f      	b.n	80011c8 <slideText+0x160>
				}
				checkEditMode();
 8001188:	f000 f8c2 	bl	8001310 <checkEditMode>
				if(editMode == 1) {
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <slideText+0x18c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d018      	beq.n	80011c6 <slideText+0x15e>
					break;
				}
			    if(j >= startPos) {
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	429a      	cmp	r2, r3
 800119a:	db0a      	blt.n	80011b2 <slideText+0x14a>
			    	lcd_print_char(startLine, j, ' ');
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	b2d1      	uxtb	r1, r2
 80011a4:	2220      	movs	r2, #32
 80011a6:	4618      	mov	r0, r3
 80011a8:	f006 fc03 	bl	80079b2 <lcd_print_char>
			    	HAL_Delay(30);
 80011ac:	201e      	movs	r0, #30
 80011ae:	f007 f945 	bl	800843c <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	7dfa      	ldrb	r2, [r7, #23]
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dacf      	bge.n	8001164 <slideText+0xfc>
 80011c4:	e000      	b.n	80011c8 <slideText+0x160>
					break;
 80011c6:	bf00      	nop
		for(int z=0; z < uzunluk; z++) {
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	3301      	adds	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	6a3a      	ldr	r2, [r7, #32]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	f6ff af6f 	blt.w	80010b6 <slideText+0x4e>
 80011d8:	e000      	b.n	80011dc <slideText+0x174>
				break;
 80011da:	bf00      	nop
	while(mainLoopVal == 1) {
 80011dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011de:	2b01      	cmp	r3, #1
 80011e0:	f43f af51 	beq.w	8001086 <slideText+0x1e>
			    }
			}
		}
	}
}
 80011e4:	e000      	b.n	80011e8 <slideText+0x180>
			break;
 80011e6:	bf00      	nop
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	@ 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000210 	.word	0x20000210
 80011f4:	20000208 	.word	0x20000208

080011f8 <printCredentials>:

void printCredentials(int type) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d119      	bne.n	800123a <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 8001206:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <printCredentials+0xf0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 800120e:	4a37      	ldr	r2, [pc, #220]	@ (80012ec <printCredentials+0xf4>)
 8001210:	2101      	movs	r1, #1
 8001212:	2001      	movs	r0, #1
 8001214:	f006 fbb8 	bl	8007988 <lcd_print>
 8001218:	e004      	b.n	8001224 <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 800121a:	4a35      	ldr	r2, [pc, #212]	@ (80012f0 <printCredentials+0xf8>)
 800121c:	2101      	movs	r1, #1
 800121e:	2001      	movs	r0, #1
 8001220:	f006 fbb2 	bl	8007988 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8001224:	4a33      	ldr	r2, [pc, #204]	@ (80012f4 <printCredentials+0xfc>)
 8001226:	2101      	movs	r1, #1
 8001228:	2002      	movs	r0, #2
 800122a:	f006 fbad 	bl	8007988 <lcd_print>
		lcd_print(2, 13, "    ");
 800122e:	4a32      	ldr	r2, [pc, #200]	@ (80012f8 <printCredentials+0x100>)
 8001230:	210d      	movs	r1, #13
 8001232:	2002      	movs	r0, #2
 8001234:	f006 fba8 	bl	8007988 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 8001238:	e051      	b.n	80012de <printCredentials+0xe6>
	} else if(type == 2) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d127      	bne.n	8001290 <printCredentials+0x98>
		int ssidLength = strlen(wifiSSID);
 8001240:	482e      	ldr	r0, [pc, #184]	@ (80012fc <printCredentials+0x104>)
 8001242:	f7fe ffef 	bl	8000224 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 800124a:	4a2d      	ldr	r2, [pc, #180]	@ (8001300 <printCredentials+0x108>)
 800124c:	2101      	movs	r1, #1
 800124e:	2001      	movs	r0, #1
 8001250:	f006 fb9a 	bl	8007988 <lcd_print>
		if(ssidLength == 16) {
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b10      	cmp	r3, #16
 8001258:	d105      	bne.n	8001266 <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 800125a:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <printCredentials+0x104>)
 800125c:	2101      	movs	r1, #1
 800125e:	2002      	movs	r0, #2
 8001260:	f006 fb92 	bl	8007988 <lcd_print>
}
 8001264:	e03b      	b.n	80012de <printCredentials+0xe6>
		} else if(ssidLength < 16) {
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	dc0a      	bgt.n	8001282 <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 800126c:	4a25      	ldr	r2, [pc, #148]	@ (8001304 <printCredentials+0x10c>)
 800126e:	2101      	movs	r1, #1
 8001270:	2002      	movs	r0, #2
 8001272:	f006 fb89 	bl	8007988 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <printCredentials+0x104>)
 8001278:	2101      	movs	r1, #1
 800127a:	2002      	movs	r0, #2
 800127c:	f006 fb84 	bl	8007988 <lcd_print>
}
 8001280:	e02d      	b.n	80012de <printCredentials+0xe6>
			slideText(wifiSSID, 1, 2, 0);
 8001282:	2300      	movs	r3, #0
 8001284:	2202      	movs	r2, #2
 8001286:	2101      	movs	r1, #1
 8001288:	481c      	ldr	r0, [pc, #112]	@ (80012fc <printCredentials+0x104>)
 800128a:	f7ff feed 	bl	8001068 <slideText>
}
 800128e:	e026      	b.n	80012de <printCredentials+0xe6>
		int passLength = strlen(wifiPass);
 8001290:	481d      	ldr	r0, [pc, #116]	@ (8001308 <printCredentials+0x110>)
 8001292:	f7fe ffc7 	bl	8000224 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <printCredentials+0x114>)
 800129c:	2101      	movs	r1, #1
 800129e:	2001      	movs	r0, #1
 80012a0:	f006 fb72 	bl	8007988 <lcd_print>
		if(passLength == 16) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d105      	bne.n	80012b6 <printCredentials+0xbe>
			lcd_print(2, 1, wifiPass);
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <printCredentials+0x110>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	2002      	movs	r0, #2
 80012b0:	f006 fb6a 	bl	8007988 <lcd_print>
}
 80012b4:	e013      	b.n	80012de <printCredentials+0xe6>
		} else if(passLength < 16) {
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	dc0a      	bgt.n	80012d2 <printCredentials+0xda>
			lcd_print(2, 1, "                ");
 80012bc:	4a11      	ldr	r2, [pc, #68]	@ (8001304 <printCredentials+0x10c>)
 80012be:	2101      	movs	r1, #1
 80012c0:	2002      	movs	r0, #2
 80012c2:	f006 fb61 	bl	8007988 <lcd_print>
			lcd_print(2, 1, wifiPass);
 80012c6:	4a10      	ldr	r2, [pc, #64]	@ (8001308 <printCredentials+0x110>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	2002      	movs	r0, #2
 80012cc:	f006 fb5c 	bl	8007988 <lcd_print>
}
 80012d0:	e005      	b.n	80012de <printCredentials+0xe6>
			slideText(wifiPass, 1, 2, 1);
 80012d2:	2301      	movs	r3, #1
 80012d4:	2202      	movs	r2, #2
 80012d6:	2101      	movs	r1, #1
 80012d8:	480b      	ldr	r0, [pc, #44]	@ (8001308 <printCredentials+0x110>)
 80012da:	f7ff fec5 	bl	8001068 <slideText>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000231 	.word	0x20000231
 80012ec:	0800ccfc 	.word	0x0800ccfc
 80012f0:	0800cd10 	.word	0x0800cd10
 80012f4:	200001b0 	.word	0x200001b0
 80012f8:	0800cd24 	.word	0x0800cd24
 80012fc:	200001bc 	.word	0x200001bc
 8001300:	0800cd2c 	.word	0x0800cd2c
 8001304:	0800cd40 	.word	0x0800cd40
 8001308:	200001d0 	.word	0x200001d0
 800130c:	0800cd54 	.word	0x0800cd54

08001310 <checkEditMode>:

void checkEditMode(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)) {
 8001314:	2102      	movs	r1, #2
 8001316:	4809      	ldr	r0, [pc, #36]	@ (800133c <checkEditMode+0x2c>)
 8001318:	f007 fe60 	bl	8008fdc <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d109      	bne.n	8001336 <checkEditMode+0x26>
 8001322:	2104      	movs	r1, #4
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <checkEditMode+0x2c>)
 8001326:	f007 fe59 	bl	8008fdc <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <checkEditMode+0x26>
		editMode = 1;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <checkEditMode+0x30>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
	}
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010800 	.word	0x40010800
 8001340:	20000208 	.word	0x20000208

08001344 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001348:	f3bf 8f4f 	dsb	sy
}
 800134c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <__NVIC_SystemReset+0x24>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001356:	4904      	ldr	r1, [pc, #16]	@ (8001368 <__NVIC_SystemReset+0x24>)
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_SystemReset+0x28>)
 800135a:	4313      	orrs	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800135e:	f3bf 8f4f 	dsb	sy
}
 8001362:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <__NVIC_SystemReset+0x20>
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	05fa0004 	.word	0x05fa0004

08001370 <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001376:	2101      	movs	r1, #1
 8001378:	488e      	ldr	r0, [pc, #568]	@ (80015b4 <menu+0x244>)
 800137a:	f007 fe2f 	bl	8008fdc <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 808e 	bne.w	80014a2 <menu+0x132>
 8001386:	4b8c      	ldr	r3, [pc, #560]	@ (80015b8 <menu+0x248>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f083 0301 	eor.w	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8086 	beq.w	80014a2 <menu+0x132>
		menuSayac = menuSayac+1;
 8001396:	4b89      	ldr	r3, [pc, #548]	@ (80015bc <menu+0x24c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b87      	ldr	r3, [pc, #540]	@ (80015bc <menu+0x24c>)
 80013a0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80013a2:	4b86      	ldr	r3, [pc, #536]	@ (80015bc <menu+0x24c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b24      	cmp	r3, #36	@ 0x24
 80013a8:	d102      	bne.n	80013b0 <menu+0x40>
			menuSayac = 1;
 80013aa:	4b84      	ldr	r3, [pc, #528]	@ (80015bc <menu+0x24c>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013b0:	4b82      	ldr	r3, [pc, #520]	@ (80015bc <menu+0x24c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b12      	cmp	r3, #18
 80013b6:	d106      	bne.n	80013c6 <menu+0x56>
 80013b8:	4b81      	ldr	r3, [pc, #516]	@ (80015c0 <menu+0x250>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <menu+0x56>
			menuSayac = 21;
 80013c0:	4b7e      	ldr	r3, [pc, #504]	@ (80015bc <menu+0x24c>)
 80013c2:	2215      	movs	r2, #21
 80013c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80013c6:	4b7d      	ldr	r3, [pc, #500]	@ (80015bc <menu+0x24c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d106      	bne.n	80013dc <menu+0x6c>
 80013ce:	4b7d      	ldr	r3, [pc, #500]	@ (80015c4 <menu+0x254>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <menu+0x6c>
			menuSayac = 16;
 80013d6:	4b79      	ldr	r3, [pc, #484]	@ (80015bc <menu+0x24c>)
 80013d8:	2210      	movs	r2, #16
 80013da:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80013dc:	4b77      	ldr	r3, [pc, #476]	@ (80015bc <menu+0x24c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b0d      	cmp	r3, #13
 80013e2:	d106      	bne.n	80013f2 <menu+0x82>
 80013e4:	4b77      	ldr	r3, [pc, #476]	@ (80015c4 <menu+0x254>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d102      	bne.n	80013f2 <menu+0x82>
			menuSayac = 16;
 80013ec:	4b73      	ldr	r3, [pc, #460]	@ (80015bc <menu+0x24c>)
 80013ee:	2210      	movs	r2, #16
 80013f0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013f2:	4b72      	ldr	r3, [pc, #456]	@ (80015bc <menu+0x24c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	d106      	bne.n	8001408 <menu+0x98>
 80013fa:	4b72      	ldr	r3, [pc, #456]	@ (80015c4 <menu+0x254>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d102      	bne.n	8001408 <menu+0x98>
			menuSayac = 13;
 8001402:	4b6e      	ldr	r3, [pc, #440]	@ (80015bc <menu+0x24c>)
 8001404:	220d      	movs	r2, #13
 8001406:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001408:	4b6c      	ldr	r3, [pc, #432]	@ (80015bc <menu+0x24c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d10a      	bne.n	8001426 <menu+0xb6>
 8001410:	4b6d      	ldr	r3, [pc, #436]	@ (80015c8 <menu+0x258>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d003      	beq.n	8001420 <menu+0xb0>
 8001418:	4b6b      	ldr	r3, [pc, #428]	@ (80015c8 <menu+0x258>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d102      	bne.n	8001426 <menu+0xb6>
			menuSayac = 11;
 8001420:	4b66      	ldr	r3, [pc, #408]	@ (80015bc <menu+0x24c>)
 8001422:	220b      	movs	r2, #11
 8001424:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001426:	4b65      	ldr	r3, [pc, #404]	@ (80015bc <menu+0x24c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b0c      	cmp	r3, #12
 800142c:	d10e      	bne.n	800144c <menu+0xdc>
 800142e:	4b67      	ldr	r3, [pc, #412]	@ (80015cc <menu+0x25c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d003      	beq.n	800143e <menu+0xce>
 8001436:	4b65      	ldr	r3, [pc, #404]	@ (80015cc <menu+0x25c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d106      	bne.n	800144c <menu+0xdc>
 800143e:	4b61      	ldr	r3, [pc, #388]	@ (80015c4 <menu+0x254>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <menu+0xdc>
			menuSayac = 16;
 8001446:	4b5d      	ldr	r3, [pc, #372]	@ (80015bc <menu+0x24c>)
 8001448:	2210      	movs	r2, #16
 800144a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800144c:	4b5b      	ldr	r3, [pc, #364]	@ (80015bc <menu+0x24c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d10e      	bne.n	8001472 <menu+0x102>
 8001454:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <menu+0x25c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d003      	beq.n	8001464 <menu+0xf4>
 800145c:	4b5b      	ldr	r3, [pc, #364]	@ (80015cc <menu+0x25c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d106      	bne.n	8001472 <menu+0x102>
 8001464:	4b57      	ldr	r3, [pc, #348]	@ (80015c4 <menu+0x254>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d102      	bne.n	8001472 <menu+0x102>
			menuSayac = 13;
 800146c:	4b53      	ldr	r3, [pc, #332]	@ (80015bc <menu+0x24c>)
 800146e:	220d      	movs	r2, #13
 8001470:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001472:	4b52      	ldr	r3, [pc, #328]	@ (80015bc <menu+0x24c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d106      	bne.n	8001488 <menu+0x118>
 800147a:	4b55      	ldr	r3, [pc, #340]	@ (80015d0 <menu+0x260>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d102      	bne.n	8001488 <menu+0x118>
			menuSayac = 16;
 8001482:	4b4e      	ldr	r3, [pc, #312]	@ (80015bc <menu+0x24c>)
 8001484:	2210      	movs	r2, #16
 8001486:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001488:	4b4c      	ldr	r3, [pc, #304]	@ (80015bc <menu+0x24c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b18      	cmp	r3, #24
 800148e:	d106      	bne.n	800149e <menu+0x12e>
 8001490:	4b4b      	ldr	r3, [pc, #300]	@ (80015c0 <menu+0x250>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <menu+0x12e>
			menuSayac = 26;
 8001498:	4b48      	ldr	r3, [pc, #288]	@ (80015bc <menu+0x24c>)
 800149a:	221a      	movs	r2, #26
 800149c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800149e:	f003 f92b 	bl	80046f8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014a2:	2108      	movs	r1, #8
 80014a4:	484b      	ldr	r0, [pc, #300]	@ (80015d4 <menu+0x264>)
 80014a6:	f007 fd99 	bl	8008fdc <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d175      	bne.n	800159c <menu+0x22c>
 80014b0:	4b41      	ldr	r3, [pc, #260]	@ (80015b8 <menu+0x248>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	f083 0301 	eor.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d06e      	beq.n	800159c <menu+0x22c>
		if (menuSayac <= 1) {
 80014be:	4b3f      	ldr	r3, [pc, #252]	@ (80015bc <menu+0x24c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d802      	bhi.n	80014cc <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80014c6:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <menu+0x24c>)
 80014c8:	2224      	movs	r2, #36	@ 0x24
 80014ca:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80014cc:	4b3b      	ldr	r3, [pc, #236]	@ (80015bc <menu+0x24c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b39      	ldr	r3, [pc, #228]	@ (80015bc <menu+0x24c>)
 80014d6:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80014d8:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <menu+0x24c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b14      	cmp	r3, #20
 80014de:	d106      	bne.n	80014ee <menu+0x17e>
 80014e0:	4b37      	ldr	r3, [pc, #220]	@ (80015c0 <menu+0x250>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <menu+0x17e>
			menuSayac = 17;
 80014e8:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <menu+0x24c>)
 80014ea:	2211      	movs	r2, #17
 80014ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80014ee:	4b33      	ldr	r3, [pc, #204]	@ (80015bc <menu+0x24c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d106      	bne.n	8001504 <menu+0x194>
 80014f6:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <menu+0x254>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <menu+0x194>
			menuSayac = 7;
 80014fe:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <menu+0x24c>)
 8001500:	2207      	movs	r2, #7
 8001502:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001504:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <menu+0x24c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d106      	bne.n	800151a <menu+0x1aa>
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <menu+0x254>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d102      	bne.n	800151a <menu+0x1aa>
			menuSayac = 12;
 8001514:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <menu+0x24c>)
 8001516:	220c      	movs	r2, #12
 8001518:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800151a:	4b28      	ldr	r3, [pc, #160]	@ (80015bc <menu+0x24c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d106      	bne.n	8001530 <menu+0x1c0>
 8001522:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <menu+0x254>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d102      	bne.n	8001530 <menu+0x1c0>
			menuSayac = 8;
 800152a:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <menu+0x24c>)
 800152c:	2208      	movs	r2, #8
 800152e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <menu+0x24c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b0a      	cmp	r3, #10
 8001536:	d10a      	bne.n	800154e <menu+0x1de>
 8001538:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <menu+0x258>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d003      	beq.n	8001548 <menu+0x1d8>
 8001540:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <menu+0x258>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d102      	bne.n	800154e <menu+0x1de>
			menuSayac = 9;
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <menu+0x24c>)
 800154a:	2209      	movs	r2, #9
 800154c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <menu+0x24c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b0c      	cmp	r3, #12
 8001554:	d10a      	bne.n	800156c <menu+0x1fc>
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <menu+0x25c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d003      	beq.n	8001566 <menu+0x1f6>
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <menu+0x25c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d102      	bne.n	800156c <menu+0x1fc>
			menuSayac = 11;
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <menu+0x24c>)
 8001568:	220b      	movs	r2, #11
 800156a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <menu+0x24c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d106      	bne.n	8001582 <menu+0x212>
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <menu+0x260>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d102      	bne.n	8001582 <menu+0x212>
			menuSayac = 14;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <menu+0x24c>)
 800157e:	220e      	movs	r2, #14
 8001580:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <menu+0x24c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b19      	cmp	r3, #25
 8001588:	d106      	bne.n	8001598 <menu+0x228>
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <menu+0x250>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <menu+0x228>
			menuSayac = 23;
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <menu+0x24c>)
 8001594:	2217      	movs	r2, #23
 8001596:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001598:	f003 f8ae 	bl	80046f8 <bekle>
	}

	if (menuSayac == 0) {
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <menu+0x24c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d133      	bne.n	800160c <menu+0x29c>
		if(dilSecim == 0) {
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <menu+0x268>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d121      	bne.n	80015f0 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80015ac:	4a0b      	ldr	r2, [pc, #44]	@ (80015dc <menu+0x26c>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	2001      	movs	r0, #1
 80015b2:	e015      	b.n	80015e0 <menu+0x270>
 80015b4:	40010800 	.word	0x40010800
 80015b8:	2000023f 	.word	0x2000023f
 80015bc:	20000210 	.word	0x20000210
 80015c0:	2000021f 	.word	0x2000021f
 80015c4:	20000218 	.word	0x20000218
 80015c8:	20000219 	.word	0x20000219
 80015cc:	2000021a 	.word	0x2000021a
 80015d0:	2000021b 	.word	0x2000021b
 80015d4:	40011000 	.word	0x40011000
 80015d8:	20000231 	.word	0x20000231
 80015dc:	0800cd68 	.word	0x0800cd68
 80015e0:	f006 f9d2 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80015e4:	4aaa      	ldr	r2, [pc, #680]	@ (8001890 <menu+0x520>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	2002      	movs	r0, #2
 80015ea:	f006 f9cd 	bl	8007988 <lcd_print>
 80015ee:	e00d      	b.n	800160c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80015f0:	4ba8      	ldr	r3, [pc, #672]	@ (8001894 <menu+0x524>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d109      	bne.n	800160c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80015f8:	4aa7      	ldr	r2, [pc, #668]	@ (8001898 <menu+0x528>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	2001      	movs	r0, #1
 80015fe:	f006 f9c3 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001602:	4aa6      	ldr	r2, [pc, #664]	@ (800189c <menu+0x52c>)
 8001604:	2101      	movs	r1, #1
 8001606:	2002      	movs	r0, #2
 8001608:	f006 f9be 	bl	8007988 <lcd_print>

		//lcd_print(1, 1, menuyeGirildiText);
		//lcd_print(2, 1, ayarlarText);
	}

	if (menuSayac == 1) {
 800160c:	4ba4      	ldr	r3, [pc, #656]	@ (80018a0 <menu+0x530>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	f040 826f 	bne.w	8001af4 <menu+0x784>
		if(dilSecim == 0) {
 8001616:	4b9f      	ldr	r3, [pc, #636]	@ (8001894 <menu+0x524>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d105      	bne.n	800162a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800161e:	4aa1      	ldr	r2, [pc, #644]	@ (80018a4 <menu+0x534>)
 8001620:	2101      	movs	r1, #1
 8001622:	2001      	movs	r0, #1
 8001624:	f006 f9b0 	bl	8007988 <lcd_print>
 8001628:	e004      	b.n	8001634 <menu+0x2c4>
		} else {
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800162a:	4a9f      	ldr	r2, [pc, #636]	@ (80018a8 <menu+0x538>)
 800162c:	2101      	movs	r1, #1
 800162e:	2001      	movs	r0, #1
 8001630:	f006 f9aa 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, hataKayitListText);

		if(hataGostermeSirasi == 0) {
 8001634:	4b9d      	ldr	r3, [pc, #628]	@ (80018ac <menu+0x53c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11f      	bne.n	800167c <menu+0x30c>
			if(dilSecim == 0) {
 800163c:	4b95      	ldr	r3, [pc, #596]	@ (8001894 <menu+0x524>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <menu+0x2e0>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001644:	4a9a      	ldr	r2, [pc, #616]	@ (80018b0 <menu+0x540>)
 8001646:	2101      	movs	r1, #1
 8001648:	2002      	movs	r0, #2
 800164a:	f006 f99d 	bl	8007988 <lcd_print>
 800164e:	e004      	b.n	800165a <menu+0x2ea>

			} else {
				lcd_print(2, 1, "1.Error Code:");
 8001650:	4a98      	ldr	r2, [pc, #608]	@ (80018b4 <menu+0x544>)
 8001652:	2101      	movs	r1, #1
 8001654:	2002      	movs	r0, #2
 8001656:	f006 f997 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, birHataKoduText);
			lcd_print(2, 15, "   ");
 800165a:	4a97      	ldr	r2, [pc, #604]	@ (80018b8 <menu+0x548>)
 800165c:	210f      	movs	r1, #15
 800165e:	2002      	movs	r0, #2
 8001660:	f006 f992 	bl	8007988 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001664:	4b95      	ldr	r3, [pc, #596]	@ (80018bc <menu+0x54c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	220a      	movs	r2, #10
 800166a:	4995      	ldr	r1, [pc, #596]	@ (80018c0 <menu+0x550>)
 800166c:	4618      	mov	r0, r3
 800166e:	f00a fce1 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 8001672:	4a93      	ldr	r2, [pc, #588]	@ (80018c0 <menu+0x550>)
 8001674:	210e      	movs	r1, #14
 8001676:	2002      	movs	r0, #2
 8001678:	f006 f986 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800167c:	4b8b      	ldr	r3, [pc, #556]	@ (80018ac <menu+0x53c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d11f      	bne.n	80016c4 <menu+0x354>
			if(dilSecim == 0) {
 8001684:	4b83      	ldr	r3, [pc, #524]	@ (8001894 <menu+0x524>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <menu+0x328>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800168c:	4a8d      	ldr	r2, [pc, #564]	@ (80018c4 <menu+0x554>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f006 f979 	bl	8007988 <lcd_print>
 8001696:	e004      	b.n	80016a2 <menu+0x332>
			} else {
				lcd_print(2, 1, "2.Error Code:");
 8001698:	4a8b      	ldr	r2, [pc, #556]	@ (80018c8 <menu+0x558>)
 800169a:	2101      	movs	r1, #1
 800169c:	2002      	movs	r0, #2
 800169e:	f006 f973 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, ikiHataKoduText);
			lcd_print(2, 15, "  ");
 80016a2:	4a8a      	ldr	r2, [pc, #552]	@ (80018cc <menu+0x55c>)
 80016a4:	210f      	movs	r1, #15
 80016a6:	2002      	movs	r0, #2
 80016a8:	f006 f96e 	bl	8007988 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80016ac:	4b88      	ldr	r3, [pc, #544]	@ (80018d0 <menu+0x560>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	220a      	movs	r2, #10
 80016b2:	4983      	ldr	r1, [pc, #524]	@ (80018c0 <menu+0x550>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00a fcbd 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 80016ba:	4a81      	ldr	r2, [pc, #516]	@ (80018c0 <menu+0x550>)
 80016bc:	210e      	movs	r1, #14
 80016be:	2002      	movs	r0, #2
 80016c0:	f006 f962 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80016c4:	4b79      	ldr	r3, [pc, #484]	@ (80018ac <menu+0x53c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d11f      	bne.n	800170c <menu+0x39c>
			if(dilSecim == 0) {
 80016cc:	4b71      	ldr	r3, [pc, #452]	@ (8001894 <menu+0x524>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <menu+0x370>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80016d4:	4a7f      	ldr	r2, [pc, #508]	@ (80018d4 <menu+0x564>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	2002      	movs	r0, #2
 80016da:	f006 f955 	bl	8007988 <lcd_print>
 80016de:	e004      	b.n	80016ea <menu+0x37a>
			} else {
				lcd_print(2, 1, "3.Error Code:");
 80016e0:	4a7d      	ldr	r2, [pc, #500]	@ (80018d8 <menu+0x568>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2002      	movs	r0, #2
 80016e6:	f006 f94f 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, ucHataKoduText);
			lcd_print(2, 15, "  ");
 80016ea:	4a78      	ldr	r2, [pc, #480]	@ (80018cc <menu+0x55c>)
 80016ec:	210f      	movs	r1, #15
 80016ee:	2002      	movs	r0, #2
 80016f0:	f006 f94a 	bl	8007988 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80016f4:	4b79      	ldr	r3, [pc, #484]	@ (80018dc <menu+0x56c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	220a      	movs	r2, #10
 80016fa:	4971      	ldr	r1, [pc, #452]	@ (80018c0 <menu+0x550>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00a fc99 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 8001702:	4a6f      	ldr	r2, [pc, #444]	@ (80018c0 <menu+0x550>)
 8001704:	210e      	movs	r1, #14
 8001706:	2002      	movs	r0, #2
 8001708:	f006 f93e 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800170c:	4b67      	ldr	r3, [pc, #412]	@ (80018ac <menu+0x53c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d11f      	bne.n	8001754 <menu+0x3e4>
			if(dilSecim == 0) {
 8001714:	4b5f      	ldr	r3, [pc, #380]	@ (8001894 <menu+0x524>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <menu+0x3b8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800171c:	4a70      	ldr	r2, [pc, #448]	@ (80018e0 <menu+0x570>)
 800171e:	2101      	movs	r1, #1
 8001720:	2002      	movs	r0, #2
 8001722:	f006 f931 	bl	8007988 <lcd_print>
 8001726:	e004      	b.n	8001732 <menu+0x3c2>
			} else {
				lcd_print(2, 1, "4.Error Code:");
 8001728:	4a6e      	ldr	r2, [pc, #440]	@ (80018e4 <menu+0x574>)
 800172a:	2101      	movs	r1, #1
 800172c:	2002      	movs	r0, #2
 800172e:	f006 f92b 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, dortHataKoduText);
			lcd_print(2, 15, "  ");
 8001732:	4a66      	ldr	r2, [pc, #408]	@ (80018cc <menu+0x55c>)
 8001734:	210f      	movs	r1, #15
 8001736:	2002      	movs	r0, #2
 8001738:	f006 f926 	bl	8007988 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800173c:	4b6a      	ldr	r3, [pc, #424]	@ (80018e8 <menu+0x578>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	220a      	movs	r2, #10
 8001742:	495f      	ldr	r1, [pc, #380]	@ (80018c0 <menu+0x550>)
 8001744:	4618      	mov	r0, r3
 8001746:	f00a fc75 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 800174a:	4a5d      	ldr	r2, [pc, #372]	@ (80018c0 <menu+0x550>)
 800174c:	210e      	movs	r1, #14
 800174e:	2002      	movs	r0, #2
 8001750:	f006 f91a 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001754:	4b55      	ldr	r3, [pc, #340]	@ (80018ac <menu+0x53c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d11f      	bne.n	800179c <menu+0x42c>
			if(dilSecim == 0) {
 800175c:	4b4d      	ldr	r3, [pc, #308]	@ (8001894 <menu+0x524>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <menu+0x400>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001764:	4a61      	ldr	r2, [pc, #388]	@ (80018ec <menu+0x57c>)
 8001766:	2101      	movs	r1, #1
 8001768:	2002      	movs	r0, #2
 800176a:	f006 f90d 	bl	8007988 <lcd_print>
 800176e:	e004      	b.n	800177a <menu+0x40a>
			} else {
				lcd_print(2, 1, "5.Error Code:");
 8001770:	4a5f      	ldr	r2, [pc, #380]	@ (80018f0 <menu+0x580>)
 8001772:	2101      	movs	r1, #1
 8001774:	2002      	movs	r0, #2
 8001776:	f006 f907 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, besHataKoduText);
			lcd_print(2, 15, "  ");
 800177a:	4a54      	ldr	r2, [pc, #336]	@ (80018cc <menu+0x55c>)
 800177c:	210f      	movs	r1, #15
 800177e:	2002      	movs	r0, #2
 8001780:	f006 f902 	bl	8007988 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001784:	4b5b      	ldr	r3, [pc, #364]	@ (80018f4 <menu+0x584>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	220a      	movs	r2, #10
 800178a:	494d      	ldr	r1, [pc, #308]	@ (80018c0 <menu+0x550>)
 800178c:	4618      	mov	r0, r3
 800178e:	f00a fc51 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 8001792:	4a4b      	ldr	r2, [pc, #300]	@ (80018c0 <menu+0x550>)
 8001794:	210e      	movs	r1, #14
 8001796:	2002      	movs	r0, #2
 8001798:	f006 f8f6 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800179c:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <menu+0x53c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d11f      	bne.n	80017e4 <menu+0x474>
			if(dilSecim == 0) {
 80017a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <menu+0x524>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <menu+0x448>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80017ac:	4a52      	ldr	r2, [pc, #328]	@ (80018f8 <menu+0x588>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	2002      	movs	r0, #2
 80017b2:	f006 f8e9 	bl	8007988 <lcd_print>
 80017b6:	e004      	b.n	80017c2 <menu+0x452>
			} else {
				lcd_print(2, 1, "6.Error Code:");
 80017b8:	4a50      	ldr	r2, [pc, #320]	@ (80018fc <menu+0x58c>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	2002      	movs	r0, #2
 80017be:	f006 f8e3 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, altiHataKoduText);
			lcd_print(2, 15, "  ");
 80017c2:	4a42      	ldr	r2, [pc, #264]	@ (80018cc <menu+0x55c>)
 80017c4:	210f      	movs	r1, #15
 80017c6:	2002      	movs	r0, #2
 80017c8:	f006 f8de 	bl	8007988 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80017cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001900 <menu+0x590>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	220a      	movs	r2, #10
 80017d2:	493b      	ldr	r1, [pc, #236]	@ (80018c0 <menu+0x550>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00a fc2d 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 80017da:	4a39      	ldr	r2, [pc, #228]	@ (80018c0 <menu+0x550>)
 80017dc:	210e      	movs	r1, #14
 80017de:	2002      	movs	r0, #2
 80017e0:	f006 f8d2 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80017e4:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <menu+0x53c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d11f      	bne.n	800182c <menu+0x4bc>
			if(dilSecim == 0) {
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <menu+0x524>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <menu+0x490>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80017f4:	4a43      	ldr	r2, [pc, #268]	@ (8001904 <menu+0x594>)
 80017f6:	2101      	movs	r1, #1
 80017f8:	2002      	movs	r0, #2
 80017fa:	f006 f8c5 	bl	8007988 <lcd_print>
 80017fe:	e004      	b.n	800180a <menu+0x49a>
			} else {
				lcd_print(2, 1, "7.Error Code:");
 8001800:	4a41      	ldr	r2, [pc, #260]	@ (8001908 <menu+0x598>)
 8001802:	2101      	movs	r1, #1
 8001804:	2002      	movs	r0, #2
 8001806:	f006 f8bf 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, yediHataKoduText);
			lcd_print(2, 15, "  ");
 800180a:	4a30      	ldr	r2, [pc, #192]	@ (80018cc <menu+0x55c>)
 800180c:	210f      	movs	r1, #15
 800180e:	2002      	movs	r0, #2
 8001810:	f006 f8ba 	bl	8007988 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001814:	4b3d      	ldr	r3, [pc, #244]	@ (800190c <menu+0x59c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	220a      	movs	r2, #10
 800181a:	4929      	ldr	r1, [pc, #164]	@ (80018c0 <menu+0x550>)
 800181c:	4618      	mov	r0, r3
 800181e:	f00a fc09 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 8001822:	4a27      	ldr	r2, [pc, #156]	@ (80018c0 <menu+0x550>)
 8001824:	210e      	movs	r1, #14
 8001826:	2002      	movs	r0, #2
 8001828:	f006 f8ae 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <menu+0x53c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b07      	cmp	r3, #7
 8001832:	d11f      	bne.n	8001874 <menu+0x504>
			if(dilSecim == 0) {
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <menu+0x524>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <menu+0x4d8>
				lcd_print(2, 1, "8.Hata Kodu: ");
 800183c:	4a34      	ldr	r2, [pc, #208]	@ (8001910 <menu+0x5a0>)
 800183e:	2101      	movs	r1, #1
 8001840:	2002      	movs	r0, #2
 8001842:	f006 f8a1 	bl	8007988 <lcd_print>
 8001846:	e004      	b.n	8001852 <menu+0x4e2>
			} else {
				lcd_print(2, 1, "8.Error Code:");
 8001848:	4a32      	ldr	r2, [pc, #200]	@ (8001914 <menu+0x5a4>)
 800184a:	2101      	movs	r1, #1
 800184c:	2002      	movs	r0, #2
 800184e:	f006 f89b 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, sekizHataKoduText);
			lcd_print(2, 15, "  ");
 8001852:	4a1e      	ldr	r2, [pc, #120]	@ (80018cc <menu+0x55c>)
 8001854:	210f      	movs	r1, #15
 8001856:	2002      	movs	r0, #2
 8001858:	f006 f896 	bl	8007988 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <menu+0x5a8>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	220a      	movs	r2, #10
 8001862:	4917      	ldr	r1, [pc, #92]	@ (80018c0 <menu+0x550>)
 8001864:	4618      	mov	r0, r3
 8001866:	f00a fbe5 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 800186a:	4a15      	ldr	r2, [pc, #84]	@ (80018c0 <menu+0x550>)
 800186c:	210e      	movs	r1, #14
 800186e:	2002      	movs	r0, #2
 8001870:	f006 f88a 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <menu+0x53c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b08      	cmp	r3, #8
 800187a:	d167      	bne.n	800194c <menu+0x5dc>
			if(dilSecim == 0) {
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <menu+0x524>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d14d      	bne.n	8001920 <menu+0x5b0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001884:	4a25      	ldr	r2, [pc, #148]	@ (800191c <menu+0x5ac>)
 8001886:	2101      	movs	r1, #1
 8001888:	2002      	movs	r0, #2
 800188a:	f006 f87d 	bl	8007988 <lcd_print>
 800188e:	e04c      	b.n	800192a <menu+0x5ba>
 8001890:	0800cd7c 	.word	0x0800cd7c
 8001894:	20000231 	.word	0x20000231
 8001898:	0800cd90 	.word	0x0800cd90
 800189c:	0800cda4 	.word	0x0800cda4
 80018a0:	20000210 	.word	0x20000210
 80018a4:	0800cdb8 	.word	0x0800cdb8
 80018a8:	0800cdcc 	.word	0x0800cdcc
 80018ac:	20000212 	.word	0x20000212
 80018b0:	0800cde0 	.word	0x0800cde0
 80018b4:	0800cdf0 	.word	0x0800cdf0
 80018b8:	0800ce00 	.word	0x0800ce00
 80018bc:	20000232 	.word	0x20000232
 80018c0:	200001a8 	.word	0x200001a8
 80018c4:	0800ce04 	.word	0x0800ce04
 80018c8:	0800ce14 	.word	0x0800ce14
 80018cc:	0800ce24 	.word	0x0800ce24
 80018d0:	20000233 	.word	0x20000233
 80018d4:	0800ce28 	.word	0x0800ce28
 80018d8:	0800ce38 	.word	0x0800ce38
 80018dc:	20000234 	.word	0x20000234
 80018e0:	0800ce48 	.word	0x0800ce48
 80018e4:	0800ce58 	.word	0x0800ce58
 80018e8:	20000235 	.word	0x20000235
 80018ec:	0800ce68 	.word	0x0800ce68
 80018f0:	0800ce78 	.word	0x0800ce78
 80018f4:	20000236 	.word	0x20000236
 80018f8:	0800ce88 	.word	0x0800ce88
 80018fc:	0800ce98 	.word	0x0800ce98
 8001900:	20000237 	.word	0x20000237
 8001904:	0800cea8 	.word	0x0800cea8
 8001908:	0800ceb8 	.word	0x0800ceb8
 800190c:	20000238 	.word	0x20000238
 8001910:	0800cec8 	.word	0x0800cec8
 8001914:	0800ced8 	.word	0x0800ced8
 8001918:	20000239 	.word	0x20000239
 800191c:	0800cee8 	.word	0x0800cee8
			} else {
				lcd_print(2, 1, "9.Error Code:");
 8001920:	4a9e      	ldr	r2, [pc, #632]	@ (8001b9c <menu+0x82c>)
 8001922:	2101      	movs	r1, #1
 8001924:	2002      	movs	r0, #2
 8001926:	f006 f82f 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, dokuzHataKoduText);
			lcd_print(2, 15, "  ");
 800192a:	4a9d      	ldr	r2, [pc, #628]	@ (8001ba0 <menu+0x830>)
 800192c:	210f      	movs	r1, #15
 800192e:	2002      	movs	r0, #2
 8001930:	f006 f82a 	bl	8007988 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001934:	4b9b      	ldr	r3, [pc, #620]	@ (8001ba4 <menu+0x834>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	220a      	movs	r2, #10
 800193a:	499b      	ldr	r1, [pc, #620]	@ (8001ba8 <menu+0x838>)
 800193c:	4618      	mov	r0, r3
 800193e:	f00a fb79 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 8001942:	4a99      	ldr	r2, [pc, #612]	@ (8001ba8 <menu+0x838>)
 8001944:	210e      	movs	r1, #14
 8001946:	2002      	movs	r0, #2
 8001948:	f006 f81e 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800194c:	4b97      	ldr	r3, [pc, #604]	@ (8001bac <menu+0x83c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b09      	cmp	r3, #9
 8001952:	d11f      	bne.n	8001994 <menu+0x624>
			if(dilSecim == 0) {
 8001954:	4b96      	ldr	r3, [pc, #600]	@ (8001bb0 <menu+0x840>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <menu+0x5f8>
				lcd_print(2, 1, "10.Hata Kodu: ");
 800195c:	4a95      	ldr	r2, [pc, #596]	@ (8001bb4 <menu+0x844>)
 800195e:	2101      	movs	r1, #1
 8001960:	2002      	movs	r0, #2
 8001962:	f006 f811 	bl	8007988 <lcd_print>
 8001966:	e004      	b.n	8001972 <menu+0x602>
			} else {
				lcd_print(2, 1, "10.Error Code:");
 8001968:	4a93      	ldr	r2, [pc, #588]	@ (8001bb8 <menu+0x848>)
 800196a:	2101      	movs	r1, #1
 800196c:	2002      	movs	r0, #2
 800196e:	f006 f80b 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, onHataKoduText);
			lcd_print(2, 16, " ");
 8001972:	4a92      	ldr	r2, [pc, #584]	@ (8001bbc <menu+0x84c>)
 8001974:	2110      	movs	r1, #16
 8001976:	2002      	movs	r0, #2
 8001978:	f006 f806 	bl	8007988 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800197c:	4b90      	ldr	r3, [pc, #576]	@ (8001bc0 <menu+0x850>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	220a      	movs	r2, #10
 8001982:	4989      	ldr	r1, [pc, #548]	@ (8001ba8 <menu+0x838>)
 8001984:	4618      	mov	r0, r3
 8001986:	f00a fb55 	bl	800c034 <itoa>
			lcd_print(2, 15, snum);
 800198a:	4a87      	ldr	r2, [pc, #540]	@ (8001ba8 <menu+0x838>)
 800198c:	210f      	movs	r1, #15
 800198e:	2002      	movs	r0, #2
 8001990:	f005 fffa 	bl	8007988 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001994:	4b85      	ldr	r3, [pc, #532]	@ (8001bac <menu+0x83c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b0a      	cmp	r3, #10
 800199a:	d10e      	bne.n	80019ba <menu+0x64a>
			if(dilSecim == 0) {
 800199c:	4b84      	ldr	r3, [pc, #528]	@ (8001bb0 <menu+0x840>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <menu+0x640>
				lcd_print(2, 1, "Silmek icin ent.");
 80019a4:	4a87      	ldr	r2, [pc, #540]	@ (8001bc4 <menu+0x854>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	2002      	movs	r0, #2
 80019aa:	f005 ffed 	bl	8007988 <lcd_print>
 80019ae:	e004      	b.n	80019ba <menu+0x64a>
			} else {
				lcd_print(2, 1, "Del. press enter");
 80019b0:	4a85      	ldr	r2, [pc, #532]	@ (8001bc8 <menu+0x858>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	2002      	movs	r0, #2
 80019b6:	f005 ffe7 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, silmekIcinText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019ba:	2102      	movs	r1, #2
 80019bc:	4883      	ldr	r0, [pc, #524]	@ (8001bcc <menu+0x85c>)
 80019be:	f007 fb0d 	bl	8008fdc <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d119      	bne.n	80019fc <menu+0x68c>
 80019c8:	4b81      	ldr	r3, [pc, #516]	@ (8001bd0 <menu+0x860>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	f083 0301 	eor.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d012      	beq.n	80019fc <menu+0x68c>
 80019d6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bd4 <menu+0x864>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10e      	bne.n	80019fc <menu+0x68c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80019de:	4b73      	ldr	r3, [pc, #460]	@ (8001bac <menu+0x83c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b71      	ldr	r3, [pc, #452]	@ (8001bac <menu+0x83c>)
 80019e8:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80019ea:	4b70      	ldr	r3, [pc, #448]	@ (8001bac <menu+0x83c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b0a      	cmp	r3, #10
 80019f0:	d902      	bls.n	80019f8 <menu+0x688>
				hataGostermeSirasi = 0;
 80019f2:	4b6e      	ldr	r3, [pc, #440]	@ (8001bac <menu+0x83c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019f8:	f002 fe7e 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019fc:	2104      	movs	r1, #4
 80019fe:	4873      	ldr	r0, [pc, #460]	@ (8001bcc <menu+0x85c>)
 8001a00:	f007 faec 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d119      	bne.n	8001a3e <menu+0x6ce>
 8001a0a:	4b71      	ldr	r3, [pc, #452]	@ (8001bd0 <menu+0x860>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	f083 0301 	eor.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <menu+0x6ce>
 8001a18:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <menu+0x864>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10e      	bne.n	8001a3e <menu+0x6ce>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a20:	4b62      	ldr	r3, [pc, #392]	@ (8001bac <menu+0x83c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b60      	ldr	r3, [pc, #384]	@ (8001bac <menu+0x83c>)
 8001a2a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001bac <menu+0x83c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b0b      	cmp	r3, #11
 8001a32:	d902      	bls.n	8001a3a <menu+0x6ca>
	    		hataGostermeSirasi = 10;
 8001a34:	4b5d      	ldr	r3, [pc, #372]	@ (8001bac <menu+0x83c>)
 8001a36:	220a      	movs	r2, #10
 8001a38:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a3a:	f002 fe5d 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a3e:	2108      	movs	r1, #8
 8001a40:	4862      	ldr	r0, [pc, #392]	@ (8001bcc <menu+0x85c>)
 8001a42:	f007 facb 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d153      	bne.n	8001af4 <menu+0x784>
 8001a4c:	4b60      	ldr	r3, [pc, #384]	@ (8001bd0 <menu+0x860>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d04c      	beq.n	8001af4 <menu+0x784>
 8001a5a:	4b54      	ldr	r3, [pc, #336]	@ (8001bac <menu+0x83c>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d148      	bne.n	8001af4 <menu+0x784>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a62:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd8 <menu+0x868>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	4b5c      	ldr	r3, [pc, #368]	@ (8001bdc <menu+0x86c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a70:	4b5b      	ldr	r3, [pc, #364]	@ (8001be0 <menu+0x870>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <menu+0x86c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a7e:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <menu+0x874>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	4b55      	ldr	r3, [pc, #340]	@ (8001bdc <menu+0x86c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001a8c:	4b56      	ldr	r3, [pc, #344]	@ (8001be8 <menu+0x878>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <menu+0x86c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001a9a:	4b54      	ldr	r3, [pc, #336]	@ (8001bec <menu+0x87c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	4b4e      	ldr	r3, [pc, #312]	@ (8001bdc <menu+0x86c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001aa8:	4b51      	ldr	r3, [pc, #324]	@ (8001bf0 <menu+0x880>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	4b4b      	ldr	r3, [pc, #300]	@ (8001bdc <menu+0x86c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf4 <menu+0x884>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <menu+0x86c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf8 <menu+0x888>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	4b44      	ldr	r3, [pc, #272]	@ (8001bdc <menu+0x86c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001ad2:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <menu+0x834>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	4b40      	ldr	r3, [pc, #256]	@ (8001bdc <menu+0x86c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001ae0:	4b37      	ldr	r3, [pc, #220]	@ (8001bc0 <menu+0x850>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bdc <menu+0x86c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001aee:	4b43      	ldr	r3, [pc, #268]	@ (8001bfc <menu+0x88c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001af4:	4b42      	ldr	r3, [pc, #264]	@ (8001c00 <menu+0x890>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	f040 80fa 	bne.w	8001cf2 <menu+0x982>
		if(dilSecim == 0) {
 8001afe:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <menu+0x840>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d105      	bne.n	8001b12 <menu+0x7a2>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b06:	4a3f      	ldr	r2, [pc, #252]	@ (8001c04 <menu+0x894>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f005 ff3c 	bl	8007988 <lcd_print>
 8001b10:	e004      	b.n	8001b1c <menu+0x7ac>
		} else {
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001b12:	4a3d      	ldr	r2, [pc, #244]	@ (8001c08 <menu+0x898>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	2001      	movs	r0, #1
 8001b18:	f005 ff36 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, calismaSekliText);

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <menu+0x864>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d003      	beq.n	8001b2c <menu+0x7bc>
 8001b24:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd4 <menu+0x864>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d10e      	bne.n	8001b4a <menu+0x7da>
			if(dilSecim == 0) {
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <menu+0x840>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <menu+0x7d0>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001b34:	4a35      	ldr	r2, [pc, #212]	@ (8001c0c <menu+0x89c>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f005 ff25 	bl	8007988 <lcd_print>
 8001b3e:	e004      	b.n	8001b4a <menu+0x7da>
			} else {
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b40:	4a33      	ldr	r2, [pc, #204]	@ (8001c10 <menu+0x8a0>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	2002      	movs	r0, #2
 8001b46:	f005 ff1f 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, devirmeYuruyusText);
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b4a:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <menu+0x8a4>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d112      	bne.n	8001b78 <menu+0x808>
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <menu+0x864>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10e      	bne.n	8001b78 <menu+0x808>
			if(dilSecim == 0) {
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <menu+0x840>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <menu+0x7fe>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001b62:	4a2d      	ldr	r2, [pc, #180]	@ (8001c18 <menu+0x8a8>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	2002      	movs	r0, #2
 8001b68:	f005 ff0e 	bl	8007988 <lcd_print>
 8001b6c:	e004      	b.n	8001b78 <menu+0x808>
			} else {
				lcd_print(2, 1, "Deadman Control");
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <menu+0x8ac>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	2002      	movs	r0, #2
 8001b74:	f005 ff08 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, bastikcaCalisanText);
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001b78:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <menu+0x8a4>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d156      	bne.n	8001c2e <menu+0x8be>
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <menu+0x864>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d152      	bne.n	8001c2e <menu+0x8be>
			if(dilSecim == 0) {
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <menu+0x840>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d149      	bne.n	8001c24 <menu+0x8b4>
				lcd_print(2, 1, "Bas gonder     ");
 8001b90:	4a23      	ldr	r2, [pc, #140]	@ (8001c20 <menu+0x8b0>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	2002      	movs	r0, #2
 8001b96:	f005 fef7 	bl	8007988 <lcd_print>
 8001b9a:	e048      	b.n	8001c2e <menu+0x8be>
 8001b9c:	0800cef8 	.word	0x0800cef8
 8001ba0:	0800ce24 	.word	0x0800ce24
 8001ba4:	2000023a 	.word	0x2000023a
 8001ba8:	200001a8 	.word	0x200001a8
 8001bac:	20000212 	.word	0x20000212
 8001bb0:	20000231 	.word	0x20000231
 8001bb4:	0800cf08 	.word	0x0800cf08
 8001bb8:	0800cf18 	.word	0x0800cf18
 8001bbc:	0800cf28 	.word	0x0800cf28
 8001bc0:	2000023b 	.word	0x2000023b
 8001bc4:	0800cf2c 	.word	0x0800cf2c
 8001bc8:	0800cf40 	.word	0x0800cf40
 8001bcc:	40010800 	.word	0x40010800
 8001bd0:	2000023f 	.word	0x2000023f
 8001bd4:	2000021f 	.word	0x2000021f
 8001bd8:	20000232 	.word	0x20000232
 8001bdc:	20000138 	.word	0x20000138
 8001be0:	20000233 	.word	0x20000233
 8001be4:	20000234 	.word	0x20000234
 8001be8:	20000235 	.word	0x20000235
 8001bec:	20000236 	.word	0x20000236
 8001bf0:	20000237 	.word	0x20000237
 8001bf4:	20000238 	.word	0x20000238
 8001bf8:	20000239 	.word	0x20000239
 8001bfc:	2000023c 	.word	0x2000023c
 8001c00:	20000210 	.word	0x20000210
 8001c04:	0800cf54 	.word	0x0800cf54
 8001c08:	0800cf68 	.word	0x0800cf68
 8001c0c:	0800cf7c 	.word	0x0800cf7c
 8001c10:	0800cf90 	.word	0x0800cf90
 8001c14:	20000211 	.word	0x20000211
 8001c18:	0800cfa4 	.word	0x0800cfa4
 8001c1c:	0800cfb4 	.word	0x0800cfb4
 8001c20:	0800cfc4 	.word	0x0800cfc4
			} else {
				lcd_print(2, 1, "Call & Send    ");
 8001c24:	4a8d      	ldr	r2, [pc, #564]	@ (8001e5c <menu+0xaec>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f005 fead 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, basGonderText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c2e:	2102      	movs	r1, #2
 8001c30:	488b      	ldr	r0, [pc, #556]	@ (8001e60 <menu+0xaf0>)
 8001c32:	f007 f9d3 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d119      	bne.n	8001c70 <menu+0x900>
 8001c3c:	4b89      	ldr	r3, [pc, #548]	@ (8001e64 <menu+0xaf4>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d012      	beq.n	8001c70 <menu+0x900>
 8001c4a:	4b87      	ldr	r3, [pc, #540]	@ (8001e68 <menu+0xaf8>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10e      	bne.n	8001c70 <menu+0x900>
			calismaSekli = calismaSekli + 1;
 8001c52:	4b86      	ldr	r3, [pc, #536]	@ (8001e6c <menu+0xafc>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b84      	ldr	r3, [pc, #528]	@ (8001e6c <menu+0xafc>)
 8001c5c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c5e:	4b83      	ldr	r3, [pc, #524]	@ (8001e6c <menu+0xafc>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d902      	bls.n	8001c6c <menu+0x8fc>
				calismaSekli = 0;
 8001c66:	4b81      	ldr	r3, [pc, #516]	@ (8001e6c <menu+0xafc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c6c:	f002 fd44 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c70:	2104      	movs	r1, #4
 8001c72:	487b      	ldr	r0, [pc, #492]	@ (8001e60 <menu+0xaf0>)
 8001c74:	f007 f9b2 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d119      	bne.n	8001cb2 <menu+0x942>
 8001c7e:	4b79      	ldr	r3, [pc, #484]	@ (8001e64 <menu+0xaf4>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f083 0301 	eor.w	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d012      	beq.n	8001cb2 <menu+0x942>
 8001c8c:	4b76      	ldr	r3, [pc, #472]	@ (8001e68 <menu+0xaf8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10e      	bne.n	8001cb2 <menu+0x942>
			calismaSekli = calismaSekli - 1;
 8001c94:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <menu+0xafc>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b73      	ldr	r3, [pc, #460]	@ (8001e6c <menu+0xafc>)
 8001c9e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001ca0:	4b72      	ldr	r3, [pc, #456]	@ (8001e6c <menu+0xafc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <menu+0x93e>
	    		calismaSekli = 1;
 8001ca8:	4b70      	ldr	r3, [pc, #448]	@ (8001e6c <menu+0xafc>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cae:	f002 fd23 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cb2:	2108      	movs	r1, #8
 8001cb4:	486a      	ldr	r0, [pc, #424]	@ (8001e60 <menu+0xaf0>)
 8001cb6:	f007 f991 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d118      	bne.n	8001cf2 <menu+0x982>
 8001cc0:	4b68      	ldr	r3, [pc, #416]	@ (8001e64 <menu+0xaf4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d011      	beq.n	8001cf2 <menu+0x982>
			eepromData[1] = calismaSekli;
 8001cce:	4b67      	ldr	r3, [pc, #412]	@ (8001e6c <menu+0xafc>)
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	4b67      	ldr	r3, [pc, #412]	@ (8001e70 <menu+0xb00>)
 8001cd4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001cd6:	4b65      	ldr	r3, [pc, #404]	@ (8001e6c <menu+0xafc>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d106      	bne.n	8001cec <menu+0x97c>
				altLimit = 1;
 8001cde:	4b65      	ldr	r3, [pc, #404]	@ (8001e74 <menu+0xb04>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ce4:	4b63      	ldr	r3, [pc, #396]	@ (8001e74 <menu+0xb04>)
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	4b61      	ldr	r3, [pc, #388]	@ (8001e70 <menu+0xb00>)
 8001cea:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001cec:	4b62      	ldr	r3, [pc, #392]	@ (8001e78 <menu+0xb08>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001cf2:	4b62      	ldr	r3, [pc, #392]	@ (8001e7c <menu+0xb0c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d17a      	bne.n	8001df0 <menu+0xa80>
		if(dilSecim == 0) {
 8001cfa:	4b61      	ldr	r3, [pc, #388]	@ (8001e80 <menu+0xb10>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <menu+0x99e>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d02:	4a60      	ldr	r2, [pc, #384]	@ (8001e84 <menu+0xb14>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	2001      	movs	r0, #1
 8001d08:	f005 fe3e 	bl	8007988 <lcd_print>
 8001d0c:	e004      	b.n	8001d18 <menu+0x9a8>
		} else {
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001d0e:	4a5e      	ldr	r2, [pc, #376]	@ (8001e88 <menu+0xb18>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	2001      	movs	r0, #1
 8001d14:	f005 fe38 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, emniyetCercevesiText);

		if(emniyetCercevesi == 0) {
 8001d18:	4b5c      	ldr	r3, [pc, #368]	@ (8001e8c <menu+0xb1c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10f      	bne.n	8001d40 <menu+0x9d0>
			if(dilSecim == 0) {
 8001d20:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <menu+0xb10>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <menu+0x9c4>
				lcd_print(2, 1, "Pasif           ");
 8001d28:	4a59      	ldr	r2, [pc, #356]	@ (8001e90 <menu+0xb20>)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f005 fe2b 	bl	8007988 <lcd_print>
 8001d32:	e00e      	b.n	8001d52 <menu+0x9e2>
			} else {
				lcd_print(2, 1, "Passive         ");
 8001d34:	4a57      	ldr	r2, [pc, #348]	@ (8001e94 <menu+0xb24>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f005 fe25 	bl	8007988 <lcd_print>
 8001d3e:	e008      	b.n	8001d52 <menu+0x9e2>
			}
			//lcd_print(2, 1, pasifText);
		} else if(emniyetCercevesi == 1) {
 8001d40:	4b52      	ldr	r3, [pc, #328]	@ (8001e8c <menu+0xb1c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d104      	bne.n	8001d52 <menu+0x9e2>
			lcd_print(2, 1, "OND Safety     ");
 8001d48:	4a53      	ldr	r2, [pc, #332]	@ (8001e98 <menu+0xb28>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f005 fe1b 	bl	8007988 <lcd_print>
			//lcd_print(2, 1, ondSafetyTextGN);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d52:	2102      	movs	r1, #2
 8001d54:	4842      	ldr	r0, [pc, #264]	@ (8001e60 <menu+0xaf0>)
 8001d56:	f007 f941 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d115      	bne.n	8001d8c <menu+0xa1c>
 8001d60:	4b40      	ldr	r3, [pc, #256]	@ (8001e64 <menu+0xaf4>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00e      	beq.n	8001d8c <menu+0xa1c>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001d6e:	4b47      	ldr	r3, [pc, #284]	@ (8001e8c <menu+0xb1c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b45      	ldr	r3, [pc, #276]	@ (8001e8c <menu+0xb1c>)
 8001d78:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001d7a:	4b44      	ldr	r3, [pc, #272]	@ (8001e8c <menu+0xb1c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d902      	bls.n	8001d88 <menu+0xa18>
				emniyetCercevesi = 0;
 8001d82:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <menu+0xb1c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d88:	f002 fcb6 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4834      	ldr	r0, [pc, #208]	@ (8001e60 <menu+0xaf0>)
 8001d90:	f007 f924 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d115      	bne.n	8001dc6 <menu+0xa56>
 8001d9a:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <menu+0xaf4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	f083 0301 	eor.w	r3, r3, #1
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00e      	beq.n	8001dc6 <menu+0xa56>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001da8:	4b38      	ldr	r3, [pc, #224]	@ (8001e8c <menu+0xb1c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <menu+0xb1c>)
 8001db2:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001db4:	4b35      	ldr	r3, [pc, #212]	@ (8001e8c <menu+0xb1c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <menu+0xa52>
		   		emniyetCercevesi = 1;
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <menu+0xb1c>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001dc2:	f002 fc99 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001dc6:	2108      	movs	r1, #8
 8001dc8:	4825      	ldr	r0, [pc, #148]	@ (8001e60 <menu+0xaf0>)
 8001dca:	f007 f907 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10d      	bne.n	8001df0 <menu+0xa80>
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <menu+0xaf4>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <menu+0xa80>
			eepromData[2] = emniyetCercevesi;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e8c <menu+0xb1c>)
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <menu+0xb00>)
 8001de8:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001dea:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <menu+0xb08>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001df0:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <menu+0xb0c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	f040 80ad 	bne.w	8001f54 <menu+0xbe4>
		if(dilSecim == 0) {
 8001dfa:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <menu+0xb10>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <menu+0xa9e>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001e02:	4a26      	ldr	r2, [pc, #152]	@ (8001e9c <menu+0xb2c>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	2001      	movs	r0, #1
 8001e08:	f005 fdbe 	bl	8007988 <lcd_print>
 8001e0c:	e004      	b.n	8001e18 <menu+0xaa8>
		} else {
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001e0e:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <menu+0xb30>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	2001      	movs	r0, #1
 8001e14:	f005 fdb8 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, yavaslamaLimitText);

		if(yavaslamaLimit == 0) {
 8001e18:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <menu+0xb34>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10f      	bne.n	8001e40 <menu+0xad0>
			if(dilSecim == 0) {
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <menu+0xb10>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <menu+0xac4>
				lcd_print(2, 1, "Pasif           ");
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <menu+0xb20>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f005 fdab 	bl	8007988 <lcd_print>
 8001e32:	e040      	b.n	8001eb6 <menu+0xb46>
			} else {
				lcd_print(2, 1, "Passive         ");
 8001e34:	4a17      	ldr	r2, [pc, #92]	@ (8001e94 <menu+0xb24>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f005 fda5 	bl	8007988 <lcd_print>
 8001e3e:	e03a      	b.n	8001eb6 <menu+0xb46>
			}
			//lcd_print(2, 1, pasifText);
		} else if(yavaslamaLimit == 1) {
 8001e40:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <menu+0xb34>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d136      	bne.n	8001eb6 <menu+0xb46>
			if(dilSecim == 0) {
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <menu+0xb10>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d12d      	bne.n	8001eac <menu+0xb3c>
				lcd_print(2, 1, "Aktif           ");
 8001e50:	4a15      	ldr	r2, [pc, #84]	@ (8001ea8 <menu+0xb38>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	2002      	movs	r0, #2
 8001e56:	f005 fd97 	bl	8007988 <lcd_print>
 8001e5a:	e02c      	b.n	8001eb6 <menu+0xb46>
 8001e5c:	0800cfd4 	.word	0x0800cfd4
 8001e60:	40010800 	.word	0x40010800
 8001e64:	2000023f 	.word	0x2000023f
 8001e68:	2000021f 	.word	0x2000021f
 8001e6c:	20000211 	.word	0x20000211
 8001e70:	20000138 	.word	0x20000138
 8001e74:	20000216 	.word	0x20000216
 8001e78:	2000023c 	.word	0x2000023c
 8001e7c:	20000210 	.word	0x20000210
 8001e80:	20000231 	.word	0x20000231
 8001e84:	0800cfe4 	.word	0x0800cfe4
 8001e88:	0800cff8 	.word	0x0800cff8
 8001e8c:	20000214 	.word	0x20000214
 8001e90:	0800d00c 	.word	0x0800d00c
 8001e94:	0800d020 	.word	0x0800d020
 8001e98:	0800d034 	.word	0x0800d034
 8001e9c:	0800d044 	.word	0x0800d044
 8001ea0:	0800d058 	.word	0x0800d058
 8001ea4:	20000215 	.word	0x20000215
 8001ea8:	0800d06c 	.word	0x0800d06c
			} else {
				lcd_print(2, 1, "Active          ");
 8001eac:	4a9d      	ldr	r2, [pc, #628]	@ (8002124 <menu+0xdb4>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f005 fd69 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	489b      	ldr	r0, [pc, #620]	@ (8002128 <menu+0xdb8>)
 8001eba:	f007 f88f 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d115      	bne.n	8001ef0 <menu+0xb80>
 8001ec4:	4b99      	ldr	r3, [pc, #612]	@ (800212c <menu+0xdbc>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00e      	beq.n	8001ef0 <menu+0xb80>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ed2:	4b97      	ldr	r3, [pc, #604]	@ (8002130 <menu+0xdc0>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b95      	ldr	r3, [pc, #596]	@ (8002130 <menu+0xdc0>)
 8001edc:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ede:	4b94      	ldr	r3, [pc, #592]	@ (8002130 <menu+0xdc0>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d902      	bls.n	8001eec <menu+0xb7c>
				yavaslamaLimit = 0;
 8001ee6:	4b92      	ldr	r3, [pc, #584]	@ (8002130 <menu+0xdc0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001eec:	f002 fc04 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	488d      	ldr	r0, [pc, #564]	@ (8002128 <menu+0xdb8>)
 8001ef4:	f007 f872 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d115      	bne.n	8001f2a <menu+0xbba>
 8001efe:	4b8b      	ldr	r3, [pc, #556]	@ (800212c <menu+0xdbc>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	f083 0301 	eor.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <menu+0xbba>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f0c:	4b88      	ldr	r3, [pc, #544]	@ (8002130 <menu+0xdc0>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b86      	ldr	r3, [pc, #536]	@ (8002130 <menu+0xdc0>)
 8001f16:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f18:	4b85      	ldr	r3, [pc, #532]	@ (8002130 <menu+0xdc0>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <menu+0xbb6>
		   		yavaslamaLimit = 1;
 8001f20:	4b83      	ldr	r3, [pc, #524]	@ (8002130 <menu+0xdc0>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f26:	f002 fbe7 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	487e      	ldr	r0, [pc, #504]	@ (8002128 <menu+0xdb8>)
 8001f2e:	f007 f855 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10d      	bne.n	8001f54 <menu+0xbe4>
 8001f38:	4b7c      	ldr	r3, [pc, #496]	@ (800212c <menu+0xdbc>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <menu+0xbe4>
			eepromData[4] = yavaslamaLimit;
 8001f46:	4b7a      	ldr	r3, [pc, #488]	@ (8002130 <menu+0xdc0>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002134 <menu+0xdc4>)
 8001f4c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002138 <menu+0xdc8>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f54:	4b79      	ldr	r3, [pc, #484]	@ (800213c <menu+0xdcc>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	f040 80ad 	bne.w	80020b8 <menu+0xd48>
		if(dilSecim == 0) {
 8001f5e:	4b78      	ldr	r3, [pc, #480]	@ (8002140 <menu+0xdd0>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <menu+0xc02>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001f66:	4a77      	ldr	r2, [pc, #476]	@ (8002144 <menu+0xdd4>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f005 fd0c 	bl	8007988 <lcd_print>
 8001f70:	e004      	b.n	8001f7c <menu+0xc0c>
		} else {
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001f72:	4a75      	ldr	r2, [pc, #468]	@ (8002148 <menu+0xdd8>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	2001      	movs	r0, #1
 8001f78:	f005 fd06 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, altLimitText);

		if(altLimit == 0) {
 8001f7c:	4b73      	ldr	r3, [pc, #460]	@ (800214c <menu+0xddc>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10f      	bne.n	8001fa4 <menu+0xc34>
			if(dilSecim == 0) {
 8001f84:	4b6e      	ldr	r3, [pc, #440]	@ (8002140 <menu+0xdd0>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <menu+0xc28>
				lcd_print(2, 1, "Pasif           ");
 8001f8c:	4a70      	ldr	r2, [pc, #448]	@ (8002150 <menu+0xde0>)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	2002      	movs	r0, #2
 8001f92:	f005 fcf9 	bl	8007988 <lcd_print>
 8001f96:	e018      	b.n	8001fca <menu+0xc5a>
			} else {
				lcd_print(2, 1, "Passive         ");
 8001f98:	4a6e      	ldr	r2, [pc, #440]	@ (8002154 <menu+0xde4>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f005 fcf3 	bl	8007988 <lcd_print>
 8001fa2:	e012      	b.n	8001fca <menu+0xc5a>
			}
			//lcd_print(2, 1, pasifText);
		} else if(altLimit == 1) {
 8001fa4:	4b69      	ldr	r3, [pc, #420]	@ (800214c <menu+0xddc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d10e      	bne.n	8001fca <menu+0xc5a>
			if(dilSecim == 0) {
 8001fac:	4b64      	ldr	r3, [pc, #400]	@ (8002140 <menu+0xdd0>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <menu+0xc50>
				lcd_print(2, 1, "Aktif           ");
 8001fb4:	4a68      	ldr	r2, [pc, #416]	@ (8002158 <menu+0xde8>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	2002      	movs	r0, #2
 8001fba:	f005 fce5 	bl	8007988 <lcd_print>
 8001fbe:	e004      	b.n	8001fca <menu+0xc5a>
			} else {
				lcd_print(2, 1, "Active          ");
 8001fc0:	4a58      	ldr	r2, [pc, #352]	@ (8002124 <menu+0xdb4>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f005 fcdf 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4856      	ldr	r0, [pc, #344]	@ (8002128 <menu+0xdb8>)
 8001fce:	f007 f805 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d119      	bne.n	800200c <menu+0xc9c>
 8001fd8:	4b54      	ldr	r3, [pc, #336]	@ (800212c <menu+0xdbc>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	f083 0301 	eor.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d012      	beq.n	800200c <menu+0xc9c>
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800215c <menu+0xdec>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10e      	bne.n	800200c <menu+0xc9c>
			altLimit = altLimit + 1;
 8001fee:	4b57      	ldr	r3, [pc, #348]	@ (800214c <menu+0xddc>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b55      	ldr	r3, [pc, #340]	@ (800214c <menu+0xddc>)
 8001ff8:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001ffa:	4b54      	ldr	r3, [pc, #336]	@ (800214c <menu+0xddc>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d902      	bls.n	8002008 <menu+0xc98>
				altLimit = 0;
 8002002:	4b52      	ldr	r3, [pc, #328]	@ (800214c <menu+0xddc>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002008:	f002 fb76 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800200c:	2104      	movs	r1, #4
 800200e:	4846      	ldr	r0, [pc, #280]	@ (8002128 <menu+0xdb8>)
 8002010:	f006 ffe4 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b01      	cmp	r3, #1
 8002018:	d119      	bne.n	800204e <menu+0xcde>
 800201a:	4b44      	ldr	r3, [pc, #272]	@ (800212c <menu+0xdbc>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <menu+0xcde>
 8002028:	4b4c      	ldr	r3, [pc, #304]	@ (800215c <menu+0xdec>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10e      	bne.n	800204e <menu+0xcde>
			altLimit = altLimit - 1;
 8002030:	4b46      	ldr	r3, [pc, #280]	@ (800214c <menu+0xddc>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b44      	ldr	r3, [pc, #272]	@ (800214c <menu+0xddc>)
 800203a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800203c:	4b43      	ldr	r3, [pc, #268]	@ (800214c <menu+0xddc>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <menu+0xcda>
		   		altLimit = 1;
 8002044:	4b41      	ldr	r3, [pc, #260]	@ (800214c <menu+0xddc>)
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800204a:	f002 fb55 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800204e:	2108      	movs	r1, #8
 8002050:	4835      	ldr	r0, [pc, #212]	@ (8002128 <menu+0xdb8>)
 8002052:	f006 ffc3 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d12d      	bne.n	80020b8 <menu+0xd48>
 800205c:	4b33      	ldr	r3, [pc, #204]	@ (800212c <menu+0xdbc>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	f083 0301 	eor.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d026      	beq.n	80020b8 <menu+0xd48>
			eepromData[5] = altLimit;
 800206a:	4b38      	ldr	r3, [pc, #224]	@ (800214c <menu+0xddc>)
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	4b31      	ldr	r3, [pc, #196]	@ (8002134 <menu+0xdc4>)
 8002070:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002072:	4b36      	ldr	r3, [pc, #216]	@ (800214c <menu+0xddc>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d110      	bne.n	800209c <menu+0xd2c>
 800207a:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <menu+0xdf0>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <menu+0xd1a>
 8002082:	4b37      	ldr	r3, [pc, #220]	@ (8002160 <menu+0xdf0>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d108      	bne.n	800209c <menu+0xd2c>
				kapiTablaAcKonum = 3;
 800208a:	4b35      	ldr	r3, [pc, #212]	@ (8002160 <menu+0xdf0>)
 800208c:	2203      	movs	r2, #3
 800208e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002090:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <menu+0xdf0>)
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <menu+0xdc4>)
 8002096:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800209a:	e00a      	b.n	80020b2 <menu+0xd42>
			} else if(altLimit == 0) {
 800209c:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <menu+0xddc>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <menu+0xd42>
				platformSilindirTipi = 0;
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <menu+0xdf4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80020aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <menu+0xdf4>)
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <menu+0xdc4>)
 80020b0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020b2:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <menu+0xdc8>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020b8:	4b20      	ldr	r3, [pc, #128]	@ (800213c <menu+0xdcc>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	f040 80ad 	bne.w	800221c <menu+0xeac>
		if(dilSecim == 0) {
 80020c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <menu+0xdd0>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <menu+0xd66>
			lcd_print(1, 1, "BASINC SALTERI ");
 80020ca:	4a27      	ldr	r2, [pc, #156]	@ (8002168 <menu+0xdf8>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	2001      	movs	r0, #1
 80020d0:	f005 fc5a 	bl	8007988 <lcd_print>
 80020d4:	e004      	b.n	80020e0 <menu+0xd70>
		} else {
			lcd_print(1, 1, "PRESSURE SWITCH");
 80020d6:	4a25      	ldr	r2, [pc, #148]	@ (800216c <menu+0xdfc>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2001      	movs	r0, #1
 80020dc:	f005 fc54 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, basincSalteriText);

		if(basincSalteri == 0) {
 80020e0:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <menu+0xe00>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10f      	bne.n	8002108 <menu+0xd98>
			if(dilSecim == 0) {
 80020e8:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <menu+0xdd0>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <menu+0xd8c>
				lcd_print(2, 1, "Pasif           ");
 80020f0:	4a17      	ldr	r2, [pc, #92]	@ (8002150 <menu+0xde0>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	2002      	movs	r0, #2
 80020f6:	f005 fc47 	bl	8007988 <lcd_print>
 80020fa:	e040      	b.n	800217e <menu+0xe0e>
			} else {
				lcd_print(2, 1, "Passive         ");
 80020fc:	4a15      	ldr	r2, [pc, #84]	@ (8002154 <menu+0xde4>)
 80020fe:	2101      	movs	r1, #1
 8002100:	2002      	movs	r0, #2
 8002102:	f005 fc41 	bl	8007988 <lcd_print>
 8002106:	e03a      	b.n	800217e <menu+0xe0e>
			}
			//lcd_print(2, 1, pasifText);
		} else if(basincSalteri == 1) {
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <menu+0xe00>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d136      	bne.n	800217e <menu+0xe0e>
			if(dilSecim == 0) {
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <menu+0xdd0>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d12d      	bne.n	8002174 <menu+0xe04>
				lcd_print(2, 1, "Aktif           ");
 8002118:	4a0f      	ldr	r2, [pc, #60]	@ (8002158 <menu+0xde8>)
 800211a:	2101      	movs	r1, #1
 800211c:	2002      	movs	r0, #2
 800211e:	f005 fc33 	bl	8007988 <lcd_print>
 8002122:	e02c      	b.n	800217e <menu+0xe0e>
 8002124:	0800d080 	.word	0x0800d080
 8002128:	40010800 	.word	0x40010800
 800212c:	2000023f 	.word	0x2000023f
 8002130:	20000215 	.word	0x20000215
 8002134:	20000138 	.word	0x20000138
 8002138:	2000023c 	.word	0x2000023c
 800213c:	20000210 	.word	0x20000210
 8002140:	20000231 	.word	0x20000231
 8002144:	0800d094 	.word	0x0800d094
 8002148:	0800d0a8 	.word	0x0800d0a8
 800214c:	20000216 	.word	0x20000216
 8002150:	0800d00c 	.word	0x0800d00c
 8002154:	0800d020 	.word	0x0800d020
 8002158:	0800d06c 	.word	0x0800d06c
 800215c:	20000211 	.word	0x20000211
 8002160:	2000021d 	.word	0x2000021d
 8002164:	20000223 	.word	0x20000223
 8002168:	0800d0bc 	.word	0x0800d0bc
 800216c:	0800d0cc 	.word	0x0800d0cc
 8002170:	20000217 	.word	0x20000217
			} else {
				lcd_print(2, 1, "Active          ");
 8002174:	4a9c      	ldr	r2, [pc, #624]	@ (80023e8 <menu+0x1078>)
 8002176:	2101      	movs	r1, #1
 8002178:	2002      	movs	r0, #2
 800217a:	f005 fc05 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800217e:	2102      	movs	r1, #2
 8002180:	489a      	ldr	r0, [pc, #616]	@ (80023ec <menu+0x107c>)
 8002182:	f006 ff2b 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002186:	4603      	mov	r3, r0
 8002188:	2b01      	cmp	r3, #1
 800218a:	d115      	bne.n	80021b8 <menu+0xe48>
 800218c:	4b98      	ldr	r3, [pc, #608]	@ (80023f0 <menu+0x1080>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f083 0301 	eor.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00e      	beq.n	80021b8 <menu+0xe48>
			basincSalteri = basincSalteri + 1;
 800219a:	4b96      	ldr	r3, [pc, #600]	@ (80023f4 <menu+0x1084>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b94      	ldr	r3, [pc, #592]	@ (80023f4 <menu+0x1084>)
 80021a4:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80021a6:	4b93      	ldr	r3, [pc, #588]	@ (80023f4 <menu+0x1084>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d902      	bls.n	80021b4 <menu+0xe44>
				basincSalteri = 0;
 80021ae:	4b91      	ldr	r3, [pc, #580]	@ (80023f4 <menu+0x1084>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021b4:	f002 faa0 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b8:	2104      	movs	r1, #4
 80021ba:	488c      	ldr	r0, [pc, #560]	@ (80023ec <menu+0x107c>)
 80021bc:	f006 ff0e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d115      	bne.n	80021f2 <menu+0xe82>
 80021c6:	4b8a      	ldr	r3, [pc, #552]	@ (80023f0 <menu+0x1080>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	f083 0301 	eor.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <menu+0xe82>
			basincSalteri = basincSalteri - 1;
 80021d4:	4b87      	ldr	r3, [pc, #540]	@ (80023f4 <menu+0x1084>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b01      	subs	r3, #1
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b85      	ldr	r3, [pc, #532]	@ (80023f4 <menu+0x1084>)
 80021de:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80021e0:	4b84      	ldr	r3, [pc, #528]	@ (80023f4 <menu+0x1084>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <menu+0xe7e>
		   		basincSalteri = 1;
 80021e8:	4b82      	ldr	r3, [pc, #520]	@ (80023f4 <menu+0x1084>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021ee:	f002 fa83 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021f2:	2108      	movs	r1, #8
 80021f4:	487d      	ldr	r0, [pc, #500]	@ (80023ec <menu+0x107c>)
 80021f6:	f006 fef1 	bl	8008fdc <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10d      	bne.n	800221c <menu+0xeac>
 8002200:	4b7b      	ldr	r3, [pc, #492]	@ (80023f0 <menu+0x1080>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <menu+0xeac>
			eepromData[6] = basincSalteri;
 800220e:	4b79      	ldr	r3, [pc, #484]	@ (80023f4 <menu+0x1084>)
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	4b79      	ldr	r3, [pc, #484]	@ (80023f8 <menu+0x1088>)
 8002214:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002216:	4b79      	ldr	r3, [pc, #484]	@ (80023fc <menu+0x108c>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800221c:	4b78      	ldr	r3, [pc, #480]	@ (8002400 <menu+0x1090>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b07      	cmp	r3, #7
 8002222:	f040 80b8 	bne.w	8002396 <menu+0x1026>
		if(dilSecim == 0) {
 8002226:	4b77      	ldr	r3, [pc, #476]	@ (8002404 <menu+0x1094>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <menu+0xeca>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800222e:	4a76      	ldr	r2, [pc, #472]	@ (8002408 <menu+0x1098>)
 8002230:	2101      	movs	r1, #1
 8002232:	2001      	movs	r0, #1
 8002234:	f005 fba8 	bl	8007988 <lcd_print>
 8002238:	e004      	b.n	8002244 <menu+0xed4>
		} else {
			lcd_print(1, 1, "DOOR SELECTION     ");
 800223a:	4a74      	ldr	r2, [pc, #464]	@ (800240c <menu+0x109c>)
 800223c:	2101      	movs	r1, #1
 800223e:	2001      	movs	r0, #1
 8002240:	f005 fba2 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, kapiSecimleriText);

		if(kapiSecimleri == 0) {
 8002244:	4b72      	ldr	r3, [pc, #456]	@ (8002410 <menu+0x10a0>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10f      	bne.n	800226c <menu+0xefc>
			if(dilSecim == 0) {
 800224c:	4b6d      	ldr	r3, [pc, #436]	@ (8002404 <menu+0x1094>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <menu+0xef0>
				lcd_print(2, 1, "Pasif           ");
 8002254:	4a6f      	ldr	r2, [pc, #444]	@ (8002414 <menu+0x10a4>)
 8002256:	2101      	movs	r1, #1
 8002258:	2002      	movs	r0, #2
 800225a:	f005 fb95 	bl	8007988 <lcd_print>
 800225e:	e040      	b.n	80022e2 <menu+0xf72>
			} else {
				lcd_print(2, 1, "Passive         ");
 8002260:	4a6d      	ldr	r2, [pc, #436]	@ (8002418 <menu+0x10a8>)
 8002262:	2101      	movs	r1, #1
 8002264:	2002      	movs	r0, #2
 8002266:	f005 fb8f 	bl	8007988 <lcd_print>
 800226a:	e03a      	b.n	80022e2 <menu+0xf72>
			}
			//lcd_print(2, 1, pasifText);
		} else if(kapiSecimleri == 1) {
 800226c:	4b68      	ldr	r3, [pc, #416]	@ (8002410 <menu+0x10a0>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d10f      	bne.n	8002294 <menu+0xf24>
			if(dilSecim == 0) {
 8002274:	4b63      	ldr	r3, [pc, #396]	@ (8002404 <menu+0x1094>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <menu+0xf18>
				lcd_print(2, 1, "Kat kapisi aktif");
 800227c:	4a67      	ldr	r2, [pc, #412]	@ (800241c <menu+0x10ac>)
 800227e:	2101      	movs	r1, #1
 8002280:	2002      	movs	r0, #2
 8002282:	f005 fb81 	bl	8007988 <lcd_print>
 8002286:	e02c      	b.n	80022e2 <menu+0xf72>
			} else {
				lcd_print(2, 1, "Floor door act  ");
 8002288:	4a65      	ldr	r2, [pc, #404]	@ (8002420 <menu+0x10b0>)
 800228a:	2101      	movs	r1, #1
 800228c:	2002      	movs	r0, #2
 800228e:	f005 fb7b 	bl	8007988 <lcd_print>
 8002292:	e026      	b.n	80022e2 <menu+0xf72>
			}
			//lcd_print(2, 1, katKapisiAktifText);
		} else if(kapiSecimleri == 2){
 8002294:	4b5e      	ldr	r3, [pc, #376]	@ (8002410 <menu+0x10a0>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d10f      	bne.n	80022bc <menu+0xf4c>
			if(dilSecim == 0) {
 800229c:	4b59      	ldr	r3, [pc, #356]	@ (8002404 <menu+0x1094>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <menu+0xf40>
				lcd_print(2, 1, "Tabla kapi aktif");
 80022a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002424 <menu+0x10b4>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	2002      	movs	r0, #2
 80022aa:	f005 fb6d 	bl	8007988 <lcd_print>
 80022ae:	e018      	b.n	80022e2 <menu+0xf72>
			} else {
				lcd_print(2, 1, "Pltfrm door act ");
 80022b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002428 <menu+0x10b8>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	2002      	movs	r0, #2
 80022b6:	f005 fb67 	bl	8007988 <lcd_print>
 80022ba:	e012      	b.n	80022e2 <menu+0xf72>
			}
			//lcd_print(2, 1, tablaKapiAktifText);
		} else if(kapiSecimleri == 3){
 80022bc:	4b54      	ldr	r3, [pc, #336]	@ (8002410 <menu+0x10a0>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d10e      	bne.n	80022e2 <menu+0xf72>
			if(dilSecim == 0) {
 80022c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002404 <menu+0x1094>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <menu+0xf68>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80022cc:	4a57      	ldr	r2, [pc, #348]	@ (800242c <menu+0x10bc>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	2002      	movs	r0, #2
 80022d2:	f005 fb59 	bl	8007988 <lcd_print>
 80022d6:	e004      	b.n	80022e2 <menu+0xf72>
			} else {
				lcd_print(2, 1, "Flr + Plrfrm act");
 80022d8:	4a55      	ldr	r2, [pc, #340]	@ (8002430 <menu+0x10c0>)
 80022da:	2101      	movs	r1, #1
 80022dc:	2002      	movs	r0, #2
 80022de:	f005 fb53 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, katArtiTablaAktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022e2:	2102      	movs	r1, #2
 80022e4:	4841      	ldr	r0, [pc, #260]	@ (80023ec <menu+0x107c>)
 80022e6:	f006 fe79 	bl	8008fdc <HAL_GPIO_ReadPin>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d115      	bne.n	800231c <menu+0xfac>
 80022f0:	4b3f      	ldr	r3, [pc, #252]	@ (80023f0 <menu+0x1080>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f083 0301 	eor.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <menu+0xfac>
			kapiSecimleri = kapiSecimleri + 1;
 80022fe:	4b44      	ldr	r3, [pc, #272]	@ (8002410 <menu+0x10a0>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b42      	ldr	r3, [pc, #264]	@ (8002410 <menu+0x10a0>)
 8002308:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800230a:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <menu+0x10a0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d902      	bls.n	8002318 <menu+0xfa8>
				kapiSecimleri = 0;
 8002312:	4b3f      	ldr	r3, [pc, #252]	@ (8002410 <menu+0x10a0>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002318:	f002 f9ee 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800231c:	2104      	movs	r1, #4
 800231e:	4833      	ldr	r0, [pc, #204]	@ (80023ec <menu+0x107c>)
 8002320:	f006 fe5c 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002324:	4603      	mov	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d115      	bne.n	8002356 <menu+0xfe6>
 800232a:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <menu+0x1080>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <menu+0xfe6>
			kapiSecimleri = kapiSecimleri - 1;
 8002338:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <menu+0x10a0>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3b01      	subs	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b33      	ldr	r3, [pc, #204]	@ (8002410 <menu+0x10a0>)
 8002342:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002344:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <menu+0x10a0>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d902      	bls.n	8002352 <menu+0xfe2>
		   		kapiSecimleri = 3;
 800234c:	4b30      	ldr	r3, [pc, #192]	@ (8002410 <menu+0x10a0>)
 800234e:	2203      	movs	r2, #3
 8002350:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002352:	f002 f9d1 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002356:	2108      	movs	r1, #8
 8002358:	4824      	ldr	r0, [pc, #144]	@ (80023ec <menu+0x107c>)
 800235a:	f006 fe3f 	bl	8008fdc <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d118      	bne.n	8002396 <menu+0x1026>
 8002364:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <menu+0x1080>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f083 0301 	eor.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d011      	beq.n	8002396 <menu+0x1026>
			eepromData[7] = kapiSecimleri;
 8002372:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <menu+0x10a0>)
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <menu+0x1088>)
 8002378:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800237a:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <menu+0x10a0>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <menu+0x1020>
				altLimit = 1;
 8002382:	4b2c      	ldr	r3, [pc, #176]	@ (8002434 <menu+0x10c4>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002388:	4b2a      	ldr	r3, [pc, #168]	@ (8002434 <menu+0x10c4>)
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <menu+0x1088>)
 800238e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <menu+0x108c>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002396:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <menu+0x1090>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b08      	cmp	r3, #8
 800239c:	f040 80b9 	bne.w	8002512 <menu+0x11a2>
		if(dilSecim == 0) {
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <menu+0x1094>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d105      	bne.n	80023b4 <menu+0x1044>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80023a8:	4a23      	ldr	r2, [pc, #140]	@ (8002438 <menu+0x10c8>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	2001      	movs	r0, #1
 80023ae:	f005 faeb 	bl	8007988 <lcd_print>
 80023b2:	e004      	b.n	80023be <menu+0x104e>
		} else {
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80023b4:	4a21      	ldr	r2, [pc, #132]	@ (800243c <menu+0x10cc>)
 80023b6:	2101      	movs	r1, #1
 80023b8:	2001      	movs	r0, #1
 80023ba:	f005 fae5 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, kapiAcmaTipiText);

		if(kapiAcTipi == 0){
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <menu+0x10d0>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d142      	bne.n	800244c <menu+0x10dc>
			if(dilSecim == 0) {
 80023c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <menu+0x1094>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <menu+0x106a>
				lcd_print(2, 1, "Kapi butonu ESP");
 80023ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <menu+0x10d4>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2002      	movs	r0, #2
 80023d4:	f005 fad8 	bl	8007988 <lcd_print>
 80023d8:	e04b      	b.n	8002472 <menu+0x1102>
			} else {
				lcd_print(2, 1, "Door Button ESP");
 80023da:	4a1b      	ldr	r2, [pc, #108]	@ (8002448 <menu+0x10d8>)
 80023dc:	2101      	movs	r1, #1
 80023de:	2002      	movs	r0, #2
 80023e0:	f005 fad2 	bl	8007988 <lcd_print>
 80023e4:	e045      	b.n	8002472 <menu+0x1102>
 80023e6:	bf00      	nop
 80023e8:	0800d080 	.word	0x0800d080
 80023ec:	40010800 	.word	0x40010800
 80023f0:	2000023f 	.word	0x2000023f
 80023f4:	20000217 	.word	0x20000217
 80023f8:	20000138 	.word	0x20000138
 80023fc:	2000023c 	.word	0x2000023c
 8002400:	20000210 	.word	0x20000210
 8002404:	20000231 	.word	0x20000231
 8002408:	0800d0dc 	.word	0x0800d0dc
 800240c:	0800d0f0 	.word	0x0800d0f0
 8002410:	20000218 	.word	0x20000218
 8002414:	0800d00c 	.word	0x0800d00c
 8002418:	0800d020 	.word	0x0800d020
 800241c:	0800d104 	.word	0x0800d104
 8002420:	0800d118 	.word	0x0800d118
 8002424:	0800d12c 	.word	0x0800d12c
 8002428:	0800d140 	.word	0x0800d140
 800242c:	0800d154 	.word	0x0800d154
 8002430:	0800d168 	.word	0x0800d168
 8002434:	20000216 	.word	0x20000216
 8002438:	0800d17c 	.word	0x0800d17c
 800243c:	0800d190 	.word	0x0800d190
 8002440:	2000021c 	.word	0x2000021c
 8002444:	0800d1a4 	.word	0x0800d1a4
 8002448:	0800d1b4 	.word	0x0800d1b4
			}
			//lcd_print(2, 1, kapiButonuESPText);
		} else if(kapiAcTipi == 1){
 800244c:	4b80      	ldr	r3, [pc, #512]	@ (8002650 <menu+0x12e0>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d10e      	bne.n	8002472 <menu+0x1102>
			if(dilSecim == 0){
 8002454:	4b7f      	ldr	r3, [pc, #508]	@ (8002654 <menu+0x12e4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <menu+0x10f8>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800245c:	4a7e      	ldr	r2, [pc, #504]	@ (8002658 <menu+0x12e8>)
 800245e:	2101      	movs	r1, #1
 8002460:	2002      	movs	r0, #2
 8002462:	f005 fa91 	bl	8007988 <lcd_print>
 8002466:	e004      	b.n	8002472 <menu+0x1102>
			} else {
				lcd_print(2, 1, "Floor button EXT");
 8002468:	4a7c      	ldr	r2, [pc, #496]	@ (800265c <menu+0x12ec>)
 800246a:	2101      	movs	r1, #1
 800246c:	2002      	movs	r0, #2
 800246e:	f005 fa8b 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, katButonuEXTText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002472:	2102      	movs	r1, #2
 8002474:	487a      	ldr	r0, [pc, #488]	@ (8002660 <menu+0x12f0>)
 8002476:	f006 fdb1 	bl	8008fdc <HAL_GPIO_ReadPin>
 800247a:	4603      	mov	r3, r0
 800247c:	2b01      	cmp	r3, #1
 800247e:	d115      	bne.n	80024ac <menu+0x113c>
 8002480:	4b78      	ldr	r3, [pc, #480]	@ (8002664 <menu+0x12f4>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00e      	beq.n	80024ac <menu+0x113c>
			kapiAcTipi = kapiAcTipi + 1;
 800248e:	4b70      	ldr	r3, [pc, #448]	@ (8002650 <menu+0x12e0>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b6e      	ldr	r3, [pc, #440]	@ (8002650 <menu+0x12e0>)
 8002498:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800249a:	4b6d      	ldr	r3, [pc, #436]	@ (8002650 <menu+0x12e0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d902      	bls.n	80024a8 <menu+0x1138>
				kapiAcTipi = 0;
 80024a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002650 <menu+0x12e0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024a8:	f002 f926 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ac:	2104      	movs	r1, #4
 80024ae:	486c      	ldr	r0, [pc, #432]	@ (8002660 <menu+0x12f0>)
 80024b0:	f006 fd94 	bl	8008fdc <HAL_GPIO_ReadPin>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d115      	bne.n	80024e6 <menu+0x1176>
 80024ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002664 <menu+0x12f4>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00e      	beq.n	80024e6 <menu+0x1176>
			kapiAcTipi = kapiAcTipi - 1;
 80024c8:	4b61      	ldr	r3, [pc, #388]	@ (8002650 <menu+0x12e0>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002650 <menu+0x12e0>)
 80024d2:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80024d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002650 <menu+0x12e0>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <menu+0x1172>
		   		kapiAcTipi = 1;
 80024dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002650 <menu+0x12e0>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024e2:	f002 f909 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024e6:	2108      	movs	r1, #8
 80024e8:	485d      	ldr	r0, [pc, #372]	@ (8002660 <menu+0x12f0>)
 80024ea:	f006 fd77 	bl	8008fdc <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10e      	bne.n	8002512 <menu+0x11a2>
 80024f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <menu+0x12f4>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f083 0301 	eor.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <menu+0x11a2>
			eepromData[36] = kapiAcTipi;
 8002502:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <menu+0x12e0>)
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	4b58      	ldr	r3, [pc, #352]	@ (8002668 <menu+0x12f8>)
 8002508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 800250c:	4b57      	ldr	r3, [pc, #348]	@ (800266c <menu+0x12fc>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002512:	4b57      	ldr	r3, [pc, #348]	@ (8002670 <menu+0x1300>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b09      	cmp	r3, #9
 8002518:	f040 8085 	bne.w	8002626 <menu+0x12b6>
		if(dilSecim == 0){
 800251c:	4b4d      	ldr	r3, [pc, #308]	@ (8002654 <menu+0x12e4>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <menu+0x11c0>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002524:	4a53      	ldr	r2, [pc, #332]	@ (8002674 <menu+0x1304>)
 8002526:	2101      	movs	r1, #1
 8002528:	2001      	movs	r0, #1
 800252a:	f005 fa2d 	bl	8007988 <lcd_print>
 800252e:	e004      	b.n	800253a <menu+0x11ca>
		} else {
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002530:	4a51      	ldr	r2, [pc, #324]	@ (8002678 <menu+0x1308>)
 8002532:	2101      	movs	r1, #1
 8002534:	2001      	movs	r0, #1
 8002536:	f005 fa27 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, birKatKapiTipiText);

		if(kapi1Tip == 0) {
 800253a:	4b50      	ldr	r3, [pc, #320]	@ (800267c <menu+0x130c>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <menu+0x11de>
			lcd_print(2, 1, "Prudhome        ");
 8002542:	4a4f      	ldr	r2, [pc, #316]	@ (8002680 <menu+0x1310>)
 8002544:	2101      	movs	r1, #1
 8002546:	2002      	movs	r0, #2
 8002548:	f005 fa1e 	bl	8007988 <lcd_print>
 800254c:	e01c      	b.n	8002588 <menu+0x1218>
			//lcd_print(2, 1, prudhomeTextGN);
		} else if(kapi1Tip == 1) {
 800254e:	4b4b      	ldr	r3, [pc, #300]	@ (800267c <menu+0x130c>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10f      	bne.n	8002576 <menu+0x1206>
			if(dilSecim == 0){
 8002556:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <menu+0x12e4>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <menu+0x11fa>
				lcd_print(2, 1, "Buton kontrollu");
 800255e:	4a49      	ldr	r2, [pc, #292]	@ (8002684 <menu+0x1314>)
 8002560:	2101      	movs	r1, #1
 8002562:	2002      	movs	r0, #2
 8002564:	f005 fa10 	bl	8007988 <lcd_print>
 8002568:	e00e      	b.n	8002588 <menu+0x1218>
			} else {
				lcd_print(2, 1, "Button cntrolled");
 800256a:	4a47      	ldr	r2, [pc, #284]	@ (8002688 <menu+0x1318>)
 800256c:	2101      	movs	r1, #1
 800256e:	2002      	movs	r0, #2
 8002570:	f005 fa0a 	bl	8007988 <lcd_print>
 8002574:	e008      	b.n	8002588 <menu+0x1218>
			}
			//lcd_print(2, 1, butonKontrolluText);
		} else if(kapi1Tip == 2) {
 8002576:	4b41      	ldr	r3, [pc, #260]	@ (800267c <menu+0x130c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d104      	bne.n	8002588 <menu+0x1218>
			lcd_print(2, 1, "Pizzato        ");
 800257e:	4a43      	ldr	r2, [pc, #268]	@ (800268c <menu+0x131c>)
 8002580:	2101      	movs	r1, #1
 8002582:	2002      	movs	r0, #2
 8002584:	f005 fa00 	bl	8007988 <lcd_print>
			//lcd_print(2, 1, pizzattoTextGN);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002588:	2102      	movs	r1, #2
 800258a:	4835      	ldr	r0, [pc, #212]	@ (8002660 <menu+0x12f0>)
 800258c:	f006 fd26 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002590:	4603      	mov	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	d115      	bne.n	80025c2 <menu+0x1252>
 8002596:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <menu+0x12f4>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f083 0301 	eor.w	r3, r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00e      	beq.n	80025c2 <menu+0x1252>
			kapi1Tip = kapi1Tip + 1;
 80025a4:	4b35      	ldr	r3, [pc, #212]	@ (800267c <menu+0x130c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b33      	ldr	r3, [pc, #204]	@ (800267c <menu+0x130c>)
 80025ae:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80025b0:	4b32      	ldr	r3, [pc, #200]	@ (800267c <menu+0x130c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d902      	bls.n	80025be <menu+0x124e>
				kapi1Tip = 0;
 80025b8:	4b30      	ldr	r3, [pc, #192]	@ (800267c <menu+0x130c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025be:	f002 f89b 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c2:	2104      	movs	r1, #4
 80025c4:	4826      	ldr	r0, [pc, #152]	@ (8002660 <menu+0x12f0>)
 80025c6:	f006 fd09 	bl	8008fdc <HAL_GPIO_ReadPin>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d115      	bne.n	80025fc <menu+0x128c>
 80025d0:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <menu+0x12f4>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f083 0301 	eor.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00e      	beq.n	80025fc <menu+0x128c>
			kapi1Tip = kapi1Tip - 1;
 80025de:	4b27      	ldr	r3, [pc, #156]	@ (800267c <menu+0x130c>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b25      	ldr	r3, [pc, #148]	@ (800267c <menu+0x130c>)
 80025e8:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80025ea:	4b24      	ldr	r3, [pc, #144]	@ (800267c <menu+0x130c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d902      	bls.n	80025f8 <menu+0x1288>
		   		kapi1Tip = 2;
 80025f2:	4b22      	ldr	r3, [pc, #136]	@ (800267c <menu+0x130c>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025f8:	f002 f87e 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fc:	2108      	movs	r1, #8
 80025fe:	4818      	ldr	r0, [pc, #96]	@ (8002660 <menu+0x12f0>)
 8002600:	f006 fcec 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d10d      	bne.n	8002626 <menu+0x12b6>
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <menu+0x12f4>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <menu+0x12b6>
			eepromData[8] = kapi1Tip;
 8002618:	4b18      	ldr	r3, [pc, #96]	@ (800267c <menu+0x130c>)
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <menu+0x12f8>)
 800261e:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <menu+0x12fc>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <menu+0x1300>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b0a      	cmp	r3, #10
 800262c:	f040 80a1 	bne.w	8002772 <menu+0x1402>
		if(dilSecim == 0) {
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <menu+0x12e4>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12f      	bne.n	8002698 <menu+0x1328>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002638:	4a15      	ldr	r2, [pc, #84]	@ (8002690 <menu+0x1320>)
 800263a:	2101      	movs	r1, #1
 800263c:	2001      	movs	r0, #1
 800263e:	f005 f9a3 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002642:	4a14      	ldr	r2, [pc, #80]	@ (8002694 <menu+0x1324>)
 8002644:	2101      	movs	r1, #1
 8002646:	2002      	movs	r0, #2
 8002648:	f005 f99e 	bl	8007988 <lcd_print>
 800264c:	e02e      	b.n	80026ac <menu+0x133c>
 800264e:	bf00      	nop
 8002650:	2000021c 	.word	0x2000021c
 8002654:	20000231 	.word	0x20000231
 8002658:	0800d1c4 	.word	0x0800d1c4
 800265c:	0800d1d8 	.word	0x0800d1d8
 8002660:	40010800 	.word	0x40010800
 8002664:	2000023f 	.word	0x2000023f
 8002668:	20000138 	.word	0x20000138
 800266c:	2000023c 	.word	0x2000023c
 8002670:	20000210 	.word	0x20000210
 8002674:	0800d1ec 	.word	0x0800d1ec
 8002678:	0800d200 	.word	0x0800d200
 800267c:	20000219 	.word	0x20000219
 8002680:	0800d214 	.word	0x0800d214
 8002684:	0800d228 	.word	0x0800d228
 8002688:	0800d238 	.word	0x0800d238
 800268c:	0800d24c 	.word	0x0800d24c
 8002690:	0800d25c 	.word	0x0800d25c
 8002694:	0800d270 	.word	0x0800d270
		} else {
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002698:	4a85      	ldr	r2, [pc, #532]	@ (80028b0 <menu+0x1540>)
 800269a:	2101      	movs	r1, #1
 800269c:	2001      	movs	r0, #1
 800269e:	f005 f973 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80026a2:	4a84      	ldr	r2, [pc, #528]	@ (80028b4 <menu+0x1544>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	2002      	movs	r0, #2
 80026a8:	f005 f96e 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, birinciKapiAcSuresiText);
		//lcd_print(2, 1, kacSaniyeText);

		itoa(kapi1AcSure, snum, 10);
 80026ac:	4b82      	ldr	r3, [pc, #520]	@ (80028b8 <menu+0x1548>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	220a      	movs	r2, #10
 80026b2:	4982      	ldr	r1, [pc, #520]	@ (80028bc <menu+0x154c>)
 80026b4:	4618      	mov	r0, r3
 80026b6:	f009 fcbd 	bl	800c034 <itoa>
		lcd_print(2,16,snum);
 80026ba:	4a80      	ldr	r2, [pc, #512]	@ (80028bc <menu+0x154c>)
 80026bc:	2110      	movs	r1, #16
 80026be:	2002      	movs	r0, #2
 80026c0:	f005 f962 	bl	8007988 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80026c4:	2102      	movs	r1, #2
 80026c6:	487e      	ldr	r0, [pc, #504]	@ (80028c0 <menu+0x1550>)
 80026c8:	f006 fc88 	bl	8008fdc <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d119      	bne.n	8002706 <menu+0x1396>
 80026d2:	4b7c      	ldr	r3, [pc, #496]	@ (80028c4 <menu+0x1554>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <menu+0x1396>
 80026e0:	4b79      	ldr	r3, [pc, #484]	@ (80028c8 <menu+0x1558>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10e      	bne.n	8002706 <menu+0x1396>
			kapi1AcSure = kapi1AcSure + 1;
 80026e8:	4b73      	ldr	r3, [pc, #460]	@ (80028b8 <menu+0x1548>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	4b71      	ldr	r3, [pc, #452]	@ (80028b8 <menu+0x1548>)
 80026f2:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80026f4:	4b70      	ldr	r3, [pc, #448]	@ (80028b8 <menu+0x1548>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d902      	bls.n	8002702 <menu+0x1392>
				kapi1AcSure = 0;
 80026fc:	4b6e      	ldr	r3, [pc, #440]	@ (80028b8 <menu+0x1548>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002702:	f001 fff9 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002706:	2104      	movs	r1, #4
 8002708:	486d      	ldr	r0, [pc, #436]	@ (80028c0 <menu+0x1550>)
 800270a:	f006 fc67 	bl	8008fdc <HAL_GPIO_ReadPin>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	d119      	bne.n	8002748 <menu+0x13d8>
 8002714:	4b6b      	ldr	r3, [pc, #428]	@ (80028c4 <menu+0x1554>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	f083 0301 	eor.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <menu+0x13d8>
 8002722:	4b69      	ldr	r3, [pc, #420]	@ (80028c8 <menu+0x1558>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10e      	bne.n	8002748 <menu+0x13d8>
			kapi1AcSure = kapi1AcSure - 1;
 800272a:	4b63      	ldr	r3, [pc, #396]	@ (80028b8 <menu+0x1548>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	3b01      	subs	r3, #1
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b61      	ldr	r3, [pc, #388]	@ (80028b8 <menu+0x1548>)
 8002734:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002736:	4b60      	ldr	r3, [pc, #384]	@ (80028b8 <menu+0x1548>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <menu+0x13d4>
		   		kapi1AcSure = 5;
 800273e:	4b5e      	ldr	r3, [pc, #376]	@ (80028b8 <menu+0x1548>)
 8002740:	2205      	movs	r2, #5
 8002742:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002744:	f001 ffd8 	bl	80046f8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002748:	2108      	movs	r1, #8
 800274a:	485d      	ldr	r0, [pc, #372]	@ (80028c0 <menu+0x1550>)
 800274c:	f006 fc46 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10d      	bne.n	8002772 <menu+0x1402>
 8002756:	4b5b      	ldr	r3, [pc, #364]	@ (80028c4 <menu+0x1554>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <menu+0x1402>
			eepromData[9] = kapi1AcSure;
 8002764:	4b54      	ldr	r3, [pc, #336]	@ (80028b8 <menu+0x1548>)
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	4b58      	ldr	r3, [pc, #352]	@ (80028cc <menu+0x155c>)
 800276a:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800276c:	4b58      	ldr	r3, [pc, #352]	@ (80028d0 <menu+0x1560>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002772:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <menu+0x1564>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b0b      	cmp	r3, #11
 8002778:	f040 8085 	bne.w	8002886 <menu+0x1516>
		if(dilSecim == 0) {
 800277c:	4b56      	ldr	r3, [pc, #344]	@ (80028d8 <menu+0x1568>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <menu+0x1420>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002784:	4a55      	ldr	r2, [pc, #340]	@ (80028dc <menu+0x156c>)
 8002786:	2101      	movs	r1, #1
 8002788:	2001      	movs	r0, #1
 800278a:	f005 f8fd 	bl	8007988 <lcd_print>
 800278e:	e004      	b.n	800279a <menu+0x142a>
		} else {
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002790:	4a53      	ldr	r2, [pc, #332]	@ (80028e0 <menu+0x1570>)
 8002792:	2101      	movs	r1, #1
 8002794:	2001      	movs	r0, #1
 8002796:	f005 f8f7 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, ikinciKatKapiTipiText);

		if(kapi2Tip == 0) {
 800279a:	4b52      	ldr	r3, [pc, #328]	@ (80028e4 <menu+0x1574>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <menu+0x143e>
			lcd_print(2, 1, "Prudhome        ");
 80027a2:	4a51      	ldr	r2, [pc, #324]	@ (80028e8 <menu+0x1578>)
 80027a4:	2101      	movs	r1, #1
 80027a6:	2002      	movs	r0, #2
 80027a8:	f005 f8ee 	bl	8007988 <lcd_print>
 80027ac:	e01c      	b.n	80027e8 <menu+0x1478>
			//lcd_print(2, 1, prudhomeTextGN);
		} else if(kapi2Tip == 1) {
 80027ae:	4b4d      	ldr	r3, [pc, #308]	@ (80028e4 <menu+0x1574>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10f      	bne.n	80027d6 <menu+0x1466>
			if(dilSecim == 0) {
 80027b6:	4b48      	ldr	r3, [pc, #288]	@ (80028d8 <menu+0x1568>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <menu+0x145a>
				lcd_print(2, 1, "Buton kontrollu");
 80027be:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <menu+0x157c>)
 80027c0:	2101      	movs	r1, #1
 80027c2:	2002      	movs	r0, #2
 80027c4:	f005 f8e0 	bl	8007988 <lcd_print>
 80027c8:	e00e      	b.n	80027e8 <menu+0x1478>
			} else {
				lcd_print(2, 1, "Button cntrolled");
 80027ca:	4a49      	ldr	r2, [pc, #292]	@ (80028f0 <menu+0x1580>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	2002      	movs	r0, #2
 80027d0:	f005 f8da 	bl	8007988 <lcd_print>
 80027d4:	e008      	b.n	80027e8 <menu+0x1478>
			}
			//lcd_print(2, 1, butonKontrolluText);
		} else if(kapi2Tip == 2) {
 80027d6:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <menu+0x1574>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d104      	bne.n	80027e8 <menu+0x1478>
			lcd_print(2, 1, "Pizzato        ");
 80027de:	4a45      	ldr	r2, [pc, #276]	@ (80028f4 <menu+0x1584>)
 80027e0:	2101      	movs	r1, #1
 80027e2:	2002      	movs	r0, #2
 80027e4:	f005 f8d0 	bl	8007988 <lcd_print>
			//lcd_print(2, 1, pizzattoTextGN);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e8:	2102      	movs	r1, #2
 80027ea:	4835      	ldr	r0, [pc, #212]	@ (80028c0 <menu+0x1550>)
 80027ec:	f006 fbf6 	bl	8008fdc <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d115      	bne.n	8002822 <menu+0x14b2>
 80027f6:	4b33      	ldr	r3, [pc, #204]	@ (80028c4 <menu+0x1554>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	f083 0301 	eor.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <menu+0x14b2>
			kapi2Tip = kapi2Tip + 1;
 8002804:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <menu+0x1574>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b35      	ldr	r3, [pc, #212]	@ (80028e4 <menu+0x1574>)
 800280e:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002810:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <menu+0x1574>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d902      	bls.n	800281e <menu+0x14ae>
				kapi2Tip = 0;
 8002818:	4b32      	ldr	r3, [pc, #200]	@ (80028e4 <menu+0x1574>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800281e:	f001 ff6b 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002822:	2104      	movs	r1, #4
 8002824:	4826      	ldr	r0, [pc, #152]	@ (80028c0 <menu+0x1550>)
 8002826:	f006 fbd9 	bl	8008fdc <HAL_GPIO_ReadPin>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d115      	bne.n	800285c <menu+0x14ec>
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <menu+0x1554>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f083 0301 	eor.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00e      	beq.n	800285c <menu+0x14ec>
			kapi2Tip = kapi2Tip - 1;
 800283e:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <menu+0x1574>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <menu+0x1574>)
 8002848:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800284a:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <menu+0x1574>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d902      	bls.n	8002858 <menu+0x14e8>
		   		kapi2Tip = 2;
 8002852:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <menu+0x1574>)
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002858:	f001 ff4e 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800285c:	2108      	movs	r1, #8
 800285e:	4818      	ldr	r0, [pc, #96]	@ (80028c0 <menu+0x1550>)
 8002860:	f006 fbbc 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002864:	4603      	mov	r3, r0
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10d      	bne.n	8002886 <menu+0x1516>
 800286a:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <menu+0x1554>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f083 0301 	eor.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <menu+0x1516>
			eepromData[10] = kapi2Tip;
 8002878:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <menu+0x1574>)
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <menu+0x155c>)
 800287e:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <menu+0x1560>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002886:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <menu+0x1564>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	f040 80a5 	bne.w	80029da <menu+0x166a>
		if(dilSecim == 0) {
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <menu+0x1568>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d133      	bne.n	8002900 <menu+0x1590>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002898:	4a17      	ldr	r2, [pc, #92]	@ (80028f8 <menu+0x1588>)
 800289a:	2101      	movs	r1, #1
 800289c:	2001      	movs	r0, #1
 800289e:	f005 f873 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028a2:	4a16      	ldr	r2, [pc, #88]	@ (80028fc <menu+0x158c>)
 80028a4:	2101      	movs	r1, #1
 80028a6:	2002      	movs	r0, #2
 80028a8:	f005 f86e 	bl	8007988 <lcd_print>
 80028ac:	e032      	b.n	8002914 <menu+0x15a4>
 80028ae:	bf00      	nop
 80028b0:	0800d280 	.word	0x0800d280
 80028b4:	0800d294 	.word	0x0800d294
 80028b8:	20000229 	.word	0x20000229
 80028bc:	200001a8 	.word	0x200001a8
 80028c0:	40010800 	.word	0x40010800
 80028c4:	2000023f 	.word	0x2000023f
 80028c8:	20000219 	.word	0x20000219
 80028cc:	20000138 	.word	0x20000138
 80028d0:	2000023c 	.word	0x2000023c
 80028d4:	20000210 	.word	0x20000210
 80028d8:	20000231 	.word	0x20000231
 80028dc:	0800d2a4 	.word	0x0800d2a4
 80028e0:	0800d2b8 	.word	0x0800d2b8
 80028e4:	2000021a 	.word	0x2000021a
 80028e8:	0800d214 	.word	0x0800d214
 80028ec:	0800d228 	.word	0x0800d228
 80028f0:	0800d238 	.word	0x0800d238
 80028f4:	0800d24c 	.word	0x0800d24c
 80028f8:	0800d2cc 	.word	0x0800d2cc
 80028fc:	0800d270 	.word	0x0800d270
		} else {
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002900:	4a9b      	ldr	r2, [pc, #620]	@ (8002b70 <menu+0x1800>)
 8002902:	2101      	movs	r1, #1
 8002904:	2001      	movs	r0, #1
 8002906:	f005 f83f 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800290a:	4a9a      	ldr	r2, [pc, #616]	@ (8002b74 <menu+0x1804>)
 800290c:	2101      	movs	r1, #1
 800290e:	2002      	movs	r0, #2
 8002910:	f005 f83a 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, ikinciKapiAcSuresiText);
		//lcd_print(2, 1, kacSaniyeText);

		itoa(kapi2AcSure, snum, 10);
 8002914:	4b98      	ldr	r3, [pc, #608]	@ (8002b78 <menu+0x1808>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	220a      	movs	r2, #10
 800291a:	4998      	ldr	r1, [pc, #608]	@ (8002b7c <menu+0x180c>)
 800291c:	4618      	mov	r0, r3
 800291e:	f009 fb89 	bl	800c034 <itoa>
		lcd_print(2,16,snum);
 8002922:	4a96      	ldr	r2, [pc, #600]	@ (8002b7c <menu+0x180c>)
 8002924:	2110      	movs	r1, #16
 8002926:	2002      	movs	r0, #2
 8002928:	f005 f82e 	bl	8007988 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800292c:	2102      	movs	r1, #2
 800292e:	4894      	ldr	r0, [pc, #592]	@ (8002b80 <menu+0x1810>)
 8002930:	f006 fb54 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002934:	4603      	mov	r3, r0
 8002936:	2b01      	cmp	r3, #1
 8002938:	d119      	bne.n	800296e <menu+0x15fe>
 800293a:	4b92      	ldr	r3, [pc, #584]	@ (8002b84 <menu+0x1814>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	f083 0301 	eor.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <menu+0x15fe>
 8002948:	4b8f      	ldr	r3, [pc, #572]	@ (8002b88 <menu+0x1818>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10e      	bne.n	800296e <menu+0x15fe>
			kapi2AcSure = kapi2AcSure + 1;
 8002950:	4b89      	ldr	r3, [pc, #548]	@ (8002b78 <menu+0x1808>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	b2da      	uxtb	r2, r3
 8002958:	4b87      	ldr	r3, [pc, #540]	@ (8002b78 <menu+0x1808>)
 800295a:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800295c:	4b86      	ldr	r3, [pc, #536]	@ (8002b78 <menu+0x1808>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d902      	bls.n	800296a <menu+0x15fa>
				kapi2AcSure = 0;
 8002964:	4b84      	ldr	r3, [pc, #528]	@ (8002b78 <menu+0x1808>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800296a:	f001 fec5 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800296e:	2104      	movs	r1, #4
 8002970:	4883      	ldr	r0, [pc, #524]	@ (8002b80 <menu+0x1810>)
 8002972:	f006 fb33 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002976:	4603      	mov	r3, r0
 8002978:	2b01      	cmp	r3, #1
 800297a:	d119      	bne.n	80029b0 <menu+0x1640>
 800297c:	4b81      	ldr	r3, [pc, #516]	@ (8002b84 <menu+0x1814>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	f083 0301 	eor.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <menu+0x1640>
 800298a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b88 <menu+0x1818>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10e      	bne.n	80029b0 <menu+0x1640>
			kapi2AcSure = kapi2AcSure - 1;
 8002992:	4b79      	ldr	r3, [pc, #484]	@ (8002b78 <menu+0x1808>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3b01      	subs	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b77      	ldr	r3, [pc, #476]	@ (8002b78 <menu+0x1808>)
 800299c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800299e:	4b76      	ldr	r3, [pc, #472]	@ (8002b78 <menu+0x1808>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d902      	bls.n	80029ac <menu+0x163c>
		   		kapi2AcSure = 5;
 80029a6:	4b74      	ldr	r3, [pc, #464]	@ (8002b78 <menu+0x1808>)
 80029a8:	2205      	movs	r2, #5
 80029aa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029ac:	f001 fea4 	bl	80046f8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b0:	2108      	movs	r1, #8
 80029b2:	4873      	ldr	r0, [pc, #460]	@ (8002b80 <menu+0x1810>)
 80029b4:	f006 fb12 	bl	8008fdc <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10d      	bne.n	80029da <menu+0x166a>
 80029be:	4b71      	ldr	r3, [pc, #452]	@ (8002b84 <menu+0x1814>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d006      	beq.n	80029da <menu+0x166a>
			eepromData[11] = kapi2AcSure;
 80029cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b78 <menu+0x1808>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	4b6e      	ldr	r3, [pc, #440]	@ (8002b8c <menu+0x181c>)
 80029d2:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80029d4:	4b6e      	ldr	r3, [pc, #440]	@ (8002b90 <menu+0x1820>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80029da:	4b6e      	ldr	r3, [pc, #440]	@ (8002b94 <menu+0x1824>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b0d      	cmp	r3, #13
 80029e0:	f040 8089 	bne.w	8002af6 <menu+0x1786>
		if(dilSecim == 0) {
 80029e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b98 <menu+0x1828>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <menu+0x1688>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80029ec:	4a6b      	ldr	r2, [pc, #428]	@ (8002b9c <menu+0x182c>)
 80029ee:	2101      	movs	r1, #1
 80029f0:	2001      	movs	r0, #1
 80029f2:	f004 ffc9 	bl	8007988 <lcd_print>
 80029f6:	e008      	b.n	8002a0a <menu+0x169a>
		} else if(dilSecim == 1){
 80029f8:	4b67      	ldr	r3, [pc, #412]	@ (8002b98 <menu+0x1828>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d104      	bne.n	8002a0a <menu+0x169a>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002a00:	4a67      	ldr	r2, [pc, #412]	@ (8002ba0 <menu+0x1830>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	2001      	movs	r0, #1
 8002a06:	f004 ffbf 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, tablaKapiTipiText);

		if(kapitablaTip == 0) {
 8002a0a:	4b66      	ldr	r3, [pc, #408]	@ (8002ba4 <menu+0x1834>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <menu+0x16ae>
			lcd_print(2, 1, "Prudhome        ");
 8002a12:	4a65      	ldr	r2, [pc, #404]	@ (8002ba8 <menu+0x1838>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	2002      	movs	r0, #2
 8002a18:	f004 ffb6 	bl	8007988 <lcd_print>
 8002a1c:	e01c      	b.n	8002a58 <menu+0x16e8>
			//lcd_print(2, 1, prudhomeTextGN);
		} else if(kapitablaTip == 1) {
 8002a1e:	4b61      	ldr	r3, [pc, #388]	@ (8002ba4 <menu+0x1834>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10f      	bne.n	8002a46 <menu+0x16d6>
			if(dilSecim == 0) {
 8002a26:	4b5c      	ldr	r3, [pc, #368]	@ (8002b98 <menu+0x1828>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <menu+0x16ca>
				lcd_print(2, 1, "Buton kontrollu");
 8002a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bac <menu+0x183c>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	2002      	movs	r0, #2
 8002a34:	f004 ffa8 	bl	8007988 <lcd_print>
 8002a38:	e00e      	b.n	8002a58 <menu+0x16e8>
			} else {
				lcd_print(2, 1, "Button cntrolled");
 8002a3a:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb0 <menu+0x1840>)
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	2002      	movs	r0, #2
 8002a40:	f004 ffa2 	bl	8007988 <lcd_print>
 8002a44:	e008      	b.n	8002a58 <menu+0x16e8>
			}
			//lcd_print(2, 1, butonKontrolluText);
		} else if(kapitablaTip == 2) {
 8002a46:	4b57      	ldr	r3, [pc, #348]	@ (8002ba4 <menu+0x1834>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d104      	bne.n	8002a58 <menu+0x16e8>
			lcd_print(2, 1, "Pizzato        ");
 8002a4e:	4a59      	ldr	r2, [pc, #356]	@ (8002bb4 <menu+0x1844>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2002      	movs	r0, #2
 8002a54:	f004 ff98 	bl	8007988 <lcd_print>
			//lcd_print(2, 1, pizzattoTextGN);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4849      	ldr	r0, [pc, #292]	@ (8002b80 <menu+0x1810>)
 8002a5c:	f006 fabe 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d115      	bne.n	8002a92 <menu+0x1722>
 8002a66:	4b47      	ldr	r3, [pc, #284]	@ (8002b84 <menu+0x1814>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	f083 0301 	eor.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <menu+0x1722>
			kapitablaTip = kapitablaTip + 1;
 8002a74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba4 <menu+0x1834>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <menu+0x1834>)
 8002a7e:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002a80:	4b48      	ldr	r3, [pc, #288]	@ (8002ba4 <menu+0x1834>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d902      	bls.n	8002a8e <menu+0x171e>
				kapitablaTip = 0;
 8002a88:	4b46      	ldr	r3, [pc, #280]	@ (8002ba4 <menu+0x1834>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a8e:	f001 fe33 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a92:	2104      	movs	r1, #4
 8002a94:	483a      	ldr	r0, [pc, #232]	@ (8002b80 <menu+0x1810>)
 8002a96:	f006 faa1 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d115      	bne.n	8002acc <menu+0x175c>
 8002aa0:	4b38      	ldr	r3, [pc, #224]	@ (8002b84 <menu+0x1814>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f083 0301 	eor.w	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <menu+0x175c>
			kapitablaTip = kapitablaTip - 1;
 8002aae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba4 <menu+0x1834>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba4 <menu+0x1834>)
 8002ab8:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002aba:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba4 <menu+0x1834>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d902      	bls.n	8002ac8 <menu+0x1758>
		   		kapitablaTip = 2;
 8002ac2:	4b38      	ldr	r3, [pc, #224]	@ (8002ba4 <menu+0x1834>)
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ac8:	f001 fe16 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002acc:	2108      	movs	r1, #8
 8002ace:	482c      	ldr	r0, [pc, #176]	@ (8002b80 <menu+0x1810>)
 8002ad0:	f006 fa84 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10d      	bne.n	8002af6 <menu+0x1786>
 8002ada:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <menu+0x1814>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	f083 0301 	eor.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <menu+0x1786>
			eepromData[12] = kapitablaTip;
 8002ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba4 <menu+0x1834>)
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	4b27      	ldr	r3, [pc, #156]	@ (8002b8c <menu+0x181c>)
 8002aee:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002af0:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <menu+0x1820>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002af6:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <menu+0x1824>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b0e      	cmp	r3, #14
 8002afc:	f040 80f0 	bne.w	8002ce0 <menu+0x1970>
		if(dilSecim == 0) {
 8002b00:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <menu+0x1828>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <menu+0x17a4>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <menu+0x1848>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f004 ff3b 	bl	8007988 <lcd_print>
 8002b12:	e004      	b.n	8002b1e <menu+0x17ae>
		} else {
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002b14:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <menu+0x184c>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f004 ff35 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, tablaKapiAcKonumText);

		if(kapiTablaAcKonum == 0) {
 8002b1e:	4b28      	ldr	r3, [pc, #160]	@ (8002bc0 <menu+0x1850>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <menu+0x17d6>
			if(dilSecim == 0){
 8002b26:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <menu+0x1828>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <menu+0x17ca>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b2e:	4a25      	ldr	r2, [pc, #148]	@ (8002bc4 <menu+0x1854>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	2002      	movs	r0, #2
 8002b34:	f004 ff28 	bl	8007988 <lcd_print>
 8002b38:	e073      	b.n	8002c22 <menu+0x18b2>
			} else {
				lcd_print(2, 1, "1. Floor open  ");
 8002b3a:	4a23      	ldr	r2, [pc, #140]	@ (8002bc8 <menu+0x1858>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2002      	movs	r0, #2
 8002b40:	f004 ff22 	bl	8007988 <lcd_print>
 8002b44:	e06d      	b.n	8002c22 <menu+0x18b2>
			}
			//lcd_print(2, 1, birinciKattaAcText);
		} else if(kapiTablaAcKonum == 1) {
 8002b46:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <menu+0x1850>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d142      	bne.n	8002bd4 <menu+0x1864>
			if(dilSecim == 0){
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <menu+0x1828>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <menu+0x17f2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b56:	4a1d      	ldr	r2, [pc, #116]	@ (8002bcc <menu+0x185c>)
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f004 ff14 	bl	8007988 <lcd_print>
 8002b60:	e05f      	b.n	8002c22 <menu+0x18b2>
			} else {
				lcd_print(2, 1, "2. Floor open  ");
 8002b62:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd0 <menu+0x1860>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	2002      	movs	r0, #2
 8002b68:	f004 ff0e 	bl	8007988 <lcd_print>
 8002b6c:	e059      	b.n	8002c22 <menu+0x18b2>
 8002b6e:	bf00      	nop
 8002b70:	0800d2e0 	.word	0x0800d2e0
 8002b74:	0800d294 	.word	0x0800d294
 8002b78:	2000022a 	.word	0x2000022a
 8002b7c:	200001a8 	.word	0x200001a8
 8002b80:	40010800 	.word	0x40010800
 8002b84:	2000023f 	.word	0x2000023f
 8002b88:	2000021a 	.word	0x2000021a
 8002b8c:	20000138 	.word	0x20000138
 8002b90:	2000023c 	.word	0x2000023c
 8002b94:	20000210 	.word	0x20000210
 8002b98:	20000231 	.word	0x20000231
 8002b9c:	0800d2f4 	.word	0x0800d2f4
 8002ba0:	0800d308 	.word	0x0800d308
 8002ba4:	2000021b 	.word	0x2000021b
 8002ba8:	0800d214 	.word	0x0800d214
 8002bac:	0800d228 	.word	0x0800d228
 8002bb0:	0800d238 	.word	0x0800d238
 8002bb4:	0800d24c 	.word	0x0800d24c
 8002bb8:	0800d31c 	.word	0x0800d31c
 8002bbc:	0800d330 	.word	0x0800d330
 8002bc0:	2000021d 	.word	0x2000021d
 8002bc4:	0800d344 	.word	0x0800d344
 8002bc8:	0800d354 	.word	0x0800d354
 8002bcc:	0800d364 	.word	0x0800d364
 8002bd0:	0800d374 	.word	0x0800d374
			}
			//lcd_print(2, 1, ikinciKattaAcText);
		} else if(kapiTablaAcKonum == 2) {
 8002bd4:	4b9d      	ldr	r3, [pc, #628]	@ (8002e4c <menu+0x1adc>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d10f      	bne.n	8002bfc <menu+0x188c>
			if(dilSecim == 0){
 8002bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e50 <menu+0x1ae0>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <menu+0x1880>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002be4:	4a9b      	ldr	r2, [pc, #620]	@ (8002e54 <menu+0x1ae4>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	2002      	movs	r0, #2
 8002bea:	f004 fecd 	bl	8007988 <lcd_print>
 8002bee:	e018      	b.n	8002c22 <menu+0x18b2>
			} else {
				lcd_print(2, 1, "1.+2. Floor open");
 8002bf0:	4a99      	ldr	r2, [pc, #612]	@ (8002e58 <menu+0x1ae8>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f004 fec7 	bl	8007988 <lcd_print>
 8002bfa:	e012      	b.n	8002c22 <menu+0x18b2>
			}
			//lcd_print(2, 1, birVeIkinciKattaAcText);
		} else if(kapiTablaAcKonum == 3) {
 8002bfc:	4b93      	ldr	r3, [pc, #588]	@ (8002e4c <menu+0x1adc>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d10e      	bne.n	8002c22 <menu+0x18b2>
			if(dilSecim == 0) {
 8002c04:	4b92      	ldr	r3, [pc, #584]	@ (8002e50 <menu+0x1ae0>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <menu+0x18a8>
				lcd_print(2, 1, "Pasif           ");
 8002c0c:	4a93      	ldr	r2, [pc, #588]	@ (8002e5c <menu+0x1aec>)
 8002c0e:	2101      	movs	r1, #1
 8002c10:	2002      	movs	r0, #2
 8002c12:	f004 feb9 	bl	8007988 <lcd_print>
 8002c16:	e004      	b.n	8002c22 <menu+0x18b2>
			} else {
				lcd_print(2, 1, "Passive         ");
 8002c18:	4a91      	ldr	r2, [pc, #580]	@ (8002e60 <menu+0x1af0>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f004 feb3 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, pasifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c22:	2102      	movs	r1, #2
 8002c24:	488f      	ldr	r0, [pc, #572]	@ (8002e64 <menu+0x1af4>)
 8002c26:	f006 f9d9 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d115      	bne.n	8002c5c <menu+0x18ec>
 8002c30:	4b8d      	ldr	r3, [pc, #564]	@ (8002e68 <menu+0x1af8>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00e      	beq.n	8002c5c <menu+0x18ec>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c3e:	4b83      	ldr	r3, [pc, #524]	@ (8002e4c <menu+0x1adc>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b81      	ldr	r3, [pc, #516]	@ (8002e4c <menu+0x1adc>)
 8002c48:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c4a:	4b80      	ldr	r3, [pc, #512]	@ (8002e4c <menu+0x1adc>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d902      	bls.n	8002c58 <menu+0x18e8>
				kapiTablaAcKonum = 0;
 8002c52:	4b7e      	ldr	r3, [pc, #504]	@ (8002e4c <menu+0x1adc>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c58:	f001 fd4e 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	4881      	ldr	r0, [pc, #516]	@ (8002e64 <menu+0x1af4>)
 8002c60:	f006 f9bc 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d115      	bne.n	8002c96 <menu+0x1926>
 8002c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e68 <menu+0x1af8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00e      	beq.n	8002c96 <menu+0x1926>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002c78:	4b74      	ldr	r3, [pc, #464]	@ (8002e4c <menu+0x1adc>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4b72      	ldr	r3, [pc, #456]	@ (8002e4c <menu+0x1adc>)
 8002c82:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002c84:	4b71      	ldr	r3, [pc, #452]	@ (8002e4c <menu+0x1adc>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d902      	bls.n	8002c92 <menu+0x1922>
		   		kapiTablaAcKonum = 2;
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e4c <menu+0x1adc>)
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c92:	f001 fd31 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c96:	2108      	movs	r1, #8
 8002c98:	4872      	ldr	r0, [pc, #456]	@ (8002e64 <menu+0x1af4>)
 8002c9a:	f006 f99f 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d11d      	bne.n	8002ce0 <menu+0x1970>
 8002ca4:	4b70      	ldr	r3, [pc, #448]	@ (8002e68 <menu+0x1af8>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <menu+0x1970>
			eepromData[34] = kapiTablaAcKonum;
 8002cb2:	4b66      	ldr	r3, [pc, #408]	@ (8002e4c <menu+0x1adc>)
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e6c <menu+0x1afc>)
 8002cb8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002cbc:	4b63      	ldr	r3, [pc, #396]	@ (8002e4c <menu+0x1adc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <menu+0x195c>
 8002cc4:	4b61      	ldr	r3, [pc, #388]	@ (8002e4c <menu+0x1adc>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d106      	bne.n	8002cda <menu+0x196a>
				altLimit = 1;
 8002ccc:	4b68      	ldr	r3, [pc, #416]	@ (8002e70 <menu+0x1b00>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002cd2:	4b67      	ldr	r3, [pc, #412]	@ (8002e70 <menu+0x1b00>)
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	4b65      	ldr	r3, [pc, #404]	@ (8002e6c <menu+0x1afc>)
 8002cd8:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002cda:	4b66      	ldr	r3, [pc, #408]	@ (8002e74 <menu+0x1b04>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002ce0:	4b65      	ldr	r3, [pc, #404]	@ (8002e78 <menu+0x1b08>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d17b      	bne.n	8002de0 <menu+0x1a70>
		if(dilSecim == 0) {
 8002ce8:	4b59      	ldr	r3, [pc, #356]	@ (8002e50 <menu+0x1ae0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <menu+0x1996>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002cf0:	4a62      	ldr	r2, [pc, #392]	@ (8002e7c <menu+0x1b0c>)
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f004 fe47 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002cfa:	4a61      	ldr	r2, [pc, #388]	@ (8002e80 <menu+0x1b10>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f004 fe42 	bl	8007988 <lcd_print>
 8002d04:	e009      	b.n	8002d1a <menu+0x19aa>
		} else {
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002d06:	4a5f      	ldr	r2, [pc, #380]	@ (8002e84 <menu+0x1b14>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f004 fe3c 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d10:	4a5d      	ldr	r2, [pc, #372]	@ (8002e88 <menu+0x1b18>)
 8002d12:	2101      	movs	r1, #1
 8002d14:	2002      	movs	r0, #2
 8002d16:	f004 fe37 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, tablaKapiAcSureText);
		//lcd_print(2, 1, kacSaniyeText);

		itoa(kapiTablaAcSure, snum, 10);
 8002d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8002e8c <menu+0x1b1c>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	220a      	movs	r2, #10
 8002d20:	495b      	ldr	r1, [pc, #364]	@ (8002e90 <menu+0x1b20>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	f009 f986 	bl	800c034 <itoa>
		lcd_print(2,16,snum);
 8002d28:	4a59      	ldr	r2, [pc, #356]	@ (8002e90 <menu+0x1b20>)
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	2002      	movs	r0, #2
 8002d2e:	f004 fe2b 	bl	8007988 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d32:	2102      	movs	r1, #2
 8002d34:	484b      	ldr	r0, [pc, #300]	@ (8002e64 <menu+0x1af4>)
 8002d36:	f006 f951 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d119      	bne.n	8002d74 <menu+0x1a04>
 8002d40:	4b49      	ldr	r3, [pc, #292]	@ (8002e68 <menu+0x1af8>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <menu+0x1a04>
 8002d4e:	4b51      	ldr	r3, [pc, #324]	@ (8002e94 <menu+0x1b24>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10e      	bne.n	8002d74 <menu+0x1a04>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d56:	4b4d      	ldr	r3, [pc, #308]	@ (8002e8c <menu+0x1b1c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e8c <menu+0x1b1c>)
 8002d60:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002d62:	4b4a      	ldr	r3, [pc, #296]	@ (8002e8c <menu+0x1b1c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d902      	bls.n	8002d70 <menu+0x1a00>
				kapiTablaAcSure = 0;
 8002d6a:	4b48      	ldr	r3, [pc, #288]	@ (8002e8c <menu+0x1b1c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d70:	f001 fcc2 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d74:	2104      	movs	r1, #4
 8002d76:	483b      	ldr	r0, [pc, #236]	@ (8002e64 <menu+0x1af4>)
 8002d78:	f006 f930 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d119      	bne.n	8002db6 <menu+0x1a46>
 8002d82:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <menu+0x1af8>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <menu+0x1a46>
 8002d90:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <menu+0x1b24>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10e      	bne.n	8002db6 <menu+0x1a46>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d98:	4b3c      	ldr	r3, [pc, #240]	@ (8002e8c <menu+0x1b1c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b3a      	ldr	r3, [pc, #232]	@ (8002e8c <menu+0x1b1c>)
 8002da2:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002da4:	4b39      	ldr	r3, [pc, #228]	@ (8002e8c <menu+0x1b1c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d902      	bls.n	8002db2 <menu+0x1a42>
		   		kapiTablaAcSure = 5;
 8002dac:	4b37      	ldr	r3, [pc, #220]	@ (8002e8c <menu+0x1b1c>)
 8002dae:	2205      	movs	r2, #5
 8002db0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002db2:	f001 fca1 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002db6:	2108      	movs	r1, #8
 8002db8:	482a      	ldr	r0, [pc, #168]	@ (8002e64 <menu+0x1af4>)
 8002dba:	f006 f90f 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10d      	bne.n	8002de0 <menu+0x1a70>
 8002dc4:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <menu+0x1af8>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f083 0301 	eor.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <menu+0x1a70>
			eepromData[13] = kapiTablaAcSure;
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e8c <menu+0x1b1c>)
 8002dd4:	781a      	ldrb	r2, [r3, #0]
 8002dd6:	4b25      	ldr	r3, [pc, #148]	@ (8002e6c <menu+0x1afc>)
 8002dd8:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002dda:	4b26      	ldr	r3, [pc, #152]	@ (8002e74 <menu+0x1b04>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <menu+0x1b08>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	f040 80b3 	bne.w	8002f50 <menu+0x1be0>
		if(dilSecim == 0) {
 8002dea:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <menu+0x1ae0>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <menu+0x1a8e>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002df2:	4a29      	ldr	r2, [pc, #164]	@ (8002e98 <menu+0x1b28>)
 8002df4:	2101      	movs	r1, #1
 8002df6:	2001      	movs	r0, #1
 8002df8:	f004 fdc6 	bl	8007988 <lcd_print>
 8002dfc:	e004      	b.n	8002e08 <menu+0x1a98>
		} else {
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002dfe:	4a27      	ldr	r2, [pc, #156]	@ (8002e9c <menu+0x1b2c>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	2001      	movs	r0, #1
 8002e04:	f004 fdc0 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, yukariYavaslamaLimitiText);

		if(yukariYavasLimit == 0) {
 8002e08:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <menu+0x1b30>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <menu+0x1ac0>
			if(dilSecim == 0) {
 8002e10:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <menu+0x1ae0>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <menu+0x1ab4>
				lcd_print(2, 1, "Pasif           ");
 8002e18:	4a10      	ldr	r2, [pc, #64]	@ (8002e5c <menu+0x1aec>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f004 fdb3 	bl	8007988 <lcd_print>
 8002e22:	e046      	b.n	8002eb2 <menu+0x1b42>
			} else {
				lcd_print(2, 1, "Passive         ");
 8002e24:	4a0e      	ldr	r2, [pc, #56]	@ (8002e60 <menu+0x1af0>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	2002      	movs	r0, #2
 8002e2a:	f004 fdad 	bl	8007988 <lcd_print>
 8002e2e:	e040      	b.n	8002eb2 <menu+0x1b42>
			}
			//lcd_print(2, 1, pasifText);
		} else if(yukariYavasLimit == 1) {
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <menu+0x1b30>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d13c      	bne.n	8002eb2 <menu+0x1b42>
			if(dilSecim == 0) {
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <menu+0x1ae0>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d133      	bne.n	8002ea8 <menu+0x1b38>
				lcd_print(2, 1, "Aktif           ");
 8002e40:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <menu+0x1b34>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	2002      	movs	r0, #2
 8002e46:	f004 fd9f 	bl	8007988 <lcd_print>
 8002e4a:	e032      	b.n	8002eb2 <menu+0x1b42>
 8002e4c:	2000021d 	.word	0x2000021d
 8002e50:	20000231 	.word	0x20000231
 8002e54:	0800d384 	.word	0x0800d384
 8002e58:	0800d398 	.word	0x0800d398
 8002e5c:	0800d00c 	.word	0x0800d00c
 8002e60:	0800d020 	.word	0x0800d020
 8002e64:	40010800 	.word	0x40010800
 8002e68:	2000023f 	.word	0x2000023f
 8002e6c:	20000138 	.word	0x20000138
 8002e70:	20000216 	.word	0x20000216
 8002e74:	2000023c 	.word	0x2000023c
 8002e78:	20000210 	.word	0x20000210
 8002e7c:	0800d3ac 	.word	0x0800d3ac
 8002e80:	0800d270 	.word	0x0800d270
 8002e84:	0800d3c0 	.word	0x0800d3c0
 8002e88:	0800d294 	.word	0x0800d294
 8002e8c:	2000022b 	.word	0x2000022b
 8002e90:	200001a8 	.word	0x200001a8
 8002e94:	2000021b 	.word	0x2000021b
 8002e98:	0800d3d4 	.word	0x0800d3d4
 8002e9c:	0800d3e8 	.word	0x0800d3e8
 8002ea0:	2000021e 	.word	0x2000021e
 8002ea4:	0800d06c 	.word	0x0800d06c
			} else {
				lcd_print(2, 1, "Active          ");
 8002ea8:	4a99      	ldr	r2, [pc, #612]	@ (8003110 <menu+0x1da0>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2002      	movs	r0, #2
 8002eae:	f004 fd6b 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	4897      	ldr	r0, [pc, #604]	@ (8003114 <menu+0x1da4>)
 8002eb6:	f006 f891 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d115      	bne.n	8002eec <menu+0x1b7c>
 8002ec0:	4b95      	ldr	r3, [pc, #596]	@ (8003118 <menu+0x1da8>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	f083 0301 	eor.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <menu+0x1b7c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002ece:	4b93      	ldr	r3, [pc, #588]	@ (800311c <menu+0x1dac>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b91      	ldr	r3, [pc, #580]	@ (800311c <menu+0x1dac>)
 8002ed8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002eda:	4b90      	ldr	r3, [pc, #576]	@ (800311c <menu+0x1dac>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d902      	bls.n	8002ee8 <menu+0x1b78>
				yukariYavasLimit = 0;
 8002ee2:	4b8e      	ldr	r3, [pc, #568]	@ (800311c <menu+0x1dac>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ee8:	f001 fc06 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eec:	2104      	movs	r1, #4
 8002eee:	4889      	ldr	r0, [pc, #548]	@ (8003114 <menu+0x1da4>)
 8002ef0:	f006 f874 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d115      	bne.n	8002f26 <menu+0x1bb6>
 8002efa:	4b87      	ldr	r3, [pc, #540]	@ (8003118 <menu+0x1da8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00e      	beq.n	8002f26 <menu+0x1bb6>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002f08:	4b84      	ldr	r3, [pc, #528]	@ (800311c <menu+0x1dac>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b82      	ldr	r3, [pc, #520]	@ (800311c <menu+0x1dac>)
 8002f12:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002f14:	4b81      	ldr	r3, [pc, #516]	@ (800311c <menu+0x1dac>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <menu+0x1bb2>
		   		yukariYavasLimit = 1;
 8002f1c:	4b7f      	ldr	r3, [pc, #508]	@ (800311c <menu+0x1dac>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f22:	f001 fbe9 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f26:	2108      	movs	r1, #8
 8002f28:	487a      	ldr	r0, [pc, #488]	@ (8003114 <menu+0x1da4>)
 8002f2a:	f006 f857 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10d      	bne.n	8002f50 <menu+0x1be0>
 8002f34:	4b78      	ldr	r3, [pc, #480]	@ (8003118 <menu+0x1da8>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	f083 0301 	eor.w	r3, r3, #1
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d006      	beq.n	8002f50 <menu+0x1be0>
			eepromData[14] = yukariYavasLimit;
 8002f42:	4b76      	ldr	r3, [pc, #472]	@ (800311c <menu+0x1dac>)
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <menu+0x1db0>)
 8002f48:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f4a:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <menu+0x1db4>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002f50:	4b75      	ldr	r3, [pc, #468]	@ (8003128 <menu+0x1db8>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b11      	cmp	r3, #17
 8002f56:	f040 80b3 	bne.w	80030c0 <menu+0x1d50>
		if(dilSecim == 0) {
 8002f5a:	4b74      	ldr	r3, [pc, #464]	@ (800312c <menu+0x1dbc>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <menu+0x1bfe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002f62:	4a73      	ldr	r2, [pc, #460]	@ (8003130 <menu+0x1dc0>)
 8002f64:	2101      	movs	r1, #1
 8002f66:	2001      	movs	r0, #1
 8002f68:	f004 fd0e 	bl	8007988 <lcd_print>
 8002f6c:	e004      	b.n	8002f78 <menu+0x1c08>
		} else {
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002f6e:	4a71      	ldr	r2, [pc, #452]	@ (8003134 <menu+0x1dc4>)
 8002f70:	2101      	movs	r1, #1
 8002f72:	2001      	movs	r0, #1
 8002f74:	f004 fd08 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, devirmeYuruyusMenuText);

		if(devirmeYuruyusSecim == 2) {
 8002f78:	4b6f      	ldr	r3, [pc, #444]	@ (8003138 <menu+0x1dc8>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d10f      	bne.n	8002fa0 <menu+0x1c30>
			if(dilSecim == 0){
 8002f80:	4b6a      	ldr	r3, [pc, #424]	@ (800312c <menu+0x1dbc>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <menu+0x1c24>
				lcd_print(2, 1, "Devirme aktif  ");
 8002f88:	4a6c      	ldr	r2, [pc, #432]	@ (800313c <menu+0x1dcc>)
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	f004 fcfb 	bl	8007988 <lcd_print>
 8002f92:	e02c      	b.n	8002fee <menu+0x1c7e>
			} else {
				lcd_print(2, 1, "Tipping active ");
 8002f94:	4a6a      	ldr	r2, [pc, #424]	@ (8003140 <menu+0x1dd0>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f004 fcf5 	bl	8007988 <lcd_print>
 8002f9e:	e026      	b.n	8002fee <menu+0x1c7e>
			}
			//lcd_print(2, 1, devirmeAktifText);
		} else if(devirmeYuruyusSecim == 1) {
 8002fa0:	4b65      	ldr	r3, [pc, #404]	@ (8003138 <menu+0x1dc8>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10f      	bne.n	8002fc8 <menu+0x1c58>
			if(dilSecim == 0){
 8002fa8:	4b60      	ldr	r3, [pc, #384]	@ (800312c <menu+0x1dbc>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <menu+0x1c4c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002fb0:	4a64      	ldr	r2, [pc, #400]	@ (8003144 <menu+0x1dd4>)
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	2002      	movs	r0, #2
 8002fb6:	f004 fce7 	bl	8007988 <lcd_print>
 8002fba:	e018      	b.n	8002fee <menu+0x1c7e>
			} else {
				lcd_print(2, 1, "Drive active   ");
 8002fbc:	4a62      	ldr	r2, [pc, #392]	@ (8003148 <menu+0x1dd8>)
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2002      	movs	r0, #2
 8002fc2:	f004 fce1 	bl	8007988 <lcd_print>
 8002fc6:	e012      	b.n	8002fee <menu+0x1c7e>
			}
			//lcd_print(2, 1, yuruyusAktifText);
		} else if(devirmeYuruyusSecim == 0) {
 8002fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8003138 <menu+0x1dc8>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10e      	bne.n	8002fee <menu+0x1c7e>
			if(dilSecim == 0) {
 8002fd0:	4b56      	ldr	r3, [pc, #344]	@ (800312c <menu+0x1dbc>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <menu+0x1c74>
				lcd_print(2, 1, "Pasif           ");
 8002fd8:	4a5c      	ldr	r2, [pc, #368]	@ (800314c <menu+0x1ddc>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f004 fcd3 	bl	8007988 <lcd_print>
 8002fe2:	e004      	b.n	8002fee <menu+0x1c7e>
			} else {
				lcd_print(2, 1, "Passive         ");
 8002fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8003150 <menu+0x1de0>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f004 fccd 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, pasifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4848      	ldr	r0, [pc, #288]	@ (8003114 <menu+0x1da4>)
 8002ff2:	f005 fff3 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d115      	bne.n	8003028 <menu+0x1cb8>
 8002ffc:	4b46      	ldr	r3, [pc, #280]	@ (8003118 <menu+0x1da8>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f083 0301 	eor.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <menu+0x1cb8>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800300a:	4b4b      	ldr	r3, [pc, #300]	@ (8003138 <menu+0x1dc8>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b49      	ldr	r3, [pc, #292]	@ (8003138 <menu+0x1dc8>)
 8003014:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003016:	4b48      	ldr	r3, [pc, #288]	@ (8003138 <menu+0x1dc8>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d902      	bls.n	8003024 <menu+0x1cb4>
				devirmeYuruyusSecim = 0;
 800301e:	4b46      	ldr	r3, [pc, #280]	@ (8003138 <menu+0x1dc8>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003024:	f001 fb68 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003028:	2104      	movs	r1, #4
 800302a:	483a      	ldr	r0, [pc, #232]	@ (8003114 <menu+0x1da4>)
 800302c:	f005 ffd6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d115      	bne.n	8003062 <menu+0x1cf2>
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <menu+0x1da8>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00e      	beq.n	8003062 <menu+0x1cf2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003044:	4b3c      	ldr	r3, [pc, #240]	@ (8003138 <menu+0x1dc8>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b3a      	ldr	r3, [pc, #232]	@ (8003138 <menu+0x1dc8>)
 800304e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003050:	4b39      	ldr	r3, [pc, #228]	@ (8003138 <menu+0x1dc8>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d902      	bls.n	800305e <menu+0x1cee>
		   		devirmeYuruyusSecim = 2;
 8003058:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <menu+0x1dc8>)
 800305a:	2202      	movs	r2, #2
 800305c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800305e:	f001 fb4b 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003062:	2108      	movs	r1, #8
 8003064:	482b      	ldr	r0, [pc, #172]	@ (8003114 <menu+0x1da4>)
 8003066:	f005 ffb9 	bl	8008fdc <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b01      	cmp	r3, #1
 800306e:	d127      	bne.n	80030c0 <menu+0x1d50>
 8003070:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <menu+0x1da8>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f083 0301 	eor.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d020      	beq.n	80030c0 <menu+0x1d50>
			eepromData[15] = devirmeYuruyusSecim;
 800307e:	4b2e      	ldr	r3, [pc, #184]	@ (8003138 <menu+0x1dc8>)
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <menu+0x1db0>)
 8003084:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003086:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <menu+0x1dc8>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d003      	beq.n	8003096 <menu+0x1d26>
 800308e:	4b2a      	ldr	r3, [pc, #168]	@ (8003138 <menu+0x1dc8>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d106      	bne.n	80030a4 <menu+0x1d34>
				calismaSekli = 0;
 8003096:	4b2f      	ldr	r3, [pc, #188]	@ (8003154 <menu+0x1de4>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800309c:	4b2d      	ldr	r3, [pc, #180]	@ (8003154 <menu+0x1de4>)
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <menu+0x1db0>)
 80030a2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80030a4:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <menu+0x1dc8>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <menu+0x1d4a>
				devirmeSilindirTipi = 1;
 80030ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003158 <menu+0x1de8>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80030b2:	4b29      	ldr	r3, [pc, #164]	@ (8003158 <menu+0x1de8>)
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <menu+0x1db0>)
 80030b8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80030ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <menu+0x1db4>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <menu+0x1db8>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	f040 80ca 	bne.w	800325e <menu+0x1eee>
		if(devirmeYuruyusSecim == 2) {
 80030ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <menu+0x1dc8>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d10f      	bne.n	80030f2 <menu+0x1d82>
			if(dilSecim == 0) {
 80030d2:	4b16      	ldr	r3, [pc, #88]	@ (800312c <menu+0x1dbc>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <menu+0x1d76>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80030da:	4a20      	ldr	r2, [pc, #128]	@ (800315c <menu+0x1dec>)
 80030dc:	2101      	movs	r1, #1
 80030de:	2001      	movs	r0, #1
 80030e0:	f004 fc52 	bl	8007988 <lcd_print>
 80030e4:	e045      	b.n	8003172 <menu+0x1e02>
			} else {
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80030e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003160 <menu+0x1df0>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	2001      	movs	r0, #1
 80030ec:	f004 fc4c 	bl	8007988 <lcd_print>
 80030f0:	e03f      	b.n	8003172 <menu+0x1e02>
			}
			//lcd_print(1, 1, devirmeYukariText);
		} else if(devirmeYuruyusSecim == 1) {
 80030f2:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <menu+0x1dc8>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d13b      	bne.n	8003172 <menu+0x1e02>
			if(dilSecim == 0){
 80030fa:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <menu+0x1dbc>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d132      	bne.n	8003168 <menu+0x1df8>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003102:	4a18      	ldr	r2, [pc, #96]	@ (8003164 <menu+0x1df4>)
 8003104:	2101      	movs	r1, #1
 8003106:	2001      	movs	r0, #1
 8003108:	f004 fc3e 	bl	8007988 <lcd_print>
 800310c:	e031      	b.n	8003172 <menu+0x1e02>
 800310e:	bf00      	nop
 8003110:	0800d080 	.word	0x0800d080
 8003114:	40010800 	.word	0x40010800
 8003118:	2000023f 	.word	0x2000023f
 800311c:	2000021e 	.word	0x2000021e
 8003120:	20000138 	.word	0x20000138
 8003124:	2000023c 	.word	0x2000023c
 8003128:	20000210 	.word	0x20000210
 800312c:	20000231 	.word	0x20000231
 8003130:	0800d3fc 	.word	0x0800d3fc
 8003134:	0800d410 	.word	0x0800d410
 8003138:	2000021f 	.word	0x2000021f
 800313c:	0800d424 	.word	0x0800d424
 8003140:	0800d434 	.word	0x0800d434
 8003144:	0800d444 	.word	0x0800d444
 8003148:	0800d454 	.word	0x0800d454
 800314c:	0800d00c 	.word	0x0800d00c
 8003150:	0800d020 	.word	0x0800d020
 8003154:	20000211 	.word	0x20000211
 8003158:	20000222 	.word	0x20000222
 800315c:	0800d464 	.word	0x0800d464
 8003160:	0800d478 	.word	0x0800d478
 8003164:	0800d488 	.word	0x0800d488
			} else {
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003168:	4a9a      	ldr	r2, [pc, #616]	@ (80033d4 <menu+0x2064>)
 800316a:	2101      	movs	r1, #1
 800316c:	2001      	movs	r0, #1
 800316e:	f004 fc0b 	bl	8007988 <lcd_print>
			}
			//lcd_print(1, 1, yuruyusIleriText);
		}

		if(devirmeYukariIleriLimit == 0) {
 8003172:	4b99      	ldr	r3, [pc, #612]	@ (80033d8 <menu+0x2068>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <menu+0x1e2a>
			if(dilSecim == 0) {
 800317a:	4b98      	ldr	r3, [pc, #608]	@ (80033dc <menu+0x206c>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <menu+0x1e1e>
				lcd_print(2, 1, "Pasif           ");
 8003182:	4a97      	ldr	r2, [pc, #604]	@ (80033e0 <menu+0x2070>)
 8003184:	2101      	movs	r1, #1
 8003186:	2002      	movs	r0, #2
 8003188:	f004 fbfe 	bl	8007988 <lcd_print>
 800318c:	e018      	b.n	80031c0 <menu+0x1e50>
			} else {
				lcd_print(2, 1, "Passive         ");
 800318e:	4a95      	ldr	r2, [pc, #596]	@ (80033e4 <menu+0x2074>)
 8003190:	2101      	movs	r1, #1
 8003192:	2002      	movs	r0, #2
 8003194:	f004 fbf8 	bl	8007988 <lcd_print>
 8003198:	e012      	b.n	80031c0 <menu+0x1e50>
			}
			//lcd_print(2, 1, pasifText);
		} else if(devirmeYukariIleriLimit == 1){
 800319a:	4b8f      	ldr	r3, [pc, #572]	@ (80033d8 <menu+0x2068>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10e      	bne.n	80031c0 <menu+0x1e50>
			if(dilSecim == 0){
 80031a2:	4b8e      	ldr	r3, [pc, #568]	@ (80033dc <menu+0x206c>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <menu+0x1e46>
				lcd_print(2, 1, "Aktif           ");
 80031aa:	4a8f      	ldr	r2, [pc, #572]	@ (80033e8 <menu+0x2078>)
 80031ac:	2101      	movs	r1, #1
 80031ae:	2002      	movs	r0, #2
 80031b0:	f004 fbea 	bl	8007988 <lcd_print>
 80031b4:	e004      	b.n	80031c0 <menu+0x1e50>
			} else {
				lcd_print(2, 1, "Active          ");
 80031b6:	4a8d      	ldr	r2, [pc, #564]	@ (80033ec <menu+0x207c>)
 80031b8:	2101      	movs	r1, #1
 80031ba:	2002      	movs	r0, #2
 80031bc:	f004 fbe4 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c0:	2102      	movs	r1, #2
 80031c2:	488b      	ldr	r0, [pc, #556]	@ (80033f0 <menu+0x2080>)
 80031c4:	f005 ff0a 	bl	8008fdc <HAL_GPIO_ReadPin>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d115      	bne.n	80031fa <menu+0x1e8a>
 80031ce:	4b89      	ldr	r3, [pc, #548]	@ (80033f4 <menu+0x2084>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	f083 0301 	eor.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00e      	beq.n	80031fa <menu+0x1e8a>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80031dc:	4b7e      	ldr	r3, [pc, #504]	@ (80033d8 <menu+0x2068>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	4b7c      	ldr	r3, [pc, #496]	@ (80033d8 <menu+0x2068>)
 80031e6:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80031e8:	4b7b      	ldr	r3, [pc, #492]	@ (80033d8 <menu+0x2068>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d902      	bls.n	80031f6 <menu+0x1e86>
				devirmeYukariIleriLimit = 0;
 80031f0:	4b79      	ldr	r3, [pc, #484]	@ (80033d8 <menu+0x2068>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031f6:	f001 fa7f 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fa:	2104      	movs	r1, #4
 80031fc:	487c      	ldr	r0, [pc, #496]	@ (80033f0 <menu+0x2080>)
 80031fe:	f005 feed 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003202:	4603      	mov	r3, r0
 8003204:	2b01      	cmp	r3, #1
 8003206:	d115      	bne.n	8003234 <menu+0x1ec4>
 8003208:	4b7a      	ldr	r3, [pc, #488]	@ (80033f4 <menu+0x2084>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00e      	beq.n	8003234 <menu+0x1ec4>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003216:	4b70      	ldr	r3, [pc, #448]	@ (80033d8 <menu+0x2068>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b6e      	ldr	r3, [pc, #440]	@ (80033d8 <menu+0x2068>)
 8003220:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003222:	4b6d      	ldr	r3, [pc, #436]	@ (80033d8 <menu+0x2068>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <menu+0x1ec0>
		   		devirmeYukariIleriLimit = 1;
 800322a:	4b6b      	ldr	r3, [pc, #428]	@ (80033d8 <menu+0x2068>)
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003230:	f001 fa62 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003234:	2108      	movs	r1, #8
 8003236:	486e      	ldr	r0, [pc, #440]	@ (80033f0 <menu+0x2080>)
 8003238:	f005 fed0 	bl	8008fdc <HAL_GPIO_ReadPin>
 800323c:	4603      	mov	r3, r0
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10d      	bne.n	800325e <menu+0x1eee>
 8003242:	4b6c      	ldr	r3, [pc, #432]	@ (80033f4 <menu+0x2084>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f083 0301 	eor.w	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <menu+0x1eee>
			eepromData[16] = devirmeYukariIleriLimit;
 8003250:	4b61      	ldr	r3, [pc, #388]	@ (80033d8 <menu+0x2068>)
 8003252:	781a      	ldrb	r2, [r3, #0]
 8003254:	4b68      	ldr	r3, [pc, #416]	@ (80033f8 <menu+0x2088>)
 8003256:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003258:	4b68      	ldr	r3, [pc, #416]	@ (80033fc <menu+0x208c>)
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800325e:	4b68      	ldr	r3, [pc, #416]	@ (8003400 <menu+0x2090>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b13      	cmp	r3, #19
 8003264:	f040 809d 	bne.w	80033a2 <menu+0x2032>
		if(devirmeYuruyusSecim == 2) {
 8003268:	4b66      	ldr	r3, [pc, #408]	@ (8003404 <menu+0x2094>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d10f      	bne.n	8003290 <menu+0x1f20>
			if(dilSecim == 0) {
 8003270:	4b5a      	ldr	r3, [pc, #360]	@ (80033dc <menu+0x206c>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <menu+0x1f14>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003278:	4a63      	ldr	r2, [pc, #396]	@ (8003408 <menu+0x2098>)
 800327a:	2101      	movs	r1, #1
 800327c:	2001      	movs	r0, #1
 800327e:	f004 fb83 	bl	8007988 <lcd_print>
 8003282:	e018      	b.n	80032b6 <menu+0x1f46>
			} else {
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003284:	4a61      	ldr	r2, [pc, #388]	@ (800340c <menu+0x209c>)
 8003286:	2101      	movs	r1, #1
 8003288:	2001      	movs	r0, #1
 800328a:	f004 fb7d 	bl	8007988 <lcd_print>
 800328e:	e012      	b.n	80032b6 <menu+0x1f46>
			}
			//lcd_print(1, 1, devirmeAsagiSivicText);
		} else if(devirmeYuruyusSecim == 1) {
 8003290:	4b5c      	ldr	r3, [pc, #368]	@ (8003404 <menu+0x2094>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10e      	bne.n	80032b6 <menu+0x1f46>
			if(dilSecim == 0) {
 8003298:	4b50      	ldr	r3, [pc, #320]	@ (80033dc <menu+0x206c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <menu+0x1f3c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80032a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003410 <menu+0x20a0>)
 80032a2:	2101      	movs	r1, #1
 80032a4:	2001      	movs	r0, #1
 80032a6:	f004 fb6f 	bl	8007988 <lcd_print>
 80032aa:	e004      	b.n	80032b6 <menu+0x1f46>
			} else {
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80032ac:	4a59      	ldr	r2, [pc, #356]	@ (8003414 <menu+0x20a4>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	2001      	movs	r0, #1
 80032b2:	f004 fb69 	bl	8007988 <lcd_print>
			}
			//lcd_print(1, 1, yuruyusGeriSivicText);
		}

		if(devirmeAsagiGeriLimit == 0) {
 80032b6:	4b58      	ldr	r3, [pc, #352]	@ (8003418 <menu+0x20a8>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <menu+0x1f6e>
			if(dilSecim == 0) {
 80032be:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <menu+0x206c>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <menu+0x1f62>
				lcd_print(2, 1, "Pasif           ");
 80032c6:	4a46      	ldr	r2, [pc, #280]	@ (80033e0 <menu+0x2070>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	2002      	movs	r0, #2
 80032cc:	f004 fb5c 	bl	8007988 <lcd_print>
 80032d0:	e018      	b.n	8003304 <menu+0x1f94>
			} else {
				lcd_print(2, 1, "Passive         ");
 80032d2:	4a44      	ldr	r2, [pc, #272]	@ (80033e4 <menu+0x2074>)
 80032d4:	2101      	movs	r1, #1
 80032d6:	2002      	movs	r0, #2
 80032d8:	f004 fb56 	bl	8007988 <lcd_print>
 80032dc:	e012      	b.n	8003304 <menu+0x1f94>
			}
			//lcd_print(2, 1, pasifText);
		} else if(devirmeAsagiGeriLimit == 1) {
 80032de:	4b4e      	ldr	r3, [pc, #312]	@ (8003418 <menu+0x20a8>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10e      	bne.n	8003304 <menu+0x1f94>
			if(dilSecim == 0) {
 80032e6:	4b3d      	ldr	r3, [pc, #244]	@ (80033dc <menu+0x206c>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <menu+0x1f8a>
				lcd_print(2, 1, "Aktif           ");
 80032ee:	4a3e      	ldr	r2, [pc, #248]	@ (80033e8 <menu+0x2078>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	2002      	movs	r0, #2
 80032f4:	f004 fb48 	bl	8007988 <lcd_print>
 80032f8:	e004      	b.n	8003304 <menu+0x1f94>
			} else {
				lcd_print(2, 1, "Active          ");
 80032fa:	4a3c      	ldr	r2, [pc, #240]	@ (80033ec <menu+0x207c>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	2002      	movs	r0, #2
 8003300:	f004 fb42 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003304:	2102      	movs	r1, #2
 8003306:	483a      	ldr	r0, [pc, #232]	@ (80033f0 <menu+0x2080>)
 8003308:	f005 fe68 	bl	8008fdc <HAL_GPIO_ReadPin>
 800330c:	4603      	mov	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d115      	bne.n	800333e <menu+0x1fce>
 8003312:	4b38      	ldr	r3, [pc, #224]	@ (80033f4 <menu+0x2084>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00e      	beq.n	800333e <menu+0x1fce>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003320:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <menu+0x20a8>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <menu+0x20a8>)
 800332a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800332c:	4b3a      	ldr	r3, [pc, #232]	@ (8003418 <menu+0x20a8>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d902      	bls.n	800333a <menu+0x1fca>
				devirmeAsagiGeriLimit = 0;
 8003334:	4b38      	ldr	r3, [pc, #224]	@ (8003418 <menu+0x20a8>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800333a:	f001 f9dd 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800333e:	2104      	movs	r1, #4
 8003340:	482b      	ldr	r0, [pc, #172]	@ (80033f0 <menu+0x2080>)
 8003342:	f005 fe4b 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003346:	4603      	mov	r3, r0
 8003348:	2b01      	cmp	r3, #1
 800334a:	d115      	bne.n	8003378 <menu+0x2008>
 800334c:	4b29      	ldr	r3, [pc, #164]	@ (80033f4 <menu+0x2084>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	f083 0301 	eor.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00e      	beq.n	8003378 <menu+0x2008>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <menu+0x20a8>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	3b01      	subs	r3, #1
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <menu+0x20a8>)
 8003364:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003366:	4b2c      	ldr	r3, [pc, #176]	@ (8003418 <menu+0x20a8>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <menu+0x2004>
		   		devirmeAsagiGeriLimit = 1;
 800336e:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <menu+0x20a8>)
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003374:	f001 f9c0 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003378:	2108      	movs	r1, #8
 800337a:	481d      	ldr	r0, [pc, #116]	@ (80033f0 <menu+0x2080>)
 800337c:	f005 fe2e 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10d      	bne.n	80033a2 <menu+0x2032>
 8003386:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <menu+0x2084>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	f083 0301 	eor.w	r3, r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <menu+0x2032>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003394:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <menu+0x20a8>)
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <menu+0x2088>)
 800339a:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800339c:	4b17      	ldr	r3, [pc, #92]	@ (80033fc <menu+0x208c>)
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80033a2:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <menu+0x2090>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b14      	cmp	r3, #20
 80033a8:	f040 80cd 	bne.w	8003546 <menu+0x21d6>
		if(devirmeYuruyusSecim == 1) {
 80033ac:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <menu+0x2094>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d137      	bne.n	8003424 <menu+0x20b4>
			if(dilSecim == 0) {
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <menu+0x206c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <menu+0x2058>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80033bc:	4a17      	ldr	r2, [pc, #92]	@ (800341c <menu+0x20ac>)
 80033be:	2101      	movs	r1, #1
 80033c0:	2001      	movs	r0, #1
 80033c2:	f004 fae1 	bl	8007988 <lcd_print>
 80033c6:	e040      	b.n	800344a <menu+0x20da>
			} else {
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80033c8:	4a15      	ldr	r2, [pc, #84]	@ (8003420 <menu+0x20b0>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2001      	movs	r0, #1
 80033ce:	f004 fadb 	bl	8007988 <lcd_print>
 80033d2:	e03a      	b.n	800344a <menu+0x20da>
 80033d4:	0800d49c 	.word	0x0800d49c
 80033d8:	20000220 	.word	0x20000220
 80033dc:	20000231 	.word	0x20000231
 80033e0:	0800d00c 	.word	0x0800d00c
 80033e4:	0800d020 	.word	0x0800d020
 80033e8:	0800d06c 	.word	0x0800d06c
 80033ec:	0800d080 	.word	0x0800d080
 80033f0:	40010800 	.word	0x40010800
 80033f4:	2000023f 	.word	0x2000023f
 80033f8:	20000138 	.word	0x20000138
 80033fc:	2000023c 	.word	0x2000023c
 8003400:	20000210 	.word	0x20000210
 8003404:	2000021f 	.word	0x2000021f
 8003408:	0800d4b0 	.word	0x0800d4b0
 800340c:	0800d4c4 	.word	0x0800d4c4
 8003410:	0800d4d8 	.word	0x0800d4d8
 8003414:	0800d4ec 	.word	0x0800d4ec
 8003418:	20000221 	.word	0x20000221
 800341c:	0800d500 	.word	0x0800d500
 8003420:	0800d514 	.word	0x0800d514
			}
			//lcd_print(1, 1, yuruyusSecildiText);
		} else if(devirmeYuruyusSecim == 2) {
 8003424:	4b9a      	ldr	r3, [pc, #616]	@ (8003690 <menu+0x2320>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d10e      	bne.n	800344a <menu+0x20da>
			if(dilSecim == 0) {
 800342c:	4b99      	ldr	r3, [pc, #612]	@ (8003694 <menu+0x2324>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <menu+0x20d0>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003434:	4a98      	ldr	r2, [pc, #608]	@ (8003698 <menu+0x2328>)
 8003436:	2101      	movs	r1, #1
 8003438:	2001      	movs	r0, #1
 800343a:	f004 faa5 	bl	8007988 <lcd_print>
 800343e:	e004      	b.n	800344a <menu+0x20da>
			} else {
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003440:	4a96      	ldr	r2, [pc, #600]	@ (800369c <menu+0x232c>)
 8003442:	2101      	movs	r1, #1
 8003444:	2001      	movs	r0, #1
 8003446:	f004 fa9f 	bl	8007988 <lcd_print>
			}
			//lcd_print(1, 1, devirmeSilindirTipiText);
		}

		if(devirmeSilindirTipi == 0) {
 800344a:	4b95      	ldr	r3, [pc, #596]	@ (80036a0 <menu+0x2330>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10f      	bne.n	8003472 <menu+0x2102>
			if(dilSecim == 0) {
 8003452:	4b90      	ldr	r3, [pc, #576]	@ (8003694 <menu+0x2324>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <menu+0x20f6>
				lcd_print(2, 1, "Tek tesir       ");
 800345a:	4a92      	ldr	r2, [pc, #584]	@ (80036a4 <menu+0x2334>)
 800345c:	2101      	movs	r1, #1
 800345e:	2002      	movs	r0, #2
 8003460:	f004 fa92 	bl	8007988 <lcd_print>
 8003464:	e018      	b.n	8003498 <menu+0x2128>
			} else {
				lcd_print(2, 1, "Single acting  ");
 8003466:	4a90      	ldr	r2, [pc, #576]	@ (80036a8 <menu+0x2338>)
 8003468:	2101      	movs	r1, #1
 800346a:	2002      	movs	r0, #2
 800346c:	f004 fa8c 	bl	8007988 <lcd_print>
 8003470:	e012      	b.n	8003498 <menu+0x2128>
			}
			//lcd_print(2, 1, tekTesirText);
		} else if(devirmeSilindirTipi == 1) {
 8003472:	4b8b      	ldr	r3, [pc, #556]	@ (80036a0 <menu+0x2330>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10e      	bne.n	8003498 <menu+0x2128>
			if(dilSecim == 0) {
 800347a:	4b86      	ldr	r3, [pc, #536]	@ (8003694 <menu+0x2324>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <menu+0x211e>
				lcd_print(2, 1, "Cift tesir      ");
 8003482:	4a8a      	ldr	r2, [pc, #552]	@ (80036ac <menu+0x233c>)
 8003484:	2101      	movs	r1, #1
 8003486:	2002      	movs	r0, #2
 8003488:	f004 fa7e 	bl	8007988 <lcd_print>
 800348c:	e004      	b.n	8003498 <menu+0x2128>
			} else {
				lcd_print(2, 1, "Double acting  ");
 800348e:	4a88      	ldr	r2, [pc, #544]	@ (80036b0 <menu+0x2340>)
 8003490:	2101      	movs	r1, #1
 8003492:	2002      	movs	r0, #2
 8003494:	f004 fa78 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, ciftTesirText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003498:	2102      	movs	r1, #2
 800349a:	4886      	ldr	r0, [pc, #536]	@ (80036b4 <menu+0x2344>)
 800349c:	f005 fd9e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d119      	bne.n	80034da <menu+0x216a>
 80034a6:	4b84      	ldr	r3, [pc, #528]	@ (80036b8 <menu+0x2348>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f083 0301 	eor.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d012      	beq.n	80034da <menu+0x216a>
 80034b4:	4b76      	ldr	r3, [pc, #472]	@ (8003690 <menu+0x2320>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d10e      	bne.n	80034da <menu+0x216a>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80034bc:	4b78      	ldr	r3, [pc, #480]	@ (80036a0 <menu+0x2330>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b76      	ldr	r3, [pc, #472]	@ (80036a0 <menu+0x2330>)
 80034c6:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80034c8:	4b75      	ldr	r3, [pc, #468]	@ (80036a0 <menu+0x2330>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d902      	bls.n	80034d6 <menu+0x2166>
				devirmeSilindirTipi = 0;
 80034d0:	4b73      	ldr	r3, [pc, #460]	@ (80036a0 <menu+0x2330>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034d6:	f001 f90f 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80034da:	2104      	movs	r1, #4
 80034dc:	4875      	ldr	r0, [pc, #468]	@ (80036b4 <menu+0x2344>)
 80034de:	f005 fd7d 	bl	8008fdc <HAL_GPIO_ReadPin>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d119      	bne.n	800351c <menu+0x21ac>
 80034e8:	4b73      	ldr	r3, [pc, #460]	@ (80036b8 <menu+0x2348>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f083 0301 	eor.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d012      	beq.n	800351c <menu+0x21ac>
 80034f6:	4b66      	ldr	r3, [pc, #408]	@ (8003690 <menu+0x2320>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d10e      	bne.n	800351c <menu+0x21ac>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80034fe:	4b68      	ldr	r3, [pc, #416]	@ (80036a0 <menu+0x2330>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b66      	ldr	r3, [pc, #408]	@ (80036a0 <menu+0x2330>)
 8003508:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 800350a:	4b65      	ldr	r3, [pc, #404]	@ (80036a0 <menu+0x2330>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <menu+0x21a8>
		   		devirmeSilindirTipi = 1;
 8003512:	4b63      	ldr	r3, [pc, #396]	@ (80036a0 <menu+0x2330>)
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003518:	f001 f8ee 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800351c:	2108      	movs	r1, #8
 800351e:	4865      	ldr	r0, [pc, #404]	@ (80036b4 <menu+0x2344>)
 8003520:	f005 fd5c 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10d      	bne.n	8003546 <menu+0x21d6>
 800352a:	4b63      	ldr	r3, [pc, #396]	@ (80036b8 <menu+0x2348>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <menu+0x21d6>
			eepromData[18] = devirmeSilindirTipi;
 8003538:	4b59      	ldr	r3, [pc, #356]	@ (80036a0 <menu+0x2330>)
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	4b5f      	ldr	r3, [pc, #380]	@ (80036bc <menu+0x234c>)
 800353e:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003540:	4b5f      	ldr	r3, [pc, #380]	@ (80036c0 <menu+0x2350>)
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003546:	4b5f      	ldr	r3, [pc, #380]	@ (80036c4 <menu+0x2354>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b15      	cmp	r3, #21
 800354c:	f040 8090 	bne.w	8003670 <menu+0x2300>
		if(dilSecim == 0) {
 8003550:	4b50      	ldr	r3, [pc, #320]	@ (8003694 <menu+0x2324>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <menu+0x21f4>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003558:	4a5b      	ldr	r2, [pc, #364]	@ (80036c8 <menu+0x2358>)
 800355a:	2101      	movs	r1, #1
 800355c:	2001      	movs	r0, #1
 800355e:	f004 fa13 	bl	8007988 <lcd_print>
 8003562:	e004      	b.n	800356e <menu+0x21fe>
		} else {
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003564:	4a59      	ldr	r2, [pc, #356]	@ (80036cc <menu+0x235c>)
 8003566:	2101      	movs	r1, #1
 8003568:	2001      	movs	r0, #1
 800356a:	f004 fa0d 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, platformSilindirTipiText);

		if(platformSilindirTipi == 0) {
 800356e:	4b58      	ldr	r3, [pc, #352]	@ (80036d0 <menu+0x2360>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <menu+0x2226>
			if(dilSecim == 0) {
 8003576:	4b47      	ldr	r3, [pc, #284]	@ (8003694 <menu+0x2324>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <menu+0x221a>
				lcd_print(2, 1, "Tek tesir       ");
 800357e:	4a49      	ldr	r2, [pc, #292]	@ (80036a4 <menu+0x2334>)
 8003580:	2101      	movs	r1, #1
 8003582:	2002      	movs	r0, #2
 8003584:	f004 fa00 	bl	8007988 <lcd_print>
 8003588:	e018      	b.n	80035bc <menu+0x224c>
			} else {
				lcd_print(2, 1, "Single acting  ");
 800358a:	4a47      	ldr	r2, [pc, #284]	@ (80036a8 <menu+0x2338>)
 800358c:	2101      	movs	r1, #1
 800358e:	2002      	movs	r0, #2
 8003590:	f004 f9fa 	bl	8007988 <lcd_print>
 8003594:	e012      	b.n	80035bc <menu+0x224c>
			}
			//lcd_print(2, 1, tekTesirText);
		} else if(platformSilindirTipi == 1) {
 8003596:	4b4e      	ldr	r3, [pc, #312]	@ (80036d0 <menu+0x2360>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10e      	bne.n	80035bc <menu+0x224c>
			if(dilSecim == 0) {
 800359e:	4b3d      	ldr	r3, [pc, #244]	@ (8003694 <menu+0x2324>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <menu+0x2242>
				lcd_print(2, 1, "Cift tesir      ");
 80035a6:	4a41      	ldr	r2, [pc, #260]	@ (80036ac <menu+0x233c>)
 80035a8:	2101      	movs	r1, #1
 80035aa:	2002      	movs	r0, #2
 80035ac:	f004 f9ec 	bl	8007988 <lcd_print>
 80035b0:	e004      	b.n	80035bc <menu+0x224c>
			} else {
				lcd_print(2, 1, "Double acting  ");
 80035b2:	4a3f      	ldr	r2, [pc, #252]	@ (80036b0 <menu+0x2340>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	2002      	movs	r0, #2
 80035b8:	f004 f9e6 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, ciftTesirText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035bc:	2102      	movs	r1, #2
 80035be:	483d      	ldr	r0, [pc, #244]	@ (80036b4 <menu+0x2344>)
 80035c0:	f005 fd0c 	bl	8008fdc <HAL_GPIO_ReadPin>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d115      	bne.n	80035f6 <menu+0x2286>
 80035ca:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <menu+0x2348>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	f083 0301 	eor.w	r3, r3, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <menu+0x2286>
			platformSilindirTipi = platformSilindirTipi + 1;
 80035d8:	4b3d      	ldr	r3, [pc, #244]	@ (80036d0 <menu+0x2360>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	4b3b      	ldr	r3, [pc, #236]	@ (80036d0 <menu+0x2360>)
 80035e2:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80035e4:	4b3a      	ldr	r3, [pc, #232]	@ (80036d0 <menu+0x2360>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d902      	bls.n	80035f2 <menu+0x2282>
				platformSilindirTipi = 0;
 80035ec:	4b38      	ldr	r3, [pc, #224]	@ (80036d0 <menu+0x2360>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035f2:	f001 f881 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035f6:	2104      	movs	r1, #4
 80035f8:	482e      	ldr	r0, [pc, #184]	@ (80036b4 <menu+0x2344>)
 80035fa:	f005 fcef 	bl	8008fdc <HAL_GPIO_ReadPin>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d115      	bne.n	8003630 <menu+0x22c0>
 8003604:	4b2c      	ldr	r3, [pc, #176]	@ (80036b8 <menu+0x2348>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <menu+0x22c0>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003612:	4b2f      	ldr	r3, [pc, #188]	@ (80036d0 <menu+0x2360>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	3b01      	subs	r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b2d      	ldr	r3, [pc, #180]	@ (80036d0 <menu+0x2360>)
 800361c:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 800361e:	4b2c      	ldr	r3, [pc, #176]	@ (80036d0 <menu+0x2360>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <menu+0x22bc>
		   		platformSilindirTipi = 1;
 8003626:	4b2a      	ldr	r3, [pc, #168]	@ (80036d0 <menu+0x2360>)
 8003628:	2201      	movs	r2, #1
 800362a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800362c:	f001 f864 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003630:	2108      	movs	r1, #8
 8003632:	4820      	ldr	r0, [pc, #128]	@ (80036b4 <menu+0x2344>)
 8003634:	f005 fcd2 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d118      	bne.n	8003670 <menu+0x2300>
 800363e:	4b1e      	ldr	r3, [pc, #120]	@ (80036b8 <menu+0x2348>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	f083 0301 	eor.w	r3, r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d011      	beq.n	8003670 <menu+0x2300>
			eepromData[19] = platformSilindirTipi;
 800364c:	4b20      	ldr	r3, [pc, #128]	@ (80036d0 <menu+0x2360>)
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <menu+0x234c>)
 8003652:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003654:	4b1e      	ldr	r3, [pc, #120]	@ (80036d0 <menu+0x2360>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d106      	bne.n	800366a <menu+0x22fa>
				altLimit = 1;
 800365c:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <menu+0x2364>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003662:	4b1c      	ldr	r3, [pc, #112]	@ (80036d4 <menu+0x2364>)
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <menu+0x234c>)
 8003668:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <menu+0x2350>)
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003670:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <menu+0x2354>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b16      	cmp	r3, #22
 8003676:	f040 80a0 	bne.w	80037ba <menu+0x244a>
		if(dilSecim == 0) {
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <menu+0x2324>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d12c      	bne.n	80036dc <menu+0x236c>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003682:	4a15      	ldr	r2, [pc, #84]	@ (80036d8 <menu+0x2368>)
 8003684:	2101      	movs	r1, #1
 8003686:	2001      	movs	r0, #1
 8003688:	f004 f97e 	bl	8007988 <lcd_print>
 800368c:	e02b      	b.n	80036e6 <menu+0x2376>
 800368e:	bf00      	nop
 8003690:	2000021f 	.word	0x2000021f
 8003694:	20000231 	.word	0x20000231
 8003698:	0800d528 	.word	0x0800d528
 800369c:	0800d53c 	.word	0x0800d53c
 80036a0:	20000222 	.word	0x20000222
 80036a4:	0800d550 	.word	0x0800d550
 80036a8:	0800d564 	.word	0x0800d564
 80036ac:	0800d574 	.word	0x0800d574
 80036b0:	0800d588 	.word	0x0800d588
 80036b4:	40010800 	.word	0x40010800
 80036b8:	2000023f 	.word	0x2000023f
 80036bc:	20000138 	.word	0x20000138
 80036c0:	2000023c 	.word	0x2000023c
 80036c4:	20000210 	.word	0x20000210
 80036c8:	0800d598 	.word	0x0800d598
 80036cc:	0800d5ac 	.word	0x0800d5ac
 80036d0:	20000223 	.word	0x20000223
 80036d4:	20000216 	.word	0x20000216
 80036d8:	0800d5bc 	.word	0x0800d5bc
		} else {
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80036dc:	4a90      	ldr	r2, [pc, #576]	@ (8003920 <menu+0x25b0>)
 80036de:	2101      	movs	r1, #1
 80036e0:	2001      	movs	r0, #1
 80036e2:	f004 f951 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, yukariValfSureText);

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80036e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003924 <menu+0x25b4>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <menu+0x238a>
				lcd_print(2, 1, "Kac Saniye     ");
 80036ee:	4a8e      	ldr	r2, [pc, #568]	@ (8003928 <menu+0x25b8>)
 80036f0:	2101      	movs	r1, #1
 80036f2:	2002      	movs	r0, #2
 80036f4:	f004 f948 	bl	8007988 <lcd_print>
 80036f8:	e004      	b.n	8003704 <menu+0x2394>
			} else {
				lcd_print(2, 1, "Second         ");
 80036fa:	4a8c      	ldr	r2, [pc, #560]	@ (800392c <menu+0x25bc>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	2002      	movs	r0, #2
 8003700:	f004 f942 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, kacSaniyeText);
		}

		itoa(yukariValfTmr, snum, 10);
 8003704:	4b8a      	ldr	r3, [pc, #552]	@ (8003930 <menu+0x25c0>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	220a      	movs	r2, #10
 800370a:	498a      	ldr	r1, [pc, #552]	@ (8003934 <menu+0x25c4>)
 800370c:	4618      	mov	r0, r3
 800370e:	f008 fc91 	bl	800c034 <itoa>
		lcd_print(2,16,snum);
 8003712:	4a88      	ldr	r2, [pc, #544]	@ (8003934 <menu+0x25c4>)
 8003714:	2110      	movs	r1, #16
 8003716:	2002      	movs	r0, #2
 8003718:	f004 f936 	bl	8007988 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800371c:	2102      	movs	r1, #2
 800371e:	4886      	ldr	r0, [pc, #536]	@ (8003938 <menu+0x25c8>)
 8003720:	f005 fc5c 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003724:	4603      	mov	r3, r0
 8003726:	2b01      	cmp	r3, #1
 8003728:	d115      	bne.n	8003756 <menu+0x23e6>
 800372a:	4b84      	ldr	r3, [pc, #528]	@ (800393c <menu+0x25cc>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	f083 0301 	eor.w	r3, r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <menu+0x23e6>
			yukariValfTmr = yukariValfTmr + 1;
 8003738:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <menu+0x25c0>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	4b7b      	ldr	r3, [pc, #492]	@ (8003930 <menu+0x25c0>)
 8003742:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003744:	4b7a      	ldr	r3, [pc, #488]	@ (8003930 <menu+0x25c0>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b05      	cmp	r3, #5
 800374a:	d902      	bls.n	8003752 <menu+0x23e2>
				yukariValfTmr = 0;
 800374c:	4b78      	ldr	r3, [pc, #480]	@ (8003930 <menu+0x25c0>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003752:	f000 ffd1 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003756:	2104      	movs	r1, #4
 8003758:	4877      	ldr	r0, [pc, #476]	@ (8003938 <menu+0x25c8>)
 800375a:	f005 fc3f 	bl	8008fdc <HAL_GPIO_ReadPin>
 800375e:	4603      	mov	r3, r0
 8003760:	2b01      	cmp	r3, #1
 8003762:	d115      	bne.n	8003790 <menu+0x2420>
 8003764:	4b75      	ldr	r3, [pc, #468]	@ (800393c <menu+0x25cc>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00e      	beq.n	8003790 <menu+0x2420>
			yukariValfTmr = yukariValfTmr - 1;
 8003772:	4b6f      	ldr	r3, [pc, #444]	@ (8003930 <menu+0x25c0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	3b01      	subs	r3, #1
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4b6d      	ldr	r3, [pc, #436]	@ (8003930 <menu+0x25c0>)
 800377c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800377e:	4b6c      	ldr	r3, [pc, #432]	@ (8003930 <menu+0x25c0>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b06      	cmp	r3, #6
 8003784:	d902      	bls.n	800378c <menu+0x241c>
		   		yukariValfTmr = 5;
 8003786:	4b6a      	ldr	r3, [pc, #424]	@ (8003930 <menu+0x25c0>)
 8003788:	2205      	movs	r2, #5
 800378a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800378c:	f000 ffb4 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003790:	2108      	movs	r1, #8
 8003792:	4869      	ldr	r0, [pc, #420]	@ (8003938 <menu+0x25c8>)
 8003794:	f005 fc22 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10d      	bne.n	80037ba <menu+0x244a>
 800379e:	4b67      	ldr	r3, [pc, #412]	@ (800393c <menu+0x25cc>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f083 0301 	eor.w	r3, r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <menu+0x244a>
			eepromData[20] = yukariValfTmr;
 80037ac:	4b60      	ldr	r3, [pc, #384]	@ (8003930 <menu+0x25c0>)
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	4b63      	ldr	r3, [pc, #396]	@ (8003940 <menu+0x25d0>)
 80037b2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80037b4:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <menu+0x25d4>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80037ba:	4b63      	ldr	r3, [pc, #396]	@ (8003948 <menu+0x25d8>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b17      	cmp	r3, #23
 80037c0:	d178      	bne.n	80038b4 <menu+0x2544>
		if(dilSecim == 0) {
 80037c2:	4b58      	ldr	r3, [pc, #352]	@ (8003924 <menu+0x25b4>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <menu+0x2466>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80037ca:	4a60      	ldr	r2, [pc, #384]	@ (800394c <menu+0x25dc>)
 80037cc:	2101      	movs	r1, #1
 80037ce:	2001      	movs	r0, #1
 80037d0:	f004 f8da 	bl	8007988 <lcd_print>
 80037d4:	e004      	b.n	80037e0 <menu+0x2470>
		} else {
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80037d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003950 <menu+0x25e0>)
 80037d8:	2101      	movs	r1, #1
 80037da:	2001      	movs	r0, #1
 80037dc:	f004 f8d4 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, asagiValfSureText);

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80037e0:	4b50      	ldr	r3, [pc, #320]	@ (8003924 <menu+0x25b4>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <menu+0x2484>
				lcd_print(2, 1, "Kac Saniye     ");
 80037e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003928 <menu+0x25b8>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	2002      	movs	r0, #2
 80037ee:	f004 f8cb 	bl	8007988 <lcd_print>
 80037f2:	e004      	b.n	80037fe <menu+0x248e>
			} else {
				lcd_print(2, 1, "Second         ");
 80037f4:	4a4d      	ldr	r2, [pc, #308]	@ (800392c <menu+0x25bc>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	2002      	movs	r0, #2
 80037fa:	f004 f8c5 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, kacSaniyeText);
		}

		itoa(asagiValfTmr, snum, 10);
 80037fe:	4b55      	ldr	r3, [pc, #340]	@ (8003954 <menu+0x25e4>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	220a      	movs	r2, #10
 8003804:	494b      	ldr	r1, [pc, #300]	@ (8003934 <menu+0x25c4>)
 8003806:	4618      	mov	r0, r3
 8003808:	f008 fc14 	bl	800c034 <itoa>
		lcd_print(2,16,snum);
 800380c:	4a49      	ldr	r2, [pc, #292]	@ (8003934 <menu+0x25c4>)
 800380e:	2110      	movs	r1, #16
 8003810:	2002      	movs	r0, #2
 8003812:	f004 f8b9 	bl	8007988 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003816:	2102      	movs	r1, #2
 8003818:	4847      	ldr	r0, [pc, #284]	@ (8003938 <menu+0x25c8>)
 800381a:	f005 fbdf 	bl	8008fdc <HAL_GPIO_ReadPin>
 800381e:	4603      	mov	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d115      	bne.n	8003850 <menu+0x24e0>
 8003824:	4b45      	ldr	r3, [pc, #276]	@ (800393c <menu+0x25cc>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	f083 0301 	eor.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00e      	beq.n	8003850 <menu+0x24e0>
			asagiValfTmr = asagiValfTmr + 1;
 8003832:	4b48      	ldr	r3, [pc, #288]	@ (8003954 <menu+0x25e4>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b46      	ldr	r3, [pc, #280]	@ (8003954 <menu+0x25e4>)
 800383c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800383e:	4b45      	ldr	r3, [pc, #276]	@ (8003954 <menu+0x25e4>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d902      	bls.n	800384c <menu+0x24dc>
				asagiValfTmr = 0;
 8003846:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <menu+0x25e4>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800384c:	f000 ff54 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003850:	2104      	movs	r1, #4
 8003852:	4839      	ldr	r0, [pc, #228]	@ (8003938 <menu+0x25c8>)
 8003854:	f005 fbc2 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d115      	bne.n	800388a <menu+0x251a>
 800385e:	4b37      	ldr	r3, [pc, #220]	@ (800393c <menu+0x25cc>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <menu+0x251a>
			asagiValfTmr = asagiValfTmr - 1;
 800386c:	4b39      	ldr	r3, [pc, #228]	@ (8003954 <menu+0x25e4>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b37      	ldr	r3, [pc, #220]	@ (8003954 <menu+0x25e4>)
 8003876:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003878:	4b36      	ldr	r3, [pc, #216]	@ (8003954 <menu+0x25e4>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d902      	bls.n	8003886 <menu+0x2516>
		   		asagiValfTmr = 5;
 8003880:	4b34      	ldr	r3, [pc, #208]	@ (8003954 <menu+0x25e4>)
 8003882:	2205      	movs	r2, #5
 8003884:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003886:	f000 ff37 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800388a:	2108      	movs	r1, #8
 800388c:	482a      	ldr	r0, [pc, #168]	@ (8003938 <menu+0x25c8>)
 800388e:	f005 fba5 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003892:	4603      	mov	r3, r0
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10d      	bne.n	80038b4 <menu+0x2544>
 8003898:	4b28      	ldr	r3, [pc, #160]	@ (800393c <menu+0x25cc>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f083 0301 	eor.w	r3, r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d006      	beq.n	80038b4 <menu+0x2544>
			eepromData[21] = asagiValfTmr;
 80038a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <menu+0x25e4>)
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <menu+0x25d0>)
 80038ac:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80038ae:	4b25      	ldr	r3, [pc, #148]	@ (8003944 <menu+0x25d4>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80038b4:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <menu+0x25d8>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b18      	cmp	r3, #24
 80038ba:	f040 80b7 	bne.w	8003a2c <menu+0x26bc>
		if(devirmeYuruyusSecim == 2) {
 80038be:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <menu+0x25e8>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d10f      	bne.n	80038e6 <menu+0x2576>
			if(dilSecim == 0) {
 80038c6:	4b17      	ldr	r3, [pc, #92]	@ (8003924 <menu+0x25b4>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <menu+0x256a>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80038ce:	4a23      	ldr	r2, [pc, #140]	@ (800395c <menu+0x25ec>)
 80038d0:	2101      	movs	r1, #1
 80038d2:	2001      	movs	r0, #1
 80038d4:	f004 f858 	bl	8007988 <lcd_print>
 80038d8:	e018      	b.n	800390c <menu+0x259c>
			} else {
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80038da:	4a21      	ldr	r2, [pc, #132]	@ (8003960 <menu+0x25f0>)
 80038dc:	2101      	movs	r1, #1
 80038de:	2001      	movs	r0, #1
 80038e0:	f004 f852 	bl	8007988 <lcd_print>
 80038e4:	e012      	b.n	800390c <menu+0x259c>
			}
			//lcd_print(1, 1, devirmeYukariValfSureText);
		} else if(devirmeYuruyusSecim == 1) {
 80038e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <menu+0x25e8>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d10e      	bne.n	800390c <menu+0x259c>
			if(dilSecim == 0) {
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <menu+0x25b4>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <menu+0x2592>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80038f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003964 <menu+0x25f4>)
 80038f8:	2101      	movs	r1, #1
 80038fa:	2001      	movs	r0, #1
 80038fc:	f004 f844 	bl	8007988 <lcd_print>
 8003900:	e004      	b.n	800390c <menu+0x259c>
			} else {
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003902:	4a19      	ldr	r2, [pc, #100]	@ (8003968 <menu+0x25f8>)
 8003904:	2101      	movs	r1, #1
 8003906:	2001      	movs	r0, #1
 8003908:	f004 f83e 	bl	8007988 <lcd_print>
			}
			//lcd_print(1, 1, ileriValfSureText);
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 800390c:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <menu+0x25b4>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d12b      	bne.n	800396c <menu+0x25fc>
				lcd_print(2, 1, "Kac Saniye     ");
 8003914:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <menu+0x25b8>)
 8003916:	2101      	movs	r1, #1
 8003918:	2002      	movs	r0, #2
 800391a:	f004 f835 	bl	8007988 <lcd_print>
 800391e:	e02a      	b.n	8003976 <menu+0x2606>
 8003920:	0800d5d0 	.word	0x0800d5d0
 8003924:	20000231 	.word	0x20000231
 8003928:	0800d270 	.word	0x0800d270
 800392c:	0800d5e4 	.word	0x0800d5e4
 8003930:	20000224 	.word	0x20000224
 8003934:	200001a8 	.word	0x200001a8
 8003938:	40010800 	.word	0x40010800
 800393c:	2000023f 	.word	0x2000023f
 8003940:	20000138 	.word	0x20000138
 8003944:	2000023c 	.word	0x2000023c
 8003948:	20000210 	.word	0x20000210
 800394c:	0800d5f4 	.word	0x0800d5f4
 8003950:	0800d608 	.word	0x0800d608
 8003954:	20000225 	.word	0x20000225
 8003958:	2000021f 	.word	0x2000021f
 800395c:	0800d61c 	.word	0x0800d61c
 8003960:	0800d630 	.word	0x0800d630
 8003964:	0800d644 	.word	0x0800d644
 8003968:	0800d658 	.word	0x0800d658
			} else {
				lcd_print(2, 1, "Second         ");
 800396c:	4a9d      	ldr	r2, [pc, #628]	@ (8003be4 <menu+0x2874>)
 800396e:	2101      	movs	r1, #1
 8003970:	2002      	movs	r0, #2
 8003972:	f004 f809 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, kacSaniyeText);
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003976:	4b9c      	ldr	r3, [pc, #624]	@ (8003be8 <menu+0x2878>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	220a      	movs	r2, #10
 800397c:	499b      	ldr	r1, [pc, #620]	@ (8003bec <menu+0x287c>)
 800397e:	4618      	mov	r0, r3
 8003980:	f008 fb58 	bl	800c034 <itoa>
		lcd_print(2, 16, snum);
 8003984:	4a99      	ldr	r2, [pc, #612]	@ (8003bec <menu+0x287c>)
 8003986:	2110      	movs	r1, #16
 8003988:	2002      	movs	r0, #2
 800398a:	f003 fffd 	bl	8007988 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800398e:	2102      	movs	r1, #2
 8003990:	4897      	ldr	r0, [pc, #604]	@ (8003bf0 <menu+0x2880>)
 8003992:	f005 fb23 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d115      	bne.n	80039c8 <menu+0x2658>
 800399c:	4b95      	ldr	r3, [pc, #596]	@ (8003bf4 <menu+0x2884>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	f083 0301 	eor.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00e      	beq.n	80039c8 <menu+0x2658>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80039aa:	4b8f      	ldr	r3, [pc, #572]	@ (8003be8 <menu+0x2878>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	3301      	adds	r3, #1
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b8d      	ldr	r3, [pc, #564]	@ (8003be8 <menu+0x2878>)
 80039b4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80039b6:	4b8c      	ldr	r3, [pc, #560]	@ (8003be8 <menu+0x2878>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d902      	bls.n	80039c4 <menu+0x2654>
				devirmeYukariIleriTmr = 0;
 80039be:	4b8a      	ldr	r3, [pc, #552]	@ (8003be8 <menu+0x2878>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039c4:	f000 fe98 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c8:	2104      	movs	r1, #4
 80039ca:	4889      	ldr	r0, [pc, #548]	@ (8003bf0 <menu+0x2880>)
 80039cc:	f005 fb06 	bl	8008fdc <HAL_GPIO_ReadPin>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d115      	bne.n	8003a02 <menu+0x2692>
 80039d6:	4b87      	ldr	r3, [pc, #540]	@ (8003bf4 <menu+0x2884>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	f083 0301 	eor.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <menu+0x2692>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80039e4:	4b80      	ldr	r3, [pc, #512]	@ (8003be8 <menu+0x2878>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b7e      	ldr	r3, [pc, #504]	@ (8003be8 <menu+0x2878>)
 80039ee:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80039f0:	4b7d      	ldr	r3, [pc, #500]	@ (8003be8 <menu+0x2878>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d902      	bls.n	80039fe <menu+0x268e>
		   		devirmeYukariIleriTmr = 5;
 80039f8:	4b7b      	ldr	r3, [pc, #492]	@ (8003be8 <menu+0x2878>)
 80039fa:	2205      	movs	r2, #5
 80039fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039fe:	f000 fe7b 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a02:	2108      	movs	r1, #8
 8003a04:	487a      	ldr	r0, [pc, #488]	@ (8003bf0 <menu+0x2880>)
 8003a06:	f005 fae9 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d10d      	bne.n	8003a2c <menu+0x26bc>
 8003a10:	4b78      	ldr	r3, [pc, #480]	@ (8003bf4 <menu+0x2884>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	f083 0301 	eor.w	r3, r3, #1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d006      	beq.n	8003a2c <menu+0x26bc>
			eepromData[22] = devirmeYukariIleriTmr;
 8003a1e:	4b72      	ldr	r3, [pc, #456]	@ (8003be8 <menu+0x2878>)
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	4b75      	ldr	r3, [pc, #468]	@ (8003bf8 <menu+0x2888>)
 8003a24:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003a26:	4b75      	ldr	r3, [pc, #468]	@ (8003bfc <menu+0x288c>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003a2c:	4b74      	ldr	r3, [pc, #464]	@ (8003c00 <menu+0x2890>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b19      	cmp	r3, #25
 8003a32:	f040 8091 	bne.w	8003b58 <menu+0x27e8>
		if(devirmeYuruyusSecim == 2) {
 8003a36:	4b73      	ldr	r3, [pc, #460]	@ (8003c04 <menu+0x2894>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d10f      	bne.n	8003a5e <menu+0x26ee>
			if(dilSecim == 0) {
 8003a3e:	4b72      	ldr	r3, [pc, #456]	@ (8003c08 <menu+0x2898>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <menu+0x26e2>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003a46:	4a71      	ldr	r2, [pc, #452]	@ (8003c0c <menu+0x289c>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f003 ff9c 	bl	8007988 <lcd_print>
 8003a50:	e018      	b.n	8003a84 <menu+0x2714>
			} else {
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003a52:	4a6f      	ldr	r2, [pc, #444]	@ (8003c10 <menu+0x28a0>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	2001      	movs	r0, #1
 8003a58:	f003 ff96 	bl	8007988 <lcd_print>
 8003a5c:	e012      	b.n	8003a84 <menu+0x2714>
			}
			//lcd_print(1, 1, devirmeAsagiValfSureText);
		} else if(devirmeYuruyusSecim == 1) {
 8003a5e:	4b69      	ldr	r3, [pc, #420]	@ (8003c04 <menu+0x2894>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10e      	bne.n	8003a84 <menu+0x2714>
			if(dilSecim == 0) {
 8003a66:	4b68      	ldr	r3, [pc, #416]	@ (8003c08 <menu+0x2898>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <menu+0x270a>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003a6e:	4a69      	ldr	r2, [pc, #420]	@ (8003c14 <menu+0x28a4>)
 8003a70:	2101      	movs	r1, #1
 8003a72:	2001      	movs	r0, #1
 8003a74:	f003 ff88 	bl	8007988 <lcd_print>
 8003a78:	e004      	b.n	8003a84 <menu+0x2714>
			} else {
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003a7a:	4a67      	ldr	r2, [pc, #412]	@ (8003c18 <menu+0x28a8>)
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f003 ff82 	bl	8007988 <lcd_print>
			}
			//lcd_print(1, 1, geriValfSureText);
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003a84:	4b60      	ldr	r3, [pc, #384]	@ (8003c08 <menu+0x2898>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d105      	bne.n	8003a98 <menu+0x2728>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a8c:	4a63      	ldr	r2, [pc, #396]	@ (8003c1c <menu+0x28ac>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	2002      	movs	r0, #2
 8003a92:	f003 ff79 	bl	8007988 <lcd_print>
 8003a96:	e004      	b.n	8003aa2 <menu+0x2732>
			} else {
				lcd_print(2, 1, "Second         ");
 8003a98:	4a52      	ldr	r2, [pc, #328]	@ (8003be4 <menu+0x2874>)
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	f003 ff73 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, kacSaniyeText);
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c20 <menu+0x28b0>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	220a      	movs	r2, #10
 8003aa8:	4950      	ldr	r1, [pc, #320]	@ (8003bec <menu+0x287c>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f008 fac2 	bl	800c034 <itoa>
		lcd_print(2,16,snum);
 8003ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8003bec <menu+0x287c>)
 8003ab2:	2110      	movs	r1, #16
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f003 ff67 	bl	8007988 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aba:	2102      	movs	r1, #2
 8003abc:	484c      	ldr	r0, [pc, #304]	@ (8003bf0 <menu+0x2880>)
 8003abe:	f005 fa8d 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d115      	bne.n	8003af4 <menu+0x2784>
 8003ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf4 <menu+0x2884>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00e      	beq.n	8003af4 <menu+0x2784>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003ad6:	4b52      	ldr	r3, [pc, #328]	@ (8003c20 <menu+0x28b0>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b50      	ldr	r3, [pc, #320]	@ (8003c20 <menu+0x28b0>)
 8003ae0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c20 <menu+0x28b0>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d902      	bls.n	8003af0 <menu+0x2780>
				devirmeAsagiGeriTmr = 0;
 8003aea:	4b4d      	ldr	r3, [pc, #308]	@ (8003c20 <menu+0x28b0>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003af0:	f000 fe02 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003af4:	2104      	movs	r1, #4
 8003af6:	483e      	ldr	r0, [pc, #248]	@ (8003bf0 <menu+0x2880>)
 8003af8:	f005 fa70 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d115      	bne.n	8003b2e <menu+0x27be>
 8003b02:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf4 <menu+0x2884>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00e      	beq.n	8003b2e <menu+0x27be>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003b10:	4b43      	ldr	r3, [pc, #268]	@ (8003c20 <menu+0x28b0>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	4b41      	ldr	r3, [pc, #260]	@ (8003c20 <menu+0x28b0>)
 8003b1a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003b1c:	4b40      	ldr	r3, [pc, #256]	@ (8003c20 <menu+0x28b0>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b06      	cmp	r3, #6
 8003b22:	d902      	bls.n	8003b2a <menu+0x27ba>
		   		devirmeAsagiGeriTmr = 5;
 8003b24:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <menu+0x28b0>)
 8003b26:	2205      	movs	r2, #5
 8003b28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b2a:	f000 fde5 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b2e:	2108      	movs	r1, #8
 8003b30:	482f      	ldr	r0, [pc, #188]	@ (8003bf0 <menu+0x2880>)
 8003b32:	f005 fa53 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10d      	bne.n	8003b58 <menu+0x27e8>
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf4 <menu+0x2884>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <menu+0x27e8>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003b4a:	4b35      	ldr	r3, [pc, #212]	@ (8003c20 <menu+0x28b0>)
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <menu+0x2888>)
 8003b50:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003b52:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <menu+0x288c>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003b58:	4b29      	ldr	r3, [pc, #164]	@ (8003c00 <menu+0x2890>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b1a      	cmp	r3, #26
 8003b5e:	f040 80e7 	bne.w	8003d30 <menu+0x29c0>
		if(dilSecim == 0) {
 8003b62:	4b29      	ldr	r3, [pc, #164]	@ (8003c08 <menu+0x2898>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <menu+0x2806>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c24 <menu+0x28b4>)
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f003 ff0a 	bl	8007988 <lcd_print>
 8003b74:	e004      	b.n	8003b80 <menu+0x2810>
		} else {
			lcd_print(1, 1, "WORKING TIME    ");
 8003b76:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <menu+0x28b8>)
 8003b78:	2101      	movs	r1, #1
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f003 ff04 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, calismaSuresiText);

		if(makineCalismaTmr > 99) {
 8003b80:	4b2a      	ldr	r3, [pc, #168]	@ (8003c2c <menu+0x28bc>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b63      	cmp	r3, #99	@ 0x63
 8003b86:	d91b      	bls.n	8003bc0 <menu+0x2850>
			if(dilSecim == 0) {
 8003b88:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <menu+0x2898>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <menu+0x282c>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b90:	4a22      	ldr	r2, [pc, #136]	@ (8003c1c <menu+0x28ac>)
 8003b92:	2101      	movs	r1, #1
 8003b94:	2002      	movs	r0, #2
 8003b96:	f003 fef7 	bl	8007988 <lcd_print>
 8003b9a:	e004      	b.n	8003ba6 <menu+0x2836>
			} else {
				lcd_print(2, 1, "Second         ");
 8003b9c:	4a11      	ldr	r2, [pc, #68]	@ (8003be4 <menu+0x2874>)
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	2002      	movs	r0, #2
 8003ba2:	f003 fef1 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, kacSaniyeText);

			itoa(makineCalismaTmr, snum, 10);
 8003ba6:	4b21      	ldr	r3, [pc, #132]	@ (8003c2c <menu+0x28bc>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	220a      	movs	r2, #10
 8003bac:	490f      	ldr	r1, [pc, #60]	@ (8003bec <menu+0x287c>)
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f008 fa40 	bl	800c034 <itoa>
			lcd_print(2,14,snum);
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bec <menu+0x287c>)
 8003bb6:	210e      	movs	r1, #14
 8003bb8:	2002      	movs	r0, #2
 8003bba:	f003 fee5 	bl	8007988 <lcd_print>
 8003bbe:	e068      	b.n	8003c92 <menu+0x2922>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <menu+0x28bc>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b09      	cmp	r3, #9
 8003bc6:	d945      	bls.n	8003c54 <menu+0x28e4>
 8003bc8:	4b18      	ldr	r3, [pc, #96]	@ (8003c2c <menu+0x28bc>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b63      	cmp	r3, #99	@ 0x63
 8003bce:	d841      	bhi.n	8003c54 <menu+0x28e4>
			if(dilSecim == 0) {
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c08 <menu+0x2898>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d12b      	bne.n	8003c30 <menu+0x28c0>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bd8:	4a10      	ldr	r2, [pc, #64]	@ (8003c1c <menu+0x28ac>)
 8003bda:	2101      	movs	r1, #1
 8003bdc:	2002      	movs	r0, #2
 8003bde:	f003 fed3 	bl	8007988 <lcd_print>
 8003be2:	e02a      	b.n	8003c3a <menu+0x28ca>
 8003be4:	0800d5e4 	.word	0x0800d5e4
 8003be8:	20000226 	.word	0x20000226
 8003bec:	200001a8 	.word	0x200001a8
 8003bf0:	40010800 	.word	0x40010800
 8003bf4:	2000023f 	.word	0x2000023f
 8003bf8:	20000138 	.word	0x20000138
 8003bfc:	2000023c 	.word	0x2000023c
 8003c00:	20000210 	.word	0x20000210
 8003c04:	2000021f 	.word	0x2000021f
 8003c08:	20000231 	.word	0x20000231
 8003c0c:	0800d66c 	.word	0x0800d66c
 8003c10:	0800d680 	.word	0x0800d680
 8003c14:	0800d694 	.word	0x0800d694
 8003c18:	0800d6a8 	.word	0x0800d6a8
 8003c1c:	0800d270 	.word	0x0800d270
 8003c20:	20000227 	.word	0x20000227
 8003c24:	0800d6bc 	.word	0x0800d6bc
 8003c28:	0800d6d0 	.word	0x0800d6d0
 8003c2c:	20000228 	.word	0x20000228
			} else {
				lcd_print(2, 1, "Second         ");
 8003c30:	4a96      	ldr	r2, [pc, #600]	@ (8003e8c <menu+0x2b1c>)
 8003c32:	2101      	movs	r1, #1
 8003c34:	2002      	movs	r0, #2
 8003c36:	f003 fea7 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, kacSaniyeText);

			itoa(makineCalismaTmr, snum, 10);
 8003c3a:	4b95      	ldr	r3, [pc, #596]	@ (8003e90 <menu+0x2b20>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	220a      	movs	r2, #10
 8003c40:	4994      	ldr	r1, [pc, #592]	@ (8003e94 <menu+0x2b24>)
 8003c42:	4618      	mov	r0, r3
 8003c44:	f008 f9f6 	bl	800c034 <itoa>
			lcd_print(2, 15, snum);
 8003c48:	4a92      	ldr	r2, [pc, #584]	@ (8003e94 <menu+0x2b24>)
 8003c4a:	210f      	movs	r1, #15
 8003c4c:	2002      	movs	r0, #2
 8003c4e:	f003 fe9b 	bl	8007988 <lcd_print>
 8003c52:	e01e      	b.n	8003c92 <menu+0x2922>
		} else if(makineCalismaTmr <=  9) {
 8003c54:	4b8e      	ldr	r3, [pc, #568]	@ (8003e90 <menu+0x2b20>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	d81a      	bhi.n	8003c92 <menu+0x2922>
			if(dilSecim == 0) {
 8003c5c:	4b8e      	ldr	r3, [pc, #568]	@ (8003e98 <menu+0x2b28>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <menu+0x2900>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c64:	4a8d      	ldr	r2, [pc, #564]	@ (8003e9c <menu+0x2b2c>)
 8003c66:	2101      	movs	r1, #1
 8003c68:	2002      	movs	r0, #2
 8003c6a:	f003 fe8d 	bl	8007988 <lcd_print>
 8003c6e:	e004      	b.n	8003c7a <menu+0x290a>
			} else {
				lcd_print(2, 1, "Second         ");
 8003c70:	4a86      	ldr	r2, [pc, #536]	@ (8003e8c <menu+0x2b1c>)
 8003c72:	2101      	movs	r1, #1
 8003c74:	2002      	movs	r0, #2
 8003c76:	f003 fe87 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, kacSaniyeText);

			itoa(makineCalismaTmr, snum, 10);
 8003c7a:	4b85      	ldr	r3, [pc, #532]	@ (8003e90 <menu+0x2b20>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	220a      	movs	r2, #10
 8003c80:	4984      	ldr	r1, [pc, #528]	@ (8003e94 <menu+0x2b24>)
 8003c82:	4618      	mov	r0, r3
 8003c84:	f008 f9d6 	bl	800c034 <itoa>
			lcd_print(2, 16, snum);
 8003c88:	4a82      	ldr	r2, [pc, #520]	@ (8003e94 <menu+0x2b24>)
 8003c8a:	2110      	movs	r1, #16
 8003c8c:	2002      	movs	r0, #2
 8003c8e:	f003 fe7b 	bl	8007988 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c92:	2102      	movs	r1, #2
 8003c94:	4882      	ldr	r0, [pc, #520]	@ (8003ea0 <menu+0x2b30>)
 8003c96:	f005 f9a1 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d115      	bne.n	8003ccc <menu+0x295c>
 8003ca0:	4b80      	ldr	r3, [pc, #512]	@ (8003ea4 <menu+0x2b34>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	f083 0301 	eor.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00e      	beq.n	8003ccc <menu+0x295c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003cae:	4b78      	ldr	r3, [pc, #480]	@ (8003e90 <menu+0x2b20>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4b76      	ldr	r3, [pc, #472]	@ (8003e90 <menu+0x2b20>)
 8003cb8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003cba:	4b75      	ldr	r3, [pc, #468]	@ (8003e90 <menu+0x2b20>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2bb4      	cmp	r3, #180	@ 0xb4
 8003cc0:	d902      	bls.n	8003cc8 <menu+0x2958>
				makineCalismaTmr = 0;
 8003cc2:	4b73      	ldr	r3, [pc, #460]	@ (8003e90 <menu+0x2b20>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cc8:	f000 fd16 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ccc:	2104      	movs	r1, #4
 8003cce:	4874      	ldr	r0, [pc, #464]	@ (8003ea0 <menu+0x2b30>)
 8003cd0:	f005 f984 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d115      	bne.n	8003d06 <menu+0x2996>
 8003cda:	4b72      	ldr	r3, [pc, #456]	@ (8003ea4 <menu+0x2b34>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	f083 0301 	eor.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <menu+0x2996>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003ce8:	4b69      	ldr	r3, [pc, #420]	@ (8003e90 <menu+0x2b20>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	4b67      	ldr	r3, [pc, #412]	@ (8003e90 <menu+0x2b20>)
 8003cf2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003cf4:	4b66      	ldr	r3, [pc, #408]	@ (8003e90 <menu+0x2b20>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2bb5      	cmp	r3, #181	@ 0xb5
 8003cfa:	d902      	bls.n	8003d02 <menu+0x2992>
		   		makineCalismaTmr = 180;
 8003cfc:	4b64      	ldr	r3, [pc, #400]	@ (8003e90 <menu+0x2b20>)
 8003cfe:	22b4      	movs	r2, #180	@ 0xb4
 8003d00:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d02:	f000 fcf9 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d06:	2108      	movs	r1, #8
 8003d08:	4865      	ldr	r0, [pc, #404]	@ (8003ea0 <menu+0x2b30>)
 8003d0a:	f005 f967 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10d      	bne.n	8003d30 <menu+0x29c0>
 8003d14:	4b63      	ldr	r3, [pc, #396]	@ (8003ea4 <menu+0x2b34>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	f083 0301 	eor.w	r3, r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d006      	beq.n	8003d30 <menu+0x29c0>
			eepromData[24] = makineCalismaTmr;
 8003d22:	4b5b      	ldr	r3, [pc, #364]	@ (8003e90 <menu+0x2b20>)
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	4b60      	ldr	r3, [pc, #384]	@ (8003ea8 <menu+0x2b38>)
 8003d28:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003d2a:	4b60      	ldr	r3, [pc, #384]	@ (8003eac <menu+0x2b3c>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003d30:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb0 <menu+0x2b40>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b1b      	cmp	r3, #27
 8003d36:	d17a      	bne.n	8003e2e <menu+0x2abe>
		lcd_print(1, 1, "BUZZER          ");
 8003d38:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb4 <menu+0x2b44>)
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f003 fe23 	bl	8007988 <lcd_print>
		//lcd_print(1, 1, buzzerTextGN);

		if(buzzer == 0) {
 8003d42:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb8 <menu+0x2b48>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <menu+0x29fa>
			if(dilSecim == 0) {
 8003d4a:	4b53      	ldr	r3, [pc, #332]	@ (8003e98 <menu+0x2b28>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <menu+0x29ee>
				lcd_print(2, 1, "Pasif           ");
 8003d52:	4a5a      	ldr	r2, [pc, #360]	@ (8003ebc <menu+0x2b4c>)
 8003d54:	2101      	movs	r1, #1
 8003d56:	2002      	movs	r0, #2
 8003d58:	f003 fe16 	bl	8007988 <lcd_print>
 8003d5c:	e018      	b.n	8003d90 <menu+0x2a20>
			} else {
				lcd_print(2, 1, "Passive         ");
 8003d5e:	4a58      	ldr	r2, [pc, #352]	@ (8003ec0 <menu+0x2b50>)
 8003d60:	2101      	movs	r1, #1
 8003d62:	2002      	movs	r0, #2
 8003d64:	f003 fe10 	bl	8007988 <lcd_print>
 8003d68:	e012      	b.n	8003d90 <menu+0x2a20>
			}
			//lcd_print(2, 1, pasifText);
		} else if(buzzer == 1) {
 8003d6a:	4b53      	ldr	r3, [pc, #332]	@ (8003eb8 <menu+0x2b48>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10e      	bne.n	8003d90 <menu+0x2a20>
			if(dilSecim == 0) {
 8003d72:	4b49      	ldr	r3, [pc, #292]	@ (8003e98 <menu+0x2b28>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <menu+0x2a16>
				lcd_print(2, 1, "Aktif           ");
 8003d7a:	4a52      	ldr	r2, [pc, #328]	@ (8003ec4 <menu+0x2b54>)
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	2002      	movs	r0, #2
 8003d80:	f003 fe02 	bl	8007988 <lcd_print>
 8003d84:	e004      	b.n	8003d90 <menu+0x2a20>
			} else {
				lcd_print(2, 1, "Active          ");
 8003d86:	4a50      	ldr	r2, [pc, #320]	@ (8003ec8 <menu+0x2b58>)
 8003d88:	2101      	movs	r1, #1
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f003 fdfc 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d90:	2102      	movs	r1, #2
 8003d92:	4843      	ldr	r0, [pc, #268]	@ (8003ea0 <menu+0x2b30>)
 8003d94:	f005 f922 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d115      	bne.n	8003dca <menu+0x2a5a>
 8003d9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ea4 <menu+0x2b34>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	f083 0301 	eor.w	r3, r3, #1
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00e      	beq.n	8003dca <menu+0x2a5a>
			buzzer = buzzer + 1;
 8003dac:	4b42      	ldr	r3, [pc, #264]	@ (8003eb8 <menu+0x2b48>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	4b40      	ldr	r3, [pc, #256]	@ (8003eb8 <menu+0x2b48>)
 8003db6:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003db8:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb8 <menu+0x2b48>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d902      	bls.n	8003dc6 <menu+0x2a56>
				buzzer = 0;
 8003dc0:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb8 <menu+0x2b48>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003dc6:	f000 fc97 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dca:	2104      	movs	r1, #4
 8003dcc:	4834      	ldr	r0, [pc, #208]	@ (8003ea0 <menu+0x2b30>)
 8003dce:	f005 f905 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d115      	bne.n	8003e04 <menu+0x2a94>
 8003dd8:	4b32      	ldr	r3, [pc, #200]	@ (8003ea4 <menu+0x2b34>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	f083 0301 	eor.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00e      	beq.n	8003e04 <menu+0x2a94>
			buzzer = buzzer - 1;
 8003de6:	4b34      	ldr	r3, [pc, #208]	@ (8003eb8 <menu+0x2b48>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4b32      	ldr	r3, [pc, #200]	@ (8003eb8 <menu+0x2b48>)
 8003df0:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003df2:	4b31      	ldr	r3, [pc, #196]	@ (8003eb8 <menu+0x2b48>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <menu+0x2a90>
		   		buzzer = 1;
 8003dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb8 <menu+0x2b48>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e00:	f000 fc7a 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e04:	2108      	movs	r1, #8
 8003e06:	4826      	ldr	r0, [pc, #152]	@ (8003ea0 <menu+0x2b30>)
 8003e08:	f005 f8e8 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10d      	bne.n	8003e2e <menu+0x2abe>
 8003e12:	4b24      	ldr	r3, [pc, #144]	@ (8003ea4 <menu+0x2b34>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f083 0301 	eor.w	r3, r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <menu+0x2abe>
			eepromData[25] = buzzer;
 8003e20:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <menu+0x2b48>)
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <menu+0x2b38>)
 8003e26:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003e28:	4b20      	ldr	r3, [pc, #128]	@ (8003eac <menu+0x2b3c>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003e2e:	4b20      	ldr	r3, [pc, #128]	@ (8003eb0 <menu+0x2b40>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b1c      	cmp	r3, #28
 8003e34:	f040 80a4 	bne.w	8003f80 <menu+0x2c10>
		calismaSayModu = 0;
 8003e38:	4b24      	ldr	r3, [pc, #144]	@ (8003ecc <menu+0x2b5c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003e3e:	4a24      	ldr	r2, [pc, #144]	@ (8003ed0 <menu+0x2b60>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	2001      	movs	r0, #1
 8003e44:	f003 fda0 	bl	8007988 <lcd_print>
		//lcd_print(1, 1, demoModTextGN);

		if(demoMode == 0) {
 8003e48:	4b22      	ldr	r3, [pc, #136]	@ (8003ed4 <menu+0x2b64>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10f      	bne.n	8003e70 <menu+0x2b00>
			if(dilSecim == 0) {
 8003e50:	4b11      	ldr	r3, [pc, #68]	@ (8003e98 <menu+0x2b28>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <menu+0x2af4>
				lcd_print(2, 1, "Pasif           ");
 8003e58:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <menu+0x2b4c>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	2002      	movs	r0, #2
 8003e5e:	f003 fd93 	bl	8007988 <lcd_print>
 8003e62:	e03e      	b.n	8003ee2 <menu+0x2b72>
			} else {
				lcd_print(2, 1, "Passive         ");
 8003e64:	4a16      	ldr	r2, [pc, #88]	@ (8003ec0 <menu+0x2b50>)
 8003e66:	2101      	movs	r1, #1
 8003e68:	2002      	movs	r0, #2
 8003e6a:	f003 fd8d 	bl	8007988 <lcd_print>
 8003e6e:	e038      	b.n	8003ee2 <menu+0x2b72>
			}
			//lcd_print(2, 1, pasifText);
		} else if(demoMode == 1) {
 8003e70:	4b18      	ldr	r3, [pc, #96]	@ (8003ed4 <menu+0x2b64>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d134      	bne.n	8003ee2 <menu+0x2b72>
			if(dilSecim == 0){
 8003e78:	4b07      	ldr	r3, [pc, #28]	@ (8003e98 <menu+0x2b28>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d12b      	bne.n	8003ed8 <menu+0x2b68>
				lcd_print(2, 1, "Aktif           ");
 8003e80:	4a10      	ldr	r2, [pc, #64]	@ (8003ec4 <menu+0x2b54>)
 8003e82:	2101      	movs	r1, #1
 8003e84:	2002      	movs	r0, #2
 8003e86:	f003 fd7f 	bl	8007988 <lcd_print>
 8003e8a:	e02a      	b.n	8003ee2 <menu+0x2b72>
 8003e8c:	0800d5e4 	.word	0x0800d5e4
 8003e90:	20000228 	.word	0x20000228
 8003e94:	200001a8 	.word	0x200001a8
 8003e98:	20000231 	.word	0x20000231
 8003e9c:	0800d270 	.word	0x0800d270
 8003ea0:	40010800 	.word	0x40010800
 8003ea4:	2000023f 	.word	0x2000023f
 8003ea8:	20000138 	.word	0x20000138
 8003eac:	2000023c 	.word	0x2000023c
 8003eb0:	20000210 	.word	0x20000210
 8003eb4:	0800d6e4 	.word	0x0800d6e4
 8003eb8:	2000022c 	.word	0x2000022c
 8003ebc:	0800d00c 	.word	0x0800d00c
 8003ec0:	0800d020 	.word	0x0800d020
 8003ec4:	0800d06c 	.word	0x0800d06c
 8003ec8:	0800d080 	.word	0x0800d080
 8003ecc:	20000230 	.word	0x20000230
 8003ed0:	0800d6f8 	.word	0x0800d6f8
 8003ed4:	2000022e 	.word	0x2000022e
			} else {
				lcd_print(2, 1, "Active          ");
 8003ed8:	4a6d      	ldr	r2, [pc, #436]	@ (8004090 <menu+0x2d20>)
 8003eda:	2101      	movs	r1, #1
 8003edc:	2002      	movs	r0, #2
 8003ede:	f003 fd53 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	486b      	ldr	r0, [pc, #428]	@ (8004094 <menu+0x2d24>)
 8003ee6:	f005 f879 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d115      	bne.n	8003f1c <menu+0x2bac>
 8003ef0:	4b69      	ldr	r3, [pc, #420]	@ (8004098 <menu+0x2d28>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	f083 0301 	eor.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00e      	beq.n	8003f1c <menu+0x2bac>
			demoMode = demoMode + 1;
 8003efe:	4b67      	ldr	r3, [pc, #412]	@ (800409c <menu+0x2d2c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	3301      	adds	r3, #1
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	4b65      	ldr	r3, [pc, #404]	@ (800409c <menu+0x2d2c>)
 8003f08:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003f0a:	4b64      	ldr	r3, [pc, #400]	@ (800409c <menu+0x2d2c>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d902      	bls.n	8003f18 <menu+0x2ba8>
				demoMode = 0;
 8003f12:	4b62      	ldr	r3, [pc, #392]	@ (800409c <menu+0x2d2c>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f18:	f000 fbee 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	485d      	ldr	r0, [pc, #372]	@ (8004094 <menu+0x2d24>)
 8003f20:	f005 f85c 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d115      	bne.n	8003f56 <menu+0x2be6>
 8003f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004098 <menu+0x2d28>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	f083 0301 	eor.w	r3, r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <menu+0x2be6>
			demoMode = demoMode - 1;
 8003f38:	4b58      	ldr	r3, [pc, #352]	@ (800409c <menu+0x2d2c>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4b56      	ldr	r3, [pc, #344]	@ (800409c <menu+0x2d2c>)
 8003f42:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003f44:	4b55      	ldr	r3, [pc, #340]	@ (800409c <menu+0x2d2c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <menu+0x2be2>
		   		demoMode = 1;
 8003f4c:	4b53      	ldr	r3, [pc, #332]	@ (800409c <menu+0x2d2c>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f52:	f000 fbd1 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f56:	2108      	movs	r1, #8
 8003f58:	484e      	ldr	r0, [pc, #312]	@ (8004094 <menu+0x2d24>)
 8003f5a:	f005 f83f 	bl	8008fdc <HAL_GPIO_ReadPin>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d10d      	bne.n	8003f80 <menu+0x2c10>
 8003f64:	4b4c      	ldr	r3, [pc, #304]	@ (8004098 <menu+0x2d28>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f083 0301 	eor.w	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <menu+0x2c10>
			eepromData[26] = demoMode;
 8003f72:	4b4a      	ldr	r3, [pc, #296]	@ (800409c <menu+0x2d2c>)
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	4b4a      	ldr	r3, [pc, #296]	@ (80040a0 <menu+0x2d30>)
 8003f78:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80040a4 <menu+0x2d34>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003f80:	4b49      	ldr	r3, [pc, #292]	@ (80040a8 <menu+0x2d38>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b1d      	cmp	r3, #29
 8003f86:	f040 812a 	bne.w	80041de <menu+0x2e6e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003f8a:	4b48      	ldr	r3, [pc, #288]	@ (80040ac <menu+0x2d3c>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <menu+0x2c4a>
 8003f92:	4b47      	ldr	r3, [pc, #284]	@ (80040b0 <menu+0x2d40>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10f      	bne.n	8003fba <menu+0x2c4a>
 8003f9a:	4b46      	ldr	r3, [pc, #280]	@ (80040b4 <menu+0x2d44>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <menu+0x2c4a>
 8003fa2:	4b45      	ldr	r3, [pc, #276]	@ (80040b8 <menu+0x2d48>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d107      	bne.n	8003fba <menu+0x2c4a>
 8003faa:	4b44      	ldr	r3, [pc, #272]	@ (80040bc <menu+0x2d4c>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <menu+0x2c4a>
			calismaSayisiYar = 0;
 8003fb2:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <menu+0x2d50>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e002      	b.n	8003fc0 <menu+0x2c50>
		} else {
			calismaSayisiYar = 1;
 8003fba:	4b41      	ldr	r3, [pc, #260]	@ (80040c0 <menu+0x2d50>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003fc0:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <menu+0x2d54>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d150      	bne.n	800406a <menu+0x2cfa>
			if(dilSecim == 0) {
 8003fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <menu+0x2d58>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <menu+0x2c6c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80040cc <menu+0x2d5c>)
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f003 fcd7 	bl	8007988 <lcd_print>
 8003fda:	e004      	b.n	8003fe6 <menu+0x2c76>
			} else {
				lcd_print(1, 1, "Working Cycle   ");
 8003fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80040d0 <menu+0x2d60>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f003 fcd1 	bl	8007988 <lcd_print>
			}
			//lcd_print(1, 1, calismaSayisiText);

			itoa(calismaSayisi10000, snum, 10);
 8003fe6:	4b35      	ldr	r3, [pc, #212]	@ (80040bc <menu+0x2d4c>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	220a      	movs	r2, #10
 8003fec:	4939      	ldr	r1, [pc, #228]	@ (80040d4 <menu+0x2d64>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f008 f820 	bl	800c034 <itoa>
			lcd_print(2, 12, snum);
 8003ff4:	4a37      	ldr	r2, [pc, #220]	@ (80040d4 <menu+0x2d64>)
 8003ff6:	210c      	movs	r1, #12
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	f003 fcc5 	bl	8007988 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80040b8 <menu+0x2d48>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	220a      	movs	r2, #10
 8004004:	4933      	ldr	r1, [pc, #204]	@ (80040d4 <menu+0x2d64>)
 8004006:	4618      	mov	r0, r3
 8004008:	f008 f814 	bl	800c034 <itoa>
			lcd_print(2, 13, snum);
 800400c:	4a31      	ldr	r2, [pc, #196]	@ (80040d4 <menu+0x2d64>)
 800400e:	210d      	movs	r1, #13
 8004010:	2002      	movs	r0, #2
 8004012:	f003 fcb9 	bl	8007988 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004016:	4b27      	ldr	r3, [pc, #156]	@ (80040b4 <menu+0x2d44>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	220a      	movs	r2, #10
 800401c:	492d      	ldr	r1, [pc, #180]	@ (80040d4 <menu+0x2d64>)
 800401e:	4618      	mov	r0, r3
 8004020:	f008 f808 	bl	800c034 <itoa>
			lcd_print(2, 14, snum);
 8004024:	4a2b      	ldr	r2, [pc, #172]	@ (80040d4 <menu+0x2d64>)
 8004026:	210e      	movs	r1, #14
 8004028:	2002      	movs	r0, #2
 800402a:	f003 fcad 	bl	8007988 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800402e:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <menu+0x2d40>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	220a      	movs	r2, #10
 8004034:	4927      	ldr	r1, [pc, #156]	@ (80040d4 <menu+0x2d64>)
 8004036:	4618      	mov	r0, r3
 8004038:	f007 fffc 	bl	800c034 <itoa>
			lcd_print(2, 15, snum);
 800403c:	4a25      	ldr	r2, [pc, #148]	@ (80040d4 <menu+0x2d64>)
 800403e:	210f      	movs	r1, #15
 8004040:	2002      	movs	r0, #2
 8004042:	f003 fca1 	bl	8007988 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004046:	4b19      	ldr	r3, [pc, #100]	@ (80040ac <menu+0x2d3c>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	220a      	movs	r2, #10
 800404c:	4921      	ldr	r1, [pc, #132]	@ (80040d4 <menu+0x2d64>)
 800404e:	4618      	mov	r0, r3
 8004050:	f007 fff0 	bl	800c034 <itoa>
			lcd_print(2, 16, snum);
 8004054:	4a1f      	ldr	r2, [pc, #124]	@ (80040d4 <menu+0x2d64>)
 8004056:	2110      	movs	r1, #16
 8004058:	2002      	movs	r0, #2
 800405a:	f003 fc95 	bl	8007988 <lcd_print>

			lcd_print(2, 1, "           ");
 800405e:	4a1e      	ldr	r2, [pc, #120]	@ (80040d8 <menu+0x2d68>)
 8004060:	2101      	movs	r1, #1
 8004062:	2002      	movs	r0, #2
 8004064:	f003 fc90 	bl	8007988 <lcd_print>
 8004068:	e044      	b.n	80040f4 <menu+0x2d84>
		} else if(calismaSayModu == 1) {
 800406a:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <menu+0x2d54>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d140      	bne.n	80040f4 <menu+0x2d84>
			if(dilSecim == 0) {
 8004072:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <menu+0x2d58>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d132      	bne.n	80040e0 <menu+0x2d70>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800407a:	4a14      	ldr	r2, [pc, #80]	@ (80040cc <menu+0x2d5c>)
 800407c:	2101      	movs	r1, #1
 800407e:	2001      	movs	r0, #1
 8004080:	f003 fc82 	bl	8007988 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004084:	4a15      	ldr	r2, [pc, #84]	@ (80040dc <menu+0x2d6c>)
 8004086:	2101      	movs	r1, #1
 8004088:	2002      	movs	r0, #2
 800408a:	f003 fc7d 	bl	8007988 <lcd_print>
 800408e:	e031      	b.n	80040f4 <menu+0x2d84>
 8004090:	0800d080 	.word	0x0800d080
 8004094:	40010800 	.word	0x40010800
 8004098:	2000023f 	.word	0x2000023f
 800409c:	2000022e 	.word	0x2000022e
 80040a0:	20000138 	.word	0x20000138
 80040a4:	2000023c 	.word	0x2000023c
 80040a8:	20000210 	.word	0x20000210
 80040ac:	2000020d 	.word	0x2000020d
 80040b0:	2000020e 	.word	0x2000020e
 80040b4:	20000000 	.word	0x20000000
 80040b8:	20000001 	.word	0x20000001
 80040bc:	2000020f 	.word	0x2000020f
 80040c0:	20000251 	.word	0x20000251
 80040c4:	20000230 	.word	0x20000230
 80040c8:	20000231 	.word	0x20000231
 80040cc:	0800d708 	.word	0x0800d708
 80040d0:	0800d71c 	.word	0x0800d71c
 80040d4:	200001a8 	.word	0x200001a8
 80040d8:	0800d730 	.word	0x0800d730
 80040dc:	0800d73c 	.word	0x0800d73c
			} else {
				lcd_print(1, 1, "Working Cycle   ");
 80040e0:	4a8e      	ldr	r2, [pc, #568]	@ (800431c <menu+0x2fac>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2001      	movs	r0, #1
 80040e6:	f003 fc4f 	bl	8007988 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80040ea:	4a8d      	ldr	r2, [pc, #564]	@ (8004320 <menu+0x2fb0>)
 80040ec:	2101      	movs	r1, #1
 80040ee:	2002      	movs	r0, #2
 80040f0:	f003 fc4a 	bl	8007988 <lcd_print>
			}
			//lcd_print(1, 1, calismaSayisiText);
			//lcd_print(2, 1, enterlaSifirlaText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80040f4:	2102      	movs	r1, #2
 80040f6:	488b      	ldr	r0, [pc, #556]	@ (8004324 <menu+0x2fb4>)
 80040f8:	f004 ff70 	bl	8008fdc <HAL_GPIO_ReadPin>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d119      	bne.n	8004136 <menu+0x2dc6>
 8004102:	4b89      	ldr	r3, [pc, #548]	@ (8004328 <menu+0x2fb8>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	f083 0301 	eor.w	r3, r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d012      	beq.n	8004136 <menu+0x2dc6>
 8004110:	4b86      	ldr	r3, [pc, #536]	@ (800432c <menu+0x2fbc>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <menu+0x2dc6>
			calismaSayModu = calismaSayModu + 1;
 8004118:	4b85      	ldr	r3, [pc, #532]	@ (8004330 <menu+0x2fc0>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	4b83      	ldr	r3, [pc, #524]	@ (8004330 <menu+0x2fc0>)
 8004122:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004124:	4b82      	ldr	r3, [pc, #520]	@ (8004330 <menu+0x2fc0>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d902      	bls.n	8004132 <menu+0x2dc2>
				calismaSayModu = 0;
 800412c:	4b80      	ldr	r3, [pc, #512]	@ (8004330 <menu+0x2fc0>)
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004132:	f000 fae1 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004136:	2104      	movs	r1, #4
 8004138:	487a      	ldr	r0, [pc, #488]	@ (8004324 <menu+0x2fb4>)
 800413a:	f004 ff4f 	bl	8008fdc <HAL_GPIO_ReadPin>
 800413e:	4603      	mov	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d119      	bne.n	8004178 <menu+0x2e08>
 8004144:	4b78      	ldr	r3, [pc, #480]	@ (8004328 <menu+0x2fb8>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	f083 0301 	eor.w	r3, r3, #1
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d012      	beq.n	8004178 <menu+0x2e08>
 8004152:	4b76      	ldr	r3, [pc, #472]	@ (800432c <menu+0x2fbc>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00e      	beq.n	8004178 <menu+0x2e08>
			calismaSayModu = calismaSayModu - 1;
 800415a:	4b75      	ldr	r3, [pc, #468]	@ (8004330 <menu+0x2fc0>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	3b01      	subs	r3, #1
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4b73      	ldr	r3, [pc, #460]	@ (8004330 <menu+0x2fc0>)
 8004164:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004166:	4b72      	ldr	r3, [pc, #456]	@ (8004330 <menu+0x2fc0>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <menu+0x2e04>
		   		calismaSayModu = 1;
 800416e:	4b70      	ldr	r3, [pc, #448]	@ (8004330 <menu+0x2fc0>)
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004174:	f000 fac0 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004178:	2108      	movs	r1, #8
 800417a:	486a      	ldr	r0, [pc, #424]	@ (8004324 <menu+0x2fb4>)
 800417c:	f004 ff2e 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004180:	4603      	mov	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d12b      	bne.n	80041de <menu+0x2e6e>
 8004186:	4b68      	ldr	r3, [pc, #416]	@ (8004328 <menu+0x2fb8>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	f083 0301 	eor.w	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d024      	beq.n	80041de <menu+0x2e6e>
			eepromData[32] = 0;
 8004194:	4b67      	ldr	r3, [pc, #412]	@ (8004334 <menu+0x2fc4>)
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800419c:	4b65      	ldr	r3, [pc, #404]	@ (8004334 <menu+0x2fc4>)
 800419e:	2200      	movs	r2, #0
 80041a0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80041a2:	4b64      	ldr	r3, [pc, #400]	@ (8004334 <menu+0x2fc4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80041a8:	4b62      	ldr	r3, [pc, #392]	@ (8004334 <menu+0x2fc4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80041ae:	4b61      	ldr	r3, [pc, #388]	@ (8004334 <menu+0x2fc4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80041b4:	4b60      	ldr	r3, [pc, #384]	@ (8004338 <menu+0x2fc8>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80041ba:	4b60      	ldr	r3, [pc, #384]	@ (800433c <menu+0x2fcc>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80041c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004340 <menu+0x2fd0>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80041c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004344 <menu+0x2fd4>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80041cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004348 <menu+0x2fd8>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80041d2:	4b57      	ldr	r3, [pc, #348]	@ (8004330 <menu+0x2fc0>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80041d8:	4b5c      	ldr	r3, [pc, #368]	@ (800434c <menu+0x2fdc>)
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80041de:	4b5c      	ldr	r3, [pc, #368]	@ (8004350 <menu+0x2fe0>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b1e      	cmp	r3, #30
 80041e4:	d16b      	bne.n	80042be <menu+0x2f4e>
		calismaSayModu = 0;
 80041e6:	4b52      	ldr	r3, [pc, #328]	@ (8004330 <menu+0x2fc0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80041ec:	4b59      	ldr	r3, [pc, #356]	@ (8004354 <menu+0x2fe4>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <menu+0x2e9a>
			lcd_print(1, 1, "DIL SECIMI      ");
 80041f4:	4a58      	ldr	r2, [pc, #352]	@ (8004358 <menu+0x2fe8>)
 80041f6:	2101      	movs	r1, #1
 80041f8:	2001      	movs	r0, #1
 80041fa:	f003 fbc5 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80041fe:	4a57      	ldr	r2, [pc, #348]	@ (800435c <menu+0x2fec>)
 8004200:	2101      	movs	r1, #1
 8004202:	2002      	movs	r0, #2
 8004204:	f003 fbc0 	bl	8007988 <lcd_print>
 8004208:	e009      	b.n	800421e <menu+0x2eae>
		} else {
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800420a:	4a55      	ldr	r2, [pc, #340]	@ (8004360 <menu+0x2ff0>)
 800420c:	2101      	movs	r1, #1
 800420e:	2001      	movs	r0, #1
 8004210:	f003 fbba 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004214:	4a53      	ldr	r2, [pc, #332]	@ (8004364 <menu+0x2ff4>)
 8004216:	2101      	movs	r1, #1
 8004218:	2002      	movs	r0, #2
 800421a:	f003 fbb5 	bl	8007988 <lcd_print>
		}

		//lcd_print(1, 1, dilSecimText);
		//lcd_print(2, 1, secilenDilText);

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800421e:	2102      	movs	r1, #2
 8004220:	4840      	ldr	r0, [pc, #256]	@ (8004324 <menu+0x2fb4>)
 8004222:	f004 fedb 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004226:	4603      	mov	r3, r0
 8004228:	2b01      	cmp	r3, #1
 800422a:	d115      	bne.n	8004258 <menu+0x2ee8>
 800422c:	4b3e      	ldr	r3, [pc, #248]	@ (8004328 <menu+0x2fb8>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f083 0301 	eor.w	r3, r3, #1
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <menu+0x2ee8>
			dilSecim = dilSecim + 1;
 800423a:	4b46      	ldr	r3, [pc, #280]	@ (8004354 <menu+0x2fe4>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4b44      	ldr	r3, [pc, #272]	@ (8004354 <menu+0x2fe4>)
 8004244:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004246:	4b43      	ldr	r3, [pc, #268]	@ (8004354 <menu+0x2fe4>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d902      	bls.n	8004254 <menu+0x2ee4>
				dilSecim = 0;
 800424e:	4b41      	ldr	r3, [pc, #260]	@ (8004354 <menu+0x2fe4>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004254:	f000 fa50 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004258:	2104      	movs	r1, #4
 800425a:	4832      	ldr	r0, [pc, #200]	@ (8004324 <menu+0x2fb4>)
 800425c:	f004 febe 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d115      	bne.n	8004292 <menu+0x2f22>
 8004266:	4b30      	ldr	r3, [pc, #192]	@ (8004328 <menu+0x2fb8>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	f083 0301 	eor.w	r3, r3, #1
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <menu+0x2f22>
			dilSecim = dilSecim - 1;
 8004274:	4b37      	ldr	r3, [pc, #220]	@ (8004354 <menu+0x2fe4>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	3b01      	subs	r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	4b35      	ldr	r3, [pc, #212]	@ (8004354 <menu+0x2fe4>)
 800427e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004280:	4b34      	ldr	r3, [pc, #208]	@ (8004354 <menu+0x2fe4>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <menu+0x2f1e>
		   		dilSecim = 1;
 8004288:	4b32      	ldr	r3, [pc, #200]	@ (8004354 <menu+0x2fe4>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800428e:	f000 fa33 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004292:	2108      	movs	r1, #8
 8004294:	4823      	ldr	r0, [pc, #140]	@ (8004324 <menu+0x2fb4>)
 8004296:	f004 fea1 	bl	8008fdc <HAL_GPIO_ReadPin>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10e      	bne.n	80042be <menu+0x2f4e>
 80042a0:	4b21      	ldr	r3, [pc, #132]	@ (8004328 <menu+0x2fb8>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <menu+0x2f4e>
			eepromData[33] = dilSecim;
 80042ae:	4b29      	ldr	r3, [pc, #164]	@ (8004354 <menu+0x2fe4>)
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	4b20      	ldr	r3, [pc, #128]	@ (8004334 <menu+0x2fc4>)
 80042b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80042b8:	4b24      	ldr	r3, [pc, #144]	@ (800434c <menu+0x2fdc>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80042be:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <menu+0x2fe0>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b1f      	cmp	r3, #31
 80042c4:	f040 80af 	bne.w	8004426 <menu+0x30b6>
		calismaSayModu = 0;
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <menu+0x2fc0>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80042ce:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <menu+0x2ff8>)
 80042d0:	2101      	movs	r1, #1
 80042d2:	2001      	movs	r0, #1
 80042d4:	f003 fb58 	bl	8007988 <lcd_print>
		//lcd_print(1, 1, iotModTextGN);

		if(iotMode == 0) {
 80042d8:	4b24      	ldr	r3, [pc, #144]	@ (800436c <menu+0x2ffc>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10f      	bne.n	8004300 <menu+0x2f90>
			if(dilSecim == 0) {
 80042e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004354 <menu+0x2fe4>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <menu+0x2f84>
				lcd_print(2, 1, "Pasif           ");
 80042e8:	4a21      	ldr	r2, [pc, #132]	@ (8004370 <menu+0x3000>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	2002      	movs	r0, #2
 80042ee:	f003 fb4b 	bl	8007988 <lcd_print>
 80042f2:	e048      	b.n	8004386 <menu+0x3016>
			} else {
				lcd_print(2, 1, "Passive         ");
 80042f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004374 <menu+0x3004>)
 80042f6:	2101      	movs	r1, #1
 80042f8:	2002      	movs	r0, #2
 80042fa:	f003 fb45 	bl	8007988 <lcd_print>
 80042fe:	e042      	b.n	8004386 <menu+0x3016>
			}
			//lcd_print(2, 1, pasifText);
		} else if(iotMode == 1) {
 8004300:	4b1a      	ldr	r3, [pc, #104]	@ (800436c <menu+0x2ffc>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d13e      	bne.n	8004386 <menu+0x3016>
			if(dilSecim == 0) {
 8004308:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <menu+0x2fe4>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d135      	bne.n	800437c <menu+0x300c>
				lcd_print(2, 1, "Aktif           ");
 8004310:	4a19      	ldr	r2, [pc, #100]	@ (8004378 <menu+0x3008>)
 8004312:	2101      	movs	r1, #1
 8004314:	2002      	movs	r0, #2
 8004316:	f003 fb37 	bl	8007988 <lcd_print>
 800431a:	e034      	b.n	8004386 <menu+0x3016>
 800431c:	0800d71c 	.word	0x0800d71c
 8004320:	0800d750 	.word	0x0800d750
 8004324:	40010800 	.word	0x40010800
 8004328:	2000023f 	.word	0x2000023f
 800432c:	20000251 	.word	0x20000251
 8004330:	20000230 	.word	0x20000230
 8004334:	20000138 	.word	0x20000138
 8004338:	2000020f 	.word	0x2000020f
 800433c:	20000001 	.word	0x20000001
 8004340:	20000000 	.word	0x20000000
 8004344:	2000020e 	.word	0x2000020e
 8004348:	2000020d 	.word	0x2000020d
 800434c:	2000023c 	.word	0x2000023c
 8004350:	20000210 	.word	0x20000210
 8004354:	20000231 	.word	0x20000231
 8004358:	0800d764 	.word	0x0800d764
 800435c:	0800d778 	.word	0x0800d778
 8004360:	0800d78c 	.word	0x0800d78c
 8004364:	0800d7a0 	.word	0x0800d7a0
 8004368:	0800d7b4 	.word	0x0800d7b4
 800436c:	2000022f 	.word	0x2000022f
 8004370:	0800d00c 	.word	0x0800d00c
 8004374:	0800d020 	.word	0x0800d020
 8004378:	0800d06c 	.word	0x0800d06c
			} else {
				lcd_print(2, 1, "Active          ");
 800437c:	4aa4      	ldr	r2, [pc, #656]	@ (8004610 <menu+0x32a0>)
 800437e:	2101      	movs	r1, #1
 8004380:	2002      	movs	r0, #2
 8004382:	f003 fb01 	bl	8007988 <lcd_print>
			}
			//lcd_print(2, 1, aktifText);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004386:	2102      	movs	r1, #2
 8004388:	48a2      	ldr	r0, [pc, #648]	@ (8004614 <menu+0x32a4>)
 800438a:	f004 fe27 	bl	8008fdc <HAL_GPIO_ReadPin>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d115      	bne.n	80043c0 <menu+0x3050>
 8004394:	4ba0      	ldr	r3, [pc, #640]	@ (8004618 <menu+0x32a8>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00e      	beq.n	80043c0 <menu+0x3050>
			iotMode = iotMode + 1;
 80043a2:	4b9e      	ldr	r3, [pc, #632]	@ (800461c <menu+0x32ac>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b9c      	ldr	r3, [pc, #624]	@ (800461c <menu+0x32ac>)
 80043ac:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80043ae:	4b9b      	ldr	r3, [pc, #620]	@ (800461c <menu+0x32ac>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d902      	bls.n	80043bc <menu+0x304c>
				iotMode = 0;
 80043b6:	4b99      	ldr	r3, [pc, #612]	@ (800461c <menu+0x32ac>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80043bc:	f000 f99c 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043c0:	2104      	movs	r1, #4
 80043c2:	4894      	ldr	r0, [pc, #592]	@ (8004614 <menu+0x32a4>)
 80043c4:	f004 fe0a 	bl	8008fdc <HAL_GPIO_ReadPin>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d115      	bne.n	80043fa <menu+0x308a>
 80043ce:	4b92      	ldr	r3, [pc, #584]	@ (8004618 <menu+0x32a8>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f083 0301 	eor.w	r3, r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <menu+0x308a>
			iotMode = iotMode - 1;
 80043dc:	4b8f      	ldr	r3, [pc, #572]	@ (800461c <menu+0x32ac>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b8d      	ldr	r3, [pc, #564]	@ (800461c <menu+0x32ac>)
 80043e6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80043e8:	4b8c      	ldr	r3, [pc, #560]	@ (800461c <menu+0x32ac>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <menu+0x3086>
		   		iotMode = 1;
 80043f0:	4b8a      	ldr	r3, [pc, #552]	@ (800461c <menu+0x32ac>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80043f6:	f000 f97f 	bl	80046f8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043fa:	2108      	movs	r1, #8
 80043fc:	4885      	ldr	r0, [pc, #532]	@ (8004614 <menu+0x32a4>)
 80043fe:	f004 fded 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004402:	4603      	mov	r3, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10e      	bne.n	8004426 <menu+0x30b6>
 8004408:	4b83      	ldr	r3, [pc, #524]	@ (8004618 <menu+0x32a8>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	f083 0301 	eor.w	r3, r3, #1
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <menu+0x30b6>
			eepromData[48] = iotMode;
 8004416:	4b81      	ldr	r3, [pc, #516]	@ (800461c <menu+0x32ac>)
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	4b81      	ldr	r3, [pc, #516]	@ (8004620 <menu+0x32b0>)
 800441c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8004420:	4b80      	ldr	r3, [pc, #512]	@ (8004624 <menu+0x32b4>)
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004426:	4b80      	ldr	r3, [pc, #512]	@ (8004628 <menu+0x32b8>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b20      	cmp	r3, #32
 800442c:	d12b      	bne.n	8004486 <menu+0x3116>
		calismaSayModu = 0;
 800442e:	4b7f      	ldr	r3, [pc, #508]	@ (800462c <menu+0x32bc>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004434:	2001      	movs	r0, #1
 8004436:	f7fc f97f 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 800443a:	2032      	movs	r0, #50	@ 0x32
 800443c:	f003 fffe 	bl	800843c <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8004440:	2001      	movs	r0, #1
 8004442:	f7fc fed9 	bl	80011f8 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004446:	2102      	movs	r1, #2
 8004448:	4872      	ldr	r0, [pc, #456]	@ (8004614 <menu+0x32a4>)
 800444a:	f004 fdc7 	bl	8008fdc <HAL_GPIO_ReadPin>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d118      	bne.n	8004486 <menu+0x3116>
 8004454:	2104      	movs	r1, #4
 8004456:	486f      	ldr	r0, [pc, #444]	@ (8004614 <menu+0x32a4>)
 8004458:	f004 fdc0 	bl	8008fdc <HAL_GPIO_ReadPin>
 800445c:	4603      	mov	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d111      	bne.n	8004486 <menu+0x3116>
 8004462:	4b6d      	ldr	r3, [pc, #436]	@ (8004618 <menu+0x32a8>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	f083 0301 	eor.w	r3, r3, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <menu+0x3116>
			takeMachineID();
 8004470:	f002 fa7a 	bl	8006968 <takeMachineID>

			convertArrays(1);
 8004474:	2001      	movs	r0, #1
 8004476:	f7fc f95f 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 800447a:	2032      	movs	r0, #50	@ 0x32
 800447c:	f003 ffde 	bl	800843c <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 8004480:	2001      	movs	r0, #1
 8004482:	f7fc feb9 	bl	80011f8 <printCredentials>
		}
	}

	if (menuSayac == 33) {
 8004486:	4b68      	ldr	r3, [pc, #416]	@ (8004628 <menu+0x32b8>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b21      	cmp	r3, #33	@ 0x21
 800448c:	d135      	bne.n	80044fa <menu+0x318a>
		calismaSayModu = 0;
 800448e:	4b67      	ldr	r3, [pc, #412]	@ (800462c <menu+0x32bc>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004494:	2001      	movs	r0, #1
 8004496:	f003 fac3 	bl	8007a20 <lcd_backlight>

		convertArrays(2);
 800449a:	2002      	movs	r0, #2
 800449c:	f7fc f94c 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80044a0:	2032      	movs	r0, #50	@ 0x32
 80044a2:	f003 ffcb 	bl	800843c <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 80044a6:	2002      	movs	r0, #2
 80044a8:	f7fc fea6 	bl	80011f8 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 80044ac:	2102      	movs	r1, #2
 80044ae:	4859      	ldr	r0, [pc, #356]	@ (8004614 <menu+0x32a4>)
 80044b0:	f004 fd94 	bl	8008fdc <HAL_GPIO_ReadPin>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10d      	bne.n	80044d6 <menu+0x3166>
 80044ba:	2104      	movs	r1, #4
 80044bc:	4855      	ldr	r0, [pc, #340]	@ (8004614 <menu+0x32a4>)
 80044be:	f004 fd8d 	bl	8008fdc <HAL_GPIO_ReadPin>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d106      	bne.n	80044d6 <menu+0x3166>
 80044c8:	4b53      	ldr	r3, [pc, #332]	@ (8004618 <menu+0x32a8>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f083 0301 	eor.w	r3, r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <menu+0x316e>
 80044d6:	4b56      	ldr	r3, [pc, #344]	@ (8004630 <menu+0x32c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d10d      	bne.n	80044fa <menu+0x318a>
			editMode = 0;
 80044de:	4b54      	ldr	r3, [pc, #336]	@ (8004630 <menu+0x32c0>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
			takeWifiSSID();
 80044e4:	f002 fbd8 	bl	8006c98 <takeWifiSSID>

			convertArrays(2);
 80044e8:	2002      	movs	r0, #2
 80044ea:	f7fc f925 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 80044ee:	2032      	movs	r0, #50	@ 0x32
 80044f0:	f003 ffa4 	bl	800843c <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 80044f4:	2002      	movs	r0, #2
 80044f6:	f7fc fe7f 	bl	80011f8 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 80044fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <menu+0x32b8>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b22      	cmp	r3, #34	@ 0x22
 8004500:	d135      	bne.n	800456e <menu+0x31fe>
		calismaSayModu = 0;
 8004502:	4b4a      	ldr	r3, [pc, #296]	@ (800462c <menu+0x32bc>)
 8004504:	2200      	movs	r2, #0
 8004506:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004508:	2001      	movs	r0, #1
 800450a:	f003 fa89 	bl	8007a20 <lcd_backlight>

		convertArrays(3);
 800450e:	2003      	movs	r0, #3
 8004510:	f7fc f912 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004514:	2032      	movs	r0, #50	@ 0x32
 8004516:	f003 ff91 	bl	800843c <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 800451a:	2003      	movs	r0, #3
 800451c:	f7fc fe6c 	bl	80011f8 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8004520:	2102      	movs	r1, #2
 8004522:	483c      	ldr	r0, [pc, #240]	@ (8004614 <menu+0x32a4>)
 8004524:	f004 fd5a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004528:	4603      	mov	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	d10d      	bne.n	800454a <menu+0x31da>
 800452e:	2104      	movs	r1, #4
 8004530:	4838      	ldr	r0, [pc, #224]	@ (8004614 <menu+0x32a4>)
 8004532:	f004 fd53 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004536:	4603      	mov	r3, r0
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <menu+0x31da>
 800453c:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <menu+0x32a8>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	f083 0301 	eor.w	r3, r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <menu+0x31e2>
 800454a:	4b39      	ldr	r3, [pc, #228]	@ (8004630 <menu+0x32c0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10d      	bne.n	800456e <menu+0x31fe>
			editMode = 0;
 8004552:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <menu+0x32c0>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
			takeWifiPass();
 8004558:	f002 fd3c 	bl	8006fd4 <takeWifiPass>

			convertArrays(3);
 800455c:	2003      	movs	r0, #3
 800455e:	f7fc f8eb 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004562:	2032      	movs	r0, #50	@ 0x32
 8004564:	f003 ff6a 	bl	800843c <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8004568:	2003      	movs	r0, #3
 800456a:	f7fc fe45 	bl	80011f8 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 800456e:	4b2e      	ldr	r3, [pc, #184]	@ (8004628 <menu+0x32b8>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b23      	cmp	r3, #35	@ 0x23
 8004574:	d149      	bne.n	800460a <menu+0x329a>
		if(dilSecim == 0) {
 8004576:	4b2f      	ldr	r3, [pc, #188]	@ (8004634 <menu+0x32c4>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <menu+0x3224>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800457e:	4a2e      	ldr	r2, [pc, #184]	@ (8004638 <menu+0x32c8>)
 8004580:	2101      	movs	r1, #1
 8004582:	2001      	movs	r0, #1
 8004584:	f003 fa00 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004588:	4a2c      	ldr	r2, [pc, #176]	@ (800463c <menu+0x32cc>)
 800458a:	2101      	movs	r1, #1
 800458c:	2002      	movs	r0, #2
 800458e:	f003 f9fb 	bl	8007988 <lcd_print>
 8004592:	e009      	b.n	80045a8 <menu+0x3238>
		} else {
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004594:	4a2a      	ldr	r2, [pc, #168]	@ (8004640 <menu+0x32d0>)
 8004596:	2101      	movs	r1, #1
 8004598:	2001      	movs	r0, #1
 800459a:	f003 f9f5 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800459e:	4a29      	ldr	r2, [pc, #164]	@ (8004644 <menu+0x32d4>)
 80045a0:	2101      	movs	r1, #1
 80045a2:	2002      	movs	r0, #2
 80045a4:	f003 f9f0 	bl	8007988 <lcd_print>
		}
		//lcd_print(1, 1, menudenCikisText);
		//lcd_print(2, 1, enteraBasinizText);

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80045a8:	2108      	movs	r1, #8
 80045aa:	481a      	ldr	r0, [pc, #104]	@ (8004614 <menu+0x32a4>)
 80045ac:	f004 fd16 	bl	8008fdc <HAL_GPIO_ReadPin>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d129      	bne.n	800460a <menu+0x329a>
			menuGiris = 0;
 80045b6:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <menu+0x32d8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80045bc:	bf00      	nop
 80045be:	4823      	ldr	r0, [pc, #140]	@ (800464c <menu+0x32dc>)
 80045c0:	f005 fb35 	bl	8009c2e <HAL_I2C_GetError>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d0f9      	beq.n	80045be <menu+0x324e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80045ca:	bf00      	nop
 80045cc:	481f      	ldr	r0, [pc, #124]	@ (800464c <menu+0x32dc>)
 80045ce:	f005 fb21 	bl	8009c14 <HAL_I2C_GetState>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d1f9      	bne.n	80045cc <menu+0x325c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80045d8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	236e      	movs	r3, #110	@ 0x6e
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004620 <menu+0x32b0>)
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	236e      	movs	r3, #110	@ 0x6e
 80045e8:	2200      	movs	r2, #0
 80045ea:	21a0      	movs	r1, #160	@ 0xa0
 80045ec:	4817      	ldr	r0, [pc, #92]	@ (800464c <menu+0x32dc>)
 80045ee:	f004 ffaf 	bl	8009550 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80045f2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80045f6:	f003 ff21 	bl	800843c <HAL_Delay>

			lcd_clear();
 80045fa:	f003 f9f1 	bl	80079e0 <lcd_clear>
			HAL_Delay(500);
 80045fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004602:	f003 ff1b 	bl	800843c <HAL_Delay>
			NVIC_SystemReset();
 8004606:	f7fc fe9d 	bl	8001344 <__NVIC_SystemReset>
		}
	}
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	0800d080 	.word	0x0800d080
 8004614:	40010800 	.word	0x40010800
 8004618:	2000023f 	.word	0x2000023f
 800461c:	2000022f 	.word	0x2000022f
 8004620:	20000138 	.word	0x20000138
 8004624:	2000023c 	.word	0x2000023c
 8004628:	20000210 	.word	0x20000210
 800462c:	20000230 	.word	0x20000230
 8004630:	20000208 	.word	0x20000208
 8004634:	20000231 	.word	0x20000231
 8004638:	0800d7c8 	.word	0x0800d7c8
 800463c:	0800d7dc 	.word	0x0800d7dc
 8004640:	0800d7f0 	.word	0x0800d7f0
 8004644:	0800d804 	.word	0x0800d804
 8004648:	2000022d 	.word	0x2000022d
 800464c:	200003bc 	.word	0x200003bc

08004650 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"

void lcdUpdate(uint8_t y) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d105      	bne.n	800466c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004660:	4a22      	ldr	r2, [pc, #136]	@ (80046ec <lcdUpdate+0x9c>)
 8004662:	2101      	movs	r1, #1
 8004664:	2002      	movs	r0, #2
 8004666:	f003 f98f 	bl	8007988 <lcd_print>
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		//lcd_print(1, 4, "ESP-RMK");
		//lcd_print(2, 6, "RUN");
	}
}
 800466a:	e03b      	b.n	80046e4 <lcdUpdate+0x94>
	} else if(y==2) {
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d105      	bne.n	800467e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004672:	4a1e      	ldr	r2, [pc, #120]	@ (80046ec <lcdUpdate+0x9c>)
 8004674:	2102      	movs	r1, #2
 8004676:	2002      	movs	r0, #2
 8004678:	f003 f986 	bl	8007988 <lcd_print>
}
 800467c:	e032      	b.n	80046e4 <lcdUpdate+0x94>
	} else if(y==3) {
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d105      	bne.n	8004690 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <lcdUpdate+0x9c>)
 8004686:	2103      	movs	r1, #3
 8004688:	2002      	movs	r0, #2
 800468a:	f003 f97d 	bl	8007988 <lcd_print>
}
 800468e:	e029      	b.n	80046e4 <lcdUpdate+0x94>
	} else if(y==4) {
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d105      	bne.n	80046a2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004696:	4a15      	ldr	r2, [pc, #84]	@ (80046ec <lcdUpdate+0x9c>)
 8004698:	2104      	movs	r1, #4
 800469a:	2002      	movs	r0, #2
 800469c:	f003 f974 	bl	8007988 <lcd_print>
}
 80046a0:	e020      	b.n	80046e4 <lcdUpdate+0x94>
	} else if(y==5) {
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	2b05      	cmp	r3, #5
 80046a6:	d105      	bne.n	80046b4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80046a8:	4a10      	ldr	r2, [pc, #64]	@ (80046ec <lcdUpdate+0x9c>)
 80046aa:	2105      	movs	r1, #5
 80046ac:	2002      	movs	r0, #2
 80046ae:	f003 f96b 	bl	8007988 <lcd_print>
}
 80046b2:	e017      	b.n	80046e4 <lcdUpdate+0x94>
	} else if(y==6) {
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d105      	bne.n	80046c6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80046ba:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <lcdUpdate+0x9c>)
 80046bc:	2106      	movs	r1, #6
 80046be:	2002      	movs	r0, #2
 80046c0:	f003 f962 	bl	8007988 <lcd_print>
}
 80046c4:	e00e      	b.n	80046e4 <lcdUpdate+0x94>
	} else if (y==7) {
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b07      	cmp	r3, #7
 80046ca:	d10b      	bne.n	80046e4 <lcdUpdate+0x94>
		lcd_clear();
 80046cc:	f003 f988 	bl	80079e0 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80046d0:	4a07      	ldr	r2, [pc, #28]	@ (80046f0 <lcdUpdate+0xa0>)
 80046d2:	2101      	movs	r1, #1
 80046d4:	2001      	movs	r0, #1
 80046d6:	f003 f957 	bl	8007988 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 80046da:	4a06      	ldr	r2, [pc, #24]	@ (80046f4 <lcdUpdate+0xa4>)
 80046dc:	2101      	movs	r1, #1
 80046de:	2002      	movs	r0, #2
 80046e0:	f003 f952 	bl	8007988 <lcd_print>
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	0800d818 	.word	0x0800d818
 80046f0:	200000a0 	.word	0x200000a0
 80046f4:	200000b0 	.word	0x200000b0

080046f8 <bekle>:

void bekle() {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
	timer1=millis;
 80046fc:	4b47      	ldr	r3, [pc, #284]	@ (800481c <bekle+0x124>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a47      	ldr	r2, [pc, #284]	@ (8004820 <bekle+0x128>)
 8004702:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004704:	e002      	b.n	800470c <bekle+0x14>
    	butonKontrol = 1;
 8004706:	4b47      	ldr	r3, [pc, #284]	@ (8004824 <bekle+0x12c>)
 8004708:	2201      	movs	r2, #1
 800470a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800470c:	2101      	movs	r1, #1
 800470e:	4846      	ldr	r0, [pc, #280]	@ (8004828 <bekle+0x130>)
 8004710:	f004 fc64 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004714:	4603      	mov	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d109      	bne.n	800472e <bekle+0x36>
 800471a:	4b40      	ldr	r3, [pc, #256]	@ (800481c <bekle+0x124>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b40      	ldr	r3, [pc, #256]	@ (8004820 <bekle+0x128>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d0ef      	beq.n	8004706 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004726:	e002      	b.n	800472e <bekle+0x36>
    	butonKontrol = 1;
 8004728:	4b3e      	ldr	r3, [pc, #248]	@ (8004824 <bekle+0x12c>)
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800472e:	2108      	movs	r1, #8
 8004730:	483e      	ldr	r0, [pc, #248]	@ (800482c <bekle+0x134>)
 8004732:	f004 fc53 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d109      	bne.n	8004750 <bekle+0x58>
 800473c:	4b37      	ldr	r3, [pc, #220]	@ (800481c <bekle+0x124>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b37      	ldr	r3, [pc, #220]	@ (8004820 <bekle+0x128>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d0ef      	beq.n	8004728 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004748:	e002      	b.n	8004750 <bekle+0x58>
    	butonKontrol = 1;
 800474a:	4b36      	ldr	r3, [pc, #216]	@ (8004824 <bekle+0x12c>)
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004750:	2102      	movs	r1, #2
 8004752:	4835      	ldr	r0, [pc, #212]	@ (8004828 <bekle+0x130>)
 8004754:	f004 fc42 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d109      	bne.n	8004772 <bekle+0x7a>
 800475e:	4b2f      	ldr	r3, [pc, #188]	@ (800481c <bekle+0x124>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b2f      	ldr	r3, [pc, #188]	@ (8004820 <bekle+0x128>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d0ef      	beq.n	800474a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800476a:	e002      	b.n	8004772 <bekle+0x7a>
    	butonKontrol = 1;
 800476c:	4b2d      	ldr	r3, [pc, #180]	@ (8004824 <bekle+0x12c>)
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004772:	2104      	movs	r1, #4
 8004774:	482c      	ldr	r0, [pc, #176]	@ (8004828 <bekle+0x130>)
 8004776:	f004 fc31 	bl	8008fdc <HAL_GPIO_ReadPin>
 800477a:	4603      	mov	r3, r0
 800477c:	2b01      	cmp	r3, #1
 800477e:	d109      	bne.n	8004794 <bekle+0x9c>
 8004780:	4b26      	ldr	r3, [pc, #152]	@ (800481c <bekle+0x124>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b26      	ldr	r3, [pc, #152]	@ (8004820 <bekle+0x128>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d0ef      	beq.n	800476c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800478c:	e002      	b.n	8004794 <bekle+0x9c>
    	butonKontrol = 1;
 800478e:	4b25      	ldr	r3, [pc, #148]	@ (8004824 <bekle+0x12c>)
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004794:	2108      	movs	r1, #8
 8004796:	4824      	ldr	r0, [pc, #144]	@ (8004828 <bekle+0x130>)
 8004798:	f004 fc20 	bl	8008fdc <HAL_GPIO_ReadPin>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d109      	bne.n	80047b6 <bekle+0xbe>
 80047a2:	4b1e      	ldr	r3, [pc, #120]	@ (800481c <bekle+0x124>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004820 <bekle+0x128>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d0ef      	beq.n	800478e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80047ae:	e002      	b.n	80047b6 <bekle+0xbe>
    	butonKontrol = 1;
 80047b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004824 <bekle+0x12c>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	481c      	ldr	r0, [pc, #112]	@ (800482c <bekle+0x134>)
 80047ba:	f004 fc0f 	bl	8008fdc <HAL_GPIO_ReadPin>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <bekle+0xe0>
 80047c4:	4b15      	ldr	r3, [pc, #84]	@ (800481c <bekle+0x124>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	4b15      	ldr	r3, [pc, #84]	@ (8004820 <bekle+0x128>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d0ef      	beq.n	80047b0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80047d0:	e002      	b.n	80047d8 <bekle+0xe0>
    	butonKontrol = 1;
 80047d2:	4b14      	ldr	r3, [pc, #80]	@ (8004824 <bekle+0x12c>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80047d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047dc:	4813      	ldr	r0, [pc, #76]	@ (800482c <bekle+0x134>)
 80047de:	f004 fbfd 	bl	8008fdc <HAL_GPIO_ReadPin>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <bekle+0x104>
 80047e8:	4b0c      	ldr	r3, [pc, #48]	@ (800481c <bekle+0x124>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <bekle+0x128>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d0ee      	beq.n	80047d2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80047f4:	e002      	b.n	80047fc <bekle+0x104>
    	butonKontrol = 1;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <bekle+0x12c>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80047fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004800:	480a      	ldr	r0, [pc, #40]	@ (800482c <bekle+0x134>)
 8004802:	f004 fbeb 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d105      	bne.n	8004818 <bekle+0x120>
 800480c:	4b03      	ldr	r3, [pc, #12]	@ (800481c <bekle+0x124>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <bekle+0x128>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d0ee      	beq.n	80047f6 <bekle+0xfe>
    }

}
 8004818:	bf00      	nop
 800481a:	bd80      	pop	{r7, pc}
 800481c:	200001e8 	.word	0x200001e8
 8004820:	200001f0 	.word	0x200001f0
 8004824:	2000023f 	.word	0x2000023f
 8004828:	40010800 	.word	0x40010800
 800482c:	40011000 	.word	0x40011000

08004830 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004834:	2101      	movs	r1, #1
 8004836:	4815      	ldr	r0, [pc, #84]	@ (800488c <buttonCheck+0x5c>)
 8004838:	f004 fbd0 	bl	8008fdc <HAL_GPIO_ReadPin>
 800483c:	4603      	mov	r3, r0
 800483e:	2b01      	cmp	r3, #1
 8004840:	d01b      	beq.n	800487a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004842:	2108      	movs	r1, #8
 8004844:	4812      	ldr	r0, [pc, #72]	@ (8004890 <buttonCheck+0x60>)
 8004846:	f004 fbc9 	bl	8008fdc <HAL_GPIO_ReadPin>
 800484a:	4603      	mov	r3, r0
 800484c:	2b01      	cmp	r3, #1
 800484e:	d014      	beq.n	800487a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004850:	2102      	movs	r1, #2
 8004852:	480e      	ldr	r0, [pc, #56]	@ (800488c <buttonCheck+0x5c>)
 8004854:	f004 fbc2 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d00d      	beq.n	800487a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800485e:	2104      	movs	r1, #4
 8004860:	480a      	ldr	r0, [pc, #40]	@ (800488c <buttonCheck+0x5c>)
 8004862:	f004 fbbb 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004866:	4603      	mov	r3, r0
 8004868:	2b01      	cmp	r3, #1
 800486a:	d006      	beq.n	800487a <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 800486c:	2108      	movs	r1, #8
 800486e:	4807      	ldr	r0, [pc, #28]	@ (800488c <buttonCheck+0x5c>)
 8004870:	f004 fbb4 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d104      	bne.n	8004884 <buttonCheck+0x54>
		backLightTimer = 0;
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <buttonCheck+0x64>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
		return 1;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <buttonCheck+0x56>
	}
	return 0;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40010800 	.word	0x40010800
 8004890:	40011000 	.word	0x40011000
 8004894:	20000204 	.word	0x20000204

08004898 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800489c:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <checkLCDBacklight+0x24>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <checkLCDBacklight+0x28>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b3b      	cmp	r3, #59	@ 0x3b
 80048a8:	d903      	bls.n	80048b2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f003 f8b8 	bl	8007a20 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80048b0:	e002      	b.n	80048b8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80048b2:	2001      	movs	r0, #1
 80048b4:	f003 f8b4 	bl	8007a20 <lcd_backlight>
}
 80048b8:	bf00      	nop
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	200001e8 	.word	0x200001e8
 80048c0:	20000204 	.word	0x20000204

080048c4 <checkBasincSalteri>:

void checkBasincSalteri() {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80048c8:	4b13      	ldr	r3, [pc, #76]	@ (8004918 <checkBasincSalteri+0x54>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <checkBasincSalteri+0x12>
		basincVar=1;
 80048d0:	4b12      	ldr	r3, [pc, #72]	@ (800491c <checkBasincSalteri+0x58>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80048d6:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <checkBasincSalteri+0x54>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d119      	bne.n	8004912 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80048de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048e2:	480f      	ldr	r0, [pc, #60]	@ (8004920 <checkBasincSalteri+0x5c>)
 80048e4:	f004 fb7a 	bl	8008fdc <HAL_GPIO_ReadPin>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <checkBasincSalteri+0x60>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <checkBasincSalteri+0x64>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d90a      	bls.n	8004912 <checkBasincSalteri+0x4e>
				basincVar=1;
 80048fc:	4b07      	ldr	r3, [pc, #28]	@ (800491c <checkBasincSalteri+0x58>)
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004902:	e006      	b.n	8004912 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004904:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <checkBasincSalteri+0x60>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a07      	ldr	r2, [pc, #28]	@ (8004928 <checkBasincSalteri+0x64>)
 800490a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 800490c:	4b03      	ldr	r3, [pc, #12]	@ (800491c <checkBasincSalteri+0x58>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000217 	.word	0x20000217
 800491c:	20000213 	.word	0x20000213
 8004920:	40011000 	.word	0x40011000
 8004924:	200001e8 	.word	0x200001e8
 8004928:	20000200 	.word	0x20000200

0800492c <checkBasGonder>:

void checkBasGonder() {
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <checkBasGonder+0x74>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10b      	bne.n	8004950 <checkBasGonder+0x24>
 8004938:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <checkBasGonder+0x78>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <checkBasGonder+0x24>
 8004940:	4b19      	ldr	r3, [pc, #100]	@ (80049a8 <checkBasGonder+0x7c>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004948:	4b18      	ldr	r3, [pc, #96]	@ (80049ac <checkBasGonder+0x80>)
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e009      	b.n	8004964 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004950:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <checkBasGonder+0x78>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	f083 0301 	eor.w	r3, r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800495e:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <checkBasGonder+0x80>)
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004964:	4b0e      	ldr	r3, [pc, #56]	@ (80049a0 <checkBasGonder+0x74>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d10b      	bne.n	8004984 <checkBasGonder+0x58>
 800496c:	4b10      	ldr	r3, [pc, #64]	@ (80049b0 <checkBasGonder+0x84>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <checkBasGonder+0x58>
 8004974:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <checkBasGonder+0x7c>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800497c:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <checkBasGonder+0x88>)
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004982:	e009      	b.n	8004998 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004984:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <checkBasGonder+0x84>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f083 0301 	eor.w	r3, r3, #1
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004992:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <checkBasGonder+0x88>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	20000211 	.word	0x20000211
 80049a4:	20000245 	.word	0x20000245
 80049a8:	2000021f 	.word	0x2000021f
 80049ac:	2000024c 	.word	0x2000024c
 80049b0:	20000248 	.word	0x20000248
 80049b4:	2000024d 	.word	0x2000024d

080049b8 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80049bc:	4b24      	ldr	r3, [pc, #144]	@ (8004a50 <checkKapiSecimleri+0x98>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80049c4:	4b23      	ldr	r3, [pc, #140]	@ (8004a54 <checkKapiSecimleri+0x9c>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80049ca:	4b21      	ldr	r3, [pc, #132]	@ (8004a50 <checkKapiSecimleri+0x98>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10e      	bne.n	80049f0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80049d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049d6:	4820      	ldr	r0, [pc, #128]	@ (8004a58 <checkKapiSecimleri+0xa0>)
 80049d8:	f004 fb00 	bl	8008fdc <HAL_GPIO_ReadPin>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80049e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004a54 <checkKapiSecimleri+0x9c>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e002      	b.n	80049f0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004a54 <checkKapiSecimleri+0x9c>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80049f0:	4b17      	ldr	r3, [pc, #92]	@ (8004a50 <checkKapiSecimleri+0x98>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d10e      	bne.n	8004a16 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80049f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80049fc:	4816      	ldr	r0, [pc, #88]	@ (8004a58 <checkKapiSecimleri+0xa0>)
 80049fe:	f004 faed 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d103      	bne.n	8004a10 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004a08:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <checkKapiSecimleri+0x9c>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e002      	b.n	8004a16 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004a10:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <checkKapiSecimleri+0x9c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004a16:	4b0e      	ldr	r3, [pc, #56]	@ (8004a50 <checkKapiSecimleri+0x98>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d116      	bne.n	8004a4c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004a1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a22:	480d      	ldr	r0, [pc, #52]	@ (8004a58 <checkKapiSecimleri+0xa0>)
 8004a24:	f004 fada 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <checkKapiSecimleri+0x8e>
 8004a2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a32:	4809      	ldr	r0, [pc, #36]	@ (8004a58 <checkKapiSecimleri+0xa0>)
 8004a34:	f004 fad2 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004a3e:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <checkKapiSecimleri+0x9c>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004a44:	e002      	b.n	8004a4c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004a46:	4b03      	ldr	r3, [pc, #12]	@ (8004a54 <checkKapiSecimleri+0x9c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000218 	.word	0x20000218
 8004a54:	20000263 	.word	0x20000263
 8004a58:	40010800 	.word	0x40010800

08004a5c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004a60:	4b62      	ldr	r3, [pc, #392]	@ (8004bec <checkAktifCalisma+0x190>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f041 833e 	bne.w	80060e6 <checkAktifCalisma+0x168a>
 8004a6a:	4b61      	ldr	r3, [pc, #388]	@ (8004bf0 <checkAktifCalisma+0x194>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f041 8339 	bne.w	80060e6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004a74:	4b5f      	ldr	r3, [pc, #380]	@ (8004bf4 <checkAktifCalisma+0x198>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11a      	bne.n	8004ab2 <checkAktifCalisma+0x56>
 8004a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8004bf8 <checkAktifCalisma+0x19c>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <checkAktifCalisma+0x56>
 8004a84:	4b5d      	ldr	r3, [pc, #372]	@ (8004bfc <checkAktifCalisma+0x1a0>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <checkAktifCalisma+0x46>
 8004a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8004c00 <checkAktifCalisma+0x1a4>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	f083 0301 	eor.w	r3, r3, #1
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <checkAktifCalisma+0x46>
 8004a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8004c04 <checkAktifCalisma+0x1a8>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d007      	beq.n	8004ab2 <checkAktifCalisma+0x56>
 8004aa2:	4b59      	ldr	r3, [pc, #356]	@ (8004c08 <checkAktifCalisma+0x1ac>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <checkAktifCalisma+0x80>
 8004aaa:	4b58      	ldr	r3, [pc, #352]	@ (8004c0c <checkAktifCalisma+0x1b0>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d114      	bne.n	8004adc <checkAktifCalisma+0x80>
 8004ab2:	4b57      	ldr	r3, [pc, #348]	@ (8004c10 <checkAktifCalisma+0x1b4>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d010      	beq.n	8004adc <checkAktifCalisma+0x80>
 8004aba:	4b56      	ldr	r3, [pc, #344]	@ (8004c14 <checkAktifCalisma+0x1b8>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00c      	beq.n	8004adc <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ac8:	4853      	ldr	r0, [pc, #332]	@ (8004c18 <checkAktifCalisma+0x1bc>)
 8004aca:	f004 fa9e 	bl	800900a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004ace:	4b53      	ldr	r3, [pc, #332]	@ (8004c1c <checkAktifCalisma+0x1c0>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004ad4:	4b52      	ldr	r3, [pc, #328]	@ (8004c20 <checkAktifCalisma+0x1c4>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	e008      	b.n	8004aee <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004adc:	2200      	movs	r2, #0
 8004ade:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ae2:	484d      	ldr	r0, [pc, #308]	@ (8004c18 <checkAktifCalisma+0x1bc>)
 8004ae4:	f004 fa91 	bl	800900a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8004c1c <checkAktifCalisma+0x1c0>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004aee:	4b40      	ldr	r3, [pc, #256]	@ (8004bf0 <checkAktifCalisma+0x194>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d160      	bne.n	8004bb8 <checkAktifCalisma+0x15c>
 8004af6:	4b46      	ldr	r3, [pc, #280]	@ (8004c10 <checkAktifCalisma+0x1b4>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d05c      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
 8004afe:	4b45      	ldr	r3, [pc, #276]	@ (8004c14 <checkAktifCalisma+0x1b8>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d058      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b0a:	4843      	ldr	r0, [pc, #268]	@ (8004c18 <checkAktifCalisma+0x1bc>)
 8004b0c:	f004 fa66 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <checkAktifCalisma+0xc2>
 8004b16:	4b43      	ldr	r3, [pc, #268]	@ (8004c24 <checkAktifCalisma+0x1c8>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d04c      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b1e:	2102      	movs	r1, #2
 8004b20:	4841      	ldr	r0, [pc, #260]	@ (8004c28 <checkAktifCalisma+0x1cc>)
 8004b22:	f004 fa5b 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d145      	bne.n	8004bb8 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c2c <checkAktifCalisma+0x1d0>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d041      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004b34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b38:	4837      	ldr	r0, [pc, #220]	@ (8004c18 <checkAktifCalisma+0x1bc>)
 8004b3a:	f004 fa4f 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10e      	bne.n	8004b62 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004b44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b48:	4833      	ldr	r0, [pc, #204]	@ (8004c18 <checkAktifCalisma+0x1bc>)
 8004b4a:	f004 fa47 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d106      	bne.n	8004b62 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004b54:	2140      	movs	r1, #64	@ 0x40
 8004b56:	4834      	ldr	r0, [pc, #208]	@ (8004c28 <checkAktifCalisma+0x1cc>)
 8004b58:	f004 fa40 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d003      	beq.n	8004b6a <checkAktifCalisma+0x10e>
 8004b62:	4b24      	ldr	r3, [pc, #144]	@ (8004bf4 <checkAktifCalisma+0x198>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d026      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004b6a:	4b24      	ldr	r3, [pc, #144]	@ (8004bfc <checkAktifCalisma+0x1a0>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	f083 0301 	eor.w	r3, r3, #1
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01f      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004b78:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <checkAktifCalisma+0x19c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	f083 0301 	eor.w	r3, r3, #1
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d018      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004b86:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <checkAktifCalisma+0x1ac>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	f083 0301 	eor.w	r3, r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d011      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004b94:	4b26      	ldr	r3, [pc, #152]	@ (8004c30 <checkAktifCalisma+0x1d4>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	f083 0301 	eor.w	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004ba2:	4b24      	ldr	r3, [pc, #144]	@ (8004c34 <checkAktifCalisma+0x1d8>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	f083 0301 	eor.w	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004bb0:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <checkAktifCalisma+0x198>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e002      	b.n	8004bbe <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <checkAktifCalisma+0x198>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <checkAktifCalisma+0x198>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d03a      	beq.n	8004c3c <checkAktifCalisma+0x1e0>
 8004bc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004bca:	4817      	ldr	r0, [pc, #92]	@ (8004c28 <checkAktifCalisma+0x1cc>)
 8004bcc:	f004 fa06 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d132      	bne.n	8004c3c <checkAktifCalisma+0x1e0>
 8004bd6:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <checkAktifCalisma+0x1dc>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02e      	beq.n	8004c3c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004bde:	2201      	movs	r2, #1
 8004be0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004be4:	480c      	ldr	r0, [pc, #48]	@ (8004c18 <checkAktifCalisma+0x1bc>)
 8004be6:	f004 fa10 	bl	800900a <HAL_GPIO_WritePin>
 8004bea:	e02d      	b.n	8004c48 <checkAktifCalisma+0x1ec>
 8004bec:	2000022e 	.word	0x2000022e
 8004bf0:	2000022d 	.word	0x2000022d
 8004bf4:	20000245 	.word	0x20000245
 8004bf8:	20000246 	.word	0x20000246
 8004bfc:	20000248 	.word	0x20000248
 8004c00:	20000240 	.word	0x20000240
 8004c04:	20000223 	.word	0x20000223
 8004c08:	20000247 	.word	0x20000247
 8004c0c:	20000222 	.word	0x20000222
 8004c10:	20000262 	.word	0x20000262
 8004c14:	20000263 	.word	0x20000263
 8004c18:	40010c00 	.word	0x40010c00
 8004c1c:	20000264 	.word	0x20000264
 8004c20:	2000024f 	.word	0x2000024f
 8004c24:	2000024c 	.word	0x2000024c
 8004c28:	40011000 	.word	0x40011000
 8004c2c:	20000213 	.word	0x20000213
 8004c30:	2000024a 	.word	0x2000024a
 8004c34:	2000024b 	.word	0x2000024b
 8004c38:	2000021e 	.word	0x2000021e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c42:	4860      	ldr	r0, [pc, #384]	@ (8004dc4 <checkAktifCalisma+0x368>)
 8004c44:	f004 f9e1 	bl	800900a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004c48:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc8 <checkAktifCalisma+0x36c>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d013      	beq.n	8004c78 <checkAktifCalisma+0x21c>
 8004c50:	4b5e      	ldr	r3, [pc, #376]	@ (8004dcc <checkAktifCalisma+0x370>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d007      	beq.n	8004c68 <checkAktifCalisma+0x20c>
 8004c58:	4b5c      	ldr	r3, [pc, #368]	@ (8004dcc <checkAktifCalisma+0x370>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d003      	beq.n	8004c68 <checkAktifCalisma+0x20c>
 8004c60:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd0 <checkAktifCalisma+0x374>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d107      	bne.n	8004c78 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004c68:	2201      	movs	r2, #1
 8004c6a:	2104      	movs	r1, #4
 8004c6c:	4855      	ldr	r0, [pc, #340]	@ (8004dc4 <checkAktifCalisma+0x368>)
 8004c6e:	f004 f9cc 	bl	800900a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004c72:	4b58      	ldr	r3, [pc, #352]	@ (8004dd4 <checkAktifCalisma+0x378>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004c78:	4b56      	ldr	r3, [pc, #344]	@ (8004dd4 <checkAktifCalisma+0x378>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02f      	beq.n	8004ce0 <checkAktifCalisma+0x284>
 8004c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c84:	484f      	ldr	r0, [pc, #316]	@ (8004dc4 <checkAktifCalisma+0x368>)
 8004c86:	f004 f9a9 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d106      	bne.n	8004c9e <checkAktifCalisma+0x242>
 8004c90:	4b51      	ldr	r3, [pc, #324]	@ (8004dd8 <checkAktifCalisma+0x37c>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	f083 0301 	eor.w	r3, r3, #1
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <checkAktifCalisma+0x250>
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	484e      	ldr	r0, [pc, #312]	@ (8004ddc <checkAktifCalisma+0x380>)
 8004ca2:	f004 f99b 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d119      	bne.n	8004ce0 <checkAktifCalisma+0x284>
 8004cac:	4b4c      	ldr	r3, [pc, #304]	@ (8004de0 <checkAktifCalisma+0x384>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d015      	beq.n	8004ce0 <checkAktifCalisma+0x284>
 8004cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8004de4 <checkAktifCalisma+0x388>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d011      	beq.n	8004ce0 <checkAktifCalisma+0x284>
 8004cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004de8 <checkAktifCalisma+0x38c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <checkAktifCalisma+0x284>
 8004cc4:	4b49      	ldr	r3, [pc, #292]	@ (8004dec <checkAktifCalisma+0x390>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f083 0301 	eor.w	r3, r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <checkAktifCalisma+0x284>
			timer2=millis;
 8004cd2:	4b47      	ldr	r3, [pc, #284]	@ (8004df0 <checkAktifCalisma+0x394>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a47      	ldr	r2, [pc, #284]	@ (8004df4 <checkAktifCalisma+0x398>)
 8004cd8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004cda:	4b44      	ldr	r3, [pc, #272]	@ (8004dec <checkAktifCalisma+0x390>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004ce0:	4b43      	ldr	r3, [pc, #268]	@ (8004df0 <checkAktifCalisma+0x394>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b43      	ldr	r3, [pc, #268]	@ (8004df4 <checkAktifCalisma+0x398>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	4a43      	ldr	r2, [pc, #268]	@ (8004df8 <checkAktifCalisma+0x39c>)
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d303      	bcc.n	8004cfa <checkAktifCalisma+0x29e>
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dec <checkAktifCalisma+0x390>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d111      	bne.n	8004d1e <checkAktifCalisma+0x2c2>
 8004cfa:	4b39      	ldr	r3, [pc, #228]	@ (8004de0 <checkAktifCalisma+0x384>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f083 0301 	eor.w	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <checkAktifCalisma+0x2c2>
 8004d08:	4b36      	ldr	r3, [pc, #216]	@ (8004de4 <checkAktifCalisma+0x388>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f083 0301 	eor.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <checkAktifCalisma+0x2c2>
 8004d16:	4b34      	ldr	r3, [pc, #208]	@ (8004de8 <checkAktifCalisma+0x38c>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2104      	movs	r1, #4
 8004d22:	4828      	ldr	r0, [pc, #160]	@ (8004dc4 <checkAktifCalisma+0x368>)
 8004d24:	f004 f971 	bl	800900a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004d28:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd4 <checkAktifCalisma+0x378>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004dec <checkAktifCalisma+0x390>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004d34:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <checkAktifCalisma+0x3a0>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004d3c:	4b30      	ldr	r3, [pc, #192]	@ (8004e00 <checkAktifCalisma+0x3a4>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004d42:	4b2e      	ldr	r3, [pc, #184]	@ (8004dfc <checkAktifCalisma+0x3a0>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d116      	bne.n	8004d78 <checkAktifCalisma+0x31c>
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e04 <checkAktifCalisma+0x3a8>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d112      	bne.n	8004d78 <checkAktifCalisma+0x31c>
 8004d52:	2101      	movs	r1, #1
 8004d54:	4821      	ldr	r0, [pc, #132]	@ (8004ddc <checkAktifCalisma+0x380>)
 8004d56:	f004 f941 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <checkAktifCalisma+0x31c>
 8004d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d64:	4817      	ldr	r0, [pc, #92]	@ (8004dc4 <checkAktifCalisma+0x368>)
 8004d66:	f004 f939 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004d70:	4b23      	ldr	r3, [pc, #140]	@ (8004e00 <checkAktifCalisma+0x3a4>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e011      	b.n	8004d9c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004d78:	4b20      	ldr	r3, [pc, #128]	@ (8004dfc <checkAktifCalisma+0x3a0>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10d      	bne.n	8004d9c <checkAktifCalisma+0x340>
 8004d80:	2101      	movs	r1, #1
 8004d82:	4816      	ldr	r0, [pc, #88]	@ (8004ddc <checkAktifCalisma+0x380>)
 8004d84:	f004 f92a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d106      	bne.n	8004d9c <checkAktifCalisma+0x340>
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e04 <checkAktifCalisma+0x3a8>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004d96:	4b1a      	ldr	r3, [pc, #104]	@ (8004e00 <checkAktifCalisma+0x3a4>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004d9c:	4b17      	ldr	r3, [pc, #92]	@ (8004dfc <checkAktifCalisma+0x3a0>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d134      	bne.n	8004e0e <checkAktifCalisma+0x3b2>
 8004da4:	4b17      	ldr	r3, [pc, #92]	@ (8004e04 <checkAktifCalisma+0x3a8>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d130      	bne.n	8004e0e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004dac:	2101      	movs	r1, #1
 8004dae:	480b      	ldr	r0, [pc, #44]	@ (8004ddc <checkAktifCalisma+0x380>)
 8004db0:	f004 f914 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d126      	bne.n	8004e08 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004dba:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <checkAktifCalisma+0x3a4>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e025      	b.n	8004e0e <checkAktifCalisma+0x3b2>
 8004dc2:	bf00      	nop
 8004dc4:	40010c00 	.word	0x40010c00
 8004dc8:	20000245 	.word	0x20000245
 8004dcc:	2000021f 	.word	0x2000021f
 8004dd0:	20000223 	.word	0x20000223
 8004dd4:	20000249 	.word	0x20000249
 8004dd8:	2000024c 	.word	0x2000024c
 8004ddc:	40011000 	.word	0x40011000
 8004de0:	20000262 	.word	0x20000262
 8004de4:	20000263 	.word	0x20000263
 8004de8:	20000213 	.word	0x20000213
 8004dec:	20000241 	.word	0x20000241
 8004df0:	200001e8 	.word	0x200001e8
 8004df4:	200001f4 	.word	0x200001f4
 8004df8:	20000224 	.word	0x20000224
 8004dfc:	20000214 	.word	0x20000214
 8004e00:	20000267 	.word	0x20000267
 8004e04:	20000211 	.word	0x20000211
			} else {
				cerceveVar=0;
 8004e08:	4b7f      	ldr	r3, [pc, #508]	@ (8005008 <checkAktifCalisma+0x5ac>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800500c <checkAktifCalisma+0x5b0>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d17c      	bne.n	8004f10 <checkAktifCalisma+0x4b4>
 8004e16:	4b7e      	ldr	r3, [pc, #504]	@ (8005010 <checkAktifCalisma+0x5b4>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d078      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
 8004e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8005014 <checkAktifCalisma+0x5b8>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d074      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004e26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e2a:	487b      	ldr	r0, [pc, #492]	@ (8005018 <checkAktifCalisma+0x5bc>)
 8004e2c:	f004 f8d6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <checkAktifCalisma+0x3e2>
 8004e36:	4b79      	ldr	r3, [pc, #484]	@ (800501c <checkAktifCalisma+0x5c0>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d068      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004e3e:	4b72      	ldr	r3, [pc, #456]	@ (8005008 <checkAktifCalisma+0x5ac>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d064      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
 8004e46:	4b76      	ldr	r3, [pc, #472]	@ (8005020 <checkAktifCalisma+0x5c4>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f083 0301 	eor.w	r3, r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d05d      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004e54:	2104      	movs	r1, #4
 8004e56:	4873      	ldr	r0, [pc, #460]	@ (8005024 <checkAktifCalisma+0x5c8>)
 8004e58:	f004 f8c0 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <checkAktifCalisma+0x40e>
 8004e62:	4b71      	ldr	r3, [pc, #452]	@ (8005028 <checkAktifCalisma+0x5cc>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d152      	bne.n	8004f10 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004e6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e6e:	486a      	ldr	r0, [pc, #424]	@ (8005018 <checkAktifCalisma+0x5bc>)
 8004e70:	f004 f8b4 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10e      	bne.n	8004e98 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e7e:	4866      	ldr	r0, [pc, #408]	@ (8005018 <checkAktifCalisma+0x5bc>)
 8004e80:	f004 f8ac 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d106      	bne.n	8004e98 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004e8a:	2140      	movs	r1, #64	@ 0x40
 8004e8c:	4865      	ldr	r0, [pc, #404]	@ (8005024 <checkAktifCalisma+0x5c8>)
 8004e8e:	f004 f8a5 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d003      	beq.n	8004ea0 <checkAktifCalisma+0x444>
 8004e98:	4b64      	ldr	r3, [pc, #400]	@ (800502c <checkAktifCalisma+0x5d0>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d037      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004ea0:	4b63      	ldr	r3, [pc, #396]	@ (8005030 <checkAktifCalisma+0x5d4>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d030      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8004eae:	4b61      	ldr	r3, [pc, #388]	@ (8005034 <checkAktifCalisma+0x5d8>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	f083 0301 	eor.w	r3, r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d029      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8004ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8005038 <checkAktifCalisma+0x5dc>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f083 0301 	eor.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d022      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8004eca:	4b5c      	ldr	r3, [pc, #368]	@ (800503c <checkAktifCalisma+0x5e0>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	f083 0301 	eor.w	r3, r3, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01b      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8004ed8:	4b59      	ldr	r3, [pc, #356]	@ (8005040 <checkAktifCalisma+0x5e4>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f083 0301 	eor.w	r3, r3, #1
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d014      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8004ee6:	4b57      	ldr	r3, [pc, #348]	@ (8005044 <checkAktifCalisma+0x5e8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f083 0301 	eor.w	r3, r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4847      	ldr	r0, [pc, #284]	@ (8005018 <checkAktifCalisma+0x5bc>)
 8004efa:	f004 f886 	bl	800900a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8004efe:	4b4b      	ldr	r3, [pc, #300]	@ (800502c <checkAktifCalisma+0x5d0>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8004f04:	4b50      	ldr	r3, [pc, #320]	@ (8005048 <checkAktifCalisma+0x5ec>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8004f0a:	4b50      	ldr	r3, [pc, #320]	@ (800504c <checkAktifCalisma+0x5f0>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004f10:	4b46      	ldr	r3, [pc, #280]	@ (800502c <checkAktifCalisma+0x5d0>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d033      	beq.n	8004f80 <checkAktifCalisma+0x524>
 8004f18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f1c:	483e      	ldr	r0, [pc, #248]	@ (8005018 <checkAktifCalisma+0x5bc>)
 8004f1e:	f004 f85d 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d106      	bne.n	8004f36 <checkAktifCalisma+0x4da>
 8004f28:	4b3c      	ldr	r3, [pc, #240]	@ (800501c <checkAktifCalisma+0x5c0>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f083 0301 	eor.w	r3, r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <checkAktifCalisma+0x4f0>
 8004f36:	2104      	movs	r1, #4
 8004f38:	483a      	ldr	r0, [pc, #232]	@ (8005024 <checkAktifCalisma+0x5c8>)
 8004f3a:	f004 f84f 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d11d      	bne.n	8004f80 <checkAktifCalisma+0x524>
 8004f44:	4b38      	ldr	r3, [pc, #224]	@ (8005028 <checkAktifCalisma+0x5cc>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d019      	beq.n	8004f80 <checkAktifCalisma+0x524>
 8004f4c:	4b30      	ldr	r3, [pc, #192]	@ (8005010 <checkAktifCalisma+0x5b4>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <checkAktifCalisma+0x524>
 8004f54:	4b2f      	ldr	r3, [pc, #188]	@ (8005014 <checkAktifCalisma+0x5b8>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d011      	beq.n	8004f80 <checkAktifCalisma+0x524>
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005008 <checkAktifCalisma+0x5ac>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00d      	beq.n	8004f80 <checkAktifCalisma+0x524>
 8004f64:	4b3a      	ldr	r3, [pc, #232]	@ (8005050 <checkAktifCalisma+0x5f4>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f083 0301 	eor.w	r3, r3, #1
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d006      	beq.n	8004f80 <checkAktifCalisma+0x524>
			timer2=millis;
 8004f72:	4b38      	ldr	r3, [pc, #224]	@ (8005054 <checkAktifCalisma+0x5f8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a38      	ldr	r2, [pc, #224]	@ (8005058 <checkAktifCalisma+0x5fc>)
 8004f78:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8004f7a:	4b35      	ldr	r3, [pc, #212]	@ (8005050 <checkAktifCalisma+0x5f4>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004f80:	4b34      	ldr	r3, [pc, #208]	@ (8005054 <checkAktifCalisma+0x5f8>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b34      	ldr	r3, [pc, #208]	@ (8005058 <checkAktifCalisma+0x5fc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	4a34      	ldr	r2, [pc, #208]	@ (800505c <checkAktifCalisma+0x600>)
 8004f8c:	7812      	ldrb	r2, [r2, #0]
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d303      	bcc.n	8004f9a <checkAktifCalisma+0x53e>
 8004f92:	4b2f      	ldr	r3, [pc, #188]	@ (8005050 <checkAktifCalisma+0x5f4>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d114      	bne.n	8004fc4 <checkAktifCalisma+0x568>
 8004f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005010 <checkAktifCalisma+0x5b4>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	f083 0301 	eor.w	r3, r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10d      	bne.n	8004fc4 <checkAktifCalisma+0x568>
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005014 <checkAktifCalisma+0x5b8>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f083 0301 	eor.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <checkAktifCalisma+0x568>
 8004fb6:	4b14      	ldr	r3, [pc, #80]	@ (8005008 <checkAktifCalisma+0x5ac>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f083 0301 	eor.w	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4813      	ldr	r0, [pc, #76]	@ (8005018 <checkAktifCalisma+0x5bc>)
 8004fca:	f004 f81e 	bl	800900a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8004fce:	4b17      	ldr	r3, [pc, #92]	@ (800502c <checkAktifCalisma+0x5d0>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <checkAktifCalisma+0x5f4>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004fda:	4b14      	ldr	r3, [pc, #80]	@ (800502c <checkAktifCalisma+0x5d0>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d040      	beq.n	8005064 <checkAktifCalisma+0x608>
 8004fe2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fe6:	480f      	ldr	r0, [pc, #60]	@ (8005024 <checkAktifCalisma+0x5c8>)
 8004fe8:	f003 fff8 	bl	8008fdc <HAL_GPIO_ReadPin>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d138      	bne.n	8005064 <checkAktifCalisma+0x608>
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8005060 <checkAktifCalisma+0x604>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d034      	beq.n	8005064 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	4806      	ldr	r0, [pc, #24]	@ (8005018 <checkAktifCalisma+0x5bc>)
 8005000:	f004 f803 	bl	800900a <HAL_GPIO_WritePin>
 8005004:	e033      	b.n	800506e <checkAktifCalisma+0x612>
 8005006:	bf00      	nop
 8005008:	20000267 	.word	0x20000267
 800500c:	2000022d 	.word	0x2000022d
 8005010:	20000262 	.word	0x20000262
 8005014:	20000263 	.word	0x20000263
 8005018:	40010c00 	.word	0x40010c00
 800501c:	2000024d 	.word	0x2000024d
 8005020:	20000261 	.word	0x20000261
 8005024:	40011000 	.word	0x40011000
 8005028:	20000216 	.word	0x20000216
 800502c:	20000248 	.word	0x20000248
 8005030:	20000245 	.word	0x20000245
 8005034:	20000249 	.word	0x20000249
 8005038:	20000246 	.word	0x20000246
 800503c:	20000247 	.word	0x20000247
 8005040:	2000024a 	.word	0x2000024a
 8005044:	2000024b 	.word	0x2000024b
 8005048:	20000250 	.word	0x20000250
 800504c:	20000271 	.word	0x20000271
 8005050:	20000240 	.word	0x20000240
 8005054:	200001e8 	.word	0x200001e8
 8005058:	200001f4 	.word	0x200001f4
 800505c:	20000225 	.word	0x20000225
 8005060:	20000215 	.word	0x20000215
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005064:	2200      	movs	r2, #0
 8005066:	2101      	movs	r1, #1
 8005068:	4836      	ldr	r0, [pc, #216]	@ (8005144 <checkAktifCalisma+0x6e8>)
 800506a:	f003 ffce 	bl	800900a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800506e:	4b36      	ldr	r3, [pc, #216]	@ (8005148 <checkAktifCalisma+0x6ec>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 8080 	bne.w	8005178 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005078:	4b34      	ldr	r3, [pc, #208]	@ (800514c <checkAktifCalisma+0x6f0>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d003      	beq.n	8005088 <checkAktifCalisma+0x62c>
 8005080:	4b32      	ldr	r3, [pc, #200]	@ (800514c <checkAktifCalisma+0x6f0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d177      	bne.n	8005178 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005088:	4b31      	ldr	r3, [pc, #196]	@ (8005150 <checkAktifCalisma+0x6f4>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d073      	beq.n	8005178 <checkAktifCalisma+0x71c>
 8005090:	4b30      	ldr	r3, [pc, #192]	@ (8005154 <checkAktifCalisma+0x6f8>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d06f      	beq.n	8005178 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005098:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800509c:	4829      	ldr	r0, [pc, #164]	@ (8005144 <checkAktifCalisma+0x6e8>)
 800509e:	f003 ff9d 	bl	8008fdc <HAL_GPIO_ReadPin>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d167      	bne.n	8005178 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80050a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050ac:	482a      	ldr	r0, [pc, #168]	@ (8005158 <checkAktifCalisma+0x6fc>)
 80050ae:	f003 ff95 	bl	8008fdc <HAL_GPIO_ReadPin>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <checkAktifCalisma+0x664>
 80050b8:	4b28      	ldr	r3, [pc, #160]	@ (800515c <checkAktifCalisma+0x700>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d15b      	bne.n	8005178 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80050c0:	2140      	movs	r1, #64	@ 0x40
 80050c2:	4825      	ldr	r0, [pc, #148]	@ (8005158 <checkAktifCalisma+0x6fc>)
 80050c4:	f003 ff8a 	bl	8008fdc <HAL_GPIO_ReadPin>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d10f      	bne.n	80050ee <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80050ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050d2:	481c      	ldr	r0, [pc, #112]	@ (8005144 <checkAktifCalisma+0x6e8>)
 80050d4:	f003 ff82 	bl	8008fdc <HAL_GPIO_ReadPin>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80050de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050e2:	4818      	ldr	r0, [pc, #96]	@ (8005144 <checkAktifCalisma+0x6e8>)
 80050e4:	f003 ff7a 	bl	8008fdc <HAL_GPIO_ReadPin>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d003      	beq.n	80050f6 <checkAktifCalisma+0x69a>
 80050ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005160 <checkAktifCalisma+0x704>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d040      	beq.n	8005178 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80050f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005164 <checkAktifCalisma+0x708>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	f083 0301 	eor.w	r3, r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d039      	beq.n	8005178 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005104:	4b18      	ldr	r3, [pc, #96]	@ (8005168 <checkAktifCalisma+0x70c>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f083 0301 	eor.w	r3, r3, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d032      	beq.n	8005178 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005112:	4b16      	ldr	r3, [pc, #88]	@ (800516c <checkAktifCalisma+0x710>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f083 0301 	eor.w	r3, r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02b      	beq.n	8005178 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005120:	4b13      	ldr	r3, [pc, #76]	@ (8005170 <checkAktifCalisma+0x714>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f083 0301 	eor.w	r3, r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d024      	beq.n	8005178 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800512e:	4b11      	ldr	r3, [pc, #68]	@ (8005174 <checkAktifCalisma+0x718>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f083 0301 	eor.w	r3, r3, #1
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01d      	beq.n	8005178 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800513c:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <checkAktifCalisma+0x704>)
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e01c      	b.n	800517e <checkAktifCalisma+0x722>
 8005144:	40010c00 	.word	0x40010c00
 8005148:	2000022d 	.word	0x2000022d
 800514c:	2000021f 	.word	0x2000021f
 8005150:	20000262 	.word	0x20000262
 8005154:	20000263 	.word	0x20000263
 8005158:	40011000 	.word	0x40011000
 800515c:	20000220 	.word	0x20000220
 8005160:	20000246 	.word	0x20000246
 8005164:	20000245 	.word	0x20000245
 8005168:	20000249 	.word	0x20000249
 800516c:	20000248 	.word	0x20000248
 8005170:	20000247 	.word	0x20000247
 8005174:	2000024b 	.word	0x2000024b
		} else {
			devmotoryukaricalisiyor=0;
 8005178:	4b64      	ldr	r3, [pc, #400]	@ (800530c <checkAktifCalisma+0x8b0>)
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800517e:	4b63      	ldr	r3, [pc, #396]	@ (800530c <checkAktifCalisma+0x8b0>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005186:	2201      	movs	r2, #1
 8005188:	2120      	movs	r1, #32
 800518a:	4861      	ldr	r0, [pc, #388]	@ (8005310 <checkAktifCalisma+0x8b4>)
 800518c:	f003 ff3d 	bl	800900a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005190:	4b60      	ldr	r3, [pc, #384]	@ (8005314 <checkAktifCalisma+0x8b8>)
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005196:	4b5f      	ldr	r3, [pc, #380]	@ (8005314 <checkAktifCalisma+0x8b8>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d025      	beq.n	80051ea <checkAktifCalisma+0x78e>
 800519e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051a2:	485d      	ldr	r0, [pc, #372]	@ (8005318 <checkAktifCalisma+0x8bc>)
 80051a4:	f003 ff1a 	bl	8008fdc <HAL_GPIO_ReadPin>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d007      	beq.n	80051be <checkAktifCalisma+0x762>
 80051ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80051b2:	4857      	ldr	r0, [pc, #348]	@ (8005310 <checkAktifCalisma+0x8b4>)
 80051b4:	f003 ff12 	bl	8008fdc <HAL_GPIO_ReadPin>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d115      	bne.n	80051ea <checkAktifCalisma+0x78e>
 80051be:	4b57      	ldr	r3, [pc, #348]	@ (800531c <checkAktifCalisma+0x8c0>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d011      	beq.n	80051ea <checkAktifCalisma+0x78e>
 80051c6:	4b56      	ldr	r3, [pc, #344]	@ (8005320 <checkAktifCalisma+0x8c4>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <checkAktifCalisma+0x78e>
 80051ce:	4b55      	ldr	r3, [pc, #340]	@ (8005324 <checkAktifCalisma+0x8c8>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	f083 0301 	eor.w	r3, r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <checkAktifCalisma+0x78e>
			timer2=millis;
 80051dc:	4b52      	ldr	r3, [pc, #328]	@ (8005328 <checkAktifCalisma+0x8cc>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a52      	ldr	r2, [pc, #328]	@ (800532c <checkAktifCalisma+0x8d0>)
 80051e2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80051e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005324 <checkAktifCalisma+0x8c8>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80051ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005328 <checkAktifCalisma+0x8cc>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b4f      	ldr	r3, [pc, #316]	@ (800532c <checkAktifCalisma+0x8d0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	4a4e      	ldr	r2, [pc, #312]	@ (8005330 <checkAktifCalisma+0x8d4>)
 80051f6:	7812      	ldrb	r2, [r2, #0]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d303      	bcc.n	8005204 <checkAktifCalisma+0x7a8>
 80051fc:	4b49      	ldr	r3, [pc, #292]	@ (8005324 <checkAktifCalisma+0x8c8>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10d      	bne.n	8005220 <checkAktifCalisma+0x7c4>
 8005204:	4b45      	ldr	r3, [pc, #276]	@ (800531c <checkAktifCalisma+0x8c0>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	f083 0301 	eor.w	r3, r3, #1
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <checkAktifCalisma+0x7c4>
 8005212:	4b43      	ldr	r3, [pc, #268]	@ (8005320 <checkAktifCalisma+0x8c4>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	f083 0301 	eor.w	r3, r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005220:	2200      	movs	r2, #0
 8005222:	2120      	movs	r1, #32
 8005224:	483a      	ldr	r0, [pc, #232]	@ (8005310 <checkAktifCalisma+0x8b4>)
 8005226:	f003 fef0 	bl	800900a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800522a:	4b3a      	ldr	r3, [pc, #232]	@ (8005314 <checkAktifCalisma+0x8b8>)
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005230:	4b3c      	ldr	r3, [pc, #240]	@ (8005324 <checkAktifCalisma+0x8c8>)
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005236:	4b3f      	ldr	r3, [pc, #252]	@ (8005334 <checkAktifCalisma+0x8d8>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 8088 	bne.w	8005350 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005240:	4b3d      	ldr	r3, [pc, #244]	@ (8005338 <checkAktifCalisma+0x8dc>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d003      	beq.n	8005250 <checkAktifCalisma+0x7f4>
 8005248:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <checkAktifCalisma+0x8dc>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d17f      	bne.n	8005350 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005250:	4b32      	ldr	r3, [pc, #200]	@ (800531c <checkAktifCalisma+0x8c0>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d07b      	beq.n	8005350 <checkAktifCalisma+0x8f4>
 8005258:	4b31      	ldr	r3, [pc, #196]	@ (8005320 <checkAktifCalisma+0x8c4>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d077      	beq.n	8005350 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005260:	2140      	movs	r1, #64	@ 0x40
 8005262:	482b      	ldr	r0, [pc, #172]	@ (8005310 <checkAktifCalisma+0x8b4>)
 8005264:	f003 feba 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d170      	bne.n	8005350 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800526e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005272:	4827      	ldr	r0, [pc, #156]	@ (8005310 <checkAktifCalisma+0x8b4>)
 8005274:	f003 feb2 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <checkAktifCalisma+0x82a>
 800527e:	4b2f      	ldr	r3, [pc, #188]	@ (800533c <checkAktifCalisma+0x8e0>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d164      	bne.n	8005350 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005286:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800528a:	4823      	ldr	r0, [pc, #140]	@ (8005318 <checkAktifCalisma+0x8bc>)
 800528c:	f003 fea6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005290:	4603      	mov	r3, r0
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10f      	bne.n	80052b6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005296:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800529a:	481f      	ldr	r0, [pc, #124]	@ (8005318 <checkAktifCalisma+0x8bc>)
 800529c:	f003 fe9e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d107      	bne.n	80052b6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80052a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052aa:	481b      	ldr	r0, [pc, #108]	@ (8005318 <checkAktifCalisma+0x8bc>)
 80052ac:	f003 fe96 	bl	8008fdc <HAL_GPIO_ReadPin>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d003      	beq.n	80052be <checkAktifCalisma+0x862>
 80052b6:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <checkAktifCalisma+0x8e4>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d048      	beq.n	8005350 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80052be:	4b21      	ldr	r3, [pc, #132]	@ (8005344 <checkAktifCalisma+0x8e8>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f083 0301 	eor.w	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d041      	beq.n	8005350 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80052cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <checkAktifCalisma+0x8ec>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	f083 0301 	eor.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03a      	beq.n	8005350 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80052da:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <checkAktifCalisma+0x8f0>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f083 0301 	eor.w	r3, r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d033      	beq.n	8005350 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80052e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005314 <checkAktifCalisma+0x8b8>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f083 0301 	eor.w	r3, r3, #1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d02c      	beq.n	8005350 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80052f6:	4b05      	ldr	r3, [pc, #20]	@ (800530c <checkAktifCalisma+0x8b0>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	f083 0301 	eor.w	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d025      	beq.n	8005350 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005304:	4b0e      	ldr	r3, [pc, #56]	@ (8005340 <checkAktifCalisma+0x8e4>)
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e024      	b.n	8005356 <checkAktifCalisma+0x8fa>
 800530c:	20000246 	.word	0x20000246
 8005310:	40011000 	.word	0x40011000
 8005314:	2000024a 	.word	0x2000024a
 8005318:	40010c00 	.word	0x40010c00
 800531c:	20000262 	.word	0x20000262
 8005320:	20000263 	.word	0x20000263
 8005324:	20000242 	.word	0x20000242
 8005328:	200001e8 	.word	0x200001e8
 800532c:	200001f4 	.word	0x200001f4
 8005330:	20000226 	.word	0x20000226
 8005334:	2000022d 	.word	0x2000022d
 8005338:	2000021f 	.word	0x2000021f
 800533c:	20000221 	.word	0x20000221
 8005340:	20000247 	.word	0x20000247
 8005344:	20000245 	.word	0x20000245
 8005348:	20000249 	.word	0x20000249
 800534c:	20000248 	.word	0x20000248
		} else {
			devmotorasagicalisiyor=0;
 8005350:	4b96      	ldr	r3, [pc, #600]	@ (80055ac <checkAktifCalisma+0xb50>)
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005356:	4b95      	ldr	r3, [pc, #596]	@ (80055ac <checkAktifCalisma+0xb50>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800535e:	2201      	movs	r2, #1
 8005360:	2110      	movs	r1, #16
 8005362:	4893      	ldr	r0, [pc, #588]	@ (80055b0 <checkAktifCalisma+0xb54>)
 8005364:	f003 fe51 	bl	800900a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005368:	4b92      	ldr	r3, [pc, #584]	@ (80055b4 <checkAktifCalisma+0xb58>)
 800536a:	2201      	movs	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800536e:	4b91      	ldr	r3, [pc, #580]	@ (80055b4 <checkAktifCalisma+0xb58>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d024      	beq.n	80053c0 <checkAktifCalisma+0x964>
 8005376:	2140      	movs	r1, #64	@ 0x40
 8005378:	488d      	ldr	r0, [pc, #564]	@ (80055b0 <checkAktifCalisma+0xb54>)
 800537a:	f003 fe2f 	bl	8008fdc <HAL_GPIO_ReadPin>
 800537e:	4603      	mov	r3, r0
 8005380:	2b01      	cmp	r3, #1
 8005382:	d007      	beq.n	8005394 <checkAktifCalisma+0x938>
 8005384:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005388:	4889      	ldr	r0, [pc, #548]	@ (80055b0 <checkAktifCalisma+0xb54>)
 800538a:	f003 fe27 	bl	8008fdc <HAL_GPIO_ReadPin>
 800538e:	4603      	mov	r3, r0
 8005390:	2b01      	cmp	r3, #1
 8005392:	d115      	bne.n	80053c0 <checkAktifCalisma+0x964>
 8005394:	4b88      	ldr	r3, [pc, #544]	@ (80055b8 <checkAktifCalisma+0xb5c>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d011      	beq.n	80053c0 <checkAktifCalisma+0x964>
 800539c:	4b87      	ldr	r3, [pc, #540]	@ (80055bc <checkAktifCalisma+0xb60>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <checkAktifCalisma+0x964>
 80053a4:	4b86      	ldr	r3, [pc, #536]	@ (80055c0 <checkAktifCalisma+0xb64>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f083 0301 	eor.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d006      	beq.n	80053c0 <checkAktifCalisma+0x964>
			timer2=millis;
 80053b2:	4b84      	ldr	r3, [pc, #528]	@ (80055c4 <checkAktifCalisma+0xb68>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a84      	ldr	r2, [pc, #528]	@ (80055c8 <checkAktifCalisma+0xb6c>)
 80053b8:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80053ba:	4b81      	ldr	r3, [pc, #516]	@ (80055c0 <checkAktifCalisma+0xb64>)
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80053c0:	4b80      	ldr	r3, [pc, #512]	@ (80055c4 <checkAktifCalisma+0xb68>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b80      	ldr	r3, [pc, #512]	@ (80055c8 <checkAktifCalisma+0xb6c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	4a80      	ldr	r2, [pc, #512]	@ (80055cc <checkAktifCalisma+0xb70>)
 80053cc:	7812      	ldrb	r2, [r2, #0]
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d303      	bcc.n	80053da <checkAktifCalisma+0x97e>
 80053d2:	4b7b      	ldr	r3, [pc, #492]	@ (80055c0 <checkAktifCalisma+0xb64>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10d      	bne.n	80053f6 <checkAktifCalisma+0x99a>
 80053da:	4b77      	ldr	r3, [pc, #476]	@ (80055b8 <checkAktifCalisma+0xb5c>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	f083 0301 	eor.w	r3, r3, #1
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <checkAktifCalisma+0x99a>
 80053e8:	4b74      	ldr	r3, [pc, #464]	@ (80055bc <checkAktifCalisma+0xb60>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f083 0301 	eor.w	r3, r3, #1
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80053f6:	2200      	movs	r2, #0
 80053f8:	2110      	movs	r1, #16
 80053fa:	486d      	ldr	r0, [pc, #436]	@ (80055b0 <checkAktifCalisma+0xb54>)
 80053fc:	f003 fe05 	bl	800900a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005400:	4b6c      	ldr	r3, [pc, #432]	@ (80055b4 <checkAktifCalisma+0xb58>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005406:	4b6e      	ldr	r3, [pc, #440]	@ (80055c0 <checkAktifCalisma+0xb64>)
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800540c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005410:	486f      	ldr	r0, [pc, #444]	@ (80055d0 <checkAktifCalisma+0xb74>)
 8005412:	f003 fde3 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d120      	bne.n	800545e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800541c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005420:	486b      	ldr	r0, [pc, #428]	@ (80055d0 <checkAktifCalisma+0xb74>)
 8005422:	f003 fddb 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d118      	bne.n	800545e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800542c:	2104      	movs	r1, #4
 800542e:	4868      	ldr	r0, [pc, #416]	@ (80055d0 <checkAktifCalisma+0xb74>)
 8005430:	f003 fdd4 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d111      	bne.n	800545e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800543a:	2102      	movs	r1, #2
 800543c:	4864      	ldr	r0, [pc, #400]	@ (80055d0 <checkAktifCalisma+0xb74>)
 800543e:	f003 fdcd 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005448:	2101      	movs	r1, #1
 800544a:	4861      	ldr	r0, [pc, #388]	@ (80055d0 <checkAktifCalisma+0xb74>)
 800544c:	f003 fdc6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005456:	4b5f      	ldr	r3, [pc, #380]	@ (80055d4 <checkAktifCalisma+0xb78>)
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	e002      	b.n	8005464 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800545e:	4b5d      	ldr	r3, [pc, #372]	@ (80055d4 <checkAktifCalisma+0xb78>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005464:	4b5c      	ldr	r3, [pc, #368]	@ (80055d8 <checkAktifCalisma+0xb7c>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d144      	bne.n	80054f6 <checkAktifCalisma+0xa9a>
 800546c:	4b5b      	ldr	r3, [pc, #364]	@ (80055dc <checkAktifCalisma+0xb80>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d003      	beq.n	800547c <checkAktifCalisma+0xa20>
 8005474:	4b59      	ldr	r3, [pc, #356]	@ (80055dc <checkAktifCalisma+0xb80>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d13c      	bne.n	80054f6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800547c:	2180      	movs	r1, #128	@ 0x80
 800547e:	484c      	ldr	r0, [pc, #304]	@ (80055b0 <checkAktifCalisma+0xb54>)
 8005480:	f003 fdac 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <checkAktifCalisma+0xa36>
 800548a:	4b55      	ldr	r3, [pc, #340]	@ (80055e0 <checkAktifCalisma+0xb84>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <checkAktifCalisma+0xa4e>
 8005492:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005496:	484e      	ldr	r0, [pc, #312]	@ (80055d0 <checkAktifCalisma+0xb74>)
 8005498:	f003 fda0 	bl	8008fdc <HAL_GPIO_ReadPin>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d129      	bne.n	80054f6 <checkAktifCalisma+0xa9a>
 80054a2:	4b4f      	ldr	r3, [pc, #316]	@ (80055e0 <checkAktifCalisma+0xb84>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d125      	bne.n	80054f6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80054aa:	2104      	movs	r1, #4
 80054ac:	4840      	ldr	r0, [pc, #256]	@ (80055b0 <checkAktifCalisma+0xb54>)
 80054ae:	f003 fd95 	bl	8008fdc <HAL_GPIO_ReadPin>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d003      	beq.n	80054c0 <checkAktifCalisma+0xa64>
 80054b8:	4b4a      	ldr	r3, [pc, #296]	@ (80055e4 <checkAktifCalisma+0xb88>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11a      	bne.n	80054f6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80054c0:	2102      	movs	r1, #2
 80054c2:	483b      	ldr	r0, [pc, #236]	@ (80055b0 <checkAktifCalisma+0xb54>)
 80054c4:	f003 fd8a 	bl	8008fdc <HAL_GPIO_ReadPin>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d113      	bne.n	80054f6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80054ce:	4b46      	ldr	r3, [pc, #280]	@ (80055e8 <checkAktifCalisma+0xb8c>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	f083 0301 	eor.w	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00c      	beq.n	80054f6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80054dc:	4b3d      	ldr	r3, [pc, #244]	@ (80055d4 <checkAktifCalisma+0xb78>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80054e4:	4b41      	ldr	r3, [pc, #260]	@ (80055ec <checkAktifCalisma+0xb90>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80054ea:	4b36      	ldr	r3, [pc, #216]	@ (80055c4 <checkAktifCalisma+0xb68>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a40      	ldr	r2, [pc, #256]	@ (80055f0 <checkAktifCalisma+0xb94>)
 80054f0:	6013      	str	r3, [r2, #0]
			bekle();
 80054f2:	f7ff f901 	bl	80046f8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80054f6:	4b33      	ldr	r3, [pc, #204]	@ (80055c4 <checkAktifCalisma+0xb68>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b3d      	ldr	r3, [pc, #244]	@ (80055f0 <checkAktifCalisma+0xb94>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	4a3c      	ldr	r2, [pc, #240]	@ (80055f4 <checkAktifCalisma+0xb98>)
 8005502:	7812      	ldrb	r2, [r2, #0]
 8005504:	4293      	cmp	r3, r2
 8005506:	d211      	bcs.n	800552c <checkAktifCalisma+0xad0>
 8005508:	2104      	movs	r1, #4
 800550a:	4829      	ldr	r0, [pc, #164]	@ (80055b0 <checkAktifCalisma+0xb54>)
 800550c:	f003 fd66 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <checkAktifCalisma+0xad0>
 8005516:	4b33      	ldr	r3, [pc, #204]	@ (80055e4 <checkAktifCalisma+0xb88>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <checkAktifCalisma+0xad0>
 800551e:	4b2d      	ldr	r3, [pc, #180]	@ (80055d4 <checkAktifCalisma+0xb78>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f083 0301 	eor.w	r3, r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800552c:	4b2f      	ldr	r3, [pc, #188]	@ (80055ec <checkAktifCalisma+0xb90>)
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005532:	4b29      	ldr	r3, [pc, #164]	@ (80055d8 <checkAktifCalisma+0xb7c>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d160      	bne.n	80055fc <checkAktifCalisma+0xba0>
 800553a:	4b28      	ldr	r3, [pc, #160]	@ (80055dc <checkAktifCalisma+0xb80>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d003      	beq.n	800554a <checkAktifCalisma+0xaee>
 8005542:	4b26      	ldr	r3, [pc, #152]	@ (80055dc <checkAktifCalisma+0xb80>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d158      	bne.n	80055fc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800554a:	2104      	movs	r1, #4
 800554c:	4818      	ldr	r0, [pc, #96]	@ (80055b0 <checkAktifCalisma+0xb54>)
 800554e:	f003 fd45 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005552:	4603      	mov	r3, r0
 8005554:	2b01      	cmp	r3, #1
 8005556:	d003      	beq.n	8005560 <checkAktifCalisma+0xb04>
 8005558:	4b22      	ldr	r3, [pc, #136]	@ (80055e4 <checkAktifCalisma+0xb88>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d14d      	bne.n	80055fc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005560:	2102      	movs	r1, #2
 8005562:	4813      	ldr	r0, [pc, #76]	@ (80055b0 <checkAktifCalisma+0xb54>)
 8005564:	f003 fd3a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d146      	bne.n	80055fc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800556e:	2180      	movs	r1, #128	@ 0x80
 8005570:	480f      	ldr	r0, [pc, #60]	@ (80055b0 <checkAktifCalisma+0xb54>)
 8005572:	f003 fd33 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <checkAktifCalisma+0xb28>
 800557c:	4b18      	ldr	r3, [pc, #96]	@ (80055e0 <checkAktifCalisma+0xb84>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <checkAktifCalisma+0xb40>
 8005584:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005588:	4811      	ldr	r0, [pc, #68]	@ (80055d0 <checkAktifCalisma+0xb74>)
 800558a:	f003 fd27 	bl	8008fdc <HAL_GPIO_ReadPin>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d133      	bne.n	80055fc <checkAktifCalisma+0xba0>
 8005594:	4b12      	ldr	r3, [pc, #72]	@ (80055e0 <checkAktifCalisma+0xb84>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d12f      	bne.n	80055fc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800559c:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <checkAktifCalisma+0xb78>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02b      	beq.n	80055fc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80055a4:	4b14      	ldr	r3, [pc, #80]	@ (80055f8 <checkAktifCalisma+0xb9c>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e02a      	b.n	8005602 <checkAktifCalisma+0xba6>
 80055ac:	20000247 	.word	0x20000247
 80055b0:	40011000 	.word	0x40011000
 80055b4:	2000024b 	.word	0x2000024b
 80055b8:	20000262 	.word	0x20000262
 80055bc:	20000263 	.word	0x20000263
 80055c0:	20000243 	.word	0x20000243
 80055c4:	200001e8 	.word	0x200001e8
 80055c8:	200001f4 	.word	0x200001f4
 80055cc:	20000226 	.word	0x20000226
 80055d0:	40010c00 	.word	0x40010c00
 80055d4:	20000252 	.word	0x20000252
 80055d8:	20000219 	.word	0x20000219
 80055dc:	20000218 	.word	0x20000218
 80055e0:	2000021c 	.word	0x2000021c
 80055e4:	20000216 	.word	0x20000216
 80055e8:	2000023f 	.word	0x2000023f
 80055ec:	20000253 	.word	0x20000253
 80055f0:	200001ec 	.word	0x200001ec
 80055f4:	20000229 	.word	0x20000229
 80055f8:	20000254 	.word	0x20000254
		} else {
			kapi1butonkontrol=0;
 80055fc:	4b8b      	ldr	r3, [pc, #556]	@ (800582c <checkAktifCalisma+0xdd0>)
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005602:	4b8b      	ldr	r3, [pc, #556]	@ (8005830 <checkAktifCalisma+0xdd4>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d121      	bne.n	800564e <checkAktifCalisma+0xbf2>
 800560a:	4b8a      	ldr	r3, [pc, #552]	@ (8005834 <checkAktifCalisma+0xdd8>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d003      	beq.n	800561a <checkAktifCalisma+0xbbe>
 8005612:	4b88      	ldr	r3, [pc, #544]	@ (8005834 <checkAktifCalisma+0xdd8>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b03      	cmp	r3, #3
 8005618:	d119      	bne.n	800564e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800561a:	2104      	movs	r1, #4
 800561c:	4886      	ldr	r0, [pc, #536]	@ (8005838 <checkAktifCalisma+0xddc>)
 800561e:	f003 fcdd 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005622:	4603      	mov	r3, r0
 8005624:	2b01      	cmp	r3, #1
 8005626:	d003      	beq.n	8005630 <checkAktifCalisma+0xbd4>
 8005628:	4b84      	ldr	r3, [pc, #528]	@ (800583c <checkAktifCalisma+0xde0>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10e      	bne.n	800564e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005630:	2102      	movs	r1, #2
 8005632:	4881      	ldr	r0, [pc, #516]	@ (8005838 <checkAktifCalisma+0xddc>)
 8005634:	f003 fcd2 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d107      	bne.n	800564e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800563e:	4b80      	ldr	r3, [pc, #512]	@ (8005840 <checkAktifCalisma+0xde4>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005646:	4b7f      	ldr	r3, [pc, #508]	@ (8005844 <checkAktifCalisma+0xde8>)
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e002      	b.n	8005654 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800564e:	4b7d      	ldr	r3, [pc, #500]	@ (8005844 <checkAktifCalisma+0xde8>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005654:	4b75      	ldr	r3, [pc, #468]	@ (800582c <checkAktifCalisma+0xdd0>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d107      	bne.n	800566c <checkAktifCalisma+0xc10>
 800565c:	4b79      	ldr	r3, [pc, #484]	@ (8005844 <checkAktifCalisma+0xde8>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d103      	bne.n	800566c <checkAktifCalisma+0xc10>
 8005664:	4b78      	ldr	r3, [pc, #480]	@ (8005848 <checkAktifCalisma+0xdec>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800566c:	2201      	movs	r2, #1
 800566e:	2180      	movs	r1, #128	@ 0x80
 8005670:	4876      	ldr	r0, [pc, #472]	@ (800584c <checkAktifCalisma+0xdf0>)
 8005672:	f003 fcca 	bl	800900a <HAL_GPIO_WritePin>
 8005676:	e004      	b.n	8005682 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005678:	2200      	movs	r2, #0
 800567a:	2180      	movs	r1, #128	@ 0x80
 800567c:	4873      	ldr	r0, [pc, #460]	@ (800584c <checkAktifCalisma+0xdf0>)
 800567e:	f003 fcc4 	bl	800900a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005682:	4b73      	ldr	r3, [pc, #460]	@ (8005850 <checkAktifCalisma+0xdf4>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d141      	bne.n	800570e <checkAktifCalisma+0xcb2>
 800568a:	4b6a      	ldr	r3, [pc, #424]	@ (8005834 <checkAktifCalisma+0xdd8>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d003      	beq.n	800569a <checkAktifCalisma+0xc3e>
 8005692:	4b68      	ldr	r3, [pc, #416]	@ (8005834 <checkAktifCalisma+0xdd8>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b03      	cmp	r3, #3
 8005698:	d139      	bne.n	800570e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800569a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800569e:	4866      	ldr	r0, [pc, #408]	@ (8005838 <checkAktifCalisma+0xddc>)
 80056a0:	f003 fc9c 	bl	8008fdc <HAL_GPIO_ReadPin>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d103      	bne.n	80056b2 <checkAktifCalisma+0xc56>
 80056aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005854 <checkAktifCalisma+0xdf8>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <checkAktifCalisma+0xc6e>
 80056b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056b6:	4868      	ldr	r0, [pc, #416]	@ (8005858 <checkAktifCalisma+0xdfc>)
 80056b8:	f003 fc90 	bl	8008fdc <HAL_GPIO_ReadPin>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d125      	bne.n	800570e <checkAktifCalisma+0xcb2>
 80056c2:	4b64      	ldr	r3, [pc, #400]	@ (8005854 <checkAktifCalisma+0xdf8>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d121      	bne.n	800570e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80056ca:	2102      	movs	r1, #2
 80056cc:	485a      	ldr	r0, [pc, #360]	@ (8005838 <checkAktifCalisma+0xddc>)
 80056ce:	f003 fc85 	bl	8008fdc <HAL_GPIO_ReadPin>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d11a      	bne.n	800570e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80056d8:	2104      	movs	r1, #4
 80056da:	4857      	ldr	r0, [pc, #348]	@ (8005838 <checkAktifCalisma+0xddc>)
 80056dc:	f003 fc7e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d113      	bne.n	800570e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80056e6:	4b56      	ldr	r3, [pc, #344]	@ (8005840 <checkAktifCalisma+0xde4>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00f      	beq.n	800570e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80056ee:	4b5b      	ldr	r3, [pc, #364]	@ (800585c <checkAktifCalisma+0xe00>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	f083 0301 	eor.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80056fc:	4b58      	ldr	r3, [pc, #352]	@ (8005860 <checkAktifCalisma+0xe04>)
 80056fe:	2201      	movs	r2, #1
 8005700:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005702:	4b58      	ldr	r3, [pc, #352]	@ (8005864 <checkAktifCalisma+0xe08>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a58      	ldr	r2, [pc, #352]	@ (8005868 <checkAktifCalisma+0xe0c>)
 8005708:	6013      	str	r3, [r2, #0]
			bekle();
 800570a:	f7fe fff5 	bl	80046f8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800570e:	4b55      	ldr	r3, [pc, #340]	@ (8005864 <checkAktifCalisma+0xe08>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b55      	ldr	r3, [pc, #340]	@ (8005868 <checkAktifCalisma+0xe0c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	4a54      	ldr	r2, [pc, #336]	@ (800586c <checkAktifCalisma+0xe10>)
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	4293      	cmp	r3, r2
 800571e:	d20d      	bcs.n	800573c <checkAktifCalisma+0xce0>
 8005720:	2102      	movs	r1, #2
 8005722:	4845      	ldr	r0, [pc, #276]	@ (8005838 <checkAktifCalisma+0xddc>)
 8005724:	f003 fc5a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d006      	beq.n	800573c <checkAktifCalisma+0xce0>
 800572e:	4b44      	ldr	r3, [pc, #272]	@ (8005840 <checkAktifCalisma+0xde4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f083 0301 	eor.w	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 800573c:	4b48      	ldr	r3, [pc, #288]	@ (8005860 <checkAktifCalisma+0xe04>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005742:	4b43      	ldr	r3, [pc, #268]	@ (8005850 <checkAktifCalisma+0xdf4>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d135      	bne.n	80057b6 <checkAktifCalisma+0xd5a>
 800574a:	4b3a      	ldr	r3, [pc, #232]	@ (8005834 <checkAktifCalisma+0xdd8>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d003      	beq.n	800575a <checkAktifCalisma+0xcfe>
 8005752:	4b38      	ldr	r3, [pc, #224]	@ (8005834 <checkAktifCalisma+0xdd8>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b03      	cmp	r3, #3
 8005758:	d12d      	bne.n	80057b6 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800575a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800575e:	4836      	ldr	r0, [pc, #216]	@ (8005838 <checkAktifCalisma+0xddc>)
 8005760:	f003 fc3c 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <checkAktifCalisma+0xd16>
 800576a:	4b3a      	ldr	r3, [pc, #232]	@ (8005854 <checkAktifCalisma+0xdf8>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <checkAktifCalisma+0xd2e>
 8005772:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005776:	4838      	ldr	r0, [pc, #224]	@ (8005858 <checkAktifCalisma+0xdfc>)
 8005778:	f003 fc30 	bl	8008fdc <HAL_GPIO_ReadPin>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d119      	bne.n	80057b6 <checkAktifCalisma+0xd5a>
 8005782:	4b34      	ldr	r3, [pc, #208]	@ (8005854 <checkAktifCalisma+0xdf8>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d115      	bne.n	80057b6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800578a:	2102      	movs	r1, #2
 800578c:	482a      	ldr	r0, [pc, #168]	@ (8005838 <checkAktifCalisma+0xddc>)
 800578e:	f003 fc25 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005792:	4603      	mov	r3, r0
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10e      	bne.n	80057b6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005798:	2104      	movs	r1, #4
 800579a:	4827      	ldr	r0, [pc, #156]	@ (8005838 <checkAktifCalisma+0xddc>)
 800579c:	f003 fc1e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80057a6:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <checkAktifCalisma+0xde4>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80057ae:	4b30      	ldr	r3, [pc, #192]	@ (8005870 <checkAktifCalisma+0xe14>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	e002      	b.n	80057bc <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80057b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005870 <checkAktifCalisma+0xe14>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057bc:	4b24      	ldr	r3, [pc, #144]	@ (8005850 <checkAktifCalisma+0xdf4>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d11d      	bne.n	8005800 <checkAktifCalisma+0xda4>
 80057c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <checkAktifCalisma+0xdd8>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d003      	beq.n	80057d4 <checkAktifCalisma+0xd78>
 80057cc:	4b19      	ldr	r3, [pc, #100]	@ (8005834 <checkAktifCalisma+0xdd8>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d115      	bne.n	8005800 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057d4:	2102      	movs	r1, #2
 80057d6:	4818      	ldr	r0, [pc, #96]	@ (8005838 <checkAktifCalisma+0xddc>)
 80057d8:	f003 fc00 	bl	8008fdc <HAL_GPIO_ReadPin>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d10e      	bne.n	8005800 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80057e2:	2104      	movs	r1, #4
 80057e4:	4814      	ldr	r0, [pc, #80]	@ (8005838 <checkAktifCalisma+0xddc>)
 80057e6:	f003 fbf9 	bl	8008fdc <HAL_GPIO_ReadPin>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d107      	bne.n	8005800 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80057f0:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <checkAktifCalisma+0xde4>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80057f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005874 <checkAktifCalisma+0xe18>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e002      	b.n	8005806 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005800:	4b1c      	ldr	r3, [pc, #112]	@ (8005874 <checkAktifCalisma+0xe18>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005806:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <checkAktifCalisma+0xe14>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <checkAktifCalisma+0xdc2>
 800580e:	4b19      	ldr	r3, [pc, #100]	@ (8005874 <checkAktifCalisma+0xe18>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <checkAktifCalisma+0xdc2>
 8005816:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <checkAktifCalisma+0xe04>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02c      	beq.n	8005878 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800581e:	2201      	movs	r2, #1
 8005820:	2140      	movs	r1, #64	@ 0x40
 8005822:	480a      	ldr	r0, [pc, #40]	@ (800584c <checkAktifCalisma+0xdf0>)
 8005824:	f003 fbf1 	bl	800900a <HAL_GPIO_WritePin>
 8005828:	e02b      	b.n	8005882 <checkAktifCalisma+0xe26>
 800582a:	bf00      	nop
 800582c:	20000254 	.word	0x20000254
 8005830:	20000219 	.word	0x20000219
 8005834:	20000218 	.word	0x20000218
 8005838:	40011000 	.word	0x40011000
 800583c:	20000216 	.word	0x20000216
 8005840:	20000252 	.word	0x20000252
 8005844:	20000255 	.word	0x20000255
 8005848:	20000253 	.word	0x20000253
 800584c:	40010800 	.word	0x40010800
 8005850:	2000021a 	.word	0x2000021a
 8005854:	2000021c 	.word	0x2000021c
 8005858:	40010c00 	.word	0x40010c00
 800585c:	2000023f 	.word	0x2000023f
 8005860:	20000256 	.word	0x20000256
 8005864:	200001e8 	.word	0x200001e8
 8005868:	200001ec 	.word	0x200001ec
 800586c:	2000022a 	.word	0x2000022a
 8005870:	20000257 	.word	0x20000257
 8005874:	20000258 	.word	0x20000258
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005878:	2200      	movs	r2, #0
 800587a:	2140      	movs	r1, #64	@ 0x40
 800587c:	488d      	ldr	r0, [pc, #564]	@ (8005ab4 <checkAktifCalisma+0x1058>)
 800587e:	f003 fbc4 	bl	800900a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005882:	4b8d      	ldr	r3, [pc, #564]	@ (8005ab8 <checkAktifCalisma+0x105c>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <checkAktifCalisma+0xe36>
 800588a:	4b8b      	ldr	r3, [pc, #556]	@ (8005ab8 <checkAktifCalisma+0x105c>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d115      	bne.n	80058be <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005892:	2104      	movs	r1, #4
 8005894:	4889      	ldr	r0, [pc, #548]	@ (8005abc <checkAktifCalisma+0x1060>)
 8005896:	f003 fba1 	bl	8008fdc <HAL_GPIO_ReadPin>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d003      	beq.n	80058a8 <checkAktifCalisma+0xe4c>
 80058a0:	4b87      	ldr	r3, [pc, #540]	@ (8005ac0 <checkAktifCalisma+0x1064>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80058a8:	2102      	movs	r1, #2
 80058aa:	4884      	ldr	r0, [pc, #528]	@ (8005abc <checkAktifCalisma+0x1060>)
 80058ac:	f003 fb96 	bl	8008fdc <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80058b6:	4b83      	ldr	r3, [pc, #524]	@ (8005ac4 <checkAktifCalisma+0x1068>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e002      	b.n	80058c4 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80058be:	4b81      	ldr	r3, [pc, #516]	@ (8005ac4 <checkAktifCalisma+0x1068>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80058c4:	4b7c      	ldr	r3, [pc, #496]	@ (8005ab8 <checkAktifCalisma+0x105c>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d003      	beq.n	80058d4 <checkAktifCalisma+0xe78>
 80058cc:	4b7a      	ldr	r3, [pc, #488]	@ (8005ab8 <checkAktifCalisma+0x105c>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d111      	bne.n	80058f8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058d4:	2102      	movs	r1, #2
 80058d6:	4879      	ldr	r0, [pc, #484]	@ (8005abc <checkAktifCalisma+0x1060>)
 80058d8:	f003 fb80 	bl	8008fdc <HAL_GPIO_ReadPin>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d10a      	bne.n	80058f8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80058e2:	2104      	movs	r1, #4
 80058e4:	4875      	ldr	r0, [pc, #468]	@ (8005abc <checkAktifCalisma+0x1060>)
 80058e6:	f003 fb79 	bl	8008fdc <HAL_GPIO_ReadPin>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d103      	bne.n	80058f8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80058f0:	4b75      	ldr	r3, [pc, #468]	@ (8005ac8 <checkAktifCalisma+0x106c>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e002      	b.n	80058fe <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80058f8:	4b73      	ldr	r3, [pc, #460]	@ (8005ac8 <checkAktifCalisma+0x106c>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80058fe:	4b71      	ldr	r3, [pc, #452]	@ (8005ac4 <checkAktifCalisma+0x1068>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005906:	4b71      	ldr	r3, [pc, #452]	@ (8005acc <checkAktifCalisma+0x1070>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10b      	bne.n	8005926 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800590e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005912:	486f      	ldr	r0, [pc, #444]	@ (8005ad0 <checkAktifCalisma+0x1074>)
 8005914:	f003 fb62 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <checkAktifCalisma+0x1078>)
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	e002      	b.n	800592c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005926:	4b6b      	ldr	r3, [pc, #428]	@ (8005ad4 <checkAktifCalisma+0x1078>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 800592c:	4b66      	ldr	r3, [pc, #408]	@ (8005ac8 <checkAktifCalisma+0x106c>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00f      	beq.n	8005954 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005934:	4b65      	ldr	r3, [pc, #404]	@ (8005acc <checkAktifCalisma+0x1070>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10b      	bne.n	8005954 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800593c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005940:	4863      	ldr	r0, [pc, #396]	@ (8005ad0 <checkAktifCalisma+0x1074>)
 8005942:	f003 fb4b 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 800594c:	4b62      	ldr	r3, [pc, #392]	@ (8005ad8 <checkAktifCalisma+0x107c>)
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	e002      	b.n	800595a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005954:	4b60      	ldr	r3, [pc, #384]	@ (8005ad8 <checkAktifCalisma+0x107c>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800595a:	4b60      	ldr	r3, [pc, #384]	@ (8005adc <checkAktifCalisma+0x1080>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d137      	bne.n	80059d2 <checkAktifCalisma+0xf76>
 8005962:	4b5f      	ldr	r3, [pc, #380]	@ (8005ae0 <checkAktifCalisma+0x1084>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d003      	beq.n	8005972 <checkAktifCalisma+0xf16>
 800596a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ae0 <checkAktifCalisma+0x1084>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d12f      	bne.n	80059d2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005972:	4b54      	ldr	r3, [pc, #336]	@ (8005ac4 <checkAktifCalisma+0x1068>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <checkAktifCalisma+0xf26>
 800597a:	4b53      	ldr	r3, [pc, #332]	@ (8005ac8 <checkAktifCalisma+0x106c>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d027      	beq.n	80059d2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005986:	484d      	ldr	r0, [pc, #308]	@ (8005abc <checkAktifCalisma+0x1060>)
 8005988:	f003 fb28 	bl	8008fdc <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d103      	bne.n	800599a <checkAktifCalisma+0xf3e>
 8005992:	4b4e      	ldr	r3, [pc, #312]	@ (8005acc <checkAktifCalisma+0x1070>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800599a:	4b4e      	ldr	r3, [pc, #312]	@ (8005ad4 <checkAktifCalisma+0x1078>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <checkAktifCalisma+0xf4e>
 80059a2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad8 <checkAktifCalisma+0x107c>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d013      	beq.n	80059d2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80059aa:	4b4e      	ldr	r3, [pc, #312]	@ (8005ae4 <checkAktifCalisma+0x1088>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00f      	beq.n	80059d2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80059b2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ae8 <checkAktifCalisma+0x108c>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	f083 0301 	eor.w	r3, r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80059c0:	4b4a      	ldr	r3, [pc, #296]	@ (8005aec <checkAktifCalisma+0x1090>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80059c6:	4b4a      	ldr	r3, [pc, #296]	@ (8005af0 <checkAktifCalisma+0x1094>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4a      	ldr	r2, [pc, #296]	@ (8005af4 <checkAktifCalisma+0x1098>)
 80059cc:	6013      	str	r3, [r2, #0]
			bekle();
 80059ce:	f7fe fe93 	bl	80046f8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80059d2:	4b47      	ldr	r3, [pc, #284]	@ (8005af0 <checkAktifCalisma+0x1094>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b47      	ldr	r3, [pc, #284]	@ (8005af4 <checkAktifCalisma+0x1098>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	4a46      	ldr	r2, [pc, #280]	@ (8005af8 <checkAktifCalisma+0x109c>)
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d214      	bcs.n	8005a0e <checkAktifCalisma+0xfb2>
 80059e4:	4b37      	ldr	r3, [pc, #220]	@ (8005ac4 <checkAktifCalisma+0x1068>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f083 0301 	eor.w	r3, r3, #1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <checkAktifCalisma+0xfa4>
 80059f2:	4b35      	ldr	r3, [pc, #212]	@ (8005ac8 <checkAktifCalisma+0x106c>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	f083 0301 	eor.w	r3, r3, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <checkAktifCalisma+0xfb2>
 8005a00:	4b38      	ldr	r3, [pc, #224]	@ (8005ae4 <checkAktifCalisma+0x1088>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f083 0301 	eor.w	r3, r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005a0e:	4b37      	ldr	r3, [pc, #220]	@ (8005aec <checkAktifCalisma+0x1090>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005a14:	4b31      	ldr	r3, [pc, #196]	@ (8005adc <checkAktifCalisma+0x1080>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d12b      	bne.n	8005a74 <checkAktifCalisma+0x1018>
 8005a1c:	4b30      	ldr	r3, [pc, #192]	@ (8005ae0 <checkAktifCalisma+0x1084>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d003      	beq.n	8005a2c <checkAktifCalisma+0xfd0>
 8005a24:	4b2e      	ldr	r3, [pc, #184]	@ (8005ae0 <checkAktifCalisma+0x1084>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d123      	bne.n	8005a74 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005a2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ac4 <checkAktifCalisma+0x1068>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d103      	bne.n	8005a3c <checkAktifCalisma+0xfe0>
 8005a34:	4b24      	ldr	r3, [pc, #144]	@ (8005ac8 <checkAktifCalisma+0x106c>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005a3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a40:	481e      	ldr	r0, [pc, #120]	@ (8005abc <checkAktifCalisma+0x1060>)
 8005a42:	f003 facb 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <checkAktifCalisma+0xff8>
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005acc <checkAktifCalisma+0x1070>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005a54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad4 <checkAktifCalisma+0x1078>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d103      	bne.n	8005a64 <checkAktifCalisma+0x1008>
 8005a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad8 <checkAktifCalisma+0x107c>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005a64:	4b1f      	ldr	r3, [pc, #124]	@ (8005ae4 <checkAktifCalisma+0x1088>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005a6c:	4b23      	ldr	r3, [pc, #140]	@ (8005afc <checkAktifCalisma+0x10a0>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e002      	b.n	8005a7a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005a74:	4b21      	ldr	r3, [pc, #132]	@ (8005afc <checkAktifCalisma+0x10a0>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005a7a:	4b18      	ldr	r3, [pc, #96]	@ (8005adc <checkAktifCalisma+0x1080>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d140      	bne.n	8005b04 <checkAktifCalisma+0x10a8>
 8005a82:	4b17      	ldr	r3, [pc, #92]	@ (8005ae0 <checkAktifCalisma+0x1084>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d003      	beq.n	8005a92 <checkAktifCalisma+0x1036>
 8005a8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ae0 <checkAktifCalisma+0x1084>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d138      	bne.n	8005b04 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005a92:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac4 <checkAktifCalisma+0x1068>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <checkAktifCalisma+0x1046>
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <checkAktifCalisma+0x106c>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d030      	beq.n	8005b04 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005aa2:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <checkAktifCalisma+0x1088>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d02c      	beq.n	8005b04 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005aaa:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <checkAktifCalisma+0x10a4>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e02b      	b.n	8005b0a <checkAktifCalisma+0x10ae>
 8005ab2:	bf00      	nop
 8005ab4:	40010800 	.word	0x40010800
 8005ab8:	2000021d 	.word	0x2000021d
 8005abc:	40011000 	.word	0x40011000
 8005ac0:	20000216 	.word	0x20000216
 8005ac4:	2000025c 	.word	0x2000025c
 8005ac8:	2000025d 	.word	0x2000025d
 8005acc:	2000021c 	.word	0x2000021c
 8005ad0:	40010c00 	.word	0x40010c00
 8005ad4:	2000026c 	.word	0x2000026c
 8005ad8:	2000026d 	.word	0x2000026d
 8005adc:	2000021b 	.word	0x2000021b
 8005ae0:	20000218 	.word	0x20000218
 8005ae4:	20000252 	.word	0x20000252
 8005ae8:	2000023f 	.word	0x2000023f
 8005aec:	20000259 	.word	0x20000259
 8005af0:	200001e8 	.word	0x200001e8
 8005af4:	200001ec 	.word	0x200001ec
 8005af8:	2000022b 	.word	0x2000022b
 8005afc:	2000025a 	.word	0x2000025a
 8005b00:	2000025b 	.word	0x2000025b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005b04:	4b8b      	ldr	r3, [pc, #556]	@ (8005d34 <checkAktifCalisma+0x12d8>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8005d38 <checkAktifCalisma+0x12dc>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d107      	bne.n	8005b22 <checkAktifCalisma+0x10c6>
 8005b12:	4b8a      	ldr	r3, [pc, #552]	@ (8005d3c <checkAktifCalisma+0x12e0>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <checkAktifCalisma+0x10c6>
 8005b1a:	4b86      	ldr	r3, [pc, #536]	@ (8005d34 <checkAktifCalisma+0x12d8>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005b22:	2201      	movs	r2, #1
 8005b24:	2120      	movs	r1, #32
 8005b26:	4886      	ldr	r0, [pc, #536]	@ (8005d40 <checkAktifCalisma+0x12e4>)
 8005b28:	f003 fa6f 	bl	800900a <HAL_GPIO_WritePin>
 8005b2c:	e004      	b.n	8005b38 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2120      	movs	r1, #32
 8005b32:	4883      	ldr	r0, [pc, #524]	@ (8005d40 <checkAktifCalisma+0x12e4>)
 8005b34:	f003 fa69 	bl	800900a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005b38:	4b82      	ldr	r3, [pc, #520]	@ (8005d44 <checkAktifCalisma+0x12e8>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <checkAktifCalisma+0x1102>
 8005b40:	2102      	movs	r1, #2
 8005b42:	4881      	ldr	r0, [pc, #516]	@ (8005d48 <checkAktifCalisma+0x12ec>)
 8005b44:	f003 fa4a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d107      	bne.n	8005b5e <checkAktifCalisma+0x1102>
 8005b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d4c <checkAktifCalisma+0x12f0>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <checkAktifCalisma+0x1102>
 8005b56:	4b7e      	ldr	r3, [pc, #504]	@ (8005d50 <checkAktifCalisma+0x12f4>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d112      	bne.n	8005b84 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d54 <checkAktifCalisma+0x12f8>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d066      	beq.n	8005c34 <checkAktifCalisma+0x11d8>
 8005b66:	2104      	movs	r1, #4
 8005b68:	4877      	ldr	r0, [pc, #476]	@ (8005d48 <checkAktifCalisma+0x12ec>)
 8005b6a:	f003 fa37 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d15f      	bne.n	8005c34 <checkAktifCalisma+0x11d8>
 8005b74:	4b75      	ldr	r3, [pc, #468]	@ (8005d4c <checkAktifCalisma+0x12f0>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d05b      	beq.n	8005c34 <checkAktifCalisma+0x11d8>
 8005b7c:	4b74      	ldr	r3, [pc, #464]	@ (8005d50 <checkAktifCalisma+0x12f4>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d057      	beq.n	8005c34 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005b84:	4b74      	ldr	r3, [pc, #464]	@ (8005d58 <checkAktifCalisma+0x12fc>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	4b72      	ldr	r3, [pc, #456]	@ (8005d58 <checkAktifCalisma+0x12fc>)
 8005b8e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005b90:	4b71      	ldr	r3, [pc, #452]	@ (8005d58 <checkAktifCalisma+0x12fc>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	d908      	bls.n	8005baa <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005b98:	4b6f      	ldr	r3, [pc, #444]	@ (8005d58 <checkAktifCalisma+0x12fc>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8005d5c <checkAktifCalisma+0x1300>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8005d5c <checkAktifCalisma+0x1300>)
 8005ba8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005baa:	4b6c      	ldr	r3, [pc, #432]	@ (8005d5c <checkAktifCalisma+0x1300>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	d908      	bls.n	8005bc4 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8005d5c <checkAktifCalisma+0x1300>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005bb8:	4b69      	ldr	r3, [pc, #420]	@ (8005d60 <checkAktifCalisma+0x1304>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	4b67      	ldr	r3, [pc, #412]	@ (8005d60 <checkAktifCalisma+0x1304>)
 8005bc2:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005bc4:	4b66      	ldr	r3, [pc, #408]	@ (8005d60 <checkAktifCalisma+0x1304>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b09      	cmp	r3, #9
 8005bca:	d908      	bls.n	8005bde <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005bcc:	4b64      	ldr	r3, [pc, #400]	@ (8005d60 <checkAktifCalisma+0x1304>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005bd2:	4b64      	ldr	r3, [pc, #400]	@ (8005d64 <checkAktifCalisma+0x1308>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	4b62      	ldr	r3, [pc, #392]	@ (8005d64 <checkAktifCalisma+0x1308>)
 8005bdc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005bde:	4b61      	ldr	r3, [pc, #388]	@ (8005d64 <checkAktifCalisma+0x1308>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b09      	cmp	r3, #9
 8005be4:	d908      	bls.n	8005bf8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005be6:	4b5f      	ldr	r3, [pc, #380]	@ (8005d64 <checkAktifCalisma+0x1308>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005bec:	4b5e      	ldr	r3, [pc, #376]	@ (8005d68 <checkAktifCalisma+0x130c>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8005d68 <checkAktifCalisma+0x130c>)
 8005bf6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8005d68 <checkAktifCalisma+0x130c>)
 8005bfa:	781a      	ldrb	r2, [r3, #0]
 8005bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8005d6c <checkAktifCalisma+0x1310>)
 8005bfe:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005c02:	4b58      	ldr	r3, [pc, #352]	@ (8005d64 <checkAktifCalisma+0x1308>)
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	4b59      	ldr	r3, [pc, #356]	@ (8005d6c <checkAktifCalisma+0x1310>)
 8005c08:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005c0a:	4b55      	ldr	r3, [pc, #340]	@ (8005d60 <checkAktifCalisma+0x1304>)
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	4b57      	ldr	r3, [pc, #348]	@ (8005d6c <checkAktifCalisma+0x1310>)
 8005c10:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005c12:	4b52      	ldr	r3, [pc, #328]	@ (8005d5c <checkAktifCalisma+0x1300>)
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	4b55      	ldr	r3, [pc, #340]	@ (8005d6c <checkAktifCalisma+0x1310>)
 8005c18:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d58 <checkAktifCalisma+0x12fc>)
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	4b53      	ldr	r3, [pc, #332]	@ (8005d6c <checkAktifCalisma+0x1310>)
 8005c20:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005c22:	4b53      	ldr	r3, [pc, #332]	@ (8005d70 <checkAktifCalisma+0x1314>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005c28:	4b46      	ldr	r3, [pc, #280]	@ (8005d44 <checkAktifCalisma+0x12e8>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005c2e:	4b49      	ldr	r3, [pc, #292]	@ (8005d54 <checkAktifCalisma+0x12f8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005c34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c38:	484e      	ldr	r0, [pc, #312]	@ (8005d74 <checkAktifCalisma+0x1318>)
 8005c3a:	f003 f9cf 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d016      	beq.n	8005c72 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005c44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c48:	484a      	ldr	r0, [pc, #296]	@ (8005d74 <checkAktifCalisma+0x1318>)
 8005c4a:	f003 f9c7 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00e      	beq.n	8005c72 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005c54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c58:	4846      	ldr	r0, [pc, #280]	@ (8005d74 <checkAktifCalisma+0x1318>)
 8005c5a:	f003 f9bf 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d006      	beq.n	8005c72 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005c64:	2140      	movs	r1, #64	@ 0x40
 8005c66:	4838      	ldr	r0, [pc, #224]	@ (8005d48 <checkAktifCalisma+0x12ec>)
 8005c68:	f003 f9b8 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005c72:	4b41      	ldr	r3, [pc, #260]	@ (8005d78 <checkAktifCalisma+0x131c>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e002      	b.n	8005c80 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d78 <checkAktifCalisma+0x131c>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005c80:	4b3d      	ldr	r3, [pc, #244]	@ (8005d78 <checkAktifCalisma+0x131c>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d016      	beq.n	8005cb6 <checkAktifCalisma+0x125a>
 8005c88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005c8c:	4839      	ldr	r0, [pc, #228]	@ (8005d74 <checkAktifCalisma+0x1318>)
 8005c8e:	f003 f9a5 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10e      	bne.n	8005cb6 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005c98:	4b38      	ldr	r3, [pc, #224]	@ (8005d7c <checkAktifCalisma+0x1320>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	f7fa fec4 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	f7fa fe69 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005caa:	f001 fc4f 	bl	800754c <convertAndSendData>
			acilstophatasi=1;
 8005cae:	4b34      	ldr	r3, [pc, #208]	@ (8005d80 <checkAktifCalisma+0x1324>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	e018      	b.n	8005ce8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005cb6:	4b32      	ldr	r3, [pc, #200]	@ (8005d80 <checkAktifCalisma+0x1324>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <checkAktifCalisma+0x128c>
 8005cbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005cc2:	482c      	ldr	r0, [pc, #176]	@ (8005d74 <checkAktifCalisma+0x1318>)
 8005cc4:	f003 f98a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10c      	bne.n	8005ce8 <checkAktifCalisma+0x128c>
 8005cce:	4b2a      	ldr	r3, [pc, #168]	@ (8005d78 <checkAktifCalisma+0x131c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f083 0301 	eor.w	r3, r3, #1
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005cdc:	4b28      	ldr	r3, [pc, #160]	@ (8005d80 <checkAktifCalisma+0x1324>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	f7fe fcb4 	bl	8004650 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005ce8:	4b26      	ldr	r3, [pc, #152]	@ (8005d84 <checkAktifCalisma+0x1328>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d04e      	beq.n	8005d94 <checkAktifCalisma+0x1338>
 8005cf6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005cfa:	481e      	ldr	r0, [pc, #120]	@ (8005d74 <checkAktifCalisma+0x1318>)
 8005cfc:	f003 f96e 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <checkAktifCalisma+0x12b2>
 8005d06:	4b20      	ldr	r3, [pc, #128]	@ (8005d88 <checkAktifCalisma+0x132c>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d042      	beq.n	8005d94 <checkAktifCalisma+0x1338>
 8005d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d8c <checkAktifCalisma+0x1330>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d13e      	bne.n	8005d94 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005d16:	4b19      	ldr	r3, [pc, #100]	@ (8005d7c <checkAktifCalisma+0x1320>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005d1c:	2002      	movs	r0, #2
 8005d1e:	f7fa fe85 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005d22:	2002      	movs	r0, #2
 8005d24:	f7fa fe2a 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005d28:	f001 fc10 	bl	800754c <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005d2c:	4b18      	ldr	r3, [pc, #96]	@ (8005d90 <checkAktifCalisma+0x1334>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e047      	b.n	8005dc4 <checkAktifCalisma+0x1368>
 8005d34:	2000025b 	.word	0x2000025b
 8005d38:	2000025a 	.word	0x2000025a
 8005d3c:	20000259 	.word	0x20000259
 8005d40:	40010800 	.word	0x40010800
 8005d44:	2000024f 	.word	0x2000024f
 8005d48:	40011000 	.word	0x40011000
 8005d4c:	20000216 	.word	0x20000216
 8005d50:	20000252 	.word	0x20000252
 8005d54:	20000250 	.word	0x20000250
 8005d58:	2000020d 	.word	0x2000020d
 8005d5c:	2000020e 	.word	0x2000020e
 8005d60:	20000000 	.word	0x20000000
 8005d64:	20000001 	.word	0x20000001
 8005d68:	2000020f 	.word	0x2000020f
 8005d6c:	20000138 	.word	0x20000138
 8005d70:	2000023c 	.word	0x2000023c
 8005d74:	40010c00 	.word	0x40010c00
 8005d78:	2000025e 	.word	0x2000025e
 8005d7c:	20000265 	.word	0x20000265
 8005d80:	20000260 	.word	0x20000260
 8005d84:	20000267 	.word	0x20000267
 8005d88:	20000271 	.word	0x20000271
 8005d8c:	20000214 	.word	0x20000214
 8005d90:	20000261 	.word	0x20000261
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005d94:	4b9b      	ldr	r3, [pc, #620]	@ (8006004 <checkAktifCalisma+0x15a8>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d013      	beq.n	8005dc4 <checkAktifCalisma+0x1368>
 8005d9c:	4b9a      	ldr	r3, [pc, #616]	@ (8006008 <checkAktifCalisma+0x15ac>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00f      	beq.n	8005dc4 <checkAktifCalisma+0x1368>
 8005da4:	4b99      	ldr	r3, [pc, #612]	@ (800600c <checkAktifCalisma+0x15b0>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f083 0301 	eor.w	r3, r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d008      	beq.n	8005dc4 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005db2:	4b94      	ldr	r3, [pc, #592]	@ (8006004 <checkAktifCalisma+0x15a8>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005db8:	4b95      	ldr	r3, [pc, #596]	@ (8006010 <checkAktifCalisma+0x15b4>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005dbe:	2002      	movs	r0, #2
 8005dc0:	f7fe fc46 	bl	8004650 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005dc4:	4b93      	ldr	r3, [pc, #588]	@ (8006014 <checkAktifCalisma+0x15b8>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d11e      	bne.n	8005e0a <checkAktifCalisma+0x13ae>
 8005dcc:	4b92      	ldr	r3, [pc, #584]	@ (8006018 <checkAktifCalisma+0x15bc>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d11a      	bne.n	8005e0a <checkAktifCalisma+0x13ae>
 8005dd4:	4b91      	ldr	r3, [pc, #580]	@ (800601c <checkAktifCalisma+0x15c0>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d016      	beq.n	8005e0a <checkAktifCalisma+0x13ae>
 8005ddc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005de0:	488f      	ldr	r0, [pc, #572]	@ (8006020 <checkAktifCalisma+0x15c4>)
 8005de2:	f003 f8fb 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d10e      	bne.n	8005e0a <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005dec:	4b8d      	ldr	r3, [pc, #564]	@ (8006024 <checkAktifCalisma+0x15c8>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005df2:	2003      	movs	r0, #3
 8005df4:	f7fa fe1a 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005df8:	2003      	movs	r0, #3
 8005dfa:	f7fa fdbf 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005dfe:	f001 fba5 	bl	800754c <convertAndSendData>
			basinchatasi=1;
 8005e02:	4b89      	ldr	r3, [pc, #548]	@ (8006028 <checkAktifCalisma+0x15cc>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e015      	b.n	8005e36 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005e0a:	4b87      	ldr	r3, [pc, #540]	@ (8006028 <checkAktifCalisma+0x15cc>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d011      	beq.n	8005e36 <checkAktifCalisma+0x13da>
 8005e12:	4b80      	ldr	r3, [pc, #512]	@ (8006014 <checkAktifCalisma+0x15b8>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d10d      	bne.n	8005e36 <checkAktifCalisma+0x13da>
 8005e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e1e:	4883      	ldr	r0, [pc, #524]	@ (800602c <checkAktifCalisma+0x15d0>)
 8005e20:	f003 f8dc 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d105      	bne.n	8005e36 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8006028 <checkAktifCalisma+0x15cc>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005e30:	2003      	movs	r0, #3
 8005e32:	f7fe fc0d 	bl	8004650 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005e36:	4b7e      	ldr	r3, [pc, #504]	@ (8006030 <checkAktifCalisma+0x15d4>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <checkAktifCalisma+0x13ea>
 8005e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8006034 <checkAktifCalisma+0x15d8>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01e      	beq.n	8005e84 <checkAktifCalisma+0x1428>
 8005e46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e4a:	487b      	ldr	r0, [pc, #492]	@ (8006038 <checkAktifCalisma+0x15dc>)
 8005e4c:	f003 f8c6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d116      	bne.n	8005e84 <checkAktifCalisma+0x1428>
 8005e56:	4b79      	ldr	r3, [pc, #484]	@ (800603c <checkAktifCalisma+0x15e0>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d003      	beq.n	8005e66 <checkAktifCalisma+0x140a>
 8005e5e:	4b77      	ldr	r3, [pc, #476]	@ (800603c <checkAktifCalisma+0x15e0>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d10e      	bne.n	8005e84 <checkAktifCalisma+0x1428>
			hataVar=1;
 8005e66:	4b6f      	ldr	r3, [pc, #444]	@ (8006024 <checkAktifCalisma+0x15c8>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005e6c:	2004      	movs	r0, #4
 8005e6e:	f7fa fddd 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005e72:	2004      	movs	r0, #4
 8005e74:	f7fa fd82 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005e78:	f001 fb68 	bl	800754c <convertAndSendData>
			katkapisivicihatasi=1;
 8005e7c:	4b70      	ldr	r3, [pc, #448]	@ (8006040 <checkAktifCalisma+0x15e4>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e01f      	b.n	8005ec4 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005e84:	4b6e      	ldr	r3, [pc, #440]	@ (8006040 <checkAktifCalisma+0x15e4>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01b      	beq.n	8005ec4 <checkAktifCalisma+0x1468>
 8005e8c:	4b6d      	ldr	r3, [pc, #436]	@ (8006044 <checkAktifCalisma+0x15e8>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d017      	beq.n	8005ec4 <checkAktifCalisma+0x1468>
 8005e94:	4b66      	ldr	r3, [pc, #408]	@ (8006030 <checkAktifCalisma+0x15d4>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f083 0301 	eor.w	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d010      	beq.n	8005ec4 <checkAktifCalisma+0x1468>
 8005ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ea6:	4864      	ldr	r0, [pc, #400]	@ (8006038 <checkAktifCalisma+0x15dc>)
 8005ea8:	f003 f898 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8005eb2:	4b63      	ldr	r3, [pc, #396]	@ (8006040 <checkAktifCalisma+0x15e4>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8006034 <checkAktifCalisma+0x15d8>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8005ebe:	2004      	movs	r0, #4
 8005ec0:	f7fe fbc6 	bl	8004650 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005ec4:	4b5a      	ldr	r3, [pc, #360]	@ (8006030 <checkAktifCalisma+0x15d4>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d103      	bne.n	8005ed4 <checkAktifCalisma+0x1478>
 8005ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8006048 <checkAktifCalisma+0x15ec>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01e      	beq.n	8005f12 <checkAktifCalisma+0x14b6>
 8005ed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ed8:	4857      	ldr	r0, [pc, #348]	@ (8006038 <checkAktifCalisma+0x15dc>)
 8005eda:	f003 f87f 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d116      	bne.n	8005f12 <checkAktifCalisma+0x14b6>
 8005ee4:	4b55      	ldr	r3, [pc, #340]	@ (800603c <checkAktifCalisma+0x15e0>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d003      	beq.n	8005ef4 <checkAktifCalisma+0x1498>
 8005eec:	4b53      	ldr	r3, [pc, #332]	@ (800603c <checkAktifCalisma+0x15e0>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d10e      	bne.n	8005f12 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8005ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8006024 <checkAktifCalisma+0x15c8>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8005efa:	2005      	movs	r0, #5
 8005efc:	f7fa fd96 	bl	8000a2c <hataKoduLcdGoster>
			hata2EEPROM(5);
 8005f00:	2005      	movs	r0, #5
 8005f02:	f7fa fd3b 	bl	800097c <hata2EEPROM>
			convertAndSendData();
 8005f06:	f001 fb21 	bl	800754c <convertAndSendData>
			tablakapisivicihatasi=1;
 8005f0a:	4b50      	ldr	r3, [pc, #320]	@ (800604c <checkAktifCalisma+0x15f0>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	e023      	b.n	8005f5a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005f12:	4b4e      	ldr	r3, [pc, #312]	@ (800604c <checkAktifCalisma+0x15f0>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01f      	beq.n	8005f5a <checkAktifCalisma+0x14fe>
 8005f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8006044 <checkAktifCalisma+0x15e8>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01b      	beq.n	8005f5a <checkAktifCalisma+0x14fe>
 8005f22:	4b43      	ldr	r3, [pc, #268]	@ (8006030 <checkAktifCalisma+0x15d4>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	f083 0301 	eor.w	r3, r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d014      	beq.n	8005f5a <checkAktifCalisma+0x14fe>
 8005f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f34:	4840      	ldr	r0, [pc, #256]	@ (8006038 <checkAktifCalisma+0x15dc>)
 8005f36:	f003 f851 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10c      	bne.n	8005f5a <checkAktifCalisma+0x14fe>
 8005f40:	4b40      	ldr	r3, [pc, #256]	@ (8006044 <checkAktifCalisma+0x15e8>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8005f48:	4b40      	ldr	r3, [pc, #256]	@ (800604c <checkAktifCalisma+0x15f0>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8005f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006048 <checkAktifCalisma+0x15ec>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8005f54:	2005      	movs	r0, #5
 8005f56:	f7fe fb7b 	bl	8004650 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8005f5a:	4b30      	ldr	r3, [pc, #192]	@ (800601c <checkAktifCalisma+0x15c0>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <checkAktifCalisma+0x1516>
 8005f62:	4b2a      	ldr	r3, [pc, #168]	@ (800600c <checkAktifCalisma+0x15b0>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <checkAktifCalisma+0x1516>
 8005f6a:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <checkAktifCalisma+0x15f4>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d016      	beq.n	8005fa0 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8005f72:	4b38      	ldr	r3, [pc, #224]	@ (8006054 <checkAktifCalisma+0x15f8>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b38      	ldr	r3, [pc, #224]	@ (8006058 <checkAktifCalisma+0x15fc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	4a37      	ldr	r2, [pc, #220]	@ (800605c <checkAktifCalisma+0x1600>)
 8005f7e:	7812      	ldrb	r2, [r2, #0]
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d30d      	bcc.n	8005fa0 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8005f84:	4b27      	ldr	r3, [pc, #156]	@ (8006024 <checkAktifCalisma+0x15c8>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8005f8a:	2006      	movs	r0, #6
 8005f8c:	f7fa fd4e 	bl	8000a2c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8005f90:	2006      	movs	r0, #6
 8005f92:	f7fa fcf3 	bl	800097c <hata2EEPROM>
			  	convertAndSendData();
 8005f96:	f001 fad9 	bl	800754c <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8005f9a:	4b31      	ldr	r3, [pc, #196]	@ (8006060 <checkAktifCalisma+0x1604>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8006060 <checkAktifCalisma+0x1604>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <checkAktifCalisma+0x1574>
 8005fa8:	2108      	movs	r1, #8
 8005faa:	4823      	ldr	r0, [pc, #140]	@ (8006038 <checkAktifCalisma+0x15dc>)
 8005fac:	f003 f816 	bl	8008fdc <HAL_GPIO_ReadPin>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <checkAktifCalisma+0x1574>
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006030 <checkAktifCalisma+0x15d4>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	f083 0301 	eor.w	r3, r3, #1
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8005fc4:	4b26      	ldr	r3, [pc, #152]	@ (8006060 <checkAktifCalisma+0x1604>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8005fca:	2006      	movs	r0, #6
 8005fcc:	f7fe fb40 	bl	8004650 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005fd0:	4b24      	ldr	r3, [pc, #144]	@ (8006064 <checkAktifCalisma+0x1608>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10b      	bne.n	8005ff0 <checkAktifCalisma+0x1594>
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <checkAktifCalisma+0x15b0>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d107      	bne.n	8005ff0 <checkAktifCalisma+0x1594>
 8005fe0:	4b21      	ldr	r3, [pc, #132]	@ (8006068 <checkAktifCalisma+0x160c>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d103      	bne.n	8005ff0 <checkAktifCalisma+0x1594>
 8005fe8:	4b19      	ldr	r3, [pc, #100]	@ (8006050 <checkAktifCalisma+0x15f4>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d03f      	beq.n	8006070 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8005ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800606c <checkAktifCalisma+0x1610>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8006034 <checkAktifCalisma+0x15d8>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8005ffc:	4b12      	ldr	r3, [pc, #72]	@ (8006048 <checkAktifCalisma+0x15ec>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e03c      	b.n	800607e <checkAktifCalisma+0x1622>
 8006004:	20000261 	.word	0x20000261
 8006008:	20000267 	.word	0x20000267
 800600c:	20000248 	.word	0x20000248
 8006010:	20000271 	.word	0x20000271
 8006014:	20000213 	.word	0x20000213
 8006018:	20000217 	.word	0x20000217
 800601c:	20000264 	.word	0x20000264
 8006020:	40011000 	.word	0x40011000
 8006024:	20000265 	.word	0x20000265
 8006028:	2000026e 	.word	0x2000026e
 800602c:	40010c00 	.word	0x40010c00
 8006030:	2000025e 	.word	0x2000025e
 8006034:	20000272 	.word	0x20000272
 8006038:	40010800 	.word	0x40010800
 800603c:	20000218 	.word	0x20000218
 8006040:	2000026f 	.word	0x2000026f
 8006044:	20000252 	.word	0x20000252
 8006048:	20000273 	.word	0x20000273
 800604c:	20000270 	.word	0x20000270
 8006050:	20000247 	.word	0x20000247
 8006054:	200001e8 	.word	0x200001e8
 8006058:	200001fc 	.word	0x200001fc
 800605c:	20000228 	.word	0x20000228
 8006060:	2000025f 	.word	0x2000025f
 8006064:	20000245 	.word	0x20000245
 8006068:	20000246 	.word	0x20000246
 800606c:	20000266 	.word	0x20000266
		} else {
			makineCalisiyor=1;
 8006070:	4b1e      	ldr	r3, [pc, #120]	@ (80060ec <checkAktifCalisma+0x1690>)
 8006072:	2201      	movs	r2, #1
 8006074:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006076:	4b1e      	ldr	r3, [pc, #120]	@ (80060f0 <checkAktifCalisma+0x1694>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1e      	ldr	r2, [pc, #120]	@ (80060f4 <checkAktifCalisma+0x1698>)
 800607c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800607e:	4b1e      	ldr	r3, [pc, #120]	@ (80060f8 <checkAktifCalisma+0x169c>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d02f      	beq.n	80060e6 <checkAktifCalisma+0x168a>
 8006086:	4b1d      	ldr	r3, [pc, #116]	@ (80060fc <checkAktifCalisma+0x16a0>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	f083 0301 	eor.w	r3, r3, #1
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d028      	beq.n	80060e6 <checkAktifCalisma+0x168a>
 8006094:	4b1a      	ldr	r3, [pc, #104]	@ (8006100 <checkAktifCalisma+0x16a4>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f083 0301 	eor.w	r3, r3, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d021      	beq.n	80060e6 <checkAktifCalisma+0x168a>
 80060a2:	4b18      	ldr	r3, [pc, #96]	@ (8006104 <checkAktifCalisma+0x16a8>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f083 0301 	eor.w	r3, r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01a      	beq.n	80060e6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80060b0:	4b15      	ldr	r3, [pc, #84]	@ (8006108 <checkAktifCalisma+0x16ac>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f083 0301 	eor.w	r3, r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d013      	beq.n	80060e6 <checkAktifCalisma+0x168a>
 80060be:	4b13      	ldr	r3, [pc, #76]	@ (800610c <checkAktifCalisma+0x16b0>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f083 0301 	eor.w	r3, r3, #1
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00c      	beq.n	80060e6 <checkAktifCalisma+0x168a>
 80060cc:	4b10      	ldr	r3, [pc, #64]	@ (8006110 <checkAktifCalisma+0x16b4>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f083 0301 	eor.w	r3, r3, #1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <checkAktifCalisma+0x168a>
			hataVar=0;
 80060da:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <checkAktifCalisma+0x169c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80060e0:	2007      	movs	r0, #7
 80060e2:	f7fe fab5 	bl	8004650 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000266 	.word	0x20000266
 80060f0:	200001e8 	.word	0x200001e8
 80060f4:	200001fc 	.word	0x200001fc
 80060f8:	20000265 	.word	0x20000265
 80060fc:	20000260 	.word	0x20000260
 8006100:	20000261 	.word	0x20000261
 8006104:	2000026e 	.word	0x2000026e
 8006108:	2000026f 	.word	0x2000026f
 800610c:	20000270 	.word	0x20000270
 8006110:	2000025f 	.word	0x2000025f

08006114 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006118:	4b8b      	ldr	r3, [pc, #556]	@ (8006348 <checkDemoModCalisma+0x234>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	f040 8229 	bne.w	8006574 <checkDemoModCalisma+0x460>
 8006122:	4b8a      	ldr	r3, [pc, #552]	@ (800634c <checkDemoModCalisma+0x238>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8224 	beq.w	8006574 <checkDemoModCalisma+0x460>
 800612c:	4b88      	ldr	r3, [pc, #544]	@ (8006350 <checkDemoModCalisma+0x23c>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f040 821f 	bne.w	8006574 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006136:	2102      	movs	r1, #2
 8006138:	4886      	ldr	r0, [pc, #536]	@ (8006354 <checkDemoModCalisma+0x240>)
 800613a:	f002 ff4f 	bl	8008fdc <HAL_GPIO_ReadPin>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11d      	bne.n	8006180 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006144:	4b84      	ldr	r3, [pc, #528]	@ (8006358 <checkDemoModCalisma+0x244>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f083 0301 	eor.w	r3, r3, #1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d016      	beq.n	8006180 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006152:	4b82      	ldr	r3, [pc, #520]	@ (800635c <checkDemoModCalisma+0x248>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f083 0301 	eor.w	r3, r3, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00f      	beq.n	8006180 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006160:	4b7f      	ldr	r3, [pc, #508]	@ (8006360 <checkDemoModCalisma+0x24c>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f083 0301 	eor.w	r3, r3, #1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800616e:	2201      	movs	r2, #1
 8006170:	2104      	movs	r1, #4
 8006172:	487c      	ldr	r0, [pc, #496]	@ (8006364 <checkDemoModCalisma+0x250>)
 8006174:	f002 ff49 	bl	800900a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006178:	4b7b      	ldr	r3, [pc, #492]	@ (8006368 <checkDemoModCalisma+0x254>)
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e00e      	b.n	800619e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006180:	2102      	movs	r1, #2
 8006182:	4874      	ldr	r0, [pc, #464]	@ (8006354 <checkDemoModCalisma+0x240>)
 8006184:	f002 ff2a 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d107      	bne.n	800619e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800618e:	2200      	movs	r2, #0
 8006190:	2104      	movs	r1, #4
 8006192:	4874      	ldr	r0, [pc, #464]	@ (8006364 <checkDemoModCalisma+0x250>)
 8006194:	f002 ff39 	bl	800900a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006198:	4b73      	ldr	r3, [pc, #460]	@ (8006368 <checkDemoModCalisma+0x254>)
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800619e:	4b72      	ldr	r3, [pc, #456]	@ (8006368 <checkDemoModCalisma+0x254>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10b      	bne.n	80061be <checkDemoModCalisma+0xaa>
 80061a6:	4b6d      	ldr	r3, [pc, #436]	@ (800635c <checkDemoModCalisma+0x248>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <checkDemoModCalisma+0xaa>
 80061ae:	4b6c      	ldr	r3, [pc, #432]	@ (8006360 <checkDemoModCalisma+0x24c>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <checkDemoModCalisma+0xaa>
 80061b6:	4b68      	ldr	r3, [pc, #416]	@ (8006358 <checkDemoModCalisma+0x244>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80061be:	2201      	movs	r2, #1
 80061c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80061c4:	4867      	ldr	r0, [pc, #412]	@ (8006364 <checkDemoModCalisma+0x250>)
 80061c6:	f002 ff20 	bl	800900a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80061ca:	2201      	movs	r2, #1
 80061cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061d0:	4864      	ldr	r0, [pc, #400]	@ (8006364 <checkDemoModCalisma+0x250>)
 80061d2:	f002 ff1a 	bl	800900a <HAL_GPIO_WritePin>
 80061d6:	e00b      	b.n	80061f0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80061d8:	2200      	movs	r2, #0
 80061da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80061de:	4861      	ldr	r0, [pc, #388]	@ (8006364 <checkDemoModCalisma+0x250>)
 80061e0:	f002 ff13 	bl	800900a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80061e4:	2200      	movs	r2, #0
 80061e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061ea:	485e      	ldr	r0, [pc, #376]	@ (8006364 <checkDemoModCalisma+0x250>)
 80061ec:	f002 ff0d 	bl	800900a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80061f0:	2102      	movs	r1, #2
 80061f2:	4858      	ldr	r0, [pc, #352]	@ (8006354 <checkDemoModCalisma+0x240>)
 80061f4:	f002 fef2 	bl	8008fdc <HAL_GPIO_ReadPin>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d10d      	bne.n	800621a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80061fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006202:	4854      	ldr	r0, [pc, #336]	@ (8006354 <checkDemoModCalisma+0x240>)
 8006204:	f002 feea 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d105      	bne.n	800621a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800620e:	4b56      	ldr	r3, [pc, #344]	@ (8006368 <checkDemoModCalisma+0x254>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	f083 0301 	eor.w	r3, r3, #1
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800621a:	2102      	movs	r1, #2
 800621c:	484d      	ldr	r0, [pc, #308]	@ (8006354 <checkDemoModCalisma+0x240>)
 800621e:	f002 fedd 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006222:	4603      	mov	r3, r0
 8006224:	2b01      	cmp	r3, #1
 8006226:	d125      	bne.n	8006274 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006228:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800622c:	4849      	ldr	r0, [pc, #292]	@ (8006354 <checkDemoModCalisma+0x240>)
 800622e:	f002 fed5 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d11d      	bne.n	8006274 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006238:	4b4b      	ldr	r3, [pc, #300]	@ (8006368 <checkDemoModCalisma+0x254>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f083 0301 	eor.w	r3, r3, #1
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d016      	beq.n	8006274 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006246:	4b44      	ldr	r3, [pc, #272]	@ (8006358 <checkDemoModCalisma+0x244>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f083 0301 	eor.w	r3, r3, #1
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00f      	beq.n	8006274 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006254:	4b42      	ldr	r3, [pc, #264]	@ (8006360 <checkDemoModCalisma+0x24c>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	f083 0301 	eor.w	r3, r3, #1
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d008      	beq.n	8006274 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006262:	2201      	movs	r2, #1
 8006264:	2120      	movs	r1, #32
 8006266:	483b      	ldr	r0, [pc, #236]	@ (8006354 <checkDemoModCalisma+0x240>)
 8006268:	f002 fecf 	bl	800900a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800626c:	4b3b      	ldr	r3, [pc, #236]	@ (800635c <checkDemoModCalisma+0x248>)
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e007      	b.n	8006284 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006274:	2200      	movs	r2, #0
 8006276:	2120      	movs	r1, #32
 8006278:	4836      	ldr	r0, [pc, #216]	@ (8006354 <checkDemoModCalisma+0x240>)
 800627a:	f002 fec6 	bl	800900a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800627e:	4b37      	ldr	r3, [pc, #220]	@ (800635c <checkDemoModCalisma+0x248>)
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006284:	2102      	movs	r1, #2
 8006286:	4833      	ldr	r0, [pc, #204]	@ (8006354 <checkDemoModCalisma+0x240>)
 8006288:	f002 fea8 	bl	8008fdc <HAL_GPIO_ReadPin>
 800628c:	4603      	mov	r3, r0
 800628e:	2b01      	cmp	r3, #1
 8006290:	d125      	bne.n	80062de <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006292:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006296:	482f      	ldr	r0, [pc, #188]	@ (8006354 <checkDemoModCalisma+0x240>)
 8006298:	f002 fea0 	bl	8008fdc <HAL_GPIO_ReadPin>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11d      	bne.n	80062de <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80062a2:	4b31      	ldr	r3, [pc, #196]	@ (8006368 <checkDemoModCalisma+0x254>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f083 0301 	eor.w	r3, r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d016      	beq.n	80062de <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80062b0:	4b2a      	ldr	r3, [pc, #168]	@ (800635c <checkDemoModCalisma+0x248>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f083 0301 	eor.w	r3, r3, #1
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00f      	beq.n	80062de <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80062be:	4b26      	ldr	r3, [pc, #152]	@ (8006358 <checkDemoModCalisma+0x244>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f083 0301 	eor.w	r3, r3, #1
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80062cc:	2201      	movs	r2, #1
 80062ce:	2110      	movs	r1, #16
 80062d0:	4820      	ldr	r0, [pc, #128]	@ (8006354 <checkDemoModCalisma+0x240>)
 80062d2:	f002 fe9a 	bl	800900a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80062d6:	4b22      	ldr	r3, [pc, #136]	@ (8006360 <checkDemoModCalisma+0x24c>)
 80062d8:	2201      	movs	r2, #1
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e007      	b.n	80062ee <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80062de:	2200      	movs	r2, #0
 80062e0:	2110      	movs	r1, #16
 80062e2:	481c      	ldr	r0, [pc, #112]	@ (8006354 <checkDemoModCalisma+0x240>)
 80062e4:	f002 fe91 	bl	800900a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80062e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006360 <checkDemoModCalisma+0x24c>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80062ee:	2104      	movs	r1, #4
 80062f0:	4818      	ldr	r0, [pc, #96]	@ (8006354 <checkDemoModCalisma+0x240>)
 80062f2:	f002 fe73 	bl	8008fdc <HAL_GPIO_ReadPin>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d139      	bne.n	8006370 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80062fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006368 <checkDemoModCalisma+0x254>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f083 0301 	eor.w	r3, r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d032      	beq.n	8006370 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800630a:	4b15      	ldr	r3, [pc, #84]	@ (8006360 <checkDemoModCalisma+0x24c>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d02b      	beq.n	8006370 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006318:	4b10      	ldr	r3, [pc, #64]	@ (800635c <checkDemoModCalisma+0x248>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f083 0301 	eor.w	r3, r3, #1
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d024      	beq.n	8006370 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006326:	2201      	movs	r2, #1
 8006328:	2102      	movs	r1, #2
 800632a:	480e      	ldr	r0, [pc, #56]	@ (8006364 <checkDemoModCalisma+0x250>)
 800632c:	f002 fe6d 	bl	800900a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006330:	2201      	movs	r2, #1
 8006332:	2101      	movs	r1, #1
 8006334:	480b      	ldr	r0, [pc, #44]	@ (8006364 <checkDemoModCalisma+0x250>)
 8006336:	f002 fe68 	bl	800900a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800633a:	4b07      	ldr	r3, [pc, #28]	@ (8006358 <checkDemoModCalisma+0x244>)
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006340:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <checkDemoModCalisma+0x258>)
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e027      	b.n	8006398 <checkDemoModCalisma+0x284>
 8006348:	2000022e 	.word	0x2000022e
 800634c:	20000262 	.word	0x20000262
 8006350:	2000022d 	.word	0x2000022d
 8006354:	40011000 	.word	0x40011000
 8006358:	20000269 	.word	0x20000269
 800635c:	2000026a 	.word	0x2000026a
 8006360:	2000026b 	.word	0x2000026b
 8006364:	40010c00 	.word	0x40010c00
 8006368:	20000268 	.word	0x20000268
 800636c:	2000024e 	.word	0x2000024e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006370:	2104      	movs	r1, #4
 8006372:	48a0      	ldr	r0, [pc, #640]	@ (80065f4 <checkDemoModCalisma+0x4e0>)
 8006374:	f002 fe32 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006378:	4603      	mov	r3, r0
 800637a:	2b01      	cmp	r3, #1
 800637c:	d10c      	bne.n	8006398 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800637e:	2200      	movs	r2, #0
 8006380:	2102      	movs	r1, #2
 8006382:	489d      	ldr	r0, [pc, #628]	@ (80065f8 <checkDemoModCalisma+0x4e4>)
 8006384:	f002 fe41 	bl	800900a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006388:	2200      	movs	r2, #0
 800638a:	2101      	movs	r1, #1
 800638c:	489a      	ldr	r0, [pc, #616]	@ (80065f8 <checkDemoModCalisma+0x4e4>)
 800638e:	f002 fe3c 	bl	800900a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006392:	4b9a      	ldr	r3, [pc, #616]	@ (80065fc <checkDemoModCalisma+0x4e8>)
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006398:	2104      	movs	r1, #4
 800639a:	4896      	ldr	r0, [pc, #600]	@ (80065f4 <checkDemoModCalisma+0x4e0>)
 800639c:	f002 fe1e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d10d      	bne.n	80063c2 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80063a6:	2201      	movs	r2, #1
 80063a8:	2180      	movs	r1, #128	@ 0x80
 80063aa:	4895      	ldr	r0, [pc, #596]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 80063ac:	f002 fe2d 	bl	800900a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80063b0:	2201      	movs	r2, #1
 80063b2:	2120      	movs	r1, #32
 80063b4:	4892      	ldr	r0, [pc, #584]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 80063b6:	f002 fe28 	bl	800900a <HAL_GPIO_WritePin>
			timer3 = millis;
 80063ba:	4b92      	ldr	r3, [pc, #584]	@ (8006604 <checkDemoModCalisma+0x4f0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a92      	ldr	r2, [pc, #584]	@ (8006608 <checkDemoModCalisma+0x4f4>)
 80063c0:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80063c2:	4b90      	ldr	r3, [pc, #576]	@ (8006604 <checkDemoModCalisma+0x4f0>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4b90      	ldr	r3, [pc, #576]	@ (8006608 <checkDemoModCalisma+0x4f4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d909      	bls.n	80063e4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80063d0:	2200      	movs	r2, #0
 80063d2:	2180      	movs	r1, #128	@ 0x80
 80063d4:	488a      	ldr	r0, [pc, #552]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 80063d6:	f002 fe18 	bl	800900a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80063da:	2200      	movs	r2, #0
 80063dc:	2120      	movs	r1, #32
 80063de:	4888      	ldr	r0, [pc, #544]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 80063e0:	f002 fe13 	bl	800900a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80063e4:	2102      	movs	r1, #2
 80063e6:	4883      	ldr	r0, [pc, #524]	@ (80065f4 <checkDemoModCalisma+0x4e0>)
 80063e8:	f002 fdf8 	bl	8008fdc <HAL_GPIO_ReadPin>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d108      	bne.n	8006404 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80063f2:	2201      	movs	r2, #1
 80063f4:	2140      	movs	r1, #64	@ 0x40
 80063f6:	4882      	ldr	r0, [pc, #520]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 80063f8:	f002 fe07 	bl	800900a <HAL_GPIO_WritePin>
			timer3 = millis;
 80063fc:	4b81      	ldr	r3, [pc, #516]	@ (8006604 <checkDemoModCalisma+0x4f0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a81      	ldr	r2, [pc, #516]	@ (8006608 <checkDemoModCalisma+0x4f4>)
 8006402:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006404:	4b7f      	ldr	r3, [pc, #508]	@ (8006604 <checkDemoModCalisma+0x4f0>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b7f      	ldr	r3, [pc, #508]	@ (8006608 <checkDemoModCalisma+0x4f4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b04      	cmp	r3, #4
 8006410:	d904      	bls.n	800641c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006412:	2200      	movs	r2, #0
 8006414:	2140      	movs	r1, #64	@ 0x40
 8006416:	487a      	ldr	r0, [pc, #488]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 8006418:	f002 fdf7 	bl	800900a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800641c:	4b7b      	ldr	r3, [pc, #492]	@ (800660c <checkDemoModCalisma+0x4f8>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d058      	beq.n	80064d6 <checkDemoModCalisma+0x3c2>
 8006424:	4b7a      	ldr	r3, [pc, #488]	@ (8006610 <checkDemoModCalisma+0x4fc>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d054      	beq.n	80064d6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800642c:	4b79      	ldr	r3, [pc, #484]	@ (8006614 <checkDemoModCalisma+0x500>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	3301      	adds	r3, #1
 8006432:	b2da      	uxtb	r2, r3
 8006434:	4b77      	ldr	r3, [pc, #476]	@ (8006614 <checkDemoModCalisma+0x500>)
 8006436:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006438:	4b76      	ldr	r3, [pc, #472]	@ (8006614 <checkDemoModCalisma+0x500>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b09      	cmp	r3, #9
 800643e:	d908      	bls.n	8006452 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006440:	4b74      	ldr	r3, [pc, #464]	@ (8006614 <checkDemoModCalisma+0x500>)
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006446:	4b74      	ldr	r3, [pc, #464]	@ (8006618 <checkDemoModCalisma+0x504>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	b2da      	uxtb	r2, r3
 800644e:	4b72      	ldr	r3, [pc, #456]	@ (8006618 <checkDemoModCalisma+0x504>)
 8006450:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006452:	4b71      	ldr	r3, [pc, #452]	@ (8006618 <checkDemoModCalisma+0x504>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b09      	cmp	r3, #9
 8006458:	d908      	bls.n	800646c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800645a:	4b6f      	ldr	r3, [pc, #444]	@ (8006618 <checkDemoModCalisma+0x504>)
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006460:	4b6e      	ldr	r3, [pc, #440]	@ (800661c <checkDemoModCalisma+0x508>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	3301      	adds	r3, #1
 8006466:	b2da      	uxtb	r2, r3
 8006468:	4b6c      	ldr	r3, [pc, #432]	@ (800661c <checkDemoModCalisma+0x508>)
 800646a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800646c:	4b6b      	ldr	r3, [pc, #428]	@ (800661c <checkDemoModCalisma+0x508>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b09      	cmp	r3, #9
 8006472:	d908      	bls.n	8006486 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006474:	4b69      	ldr	r3, [pc, #420]	@ (800661c <checkDemoModCalisma+0x508>)
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800647a:	4b69      	ldr	r3, [pc, #420]	@ (8006620 <checkDemoModCalisma+0x50c>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	3301      	adds	r3, #1
 8006480:	b2da      	uxtb	r2, r3
 8006482:	4b67      	ldr	r3, [pc, #412]	@ (8006620 <checkDemoModCalisma+0x50c>)
 8006484:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006486:	4b66      	ldr	r3, [pc, #408]	@ (8006620 <checkDemoModCalisma+0x50c>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b09      	cmp	r3, #9
 800648c:	d908      	bls.n	80064a0 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800648e:	4b64      	ldr	r3, [pc, #400]	@ (8006620 <checkDemoModCalisma+0x50c>)
 8006490:	2200      	movs	r2, #0
 8006492:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006494:	4b63      	ldr	r3, [pc, #396]	@ (8006624 <checkDemoModCalisma+0x510>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	b2da      	uxtb	r2, r3
 800649c:	4b61      	ldr	r3, [pc, #388]	@ (8006624 <checkDemoModCalisma+0x510>)
 800649e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80064a0:	4b60      	ldr	r3, [pc, #384]	@ (8006624 <checkDemoModCalisma+0x510>)
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	4b60      	ldr	r3, [pc, #384]	@ (8006628 <checkDemoModCalisma+0x514>)
 80064a6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80064aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006620 <checkDemoModCalisma+0x50c>)
 80064ac:	781a      	ldrb	r2, [r3, #0]
 80064ae:	4b5e      	ldr	r3, [pc, #376]	@ (8006628 <checkDemoModCalisma+0x514>)
 80064b0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80064b2:	4b5a      	ldr	r3, [pc, #360]	@ (800661c <checkDemoModCalisma+0x508>)
 80064b4:	781a      	ldrb	r2, [r3, #0]
 80064b6:	4b5c      	ldr	r3, [pc, #368]	@ (8006628 <checkDemoModCalisma+0x514>)
 80064b8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80064ba:	4b57      	ldr	r3, [pc, #348]	@ (8006618 <checkDemoModCalisma+0x504>)
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	4b5a      	ldr	r3, [pc, #360]	@ (8006628 <checkDemoModCalisma+0x514>)
 80064c0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80064c2:	4b54      	ldr	r3, [pc, #336]	@ (8006614 <checkDemoModCalisma+0x500>)
 80064c4:	781a      	ldrb	r2, [r3, #0]
 80064c6:	4b58      	ldr	r3, [pc, #352]	@ (8006628 <checkDemoModCalisma+0x514>)
 80064c8:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80064ca:	4b58      	ldr	r3, [pc, #352]	@ (800662c <checkDemoModCalisma+0x518>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80064d0:	4b4f      	ldr	r3, [pc, #316]	@ (8006610 <checkDemoModCalisma+0x4fc>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80064d6:	4b56      	ldr	r3, [pc, #344]	@ (8006630 <checkDemoModCalisma+0x51c>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 8087 	bne.w	80065ee <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80064e0:	4a54      	ldr	r2, [pc, #336]	@ (8006634 <checkDemoModCalisma+0x520>)
 80064e2:	2101      	movs	r1, #1
 80064e4:	2002      	movs	r0, #2
 80064e6:	f001 fa4f 	bl	8007988 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80064ea:	4a53      	ldr	r2, [pc, #332]	@ (8006638 <checkDemoModCalisma+0x524>)
 80064ec:	2101      	movs	r1, #1
 80064ee:	2001      	movs	r0, #1
 80064f0:	f001 fa4a 	bl	8007988 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80064f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006624 <checkDemoModCalisma+0x510>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	220a      	movs	r2, #10
 80064fa:	4950      	ldr	r1, [pc, #320]	@ (800663c <checkDemoModCalisma+0x528>)
 80064fc:	4618      	mov	r0, r3
 80064fe:	f005 fd99 	bl	800c034 <itoa>
			lcd_print(2,12,snum);
 8006502:	4a4e      	ldr	r2, [pc, #312]	@ (800663c <checkDemoModCalisma+0x528>)
 8006504:	210c      	movs	r1, #12
 8006506:	2002      	movs	r0, #2
 8006508:	f001 fa3e 	bl	8007988 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 800650c:	4b44      	ldr	r3, [pc, #272]	@ (8006620 <checkDemoModCalisma+0x50c>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	220a      	movs	r2, #10
 8006512:	494a      	ldr	r1, [pc, #296]	@ (800663c <checkDemoModCalisma+0x528>)
 8006514:	4618      	mov	r0, r3
 8006516:	f005 fd8d 	bl	800c034 <itoa>
			lcd_print(2,13,snum);
 800651a:	4a48      	ldr	r2, [pc, #288]	@ (800663c <checkDemoModCalisma+0x528>)
 800651c:	210d      	movs	r1, #13
 800651e:	2002      	movs	r0, #2
 8006520:	f001 fa32 	bl	8007988 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006524:	4b3d      	ldr	r3, [pc, #244]	@ (800661c <checkDemoModCalisma+0x508>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	220a      	movs	r2, #10
 800652a:	4944      	ldr	r1, [pc, #272]	@ (800663c <checkDemoModCalisma+0x528>)
 800652c:	4618      	mov	r0, r3
 800652e:	f005 fd81 	bl	800c034 <itoa>
			lcd_print(2,14,snum);
 8006532:	4a42      	ldr	r2, [pc, #264]	@ (800663c <checkDemoModCalisma+0x528>)
 8006534:	210e      	movs	r1, #14
 8006536:	2002      	movs	r0, #2
 8006538:	f001 fa26 	bl	8007988 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800653c:	4b36      	ldr	r3, [pc, #216]	@ (8006618 <checkDemoModCalisma+0x504>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	220a      	movs	r2, #10
 8006542:	493e      	ldr	r1, [pc, #248]	@ (800663c <checkDemoModCalisma+0x528>)
 8006544:	4618      	mov	r0, r3
 8006546:	f005 fd75 	bl	800c034 <itoa>
			lcd_print(2,15,snum);
 800654a:	4a3c      	ldr	r2, [pc, #240]	@ (800663c <checkDemoModCalisma+0x528>)
 800654c:	210f      	movs	r1, #15
 800654e:	2002      	movs	r0, #2
 8006550:	f001 fa1a 	bl	8007988 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006554:	4b2f      	ldr	r3, [pc, #188]	@ (8006614 <checkDemoModCalisma+0x500>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	220a      	movs	r2, #10
 800655a:	4938      	ldr	r1, [pc, #224]	@ (800663c <checkDemoModCalisma+0x528>)
 800655c:	4618      	mov	r0, r3
 800655e:	f005 fd69 	bl	800c034 <itoa>
			lcd_print(2,16,snum);
 8006562:	4a36      	ldr	r2, [pc, #216]	@ (800663c <checkDemoModCalisma+0x528>)
 8006564:	2110      	movs	r1, #16
 8006566:	2002      	movs	r0, #2
 8006568:	f001 fa0e 	bl	8007988 <lcd_print>
			mesajYazildi=1;
 800656c:	4b34      	ldr	r3, [pc, #208]	@ (8006640 <checkDemoModCalisma+0x52c>)
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006572:	e03c      	b.n	80065ee <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006574:	4b33      	ldr	r3, [pc, #204]	@ (8006644 <checkDemoModCalisma+0x530>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d003      	beq.n	8006584 <checkDemoModCalisma+0x470>
 800657c:	4b2c      	ldr	r3, [pc, #176]	@ (8006630 <checkDemoModCalisma+0x51c>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d134      	bne.n	80065ee <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006584:	2200      	movs	r2, #0
 8006586:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800658a:	481b      	ldr	r0, [pc, #108]	@ (80065f8 <checkDemoModCalisma+0x4e4>)
 800658c:	f002 fd3d 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006590:	2200      	movs	r2, #0
 8006592:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006596:	4818      	ldr	r0, [pc, #96]	@ (80065f8 <checkDemoModCalisma+0x4e4>)
 8006598:	f002 fd37 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800659c:	2200      	movs	r2, #0
 800659e:	2104      	movs	r1, #4
 80065a0:	4815      	ldr	r0, [pc, #84]	@ (80065f8 <checkDemoModCalisma+0x4e4>)
 80065a2:	f002 fd32 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80065a6:	2200      	movs	r2, #0
 80065a8:	2102      	movs	r1, #2
 80065aa:	4813      	ldr	r0, [pc, #76]	@ (80065f8 <checkDemoModCalisma+0x4e4>)
 80065ac:	f002 fd2d 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80065b0:	2200      	movs	r2, #0
 80065b2:	2101      	movs	r1, #1
 80065b4:	4810      	ldr	r0, [pc, #64]	@ (80065f8 <checkDemoModCalisma+0x4e4>)
 80065b6:	f002 fd28 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80065ba:	2200      	movs	r2, #0
 80065bc:	2120      	movs	r1, #32
 80065be:	480d      	ldr	r0, [pc, #52]	@ (80065f4 <checkDemoModCalisma+0x4e0>)
 80065c0:	f002 fd23 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80065c4:	2200      	movs	r2, #0
 80065c6:	2110      	movs	r1, #16
 80065c8:	480a      	ldr	r0, [pc, #40]	@ (80065f4 <checkDemoModCalisma+0x4e0>)
 80065ca:	f002 fd1e 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80065ce:	2200      	movs	r2, #0
 80065d0:	2180      	movs	r1, #128	@ 0x80
 80065d2:	480b      	ldr	r0, [pc, #44]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 80065d4:	f002 fd19 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80065d8:	2200      	movs	r2, #0
 80065da:	2140      	movs	r1, #64	@ 0x40
 80065dc:	4808      	ldr	r0, [pc, #32]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 80065de:	f002 fd14 	bl	800900a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80065e2:	2200      	movs	r2, #0
 80065e4:	2120      	movs	r1, #32
 80065e6:	4806      	ldr	r0, [pc, #24]	@ (8006600 <checkDemoModCalisma+0x4ec>)
 80065e8:	f002 fd0f 	bl	800900a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80065ec:	e7ff      	b.n	80065ee <checkDemoModCalisma+0x4da>
 80065ee:	bf00      	nop
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	40011000 	.word	0x40011000
 80065f8:	40010c00 	.word	0x40010c00
 80065fc:	20000269 	.word	0x20000269
 8006600:	40010800 	.word	0x40010800
 8006604:	200001e8 	.word	0x200001e8
 8006608:	200001f8 	.word	0x200001f8
 800660c:	20000268 	.word	0x20000268
 8006610:	2000024e 	.word	0x2000024e
 8006614:	2000020d 	.word	0x2000020d
 8006618:	2000020e 	.word	0x2000020e
 800661c:	20000000 	.word	0x20000000
 8006620:	20000001 	.word	0x20000001
 8006624:	2000020f 	.word	0x2000020f
 8006628:	20000138 	.word	0x20000138
 800662c:	2000023c 	.word	0x2000023c
 8006630:	2000022d 	.word	0x2000022d
 8006634:	0800d81c 	.word	0x0800d81c
 8006638:	0800d828 	.word	0x0800d828
 800663c:	200001a8 	.word	0x200001a8
 8006640:	20000244 	.word	0x20000244
 8006644:	2000022e 	.word	0x2000022e

08006648 <mainLoop>:

void mainLoop() {
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800664e:	f7fe f923 	bl	8004898 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006652:	2101      	movs	r1, #1
 8006654:	48a8      	ldr	r0, [pc, #672]	@ (80068f8 <mainLoop+0x2b0>)
 8006656:	f002 fcc1 	bl	8008fdc <HAL_GPIO_ReadPin>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d136      	bne.n	80066ce <mainLoop+0x86>
 8006660:	2108      	movs	r1, #8
 8006662:	48a6      	ldr	r0, [pc, #664]	@ (80068fc <mainLoop+0x2b4>)
 8006664:	f002 fcba 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d12f      	bne.n	80066ce <mainLoop+0x86>
 800666e:	2102      	movs	r1, #2
 8006670:	48a1      	ldr	r0, [pc, #644]	@ (80068f8 <mainLoop+0x2b0>)
 8006672:	f002 fcb3 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d128      	bne.n	80066ce <mainLoop+0x86>
 800667c:	2104      	movs	r1, #4
 800667e:	489e      	ldr	r0, [pc, #632]	@ (80068f8 <mainLoop+0x2b0>)
 8006680:	f002 fcac 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d121      	bne.n	80066ce <mainLoop+0x86>
 800668a:	2108      	movs	r1, #8
 800668c:	489a      	ldr	r0, [pc, #616]	@ (80068f8 <mainLoop+0x2b0>)
 800668e:	f002 fca5 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d11a      	bne.n	80066ce <mainLoop+0x86>
 8006698:	2180      	movs	r1, #128	@ 0x80
 800669a:	4898      	ldr	r0, [pc, #608]	@ (80068fc <mainLoop+0x2b4>)
 800669c:	f002 fc9e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d113      	bne.n	80066ce <mainLoop+0x86>
 80066a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80066aa:	4894      	ldr	r0, [pc, #592]	@ (80068fc <mainLoop+0x2b4>)
 80066ac:	f002 fc96 	bl	8008fdc <HAL_GPIO_ReadPin>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d10b      	bne.n	80066ce <mainLoop+0x86>
 80066b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80066ba:	4890      	ldr	r0, [pc, #576]	@ (80068fc <mainLoop+0x2b4>)
 80066bc:	f002 fc8e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d103      	bne.n	80066ce <mainLoop+0x86>
			butonKontrol=0;
 80066c6:	4b8e      	ldr	r3, [pc, #568]	@ (8006900 <mainLoop+0x2b8>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e003      	b.n	80066d6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80066ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006904 <mainLoop+0x2bc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a8d      	ldr	r2, [pc, #564]	@ (8006908 <mainLoop+0x2c0>)
 80066d4:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 80066d6:	f7fe f8ab 	bl	8004830 <buttonCheck>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d003      	beq.n	80066e8 <mainLoop+0xa0>
			backLightTimer = millis;
 80066e0:	4b88      	ldr	r3, [pc, #544]	@ (8006904 <mainLoop+0x2bc>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a88      	ldr	r2, [pc, #544]	@ (8006908 <mainLoop+0x2c0>)
 80066e6:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80066e8:	4b88      	ldr	r3, [pc, #544]	@ (800690c <mainLoop+0x2c4>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d036      	beq.n	800675e <mainLoop+0x116>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80066f0:	bf00      	nop
 80066f2:	4887      	ldr	r0, [pc, #540]	@ (8006910 <mainLoop+0x2c8>)
 80066f4:	f003 fa9b 	bl	8009c2e <HAL_I2C_GetError>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d0f9      	beq.n	80066f2 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80066fe:	bf00      	nop
 8006700:	4883      	ldr	r0, [pc, #524]	@ (8006910 <mainLoop+0x2c8>)
 8006702:	f003 fa87 	bl	8009c14 <HAL_I2C_GetState>
 8006706:	4603      	mov	r3, r0
 8006708:	2b20      	cmp	r3, #32
 800670a:	d1f9      	bne.n	8006700 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800670c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006710:	9302      	str	r3, [sp, #8]
 8006712:	236e      	movs	r3, #110	@ 0x6e
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	4b7f      	ldr	r3, [pc, #508]	@ (8006914 <mainLoop+0x2cc>)
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	236e      	movs	r3, #110	@ 0x6e
 800671c:	2200      	movs	r2, #0
 800671e:	21a0      	movs	r1, #160	@ 0xa0
 8006720:	487b      	ldr	r0, [pc, #492]	@ (8006910 <mainLoop+0x2c8>)
 8006722:	f002 ff15 	bl	8009550 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006726:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800672a:	f001 fe87 	bl	800843c <HAL_Delay>

		  hafizaYaz=0;
 800672e:	4b77      	ldr	r3, [pc, #476]	@ (800690c <mainLoop+0x2c4>)
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
		  if(dilSecim == 0) {
 8006734:	4b78      	ldr	r3, [pc, #480]	@ (8006918 <mainLoop+0x2d0>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 800673c:	4a77      	ldr	r2, [pc, #476]	@ (800691c <mainLoop+0x2d4>)
 800673e:	2101      	movs	r1, #1
 8006740:	2002      	movs	r0, #2
 8006742:	f001 f921 	bl	8007988 <lcd_print>
 8006746:	e004      	b.n	8006752 <mainLoop+0x10a>
		  } else {
			  lcd_print(2,1,"Data Wrote      ");
 8006748:	4a75      	ldr	r2, [pc, #468]	@ (8006920 <mainLoop+0x2d8>)
 800674a:	2101      	movs	r1, #1
 800674c:	2002      	movs	r0, #2
 800674e:	f001 f91b 	bl	8007988 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006756:	f001 fe71 	bl	800843c <HAL_Delay>
		  lcd_clear();
 800675a:	f001 f941 	bl	80079e0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800675e:	4b71      	ldr	r3, [pc, #452]	@ (8006924 <mainLoop+0x2dc>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f083 0301 	eor.w	r3, r3, #1
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d061      	beq.n	8006830 <mainLoop+0x1e8>
 800676c:	4868      	ldr	r0, [pc, #416]	@ (8006910 <mainLoop+0x2c8>)
 800676e:	f003 fa51 	bl	8009c14 <HAL_I2C_GetState>
 8006772:	4603      	mov	r3, r0
 8006774:	2b20      	cmp	r3, #32
 8006776:	d15b      	bne.n	8006830 <mainLoop+0x1e8>
		  if(ilkOkuma==0) {
 8006778:	4b6b      	ldr	r3, [pc, #428]	@ (8006928 <mainLoop+0x2e0>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f083 0301 	eor.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d03c      	beq.n	8006800 <mainLoop+0x1b8>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006786:	4a69      	ldr	r2, [pc, #420]	@ (800692c <mainLoop+0x2e4>)
 8006788:	2101      	movs	r1, #1
 800678a:	2001      	movs	r0, #1
 800678c:	f001 f8fc 	bl	8007988 <lcd_print>
			  if(dilSecim == 0) {
 8006790:	4b61      	ldr	r3, [pc, #388]	@ (8006918 <mainLoop+0x2d0>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <mainLoop+0x15c>
				  lcd_print(2,1,"Data Okunuyor...");
 8006798:	4a65      	ldr	r2, [pc, #404]	@ (8006930 <mainLoop+0x2e8>)
 800679a:	2101      	movs	r1, #1
 800679c:	2002      	movs	r0, #2
 800679e:	f001 f8f3 	bl	8007988 <lcd_print>
 80067a2:	e004      	b.n	80067ae <mainLoop+0x166>
			  } else {
				  lcd_print(2,1,"Data Reading... ");
 80067a4:	4a63      	ldr	r2, [pc, #396]	@ (8006934 <mainLoop+0x2ec>)
 80067a6:	2101      	movs	r1, #1
 80067a8:	2002      	movs	r0, #2
 80067aa:	f001 f8ed 	bl	8007988 <lcd_print>
			  }
			  HAL_Delay(1000);
 80067ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80067b2:	f001 fe43 	bl	800843c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80067b6:	bf00      	nop
 80067b8:	4855      	ldr	r0, [pc, #340]	@ (8006910 <mainLoop+0x2c8>)
 80067ba:	f003 fa38 	bl	8009c2e <HAL_I2C_GetError>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d0f9      	beq.n	80067b8 <mainLoop+0x170>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80067c4:	e003      	b.n	80067ce <mainLoop+0x186>
				  HAL_Delay(1000);
 80067c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80067ca:	f001 fe37 	bl	800843c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80067ce:	4850      	ldr	r0, [pc, #320]	@ (8006910 <mainLoop+0x2c8>)
 80067d0:	f003 fa20 	bl	8009c14 <HAL_I2C_GetState>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d1f5      	bne.n	80067c6 <mainLoop+0x17e>
			  }

			  if(dilSecim == 0) {
 80067da:	4b4f      	ldr	r3, [pc, #316]	@ (8006918 <mainLoop+0x2d0>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <mainLoop+0x1a6>
				  lcd_print(2,1,"Data Okundu.    ");
 80067e2:	4a55      	ldr	r2, [pc, #340]	@ (8006938 <mainLoop+0x2f0>)
 80067e4:	2101      	movs	r1, #1
 80067e6:	2002      	movs	r0, #2
 80067e8:	f001 f8ce 	bl	8007988 <lcd_print>
 80067ec:	e004      	b.n	80067f8 <mainLoop+0x1b0>
			  } else {
				  lcd_print(2,1,"Data Read.      ");
 80067ee:	4a53      	ldr	r2, [pc, #332]	@ (800693c <mainLoop+0x2f4>)
 80067f0:	2101      	movs	r1, #1
 80067f2:	2002      	movs	r0, #2
 80067f4:	f001 f8c8 	bl	8007988 <lcd_print>
			  }

			  ilkOkuma=1;
 80067f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006928 <mainLoop+0x2e0>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e010      	b.n	8006822 <mainLoop+0x1da>
		  } else {
			  if(dilSecim == 0) {
 8006800:	4b45      	ldr	r3, [pc, #276]	@ (8006918 <mainLoop+0x2d0>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d105      	bne.n	8006814 <mainLoop+0x1cc>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006808:	4a4d      	ldr	r2, [pc, #308]	@ (8006940 <mainLoop+0x2f8>)
 800680a:	2101      	movs	r1, #1
 800680c:	2002      	movs	r0, #2
 800680e:	f001 f8bb 	bl	8007988 <lcd_print>
 8006812:	e004      	b.n	800681e <mainLoop+0x1d6>
			  } else {
				  lcd_print(2,1,"Value Saved     ");
 8006814:	4a4b      	ldr	r2, [pc, #300]	@ (8006944 <mainLoop+0x2fc>)
 8006816:	2101      	movs	r1, #1
 8006818:	2002      	movs	r0, #2
 800681a:	f001 f8b5 	bl	8007988 <lcd_print>
			  }
			  lcd_clear();
 800681e:	f001 f8df 	bl	80079e0 <lcd_clear>
		  }

		  lcd_clear();
 8006822:	f001 f8dd 	bl	80079e0 <lcd_clear>

		  eepromKontrol();
 8006826:	f7f9 fd05 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 800682a:	4b3e      	ldr	r3, [pc, #248]	@ (8006924 <mainLoop+0x2dc>)
 800682c:	2201      	movs	r2, #1
 800682e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006830:	4b45      	ldr	r3, [pc, #276]	@ (8006948 <mainLoop+0x300>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11c      	bne.n	8006872 <mainLoop+0x22a>
 8006838:	4b44      	ldr	r3, [pc, #272]	@ (800694c <mainLoop+0x304>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	f083 0301 	eor.w	r3, r3, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d015      	beq.n	8006872 <mainLoop+0x22a>
 8006846:	4b42      	ldr	r3, [pc, #264]	@ (8006950 <mainLoop+0x308>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d111      	bne.n	8006872 <mainLoop+0x22a>
			lcd_clear();
 800684e:	f001 f8c7 	bl	80079e0 <lcd_clear>
			HAL_Delay(10);
 8006852:	200a      	movs	r0, #10
 8006854:	f001 fdf2 	bl	800843c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006858:	4a3e      	ldr	r2, [pc, #248]	@ (8006954 <mainLoop+0x30c>)
 800685a:	2101      	movs	r1, #1
 800685c:	2001      	movs	r0, #1
 800685e:	f001 f893 	bl	8007988 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006862:	4a3d      	ldr	r2, [pc, #244]	@ (8006958 <mainLoop+0x310>)
 8006864:	2101      	movs	r1, #1
 8006866:	2002      	movs	r0, #2
 8006868:	f001 f88e 	bl	8007988 <lcd_print>
			mesajYazildi=1;
 800686c:	4b37      	ldr	r3, [pc, #220]	@ (800694c <mainLoop+0x304>)
 800686e:	2201      	movs	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006872:	4b35      	ldr	r3, [pc, #212]	@ (8006948 <mainLoop+0x300>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d112      	bne.n	80068a0 <mainLoop+0x258>
 800687a:	2102      	movs	r1, #2
 800687c:	481e      	ldr	r0, [pc, #120]	@ (80068f8 <mainLoop+0x2b0>)
 800687e:	f002 fbad 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d10b      	bne.n	80068a0 <mainLoop+0x258>
 8006888:	2104      	movs	r1, #4
 800688a:	481b      	ldr	r0, [pc, #108]	@ (80068f8 <mainLoop+0x2b0>)
 800688c:	f002 fba6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006890:	4603      	mov	r3, r0
 8006892:	2b01      	cmp	r3, #1
 8006894:	d104      	bne.n	80068a0 <mainLoop+0x258>
			menuGiris=1;
 8006896:	4b2c      	ldr	r3, [pc, #176]	@ (8006948 <mainLoop+0x300>)
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800689c:	f001 f8a0 	bl	80079e0 <lcd_clear>
		}

		if(menuGiris==1) {
 80068a0:	4b29      	ldr	r3, [pc, #164]	@ (8006948 <mainLoop+0x300>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <mainLoop+0x264>
			menu();
 80068a8:	f7fa fd62 	bl	8001370 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80068ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80068b0:	4812      	ldr	r0, [pc, #72]	@ (80068fc <mainLoop+0x2b4>)
 80068b2:	f002 fbc2 	bl	800903a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80068b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80068ba:	4828      	ldr	r0, [pc, #160]	@ (800695c <mainLoop+0x314>)
 80068bc:	f002 fb8e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <mainLoop+0x294>
 80068c6:	4b26      	ldr	r3, [pc, #152]	@ (8006960 <mainLoop+0x318>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f083 0301 	eor.w	r3, r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <mainLoop+0x294>
			stopVar=1;
 80068d4:	4b23      	ldr	r3, [pc, #140]	@ (8006964 <mainLoop+0x31c>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	e002      	b.n	80068e2 <mainLoop+0x29a>
		} else {
			stopVar=0;
 80068dc:	4b21      	ldr	r3, [pc, #132]	@ (8006964 <mainLoop+0x31c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80068e2:	f7fd ffef 	bl	80048c4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80068e6:	f7fe f821 	bl	800492c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80068ea:	f7fe f865 	bl	80049b8 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80068ee:	f7fe f8b5 	bl	8004a5c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80068f2:	f7ff fc0f 	bl	8006114 <checkDemoModCalisma>
		checkLCDBacklight();
 80068f6:	e6aa      	b.n	800664e <mainLoop+0x6>
 80068f8:	40010800 	.word	0x40010800
 80068fc:	40011000 	.word	0x40011000
 8006900:	2000023f 	.word	0x2000023f
 8006904:	200001e8 	.word	0x200001e8
 8006908:	20000204 	.word	0x20000204
 800690c:	2000023c 	.word	0x2000023c
 8006910:	200003bc 	.word	0x200003bc
 8006914:	20000138 	.word	0x20000138
 8006918:	20000231 	.word	0x20000231
 800691c:	0800d83c 	.word	0x0800d83c
 8006920:	0800d850 	.word	0x0800d850
 8006924:	2000023d 	.word	0x2000023d
 8006928:	2000023e 	.word	0x2000023e
 800692c:	0800d864 	.word	0x0800d864
 8006930:	0800d878 	.word	0x0800d878
 8006934:	0800d88c 	.word	0x0800d88c
 8006938:	0800d8a0 	.word	0x0800d8a0
 800693c:	0800d8b4 	.word	0x0800d8b4
 8006940:	0800d8c8 	.word	0x0800d8c8
 8006944:	0800d8dc 	.word	0x0800d8dc
 8006948:	2000022d 	.word	0x2000022d
 800694c:	20000244 	.word	0x20000244
 8006950:	2000022e 	.word	0x2000022e
 8006954:	0800d8f0 	.word	0x0800d8f0
 8006958:	0800d904 	.word	0x0800d904
 800695c:	40010c00 	.word	0x40010c00
 8006960:	20000265 	.word	0x20000265
 8006964:	20000262 	.word	0x20000262

08006968 <takeMachineID>:
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void takeMachineID() {
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 800696e:	2001      	movs	r0, #1
 8006970:	f001 f868 	bl	8007a44 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8006974:	220c      	movs	r2, #12
 8006976:	2100      	movs	r1, #0
 8006978:	48a3      	ldr	r0, [pc, #652]	@ (8006c08 <takeMachineID+0x2a0>)
 800697a:	f005 fc97 	bl	800c2ac <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 800697e:	2305      	movs	r3, #5
 8006980:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006982:	2303      	movs	r3, #3
 8006984:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 800698a:	4ba0      	ldr	r3, [pc, #640]	@ (8006c0c <takeMachineID+0x2a4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8006990:	2100      	movs	r1, #0
 8006992:	2001      	movs	r0, #1
 8006994:	f7fa f9fc 	bl	8000d90 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006998:	2108      	movs	r1, #8
 800699a:	489d      	ldr	r0, [pc, #628]	@ (8006c10 <takeMachineID+0x2a8>)
 800699c:	f002 fb1e 	bl	8008fdc <HAL_GPIO_ReadPin>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d139      	bne.n	8006a1a <takeMachineID+0xb2>
        	lcd_cursor(0);
 80069a6:	2000      	movs	r0, #0
 80069a8:	f001 f84c 	bl	8007a44 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 80069ac:	f000 fe2e 	bl	800760c <checkEEPROM4ID>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d01f      	beq.n	80069f6 <takeMachineID+0x8e>
        		lcd_clear();
 80069b6:	f001 f813 	bl	80079e0 <lcd_clear>
        		if(dilSecim == 0) {
 80069ba:	4b96      	ldr	r3, [pc, #600]	@ (8006c14 <takeMachineID+0x2ac>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <takeMachineID+0x70>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 80069c2:	4a95      	ldr	r2, [pc, #596]	@ (8006c18 <takeMachineID+0x2b0>)
 80069c4:	2101      	movs	r1, #1
 80069c6:	2001      	movs	r0, #1
 80069c8:	f000 ffde 	bl	8007988 <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 80069cc:	4a93      	ldr	r2, [pc, #588]	@ (8006c1c <takeMachineID+0x2b4>)
 80069ce:	2101      	movs	r1, #1
 80069d0:	2002      	movs	r0, #2
 80069d2:	f000 ffd9 	bl	8007988 <lcd_print>
 80069d6:	e009      	b.n	80069ec <takeMachineID+0x84>
        		} else {
        			lcd_print(1, 1, " ID MUST BE  12 ");
 80069d8:	4a91      	ldr	r2, [pc, #580]	@ (8006c20 <takeMachineID+0x2b8>)
 80069da:	2101      	movs	r1, #1
 80069dc:	2001      	movs	r0, #1
 80069de:	f000 ffd3 	bl	8007988 <lcd_print>
        			lcd_print(2, 1, "   CHARACTERS   ");
 80069e2:	4a90      	ldr	r2, [pc, #576]	@ (8006c24 <takeMachineID+0x2bc>)
 80069e4:	2101      	movs	r1, #1
 80069e6:	2002      	movs	r0, #2
 80069e8:	f000 ffce 	bl	8007988 <lcd_print>
        		}
        		//lcd_print(1, 1, mustBe12Text);
        		//lcd_print(2, 1, mustBe122Text);
        		HAL_Delay(1250);
 80069ec:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80069f0:	f001 fd24 	bl	800843c <HAL_Delay>

        		goto mainSection;
 80069f4:	e7bb      	b.n	800696e <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80069f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80069fa:	9302      	str	r3, [sp, #8]
 80069fc:	236e      	movs	r3, #110	@ 0x6e
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	4b89      	ldr	r3, [pc, #548]	@ (8006c28 <takeMachineID+0x2c0>)
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	236e      	movs	r3, #110	@ 0x6e
 8006a06:	2200      	movs	r2, #0
 8006a08:	21a0      	movs	r1, #160	@ 0xa0
 8006a0a:	4888      	ldr	r0, [pc, #544]	@ (8006c2c <takeMachineID+0x2c4>)
 8006a0c:	f002 fda0 	bl	8009550 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006a10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006a14:	f001 fd12 	bl	800843c <HAL_Delay>

            	break;
 8006a18:	e138      	b.n	8006c8c <takeMachineID+0x324>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	487c      	ldr	r0, [pc, #496]	@ (8006c10 <takeMachineID+0x2a8>)
 8006a1e:	f002 fadd 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d111      	bne.n	8006a4c <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b07      	cmp	r3, #7
 8006a2c:	d102      	bne.n	8006a34 <takeMachineID+0xcc>
        		cursorPosition = 10;
 8006a2e:	230a      	movs	r3, #10
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	e008      	b.n	8006a46 <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b0e      	cmp	r3, #14
 8006a38:	d102      	bne.n	8006a40 <takeMachineID+0xd8>
                cursorPosition = 3;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	e002      	b.n	8006a46 <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006a46:	2096      	movs	r0, #150	@ 0x96
 8006a48:	f001 fcf8 	bl	800843c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006a4c:	2108      	movs	r1, #8
 8006a4e:	4878      	ldr	r0, [pc, #480]	@ (8006c30 <takeMachineID+0x2c8>)
 8006a50:	f002 fac4 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d111      	bne.n	8006a7e <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d102      	bne.n	8006a66 <takeMachineID+0xfe>
                cursorPosition = 14;
 8006a60:	230e      	movs	r3, #14
 8006a62:	60bb      	str	r3, [r7, #8]
 8006a64:	e008      	b.n	8006a78 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b0a      	cmp	r3, #10
 8006a6a:	d102      	bne.n	8006a72 <takeMachineID+0x10a>
            	cursorPosition = 7;
 8006a6c:	2307      	movs	r3, #7
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	e002      	b.n	8006a78 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8006a78:	20fa      	movs	r0, #250	@ 0xfa
 8006a7a:	f001 fcdf 	bl	800843c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006a7e:	2102      	movs	r1, #2
 8006a80:	4863      	ldr	r0, [pc, #396]	@ (8006c10 <takeMachineID+0x2a8>)
 8006a82:	f002 faab 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	f040 80a1 	bne.w	8006bd0 <takeMachineID+0x268>
        	if(cursorPosition == 3) {
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d10a      	bne.n	8006aaa <takeMachineID+0x142>
        		machineID[arrayPos] = '0';
 8006a94:	4a5c      	ldr	r2, [pc, #368]	@ (8006c08 <takeMachineID+0x2a0>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4413      	add	r3, r2
 8006a9a:	2230      	movs	r2, #48	@ 0x30
 8006a9c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006a9e:	4a62      	ldr	r2, [pc, #392]	@ (8006c28 <takeMachineID+0x2c0>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e07c      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 4) {
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d10a      	bne.n	8006ac6 <takeMachineID+0x15e>
        		machineID[arrayPos] = '1';
 8006ab0:	4a55      	ldr	r2, [pc, #340]	@ (8006c08 <takeMachineID+0x2a0>)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	2231      	movs	r2, #49	@ 0x31
 8006ab8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006aba:	4a5b      	ldr	r2, [pc, #364]	@ (8006c28 <takeMachineID+0x2c0>)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	4413      	add	r3, r2
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	e06e      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 5) {
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b05      	cmp	r3, #5
 8006aca:	d10a      	bne.n	8006ae2 <takeMachineID+0x17a>
        		machineID[arrayPos] = '2';
 8006acc:	4a4e      	ldr	r2, [pc, #312]	@ (8006c08 <takeMachineID+0x2a0>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	2232      	movs	r2, #50	@ 0x32
 8006ad4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006ad6:	4a54      	ldr	r2, [pc, #336]	@ (8006c28 <takeMachineID+0x2c0>)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	4413      	add	r3, r2
 8006adc:	2202      	movs	r2, #2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	e060      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 6) {
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b06      	cmp	r3, #6
 8006ae6:	d10a      	bne.n	8006afe <takeMachineID+0x196>
        		machineID[arrayPos] = '3';
 8006ae8:	4a47      	ldr	r2, [pc, #284]	@ (8006c08 <takeMachineID+0x2a0>)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	2233      	movs	r2, #51	@ 0x33
 8006af0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006af2:	4a4d      	ldr	r2, [pc, #308]	@ (8006c28 <takeMachineID+0x2c0>)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	4413      	add	r3, r2
 8006af8:	2203      	movs	r2, #3
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	e052      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 7) {
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b07      	cmp	r3, #7
 8006b02:	d10a      	bne.n	8006b1a <takeMachineID+0x1b2>
        		machineID[arrayPos] = '4';
 8006b04:	4a40      	ldr	r2, [pc, #256]	@ (8006c08 <takeMachineID+0x2a0>)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4413      	add	r3, r2
 8006b0a:	2234      	movs	r2, #52	@ 0x34
 8006b0c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006b0e:	4a46      	ldr	r2, [pc, #280]	@ (8006c28 <takeMachineID+0x2c0>)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	4413      	add	r3, r2
 8006b14:	2204      	movs	r2, #4
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e044      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 10) {
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b0a      	cmp	r3, #10
 8006b1e:	d10a      	bne.n	8006b36 <takeMachineID+0x1ce>
        		machineID[arrayPos] = '5';
 8006b20:	4a39      	ldr	r2, [pc, #228]	@ (8006c08 <takeMachineID+0x2a0>)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	2235      	movs	r2, #53	@ 0x35
 8006b28:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c28 <takeMachineID+0x2c0>)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	4413      	add	r3, r2
 8006b30:	2205      	movs	r2, #5
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e036      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 11) {
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b0b      	cmp	r3, #11
 8006b3a:	d10a      	bne.n	8006b52 <takeMachineID+0x1ea>
        		machineID[arrayPos] = '6';
 8006b3c:	4a32      	ldr	r2, [pc, #200]	@ (8006c08 <takeMachineID+0x2a0>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4413      	add	r3, r2
 8006b42:	2236      	movs	r2, #54	@ 0x36
 8006b44:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006b46:	4a38      	ldr	r2, [pc, #224]	@ (8006c28 <takeMachineID+0x2c0>)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	2206      	movs	r2, #6
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	e028      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 12) {
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b0c      	cmp	r3, #12
 8006b56:	d10a      	bne.n	8006b6e <takeMachineID+0x206>
        		machineID[arrayPos] = '7';
 8006b58:	4a2b      	ldr	r2, [pc, #172]	@ (8006c08 <takeMachineID+0x2a0>)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	2237      	movs	r2, #55	@ 0x37
 8006b60:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006b62:	4a31      	ldr	r2, [pc, #196]	@ (8006c28 <takeMachineID+0x2c0>)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	4413      	add	r3, r2
 8006b68:	2207      	movs	r2, #7
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e01a      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 13) {
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b0d      	cmp	r3, #13
 8006b72:	d10a      	bne.n	8006b8a <takeMachineID+0x222>
        		machineID[arrayPos] = '8';
 8006b74:	4a24      	ldr	r2, [pc, #144]	@ (8006c08 <takeMachineID+0x2a0>)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	2238      	movs	r2, #56	@ 0x38
 8006b7c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006c28 <takeMachineID+0x2c0>)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	4413      	add	r3, r2
 8006b84:	2208      	movs	r2, #8
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e00c      	b.n	8006ba4 <takeMachineID+0x23c>
        	} else if(cursorPosition == 14) {
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b0e      	cmp	r3, #14
 8006b8e:	d109      	bne.n	8006ba4 <takeMachineID+0x23c>
        		machineID[arrayPos] = '9';
 8006b90:	4a1d      	ldr	r2, [pc, #116]	@ (8006c08 <takeMachineID+0x2a0>)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4413      	add	r3, r2
 8006b96:	2239      	movs	r2, #57	@ 0x39
 8006b98:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006b9a:	4a23      	ldr	r2, [pc, #140]	@ (8006c28 <takeMachineID+0x2c0>)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	2209      	movs	r2, #9
 8006ba2:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	b2d9      	uxtb	r1, r3
 8006ba8:	4a17      	ldr	r2, [pc, #92]	@ (8006c08 <takeMachineID+0x2a0>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4413      	add	r3, r2
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f000 fefd 	bl	80079b2 <lcd_print_char>

        	writeLoc++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006bca:	2096      	movs	r0, #150	@ 0x96
 8006bcc:	f001 fc36 	bl	800843c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006bd0:	2104      	movs	r1, #4
 8006bd2:	480f      	ldr	r0, [pc, #60]	@ (8006c10 <takeMachineID+0x2a8>)
 8006bd4:	f002 fa02 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d14f      	bne.n	8006c7e <takeMachineID+0x316>
            if(strlen(machineID) >= 1) {
 8006bde:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <takeMachineID+0x2a0>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d048      	beq.n	8006c78 <takeMachineID+0x310>
                machineID[arrayPos] = '\0';
 8006be6:	4a08      	ldr	r2, [pc, #32]	@ (8006c08 <takeMachineID+0x2a0>)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4413      	add	r3, r2
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8006c28 <takeMachineID+0x2c0>)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	dd19      	ble.n	8006c34 <takeMachineID+0x2cc>
                	writeLoc--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	e01a      	b.n	8006c3e <takeMachineID+0x2d6>
 8006c08:	200001b0 	.word	0x200001b0
 8006c0c:	20000004 	.word	0x20000004
 8006c10:	40010800 	.word	0x40010800
 8006c14:	20000231 	.word	0x20000231
 8006c18:	0800d918 	.word	0x0800d918
 8006c1c:	0800d92c 	.word	0x0800d92c
 8006c20:	0800d940 	.word	0x0800d940
 8006c24:	0800d954 	.word	0x0800d954
 8006c28:	20000138 	.word	0x20000138
 8006c2c:	200003bc 	.word	0x200003bc
 8006c30:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	dc01      	bgt.n	8006c3e <takeMachineID+0x2d6>
                	writeLoc = 5;
 8006c3a:	2305      	movs	r3, #5
 8006c3c:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dd06      	ble.n	8006c52 <takeMachineID+0x2ea>
                	arrayPos--;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	e007      	b.n	8006c62 <takeMachineID+0x2fa>
                } else if(arrayPos < 0) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da04      	bge.n	8006c62 <takeMachineID+0x2fa>
                	arrayPos = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <takeMachineID+0x32c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	3305      	adds	r3, #5
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	f000 fec1 	bl	80079f4 <lcd_delete_char>
                HAL_Delay(50);
 8006c72:	2032      	movs	r0, #50	@ 0x32
 8006c74:	f001 fbe2 	bl	800843c <HAL_Delay>
            }

            HAL_Delay(150);
 8006c78:	2096      	movs	r0, #150	@ 0x96
 8006c7a:	f001 fbdf 	bl	800843c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	2002      	movs	r0, #2
 8006c86:	f000 fe60 	bl	800794a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006c8a:	e685      	b.n	8006998 <takeMachineID+0x30>
    }
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000004 	.word	0x20000004

08006c98 <takeWifiSSID>:

void takeWifiSSID() {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	@ 0x28
 8006c9c:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	f000 fed0 	bl	8007a44 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8006ca4:	2214      	movs	r2, #20
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	48a5      	ldr	r0, [pc, #660]	@ (8006f40 <takeWifiSSID+0x2a8>)
 8006caa:	f005 faff 	bl	800c2ac <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006cae:	2301      	movs	r3, #1
 8006cb0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006cb2:	2307      	movs	r3, #7
 8006cb4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006cbe:	4ba1      	ldr	r3, [pc, #644]	@ (8006f44 <takeWifiSSID+0x2ac>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	2002      	movs	r0, #2
 8006cc8:	f7fa f862 	bl	8000d90 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006ccc:	2108      	movs	r1, #8
 8006cce:	489e      	ldr	r0, [pc, #632]	@ (8006f48 <takeWifiSSID+0x2b0>)
 8006cd0:	f002 f984 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d138      	bne.n	8006d4c <takeWifiSSID+0xb4>
            lcd_cursor(0);
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f000 feb2 	bl	8007a44 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006ce0:	4897      	ldr	r0, [pc, #604]	@ (8006f40 <takeWifiSSID+0x2a8>)
 8006ce2:	f7f9 fa9f 	bl	8000224 <strlen>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b14      	cmp	r3, #20
 8006cea:	d91d      	bls.n	8006d28 <takeWifiSSID+0x90>
                if(dilSecim == 0) {
 8006cec:	4b97      	ldr	r3, [pc, #604]	@ (8006f4c <takeWifiSSID+0x2b4>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <takeWifiSSID+0x72>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006cf4:	4a96      	ldr	r2, [pc, #600]	@ (8006f50 <takeWifiSSID+0x2b8>)
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	f000 fe45 	bl	8007988 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006cfe:	4a95      	ldr	r2, [pc, #596]	@ (8006f54 <takeWifiSSID+0x2bc>)
 8006d00:	2101      	movs	r1, #1
 8006d02:	2002      	movs	r0, #2
 8006d04:	f000 fe40 	bl	8007988 <lcd_print>
 8006d08:	e009      	b.n	8006d1e <takeWifiSSID+0x86>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8006d0a:	4a93      	ldr	r2, [pc, #588]	@ (8006f58 <takeWifiSSID+0x2c0>)
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	2001      	movs	r0, #1
 8006d10:	f000 fe3a 	bl	8007988 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 8006d14:	4a91      	ldr	r2, [pc, #580]	@ (8006f5c <takeWifiSSID+0x2c4>)
 8006d16:	2101      	movs	r1, #1
 8006d18:	2002      	movs	r0, #2
 8006d1a:	f000 fe35 	bl	8007988 <lcd_print>
                }
            	//lcd_print(1, 1, ssidExceedErrorText);
            	//lcd_print(2, 1, ssidExceedError2Text);
                HAL_Delay(1250);
 8006d1e:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8006d22:	f001 fb8b 	bl	800843c <HAL_Delay>

                goto mainSSIDSection;
 8006d26:	e7ba      	b.n	8006c9e <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d28:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	236e      	movs	r3, #110	@ 0x6e
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	4b8b      	ldr	r3, [pc, #556]	@ (8006f60 <takeWifiSSID+0x2c8>)
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	236e      	movs	r3, #110	@ 0x6e
 8006d38:	2200      	movs	r2, #0
 8006d3a:	21a0      	movs	r1, #160	@ 0xa0
 8006d3c:	4889      	ldr	r0, [pc, #548]	@ (8006f64 <takeWifiSSID+0x2cc>)
 8006d3e:	f002 fc07 	bl	8009550 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006d42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006d46:	f001 fb79 	bl	800843c <HAL_Delay>

            	break;
 8006d4a:	e13d      	b.n	8006fc8 <takeWifiSSID+0x330>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	487e      	ldr	r0, [pc, #504]	@ (8006f48 <takeWifiSSID+0x2b0>)
 8006d50:	f002 f944 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d14d      	bne.n	8006df6 <takeWifiSSID+0x15e>
        	if(cursorPosition > 80) {
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b50      	cmp	r3, #80	@ 0x50
 8006d5e:	dd01      	ble.n	8006d64 <takeWifiSSID+0xcc>
        		cursorPosition = 1;
 8006d60:	2301      	movs	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d13f      	bne.n	8006dea <takeWifiSSID+0x152>
            	if(page == 1) {
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d109      	bne.n	8006d84 <takeWifiSSID+0xec>
            		cursorPosition = 1;
 8006d70:	2301      	movs	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
            		page++;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3301      	adds	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006d7a:	2102      	movs	r1, #2
 8006d7c:	2002      	movs	r0, #2
 8006d7e:	f7fa f807 	bl	8000d90 <printTemplate>
 8006d82:	e035      	b.n	8006df0 <takeWifiSSID+0x158>
            	} else if(page == 2) {
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d109      	bne.n	8006d9e <takeWifiSSID+0x106>
            		cursorPosition = 1;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
            		page++;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	3301      	adds	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006d94:	2103      	movs	r1, #3
 8006d96:	2002      	movs	r0, #2
 8006d98:	f7f9 fffa 	bl	8000d90 <printTemplate>
 8006d9c:	e028      	b.n	8006df0 <takeWifiSSID+0x158>
            	} else if(page == 3) {
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d109      	bne.n	8006db8 <takeWifiSSID+0x120>
            		cursorPosition = 1;
 8006da4:	2301      	movs	r3, #1
 8006da6:	60fb      	str	r3, [r7, #12]
            		page++;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	3301      	adds	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006dae:	2104      	movs	r1, #4
 8006db0:	2002      	movs	r0, #2
 8006db2:	f7f9 ffed 	bl	8000d90 <printTemplate>
 8006db6:	e01b      	b.n	8006df0 <takeWifiSSID+0x158>
            	} else if(page == 4) {
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d109      	bne.n	8006dd2 <takeWifiSSID+0x13a>
            		cursorPosition = 1;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
            		page++;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006dc8:	2105      	movs	r1, #5
 8006dca:	2002      	movs	r0, #2
 8006dcc:	f7f9 ffe0 	bl	8000d90 <printTemplate>
 8006dd0:	e00e      	b.n	8006df0 <takeWifiSSID+0x158>
            	} else if(page == 5) {
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b05      	cmp	r3, #5
 8006dd6:	d10b      	bne.n	8006df0 <takeWifiSSID+0x158>
            		cursorPosition = 1;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006de0:	2101      	movs	r1, #1
 8006de2:	2002      	movs	r0, #2
 8006de4:	f7f9 ffd4 	bl	8000d90 <printTemplate>
 8006de8:	e002      	b.n	8006df0 <takeWifiSSID+0x158>
            	}
            } else {
            	cursorPosition++;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3301      	adds	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006df0:	2096      	movs	r0, #150	@ 0x96
 8006df2:	f001 fb23 	bl	800843c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006df6:	2108      	movs	r1, #8
 8006df8:	485b      	ldr	r0, [pc, #364]	@ (8006f68 <takeWifiSSID+0x2d0>)
 8006dfa:	f002 f8ef 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d149      	bne.n	8006e98 <takeWifiSSID+0x200>
        	if(cursorPosition < 1) {
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dc01      	bgt.n	8006e0e <takeWifiSSID+0x176>
        		cursorPosition = 80;
 8006e0a:	2350      	movs	r3, #80	@ 0x50
 8006e0c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d13b      	bne.n	8006e8c <takeWifiSSID+0x1f4>
            	if(page == 1) {
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d108      	bne.n	8006e2c <takeWifiSSID+0x194>
            		cursorPosition = 16;
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8006e1e:	2305      	movs	r3, #5
 8006e20:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006e22:	2105      	movs	r1, #5
 8006e24:	2002      	movs	r0, #2
 8006e26:	f7f9 ffb3 	bl	8000d90 <printTemplate>
 8006e2a:	e032      	b.n	8006e92 <takeWifiSSID+0x1fa>
            	} else if(page == 2) {
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d108      	bne.n	8006e44 <takeWifiSSID+0x1ac>
            		cursorPosition = 16;
 8006e32:	2310      	movs	r3, #16
 8006e34:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006e36:	2301      	movs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	2002      	movs	r0, #2
 8006e3e:	f7f9 ffa7 	bl	8000d90 <printTemplate>
 8006e42:	e026      	b.n	8006e92 <takeWifiSSID+0x1fa>
            	} else if(page == 3) {
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d108      	bne.n	8006e5c <takeWifiSSID+0x1c4>
            		cursorPosition = 16;
 8006e4a:	2310      	movs	r3, #16
 8006e4c:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006e52:	2102      	movs	r1, #2
 8006e54:	2002      	movs	r0, #2
 8006e56:	f7f9 ff9b 	bl	8000d90 <printTemplate>
 8006e5a:	e01a      	b.n	8006e92 <takeWifiSSID+0x1fa>
            	} else if(page == 4) {
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d108      	bne.n	8006e74 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 8006e62:	2310      	movs	r3, #16
 8006e64:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8006e66:	2303      	movs	r3, #3
 8006e68:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006e6a:	2103      	movs	r1, #3
 8006e6c:	2002      	movs	r0, #2
 8006e6e:	f7f9 ff8f 	bl	8000d90 <printTemplate>
 8006e72:	e00e      	b.n	8006e92 <takeWifiSSID+0x1fa>
            	} else if(page == 5) {
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d10b      	bne.n	8006e92 <takeWifiSSID+0x1fa>
            		cursorPosition = 16;
 8006e7a:	2310      	movs	r3, #16
 8006e7c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8006e7e:	2304      	movs	r3, #4
 8006e80:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006e82:	2104      	movs	r1, #4
 8006e84:	2002      	movs	r0, #2
 8006e86:	f7f9 ff83 	bl	8000d90 <printTemplate>
 8006e8a:	e002      	b.n	8006e92 <takeWifiSSID+0x1fa>
            	}
            } else {
            	cursorPosition--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006e92:	2096      	movs	r0, #150	@ 0x96
 8006e94:	f001 fad2 	bl	800843c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e98:	2102      	movs	r1, #2
 8006e9a:	482b      	ldr	r0, [pc, #172]	@ (8006f48 <takeWifiSSID+0x2b0>)
 8006e9c:	f002 f89e 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d12f      	bne.n	8006f06 <takeWifiSSID+0x26e>
            eepromData[eepromVal] = cursorPosition;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	b2d9      	uxtb	r1, r3
 8006eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8006f60 <takeWifiSSID+0x2c8>)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4413      	add	r3, r2
 8006eb0:	460a      	mov	r2, r1
 8006eb2:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8006eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8006f6c <takeWifiSSID+0x2d4>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	7819      	ldrb	r1, [r3, #0]
 8006ebc:	4a20      	ldr	r2, [pc, #128]	@ (8006f40 <takeWifiSSID+0x2a8>)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	b2d9      	uxtb	r1, r3
 8006eca:	4a28      	ldr	r2, [pc, #160]	@ (8006f6c <takeWifiSSID+0x2d4>)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	f000 fd6c 	bl	80079b2 <lcd_print_char>

            writeLoc++;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	3301      	adds	r3, #1
 8006ede:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8006eec:	4a1c      	ldr	r2, [pc, #112]	@ (8006f60 <takeWifiSSID+0x2c8>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8006ef6:	4a12      	ldr	r2, [pc, #72]	@ (8006f40 <takeWifiSSID+0x2a8>)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4413      	add	r3, r2
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8006f00:	2096      	movs	r0, #150	@ 0x96
 8006f02:	f001 fa9b 	bl	800843c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006f06:	2104      	movs	r1, #4
 8006f08:	480f      	ldr	r0, [pc, #60]	@ (8006f48 <takeWifiSSID+0x2b0>)
 8006f0a:	f002 f867 	bl	8008fdc <HAL_GPIO_ReadPin>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d152      	bne.n	8006fba <takeWifiSSID+0x322>
        	if(strlen(wifiSSID) >= 1) {
 8006f14:	4b0a      	ldr	r3, [pc, #40]	@ (8006f40 <takeWifiSSID+0x2a8>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d04b      	beq.n	8006fb4 <takeWifiSSID+0x31c>
        		eepromData[eepromVal] = '\0';
 8006f1c:	4a10      	ldr	r2, [pc, #64]	@ (8006f60 <takeWifiSSID+0x2c8>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4413      	add	r3, r2
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8006f26:	4a06      	ldr	r2, [pc, #24]	@ (8006f40 <takeWifiSSID+0x2a8>)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2b07      	cmp	r3, #7
 8006f34:	dd1c      	ble.n	8006f70 <takeWifiSSID+0x2d8>
        			writeLoc--;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	e01d      	b.n	8006f7a <takeWifiSSID+0x2e2>
 8006f3e:	bf00      	nop
 8006f40:	200001bc 	.word	0x200001bc
 8006f44:	20000008 	.word	0x20000008
 8006f48:	40010800 	.word	0x40010800
 8006f4c:	20000231 	.word	0x20000231
 8006f50:	0800d968 	.word	0x0800d968
 8006f54:	0800d97c 	.word	0x0800d97c
 8006f58:	0800d990 	.word	0x0800d990
 8006f5c:	0800d9a4 	.word	0x0800d9a4
 8006f60:	20000138 	.word	0x20000138
 8006f64:	200003bc 	.word	0x200003bc
 8006f68:	40011000 	.word	0x40011000
 8006f6c:	2000001c 	.word	0x2000001c
        		} else if(writeLoc < 7) {
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b06      	cmp	r3, #6
 8006f74:	dc01      	bgt.n	8006f7a <takeWifiSSID+0x2e2>
        			writeLoc = 7;
 8006f76:	2307      	movs	r3, #7
 8006f78:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dd06      	ble.n	8006f8e <takeWifiSSID+0x2f6>
        			arrayPosition--;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	607b      	str	r3, [r7, #4]
 8006f8c:	e007      	b.n	8006f9e <takeWifiSSID+0x306>
        		} else if(arrayPosition < 0) {
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da04      	bge.n	8006f9e <takeWifiSSID+0x306>
        			arrayPosition = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8006f98:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <takeWifiSSID+0x338>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	3307      	adds	r3, #7
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f000 fd23 	bl	80079f4 <lcd_delete_char>
        		HAL_Delay(50);
 8006fae:	2032      	movs	r0, #50	@ 0x32
 8006fb0:	f001 fa44 	bl	800843c <HAL_Delay>
        	}

        	HAL_Delay(150);
 8006fb4:	2096      	movs	r0, #150	@ 0x96
 8006fb6:	f001 fa41 	bl	800843c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	2002      	movs	r0, #2
 8006fc2:	f000 fcc2 	bl	800794a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fc6:	e681      	b.n	8006ccc <takeWifiSSID+0x34>
    }
}
 8006fc8:	bf00      	nop
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000008 	.word	0x20000008

08006fd4 <takeWifiPass>:

void takeWifiPass() {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	@ 0x28
 8006fd8:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8006fda:	2001      	movs	r0, #1
 8006fdc:	f000 fd32 	bl	8007a44 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8006fe0:	2214      	movs	r2, #20
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	48a5      	ldr	r0, [pc, #660]	@ (800727c <takeWifiPass+0x2a8>)
 8006fe6:	f005 f961 	bl	800c2ac <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006fea:	2301      	movs	r3, #1
 8006fec:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006fee:	2307      	movs	r3, #7
 8006ff0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006ffa:	4ba1      	ldr	r3, [pc, #644]	@ (8007280 <takeWifiPass+0x2ac>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007000:	2101      	movs	r1, #1
 8007002:	2003      	movs	r0, #3
 8007004:	f7f9 fec4 	bl	8000d90 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007008:	2108      	movs	r1, #8
 800700a:	489e      	ldr	r0, [pc, #632]	@ (8007284 <takeWifiPass+0x2b0>)
 800700c:	f001 ffe6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8007010:	4603      	mov	r3, r0
 8007012:	2b01      	cmp	r3, #1
 8007014:	d138      	bne.n	8007088 <takeWifiPass+0xb4>
            lcd_cursor(0);
 8007016:	2000      	movs	r0, #0
 8007018:	f000 fd14 	bl	8007a44 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800701c:	4897      	ldr	r0, [pc, #604]	@ (800727c <takeWifiPass+0x2a8>)
 800701e:	f7f9 f901 	bl	8000224 <strlen>
 8007022:	4603      	mov	r3, r0
 8007024:	2b14      	cmp	r3, #20
 8007026:	d91d      	bls.n	8007064 <takeWifiPass+0x90>
                if(dilSecim == 0) {
 8007028:	4b97      	ldr	r3, [pc, #604]	@ (8007288 <takeWifiPass+0x2b4>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <takeWifiPass+0x72>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007030:	4a96      	ldr	r2, [pc, #600]	@ (800728c <takeWifiPass+0x2b8>)
 8007032:	2101      	movs	r1, #1
 8007034:	2001      	movs	r0, #1
 8007036:	f000 fca7 	bl	8007988 <lcd_print>
                	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800703a:	4a95      	ldr	r2, [pc, #596]	@ (8007290 <takeWifiPass+0x2bc>)
 800703c:	2101      	movs	r1, #1
 800703e:	2002      	movs	r0, #2
 8007040:	f000 fca2 	bl	8007988 <lcd_print>
 8007044:	e009      	b.n	800705a <takeWifiPass+0x86>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 8007046:	4a93      	ldr	r2, [pc, #588]	@ (8007294 <takeWifiPass+0x2c0>)
 8007048:	2101      	movs	r1, #1
 800704a:	2001      	movs	r0, #1
 800704c:	f000 fc9c 	bl	8007988 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 8007050:	4a91      	ldr	r2, [pc, #580]	@ (8007298 <takeWifiPass+0x2c4>)
 8007052:	2101      	movs	r1, #1
 8007054:	2002      	movs	r0, #2
 8007056:	f000 fc97 	bl	8007988 <lcd_print>
                }
            	//lcd_print(1, 1, passExceedErrorText);
            	//lcd_print(2, 1, passExceedError2Text);
                HAL_Delay(1250);
 800705a:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800705e:	f001 f9ed 	bl	800843c <HAL_Delay>

                goto mainPassSection;
 8007062:	e7ba      	b.n	8006fda <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007064:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007068:	9302      	str	r3, [sp, #8]
 800706a:	236e      	movs	r3, #110	@ 0x6e
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	4b8b      	ldr	r3, [pc, #556]	@ (800729c <takeWifiPass+0x2c8>)
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	236e      	movs	r3, #110	@ 0x6e
 8007074:	2200      	movs	r2, #0
 8007076:	21a0      	movs	r1, #160	@ 0xa0
 8007078:	4889      	ldr	r0, [pc, #548]	@ (80072a0 <takeWifiPass+0x2cc>)
 800707a:	f002 fa69 	bl	8009550 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 800707e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007082:	f001 f9db 	bl	800843c <HAL_Delay>

            	break;
 8007086:	e13d      	b.n	8007304 <takeWifiPass+0x330>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007088:	2101      	movs	r1, #1
 800708a:	487e      	ldr	r0, [pc, #504]	@ (8007284 <takeWifiPass+0x2b0>)
 800708c:	f001 ffa6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8007090:	4603      	mov	r3, r0
 8007092:	2b01      	cmp	r3, #1
 8007094:	d14d      	bne.n	8007132 <takeWifiPass+0x15e>
        	if(cursorPosition > 80) {
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b50      	cmp	r3, #80	@ 0x50
 800709a:	dd01      	ble.n	80070a0 <takeWifiPass+0xcc>
        		cursorPosition = 1;
 800709c:	2301      	movs	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b10      	cmp	r3, #16
 80070a4:	d13f      	bne.n	8007126 <takeWifiPass+0x152>
            	if(page == 1) {
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d109      	bne.n	80070c0 <takeWifiPass+0xec>
            		cursorPosition = 1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]
            		page++;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	3301      	adds	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80070b6:	2102      	movs	r1, #2
 80070b8:	2003      	movs	r0, #3
 80070ba:	f7f9 fe69 	bl	8000d90 <printTemplate>
 80070be:	e035      	b.n	800712c <takeWifiPass+0x158>
            	} else if(page == 2) {
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d109      	bne.n	80070da <takeWifiPass+0x106>
            		cursorPosition = 1;
 80070c6:	2301      	movs	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
            		page++;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	3301      	adds	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80070d0:	2103      	movs	r1, #3
 80070d2:	2003      	movs	r0, #3
 80070d4:	f7f9 fe5c 	bl	8000d90 <printTemplate>
 80070d8:	e028      	b.n	800712c <takeWifiPass+0x158>
            	} else if(page == 3) {
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d109      	bne.n	80070f4 <takeWifiPass+0x120>
            		cursorPosition = 1;
 80070e0:	2301      	movs	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
            		page++;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	3301      	adds	r3, #1
 80070e8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80070ea:	2104      	movs	r1, #4
 80070ec:	2003      	movs	r0, #3
 80070ee:	f7f9 fe4f 	bl	8000d90 <printTemplate>
 80070f2:	e01b      	b.n	800712c <takeWifiPass+0x158>
            	} else if(page == 4) {
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d109      	bne.n	800710e <takeWifiPass+0x13a>
            		cursorPosition = 1;
 80070fa:	2301      	movs	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
            		page++;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	3301      	adds	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007104:	2105      	movs	r1, #5
 8007106:	2003      	movs	r0, #3
 8007108:	f7f9 fe42 	bl	8000d90 <printTemplate>
 800710c:	e00e      	b.n	800712c <takeWifiPass+0x158>
            	} else if(page == 5) {
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b05      	cmp	r3, #5
 8007112:	d10b      	bne.n	800712c <takeWifiPass+0x158>
            		cursorPosition = 1;
 8007114:	2301      	movs	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007118:	2301      	movs	r3, #1
 800711a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800711c:	2101      	movs	r1, #1
 800711e:	2003      	movs	r0, #3
 8007120:	f7f9 fe36 	bl	8000d90 <printTemplate>
 8007124:	e002      	b.n	800712c <takeWifiPass+0x158>
            	}
            } else {
            	cursorPosition++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800712c:	2096      	movs	r0, #150	@ 0x96
 800712e:	f001 f985 	bl	800843c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007132:	2108      	movs	r1, #8
 8007134:	485b      	ldr	r0, [pc, #364]	@ (80072a4 <takeWifiPass+0x2d0>)
 8007136:	f001 ff51 	bl	8008fdc <HAL_GPIO_ReadPin>
 800713a:	4603      	mov	r3, r0
 800713c:	2b01      	cmp	r3, #1
 800713e:	d149      	bne.n	80071d4 <takeWifiPass+0x200>
        	if(cursorPosition < 1) {
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc01      	bgt.n	800714a <takeWifiPass+0x176>
        		cursorPosition = 80;
 8007146:	2350      	movs	r3, #80	@ 0x50
 8007148:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d13b      	bne.n	80071c8 <takeWifiPass+0x1f4>
            	if(page == 1) {
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d108      	bne.n	8007168 <takeWifiPass+0x194>
            		cursorPosition = 16;
 8007156:	2310      	movs	r3, #16
 8007158:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800715a:	2305      	movs	r3, #5
 800715c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800715e:	2105      	movs	r1, #5
 8007160:	2003      	movs	r0, #3
 8007162:	f7f9 fe15 	bl	8000d90 <printTemplate>
 8007166:	e032      	b.n	80071ce <takeWifiPass+0x1fa>
            	} else if(page == 2) {
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d108      	bne.n	8007180 <takeWifiPass+0x1ac>
            		cursorPosition = 16;
 800716e:	2310      	movs	r3, #16
 8007170:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007172:	2301      	movs	r3, #1
 8007174:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007176:	2101      	movs	r1, #1
 8007178:	2003      	movs	r0, #3
 800717a:	f7f9 fe09 	bl	8000d90 <printTemplate>
 800717e:	e026      	b.n	80071ce <takeWifiPass+0x1fa>
            	} else if(page == 3) {
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b03      	cmp	r3, #3
 8007184:	d108      	bne.n	8007198 <takeWifiPass+0x1c4>
            		cursorPosition = 16;
 8007186:	2310      	movs	r3, #16
 8007188:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800718a:	2302      	movs	r3, #2
 800718c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800718e:	2102      	movs	r1, #2
 8007190:	2003      	movs	r0, #3
 8007192:	f7f9 fdfd 	bl	8000d90 <printTemplate>
 8007196:	e01a      	b.n	80071ce <takeWifiPass+0x1fa>
            	} else if(page == 4) {
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b04      	cmp	r3, #4
 800719c:	d108      	bne.n	80071b0 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 800719e:	2310      	movs	r3, #16
 80071a0:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80071a2:	2303      	movs	r3, #3
 80071a4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80071a6:	2103      	movs	r1, #3
 80071a8:	2003      	movs	r0, #3
 80071aa:	f7f9 fdf1 	bl	8000d90 <printTemplate>
 80071ae:	e00e      	b.n	80071ce <takeWifiPass+0x1fa>
            	} else if(page == 5) {
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d10b      	bne.n	80071ce <takeWifiPass+0x1fa>
            		cursorPosition = 16;
 80071b6:	2310      	movs	r3, #16
 80071b8:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80071ba:	2304      	movs	r3, #4
 80071bc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80071be:	2104      	movs	r1, #4
 80071c0:	2003      	movs	r0, #3
 80071c2:	f7f9 fde5 	bl	8000d90 <printTemplate>
 80071c6:	e002      	b.n	80071ce <takeWifiPass+0x1fa>
            	}
            } else {
            	cursorPosition--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80071ce:	2096      	movs	r0, #150	@ 0x96
 80071d0:	f001 f934 	bl	800843c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80071d4:	2102      	movs	r1, #2
 80071d6:	482b      	ldr	r0, [pc, #172]	@ (8007284 <takeWifiPass+0x2b0>)
 80071d8:	f001 ff00 	bl	8008fdc <HAL_GPIO_ReadPin>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d12f      	bne.n	8007242 <takeWifiPass+0x26e>
            eepromData[eepromVal] = cursorPosition;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	b2d9      	uxtb	r1, r3
 80071e6:	4a2d      	ldr	r2, [pc, #180]	@ (800729c <takeWifiPass+0x2c8>)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4413      	add	r3, r2
 80071ec:	460a      	mov	r2, r1
 80071ee:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80071f0:	4a2d      	ldr	r2, [pc, #180]	@ (80072a8 <takeWifiPass+0x2d4>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	7819      	ldrb	r1, [r3, #0]
 80071f8:	4a20      	ldr	r2, [pc, #128]	@ (800727c <takeWifiPass+0x2a8>)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	4413      	add	r3, r2
 80071fe:	460a      	mov	r2, r1
 8007200:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	b2d9      	uxtb	r1, r3
 8007206:	4a28      	ldr	r2, [pc, #160]	@ (80072a8 <takeWifiPass+0x2d4>)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	2001      	movs	r0, #1
 8007212:	f000 fbce 	bl	80079b2 <lcd_print_char>

            writeLoc++;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	3301      	adds	r3, #1
 800721a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3301      	adds	r3, #1
 8007220:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3301      	adds	r3, #1
 8007226:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007228:	4a1c      	ldr	r2, [pc, #112]	@ (800729c <takeWifiPass+0x2c8>)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4413      	add	r3, r2
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8007232:	4a12      	ldr	r2, [pc, #72]	@ (800727c <takeWifiPass+0x2a8>)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4413      	add	r3, r2
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800723c:	2096      	movs	r0, #150	@ 0x96
 800723e:	f001 f8fd 	bl	800843c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007242:	2104      	movs	r1, #4
 8007244:	480f      	ldr	r0, [pc, #60]	@ (8007284 <takeWifiPass+0x2b0>)
 8007246:	f001 fec9 	bl	8008fdc <HAL_GPIO_ReadPin>
 800724a:	4603      	mov	r3, r0
 800724c:	2b01      	cmp	r3, #1
 800724e:	d152      	bne.n	80072f6 <takeWifiPass+0x322>
        	if(strlen(wifiPass) >= 1) {
 8007250:	4b0a      	ldr	r3, [pc, #40]	@ (800727c <takeWifiPass+0x2a8>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d04b      	beq.n	80072f0 <takeWifiPass+0x31c>
        		eepromData[eepromVal] = '\0';
 8007258:	4a10      	ldr	r2, [pc, #64]	@ (800729c <takeWifiPass+0x2c8>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4413      	add	r3, r2
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8007262:	4a06      	ldr	r2, [pc, #24]	@ (800727c <takeWifiPass+0x2a8>)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4413      	add	r3, r2
 8007268:	2200      	movs	r2, #0
 800726a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b07      	cmp	r3, #7
 8007270:	dd1c      	ble.n	80072ac <takeWifiPass+0x2d8>
        			writeLoc--;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3b01      	subs	r3, #1
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	e01d      	b.n	80072b6 <takeWifiPass+0x2e2>
 800727a:	bf00      	nop
 800727c:	200001d0 	.word	0x200001d0
 8007280:	2000000c 	.word	0x2000000c
 8007284:	40010800 	.word	0x40010800
 8007288:	20000231 	.word	0x20000231
 800728c:	0800d968 	.word	0x0800d968
 8007290:	0800d9b8 	.word	0x0800d9b8
 8007294:	0800d9cc 	.word	0x0800d9cc
 8007298:	0800d9a4 	.word	0x0800d9a4
 800729c:	20000138 	.word	0x20000138
 80072a0:	200003bc 	.word	0x200003bc
 80072a4:	40011000 	.word	0x40011000
 80072a8:	2000001c 	.word	0x2000001c
        		} else if(writeLoc < 7) {
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b06      	cmp	r3, #6
 80072b0:	dc01      	bgt.n	80072b6 <takeWifiPass+0x2e2>
        			writeLoc = 7;
 80072b2:	2307      	movs	r3, #7
 80072b4:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dd06      	ble.n	80072ca <takeWifiPass+0x2f6>
        			arrayPosition--;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	3b01      	subs	r3, #1
 80072c0:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	e007      	b.n	80072da <takeWifiPass+0x306>
        		} else if(arrayPosition < 0) {
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	da04      	bge.n	80072da <takeWifiPass+0x306>
        			arrayPosition = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80072d4:	4b0d      	ldr	r3, [pc, #52]	@ (800730c <takeWifiPass+0x338>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	3307      	adds	r3, #7
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	4619      	mov	r1, r3
 80072e4:	2001      	movs	r0, #1
 80072e6:	f000 fb85 	bl	80079f4 <lcd_delete_char>
        		HAL_Delay(50);
 80072ea:	2032      	movs	r0, #50	@ 0x32
 80072ec:	f001 f8a6 	bl	800843c <HAL_Delay>
        	}

        	HAL_Delay(150);
 80072f0:	2096      	movs	r0, #150	@ 0x96
 80072f2:	f001 f8a3 	bl	800843c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	4619      	mov	r1, r3
 80072fc:	2002      	movs	r0, #2
 80072fe:	f000 fb24 	bl	800794a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007302:	e681      	b.n	8007008 <takeWifiPass+0x34>
    }
}
 8007304:	bf00      	nop
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	2000000c 	.word	0x2000000c

08007310 <mergeData>:

char* mergeData() {
 8007310:	b580      	push	{r7, lr}
 8007312:	b09c      	sub	sp, #112	@ 0x70
 8007314:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007316:	2300      	movs	r3, #0
 8007318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800731a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800731e:	2229      	movs	r2, #41	@ 0x29
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f004 ffc2 	bl	800c2ac <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007328:	4b65      	ldr	r3, [pc, #404]	@ (80074c0 <mergeData+0x1b0>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	703b      	strb	r3, [r7, #0]
 800732e:	4b65      	ldr	r3, [pc, #404]	@ (80074c4 <mergeData+0x1b4>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	707b      	strb	r3, [r7, #1]
 8007334:	4b64      	ldr	r3, [pc, #400]	@ (80074c8 <mergeData+0x1b8>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	70bb      	strb	r3, [r7, #2]
 800733a:	4b64      	ldr	r3, [pc, #400]	@ (80074cc <mergeData+0x1bc>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	70fb      	strb	r3, [r7, #3]
 8007340:	4b63      	ldr	r3, [pc, #396]	@ (80074d0 <mergeData+0x1c0>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	713b      	strb	r3, [r7, #4]
 8007346:	4b63      	ldr	r3, [pc, #396]	@ (80074d4 <mergeData+0x1c4>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	717b      	strb	r3, [r7, #5]
 800734c:	4b62      	ldr	r3, [pc, #392]	@ (80074d8 <mergeData+0x1c8>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	71bb      	strb	r3, [r7, #6]
 8007352:	4b62      	ldr	r3, [pc, #392]	@ (80074dc <mergeData+0x1cc>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
 8007358:	4b61      	ldr	r3, [pc, #388]	@ (80074e0 <mergeData+0x1d0>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	723b      	strb	r3, [r7, #8]
 800735e:	4b61      	ldr	r3, [pc, #388]	@ (80074e4 <mergeData+0x1d4>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	727b      	strb	r3, [r7, #9]
 8007364:	4b60      	ldr	r3, [pc, #384]	@ (80074e8 <mergeData+0x1d8>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	72bb      	strb	r3, [r7, #10]
 800736a:	4b60      	ldr	r3, [pc, #384]	@ (80074ec <mergeData+0x1dc>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	72fb      	strb	r3, [r7, #11]
 8007370:	4b5f      	ldr	r3, [pc, #380]	@ (80074f0 <mergeData+0x1e0>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	733b      	strb	r3, [r7, #12]
 8007376:	4b5f      	ldr	r3, [pc, #380]	@ (80074f4 <mergeData+0x1e4>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	737b      	strb	r3, [r7, #13]
 800737c:	4b5e      	ldr	r3, [pc, #376]	@ (80074f8 <mergeData+0x1e8>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	73bb      	strb	r3, [r7, #14]
 8007382:	4b5e      	ldr	r3, [pc, #376]	@ (80074fc <mergeData+0x1ec>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	73fb      	strb	r3, [r7, #15]
 8007388:	4b5d      	ldr	r3, [pc, #372]	@ (8007500 <mergeData+0x1f0>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	743b      	strb	r3, [r7, #16]
 800738e:	4b5d      	ldr	r3, [pc, #372]	@ (8007504 <mergeData+0x1f4>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	747b      	strb	r3, [r7, #17]
 8007394:	4b5c      	ldr	r3, [pc, #368]	@ (8007508 <mergeData+0x1f8>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	74bb      	strb	r3, [r7, #18]
 800739a:	4b5c      	ldr	r3, [pc, #368]	@ (800750c <mergeData+0x1fc>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	74fb      	strb	r3, [r7, #19]
 80073a0:	4b5b      	ldr	r3, [pc, #364]	@ (8007510 <mergeData+0x200>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	753b      	strb	r3, [r7, #20]
 80073a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007514 <mergeData+0x204>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	757b      	strb	r3, [r7, #21]
 80073ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007518 <mergeData+0x208>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	75bb      	strb	r3, [r7, #22]
 80073b2:	4b5a      	ldr	r3, [pc, #360]	@ (800751c <mergeData+0x20c>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	75fb      	strb	r3, [r7, #23]
 80073b8:	4b59      	ldr	r3, [pc, #356]	@ (8007520 <mergeData+0x210>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	763b      	strb	r3, [r7, #24]
 80073be:	4b59      	ldr	r3, [pc, #356]	@ (8007524 <mergeData+0x214>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	767b      	strb	r3, [r7, #25]
 80073c4:	4b58      	ldr	r3, [pc, #352]	@ (8007528 <mergeData+0x218>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	76bb      	strb	r3, [r7, #26]
 80073ca:	4b58      	ldr	r3, [pc, #352]	@ (800752c <mergeData+0x21c>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	76fb      	strb	r3, [r7, #27]
 80073d0:	4b57      	ldr	r3, [pc, #348]	@ (8007530 <mergeData+0x220>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	773b      	strb	r3, [r7, #28]
 80073d6:	4b57      	ldr	r3, [pc, #348]	@ (8007534 <mergeData+0x224>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	777b      	strb	r3, [r7, #29]
 80073dc:	4b56      	ldr	r3, [pc, #344]	@ (8007538 <mergeData+0x228>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	77bb      	strb	r3, [r7, #30]
 80073e2:	4b56      	ldr	r3, [pc, #344]	@ (800753c <mergeData+0x22c>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	4b55      	ldr	r3, [pc, #340]	@ (8007540 <mergeData+0x230>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80073f0:	4b54      	ldr	r3, [pc, #336]	@ (8007544 <mergeData+0x234>)
 80073f2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 80073f6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[39],
 80073fa:	4b52      	ldr	r3, [pc, #328]	@ (8007544 <mergeData+0x234>)
 80073fc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8007400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[40],
 8007404:	4b4f      	ldr	r3, [pc, #316]	@ (8007544 <mergeData+0x234>)
 8007406:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[41],
 800740e:	4b4d      	ldr	r3, [pc, #308]	@ (8007544 <mergeData+0x234>)
 8007410:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8007414:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[42],
 8007418:	4b4a      	ldr	r3, [pc, #296]	@ (8007544 <mergeData+0x234>)
 800741a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 800741e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[43],
 8007422:	4b48      	ldr	r3, [pc, #288]	@ (8007544 <mergeData+0x234>)
 8007424:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8007428:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[44],
 800742c:	4b45      	ldr	r3, [pc, #276]	@ (8007544 <mergeData+0x234>)
 800742e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8007432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			eepromData[45],
 8007436:	4b43      	ldr	r3, [pc, #268]	@ (8007544 <mergeData+0x234>)
 8007438:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 800743c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			eepromData[46],
 8007440:	4b40      	ldr	r3, [pc, #256]	@ (8007544 <mergeData+0x234>)
 8007442:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8007446:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			eepromData[47],
 800744a:	4b3e      	ldr	r3, [pc, #248]	@ (8007544 <mergeData+0x234>)
 800744c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8007450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007454:	2306      	movs	r3, #6
 8007456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800745a:	2300      	movs	r3, #0
 800745c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800745e:	e015      	b.n	800748c <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 8007460:	463a      	mov	r2, r7
 8007462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007464:	4413      	add	r3, r2
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800746e:	4936      	ldr	r1, [pc, #216]	@ (8007548 <mergeData+0x238>)
 8007470:	4618      	mov	r0, r3
 8007472:	f004 fe97 	bl	800c1a4 <siprintf>
	    strcat(combinedString, temp);
 8007476:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800747a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800747e:	4611      	mov	r1, r2
 8007480:	4618      	mov	r0, r3
 8007482:	f004 fef1 	bl	800c268 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007488:	3301      	adds	r3, #1
 800748a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800748c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800748e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007490:	d9e6      	bls.n	8007460 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007492:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007496:	4618      	mov	r0, r3
 8007498:	f7f8 fec4 	bl	8000224 <strlen>
 800749c:	4603      	mov	r3, r0
 800749e:	3301      	adds	r3, #1
 80074a0:	4618      	mov	r0, r3
 80074a2:	f004 fdc9 	bl	800c038 <malloc>
 80074a6:	4603      	mov	r3, r0
 80074a8:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 80074aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074ae:	4619      	mov	r1, r3
 80074b0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80074b2:	f004 ff3f 	bl	800c334 <strcpy>
	return result;
 80074b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3770      	adds	r7, #112	@ 0x70
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	2000021f 	.word	0x2000021f
 80074c4:	20000211 	.word	0x20000211
 80074c8:	20000214 	.word	0x20000214
 80074cc:	20000215 	.word	0x20000215
 80074d0:	20000216 	.word	0x20000216
 80074d4:	2000021d 	.word	0x2000021d
 80074d8:	20000217 	.word	0x20000217
 80074dc:	20000218 	.word	0x20000218
 80074e0:	2000021c 	.word	0x2000021c
 80074e4:	20000219 	.word	0x20000219
 80074e8:	20000229 	.word	0x20000229
 80074ec:	2000021a 	.word	0x2000021a
 80074f0:	2000022a 	.word	0x2000022a
 80074f4:	2000021b 	.word	0x2000021b
 80074f8:	2000022b 	.word	0x2000022b
 80074fc:	2000021e 	.word	0x2000021e
 8007500:	20000220 	.word	0x20000220
 8007504:	20000221 	.word	0x20000221
 8007508:	20000222 	.word	0x20000222
 800750c:	20000223 	.word	0x20000223
 8007510:	20000224 	.word	0x20000224
 8007514:	20000225 	.word	0x20000225
 8007518:	20000226 	.word	0x20000226
 800751c:	20000227 	.word	0x20000227
 8007520:	20000228 	.word	0x20000228
 8007524:	2000022c 	.word	0x2000022c
 8007528:	2000022e 	.word	0x2000022e
 800752c:	2000020d 	.word	0x2000020d
 8007530:	2000020e 	.word	0x2000020e
 8007534:	20000000 	.word	0x20000000
 8007538:	20000001 	.word	0x20000001
 800753c:	2000020f 	.word	0x2000020f
 8007540:	20000231 	.word	0x20000231
 8007544:	20000138 	.word	0x20000138
 8007548:	0800d9e0 	.word	0x0800d9e0

0800754c <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af02      	add	r7, sp, #8
		lcd_print(2, 1, " Baslatildi ... ");
	} else {
		lcd_print(1, 1, " Syncronization ");
		lcd_print(2, 1, "   Started...   ");
	}*/
	lcd_print(1, 1, dataSynchText);
 8007552:	4a13      	ldr	r2, [pc, #76]	@ (80075a0 <convertAndSendData+0x54>)
 8007554:	2101      	movs	r1, #1
 8007556:	2001      	movs	r0, #1
 8007558:	f000 fa16 	bl	8007988 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 800755c:	4a11      	ldr	r2, [pc, #68]	@ (80075a4 <convertAndSendData+0x58>)
 800755e:	2101      	movs	r1, #1
 8007560:	2002      	movs	r0, #2
 8007562:	f000 fa11 	bl	8007988 <lcd_print>

	for(int i=0; i<2; i++) {
 8007566:	2300      	movs	r3, #0
 8007568:	607b      	str	r3, [r7, #4]
 800756a:	e00c      	b.n	8007586 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 800756c:	f7ff fed0 	bl	8007310 <mergeData>
 8007570:	4603      	mov	r3, r0
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	4b0c      	ldr	r3, [pc, #48]	@ (80075a8 <convertAndSendData+0x5c>)
 8007576:	4a0d      	ldr	r2, [pc, #52]	@ (80075ac <convertAndSendData+0x60>)
 8007578:	490d      	ldr	r1, [pc, #52]	@ (80075b0 <convertAndSendData+0x64>)
 800757a:	480e      	ldr	r0, [pc, #56]	@ (80075b4 <convertAndSendData+0x68>)
 800757c:	f7f9 f95e 	bl	800083c <sendMachineData>
	for(int i=0; i<2; i++) {
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3301      	adds	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b01      	cmp	r3, #1
 800758a:	ddef      	ble.n	800756c <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 800758c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007590:	f000 ff54 	bl	800843c <HAL_Delay>
	lcd_clear();
 8007594:	f000 fa24 	bl	80079e0 <lcd_clear>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000370 	.word	0x20000370
 80075a4:	20000380 	.word	0x20000380
 80075a8:	200001d0 	.word	0x200001d0
 80075ac:	200001bc 	.word	0x200001bc
 80075b0:	200001b0 	.word	0x200001b0
 80075b4:	20000458 	.word	0x20000458

080075b8 <iotSetup>:

void iotSetup() {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80075bc:	4b10      	ldr	r3, [pc, #64]	@ (8007600 <iotSetup+0x48>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d016      	beq.n	80075f2 <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 80075c4:	f000 f822 	bl	800760c <checkEEPROM4ID>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d001      	beq.n	80075d2 <iotSetup+0x1a>
			takeMachineID();
 80075ce:	f7ff f9cb 	bl	8006968 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 80075d2:	480c      	ldr	r0, [pc, #48]	@ (8007604 <iotSetup+0x4c>)
 80075d4:	f7f8 fe26 	bl	8000224 <strlen>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d801      	bhi.n	80075e2 <iotSetup+0x2a>
			takeWifiSSID();
 80075de:	f7ff fb5b 	bl	8006c98 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 80075e2:	4809      	ldr	r0, [pc, #36]	@ (8007608 <iotSetup+0x50>)
 80075e4:	f7f8 fe1e 	bl	8000224 <strlen>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d801      	bhi.n	80075f2 <iotSetup+0x3a>
			takeWifiPass();
 80075ee:	f7ff fcf1 	bl	8006fd4 <takeWifiPass>
			//goto takeIDSection;
		//}
	//}

	//ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
	HAL_Delay(500);
 80075f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80075f6:	f000 ff21 	bl	800843c <HAL_Delay>
	//convertAndSendData();
}
 80075fa:	bf00      	nop
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	2000022f 	.word	0x2000022f
 8007604:	200001bc 	.word	0x200001bc
 8007608:	200001d0 	.word	0x200001d0

0800760c <checkEEPROM4ID>:

int checkEEPROM4ID() {
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8007612:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <checkEEPROM4ID+0x44>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8007618:	2301      	movs	r3, #1
 800761a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 800761c:	2300      	movs	r3, #0
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	e00d      	b.n	800763e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8007622:	4a0c      	ldr	r2, [pc, #48]	@ (8007654 <checkEEPROM4ID+0x48>)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <checkEEPROM4ID+0x26>
			returnVal = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3301      	adds	r3, #1
 800763c:	607b      	str	r3, [r7, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b0b      	cmp	r3, #11
 8007642:	ddee      	ble.n	8007622 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8007644:	68bb      	ldr	r3, [r7, #8]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr
 8007650:	20000004 	.word	0x20000004
 8007654:	20000138 	.word	0x20000138

08007658 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af02      	add	r7, sp, #8
 800765e:	4603      	mov	r3, r0
 8007660:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	f023 030f 	bic.w	r3, r3, #15
 8007668:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800766a:	79fb      	ldrb	r3, [r7, #7]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007670:	7b7b      	ldrb	r3, [r7, #13]
 8007672:	f043 030c 	orr.w	r3, r3, #12
 8007676:	b2db      	uxtb	r3, r3
 8007678:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800767a:	7b7b      	ldrb	r3, [r7, #13]
 800767c:	f043 0308 	orr.w	r3, r3, #8
 8007680:	b2db      	uxtb	r3, r3
 8007682:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007684:	7b3b      	ldrb	r3, [r7, #12]
 8007686:	f043 030c 	orr.w	r3, r3, #12
 800768a:	b2db      	uxtb	r3, r3
 800768c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800768e:	7b3b      	ldrb	r3, [r7, #12]
 8007690:	f043 0308 	orr.w	r3, r3, #8
 8007694:	b2db      	uxtb	r3, r3
 8007696:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007698:	bf00      	nop
 800769a:	4825      	ldr	r0, [pc, #148]	@ (8007730 <lcd_send_cmd+0xd8>)
 800769c:	f002 fac7 	bl	8009c2e <HAL_I2C_GetError>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d0f9      	beq.n	800769a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80076a6:	bf00      	nop
 80076a8:	4821      	ldr	r0, [pc, #132]	@ (8007730 <lcd_send_cmd+0xd8>)
 80076aa:	f002 fab3 	bl	8009c14 <HAL_I2C_GetState>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d1f9      	bne.n	80076a8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80076b4:	4b1f      	ldr	r3, [pc, #124]	@ (8007734 <lcd_send_cmd+0xdc>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d116      	bne.n	80076ea <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
 80076c0:	e00f      	b.n	80076e2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	3310      	adds	r3, #16
 80076c6:	443b      	add	r3, r7
 80076c8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	f022 0208 	bic.w	r2, r2, #8
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	3310      	adds	r3, #16
 80076d6:	443b      	add	r3, r7
 80076d8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	3301      	adds	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d9ec      	bls.n	80076c2 <lcd_send_cmd+0x6a>
 80076e8:	e015      	b.n	8007716 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80076ea:	2300      	movs	r3, #0
 80076ec:	73bb      	strb	r3, [r7, #14]
 80076ee:	e00f      	b.n	8007710 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	3310      	adds	r3, #16
 80076f4:	443b      	add	r3, r7
 80076f6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	f042 0208 	orr.w	r2, r2, #8
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	3310      	adds	r3, #16
 8007704:	443b      	add	r3, r7
 8007706:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	3301      	adds	r3, #1
 800770e:	73bb      	strb	r3, [r7, #14]
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d9ec      	bls.n	80076f0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007716:	f107 0208 	add.w	r2, r7, #8
 800771a:	2364      	movs	r3, #100	@ 0x64
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	2304      	movs	r3, #4
 8007720:	214e      	movs	r1, #78	@ 0x4e
 8007722:	4803      	ldr	r0, [pc, #12]	@ (8007730 <lcd_send_cmd+0xd8>)
 8007724:	f001 fe16 	bl	8009354 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	200003bc 	.word	0x200003bc
 8007734:	20000390 	.word	0x20000390

08007738 <lcd_send_data>:

void lcd_send_data (char data) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af02      	add	r7, sp, #8
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	f023 030f 	bic.w	r3, r3, #15
 8007748:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007750:	7b7b      	ldrb	r3, [r7, #13]
 8007752:	f043 030d 	orr.w	r3, r3, #13
 8007756:	b2db      	uxtb	r3, r3
 8007758:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800775a:	7b7b      	ldrb	r3, [r7, #13]
 800775c:	f043 0309 	orr.w	r3, r3, #9
 8007760:	b2db      	uxtb	r3, r3
 8007762:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007764:	7b3b      	ldrb	r3, [r7, #12]
 8007766:	f043 030d 	orr.w	r3, r3, #13
 800776a:	b2db      	uxtb	r3, r3
 800776c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800776e:	7b3b      	ldrb	r3, [r7, #12]
 8007770:	f043 0309 	orr.w	r3, r3, #9
 8007774:	b2db      	uxtb	r3, r3
 8007776:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007778:	bf00      	nop
 800777a:	4825      	ldr	r0, [pc, #148]	@ (8007810 <lcd_send_data+0xd8>)
 800777c:	f002 fa57 	bl	8009c2e <HAL_I2C_GetError>
 8007780:	4603      	mov	r3, r0
 8007782:	2b04      	cmp	r3, #4
 8007784:	d0f9      	beq.n	800777a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007786:	bf00      	nop
 8007788:	4821      	ldr	r0, [pc, #132]	@ (8007810 <lcd_send_data+0xd8>)
 800778a:	f002 fa43 	bl	8009c14 <HAL_I2C_GetState>
 800778e:	4603      	mov	r3, r0
 8007790:	2b20      	cmp	r3, #32
 8007792:	d1f9      	bne.n	8007788 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007794:	4b1f      	ldr	r3, [pc, #124]	@ (8007814 <lcd_send_data+0xdc>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d116      	bne.n	80077ca <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
 80077a0:	e00f      	b.n	80077c2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	3310      	adds	r3, #16
 80077a6:	443b      	add	r3, r7
 80077a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	f022 0208 	bic.w	r2, r2, #8
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	3310      	adds	r3, #16
 80077b6:	443b      	add	r3, r7
 80077b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	3301      	adds	r3, #1
 80077c0:	73fb      	strb	r3, [r7, #15]
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d9ec      	bls.n	80077a2 <lcd_send_data+0x6a>
 80077c8:	e015      	b.n	80077f6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80077ca:	2300      	movs	r3, #0
 80077cc:	73bb      	strb	r3, [r7, #14]
 80077ce:	e00f      	b.n	80077f0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	3310      	adds	r3, #16
 80077d4:	443b      	add	r3, r7
 80077d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	f042 0208 	orr.w	r2, r2, #8
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	3310      	adds	r3, #16
 80077e4:	443b      	add	r3, r7
 80077e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	3301      	adds	r3, #1
 80077ee:	73bb      	strb	r3, [r7, #14]
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d9ec      	bls.n	80077d0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80077f6:	f107 0208 	add.w	r2, r7, #8
 80077fa:	2364      	movs	r3, #100	@ 0x64
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	2304      	movs	r3, #4
 8007800:	214e      	movs	r1, #78	@ 0x4e
 8007802:	4803      	ldr	r0, [pc, #12]	@ (8007810 <lcd_send_data+0xd8>)
 8007804:	f001 fda6 	bl	8009354 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007808:	bf00      	nop
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	200003bc 	.word	0x200003bc
 8007814:	20000390 	.word	0x20000390

08007818 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007820:	e006      	b.n	8007830 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff ff84 	bl	8007738 <lcd_send_data>
	while (*str) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f4      	bne.n	8007822 <lcd_send_string+0xa>
	}
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af02      	add	r7, sp, #8
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	f023 030f 	bic.w	r3, r3, #15
 8007854:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800785c:	7b7b      	ldrb	r3, [r7, #13]
 800785e:	f043 030d 	orr.w	r3, r3, #13
 8007862:	b2db      	uxtb	r3, r3
 8007864:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007866:	7b7b      	ldrb	r3, [r7, #13]
 8007868:	f043 0309 	orr.w	r3, r3, #9
 800786c:	b2db      	uxtb	r3, r3
 800786e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007870:	7b3b      	ldrb	r3, [r7, #12]
 8007872:	f043 030d 	orr.w	r3, r3, #13
 8007876:	b2db      	uxtb	r3, r3
 8007878:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800787a:	7b3b      	ldrb	r3, [r7, #12]
 800787c:	f043 0309 	orr.w	r3, r3, #9
 8007880:	b2db      	uxtb	r3, r3
 8007882:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007884:	bf00      	nop
 8007886:	4825      	ldr	r0, [pc, #148]	@ (800791c <lcd_send_char+0xd8>)
 8007888:	f002 f9d1 	bl	8009c2e <HAL_I2C_GetError>
 800788c:	4603      	mov	r3, r0
 800788e:	2b04      	cmp	r3, #4
 8007890:	d0f9      	beq.n	8007886 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007892:	bf00      	nop
 8007894:	4821      	ldr	r0, [pc, #132]	@ (800791c <lcd_send_char+0xd8>)
 8007896:	f002 f9bd 	bl	8009c14 <HAL_I2C_GetState>
 800789a:	4603      	mov	r3, r0
 800789c:	2b20      	cmp	r3, #32
 800789e:	d1f9      	bne.n	8007894 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80078a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007920 <lcd_send_char+0xdc>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d116      	bne.n	80078d6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
 80078ac:	e00f      	b.n	80078ce <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	3310      	adds	r3, #16
 80078b2:	443b      	add	r3, r7
 80078b4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	f022 0208 	bic.w	r2, r2, #8
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	3310      	adds	r3, #16
 80078c2:	443b      	add	r3, r7
 80078c4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	3301      	adds	r3, #1
 80078cc:	73fb      	strb	r3, [r7, #15]
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d9ec      	bls.n	80078ae <lcd_send_char+0x6a>
 80078d4:	e015      	b.n	8007902 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80078d6:	2300      	movs	r3, #0
 80078d8:	73bb      	strb	r3, [r7, #14]
 80078da:	e00f      	b.n	80078fc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	3310      	adds	r3, #16
 80078e0:	443b      	add	r3, r7
 80078e2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	f042 0208 	orr.w	r2, r2, #8
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	3310      	adds	r3, #16
 80078f0:	443b      	add	r3, r7
 80078f2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	3301      	adds	r3, #1
 80078fa:	73bb      	strb	r3, [r7, #14]
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d9ec      	bls.n	80078dc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	2364      	movs	r3, #100	@ 0x64
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2304      	movs	r3, #4
 800790c:	214e      	movs	r1, #78	@ 0x4e
 800790e:	4803      	ldr	r0, [pc, #12]	@ (800791c <lcd_send_char+0xd8>)
 8007910:	f001 fd20 	bl	8009354 <HAL_I2C_Master_Transmit>
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200003bc 	.word	0x200003bc
 8007920:	20000390 	.word	0x20000390

08007924 <lcd_init>:

void lcd_init (void) {
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007928:	2002      	movs	r0, #2
 800792a:	f7ff fe95 	bl	8007658 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800792e:	2028      	movs	r0, #40	@ 0x28
 8007930:	f7ff fe92 	bl	8007658 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007934:	200c      	movs	r0, #12
 8007936:	f7ff fe8f 	bl	8007658 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800793a:	2080      	movs	r0, #128	@ 0x80
 800793c:	f7ff fe8c 	bl	8007658 <lcd_send_cmd>
	lcd_backlight(1);
 8007940:	2001      	movs	r0, #1
 8007942:	f000 f86d 	bl	8007a20 <lcd_backlight>
}
 8007946:	bf00      	nop
 8007948:	bd80      	pop	{r7, pc}

0800794a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	4603      	mov	r3, r0
 8007952:	460a      	mov	r2, r1
 8007954:	71fb      	strb	r3, [r7, #7]
 8007956:	4613      	mov	r3, r2
 8007958:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d106      	bne.n	800796e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007960:	79bb      	ldrb	r3, [r7, #6]
 8007962:	337f      	adds	r3, #127	@ 0x7f
 8007964:	b2db      	uxtb	r3, r3
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff fe76 	bl	8007658 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800796c:	e008      	b.n	8007980 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d105      	bne.n	8007980 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007974:	79bb      	ldrb	r3, [r7, #6]
 8007976:	3b41      	subs	r3, #65	@ 0x41
 8007978:	b2db      	uxtb	r3, r3
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff fe6c 	bl	8007658 <lcd_send_cmd>
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	603a      	str	r2, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
 8007994:	460b      	mov	r3, r1
 8007996:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007998:	79ba      	ldrb	r2, [r7, #6]
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff ffd3 	bl	800794a <lcd_gotoxy>
	lcd_send_string(str);
 80079a4:	6838      	ldr	r0, [r7, #0]
 80079a6:	f7ff ff37 	bl	8007818 <lcd_send_string>
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	4603      	mov	r3, r0
 80079ba:	71fb      	strb	r3, [r7, #7]
 80079bc:	460b      	mov	r3, r1
 80079be:	71bb      	strb	r3, [r7, #6]
 80079c0:	4613      	mov	r3, r2
 80079c2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80079c4:	79ba      	ldrb	r2, [r7, #6]
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	4611      	mov	r1, r2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff ffbd 	bl	800794a <lcd_gotoxy>
    lcd_send_char(ch);
 80079d0:	797b      	ldrb	r3, [r7, #5]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff ff36 	bl	8007844 <lcd_send_char>
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <lcd_clear>:

void lcd_clear(void) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80079e4:	2001      	movs	r0, #1
 80079e6:	f7ff fe37 	bl	8007658 <lcd_send_cmd>
    HAL_Delay(2);
 80079ea:	2002      	movs	r0, #2
 80079ec:	f000 fd26 	bl	800843c <HAL_Delay>
}
 80079f0:	bf00      	nop
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	460a      	mov	r2, r1
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	4613      	mov	r3, r2
 8007a02:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007a04:	79ba      	ldrb	r2, [r7, #6]
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff ff9d 	bl	800794a <lcd_gotoxy>

    lcd_send_char(' ');
 8007a10:	2020      	movs	r0, #32
 8007a12:	f7ff ff17 	bl	8007844 <lcd_send_char>
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007a2a:	4a05      	ldr	r2, [pc, #20]	@ (8007a40 <lcd_backlight+0x20>)
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007a30:	2000      	movs	r0, #0
 8007a32:	f7ff fe11 	bl	8007658 <lcd_send_cmd>
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000390 	.word	0x20000390

08007a44 <lcd_cursor>:

void lcd_cursor(int state) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d106      	bne.n	8007a60 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007a52:	200e      	movs	r0, #14
 8007a54:	f7ff fe00 	bl	8007658 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007a58:	200f      	movs	r0, #15
 8007a5a:	f7ff fdfd 	bl	8007658 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007a5e:	e002      	b.n	8007a66 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007a60:	200c      	movs	r0, #12
 8007a62:	f7ff fdf9 	bl	8007658 <lcd_send_cmd>
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007a78:	4b04      	ldr	r3, [pc, #16]	@ (8007a8c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	4a03      	ldr	r2, [pc, #12]	@ (8007a8c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007a80:	6013      	str	r3, [r2, #0]
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr
 8007a8c:	200001e8 	.word	0x200001e8

08007a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a94:	f000 fc70 	bl	8008378 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007a98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007a9c:	f000 fcce 	bl	800843c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007aa0:	f000 f89c 	bl	8007bdc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007aa4:	f000 f9be 	bl	8007e24 <MX_GPIO_Init>
  MX_CAN_Init();
 8007aa8:	f000 f8de 	bl	8007c68 <MX_CAN_Init>
  MX_I2C1_Init();
 8007aac:	f000 f910 	bl	8007cd0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ab0:	f000 f93c 	bl	8007d2c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007ab4:	f000 f98c 	bl	8007dd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007ab8:	2201      	movs	r2, #1
 8007aba:	2140      	movs	r1, #64	@ 0x40
 8007abc:	483e      	ldr	r0, [pc, #248]	@ (8007bb8 <main+0x128>)
 8007abe:	f001 faa4 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	2180      	movs	r1, #128	@ 0x80
 8007ac6:	483c      	ldr	r0, [pc, #240]	@ (8007bb8 <main+0x128>)
 8007ac8:	f001 fa9f 	bl	800900a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007acc:	200a      	movs	r0, #10
 8007ace:	f000 fcb5 	bl	800843c <HAL_Delay>
  lcd_init();
 8007ad2:	f7ff ff27 	bl	8007924 <lcd_init>
  HAL_Delay(10);
 8007ad6:	200a      	movs	r0, #10
 8007ad8:	f000 fcb0 	bl	800843c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007adc:	4837      	ldr	r0, [pc, #220]	@ (8007bbc <main+0x12c>)
 8007ade:	f003 f947 	bl	800ad70 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ae2:	bf00      	nop
 8007ae4:	4836      	ldr	r0, [pc, #216]	@ (8007bc0 <main+0x130>)
 8007ae6:	f002 f8a2 	bl	8009c2e <HAL_I2C_GetError>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	d0f9      	beq.n	8007ae4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007af0:	bf00      	nop
 8007af2:	4833      	ldr	r0, [pc, #204]	@ (8007bc0 <main+0x130>)
 8007af4:	f002 f88e 	bl	8009c14 <HAL_I2C_GetState>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d1f9      	bne.n	8007af2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007afe:	2200      	movs	r2, #0
 8007b00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007b04:	482c      	ldr	r0, [pc, #176]	@ (8007bb8 <main+0x128>)
 8007b06:	f001 fa80 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007b10:	4829      	ldr	r0, [pc, #164]	@ (8007bb8 <main+0x128>)
 8007b12:	f001 fa7a 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b16:	2200      	movs	r2, #0
 8007b18:	2104      	movs	r1, #4
 8007b1a:	4827      	ldr	r0, [pc, #156]	@ (8007bb8 <main+0x128>)
 8007b1c:	f001 fa75 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007b20:	2200      	movs	r2, #0
 8007b22:	2102      	movs	r1, #2
 8007b24:	4824      	ldr	r0, [pc, #144]	@ (8007bb8 <main+0x128>)
 8007b26:	f001 fa70 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	4822      	ldr	r0, [pc, #136]	@ (8007bb8 <main+0x128>)
 8007b30:	f001 fa6b 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007b34:	2200      	movs	r2, #0
 8007b36:	2120      	movs	r1, #32
 8007b38:	4822      	ldr	r0, [pc, #136]	@ (8007bc4 <main+0x134>)
 8007b3a:	f001 fa66 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2110      	movs	r1, #16
 8007b42:	4820      	ldr	r0, [pc, #128]	@ (8007bc4 <main+0x134>)
 8007b44:	f001 fa61 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2180      	movs	r1, #128	@ 0x80
 8007b4c:	481e      	ldr	r0, [pc, #120]	@ (8007bc8 <main+0x138>)
 8007b4e:	f001 fa5c 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007b52:	2200      	movs	r2, #0
 8007b54:	2140      	movs	r1, #64	@ 0x40
 8007b56:	481c      	ldr	r0, [pc, #112]	@ (8007bc8 <main+0x138>)
 8007b58:	f001 fa57 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2120      	movs	r1, #32
 8007b60:	4819      	ldr	r0, [pc, #100]	@ (8007bc8 <main+0x138>)
 8007b62:	f001 fa52 	bl	800900a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007b66:	2200      	movs	r2, #0
 8007b68:	2110      	movs	r1, #16
 8007b6a:	4817      	ldr	r0, [pc, #92]	@ (8007bc8 <main+0x138>)
 8007b6c:	f001 fa4d 	bl	800900a <HAL_GPIO_WritePin>

  i2cTest();
 8007b70:	f7f9 f860 	bl	8000c34 <i2cTest>
  HAL_Delay(100);
 8007b74:	2064      	movs	r0, #100	@ 0x64
 8007b76:	f000 fc61 	bl	800843c <HAL_Delay>
  //menuVariableFinisher();
  //lcd_print(1, 1, splashTextGN);
  //lcd_print(2, 1, splashText2GN);
  lcd_print(1,1,"     RMK-V1     ");
 8007b7a:	4a14      	ldr	r2, [pc, #80]	@ (8007bcc <main+0x13c>)
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	2001      	movs	r0, #1
 8007b80:	f7ff ff02 	bl	8007988 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007b84:	4a12      	ldr	r2, [pc, #72]	@ (8007bd0 <main+0x140>)
 8007b86:	2101      	movs	r1, #1
 8007b88:	2002      	movs	r0, #2
 8007b8a:	f7ff fefd 	bl	8007988 <lcd_print>
  HAL_Delay(1000);
 8007b8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007b92:	f000 fc53 	bl	800843c <HAL_Delay>
  lcd_clear();
 8007b96:	f7ff ff23 	bl	80079e0 <lcd_clear>

  eepromKontrol();
 8007b9a:	f7f8 fb4b 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007b9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007ba2:	f000 fc4b 	bl	800843c <HAL_Delay>

  backLightTimer = millis;
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd4 <main+0x144>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a0b      	ldr	r2, [pc, #44]	@ (8007bd8 <main+0x148>)
 8007bac:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007bae:	f7ff fd03 	bl	80075b8 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007bb2:	f7fe fd49 	bl	8006648 <mainLoop>
 8007bb6:	e7fc      	b.n	8007bb2 <main+0x122>
 8007bb8:	40010c00 	.word	0x40010c00
 8007bbc:	20000410 	.word	0x20000410
 8007bc0:	200003bc 	.word	0x200003bc
 8007bc4:	40011000 	.word	0x40011000
 8007bc8:	40010800 	.word	0x40010800
 8007bcc:	0800d9e4 	.word	0x0800d9e4
 8007bd0:	0800d9f8 	.word	0x0800d9f8
 8007bd4:	200001e8 	.word	0x200001e8
 8007bd8:	20000204 	.word	0x20000204

08007bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b090      	sub	sp, #64	@ 0x40
 8007be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007be2:	f107 0318 	add.w	r3, r7, #24
 8007be6:	2228      	movs	r2, #40	@ 0x28
 8007be8:	2100      	movs	r1, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f004 fb5e 	bl	800c2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007bf0:	1d3b      	adds	r3, r7, #4
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	609a      	str	r2, [r3, #8]
 8007bfa:	60da      	str	r2, [r3, #12]
 8007bfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007c02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c10:	2302      	movs	r3, #2
 8007c12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007c1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8007c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c20:	f107 0318 	add.w	r3, r7, #24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f002 fc43 	bl	800a4b0 <HAL_RCC_OscConfig>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007c30:	f000 f9a2 	bl	8007f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c34:	230f      	movs	r3, #15
 8007c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007c4a:	1d3b      	adds	r3, r7, #4
 8007c4c:	2102      	movs	r1, #2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 feb0 	bl	800a9b4 <HAL_RCC_ClockConfig>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007c5a:	f000 f98d 	bl	8007f78 <Error_Handler>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	3740      	adds	r7, #64	@ 0x40
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007c6c:	4b16      	ldr	r3, [pc, #88]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c6e:	4a17      	ldr	r2, [pc, #92]	@ (8007ccc <MX_CAN_Init+0x64>)
 8007c70:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007c72:	4b15      	ldr	r3, [pc, #84]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c74:	2210      	movs	r2, #16
 8007c76:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007c78:	4b13      	ldr	r3, [pc, #76]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007c7e:	4b12      	ldr	r3, [pc, #72]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007c84:	4b10      	ldr	r3, [pc, #64]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007c90:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007c96:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007ca2:	4b09      	ldr	r3, [pc, #36]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007ca8:	4b07      	ldr	r3, [pc, #28]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007cae:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007cb4:	4804      	ldr	r0, [pc, #16]	@ (8007cc8 <MX_CAN_Init+0x60>)
 8007cb6:	f000 fbe5 	bl	8008484 <HAL_CAN_Init>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007cc0:	f000 f95a 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007cc4:	bf00      	nop
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000394 	.word	0x20000394
 8007ccc:	40006400 	.word	0x40006400

08007cd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007cd4:	4b12      	ldr	r3, [pc, #72]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007cd6:	4a13      	ldr	r2, [pc, #76]	@ (8007d24 <MX_I2C1_Init+0x54>)
 8007cd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007cda:	4b11      	ldr	r3, [pc, #68]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007cdc:	4a12      	ldr	r2, [pc, #72]	@ (8007d28 <MX_I2C1_Init+0x58>)
 8007cde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007cec:	4b0c      	ldr	r3, [pc, #48]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007cee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007cf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007cfa:	4b09      	ldr	r3, [pc, #36]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007d00:	4b07      	ldr	r3, [pc, #28]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007d06:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007d0c:	4804      	ldr	r0, [pc, #16]	@ (8007d20 <MX_I2C1_Init+0x50>)
 8007d0e:	f001 f9ad 	bl	800906c <HAL_I2C_Init>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007d18:	f000 f92e 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007d1c:	bf00      	nop
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	200003bc 	.word	0x200003bc
 8007d24:	40005400 	.word	0x40005400
 8007d28:	00061a80 	.word	0x00061a80

08007d2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d32:	f107 0308 	add.w	r3, r7, #8
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	605a      	str	r2, [r3, #4]
 8007d3c:	609a      	str	r2, [r3, #8]
 8007d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d40:	463b      	mov	r3, r7
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007d48:	4b1f      	ldr	r3, [pc, #124]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d4a:	4a20      	ldr	r2, [pc, #128]	@ (8007dcc <MX_TIM1_Init+0xa0>)
 8007d4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d50:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8007d54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d56:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d5e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8007d62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d64:	4b18      	ldr	r3, [pc, #96]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007d6a:	4b17      	ldr	r3, [pc, #92]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d70:	4b15      	ldr	r3, [pc, #84]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007d76:	4814      	ldr	r0, [pc, #80]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d78:	f002 ffaa 	bl	800acd0 <HAL_TIM_Base_Init>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007d82:	f000 f8f9 	bl	8007f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007d8c:	f107 0308 	add.w	r3, r7, #8
 8007d90:	4619      	mov	r1, r3
 8007d92:	480d      	ldr	r0, [pc, #52]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007d94:	f003 f954 	bl	800b040 <HAL_TIM_ConfigClockSource>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007d9e:	f000 f8eb 	bl	8007f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007da2:	2300      	movs	r3, #0
 8007da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007da6:	2300      	movs	r3, #0
 8007da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007daa:	463b      	mov	r3, r7
 8007dac:	4619      	mov	r1, r3
 8007dae:	4806      	ldr	r0, [pc, #24]	@ (8007dc8 <MX_TIM1_Init+0x9c>)
 8007db0:	f003 fb42 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007dba:	f000 f8dd 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007dbe:	bf00      	nop
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000410 	.word	0x20000410
 8007dcc:	40012c00 	.word	0x40012c00

08007dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007dd4:	4b11      	ldr	r3, [pc, #68]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007dd6:	4a12      	ldr	r2, [pc, #72]	@ (8007e20 <MX_USART1_UART_Init+0x50>)
 8007dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007dda:	4b10      	ldr	r3, [pc, #64]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007ddc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007de2:	4b0e      	ldr	r3, [pc, #56]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007de8:	4b0c      	ldr	r3, [pc, #48]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007dee:	4b0b      	ldr	r3, [pc, #44]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007df4:	4b09      	ldr	r3, [pc, #36]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007df6:	220c      	movs	r2, #12
 8007df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007dfa:	4b08      	ldr	r3, [pc, #32]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e00:	4b06      	ldr	r3, [pc, #24]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007e06:	4805      	ldr	r0, [pc, #20]	@ (8007e1c <MX_USART1_UART_Init+0x4c>)
 8007e08:	f003 fb94 	bl	800b534 <HAL_UART_Init>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007e12:	f000 f8b1 	bl	8007f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007e16:	bf00      	nop
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000458 	.word	0x20000458
 8007e20:	40013800 	.word	0x40013800

08007e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e2a:	f107 0310 	add.w	r3, r7, #16
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	605a      	str	r2, [r3, #4]
 8007e34:	609a      	str	r2, [r3, #8]
 8007e36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e38:	4b4b      	ldr	r3, [pc, #300]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e3e:	f043 0310 	orr.w	r3, r3, #16
 8007e42:	6193      	str	r3, [r2, #24]
 8007e44:	4b48      	ldr	r3, [pc, #288]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	f003 0310 	and.w	r3, r3, #16
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e50:	4b45      	ldr	r3, [pc, #276]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	4a44      	ldr	r2, [pc, #272]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e56:	f043 0320 	orr.w	r3, r3, #32
 8007e5a:	6193      	str	r3, [r2, #24]
 8007e5c:	4b42      	ldr	r3, [pc, #264]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	60bb      	str	r3, [r7, #8]
 8007e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e68:	4b3f      	ldr	r3, [pc, #252]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e6e:	f043 0304 	orr.w	r3, r3, #4
 8007e72:	6193      	str	r3, [r2, #24]
 8007e74:	4b3c      	ldr	r3, [pc, #240]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	607b      	str	r3, [r7, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e80:	4b39      	ldr	r3, [pc, #228]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	4a38      	ldr	r2, [pc, #224]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e86:	f043 0308 	orr.w	r3, r3, #8
 8007e8a:	6193      	str	r3, [r2, #24]
 8007e8c:	4b36      	ldr	r3, [pc, #216]	@ (8007f68 <MX_GPIO_Init+0x144>)
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007e98:	2200      	movs	r2, #0
 8007e9a:	21f0      	movs	r1, #240	@ 0xf0
 8007e9c:	4833      	ldr	r0, [pc, #204]	@ (8007f6c <MX_GPIO_Init+0x148>)
 8007e9e:	f001 f8b4 	bl	800900a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f241 0130 	movw	r1, #4144	@ 0x1030
 8007ea8:	4831      	ldr	r0, [pc, #196]	@ (8007f70 <MX_GPIO_Init+0x14c>)
 8007eaa:	f001 f8ae 	bl	800900a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f640 4107 	movw	r1, #3079	@ 0xc07
 8007eb4:	482f      	ldr	r0, [pc, #188]	@ (8007f74 <MX_GPIO_Init+0x150>)
 8007eb6:	f001 f8a8 	bl	800900a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007eba:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8007ebe:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ec8:	f107 0310 	add.w	r3, r7, #16
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4828      	ldr	r0, [pc, #160]	@ (8007f70 <MX_GPIO_Init+0x14c>)
 8007ed0:	f000 fe24 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007ed4:	f248 130f 	movw	r3, #33039	@ 0x810f
 8007ed8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ee2:	f107 0310 	add.w	r3, r7, #16
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4820      	ldr	r0, [pc, #128]	@ (8007f6c <MX_GPIO_Init+0x148>)
 8007eea:	f000 fe17 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007eee:	23f0      	movs	r3, #240	@ 0xf0
 8007ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007efa:	2302      	movs	r3, #2
 8007efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007efe:	f107 0310 	add.w	r3, r7, #16
 8007f02:	4619      	mov	r1, r3
 8007f04:	4819      	ldr	r0, [pc, #100]	@ (8007f6c <MX_GPIO_Init+0x148>)
 8007f06:	f000 fe09 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007f0a:	f241 0330 	movw	r3, #4144	@ 0x1030
 8007f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f10:	2301      	movs	r3, #1
 8007f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	4619      	mov	r1, r3
 8007f22:	4813      	ldr	r0, [pc, #76]	@ (8007f70 <MX_GPIO_Init+0x14c>)
 8007f24:	f000 fdfa 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007f28:	f640 4307 	movw	r3, #3079	@ 0xc07
 8007f2c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f36:	2302      	movs	r3, #2
 8007f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f3a:	f107 0310 	add.w	r3, r7, #16
 8007f3e:	4619      	mov	r1, r3
 8007f40:	480c      	ldr	r0, [pc, #48]	@ (8007f74 <MX_GPIO_Init+0x150>)
 8007f42:	f000 fdeb 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007f46:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8007f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f54:	f107 0310 	add.w	r3, r7, #16
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4806      	ldr	r0, [pc, #24]	@ (8007f74 <MX_GPIO_Init+0x150>)
 8007f5c:	f000 fdde 	bl	8008b1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007f60:	bf00      	nop
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	40010800 	.word	0x40010800
 8007f70:	40011000 	.word	0x40011000
 8007f74:	40010c00 	.word	0x40010c00

08007f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007f7c:	bf00      	nop
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007f8a:	4b15      	ldr	r3, [pc, #84]	@ (8007fe0 <HAL_MspInit+0x5c>)
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	4a14      	ldr	r2, [pc, #80]	@ (8007fe0 <HAL_MspInit+0x5c>)
 8007f90:	f043 0301 	orr.w	r3, r3, #1
 8007f94:	6193      	str	r3, [r2, #24]
 8007f96:	4b12      	ldr	r3, [pc, #72]	@ (8007fe0 <HAL_MspInit+0x5c>)
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	60bb      	str	r3, [r7, #8]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe0 <HAL_MspInit+0x5c>)
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8007fe0 <HAL_MspInit+0x5c>)
 8007fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fac:	61d3      	str	r3, [r2, #28]
 8007fae:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe0 <HAL_MspInit+0x5c>)
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007fba:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe4 <HAL_MspInit+0x60>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	4a04      	ldr	r2, [pc, #16]	@ (8007fe4 <HAL_MspInit+0x60>)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bc80      	pop	{r7}
 8007fde:	4770      	bx	lr
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	40010000 	.word	0x40010000

08007fe8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff0:	f107 0310 	add.w	r3, r7, #16
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a1c      	ldr	r2, [pc, #112]	@ (8008074 <HAL_CAN_MspInit+0x8c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d131      	bne.n	800806c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008008:	4b1b      	ldr	r3, [pc, #108]	@ (8008078 <HAL_CAN_MspInit+0x90>)
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	4a1a      	ldr	r2, [pc, #104]	@ (8008078 <HAL_CAN_MspInit+0x90>)
 800800e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008012:	61d3      	str	r3, [r2, #28]
 8008014:	4b18      	ldr	r3, [pc, #96]	@ (8008078 <HAL_CAN_MspInit+0x90>)
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008020:	4b15      	ldr	r3, [pc, #84]	@ (8008078 <HAL_CAN_MspInit+0x90>)
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	4a14      	ldr	r2, [pc, #80]	@ (8008078 <HAL_CAN_MspInit+0x90>)
 8008026:	f043 0304 	orr.w	r3, r3, #4
 800802a:	6193      	str	r3, [r2, #24]
 800802c:	4b12      	ldr	r3, [pc, #72]	@ (8008078 <HAL_CAN_MspInit+0x90>)
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	60bb      	str	r3, [r7, #8]
 8008036:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008038:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800803c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008042:	2300      	movs	r3, #0
 8008044:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008046:	f107 0310 	add.w	r3, r7, #16
 800804a:	4619      	mov	r1, r3
 800804c:	480b      	ldr	r0, [pc, #44]	@ (800807c <HAL_CAN_MspInit+0x94>)
 800804e:	f000 fd65 	bl	8008b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008058:	2302      	movs	r3, #2
 800805a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800805c:	2303      	movs	r3, #3
 800805e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008060:	f107 0310 	add.w	r3, r7, #16
 8008064:	4619      	mov	r1, r3
 8008066:	4805      	ldr	r0, [pc, #20]	@ (800807c <HAL_CAN_MspInit+0x94>)
 8008068:	f000 fd58 	bl	8008b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800806c:	bf00      	nop
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40006400 	.word	0x40006400
 8008078:	40021000 	.word	0x40021000
 800807c:	40010800 	.word	0x40010800

08008080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008088:	f107 0310 	add.w	r3, r7, #16
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	609a      	str	r2, [r3, #8]
 8008094:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a15      	ldr	r2, [pc, #84]	@ (80080f0 <HAL_I2C_MspInit+0x70>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d123      	bne.n	80080e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080a0:	4b14      	ldr	r3, [pc, #80]	@ (80080f4 <HAL_I2C_MspInit+0x74>)
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	4a13      	ldr	r2, [pc, #76]	@ (80080f4 <HAL_I2C_MspInit+0x74>)
 80080a6:	f043 0308 	orr.w	r3, r3, #8
 80080aa:	6193      	str	r3, [r2, #24]
 80080ac:	4b11      	ldr	r3, [pc, #68]	@ (80080f4 <HAL_I2C_MspInit+0x74>)
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80080b8:	23c0      	movs	r3, #192	@ 0xc0
 80080ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80080bc:	2312      	movs	r3, #18
 80080be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80080c0:	2303      	movs	r3, #3
 80080c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	4619      	mov	r1, r3
 80080ca:	480b      	ldr	r0, [pc, #44]	@ (80080f8 <HAL_I2C_MspInit+0x78>)
 80080cc:	f000 fd26 	bl	8008b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80080d0:	4b08      	ldr	r3, [pc, #32]	@ (80080f4 <HAL_I2C_MspInit+0x74>)
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	4a07      	ldr	r2, [pc, #28]	@ (80080f4 <HAL_I2C_MspInit+0x74>)
 80080d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080da:	61d3      	str	r3, [r2, #28]
 80080dc:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <HAL_I2C_MspInit+0x74>)
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80080e8:	bf00      	nop
 80080ea:	3720      	adds	r7, #32
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	40005400 	.word	0x40005400
 80080f4:	40021000 	.word	0x40021000
 80080f8:	40010c00 	.word	0x40010c00

080080fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a0a      	ldr	r2, [pc, #40]	@ (8008134 <HAL_I2C_MspDeInit+0x38>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d10d      	bne.n	800812a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800810e:	4b0a      	ldr	r3, [pc, #40]	@ (8008138 <HAL_I2C_MspDeInit+0x3c>)
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	4a09      	ldr	r2, [pc, #36]	@ (8008138 <HAL_I2C_MspDeInit+0x3c>)
 8008114:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008118:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800811a:	2140      	movs	r1, #64	@ 0x40
 800811c:	4807      	ldr	r0, [pc, #28]	@ (800813c <HAL_I2C_MspDeInit+0x40>)
 800811e:	f000 fe91 	bl	8008e44 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008122:	2180      	movs	r1, #128	@ 0x80
 8008124:	4805      	ldr	r0, [pc, #20]	@ (800813c <HAL_I2C_MspDeInit+0x40>)
 8008126:	f000 fe8d 	bl	8008e44 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	40005400 	.word	0x40005400
 8008138:	40021000 	.word	0x40021000
 800813c:	40010c00 	.word	0x40010c00

08008140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a0d      	ldr	r2, [pc, #52]	@ (8008184 <HAL_TIM_Base_MspInit+0x44>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d113      	bne.n	800817a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008152:	4b0d      	ldr	r3, [pc, #52]	@ (8008188 <HAL_TIM_Base_MspInit+0x48>)
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	4a0c      	ldr	r2, [pc, #48]	@ (8008188 <HAL_TIM_Base_MspInit+0x48>)
 8008158:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800815c:	6193      	str	r3, [r2, #24]
 800815e:	4b0a      	ldr	r3, [pc, #40]	@ (8008188 <HAL_TIM_Base_MspInit+0x48>)
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800816a:	2200      	movs	r2, #0
 800816c:	2100      	movs	r1, #0
 800816e:	2019      	movs	r0, #25
 8008170:	f000 fb5b 	bl	800882a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008174:	2019      	movs	r0, #25
 8008176:	f000 fb74 	bl	8008862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40012c00 	.word	0x40012c00
 8008188:	40021000 	.word	0x40021000

0800818c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008194:	f107 0310 	add.w	r3, r7, #16
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	605a      	str	r2, [r3, #4]
 800819e:	609a      	str	r2, [r3, #8]
 80081a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a20      	ldr	r2, [pc, #128]	@ (8008228 <HAL_UART_MspInit+0x9c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d139      	bne.n	8008220 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80081ac:	4b1f      	ldr	r3, [pc, #124]	@ (800822c <HAL_UART_MspInit+0xa0>)
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	4a1e      	ldr	r2, [pc, #120]	@ (800822c <HAL_UART_MspInit+0xa0>)
 80081b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081b6:	6193      	str	r3, [r2, #24]
 80081b8:	4b1c      	ldr	r3, [pc, #112]	@ (800822c <HAL_UART_MspInit+0xa0>)
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081c4:	4b19      	ldr	r3, [pc, #100]	@ (800822c <HAL_UART_MspInit+0xa0>)
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	4a18      	ldr	r2, [pc, #96]	@ (800822c <HAL_UART_MspInit+0xa0>)
 80081ca:	f043 0304 	orr.w	r3, r3, #4
 80081ce:	6193      	str	r3, [r2, #24]
 80081d0:	4b16      	ldr	r3, [pc, #88]	@ (800822c <HAL_UART_MspInit+0xa0>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	60bb      	str	r3, [r7, #8]
 80081da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80081dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e2:	2302      	movs	r3, #2
 80081e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081e6:	2303      	movs	r3, #3
 80081e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ea:	f107 0310 	add.w	r3, r7, #16
 80081ee:	4619      	mov	r1, r3
 80081f0:	480f      	ldr	r0, [pc, #60]	@ (8008230 <HAL_UART_MspInit+0xa4>)
 80081f2:	f000 fc93 	bl	8008b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80081f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	4619      	mov	r1, r3
 800820a:	4809      	ldr	r0, [pc, #36]	@ (8008230 <HAL_UART_MspInit+0xa4>)
 800820c:	f000 fc86 	bl	8008b1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008210:	2200      	movs	r2, #0
 8008212:	2100      	movs	r1, #0
 8008214:	2025      	movs	r0, #37	@ 0x25
 8008216:	f000 fb08 	bl	800882a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800821a:	2025      	movs	r0, #37	@ 0x25
 800821c:	f000 fb21 	bl	8008862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008220:	bf00      	nop
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40013800 	.word	0x40013800
 800822c:	40021000 	.word	0x40021000
 8008230:	40010800 	.word	0x40010800

08008234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <NMI_Handler+0x4>

0800823c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008240:	bf00      	nop
 8008242:	e7fd      	b.n	8008240 <HardFault_Handler+0x4>

08008244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008248:	bf00      	nop
 800824a:	e7fd      	b.n	8008248 <MemManage_Handler+0x4>

0800824c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <BusFault_Handler+0x4>

08008254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <UsageFault_Handler+0x4>

0800825c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008260:	bf00      	nop
 8008262:	46bd      	mov	sp, r7
 8008264:	bc80      	pop	{r7}
 8008266:	4770      	bx	lr

08008268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800826c:	bf00      	nop
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008278:	bf00      	nop
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr

08008280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008284:	f000 f8be 	bl	8008404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008288:	bf00      	nop
 800828a:	bd80      	pop	{r7, pc}

0800828c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008290:	4802      	ldr	r0, [pc, #8]	@ (800829c <TIM1_UP_IRQHandler+0x10>)
 8008292:	f002 fdcd 	bl	800ae30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008296:	bf00      	nop
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000410 	.word	0x20000410

080082a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80082a4:	4802      	ldr	r0, [pc, #8]	@ (80082b0 <USART1_IRQHandler+0x10>)
 80082a6:	f003 f9cb 	bl	800b640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80082aa:	bf00      	nop
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000458 	.word	0x20000458

080082b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80082bc:	4a14      	ldr	r2, [pc, #80]	@ (8008310 <_sbrk+0x5c>)
 80082be:	4b15      	ldr	r3, [pc, #84]	@ (8008314 <_sbrk+0x60>)
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80082c8:	4b13      	ldr	r3, [pc, #76]	@ (8008318 <_sbrk+0x64>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d102      	bne.n	80082d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80082d0:	4b11      	ldr	r3, [pc, #68]	@ (8008318 <_sbrk+0x64>)
 80082d2:	4a12      	ldr	r2, [pc, #72]	@ (800831c <_sbrk+0x68>)
 80082d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80082d6:	4b10      	ldr	r3, [pc, #64]	@ (8008318 <_sbrk+0x64>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d207      	bcs.n	80082f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80082e4:	f003 fffa 	bl	800c2dc <__errno>
 80082e8:	4603      	mov	r3, r0
 80082ea:	220c      	movs	r2, #12
 80082ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082f2:	e009      	b.n	8008308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80082f4:	4b08      	ldr	r3, [pc, #32]	@ (8008318 <_sbrk+0x64>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80082fa:	4b07      	ldr	r3, [pc, #28]	@ (8008318 <_sbrk+0x64>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4413      	add	r3, r2
 8008302:	4a05      	ldr	r2, [pc, #20]	@ (8008318 <_sbrk+0x64>)
 8008304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008306:	68fb      	ldr	r3, [r7, #12]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	2000c000 	.word	0x2000c000
 8008314:	00000400 	.word	0x00000400
 8008318:	200004a0 	.word	0x200004a0
 800831c:	200005f0 	.word	0x200005f0

08008320 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008320:	b480      	push	{r7}
 8008322:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008324:	bf00      	nop
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800832c:	480c      	ldr	r0, [pc, #48]	@ (8008360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800832e:	490d      	ldr	r1, [pc, #52]	@ (8008364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008330:	4a0d      	ldr	r2, [pc, #52]	@ (8008368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008334:	e002      	b.n	800833c <LoopCopyDataInit>

08008336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800833a:	3304      	adds	r3, #4

0800833c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800833c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800833e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008340:	d3f9      	bcc.n	8008336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008342:	4a0a      	ldr	r2, [pc, #40]	@ (800836c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008344:	4c0a      	ldr	r4, [pc, #40]	@ (8008370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008348:	e001      	b.n	800834e <LoopFillZerobss>

0800834a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800834a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800834c:	3204      	adds	r2, #4

0800834e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800834e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008350:	d3fb      	bcc.n	800834a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008352:	f7ff ffe5 	bl	8008320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008356:	f003 ffc7 	bl	800c2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800835a:	f7ff fb99 	bl	8007a90 <main>
  bx lr
 800835e:	4770      	bx	lr
  ldr r0, =_sdata
 8008360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008364:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8008368:	0800daa0 	.word	0x0800daa0
  ldr r2, =_sbss
 800836c:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8008370:	200005f0 	.word	0x200005f0

08008374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008374:	e7fe      	b.n	8008374 <ADC1_2_IRQHandler>
	...

08008378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800837c:	4b08      	ldr	r3, [pc, #32]	@ (80083a0 <HAL_Init+0x28>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a07      	ldr	r2, [pc, #28]	@ (80083a0 <HAL_Init+0x28>)
 8008382:	f043 0310 	orr.w	r3, r3, #16
 8008386:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008388:	2003      	movs	r0, #3
 800838a:	f000 fa43 	bl	8008814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800838e:	200f      	movs	r0, #15
 8008390:	f000 f808 	bl	80083a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008394:	f7ff fdf6 	bl	8007f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	40022000 	.word	0x40022000

080083a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80083ac:	4b12      	ldr	r3, [pc, #72]	@ (80083f8 <HAL_InitTick+0x54>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <HAL_InitTick+0x58>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	4619      	mov	r1, r3
 80083b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80083ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80083be:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fa5b 	bl	800887e <HAL_SYSTICK_Config>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e00e      	b.n	80083f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b0f      	cmp	r3, #15
 80083d6:	d80a      	bhi.n	80083ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80083d8:	2200      	movs	r2, #0
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083e0:	f000 fa23 	bl	800882a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80083e4:	4a06      	ldr	r2, [pc, #24]	@ (8008400 <HAL_InitTick+0x5c>)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e000      	b.n	80083f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	200000c0 	.word	0x200000c0
 80083fc:	200000c8 	.word	0x200000c8
 8008400:	200000c4 	.word	0x200000c4

08008404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008408:	4b05      	ldr	r3, [pc, #20]	@ (8008420 <HAL_IncTick+0x1c>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	4b05      	ldr	r3, [pc, #20]	@ (8008424 <HAL_IncTick+0x20>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4413      	add	r3, r2
 8008414:	4a03      	ldr	r2, [pc, #12]	@ (8008424 <HAL_IncTick+0x20>)
 8008416:	6013      	str	r3, [r2, #0]
}
 8008418:	bf00      	nop
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr
 8008420:	200000c8 	.word	0x200000c8
 8008424:	200004a4 	.word	0x200004a4

08008428 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
  return uwTick;
 800842c:	4b02      	ldr	r3, [pc, #8]	@ (8008438 <HAL_GetTick+0x10>)
 800842e:	681b      	ldr	r3, [r3, #0]
}
 8008430:	4618      	mov	r0, r3
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr
 8008438:	200004a4 	.word	0x200004a4

0800843c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008444:	f7ff fff0 	bl	8008428 <HAL_GetTick>
 8008448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008454:	d005      	beq.n	8008462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008456:	4b0a      	ldr	r3, [pc, #40]	@ (8008480 <HAL_Delay+0x44>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008462:	bf00      	nop
 8008464:	f7ff ffe0 	bl	8008428 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	429a      	cmp	r2, r3
 8008472:	d8f7      	bhi.n	8008464 <HAL_Delay+0x28>
  {
  }
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	200000c8 	.word	0x200000c8

08008484 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e0ed      	b.n	8008672 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fda0 	bl	8007fe8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084b8:	f7ff ffb6 	bl	8008428 <HAL_GetTick>
 80084bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80084be:	e012      	b.n	80084e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80084c0:	f7ff ffb2 	bl	8008428 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b0a      	cmp	r3, #10
 80084cc:	d90b      	bls.n	80084e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2205      	movs	r2, #5
 80084de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e0c5      	b.n	8008672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0e5      	beq.n	80084c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0202 	bic.w	r2, r2, #2
 8008502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008504:	f7ff ff90 	bl	8008428 <HAL_GetTick>
 8008508:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800850a:	e012      	b.n	8008532 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800850c:	f7ff ff8c 	bl	8008428 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b0a      	cmp	r3, #10
 8008518:	d90b      	bls.n	8008532 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2205      	movs	r2, #5
 800852a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e09f      	b.n	8008672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e5      	bne.n	800850c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7e1b      	ldrb	r3, [r3, #24]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d108      	bne.n	800855a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	e007      	b.n	800856a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7e5b      	ldrb	r3, [r3, #25]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d108      	bne.n	8008584 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	e007      	b.n	8008594 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008592:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	7e9b      	ldrb	r3, [r3, #26]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d108      	bne.n	80085ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0220 	orr.w	r2, r2, #32
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	e007      	b.n	80085be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f022 0220 	bic.w	r2, r2, #32
 80085bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	7edb      	ldrb	r3, [r3, #27]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d108      	bne.n	80085d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0210 	bic.w	r2, r2, #16
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	e007      	b.n	80085e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0210 	orr.w	r2, r2, #16
 80085e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	7f1b      	ldrb	r3, [r3, #28]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d108      	bne.n	8008602 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0208 	orr.w	r2, r2, #8
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e007      	b.n	8008612 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0208 	bic.w	r2, r2, #8
 8008610:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7f5b      	ldrb	r3, [r3, #29]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d108      	bne.n	800862c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0204 	orr.w	r2, r2, #4
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e007      	b.n	800863c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0204 	bic.w	r2, r2, #4
 800863a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	ea42 0103 	orr.w	r1, r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	1e5a      	subs	r2, r3, #1
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <__NVIC_SetPriorityGrouping>:
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800868c:	4b0c      	ldr	r3, [pc, #48]	@ (80086c0 <__NVIC_SetPriorityGrouping+0x44>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008698:	4013      	ands	r3, r2
 800869a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80086a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086ae:	4a04      	ldr	r2, [pc, #16]	@ (80086c0 <__NVIC_SetPriorityGrouping+0x44>)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	60d3      	str	r3, [r2, #12]
}
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	e000ed00 	.word	0xe000ed00

080086c4 <__NVIC_GetPriorityGrouping>:
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086c8:	4b04      	ldr	r3, [pc, #16]	@ (80086dc <__NVIC_GetPriorityGrouping+0x18>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	0a1b      	lsrs	r3, r3, #8
 80086ce:	f003 0307 	and.w	r3, r3, #7
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	e000ed00 	.word	0xe000ed00

080086e0 <__NVIC_EnableIRQ>:
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	db0b      	blt.n	800870a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	f003 021f 	and.w	r2, r3, #31
 80086f8:	4906      	ldr	r1, [pc, #24]	@ (8008714 <__NVIC_EnableIRQ+0x34>)
 80086fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086fe:	095b      	lsrs	r3, r3, #5
 8008700:	2001      	movs	r0, #1
 8008702:	fa00 f202 	lsl.w	r2, r0, r2
 8008706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr
 8008714:	e000e100 	.word	0xe000e100

08008718 <__NVIC_SetPriority>:
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008728:	2b00      	cmp	r3, #0
 800872a:	db0a      	blt.n	8008742 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	b2da      	uxtb	r2, r3
 8008730:	490c      	ldr	r1, [pc, #48]	@ (8008764 <__NVIC_SetPriority+0x4c>)
 8008732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008736:	0112      	lsls	r2, r2, #4
 8008738:	b2d2      	uxtb	r2, r2
 800873a:	440b      	add	r3, r1
 800873c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008740:	e00a      	b.n	8008758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	b2da      	uxtb	r2, r3
 8008746:	4908      	ldr	r1, [pc, #32]	@ (8008768 <__NVIC_SetPriority+0x50>)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	3b04      	subs	r3, #4
 8008750:	0112      	lsls	r2, r2, #4
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	440b      	add	r3, r1
 8008756:	761a      	strb	r2, [r3, #24]
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	e000e100 	.word	0xe000e100
 8008768:	e000ed00 	.word	0xe000ed00

0800876c <NVIC_EncodePriority>:
{
 800876c:	b480      	push	{r7}
 800876e:	b089      	sub	sp, #36	@ 0x24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f003 0307 	and.w	r3, r3, #7
 800877e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	f1c3 0307 	rsb	r3, r3, #7
 8008786:	2b04      	cmp	r3, #4
 8008788:	bf28      	it	cs
 800878a:	2304      	movcs	r3, #4
 800878c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	3304      	adds	r3, #4
 8008792:	2b06      	cmp	r3, #6
 8008794:	d902      	bls.n	800879c <NVIC_EncodePriority+0x30>
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	3b03      	subs	r3, #3
 800879a:	e000      	b.n	800879e <NVIC_EncodePriority+0x32>
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	43da      	mvns	r2, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	401a      	ands	r2, r3
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	fa01 f303 	lsl.w	r3, r1, r3
 80087be:	43d9      	mvns	r1, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087c4:	4313      	orrs	r3, r2
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3724      	adds	r7, #36	@ 0x24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr

080087d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3b01      	subs	r3, #1
 80087dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087e0:	d301      	bcc.n	80087e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80087e2:	2301      	movs	r3, #1
 80087e4:	e00f      	b.n	8008806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80087e6:	4a0a      	ldr	r2, [pc, #40]	@ (8008810 <SysTick_Config+0x40>)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087ee:	210f      	movs	r1, #15
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087f4:	f7ff ff90 	bl	8008718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087f8:	4b05      	ldr	r3, [pc, #20]	@ (8008810 <SysTick_Config+0x40>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80087fe:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <SysTick_Config+0x40>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	e000e010 	.word	0xe000e010

08008814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff ff2d 	bl	800867c <__NVIC_SetPriorityGrouping>
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	4603      	mov	r3, r0
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008838:	2300      	movs	r3, #0
 800883a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800883c:	f7ff ff42 	bl	80086c4 <__NVIC_GetPriorityGrouping>
 8008840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	6978      	ldr	r0, [r7, #20]
 8008848:	f7ff ff90 	bl	800876c <NVIC_EncodePriority>
 800884c:	4602      	mov	r2, r0
 800884e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff ff5f 	bl	8008718 <__NVIC_SetPriority>
}
 800885a:	bf00      	nop
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	4603      	mov	r3, r0
 800886a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800886c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff ff35 	bl	80086e0 <__NVIC_EnableIRQ>
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff ffa2 	bl	80087d0 <SysTick_Config>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d008      	beq.n	80088c0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2204      	movs	r2, #4
 80088b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e020      	b.n	8008902 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 020e 	bic.w	r2, r2, #14
 80088ce:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0201 	bic.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e8:	2101      	movs	r1, #1
 80088ea:	fa01 f202 	lsl.w	r2, r1, r2
 80088ee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	bc80      	pop	{r7}
 800890a:	4770      	bx	lr

0800890c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b02      	cmp	r3, #2
 8008922:	d005      	beq.n	8008930 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2204      	movs	r2, #4
 8008928:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
 800892e:	e0d6      	b.n	8008ade <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 020e 	bic.w	r2, r2, #14
 800893e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	4b64      	ldr	r3, [pc, #400]	@ (8008ae8 <HAL_DMA_Abort_IT+0x1dc>)
 8008958:	429a      	cmp	r2, r3
 800895a:	d958      	bls.n	8008a0e <HAL_DMA_Abort_IT+0x102>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a62      	ldr	r2, [pc, #392]	@ (8008aec <HAL_DMA_Abort_IT+0x1e0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d04f      	beq.n	8008a06 <HAL_DMA_Abort_IT+0xfa>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a61      	ldr	r2, [pc, #388]	@ (8008af0 <HAL_DMA_Abort_IT+0x1e4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d048      	beq.n	8008a02 <HAL_DMA_Abort_IT+0xf6>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a5f      	ldr	r2, [pc, #380]	@ (8008af4 <HAL_DMA_Abort_IT+0x1e8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d040      	beq.n	80089fc <HAL_DMA_Abort_IT+0xf0>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a5e      	ldr	r2, [pc, #376]	@ (8008af8 <HAL_DMA_Abort_IT+0x1ec>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d038      	beq.n	80089f6 <HAL_DMA_Abort_IT+0xea>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a5c      	ldr	r2, [pc, #368]	@ (8008afc <HAL_DMA_Abort_IT+0x1f0>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d030      	beq.n	80089f0 <HAL_DMA_Abort_IT+0xe4>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a5b      	ldr	r2, [pc, #364]	@ (8008b00 <HAL_DMA_Abort_IT+0x1f4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d028      	beq.n	80089ea <HAL_DMA_Abort_IT+0xde>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a52      	ldr	r2, [pc, #328]	@ (8008ae8 <HAL_DMA_Abort_IT+0x1dc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d020      	beq.n	80089e4 <HAL_DMA_Abort_IT+0xd8>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a57      	ldr	r2, [pc, #348]	@ (8008b04 <HAL_DMA_Abort_IT+0x1f8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d019      	beq.n	80089e0 <HAL_DMA_Abort_IT+0xd4>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a55      	ldr	r2, [pc, #340]	@ (8008b08 <HAL_DMA_Abort_IT+0x1fc>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d012      	beq.n	80089dc <HAL_DMA_Abort_IT+0xd0>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a54      	ldr	r2, [pc, #336]	@ (8008b0c <HAL_DMA_Abort_IT+0x200>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00a      	beq.n	80089d6 <HAL_DMA_Abort_IT+0xca>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a52      	ldr	r2, [pc, #328]	@ (8008b10 <HAL_DMA_Abort_IT+0x204>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d102      	bne.n	80089d0 <HAL_DMA_Abort_IT+0xc4>
 80089ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089ce:	e01b      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80089d4:	e018      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80089da:	e015      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089dc:	2310      	movs	r3, #16
 80089de:	e013      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089e0:	2301      	movs	r3, #1
 80089e2:	e011      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089e8:	e00e      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089ea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80089ee:	e00b      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80089f4:	e008      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089fa:	e005      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 80089fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a00:	e002      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 8008a02:	2310      	movs	r3, #16
 8008a04:	e000      	b.n	8008a08 <HAL_DMA_Abort_IT+0xfc>
 8008a06:	2301      	movs	r3, #1
 8008a08:	4a42      	ldr	r2, [pc, #264]	@ (8008b14 <HAL_DMA_Abort_IT+0x208>)
 8008a0a:	6053      	str	r3, [r2, #4]
 8008a0c:	e057      	b.n	8008abe <HAL_DMA_Abort_IT+0x1b2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a36      	ldr	r2, [pc, #216]	@ (8008aec <HAL_DMA_Abort_IT+0x1e0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d04f      	beq.n	8008ab8 <HAL_DMA_Abort_IT+0x1ac>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a34      	ldr	r2, [pc, #208]	@ (8008af0 <HAL_DMA_Abort_IT+0x1e4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d048      	beq.n	8008ab4 <HAL_DMA_Abort_IT+0x1a8>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a33      	ldr	r2, [pc, #204]	@ (8008af4 <HAL_DMA_Abort_IT+0x1e8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d040      	beq.n	8008aae <HAL_DMA_Abort_IT+0x1a2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a31      	ldr	r2, [pc, #196]	@ (8008af8 <HAL_DMA_Abort_IT+0x1ec>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d038      	beq.n	8008aa8 <HAL_DMA_Abort_IT+0x19c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a30      	ldr	r2, [pc, #192]	@ (8008afc <HAL_DMA_Abort_IT+0x1f0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d030      	beq.n	8008aa2 <HAL_DMA_Abort_IT+0x196>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a2e      	ldr	r2, [pc, #184]	@ (8008b00 <HAL_DMA_Abort_IT+0x1f4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d028      	beq.n	8008a9c <HAL_DMA_Abort_IT+0x190>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a26      	ldr	r2, [pc, #152]	@ (8008ae8 <HAL_DMA_Abort_IT+0x1dc>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d020      	beq.n	8008a96 <HAL_DMA_Abort_IT+0x18a>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a2a      	ldr	r2, [pc, #168]	@ (8008b04 <HAL_DMA_Abort_IT+0x1f8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d019      	beq.n	8008a92 <HAL_DMA_Abort_IT+0x186>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a29      	ldr	r2, [pc, #164]	@ (8008b08 <HAL_DMA_Abort_IT+0x1fc>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d012      	beq.n	8008a8e <HAL_DMA_Abort_IT+0x182>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a27      	ldr	r2, [pc, #156]	@ (8008b0c <HAL_DMA_Abort_IT+0x200>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00a      	beq.n	8008a88 <HAL_DMA_Abort_IT+0x17c>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a26      	ldr	r2, [pc, #152]	@ (8008b10 <HAL_DMA_Abort_IT+0x204>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d102      	bne.n	8008a82 <HAL_DMA_Abort_IT+0x176>
 8008a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a80:	e01b      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a86:	e018      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a8c:	e015      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008a8e:	2310      	movs	r3, #16
 8008a90:	e013      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e011      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a9a:	e00e      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008a9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008aa0:	e00b      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008aa6:	e008      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008aac:	e005      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ab2:	e002      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	e000      	b.n	8008aba <HAL_DMA_Abort_IT+0x1ae>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4a17      	ldr	r2, [pc, #92]	@ (8008b18 <HAL_DMA_Abort_IT+0x20c>)
 8008abc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
    } 
  }
  return status;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	40020080 	.word	0x40020080
 8008aec:	40020008 	.word	0x40020008
 8008af0:	4002001c 	.word	0x4002001c
 8008af4:	40020030 	.word	0x40020030
 8008af8:	40020044 	.word	0x40020044
 8008afc:	40020058 	.word	0x40020058
 8008b00:	4002006c 	.word	0x4002006c
 8008b04:	40020408 	.word	0x40020408
 8008b08:	4002041c 	.word	0x4002041c
 8008b0c:	40020430 	.word	0x40020430
 8008b10:	40020444 	.word	0x40020444
 8008b14:	40020400 	.word	0x40020400
 8008b18:	40020000 	.word	0x40020000

08008b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b08b      	sub	sp, #44	@ 0x2c
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b26:	2300      	movs	r3, #0
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b2e:	e179      	b.n	8008e24 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008b30:	2201      	movs	r2, #1
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	4013      	ands	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	f040 8168 	bne.w	8008e1e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	4a96      	ldr	r2, [pc, #600]	@ (8008dac <HAL_GPIO_Init+0x290>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d05e      	beq.n	8008c16 <HAL_GPIO_Init+0xfa>
 8008b58:	4a94      	ldr	r2, [pc, #592]	@ (8008dac <HAL_GPIO_Init+0x290>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d875      	bhi.n	8008c4a <HAL_GPIO_Init+0x12e>
 8008b5e:	4a94      	ldr	r2, [pc, #592]	@ (8008db0 <HAL_GPIO_Init+0x294>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d058      	beq.n	8008c16 <HAL_GPIO_Init+0xfa>
 8008b64:	4a92      	ldr	r2, [pc, #584]	@ (8008db0 <HAL_GPIO_Init+0x294>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d86f      	bhi.n	8008c4a <HAL_GPIO_Init+0x12e>
 8008b6a:	4a92      	ldr	r2, [pc, #584]	@ (8008db4 <HAL_GPIO_Init+0x298>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d052      	beq.n	8008c16 <HAL_GPIO_Init+0xfa>
 8008b70:	4a90      	ldr	r2, [pc, #576]	@ (8008db4 <HAL_GPIO_Init+0x298>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d869      	bhi.n	8008c4a <HAL_GPIO_Init+0x12e>
 8008b76:	4a90      	ldr	r2, [pc, #576]	@ (8008db8 <HAL_GPIO_Init+0x29c>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d04c      	beq.n	8008c16 <HAL_GPIO_Init+0xfa>
 8008b7c:	4a8e      	ldr	r2, [pc, #568]	@ (8008db8 <HAL_GPIO_Init+0x29c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d863      	bhi.n	8008c4a <HAL_GPIO_Init+0x12e>
 8008b82:	4a8e      	ldr	r2, [pc, #568]	@ (8008dbc <HAL_GPIO_Init+0x2a0>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d046      	beq.n	8008c16 <HAL_GPIO_Init+0xfa>
 8008b88:	4a8c      	ldr	r2, [pc, #560]	@ (8008dbc <HAL_GPIO_Init+0x2a0>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d85d      	bhi.n	8008c4a <HAL_GPIO_Init+0x12e>
 8008b8e:	2b12      	cmp	r3, #18
 8008b90:	d82a      	bhi.n	8008be8 <HAL_GPIO_Init+0xcc>
 8008b92:	2b12      	cmp	r3, #18
 8008b94:	d859      	bhi.n	8008c4a <HAL_GPIO_Init+0x12e>
 8008b96:	a201      	add	r2, pc, #4	@ (adr r2, 8008b9c <HAL_GPIO_Init+0x80>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008c17 	.word	0x08008c17
 8008ba0:	08008bf1 	.word	0x08008bf1
 8008ba4:	08008c03 	.word	0x08008c03
 8008ba8:	08008c45 	.word	0x08008c45
 8008bac:	08008c4b 	.word	0x08008c4b
 8008bb0:	08008c4b 	.word	0x08008c4b
 8008bb4:	08008c4b 	.word	0x08008c4b
 8008bb8:	08008c4b 	.word	0x08008c4b
 8008bbc:	08008c4b 	.word	0x08008c4b
 8008bc0:	08008c4b 	.word	0x08008c4b
 8008bc4:	08008c4b 	.word	0x08008c4b
 8008bc8:	08008c4b 	.word	0x08008c4b
 8008bcc:	08008c4b 	.word	0x08008c4b
 8008bd0:	08008c4b 	.word	0x08008c4b
 8008bd4:	08008c4b 	.word	0x08008c4b
 8008bd8:	08008c4b 	.word	0x08008c4b
 8008bdc:	08008c4b 	.word	0x08008c4b
 8008be0:	08008bf9 	.word	0x08008bf9
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	4a75      	ldr	r2, [pc, #468]	@ (8008dc0 <HAL_GPIO_Init+0x2a4>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d013      	beq.n	8008c16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008bee:	e02c      	b.n	8008c4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	623b      	str	r3, [r7, #32]
          break;
 8008bf6:	e029      	b.n	8008c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	623b      	str	r3, [r7, #32]
          break;
 8008c00:	e024      	b.n	8008c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	3308      	adds	r3, #8
 8008c08:	623b      	str	r3, [r7, #32]
          break;
 8008c0a:	e01f      	b.n	8008c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	330c      	adds	r3, #12
 8008c12:	623b      	str	r3, [r7, #32]
          break;
 8008c14:	e01a      	b.n	8008c4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008c1e:	2304      	movs	r3, #4
 8008c20:	623b      	str	r3, [r7, #32]
          break;
 8008c22:	e013      	b.n	8008c4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d105      	bne.n	8008c38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c2c:	2308      	movs	r3, #8
 8008c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	611a      	str	r2, [r3, #16]
          break;
 8008c36:	e009      	b.n	8008c4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c38:	2308      	movs	r3, #8
 8008c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	615a      	str	r2, [r3, #20]
          break;
 8008c42:	e003      	b.n	8008c4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008c44:	2300      	movs	r3, #0
 8008c46:	623b      	str	r3, [r7, #32]
          break;
 8008c48:	e000      	b.n	8008c4c <HAL_GPIO_Init+0x130>
          break;
 8008c4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	2bff      	cmp	r3, #255	@ 0xff
 8008c50:	d801      	bhi.n	8008c56 <HAL_GPIO_Init+0x13a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	e001      	b.n	8008c5a <HAL_GPIO_Init+0x13e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	3304      	adds	r3, #4
 8008c5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	2bff      	cmp	r3, #255	@ 0xff
 8008c60:	d802      	bhi.n	8008c68 <HAL_GPIO_Init+0x14c>
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	e002      	b.n	8008c6e <HAL_GPIO_Init+0x152>
 8008c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6a:	3b08      	subs	r3, #8
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	210f      	movs	r1, #15
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7c:	43db      	mvns	r3, r3
 8008c7e:	401a      	ands	r2, r3
 8008c80:	6a39      	ldr	r1, [r7, #32]
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	fa01 f303 	lsl.w	r3, r1, r3
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 80c1 	beq.w	8008e1e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008c9c:	4b49      	ldr	r3, [pc, #292]	@ (8008dc4 <HAL_GPIO_Init+0x2a8>)
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	4a48      	ldr	r2, [pc, #288]	@ (8008dc4 <HAL_GPIO_Init+0x2a8>)
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	6193      	str	r3, [r2, #24]
 8008ca8:	4b46      	ldr	r3, [pc, #280]	@ (8008dc4 <HAL_GPIO_Init+0x2a8>)
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	60bb      	str	r3, [r7, #8]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008cb4:	4a44      	ldr	r2, [pc, #272]	@ (8008dc8 <HAL_GPIO_Init+0x2ac>)
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	089b      	lsrs	r3, r3, #2
 8008cba:	3302      	adds	r3, #2
 8008cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	220f      	movs	r2, #15
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a3c      	ldr	r2, [pc, #240]	@ (8008dcc <HAL_GPIO_Init+0x2b0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d01f      	beq.n	8008d20 <HAL_GPIO_Init+0x204>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8008dd0 <HAL_GPIO_Init+0x2b4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d019      	beq.n	8008d1c <HAL_GPIO_Init+0x200>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a3a      	ldr	r2, [pc, #232]	@ (8008dd4 <HAL_GPIO_Init+0x2b8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <HAL_GPIO_Init+0x1fc>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a39      	ldr	r2, [pc, #228]	@ (8008dd8 <HAL_GPIO_Init+0x2bc>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00d      	beq.n	8008d14 <HAL_GPIO_Init+0x1f8>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a38      	ldr	r2, [pc, #224]	@ (8008ddc <HAL_GPIO_Init+0x2c0>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d007      	beq.n	8008d10 <HAL_GPIO_Init+0x1f4>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a37      	ldr	r2, [pc, #220]	@ (8008de0 <HAL_GPIO_Init+0x2c4>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d101      	bne.n	8008d0c <HAL_GPIO_Init+0x1f0>
 8008d08:	2305      	movs	r3, #5
 8008d0a:	e00a      	b.n	8008d22 <HAL_GPIO_Init+0x206>
 8008d0c:	2306      	movs	r3, #6
 8008d0e:	e008      	b.n	8008d22 <HAL_GPIO_Init+0x206>
 8008d10:	2304      	movs	r3, #4
 8008d12:	e006      	b.n	8008d22 <HAL_GPIO_Init+0x206>
 8008d14:	2303      	movs	r3, #3
 8008d16:	e004      	b.n	8008d22 <HAL_GPIO_Init+0x206>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e002      	b.n	8008d22 <HAL_GPIO_Init+0x206>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e000      	b.n	8008d22 <HAL_GPIO_Init+0x206>
 8008d20:	2300      	movs	r3, #0
 8008d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d24:	f002 0203 	and.w	r2, r2, #3
 8008d28:	0092      	lsls	r2, r2, #2
 8008d2a:	4093      	lsls	r3, r2
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008d32:	4925      	ldr	r1, [pc, #148]	@ (8008dc8 <HAL_GPIO_Init+0x2ac>)
 8008d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d36:	089b      	lsrs	r3, r3, #2
 8008d38:	3302      	adds	r3, #2
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008d4c:	4b25      	ldr	r3, [pc, #148]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	4924      	ldr	r1, [pc, #144]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	608b      	str	r3, [r1, #8]
 8008d58:	e006      	b.n	8008d68 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008d5a:	4b22      	ldr	r3, [pc, #136]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	43db      	mvns	r3, r3
 8008d62:	4920      	ldr	r1, [pc, #128]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d64:	4013      	ands	r3, r2
 8008d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d006      	beq.n	8008d82 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008d74:	4b1b      	ldr	r3, [pc, #108]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	491a      	ldr	r1, [pc, #104]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	60cb      	str	r3, [r1, #12]
 8008d80:	e006      	b.n	8008d90 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008d82:	4b18      	ldr	r3, [pc, #96]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	43db      	mvns	r3, r3
 8008d8a:	4916      	ldr	r1, [pc, #88]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d025      	beq.n	8008de8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008d9c:	4b11      	ldr	r3, [pc, #68]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	4910      	ldr	r1, [pc, #64]	@ (8008de4 <HAL_GPIO_Init+0x2c8>)
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	604b      	str	r3, [r1, #4]
 8008da8:	e025      	b.n	8008df6 <HAL_GPIO_Init+0x2da>
 8008daa:	bf00      	nop
 8008dac:	10320000 	.word	0x10320000
 8008db0:	10310000 	.word	0x10310000
 8008db4:	10220000 	.word	0x10220000
 8008db8:	10210000 	.word	0x10210000
 8008dbc:	10120000 	.word	0x10120000
 8008dc0:	10110000 	.word	0x10110000
 8008dc4:	40021000 	.word	0x40021000
 8008dc8:	40010000 	.word	0x40010000
 8008dcc:	40010800 	.word	0x40010800
 8008dd0:	40010c00 	.word	0x40010c00
 8008dd4:	40011000 	.word	0x40011000
 8008dd8:	40011400 	.word	0x40011400
 8008ddc:	40011800 	.word	0x40011800
 8008de0:	40011c00 	.word	0x40011c00
 8008de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008de8:	4b15      	ldr	r3, [pc, #84]	@ (8008e40 <HAL_GPIO_Init+0x324>)
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	43db      	mvns	r3, r3
 8008df0:	4913      	ldr	r1, [pc, #76]	@ (8008e40 <HAL_GPIO_Init+0x324>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d006      	beq.n	8008e10 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008e02:	4b0f      	ldr	r3, [pc, #60]	@ (8008e40 <HAL_GPIO_Init+0x324>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	490e      	ldr	r1, [pc, #56]	@ (8008e40 <HAL_GPIO_Init+0x324>)
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	600b      	str	r3, [r1, #0]
 8008e0e:	e006      	b.n	8008e1e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008e10:	4b0b      	ldr	r3, [pc, #44]	@ (8008e40 <HAL_GPIO_Init+0x324>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	43db      	mvns	r3, r3
 8008e18:	4909      	ldr	r1, [pc, #36]	@ (8008e40 <HAL_GPIO_Init+0x324>)
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	3301      	adds	r3, #1
 8008e22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f47f ae7e 	bne.w	8008b30 <HAL_GPIO_Init+0x14>
  }
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	372c      	adds	r7, #44	@ 0x2c
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bc80      	pop	{r7}
 8008e3e:	4770      	bx	lr
 8008e40:	40010400 	.word	0x40010400

08008e44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b089      	sub	sp, #36	@ 0x24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008e52:	e0a6      	b.n	8008fa2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008e54:	2201      	movs	r2, #1
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 8099 	beq.w	8008f9c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008e6a:	4a54      	ldr	r2, [pc, #336]	@ (8008fbc <HAL_GPIO_DeInit+0x178>)
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	089b      	lsrs	r3, r3, #2
 8008e70:	3302      	adds	r3, #2
 8008e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e76:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	220f      	movs	r2, #15
 8008e82:	fa02 f303 	lsl.w	r3, r2, r3
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8008fc0 <HAL_GPIO_DeInit+0x17c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d01f      	beq.n	8008ed4 <HAL_GPIO_DeInit+0x90>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a4b      	ldr	r2, [pc, #300]	@ (8008fc4 <HAL_GPIO_DeInit+0x180>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d019      	beq.n	8008ed0 <HAL_GPIO_DeInit+0x8c>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8008fc8 <HAL_GPIO_DeInit+0x184>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d013      	beq.n	8008ecc <HAL_GPIO_DeInit+0x88>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a49      	ldr	r2, [pc, #292]	@ (8008fcc <HAL_GPIO_DeInit+0x188>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00d      	beq.n	8008ec8 <HAL_GPIO_DeInit+0x84>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a48      	ldr	r2, [pc, #288]	@ (8008fd0 <HAL_GPIO_DeInit+0x18c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d007      	beq.n	8008ec4 <HAL_GPIO_DeInit+0x80>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a47      	ldr	r2, [pc, #284]	@ (8008fd4 <HAL_GPIO_DeInit+0x190>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d101      	bne.n	8008ec0 <HAL_GPIO_DeInit+0x7c>
 8008ebc:	2305      	movs	r3, #5
 8008ebe:	e00a      	b.n	8008ed6 <HAL_GPIO_DeInit+0x92>
 8008ec0:	2306      	movs	r3, #6
 8008ec2:	e008      	b.n	8008ed6 <HAL_GPIO_DeInit+0x92>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	e006      	b.n	8008ed6 <HAL_GPIO_DeInit+0x92>
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e004      	b.n	8008ed6 <HAL_GPIO_DeInit+0x92>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e002      	b.n	8008ed6 <HAL_GPIO_DeInit+0x92>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e000      	b.n	8008ed6 <HAL_GPIO_DeInit+0x92>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	69fa      	ldr	r2, [r7, #28]
 8008ed8:	f002 0203 	and.w	r2, r2, #3
 8008edc:	0092      	lsls	r2, r2, #2
 8008ede:	4093      	lsls	r3, r2
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d132      	bne.n	8008f4c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8008fd8 <HAL_GPIO_DeInit+0x194>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	43db      	mvns	r3, r3
 8008eee:	493a      	ldr	r1, [pc, #232]	@ (8008fd8 <HAL_GPIO_DeInit+0x194>)
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008ef4:	4b38      	ldr	r3, [pc, #224]	@ (8008fd8 <HAL_GPIO_DeInit+0x194>)
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	43db      	mvns	r3, r3
 8008efc:	4936      	ldr	r1, [pc, #216]	@ (8008fd8 <HAL_GPIO_DeInit+0x194>)
 8008efe:	4013      	ands	r3, r2
 8008f00:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008f02:	4b35      	ldr	r3, [pc, #212]	@ (8008fd8 <HAL_GPIO_DeInit+0x194>)
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	4933      	ldr	r1, [pc, #204]	@ (8008fd8 <HAL_GPIO_DeInit+0x194>)
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008f10:	4b31      	ldr	r3, [pc, #196]	@ (8008fd8 <HAL_GPIO_DeInit+0x194>)
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	492f      	ldr	r1, [pc, #188]	@ (8008fd8 <HAL_GPIO_DeInit+0x194>)
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	220f      	movs	r2, #15
 8008f28:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008f2e:	4a23      	ldr	r2, [pc, #140]	@ (8008fbc <HAL_GPIO_DeInit+0x178>)
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	089b      	lsrs	r3, r3, #2
 8008f34:	3302      	adds	r3, #2
 8008f36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	43da      	mvns	r2, r3
 8008f3e:	481f      	ldr	r0, [pc, #124]	@ (8008fbc <HAL_GPIO_DeInit+0x178>)
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	089b      	lsrs	r3, r3, #2
 8008f44:	400a      	ands	r2, r1
 8008f46:	3302      	adds	r3, #2
 8008f48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	2bff      	cmp	r3, #255	@ 0xff
 8008f50:	d801      	bhi.n	8008f56 <HAL_GPIO_DeInit+0x112>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	e001      	b.n	8008f5a <HAL_GPIO_DeInit+0x116>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	2bff      	cmp	r3, #255	@ 0xff
 8008f60:	d802      	bhi.n	8008f68 <HAL_GPIO_DeInit+0x124>
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	e002      	b.n	8008f6e <HAL_GPIO_DeInit+0x12a>
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	3b08      	subs	r3, #8
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	210f      	movs	r1, #15
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	401a      	ands	r2, r3
 8008f80:	2104      	movs	r1, #4
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	fa01 f303 	lsl.w	r3, r1, r3
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68da      	ldr	r2, [r3, #12]
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	43db      	mvns	r3, r3
 8008f96:	401a      	ands	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f47f af52 	bne.w	8008e54 <HAL_GPIO_DeInit+0x10>
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	3724      	adds	r7, #36	@ 0x24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr
 8008fbc:	40010000 	.word	0x40010000
 8008fc0:	40010800 	.word	0x40010800
 8008fc4:	40010c00 	.word	0x40010c00
 8008fc8:	40011000 	.word	0x40011000
 8008fcc:	40011400 	.word	0x40011400
 8008fd0:	40011800 	.word	0x40011800
 8008fd4:	40011c00 	.word	0x40011c00
 8008fd8:	40010400 	.word	0x40010400

08008fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	887b      	ldrh	r3, [r7, #2]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	73fb      	strb	r3, [r7, #15]
 8008ff8:	e001      	b.n	8008ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr

0800900a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	807b      	strh	r3, [r7, #2]
 8009016:	4613      	mov	r3, r2
 8009018:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800901a:	787b      	ldrb	r3, [r7, #1]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009020:	887a      	ldrh	r2, [r7, #2]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009026:	e003      	b.n	8009030 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009028:	887b      	ldrh	r3, [r7, #2]
 800902a:	041a      	lsls	r2, r3, #16
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	611a      	str	r2, [r3, #16]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr

0800903a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800903a:	b480      	push	{r7}
 800903c:	b085      	sub	sp, #20
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	460b      	mov	r3, r1
 8009044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800904c:	887a      	ldrh	r2, [r7, #2]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4013      	ands	r3, r2
 8009052:	041a      	lsls	r2, r3, #16
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	43d9      	mvns	r1, r3
 8009058:	887b      	ldrh	r3, [r7, #2]
 800905a:	400b      	ands	r3, r1
 800905c:	431a      	orrs	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	611a      	str	r2, [r3, #16]
}
 8009062:	bf00      	nop
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr

0800906c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e12b      	b.n	80092d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fe fff4 	bl	8008080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2224      	movs	r2, #36	@ 0x24
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0201 	bic.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80090d0:	f001 fdb8 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 80090d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	4a81      	ldr	r2, [pc, #516]	@ (80092e0 <HAL_I2C_Init+0x274>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d807      	bhi.n	80090f0 <HAL_I2C_Init+0x84>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a80      	ldr	r2, [pc, #512]	@ (80092e4 <HAL_I2C_Init+0x278>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	bf94      	ite	ls
 80090e8:	2301      	movls	r3, #1
 80090ea:	2300      	movhi	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	e006      	b.n	80090fe <HAL_I2C_Init+0x92>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a7d      	ldr	r2, [pc, #500]	@ (80092e8 <HAL_I2C_Init+0x27c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	bf94      	ite	ls
 80090f8:	2301      	movls	r3, #1
 80090fa:	2300      	movhi	r3, #0
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e0e7      	b.n	80092d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4a78      	ldr	r2, [pc, #480]	@ (80092ec <HAL_I2C_Init+0x280>)
 800910a:	fba2 2303 	umull	r2, r3, r2, r3
 800910e:	0c9b      	lsrs	r3, r3, #18
 8009110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	4a6a      	ldr	r2, [pc, #424]	@ (80092e0 <HAL_I2C_Init+0x274>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d802      	bhi.n	8009140 <HAL_I2C_Init+0xd4>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	3301      	adds	r3, #1
 800913e:	e009      	b.n	8009154 <HAL_I2C_Init+0xe8>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009146:	fb02 f303 	mul.w	r3, r2, r3
 800914a:	4a69      	ldr	r2, [pc, #420]	@ (80092f0 <HAL_I2C_Init+0x284>)
 800914c:	fba2 2303 	umull	r2, r3, r2, r3
 8009150:	099b      	lsrs	r3, r3, #6
 8009152:	3301      	adds	r3, #1
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6812      	ldr	r2, [r2, #0]
 8009158:	430b      	orrs	r3, r1
 800915a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009166:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	495c      	ldr	r1, [pc, #368]	@ (80092e0 <HAL_I2C_Init+0x274>)
 8009170:	428b      	cmp	r3, r1
 8009172:	d819      	bhi.n	80091a8 <HAL_I2C_Init+0x13c>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	1e59      	subs	r1, r3, #1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009188:	400b      	ands	r3, r1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <HAL_I2C_Init+0x138>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1e59      	subs	r1, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	fbb1 f3f3 	udiv	r3, r1, r3
 800919c:	3301      	adds	r3, #1
 800919e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091a2:	e051      	b.n	8009248 <HAL_I2C_Init+0x1dc>
 80091a4:	2304      	movs	r3, #4
 80091a6:	e04f      	b.n	8009248 <HAL_I2C_Init+0x1dc>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d111      	bne.n	80091d4 <HAL_I2C_Init+0x168>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	1e58      	subs	r0, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6859      	ldr	r1, [r3, #4]
 80091b8:	460b      	mov	r3, r1
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	440b      	add	r3, r1
 80091be:	fbb0 f3f3 	udiv	r3, r0, r3
 80091c2:	3301      	adds	r3, #1
 80091c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bf0c      	ite	eq
 80091cc:	2301      	moveq	r3, #1
 80091ce:	2300      	movne	r3, #0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	e012      	b.n	80091fa <HAL_I2C_Init+0x18e>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	1e58      	subs	r0, r3, #1
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6859      	ldr	r1, [r3, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	440b      	add	r3, r1
 80091e2:	0099      	lsls	r1, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80091ea:	3301      	adds	r3, #1
 80091ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bf0c      	ite	eq
 80091f4:	2301      	moveq	r3, #1
 80091f6:	2300      	movne	r3, #0
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_I2C_Init+0x196>
 80091fe:	2301      	movs	r3, #1
 8009200:	e022      	b.n	8009248 <HAL_I2C_Init+0x1dc>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10e      	bne.n	8009228 <HAL_I2C_Init+0x1bc>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	1e58      	subs	r0, r3, #1
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6859      	ldr	r1, [r3, #4]
 8009212:	460b      	mov	r3, r1
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	440b      	add	r3, r1
 8009218:	fbb0 f3f3 	udiv	r3, r0, r3
 800921c:	3301      	adds	r3, #1
 800921e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009226:	e00f      	b.n	8009248 <HAL_I2C_Init+0x1dc>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	1e58      	subs	r0, r3, #1
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6859      	ldr	r1, [r3, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	0099      	lsls	r1, r3, #2
 8009238:	440b      	add	r3, r1
 800923a:	fbb0 f3f3 	udiv	r3, r0, r3
 800923e:	3301      	adds	r3, #1
 8009240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	6809      	ldr	r1, [r1, #0]
 800924c:	4313      	orrs	r3, r2
 800924e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	69da      	ldr	r2, [r3, #28]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009276:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	6911      	ldr	r1, [r2, #16]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68d2      	ldr	r2, [r2, #12]
 8009282:	4311      	orrs	r1, r2
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6812      	ldr	r2, [r2, #0]
 8009288:	430b      	orrs	r3, r1
 800928a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	695a      	ldr	r2, [r3, #20]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0201 	orr.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	000186a0 	.word	0x000186a0
 80092e4:	001e847f 	.word	0x001e847f
 80092e8:	003d08ff 	.word	0x003d08ff
 80092ec:	431bde83 	.word	0x431bde83
 80092f0:	10624dd3 	.word	0x10624dd3

080092f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e021      	b.n	800934a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2224      	movs	r2, #36	@ 0x24
 800930a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7fe feec 	bl	80080fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af02      	add	r7, sp, #8
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	607a      	str	r2, [r7, #4]
 800935e:	461a      	mov	r2, r3
 8009360:	460b      	mov	r3, r1
 8009362:	817b      	strh	r3, [r7, #10]
 8009364:	4613      	mov	r3, r2
 8009366:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009368:	f7ff f85e 	bl	8008428 <HAL_GetTick>
 800936c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b20      	cmp	r3, #32
 8009378:	f040 80e0 	bne.w	800953c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	2319      	movs	r3, #25
 8009382:	2201      	movs	r2, #1
 8009384:	4970      	ldr	r1, [pc, #448]	@ (8009548 <HAL_I2C_Master_Transmit+0x1f4>)
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f000 fe5c 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009392:	2302      	movs	r3, #2
 8009394:	e0d3      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_I2C_Master_Transmit+0x50>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e0cc      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d007      	beq.n	80093ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2221      	movs	r2, #33	@ 0x21
 80093de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2210      	movs	r2, #16
 80093e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	893a      	ldrh	r2, [r7, #8]
 80093fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4a50      	ldr	r2, [pc, #320]	@ (800954c <HAL_I2C_Master_Transmit+0x1f8>)
 800940a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800940c:	8979      	ldrh	r1, [r7, #10]
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	6a3a      	ldr	r2, [r7, #32]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fc16 	bl	8009c44 <I2C_MasterRequestWrite>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e08d      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009438:	e066      	b.n	8009508 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	6a39      	ldr	r1, [r7, #32]
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 ff1a 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00d      	beq.n	8009466 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944e:	2b04      	cmp	r3, #4
 8009450:	d107      	bne.n	8009462 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e06b      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800948e:	3b01      	subs	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d11b      	bne.n	80094dc <HAL_I2C_Master_Transmit+0x188>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d017      	beq.n	80094dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094d4:	3b01      	subs	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	6a39      	ldr	r1, [r7, #32]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 ff11 	bl	800a308 <I2C_WaitOnBTFFlagUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00d      	beq.n	8009508 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d107      	bne.n	8009504 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009502:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e01a      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800950c:	2b00      	cmp	r3, #0
 800950e:	d194      	bne.n	800943a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800951e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	e000      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800953c:	2302      	movs	r3, #2
  }
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	00100002 	.word	0x00100002
 800954c:	ffff0000 	.word	0xffff0000

08009550 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af02      	add	r7, sp, #8
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	4608      	mov	r0, r1
 800955a:	4611      	mov	r1, r2
 800955c:	461a      	mov	r2, r3
 800955e:	4603      	mov	r3, r0
 8009560:	817b      	strh	r3, [r7, #10]
 8009562:	460b      	mov	r3, r1
 8009564:	813b      	strh	r3, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800956a:	f7fe ff5d 	bl	8008428 <HAL_GetTick>
 800956e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b20      	cmp	r3, #32
 800957a:	f040 80d9 	bne.w	8009730 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2319      	movs	r3, #25
 8009584:	2201      	movs	r2, #1
 8009586:	496d      	ldr	r1, [pc, #436]	@ (800973c <HAL_I2C_Mem_Write+0x1ec>)
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fd5b 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009594:	2302      	movs	r3, #2
 8009596:	e0cc      	b.n	8009732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <HAL_I2C_Mem_Write+0x56>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e0c5      	b.n	8009732 <HAL_I2C_Mem_Write+0x1e2>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d007      	beq.n	80095cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0201 	orr.w	r2, r2, #1
 80095ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2221      	movs	r2, #33	@ 0x21
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2240      	movs	r2, #64	@ 0x40
 80095e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a3a      	ldr	r2, [r7, #32]
 80095f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80095fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009602:	b29a      	uxth	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4a4d      	ldr	r2, [pc, #308]	@ (8009740 <HAL_I2C_Mem_Write+0x1f0>)
 800960c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800960e:	88f8      	ldrh	r0, [r7, #6]
 8009610:	893a      	ldrh	r2, [r7, #8]
 8009612:	8979      	ldrh	r1, [r7, #10]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4603      	mov	r3, r0
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fb92 	bl	8009d48 <I2C_RequestMemoryWrite>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d052      	beq.n	80096d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e081      	b.n	8009732 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 fe20 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00d      	beq.n	800965a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009642:	2b04      	cmp	r3, #4
 8009644:	d107      	bne.n	8009656 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e06b      	b.n	8009732 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009680:	b29b      	uxth	r3, r3
 8009682:	3b01      	subs	r3, #1
 8009684:	b29a      	uxth	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b04      	cmp	r3, #4
 8009696:	d11b      	bne.n	80096d0 <HAL_I2C_Mem_Write+0x180>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800969c:	2b00      	cmp	r3, #0
 800969e:	d017      	beq.n	80096d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a4:	781a      	ldrb	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29a      	uxth	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	3b01      	subs	r3, #1
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1aa      	bne.n	800962e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 fe13 	bl	800a308 <I2C_WaitOnBTFFlagUntilTimeout>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00d      	beq.n	8009704 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	d107      	bne.n	8009700 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e016      	b.n	8009732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	e000      	b.n	8009732 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009730:	2302      	movs	r3, #2
  }
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	00100002 	.word	0x00100002
 8009740:	ffff0000 	.word	0xffff0000

08009744 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08c      	sub	sp, #48	@ 0x30
 8009748:	af02      	add	r7, sp, #8
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	4608      	mov	r0, r1
 800974e:	4611      	mov	r1, r2
 8009750:	461a      	mov	r2, r3
 8009752:	4603      	mov	r3, r0
 8009754:	817b      	strh	r3, [r7, #10]
 8009756:	460b      	mov	r3, r1
 8009758:	813b      	strh	r3, [r7, #8]
 800975a:	4613      	mov	r3, r2
 800975c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009762:	f7fe fe61 	bl	8008428 <HAL_GetTick>
 8009766:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b20      	cmp	r3, #32
 8009772:	f040 8244 	bne.w	8009bfe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2319      	movs	r3, #25
 800977c:	2201      	movs	r2, #1
 800977e:	4982      	ldr	r1, [pc, #520]	@ (8009988 <HAL_I2C_Mem_Read+0x244>)
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 fc5f 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800978c:	2302      	movs	r3, #2
 800978e:	e237      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_I2C_Mem_Read+0x5a>
 800979a:	2302      	movs	r3, #2
 800979c:	e230      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d007      	beq.n	80097c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0201 	orr.w	r2, r2, #1
 80097c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2222      	movs	r2, #34	@ 0x22
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2240      	movs	r2, #64	@ 0x40
 80097e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80097f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a62      	ldr	r2, [pc, #392]	@ (800998c <HAL_I2C_Mem_Read+0x248>)
 8009804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009806:	88f8      	ldrh	r0, [r7, #6]
 8009808:	893a      	ldrh	r2, [r7, #8]
 800980a:	8979      	ldrh	r1, [r7, #10]
 800980c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	4603      	mov	r3, r0
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fb2c 	bl	8009e74 <I2C_RequestMemoryRead>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e1ec      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d113      	bne.n	8009856 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800982e:	2300      	movs	r3, #0
 8009830:	61fb      	str	r3, [r7, #28]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	61fb      	str	r3, [r7, #28]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	61fb      	str	r3, [r7, #28]
 8009842:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e1c0      	b.n	8009bd8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800985a:	2b01      	cmp	r3, #1
 800985c:	d11e      	bne.n	800989c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800986c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800986e:	b672      	cpsid	i
}
 8009870:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009872:	2300      	movs	r3, #0
 8009874:	61bb      	str	r3, [r7, #24]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009898:	b662      	cpsie	i
}
 800989a:	e035      	b.n	8009908 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d11e      	bne.n	80098e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80098b4:	b672      	cpsid	i
}
 80098b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80098de:	b662      	cpsie	i
}
 80098e0:	e012      	b.n	8009908 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f2:	2300      	movs	r3, #0
 80098f4:	613b      	str	r3, [r7, #16]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	613b      	str	r3, [r7, #16]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009908:	e166      	b.n	8009bd8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800990e:	2b03      	cmp	r3, #3
 8009910:	f200 811f 	bhi.w	8009b52 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009918:	2b01      	cmp	r3, #1
 800991a:	d123      	bne.n	8009964 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800991c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800991e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fd39 	bl	800a398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e167      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691a      	ldr	r2, [r3, #16]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993a:	b2d2      	uxtb	r2, r2
 800993c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009962:	e139      	b.n	8009bd8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009968:	2b02      	cmp	r3, #2
 800996a:	d152      	bne.n	8009a12 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800996c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	2200      	movs	r2, #0
 8009974:	4906      	ldr	r1, [pc, #24]	@ (8009990 <HAL_I2C_Mem_Read+0x24c>)
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 fb64 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d008      	beq.n	8009994 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e13c      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
 8009986:	bf00      	nop
 8009988:	00100002 	.word	0x00100002
 800998c:	ffff0000 	.word	0xffff0000
 8009990:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009994:	b672      	cpsid	i
}
 8009996:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	691a      	ldr	r2, [r3, #16]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099c4:	3b01      	subs	r3, #1
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80099da:	b662      	cpsie	i
}
 80099dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691a      	ldr	r2, [r3, #16]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e8:	b2d2      	uxtb	r2, r2
 80099ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099fa:	3b01      	subs	r3, #1
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009a10:	e0e2      	b.n	8009bd8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	2200      	movs	r2, #0
 8009a1a:	497b      	ldr	r1, [pc, #492]	@ (8009c08 <HAL_I2C_Mem_Read+0x4c4>)
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fb11 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e0e9      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a3c:	b672      	cpsid	i
}
 8009a3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	691a      	ldr	r2, [r3, #16]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a72:	4b66      	ldr	r3, [pc, #408]	@ (8009c0c <HAL_I2C_Mem_Read+0x4c8>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	08db      	lsrs	r3, r3, #3
 8009a78:	4a65      	ldr	r2, [pc, #404]	@ (8009c10 <HAL_I2C_Mem_Read+0x4cc>)
 8009a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7e:	0a1a      	lsrs	r2, r3, #8
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	00da      	lsls	r2, r3, #3
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d118      	bne.n	8009aca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab2:	f043 0220 	orr.w	r2, r3, #32
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009aba:	b662      	cpsie	i
}
 8009abc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e09a      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d1d9      	bne.n	8009a8c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691a      	ldr	r2, [r3, #16]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b1a:	b662      	cpsie	i
}
 8009b1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691a      	ldr	r2, [r3, #16]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009b50:	e042      	b.n	8009bd8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 fc1e 	bl	800a398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e04c      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b70:	b2d2      	uxtb	r2, r2
 8009b72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	3b01      	subs	r3, #1
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	f003 0304 	and.w	r3, r3, #4
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d118      	bne.n	8009bd8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	691a      	ldr	r2, [r3, #16]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f47f ae94 	bne.w	800990a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e000      	b.n	8009c00 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009bfe:	2302      	movs	r3, #2
  }
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3728      	adds	r7, #40	@ 0x28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	00010004 	.word	0x00010004
 8009c0c:	200000c0 	.word	0x200000c0
 8009c10:	14f8b589 	.word	0x14f8b589

08009c14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c22:	b2db      	uxtb	r3, r3
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bc80      	pop	{r7}
 8009c2c:	4770      	bx	lr

08009c2e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr

08009c44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	607a      	str	r2, [r7, #4]
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	460b      	mov	r3, r1
 8009c52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d006      	beq.n	8009c6e <I2C_MasterRequestWrite+0x2a>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d003      	beq.n	8009c6e <I2C_MasterRequestWrite+0x2a>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c6c:	d108      	bne.n	8009c80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	e00b      	b.n	8009c98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c84:	2b12      	cmp	r3, #18
 8009c86:	d107      	bne.n	8009c98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f9cd 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00d      	beq.n	8009ccc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cbe:	d103      	bne.n	8009cc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e035      	b.n	8009d38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cd4:	d108      	bne.n	8009ce8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cd6:	897b      	ldrh	r3, [r7, #10]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009ce4:	611a      	str	r2, [r3, #16]
 8009ce6:	e01b      	b.n	8009d20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ce8:	897b      	ldrh	r3, [r7, #10]
 8009cea:	11db      	asrs	r3, r3, #7
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f003 0306 	and.w	r3, r3, #6
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f063 030f 	orn	r3, r3, #15
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	490e      	ldr	r1, [pc, #56]	@ (8009d40 <I2C_MasterRequestWrite+0xfc>)
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 fa16 	bl	800a138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e010      	b.n	8009d38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009d16:	897b      	ldrh	r3, [r7, #10]
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4907      	ldr	r1, [pc, #28]	@ (8009d44 <I2C_MasterRequestWrite+0x100>)
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fa06 	bl	800a138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e000      	b.n	8009d38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	00010008 	.word	0x00010008
 8009d44:	00010002 	.word	0x00010002

08009d48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	4608      	mov	r0, r1
 8009d52:	4611      	mov	r1, r2
 8009d54:	461a      	mov	r2, r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	817b      	strh	r3, [r7, #10]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	813b      	strh	r3, [r7, #8]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f960 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00d      	beq.n	8009da6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d98:	d103      	bne.n	8009da2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009da0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e05f      	b.n	8009e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009da6:	897b      	ldrh	r3, [r7, #10]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	461a      	mov	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db8:	6a3a      	ldr	r2, [r7, #32]
 8009dba:	492d      	ldr	r1, [pc, #180]	@ (8009e70 <I2C_RequestMemoryWrite+0x128>)
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f000 f9bb 	bl	800a138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e04c      	b.n	8009e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dcc:	2300      	movs	r3, #0
 8009dce:	617b      	str	r3, [r7, #20]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	617b      	str	r3, [r7, #20]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	617b      	str	r3, [r7, #20]
 8009de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009de4:	6a39      	ldr	r1, [r7, #32]
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 fa46 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00d      	beq.n	8009e0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d107      	bne.n	8009e0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e02b      	b.n	8009e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e0e:	88fb      	ldrh	r3, [r7, #6]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d105      	bne.n	8009e20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e14:	893b      	ldrh	r3, [r7, #8]
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	611a      	str	r2, [r3, #16]
 8009e1e:	e021      	b.n	8009e64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e20:	893b      	ldrh	r3, [r7, #8]
 8009e22:	0a1b      	lsrs	r3, r3, #8
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e30:	6a39      	ldr	r1, [r7, #32]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fa20 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00d      	beq.n	8009e5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e42:	2b04      	cmp	r3, #4
 8009e44:	d107      	bne.n	8009e56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e005      	b.n	8009e66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e5a:	893b      	ldrh	r3, [r7, #8]
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	00010002 	.word	0x00010002

08009e74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	4608      	mov	r0, r1
 8009e7e:	4611      	mov	r1, r2
 8009e80:	461a      	mov	r2, r3
 8009e82:	4603      	mov	r3, r0
 8009e84:	817b      	strh	r3, [r7, #10]
 8009e86:	460b      	mov	r3, r1
 8009e88:	813b      	strh	r3, [r7, #8]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009e9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 f8c2 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00d      	beq.n	8009ee2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed4:	d103      	bne.n	8009ede <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e0aa      	b.n	800a038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ee2:	897b      	ldrh	r3, [r7, #10]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef4:	6a3a      	ldr	r2, [r7, #32]
 8009ef6:	4952      	ldr	r1, [pc, #328]	@ (800a040 <I2C_RequestMemoryRead+0x1cc>)
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 f91d 	bl	800a138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e097      	b.n	800a038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f08:	2300      	movs	r3, #0
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	617b      	str	r3, [r7, #20]
 8009f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f20:	6a39      	ldr	r1, [r7, #32]
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 f9a8 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00d      	beq.n	8009f4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d107      	bne.n	8009f46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e076      	b.n	800a038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f4a:	88fb      	ldrh	r3, [r7, #6]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d105      	bne.n	8009f5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f50:	893b      	ldrh	r3, [r7, #8]
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	611a      	str	r2, [r3, #16]
 8009f5a:	e021      	b.n	8009fa0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f5c:	893b      	ldrh	r3, [r7, #8]
 8009f5e:	0a1b      	lsrs	r3, r3, #8
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f6c:	6a39      	ldr	r1, [r7, #32]
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f982 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00d      	beq.n	8009f96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	d107      	bne.n	8009f92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e050      	b.n	800a038 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f96:	893b      	ldrh	r3, [r7, #8]
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fa2:	6a39      	ldr	r1, [r7, #32]
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 f967 	bl	800a278 <I2C_WaitOnTXEFlagUntilTimeout>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00d      	beq.n	8009fcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fb4:	2b04      	cmp	r3, #4
 8009fb6:	d107      	bne.n	8009fc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e035      	b.n	800a038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f82b 	bl	800a044 <I2C_WaitOnFlagUntilTimeout>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00d      	beq.n	800a010 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a002:	d103      	bne.n	800a00c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a00a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e013      	b.n	800a038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a010:	897b      	ldrh	r3, [r7, #10]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f043 0301 	orr.w	r3, r3, #1
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	6a3a      	ldr	r2, [r7, #32]
 800a024:	4906      	ldr	r1, [pc, #24]	@ (800a040 <I2C_RequestMemoryRead+0x1cc>)
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 f886 	bl	800a138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	00010002 	.word	0x00010002

0800a044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	4613      	mov	r3, r2
 800a052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a054:	e048      	b.n	800a0e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a05c:	d044      	beq.n	800a0e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a05e:	f7fe f9e3 	bl	8008428 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d302      	bcc.n	800a074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d139      	bne.n	800a0e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	0c1b      	lsrs	r3, r3, #16
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d10d      	bne.n	800a09a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	43da      	mvns	r2, r3
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	4013      	ands	r3, r2
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bf0c      	ite	eq
 800a090:	2301      	moveq	r3, #1
 800a092:	2300      	movne	r3, #0
 800a094:	b2db      	uxtb	r3, r3
 800a096:	461a      	mov	r2, r3
 800a098:	e00c      	b.n	800a0b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	43da      	mvns	r2, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	bf0c      	ite	eq
 800a0ac:	2301      	moveq	r3, #1
 800a0ae:	2300      	movne	r3, #0
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d116      	bne.n	800a0e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2220      	movs	r2, #32
 800a0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d4:	f043 0220 	orr.w	r2, r3, #32
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e023      	b.n	800a130 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	0c1b      	lsrs	r3, r3, #16
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d10d      	bne.n	800a10e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	43da      	mvns	r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	2b00      	cmp	r3, #0
 800a102:	bf0c      	ite	eq
 800a104:	2301      	moveq	r3, #1
 800a106:	2300      	movne	r3, #0
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	461a      	mov	r2, r3
 800a10c:	e00c      	b.n	800a128 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	43da      	mvns	r2, r3
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4013      	ands	r3, r2
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bf0c      	ite	eq
 800a120:	2301      	moveq	r3, #1
 800a122:	2300      	movne	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	461a      	mov	r2, r3
 800a128:	79fb      	ldrb	r3, [r7, #7]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d093      	beq.n	800a056 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a146:	e071      	b.n	800a22c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a156:	d123      	bne.n	800a1a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a166:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18c:	f043 0204 	orr.w	r2, r3, #4
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e067      	b.n	800a270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1a6:	d041      	beq.n	800a22c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1a8:	f7fe f93e 	bl	8008428 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d302      	bcc.n	800a1be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d136      	bne.n	800a22c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	0c1b      	lsrs	r3, r3, #16
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d10c      	bne.n	800a1e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	43da      	mvns	r2, r3
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bf14      	ite	ne
 800a1da:	2301      	movne	r3, #1
 800a1dc:	2300      	moveq	r3, #0
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	e00b      	b.n	800a1fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	43da      	mvns	r2, r3
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	bf14      	ite	ne
 800a1f4:	2301      	movne	r3, #1
 800a1f6:	2300      	moveq	r3, #0
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d016      	beq.n	800a22c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2220      	movs	r2, #32
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a218:	f043 0220 	orr.w	r2, r3, #32
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e021      	b.n	800a270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	0c1b      	lsrs	r3, r3, #16
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b01      	cmp	r3, #1
 800a234:	d10c      	bne.n	800a250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	43da      	mvns	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	4013      	ands	r3, r2
 800a242:	b29b      	uxth	r3, r3
 800a244:	2b00      	cmp	r3, #0
 800a246:	bf14      	ite	ne
 800a248:	2301      	movne	r3, #1
 800a24a:	2300      	moveq	r3, #0
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	e00b      	b.n	800a268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	43da      	mvns	r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	4013      	ands	r3, r2
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bf14      	ite	ne
 800a262:	2301      	movne	r3, #1
 800a264:	2300      	moveq	r3, #0
 800a266:	b2db      	uxtb	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f47f af6d 	bne.w	800a148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a284:	e034      	b.n	800a2f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f8e3 	bl	800a452 <I2C_IsAcknowledgeFailed>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e034      	b.n	800a300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a29c:	d028      	beq.n	800a2f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a29e:	f7fe f8c3 	bl	8008428 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d302      	bcc.n	800a2b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d11d      	bne.n	800a2f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2be:	2b80      	cmp	r3, #128	@ 0x80
 800a2c0:	d016      	beq.n	800a2f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2dc:	f043 0220 	orr.w	r2, r3, #32
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e007      	b.n	800a300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2fa:	2b80      	cmp	r3, #128	@ 0x80
 800a2fc:	d1c3      	bne.n	800a286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a314:	e034      	b.n	800a380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 f89b 	bl	800a452 <I2C_IsAcknowledgeFailed>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e034      	b.n	800a390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a32c:	d028      	beq.n	800a380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a32e:	f7fe f87b 	bl	8008428 <HAL_GetTick>
 800a332:	4602      	mov	r2, r0
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d302      	bcc.n	800a344 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d11d      	bne.n	800a380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d016      	beq.n	800a380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a36c:	f043 0220 	orr.w	r2, r3, #32
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e007      	b.n	800a390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	d1c3      	bne.n	800a316 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3a4:	e049      	b.n	800a43a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	f003 0310 	and.w	r3, r3, #16
 800a3b0:	2b10      	cmp	r3, #16
 800a3b2:	d119      	bne.n	800a3e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0210 	mvn.w	r2, #16
 800a3bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e030      	b.n	800a44a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e8:	f7fe f81e 	bl	8008428 <HAL_GetTick>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d302      	bcc.n	800a3fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d11d      	bne.n	800a43a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a408:	2b40      	cmp	r3, #64	@ 0x40
 800a40a:	d016      	beq.n	800a43a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2220      	movs	r2, #32
 800a416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a426:	f043 0220 	orr.w	r2, r3, #32
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e007      	b.n	800a44a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a444:	2b40      	cmp	r3, #64	@ 0x40
 800a446:	d1ae      	bne.n	800a3a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a468:	d11b      	bne.n	800a4a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a472:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48e:	f043 0204 	orr.w	r2, r3, #4
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
	...

0800a4b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e272      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 8087 	beq.w	800a5de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a4d0:	4b92      	ldr	r3, [pc, #584]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f003 030c 	and.w	r3, r3, #12
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d00c      	beq.n	800a4f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a4dc:	4b8f      	ldr	r3, [pc, #572]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f003 030c 	and.w	r3, r3, #12
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	d112      	bne.n	800a50e <HAL_RCC_OscConfig+0x5e>
 800a4e8:	4b8c      	ldr	r3, [pc, #560]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4f4:	d10b      	bne.n	800a50e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4f6:	4b89      	ldr	r3, [pc, #548]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d06c      	beq.n	800a5dc <HAL_RCC_OscConfig+0x12c>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d168      	bne.n	800a5dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e24c      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a516:	d106      	bne.n	800a526 <HAL_RCC_OscConfig+0x76>
 800a518:	4b80      	ldr	r3, [pc, #512]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a7f      	ldr	r2, [pc, #508]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a51e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	e02e      	b.n	800a584 <HAL_RCC_OscConfig+0xd4>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10c      	bne.n	800a548 <HAL_RCC_OscConfig+0x98>
 800a52e:	4b7b      	ldr	r3, [pc, #492]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a7a      	ldr	r2, [pc, #488]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	4b78      	ldr	r3, [pc, #480]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a77      	ldr	r2, [pc, #476]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	e01d      	b.n	800a584 <HAL_RCC_OscConfig+0xd4>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a550:	d10c      	bne.n	800a56c <HAL_RCC_OscConfig+0xbc>
 800a552:	4b72      	ldr	r3, [pc, #456]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a71      	ldr	r2, [pc, #452]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	4b6f      	ldr	r3, [pc, #444]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a6e      	ldr	r2, [pc, #440]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	e00b      	b.n	800a584 <HAL_RCC_OscConfig+0xd4>
 800a56c:	4b6b      	ldr	r3, [pc, #428]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a6a      	ldr	r2, [pc, #424]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	4b68      	ldr	r3, [pc, #416]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a67      	ldr	r2, [pc, #412]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a57e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d013      	beq.n	800a5b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a58c:	f7fd ff4c 	bl	8008428 <HAL_GetTick>
 800a590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a594:	f7fd ff48 	bl	8008428 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b64      	cmp	r3, #100	@ 0x64
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e200      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5a6:	4b5d      	ldr	r3, [pc, #372]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0f0      	beq.n	800a594 <HAL_RCC_OscConfig+0xe4>
 800a5b2:	e014      	b.n	800a5de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5b4:	f7fd ff38 	bl	8008428 <HAL_GetTick>
 800a5b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5ba:	e008      	b.n	800a5ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5bc:	f7fd ff34 	bl	8008428 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b64      	cmp	r3, #100	@ 0x64
 800a5c8:	d901      	bls.n	800a5ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e1ec      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5ce:	4b53      	ldr	r3, [pc, #332]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1f0      	bne.n	800a5bc <HAL_RCC_OscConfig+0x10c>
 800a5da:	e000      	b.n	800a5de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d063      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a5ea:	4b4c      	ldr	r3, [pc, #304]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f003 030c 	and.w	r3, r3, #12
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00b      	beq.n	800a60e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a5f6:	4b49      	ldr	r3, [pc, #292]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f003 030c 	and.w	r3, r3, #12
 800a5fe:	2b08      	cmp	r3, #8
 800a600:	d11c      	bne.n	800a63c <HAL_RCC_OscConfig+0x18c>
 800a602:	4b46      	ldr	r3, [pc, #280]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d116      	bne.n	800a63c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a60e:	4b43      	ldr	r3, [pc, #268]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <HAL_RCC_OscConfig+0x176>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d001      	beq.n	800a626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e1c0      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a626:	4b3d      	ldr	r3, [pc, #244]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	4939      	ldr	r1, [pc, #228]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a636:	4313      	orrs	r3, r2
 800a638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a63a:	e03a      	b.n	800a6b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d020      	beq.n	800a686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a644:	4b36      	ldr	r3, [pc, #216]	@ (800a720 <HAL_RCC_OscConfig+0x270>)
 800a646:	2201      	movs	r2, #1
 800a648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a64a:	f7fd feed 	bl	8008428 <HAL_GetTick>
 800a64e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a650:	e008      	b.n	800a664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a652:	f7fd fee9 	bl	8008428 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d901      	bls.n	800a664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e1a1      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a664:	4b2d      	ldr	r3, [pc, #180]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d0f0      	beq.n	800a652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a670:	4b2a      	ldr	r3, [pc, #168]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	4927      	ldr	r1, [pc, #156]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a680:	4313      	orrs	r3, r2
 800a682:	600b      	str	r3, [r1, #0]
 800a684:	e015      	b.n	800a6b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a686:	4b26      	ldr	r3, [pc, #152]	@ (800a720 <HAL_RCC_OscConfig+0x270>)
 800a688:	2200      	movs	r2, #0
 800a68a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a68c:	f7fd fecc 	bl	8008428 <HAL_GetTick>
 800a690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a692:	e008      	b.n	800a6a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a694:	f7fd fec8 	bl	8008428 <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d901      	bls.n	800a6a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e180      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0302 	and.w	r3, r3, #2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1f0      	bne.n	800a694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0308 	and.w	r3, r3, #8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d03a      	beq.n	800a734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d019      	beq.n	800a6fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6c6:	4b17      	ldr	r3, [pc, #92]	@ (800a724 <HAL_RCC_OscConfig+0x274>)
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6cc:	f7fd feac 	bl	8008428 <HAL_GetTick>
 800a6d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6d2:	e008      	b.n	800a6e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6d4:	f7fd fea8 	bl	8008428 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d901      	bls.n	800a6e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e160      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a71c <HAL_RCC_OscConfig+0x26c>)
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d0f0      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	f000 face 	bl	800ac94 <RCC_Delay>
 800a6f8:	e01c      	b.n	800a734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a724 <HAL_RCC_OscConfig+0x274>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a700:	f7fd fe92 	bl	8008428 <HAL_GetTick>
 800a704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a706:	e00f      	b.n	800a728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a708:	f7fd fe8e 	bl	8008428 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d908      	bls.n	800a728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e146      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
 800a71a:	bf00      	nop
 800a71c:	40021000 	.word	0x40021000
 800a720:	42420000 	.word	0x42420000
 800a724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a728:	4b92      	ldr	r3, [pc, #584]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e9      	bne.n	800a708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 80a6 	beq.w	800a88e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a746:	4b8b      	ldr	r3, [pc, #556]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10d      	bne.n	800a76e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a752:	4b88      	ldr	r3, [pc, #544]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	4a87      	ldr	r2, [pc, #540]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a75c:	61d3      	str	r3, [r2, #28]
 800a75e:	4b85      	ldr	r3, [pc, #532]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a766:	60bb      	str	r3, [r7, #8]
 800a768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a76a:	2301      	movs	r3, #1
 800a76c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a76e:	4b82      	ldr	r3, [pc, #520]	@ (800a978 <HAL_RCC_OscConfig+0x4c8>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a776:	2b00      	cmp	r3, #0
 800a778:	d118      	bne.n	800a7ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a77a:	4b7f      	ldr	r3, [pc, #508]	@ (800a978 <HAL_RCC_OscConfig+0x4c8>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a7e      	ldr	r2, [pc, #504]	@ (800a978 <HAL_RCC_OscConfig+0x4c8>)
 800a780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a786:	f7fd fe4f 	bl	8008428 <HAL_GetTick>
 800a78a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a78c:	e008      	b.n	800a7a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a78e:	f7fd fe4b 	bl	8008428 <HAL_GetTick>
 800a792:	4602      	mov	r2, r0
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	2b64      	cmp	r3, #100	@ 0x64
 800a79a:	d901      	bls.n	800a7a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e103      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7a0:	4b75      	ldr	r3, [pc, #468]	@ (800a978 <HAL_RCC_OscConfig+0x4c8>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0f0      	beq.n	800a78e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d106      	bne.n	800a7c2 <HAL_RCC_OscConfig+0x312>
 800a7b4:	4b6f      	ldr	r3, [pc, #444]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7b6:	6a1b      	ldr	r3, [r3, #32]
 800a7b8:	4a6e      	ldr	r2, [pc, #440]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7ba:	f043 0301 	orr.w	r3, r3, #1
 800a7be:	6213      	str	r3, [r2, #32]
 800a7c0:	e02d      	b.n	800a81e <HAL_RCC_OscConfig+0x36e>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10c      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x334>
 800a7ca:	4b6a      	ldr	r3, [pc, #424]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	4a69      	ldr	r2, [pc, #420]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7d0:	f023 0301 	bic.w	r3, r3, #1
 800a7d4:	6213      	str	r3, [r2, #32]
 800a7d6:	4b67      	ldr	r3, [pc, #412]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	4a66      	ldr	r2, [pc, #408]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7dc:	f023 0304 	bic.w	r3, r3, #4
 800a7e0:	6213      	str	r3, [r2, #32]
 800a7e2:	e01c      	b.n	800a81e <HAL_RCC_OscConfig+0x36e>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	2b05      	cmp	r3, #5
 800a7ea:	d10c      	bne.n	800a806 <HAL_RCC_OscConfig+0x356>
 800a7ec:	4b61      	ldr	r3, [pc, #388]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7ee:	6a1b      	ldr	r3, [r3, #32]
 800a7f0:	4a60      	ldr	r2, [pc, #384]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7f2:	f043 0304 	orr.w	r3, r3, #4
 800a7f6:	6213      	str	r3, [r2, #32]
 800a7f8:	4b5e      	ldr	r3, [pc, #376]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	4a5d      	ldr	r2, [pc, #372]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a7fe:	f043 0301 	orr.w	r3, r3, #1
 800a802:	6213      	str	r3, [r2, #32]
 800a804:	e00b      	b.n	800a81e <HAL_RCC_OscConfig+0x36e>
 800a806:	4b5b      	ldr	r3, [pc, #364]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	4a5a      	ldr	r2, [pc, #360]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	6213      	str	r3, [r2, #32]
 800a812:	4b58      	ldr	r3, [pc, #352]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	4a57      	ldr	r2, [pc, #348]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a818:	f023 0304 	bic.w	r3, r3, #4
 800a81c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d015      	beq.n	800a852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a826:	f7fd fdff 	bl	8008428 <HAL_GetTick>
 800a82a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a82c:	e00a      	b.n	800a844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a82e:	f7fd fdfb 	bl	8008428 <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d901      	bls.n	800a844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e0b1      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a844:	4b4b      	ldr	r3, [pc, #300]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0ee      	beq.n	800a82e <HAL_RCC_OscConfig+0x37e>
 800a850:	e014      	b.n	800a87c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a852:	f7fd fde9 	bl	8008428 <HAL_GetTick>
 800a856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a858:	e00a      	b.n	800a870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a85a:	f7fd fde5 	bl	8008428 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a868:	4293      	cmp	r3, r2
 800a86a:	d901      	bls.n	800a870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e09b      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a870:	4b40      	ldr	r3, [pc, #256]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a872:	6a1b      	ldr	r3, [r3, #32]
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1ee      	bne.n	800a85a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d105      	bne.n	800a88e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a882:	4b3c      	ldr	r3, [pc, #240]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	4a3b      	ldr	r2, [pc, #236]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a88c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 8087 	beq.w	800a9a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a898:	4b36      	ldr	r3, [pc, #216]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f003 030c 	and.w	r3, r3, #12
 800a8a0:	2b08      	cmp	r3, #8
 800a8a2:	d061      	beq.n	800a968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	69db      	ldr	r3, [r3, #28]
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d146      	bne.n	800a93a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8ac:	4b33      	ldr	r3, [pc, #204]	@ (800a97c <HAL_RCC_OscConfig+0x4cc>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8b2:	f7fd fdb9 	bl	8008428 <HAL_GetTick>
 800a8b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a8b8:	e008      	b.n	800a8cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8ba:	f7fd fdb5 	bl	8008428 <HAL_GetTick>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d901      	bls.n	800a8cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e06d      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a8cc:	4b29      	ldr	r3, [pc, #164]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1f0      	bne.n	800a8ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8e0:	d108      	bne.n	800a8f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a8e2:	4b24      	ldr	r3, [pc, #144]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	4921      	ldr	r1, [pc, #132]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8f4:	4b1f      	ldr	r3, [pc, #124]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a19      	ldr	r1, [r3, #32]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a904:	430b      	orrs	r3, r1
 800a906:	491b      	ldr	r1, [pc, #108]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a908:	4313      	orrs	r3, r2
 800a90a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a90c:	4b1b      	ldr	r3, [pc, #108]	@ (800a97c <HAL_RCC_OscConfig+0x4cc>)
 800a90e:	2201      	movs	r2, #1
 800a910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a912:	f7fd fd89 	bl	8008428 <HAL_GetTick>
 800a916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a918:	e008      	b.n	800a92c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a91a:	f7fd fd85 	bl	8008428 <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d901      	bls.n	800a92c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e03d      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a92c:	4b11      	ldr	r3, [pc, #68]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0f0      	beq.n	800a91a <HAL_RCC_OscConfig+0x46a>
 800a938:	e035      	b.n	800a9a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a93a:	4b10      	ldr	r3, [pc, #64]	@ (800a97c <HAL_RCC_OscConfig+0x4cc>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a940:	f7fd fd72 	bl	8008428 <HAL_GetTick>
 800a944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a946:	e008      	b.n	800a95a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a948:	f7fd fd6e 	bl	8008428 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d901      	bls.n	800a95a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e026      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a95a:	4b06      	ldr	r3, [pc, #24]	@ (800a974 <HAL_RCC_OscConfig+0x4c4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1f0      	bne.n	800a948 <HAL_RCC_OscConfig+0x498>
 800a966:	e01e      	b.n	800a9a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d107      	bne.n	800a980 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e019      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
 800a974:	40021000 	.word	0x40021000
 800a978:	40007000 	.word	0x40007000
 800a97c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a980:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b0 <HAL_RCC_OscConfig+0x500>)
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	429a      	cmp	r2, r3
 800a992:	d106      	bne.n	800a9a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d001      	beq.n	800a9a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3718      	adds	r7, #24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	40021000 	.word	0x40021000

0800a9b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e0d0      	b.n	800ab6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a9c8:	4b6a      	ldr	r3, [pc, #424]	@ (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 0307 	and.w	r3, r3, #7
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d910      	bls.n	800a9f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9d6:	4b67      	ldr	r3, [pc, #412]	@ (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f023 0207 	bic.w	r2, r3, #7
 800a9de:	4965      	ldr	r1, [pc, #404]	@ (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9e6:	4b63      	ldr	r3, [pc, #396]	@ (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d001      	beq.n	800a9f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e0b8      	b.n	800ab6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d020      	beq.n	800aa46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d005      	beq.n	800aa1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa10:	4b59      	ldr	r3, [pc, #356]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	4a58      	ldr	r2, [pc, #352]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800aa1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0308 	and.w	r3, r3, #8
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d005      	beq.n	800aa34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa28:	4b53      	ldr	r3, [pc, #332]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	4a52      	ldr	r2, [pc, #328]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800aa32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa34:	4b50      	ldr	r3, [pc, #320]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	494d      	ldr	r1, [pc, #308]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d040      	beq.n	800aad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d107      	bne.n	800aa6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa5a:	4b47      	ldr	r3, [pc, #284]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d115      	bne.n	800aa92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e07f      	b.n	800ab6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d107      	bne.n	800aa82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa72:	4b41      	ldr	r3, [pc, #260]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d109      	bne.n	800aa92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e073      	b.n	800ab6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa82:	4b3d      	ldr	r3, [pc, #244]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e06b      	b.n	800ab6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa92:	4b39      	ldr	r3, [pc, #228]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f023 0203 	bic.w	r2, r3, #3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	4936      	ldr	r1, [pc, #216]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aaa4:	f7fd fcc0 	bl	8008428 <HAL_GetTick>
 800aaa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaaa:	e00a      	b.n	800aac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaac:	f7fd fcbc 	bl	8008428 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d901      	bls.n	800aac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e053      	b.n	800ab6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aac2:	4b2d      	ldr	r3, [pc, #180]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f003 020c 	and.w	r2, r3, #12
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d1eb      	bne.n	800aaac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aad4:	4b27      	ldr	r3, [pc, #156]	@ (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0307 	and.w	r3, r3, #7
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d210      	bcs.n	800ab04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aae2:	4b24      	ldr	r3, [pc, #144]	@ (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f023 0207 	bic.w	r2, r3, #7
 800aaea:	4922      	ldr	r1, [pc, #136]	@ (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaf2:	4b20      	ldr	r3, [pc, #128]	@ (800ab74 <HAL_RCC_ClockConfig+0x1c0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0307 	and.w	r3, r3, #7
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d001      	beq.n	800ab04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e032      	b.n	800ab6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d008      	beq.n	800ab22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab10:	4b19      	ldr	r3, [pc, #100]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	4916      	ldr	r1, [pc, #88]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0308 	and.w	r3, r3, #8
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d009      	beq.n	800ab42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ab2e:	4b12      	ldr	r3, [pc, #72]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	490e      	ldr	r1, [pc, #56]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ab42:	f000 f821 	bl	800ab88 <HAL_RCC_GetSysClockFreq>
 800ab46:	4602      	mov	r2, r0
 800ab48:	4b0b      	ldr	r3, [pc, #44]	@ (800ab78 <HAL_RCC_ClockConfig+0x1c4>)
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	091b      	lsrs	r3, r3, #4
 800ab4e:	f003 030f 	and.w	r3, r3, #15
 800ab52:	490a      	ldr	r1, [pc, #40]	@ (800ab7c <HAL_RCC_ClockConfig+0x1c8>)
 800ab54:	5ccb      	ldrb	r3, [r1, r3]
 800ab56:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5a:	4a09      	ldr	r2, [pc, #36]	@ (800ab80 <HAL_RCC_ClockConfig+0x1cc>)
 800ab5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ab5e:	4b09      	ldr	r3, [pc, #36]	@ (800ab84 <HAL_RCC_ClockConfig+0x1d0>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fd fc1e 	bl	80083a4 <HAL_InitTick>

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	40022000 	.word	0x40022000
 800ab78:	40021000 	.word	0x40021000
 800ab7c:	0800da0c 	.word	0x0800da0c
 800ab80:	200000c0 	.word	0x200000c0
 800ab84:	200000c4 	.word	0x200000c4

0800ab88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	2300      	movs	r3, #0
 800ab94:	60bb      	str	r3, [r7, #8]
 800ab96:	2300      	movs	r3, #0
 800ab98:	617b      	str	r3, [r7, #20]
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aba2:	4b1e      	ldr	r3, [pc, #120]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0x94>)
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f003 030c 	and.w	r3, r3, #12
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d002      	beq.n	800abb8 <HAL_RCC_GetSysClockFreq+0x30>
 800abb2:	2b08      	cmp	r3, #8
 800abb4:	d003      	beq.n	800abbe <HAL_RCC_GetSysClockFreq+0x36>
 800abb6:	e027      	b.n	800ac08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800abb8:	4b19      	ldr	r3, [pc, #100]	@ (800ac20 <HAL_RCC_GetSysClockFreq+0x98>)
 800abba:	613b      	str	r3, [r7, #16]
      break;
 800abbc:	e027      	b.n	800ac0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	0c9b      	lsrs	r3, r3, #18
 800abc2:	f003 030f 	and.w	r3, r3, #15
 800abc6:	4a17      	ldr	r2, [pc, #92]	@ (800ac24 <HAL_RCC_GetSysClockFreq+0x9c>)
 800abc8:	5cd3      	ldrb	r3, [r2, r3]
 800abca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d010      	beq.n	800abf8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800abd6:	4b11      	ldr	r3, [pc, #68]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0x94>)
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	0c5b      	lsrs	r3, r3, #17
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	4a11      	ldr	r2, [pc, #68]	@ (800ac28 <HAL_RCC_GetSysClockFreq+0xa0>)
 800abe2:	5cd3      	ldrb	r3, [r2, r3]
 800abe4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a0d      	ldr	r2, [pc, #52]	@ (800ac20 <HAL_RCC_GetSysClockFreq+0x98>)
 800abea:	fb03 f202 	mul.w	r2, r3, r2
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	e004      	b.n	800ac02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a0c      	ldr	r2, [pc, #48]	@ (800ac2c <HAL_RCC_GetSysClockFreq+0xa4>)
 800abfc:	fb02 f303 	mul.w	r3, r2, r3
 800ac00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	613b      	str	r3, [r7, #16]
      break;
 800ac06:	e002      	b.n	800ac0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ac08:	4b05      	ldr	r3, [pc, #20]	@ (800ac20 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac0a:	613b      	str	r3, [r7, #16]
      break;
 800ac0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac0e:	693b      	ldr	r3, [r7, #16]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	40021000 	.word	0x40021000
 800ac20:	007a1200 	.word	0x007a1200
 800ac24:	0800da24 	.word	0x0800da24
 800ac28:	0800da34 	.word	0x0800da34
 800ac2c:	003d0900 	.word	0x003d0900

0800ac30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac30:	b480      	push	{r7}
 800ac32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac34:	4b02      	ldr	r3, [pc, #8]	@ (800ac40 <HAL_RCC_GetHCLKFreq+0x10>)
 800ac36:	681b      	ldr	r3, [r3, #0]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bc80      	pop	{r7}
 800ac3e:	4770      	bx	lr
 800ac40:	200000c0 	.word	0x200000c0

0800ac44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ac48:	f7ff fff2 	bl	800ac30 <HAL_RCC_GetHCLKFreq>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	4b05      	ldr	r3, [pc, #20]	@ (800ac64 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	0a1b      	lsrs	r3, r3, #8
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	4903      	ldr	r1, [pc, #12]	@ (800ac68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac5a:	5ccb      	ldrb	r3, [r1, r3]
 800ac5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	40021000 	.word	0x40021000
 800ac68:	0800da1c 	.word	0x0800da1c

0800ac6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac70:	f7ff ffde 	bl	800ac30 <HAL_RCC_GetHCLKFreq>
 800ac74:	4602      	mov	r2, r0
 800ac76:	4b05      	ldr	r3, [pc, #20]	@ (800ac8c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	0adb      	lsrs	r3, r3, #11
 800ac7c:	f003 0307 	and.w	r3, r3, #7
 800ac80:	4903      	ldr	r1, [pc, #12]	@ (800ac90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac82:	5ccb      	ldrb	r3, [r1, r3]
 800ac84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40021000 	.word	0x40021000
 800ac90:	0800da1c 	.word	0x0800da1c

0800ac94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ac9c:	4b0a      	ldr	r3, [pc, #40]	@ (800acc8 <RCC_Delay+0x34>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a0a      	ldr	r2, [pc, #40]	@ (800accc <RCC_Delay+0x38>)
 800aca2:	fba2 2303 	umull	r2, r3, r2, r3
 800aca6:	0a5b      	lsrs	r3, r3, #9
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	fb02 f303 	mul.w	r3, r2, r3
 800acae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800acb0:	bf00      	nop
  }
  while (Delay --);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1e5a      	subs	r2, r3, #1
 800acb6:	60fa      	str	r2, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f9      	bne.n	800acb0 <RCC_Delay+0x1c>
}
 800acbc:	bf00      	nop
 800acbe:	bf00      	nop
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bc80      	pop	{r7}
 800acc6:	4770      	bx	lr
 800acc8:	200000c0 	.word	0x200000c0
 800accc:	10624dd3 	.word	0x10624dd3

0800acd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e041      	b.n	800ad66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d106      	bne.n	800acfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7fd fa22 	bl	8008140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4610      	mov	r0, r2
 800ad10:	f000 fa82 	bl	800b218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
	...

0800ad70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d001      	beq.n	800ad88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e044      	b.n	800ae12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f042 0201 	orr.w	r2, r2, #1
 800ad9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae1c <HAL_TIM_Base_Start_IT+0xac>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d018      	beq.n	800addc <HAL_TIM_Base_Start_IT+0x6c>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a1c      	ldr	r2, [pc, #112]	@ (800ae20 <HAL_TIM_Base_Start_IT+0xb0>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d013      	beq.n	800addc <HAL_TIM_Base_Start_IT+0x6c>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adbc:	d00e      	beq.n	800addc <HAL_TIM_Base_Start_IT+0x6c>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a18      	ldr	r2, [pc, #96]	@ (800ae24 <HAL_TIM_Base_Start_IT+0xb4>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d009      	beq.n	800addc <HAL_TIM_Base_Start_IT+0x6c>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a16      	ldr	r2, [pc, #88]	@ (800ae28 <HAL_TIM_Base_Start_IT+0xb8>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d004      	beq.n	800addc <HAL_TIM_Base_Start_IT+0x6c>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a15      	ldr	r2, [pc, #84]	@ (800ae2c <HAL_TIM_Base_Start_IT+0xbc>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d111      	bne.n	800ae00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b06      	cmp	r3, #6
 800adec:	d010      	beq.n	800ae10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f042 0201 	orr.w	r2, r2, #1
 800adfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adfe:	e007      	b.n	800ae10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f042 0201 	orr.w	r2, r2, #1
 800ae0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bc80      	pop	{r7}
 800ae1a:	4770      	bx	lr
 800ae1c:	40012c00 	.word	0x40012c00
 800ae20:	40013400 	.word	0x40013400
 800ae24:	40000400 	.word	0x40000400
 800ae28:	40000800 	.word	0x40000800
 800ae2c:	40000c00 	.word	0x40000c00

0800ae30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d122      	bne.n	800ae8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d11b      	bne.n	800ae8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f06f 0202 	mvn.w	r2, #2
 800ae5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	f003 0303 	and.w	r3, r3, #3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f9b4 	bl	800b1e0 <HAL_TIM_IC_CaptureCallback>
 800ae78:	e005      	b.n	800ae86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f9a7 	bl	800b1ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f9b6 	bl	800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	f003 0304 	and.w	r3, r3, #4
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d122      	bne.n	800aee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d11b      	bne.n	800aee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f06f 0204 	mvn.w	r2, #4
 800aeb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f98a 	bl	800b1e0 <HAL_TIM_IC_CaptureCallback>
 800aecc:	e005      	b.n	800aeda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f97d 	bl	800b1ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f98c 	bl	800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b08      	cmp	r3, #8
 800aeec:	d122      	bne.n	800af34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f003 0308 	and.w	r3, r3, #8
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d11b      	bne.n	800af34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f06f 0208 	mvn.w	r2, #8
 800af04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2204      	movs	r2, #4
 800af0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	f003 0303 	and.w	r3, r3, #3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f960 	bl	800b1e0 <HAL_TIM_IC_CaptureCallback>
 800af20:	e005      	b.n	800af2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f953 	bl	800b1ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f962 	bl	800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0310 	and.w	r3, r3, #16
 800af3e:	2b10      	cmp	r3, #16
 800af40:	d122      	bne.n	800af88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f003 0310 	and.w	r3, r3, #16
 800af4c:	2b10      	cmp	r3, #16
 800af4e:	d11b      	bne.n	800af88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f06f 0210 	mvn.w	r2, #16
 800af58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2208      	movs	r2, #8
 800af5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f936 	bl	800b1e0 <HAL_TIM_IC_CaptureCallback>
 800af74:	e005      	b.n	800af82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f929 	bl	800b1ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f938 	bl	800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b01      	cmp	r3, #1
 800af94:	d10e      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f003 0301 	and.w	r3, r3, #1
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d107      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f06f 0201 	mvn.w	r2, #1
 800afac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7fc fd5e 	bl	8007a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afbe:	2b80      	cmp	r3, #128	@ 0x80
 800afc0:	d10e      	bne.n	800afe0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afcc:	2b80      	cmp	r3, #128	@ 0x80
 800afce:	d107      	bne.n	800afe0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800afd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 faa1 	bl	800b522 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afea:	2b40      	cmp	r3, #64	@ 0x40
 800afec:	d10e      	bne.n	800b00c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aff8:	2b40      	cmp	r3, #64	@ 0x40
 800affa:	d107      	bne.n	800b00c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f8fc 	bl	800b204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	f003 0320 	and.w	r3, r3, #32
 800b016:	2b20      	cmp	r3, #32
 800b018:	d10e      	bne.n	800b038 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f003 0320 	and.w	r3, r3, #32
 800b024:	2b20      	cmp	r3, #32
 800b026:	d107      	bne.n	800b038 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f06f 0220 	mvn.w	r2, #32
 800b030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fa6c 	bl	800b510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b054:	2b01      	cmp	r3, #1
 800b056:	d101      	bne.n	800b05c <HAL_TIM_ConfigClockSource+0x1c>
 800b058:	2302      	movs	r3, #2
 800b05a:	e0b4      	b.n	800b1c6 <HAL_TIM_ConfigClockSource+0x186>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2202      	movs	r2, #2
 800b068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b07a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b094:	d03e      	beq.n	800b114 <HAL_TIM_ConfigClockSource+0xd4>
 800b096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b09a:	f200 8087 	bhi.w	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
 800b09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0a2:	f000 8086 	beq.w	800b1b2 <HAL_TIM_ConfigClockSource+0x172>
 800b0a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0aa:	d87f      	bhi.n	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
 800b0ac:	2b70      	cmp	r3, #112	@ 0x70
 800b0ae:	d01a      	beq.n	800b0e6 <HAL_TIM_ConfigClockSource+0xa6>
 800b0b0:	2b70      	cmp	r3, #112	@ 0x70
 800b0b2:	d87b      	bhi.n	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
 800b0b4:	2b60      	cmp	r3, #96	@ 0x60
 800b0b6:	d050      	beq.n	800b15a <HAL_TIM_ConfigClockSource+0x11a>
 800b0b8:	2b60      	cmp	r3, #96	@ 0x60
 800b0ba:	d877      	bhi.n	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
 800b0bc:	2b50      	cmp	r3, #80	@ 0x50
 800b0be:	d03c      	beq.n	800b13a <HAL_TIM_ConfigClockSource+0xfa>
 800b0c0:	2b50      	cmp	r3, #80	@ 0x50
 800b0c2:	d873      	bhi.n	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
 800b0c4:	2b40      	cmp	r3, #64	@ 0x40
 800b0c6:	d058      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0x13a>
 800b0c8:	2b40      	cmp	r3, #64	@ 0x40
 800b0ca:	d86f      	bhi.n	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
 800b0cc:	2b30      	cmp	r3, #48	@ 0x30
 800b0ce:	d064      	beq.n	800b19a <HAL_TIM_ConfigClockSource+0x15a>
 800b0d0:	2b30      	cmp	r3, #48	@ 0x30
 800b0d2:	d86b      	bhi.n	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
 800b0d4:	2b20      	cmp	r3, #32
 800b0d6:	d060      	beq.n	800b19a <HAL_TIM_ConfigClockSource+0x15a>
 800b0d8:	2b20      	cmp	r3, #32
 800b0da:	d867      	bhi.n	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d05c      	beq.n	800b19a <HAL_TIM_ConfigClockSource+0x15a>
 800b0e0:	2b10      	cmp	r3, #16
 800b0e2:	d05a      	beq.n	800b19a <HAL_TIM_ConfigClockSource+0x15a>
 800b0e4:	e062      	b.n	800b1ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0f6:	f000 f980 	bl	800b3fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	609a      	str	r2, [r3, #8]
      break;
 800b112:	e04f      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b124:	f000 f969 	bl	800b3fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	689a      	ldr	r2, [r3, #8]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b136:	609a      	str	r2, [r3, #8]
      break;
 800b138:	e03c      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b146:	461a      	mov	r2, r3
 800b148:	f000 f8e0 	bl	800b30c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2150      	movs	r1, #80	@ 0x50
 800b152:	4618      	mov	r0, r3
 800b154:	f000 f937 	bl	800b3c6 <TIM_ITRx_SetConfig>
      break;
 800b158:	e02c      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b166:	461a      	mov	r2, r3
 800b168:	f000 f8fe 	bl	800b368 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2160      	movs	r1, #96	@ 0x60
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f927 	bl	800b3c6 <TIM_ITRx_SetConfig>
      break;
 800b178:	e01c      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b186:	461a      	mov	r2, r3
 800b188:	f000 f8c0 	bl	800b30c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2140      	movs	r1, #64	@ 0x40
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f917 	bl	800b3c6 <TIM_ITRx_SetConfig>
      break;
 800b198:	e00c      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	f000 f90e 	bl	800b3c6 <TIM_ITRx_SetConfig>
      break;
 800b1aa:	e003      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b1b0:	e000      	b.n	800b1b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b1b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bc80      	pop	{r7}
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bc80      	pop	{r7}
 800b1f0:	4770      	bx	lr

0800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1fa:	bf00      	nop
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bc80      	pop	{r7}
 800b202:	4770      	bx	lr

0800b204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	bc80      	pop	{r7}
 800b214:	4770      	bx	lr
	...

0800b218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a33      	ldr	r2, [pc, #204]	@ (800b2f8 <TIM_Base_SetConfig+0xe0>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d013      	beq.n	800b258 <TIM_Base_SetConfig+0x40>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a32      	ldr	r2, [pc, #200]	@ (800b2fc <TIM_Base_SetConfig+0xe4>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d00f      	beq.n	800b258 <TIM_Base_SetConfig+0x40>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b23e:	d00b      	beq.n	800b258 <TIM_Base_SetConfig+0x40>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a2f      	ldr	r2, [pc, #188]	@ (800b300 <TIM_Base_SetConfig+0xe8>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d007      	beq.n	800b258 <TIM_Base_SetConfig+0x40>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a2e      	ldr	r2, [pc, #184]	@ (800b304 <TIM_Base_SetConfig+0xec>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d003      	beq.n	800b258 <TIM_Base_SetConfig+0x40>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a2d      	ldr	r2, [pc, #180]	@ (800b308 <TIM_Base_SetConfig+0xf0>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d108      	bne.n	800b26a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b25e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	4313      	orrs	r3, r2
 800b268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a22      	ldr	r2, [pc, #136]	@ (800b2f8 <TIM_Base_SetConfig+0xe0>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d013      	beq.n	800b29a <TIM_Base_SetConfig+0x82>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a21      	ldr	r2, [pc, #132]	@ (800b2fc <TIM_Base_SetConfig+0xe4>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d00f      	beq.n	800b29a <TIM_Base_SetConfig+0x82>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b280:	d00b      	beq.n	800b29a <TIM_Base_SetConfig+0x82>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a1e      	ldr	r2, [pc, #120]	@ (800b300 <TIM_Base_SetConfig+0xe8>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d007      	beq.n	800b29a <TIM_Base_SetConfig+0x82>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a1d      	ldr	r2, [pc, #116]	@ (800b304 <TIM_Base_SetConfig+0xec>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d003      	beq.n	800b29a <TIM_Base_SetConfig+0x82>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a1c      	ldr	r2, [pc, #112]	@ (800b308 <TIM_Base_SetConfig+0xf0>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d108      	bne.n	800b2ac <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a09      	ldr	r2, [pc, #36]	@ (800b2f8 <TIM_Base_SetConfig+0xe0>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d003      	beq.n	800b2e0 <TIM_Base_SetConfig+0xc8>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a08      	ldr	r2, [pc, #32]	@ (800b2fc <TIM_Base_SetConfig+0xe4>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d103      	bne.n	800b2e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	691a      	ldr	r2, [r3, #16]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	615a      	str	r2, [r3, #20]
}
 800b2ee:	bf00      	nop
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bc80      	pop	{r7}
 800b2f6:	4770      	bx	lr
 800b2f8:	40012c00 	.word	0x40012c00
 800b2fc:	40013400 	.word	0x40013400
 800b300:	40000400 	.word	0x40000400
 800b304:	40000800 	.word	0x40000800
 800b308:	40000c00 	.word	0x40000c00

0800b30c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	f023 0201 	bic.w	r2, r3, #1
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4313      	orrs	r3, r2
 800b340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f023 030a 	bic.w	r3, r3, #10
 800b348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b34a:	697a      	ldr	r2, [r7, #20]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	4313      	orrs	r3, r2
 800b350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	621a      	str	r2, [r3, #32]
}
 800b35e:	bf00      	nop
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	bc80      	pop	{r7}
 800b366:	4770      	bx	lr

0800b368 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b368:	b480      	push	{r7}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6a1b      	ldr	r3, [r3, #32]
 800b378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	f023 0210 	bic.w	r2, r3, #16
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	031b      	lsls	r3, r3, #12
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b3a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	011b      	lsls	r3, r3, #4
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	621a      	str	r2, [r3, #32]
}
 800b3bc:	bf00      	nop
 800b3be:	371c      	adds	r7, #28
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bc80      	pop	{r7}
 800b3c4:	4770      	bx	lr

0800b3c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b085      	sub	sp, #20
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	f043 0307 	orr.w	r3, r3, #7
 800b3e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	609a      	str	r2, [r3, #8]
}
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bc80      	pop	{r7}
 800b3f8:	4770      	bx	lr

0800b3fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b087      	sub	sp, #28
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	607a      	str	r2, [r7, #4]
 800b406:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b414:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	021a      	lsls	r2, r3, #8
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	431a      	orrs	r2, r3
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	4313      	orrs	r3, r2
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	4313      	orrs	r3, r2
 800b426:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	609a      	str	r2, [r3, #8]
}
 800b42e:	bf00      	nop
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	bc80      	pop	{r7}
 800b436:	4770      	bx	lr

0800b438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d101      	bne.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b44c:	2302      	movs	r3, #2
 800b44e:	e050      	b.n	800b4f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a1b      	ldr	r2, [pc, #108]	@ (800b4fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d018      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a19      	ldr	r2, [pc, #100]	@ (800b500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d013      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a6:	d00e      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a15      	ldr	r2, [pc, #84]	@ (800b504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d009      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a14      	ldr	r2, [pc, #80]	@ (800b508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d004      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a12      	ldr	r2, [pc, #72]	@ (800b50c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d10c      	bne.n	800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bc80      	pop	{r7}
 800b4fa:	4770      	bx	lr
 800b4fc:	40012c00 	.word	0x40012c00
 800b500:	40013400 	.word	0x40013400
 800b504:	40000400 	.word	0x40000400
 800b508:	40000800 	.word	0x40000800
 800b50c:	40000c00 	.word	0x40000c00

0800b510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr

0800b522 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b52a:	bf00      	nop
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr

0800b534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e042      	b.n	800b5cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7fc fe16 	bl	800818c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2224      	movs	r2, #36	@ 0x24
 800b564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68da      	ldr	r2, [r3, #12]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fcb5 	bl	800bee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	691a      	ldr	r2, [r3, #16]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b58c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	695a      	ldr	r2, [r3, #20]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b59c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68da      	ldr	r2, [r3, #12]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b5ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2220      	movs	r2, #32
 800b5b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2220      	movs	r2, #32
 800b5c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b20      	cmp	r3, #32
 800b5ec:	d121      	bne.n	800b632 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <HAL_UART_Transmit_IT+0x26>
 800b5f4:	88fb      	ldrh	r3, [r7, #6]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e01a      	b.n	800b634 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	88fa      	ldrh	r2, [r7, #6]
 800b608:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	88fa      	ldrh	r2, [r7, #6]
 800b60e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2221      	movs	r2, #33	@ 0x21
 800b61a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b62c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	e000      	b.n	800b634 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b632:	2302      	movs	r3, #2
  }
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	bc80      	pop	{r7}
 800b63c:	4770      	bx	lr
	...

0800b640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b0ba      	sub	sp, #232	@ 0xe8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b666:	2300      	movs	r3, #0
 800b668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b66c:	2300      	movs	r3, #0
 800b66e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b676:	f003 030f 	and.w	r3, r3, #15
 800b67a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b67e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10f      	bne.n	800b6a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d009      	beq.n	800b6a6 <HAL_UART_IRQHandler+0x66>
 800b692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b696:	f003 0320 	and.w	r3, r3, #32
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d003      	beq.n	800b6a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fb63 	bl	800bd6a <UART_Receive_IT>
      return;
 800b6a4:	e25b      	b.n	800bb5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b6a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 80de 	beq.w	800b86c <HAL_UART_IRQHandler+0x22c>
 800b6b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d106      	bne.n	800b6ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 80d1 	beq.w	800b86c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <HAL_UART_IRQHandler+0xae>
 800b6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d005      	beq.n	800b6ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6e6:	f043 0201 	orr.w	r2, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6f2:	f003 0304 	and.w	r3, r3, #4
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00b      	beq.n	800b712 <HAL_UART_IRQHandler+0xd2>
 800b6fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	2b00      	cmp	r3, #0
 800b704:	d005      	beq.n	800b712 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b70a:	f043 0202 	orr.w	r2, r3, #2
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b716:	f003 0302 	and.w	r3, r3, #2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <HAL_UART_IRQHandler+0xf6>
 800b71e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b72e:	f043 0204 	orr.w	r2, r3, #4
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b73a:	f003 0308 	and.w	r3, r3, #8
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d011      	beq.n	800b766 <HAL_UART_IRQHandler+0x126>
 800b742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b75e:	f043 0208 	orr.w	r2, r3, #8
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 81f2 	beq.w	800bb54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b774:	f003 0320 	and.w	r3, r3, #32
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d008      	beq.n	800b78e <HAL_UART_IRQHandler+0x14e>
 800b77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 faee 	bl	800bd6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	bf14      	ite	ne
 800b79c:	2301      	movne	r3, #1
 800b79e:	2300      	moveq	r3, #0
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7aa:	f003 0308 	and.w	r3, r3, #8
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d103      	bne.n	800b7ba <HAL_UART_IRQHandler+0x17a>
 800b7b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d04f      	beq.n	800b85a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f9f8 	bl	800bbb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d041      	beq.n	800b852 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3314      	adds	r3, #20
 800b7d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b7dc:	e853 3f00 	ldrex	r3, [r3]
 800b7e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b7e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3314      	adds	r3, #20
 800b7f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b7fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b7fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b80a:	e841 2300 	strex	r3, r2, [r1]
 800b80e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1d9      	bne.n	800b7ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d013      	beq.n	800b84a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b826:	4a7e      	ldr	r2, [pc, #504]	@ (800ba20 <HAL_UART_IRQHandler+0x3e0>)
 800b828:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fd f86c 	bl	800890c <HAL_DMA_Abort_IT>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d016      	beq.n	800b868 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b83e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b844:	4610      	mov	r0, r2
 800b846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b848:	e00e      	b.n	800b868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f99c 	bl	800bb88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b850:	e00a      	b.n	800b868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 f998 	bl	800bb88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b858:	e006      	b.n	800b868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f994 	bl	800bb88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b866:	e175      	b.n	800bb54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b868:	bf00      	nop
    return;
 800b86a:	e173      	b.n	800bb54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b870:	2b01      	cmp	r3, #1
 800b872:	f040 814f 	bne.w	800bb14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b87a:	f003 0310 	and.w	r3, r3, #16
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 8148 	beq.w	800bb14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b888:	f003 0310 	and.w	r3, r3, #16
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8141 	beq.w	800bb14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b892:	2300      	movs	r3, #0
 800b894:	60bb      	str	r3, [r7, #8]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	60bb      	str	r3, [r7, #8]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	60bb      	str	r3, [r7, #8]
 800b8a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 80b6 	beq.w	800ba24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b8c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 8145 	beq.w	800bb58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b8d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	f080 813e 	bcs.w	800bb58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b8e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	2b20      	cmp	r3, #32
 800b8ec:	f000 8088 	beq.w	800ba00 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b8fe:	e853 3f00 	ldrex	r3, [r3]
 800b902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b906:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b90a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b90e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	330c      	adds	r3, #12
 800b918:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b91c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b920:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b924:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b928:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b92c:	e841 2300 	strex	r3, r2, [r1]
 800b930:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1d9      	bne.n	800b8f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3314      	adds	r3, #20
 800b942:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b94c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b94e:	f023 0301 	bic.w	r3, r3, #1
 800b952:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3314      	adds	r3, #20
 800b95c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b960:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b964:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b966:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b968:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b96c:	e841 2300 	strex	r3, r2, [r1]
 800b970:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1e1      	bne.n	800b93c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3314      	adds	r3, #20
 800b97e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b982:	e853 3f00 	ldrex	r3, [r3]
 800b986:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b98a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b98e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3314      	adds	r3, #20
 800b998:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b99c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b99e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b9a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b9a4:	e841 2300 	strex	r3, r2, [r1]
 800b9a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b9aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1e3      	bne.n	800b978 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	330c      	adds	r3, #12
 800b9c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c8:	e853 3f00 	ldrex	r3, [r3]
 800b9cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b9ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9d0:	f023 0310 	bic.w	r3, r3, #16
 800b9d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	330c      	adds	r3, #12
 800b9de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b9e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b9e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b9f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e3      	bne.n	800b9be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fc ff4b 	bl	8008896 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2202      	movs	r2, #2
 800ba04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f8bf 	bl	800bb9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba1c:	e09c      	b.n	800bb58 <HAL_UART_IRQHandler+0x518>
 800ba1e:	bf00      	nop
 800ba20:	0800bc75 	.word	0x0800bc75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 808e 	beq.w	800bb5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ba40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f000 8089 	beq.w	800bb5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	330c      	adds	r3, #12
 800ba50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	330c      	adds	r3, #12
 800ba6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ba6e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ba70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e3      	bne.n	800ba4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3314      	adds	r3, #20
 800ba88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8c:	e853 3f00 	ldrex	r3, [r3]
 800ba90:	623b      	str	r3, [r7, #32]
   return(result);
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3314      	adds	r3, #20
 800baa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800baa6:	633a      	str	r2, [r7, #48]	@ 0x30
 800baa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800baac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baae:	e841 2300 	strex	r3, r2, [r1]
 800bab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1e3      	bne.n	800ba82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2220      	movs	r2, #32
 800babe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	330c      	adds	r3, #12
 800bace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	e853 3f00 	ldrex	r3, [r3]
 800bad6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f023 0310 	bic.w	r3, r3, #16
 800bade:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	330c      	adds	r3, #12
 800bae8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800baec:	61fa      	str	r2, [r7, #28]
 800baee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf0:	69b9      	ldr	r1, [r7, #24]
 800baf2:	69fa      	ldr	r2, [r7, #28]
 800baf4:	e841 2300 	strex	r3, r2, [r1]
 800baf8:	617b      	str	r3, [r7, #20]
   return(result);
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e3      	bne.n	800bac8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2202      	movs	r2, #2
 800bb04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f844 	bl	800bb9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb12:	e023      	b.n	800bb5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d009      	beq.n	800bb34 <HAL_UART_IRQHandler+0x4f4>
 800bb20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f8b5 	bl	800bc9c <UART_Transmit_IT>
    return;
 800bb32:	e014      	b.n	800bb5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00e      	beq.n	800bb5e <HAL_UART_IRQHandler+0x51e>
 800bb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d008      	beq.n	800bb5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f8f4 	bl	800bd3a <UART_EndTransmit_IT>
    return;
 800bb52:	e004      	b.n	800bb5e <HAL_UART_IRQHandler+0x51e>
    return;
 800bb54:	bf00      	nop
 800bb56:	e002      	b.n	800bb5e <HAL_UART_IRQHandler+0x51e>
      return;
 800bb58:	bf00      	nop
 800bb5a:	e000      	b.n	800bb5e <HAL_UART_IRQHandler+0x51e>
      return;
 800bb5c:	bf00      	nop
  }
}
 800bb5e:	37e8      	adds	r7, #232	@ 0xe8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bc80      	pop	{r7}
 800bb74:	4770      	bx	lr

0800bb76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bb7e:	bf00      	nop
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bc80      	pop	{r7}
 800bb86:	4770      	bx	lr

0800bb88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bc80      	pop	{r7}
 800bb98:	4770      	bx	lr

0800bb9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	460b      	mov	r3, r1
 800bba4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bc80      	pop	{r7}
 800bbae:	4770      	bx	lr

0800bbb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b095      	sub	sp, #84	@ 0x54
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	330c      	adds	r3, #12
 800bbbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbc2:	e853 3f00 	ldrex	r3, [r3]
 800bbc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	330c      	adds	r3, #12
 800bbd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbd8:	643a      	str	r2, [r7, #64]	@ 0x40
 800bbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbe0:	e841 2300 	strex	r3, r2, [r1]
 800bbe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1e5      	bne.n	800bbb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3314      	adds	r3, #20
 800bbf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	e853 3f00 	ldrex	r3, [r3]
 800bbfa:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	f023 0301 	bic.w	r3, r3, #1
 800bc02:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	3314      	adds	r3, #20
 800bc0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc14:	e841 2300 	strex	r3, r2, [r1]
 800bc18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e5      	bne.n	800bbec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d119      	bne.n	800bc5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	330c      	adds	r3, #12
 800bc2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	e853 3f00 	ldrex	r3, [r3]
 800bc36:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f023 0310 	bic.w	r3, r3, #16
 800bc3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	330c      	adds	r3, #12
 800bc46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc48:	61ba      	str	r2, [r7, #24]
 800bc4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4c:	6979      	ldr	r1, [r7, #20]
 800bc4e:	69ba      	ldr	r2, [r7, #24]
 800bc50:	e841 2300 	strex	r3, r2, [r1]
 800bc54:	613b      	str	r3, [r7, #16]
   return(result);
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1e5      	bne.n	800bc28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bc6a:	bf00      	nop
 800bc6c:	3754      	adds	r7, #84	@ 0x54
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bc80      	pop	{r7}
 800bc72:	4770      	bx	lr

0800bc74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7ff ff7a 	bl	800bb88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc94:	bf00      	nop
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b21      	cmp	r3, #33	@ 0x21
 800bcae:	d13e      	bne.n	800bd2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcb8:	d114      	bne.n	800bce4 <UART_Transmit_IT+0x48>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d110      	bne.n	800bce4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	461a      	mov	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a1b      	ldr	r3, [r3, #32]
 800bcdc:	1c9a      	adds	r2, r3, #2
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	621a      	str	r2, [r3, #32]
 800bce2:	e008      	b.n	800bcf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a1b      	ldr	r3, [r3, #32]
 800bce8:	1c59      	adds	r1, r3, #1
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	6211      	str	r1, [r2, #32]
 800bcee:	781a      	ldrb	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	4619      	mov	r1, r3
 800bd04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10f      	bne.n	800bd2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68da      	ldr	r2, [r3, #12]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68da      	ldr	r2, [r3, #12]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e000      	b.n	800bd30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd2e:	2302      	movs	r3, #2
  }
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr

0800bd3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68da      	ldr	r2, [r3, #12]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2220      	movs	r2, #32
 800bd56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7ff ff02 	bl	800bb64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b08c      	sub	sp, #48	@ 0x30
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b22      	cmp	r3, #34	@ 0x22
 800bd7c:	f040 80ae 	bne.w	800bedc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd88:	d117      	bne.n	800bdba <UART_Receive_IT+0x50>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d113      	bne.n	800bdba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd92:	2300      	movs	r3, #0
 800bd94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb2:	1c9a      	adds	r2, r3, #2
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	629a      	str	r2, [r3, #40]	@ 0x28
 800bdb8:	e026      	b.n	800be08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdcc:	d007      	beq.n	800bdde <UART_Receive_IT+0x74>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10a      	bne.n	800bdec <UART_Receive_IT+0x82>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d106      	bne.n	800bdec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde8:	701a      	strb	r2, [r3, #0]
 800bdea:	e008      	b.n	800bdfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	3b01      	subs	r3, #1
 800be10:	b29b      	uxth	r3, r3
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	4619      	mov	r1, r3
 800be16:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d15d      	bne.n	800bed8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	68da      	ldr	r2, [r3, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f022 0220 	bic.w	r2, r2, #32
 800be2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68da      	ldr	r2, [r3, #12]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	695a      	ldr	r2, [r3, #20]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 0201 	bic.w	r2, r2, #1
 800be4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2220      	movs	r2, #32
 800be50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d135      	bne.n	800bece <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	330c      	adds	r3, #12
 800be6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	e853 3f00 	ldrex	r3, [r3]
 800be76:	613b      	str	r3, [r7, #16]
   return(result);
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f023 0310 	bic.w	r3, r3, #16
 800be7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	330c      	adds	r3, #12
 800be86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be88:	623a      	str	r2, [r7, #32]
 800be8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8c:	69f9      	ldr	r1, [r7, #28]
 800be8e:	6a3a      	ldr	r2, [r7, #32]
 800be90:	e841 2300 	strex	r3, r2, [r1]
 800be94:	61bb      	str	r3, [r7, #24]
   return(result);
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e5      	bne.n	800be68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f003 0310 	and.w	r3, r3, #16
 800bea6:	2b10      	cmp	r3, #16
 800bea8:	d10a      	bne.n	800bec0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bec4:	4619      	mov	r1, r3
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff fe67 	bl	800bb9a <HAL_UARTEx_RxEventCallback>
 800becc:	e002      	b.n	800bed4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff fe51 	bl	800bb76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	e002      	b.n	800bede <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	e000      	b.n	800bede <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bedc:	2302      	movs	r3, #2
  }
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3730      	adds	r7, #48	@ 0x30
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68da      	ldr	r2, [r3, #12]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	689a      	ldr	r2, [r3, #8]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	695b      	ldr	r3, [r3, #20]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800bf22:	f023 030c 	bic.w	r3, r3, #12
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	6812      	ldr	r2, [r2, #0]
 800bf2a:	68b9      	ldr	r1, [r7, #8]
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	699a      	ldr	r2, [r3, #24]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	430a      	orrs	r2, r1
 800bf44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a2c      	ldr	r2, [pc, #176]	@ (800bffc <UART_SetConfig+0x114>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d103      	bne.n	800bf58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bf50:	f7fe fe8c 	bl	800ac6c <HAL_RCC_GetPCLK2Freq>
 800bf54:	60f8      	str	r0, [r7, #12]
 800bf56:	e002      	b.n	800bf5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bf58:	f7fe fe74 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800bf5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	009a      	lsls	r2, r3, #2
 800bf68:	441a      	add	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf74:	4a22      	ldr	r2, [pc, #136]	@ (800c000 <UART_SetConfig+0x118>)
 800bf76:	fba2 2303 	umull	r2, r3, r2, r3
 800bf7a:	095b      	lsrs	r3, r3, #5
 800bf7c:	0119      	lsls	r1, r3, #4
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	009a      	lsls	r2, r3, #2
 800bf88:	441a      	add	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf94:	4b1a      	ldr	r3, [pc, #104]	@ (800c000 <UART_SetConfig+0x118>)
 800bf96:	fba3 0302 	umull	r0, r3, r3, r2
 800bf9a:	095b      	lsrs	r3, r3, #5
 800bf9c:	2064      	movs	r0, #100	@ 0x64
 800bf9e:	fb00 f303 	mul.w	r3, r0, r3
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	011b      	lsls	r3, r3, #4
 800bfa6:	3332      	adds	r3, #50	@ 0x32
 800bfa8:	4a15      	ldr	r2, [pc, #84]	@ (800c000 <UART_SetConfig+0x118>)
 800bfaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bfae:	095b      	lsrs	r3, r3, #5
 800bfb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfb4:	4419      	add	r1, r3
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009a      	lsls	r2, r3, #2
 800bfc0:	441a      	add	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfcc:	4b0c      	ldr	r3, [pc, #48]	@ (800c000 <UART_SetConfig+0x118>)
 800bfce:	fba3 0302 	umull	r0, r3, r3, r2
 800bfd2:	095b      	lsrs	r3, r3, #5
 800bfd4:	2064      	movs	r0, #100	@ 0x64
 800bfd6:	fb00 f303 	mul.w	r3, r0, r3
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	011b      	lsls	r3, r3, #4
 800bfde:	3332      	adds	r3, #50	@ 0x32
 800bfe0:	4a07      	ldr	r2, [pc, #28]	@ (800c000 <UART_SetConfig+0x118>)
 800bfe2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfe6:	095b      	lsrs	r3, r3, #5
 800bfe8:	f003 020f 	and.w	r2, r3, #15
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	440a      	add	r2, r1
 800bff2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bff4:	bf00      	nop
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	40013800 	.word	0x40013800
 800c000:	51eb851f 	.word	0x51eb851f

0800c004 <__itoa>:
 800c004:	1e93      	subs	r3, r2, #2
 800c006:	2b22      	cmp	r3, #34	@ 0x22
 800c008:	b510      	push	{r4, lr}
 800c00a:	460c      	mov	r4, r1
 800c00c:	d904      	bls.n	800c018 <__itoa+0x14>
 800c00e:	2300      	movs	r3, #0
 800c010:	461c      	mov	r4, r3
 800c012:	700b      	strb	r3, [r1, #0]
 800c014:	4620      	mov	r0, r4
 800c016:	bd10      	pop	{r4, pc}
 800c018:	2a0a      	cmp	r2, #10
 800c01a:	d109      	bne.n	800c030 <__itoa+0x2c>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	da07      	bge.n	800c030 <__itoa+0x2c>
 800c020:	232d      	movs	r3, #45	@ 0x2d
 800c022:	700b      	strb	r3, [r1, #0]
 800c024:	2101      	movs	r1, #1
 800c026:	4240      	negs	r0, r0
 800c028:	4421      	add	r1, r4
 800c02a:	f000 f8db 	bl	800c1e4 <__utoa>
 800c02e:	e7f1      	b.n	800c014 <__itoa+0x10>
 800c030:	2100      	movs	r1, #0
 800c032:	e7f9      	b.n	800c028 <__itoa+0x24>

0800c034 <itoa>:
 800c034:	f7ff bfe6 	b.w	800c004 <__itoa>

0800c038 <malloc>:
 800c038:	4b02      	ldr	r3, [pc, #8]	@ (800c044 <malloc+0xc>)
 800c03a:	4601      	mov	r1, r0
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	f000 b825 	b.w	800c08c <_malloc_r>
 800c042:	bf00      	nop
 800c044:	200000cc 	.word	0x200000cc

0800c048 <sbrk_aligned>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	4e0f      	ldr	r6, [pc, #60]	@ (800c088 <sbrk_aligned+0x40>)
 800c04c:	460c      	mov	r4, r1
 800c04e:	6831      	ldr	r1, [r6, #0]
 800c050:	4605      	mov	r5, r0
 800c052:	b911      	cbnz	r1, 800c05a <sbrk_aligned+0x12>
 800c054:	f000 f932 	bl	800c2bc <_sbrk_r>
 800c058:	6030      	str	r0, [r6, #0]
 800c05a:	4621      	mov	r1, r4
 800c05c:	4628      	mov	r0, r5
 800c05e:	f000 f92d 	bl	800c2bc <_sbrk_r>
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	d103      	bne.n	800c06e <sbrk_aligned+0x26>
 800c066:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c06a:	4620      	mov	r0, r4
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
 800c06e:	1cc4      	adds	r4, r0, #3
 800c070:	f024 0403 	bic.w	r4, r4, #3
 800c074:	42a0      	cmp	r0, r4
 800c076:	d0f8      	beq.n	800c06a <sbrk_aligned+0x22>
 800c078:	1a21      	subs	r1, r4, r0
 800c07a:	4628      	mov	r0, r5
 800c07c:	f000 f91e 	bl	800c2bc <_sbrk_r>
 800c080:	3001      	adds	r0, #1
 800c082:	d1f2      	bne.n	800c06a <sbrk_aligned+0x22>
 800c084:	e7ef      	b.n	800c066 <sbrk_aligned+0x1e>
 800c086:	bf00      	nop
 800c088:	200004a8 	.word	0x200004a8

0800c08c <_malloc_r>:
 800c08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c090:	1ccd      	adds	r5, r1, #3
 800c092:	f025 0503 	bic.w	r5, r5, #3
 800c096:	3508      	adds	r5, #8
 800c098:	2d0c      	cmp	r5, #12
 800c09a:	bf38      	it	cc
 800c09c:	250c      	movcc	r5, #12
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	db01      	blt.n	800c0a8 <_malloc_r+0x1c>
 800c0a4:	42a9      	cmp	r1, r5
 800c0a6:	d904      	bls.n	800c0b2 <_malloc_r+0x26>
 800c0a8:	230c      	movs	r3, #12
 800c0aa:	6033      	str	r3, [r6, #0]
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c188 <_malloc_r+0xfc>
 800c0b6:	f000 f869 	bl	800c18c <__malloc_lock>
 800c0ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c0be:	461c      	mov	r4, r3
 800c0c0:	bb44      	cbnz	r4, 800c114 <_malloc_r+0x88>
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	f7ff ffbf 	bl	800c048 <sbrk_aligned>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	d158      	bne.n	800c182 <_malloc_r+0xf6>
 800c0d0:	f8d8 4000 	ldr.w	r4, [r8]
 800c0d4:	4627      	mov	r7, r4
 800c0d6:	2f00      	cmp	r7, #0
 800c0d8:	d143      	bne.n	800c162 <_malloc_r+0xd6>
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	d04b      	beq.n	800c176 <_malloc_r+0xea>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	eb04 0903 	add.w	r9, r4, r3
 800c0e8:	f000 f8e8 	bl	800c2bc <_sbrk_r>
 800c0ec:	4581      	cmp	r9, r0
 800c0ee:	d142      	bne.n	800c176 <_malloc_r+0xea>
 800c0f0:	6821      	ldr	r1, [r4, #0]
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	1a6d      	subs	r5, r5, r1
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	f7ff ffa6 	bl	800c048 <sbrk_aligned>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d03a      	beq.n	800c176 <_malloc_r+0xea>
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	442b      	add	r3, r5
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	f8d8 3000 	ldr.w	r3, [r8]
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	bb62      	cbnz	r2, 800c168 <_malloc_r+0xdc>
 800c10e:	f8c8 7000 	str.w	r7, [r8]
 800c112:	e00f      	b.n	800c134 <_malloc_r+0xa8>
 800c114:	6822      	ldr	r2, [r4, #0]
 800c116:	1b52      	subs	r2, r2, r5
 800c118:	d420      	bmi.n	800c15c <_malloc_r+0xd0>
 800c11a:	2a0b      	cmp	r2, #11
 800c11c:	d917      	bls.n	800c14e <_malloc_r+0xc2>
 800c11e:	1961      	adds	r1, r4, r5
 800c120:	42a3      	cmp	r3, r4
 800c122:	6025      	str	r5, [r4, #0]
 800c124:	bf18      	it	ne
 800c126:	6059      	strne	r1, [r3, #4]
 800c128:	6863      	ldr	r3, [r4, #4]
 800c12a:	bf08      	it	eq
 800c12c:	f8c8 1000 	streq.w	r1, [r8]
 800c130:	5162      	str	r2, [r4, r5]
 800c132:	604b      	str	r3, [r1, #4]
 800c134:	4630      	mov	r0, r6
 800c136:	f000 f82f 	bl	800c198 <__malloc_unlock>
 800c13a:	f104 000b 	add.w	r0, r4, #11
 800c13e:	1d23      	adds	r3, r4, #4
 800c140:	f020 0007 	bic.w	r0, r0, #7
 800c144:	1ac2      	subs	r2, r0, r3
 800c146:	bf1c      	itt	ne
 800c148:	1a1b      	subne	r3, r3, r0
 800c14a:	50a3      	strne	r3, [r4, r2]
 800c14c:	e7af      	b.n	800c0ae <_malloc_r+0x22>
 800c14e:	6862      	ldr	r2, [r4, #4]
 800c150:	42a3      	cmp	r3, r4
 800c152:	bf0c      	ite	eq
 800c154:	f8c8 2000 	streq.w	r2, [r8]
 800c158:	605a      	strne	r2, [r3, #4]
 800c15a:	e7eb      	b.n	800c134 <_malloc_r+0xa8>
 800c15c:	4623      	mov	r3, r4
 800c15e:	6864      	ldr	r4, [r4, #4]
 800c160:	e7ae      	b.n	800c0c0 <_malloc_r+0x34>
 800c162:	463c      	mov	r4, r7
 800c164:	687f      	ldr	r7, [r7, #4]
 800c166:	e7b6      	b.n	800c0d6 <_malloc_r+0x4a>
 800c168:	461a      	mov	r2, r3
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	d1fb      	bne.n	800c168 <_malloc_r+0xdc>
 800c170:	2300      	movs	r3, #0
 800c172:	6053      	str	r3, [r2, #4]
 800c174:	e7de      	b.n	800c134 <_malloc_r+0xa8>
 800c176:	230c      	movs	r3, #12
 800c178:	4630      	mov	r0, r6
 800c17a:	6033      	str	r3, [r6, #0]
 800c17c:	f000 f80c 	bl	800c198 <__malloc_unlock>
 800c180:	e794      	b.n	800c0ac <_malloc_r+0x20>
 800c182:	6005      	str	r5, [r0, #0]
 800c184:	e7d6      	b.n	800c134 <_malloc_r+0xa8>
 800c186:	bf00      	nop
 800c188:	200004ac 	.word	0x200004ac

0800c18c <__malloc_lock>:
 800c18c:	4801      	ldr	r0, [pc, #4]	@ (800c194 <__malloc_lock+0x8>)
 800c18e:	f000 b8cf 	b.w	800c330 <__retarget_lock_acquire_recursive>
 800c192:	bf00      	nop
 800c194:	200005e8 	.word	0x200005e8

0800c198 <__malloc_unlock>:
 800c198:	4801      	ldr	r0, [pc, #4]	@ (800c1a0 <__malloc_unlock+0x8>)
 800c19a:	f000 b8ca 	b.w	800c332 <__retarget_lock_release_recursive>
 800c19e:	bf00      	nop
 800c1a0:	200005e8 	.word	0x200005e8

0800c1a4 <siprintf>:
 800c1a4:	b40e      	push	{r1, r2, r3}
 800c1a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c1aa:	b500      	push	{lr}
 800c1ac:	b09c      	sub	sp, #112	@ 0x70
 800c1ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800c1b0:	9002      	str	r0, [sp, #8]
 800c1b2:	9006      	str	r0, [sp, #24]
 800c1b4:	9107      	str	r1, [sp, #28]
 800c1b6:	9104      	str	r1, [sp, #16]
 800c1b8:	4808      	ldr	r0, [pc, #32]	@ (800c1dc <siprintf+0x38>)
 800c1ba:	4909      	ldr	r1, [pc, #36]	@ (800c1e0 <siprintf+0x3c>)
 800c1bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c0:	9105      	str	r1, [sp, #20]
 800c1c2:	6800      	ldr	r0, [r0, #0]
 800c1c4:	a902      	add	r1, sp, #8
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	f000 f960 	bl	800c48c <_svfiprintf_r>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	9b02      	ldr	r3, [sp, #8]
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	b01c      	add	sp, #112	@ 0x70
 800c1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1d8:	b003      	add	sp, #12
 800c1da:	4770      	bx	lr
 800c1dc:	200000cc 	.word	0x200000cc
 800c1e0:	ffff0208 	.word	0xffff0208

0800c1e4 <__utoa>:
 800c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e6:	b08b      	sub	sp, #44	@ 0x2c
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	466e      	mov	r6, sp
 800c1ee:	4c1d      	ldr	r4, [pc, #116]	@ (800c264 <__utoa+0x80>)
 800c1f0:	f104 0c20 	add.w	ip, r4, #32
 800c1f4:	4637      	mov	r7, r6
 800c1f6:	6820      	ldr	r0, [r4, #0]
 800c1f8:	6861      	ldr	r1, [r4, #4]
 800c1fa:	3408      	adds	r4, #8
 800c1fc:	c703      	stmia	r7!, {r0, r1}
 800c1fe:	4564      	cmp	r4, ip
 800c200:	463e      	mov	r6, r7
 800c202:	d1f7      	bne.n	800c1f4 <__utoa+0x10>
 800c204:	7921      	ldrb	r1, [r4, #4]
 800c206:	6820      	ldr	r0, [r4, #0]
 800c208:	7139      	strb	r1, [r7, #4]
 800c20a:	1e91      	subs	r1, r2, #2
 800c20c:	2922      	cmp	r1, #34	@ 0x22
 800c20e:	6038      	str	r0, [r7, #0]
 800c210:	f04f 0100 	mov.w	r1, #0
 800c214:	d904      	bls.n	800c220 <__utoa+0x3c>
 800c216:	7019      	strb	r1, [r3, #0]
 800c218:	460b      	mov	r3, r1
 800c21a:	4618      	mov	r0, r3
 800c21c:	b00b      	add	sp, #44	@ 0x2c
 800c21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c220:	1e58      	subs	r0, r3, #1
 800c222:	4684      	mov	ip, r0
 800c224:	fbb5 f7f2 	udiv	r7, r5, r2
 800c228:	fb02 5617 	mls	r6, r2, r7, r5
 800c22c:	3628      	adds	r6, #40	@ 0x28
 800c22e:	446e      	add	r6, sp
 800c230:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c234:	460c      	mov	r4, r1
 800c236:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c23a:	462e      	mov	r6, r5
 800c23c:	42b2      	cmp	r2, r6
 800c23e:	463d      	mov	r5, r7
 800c240:	f101 0101 	add.w	r1, r1, #1
 800c244:	d9ee      	bls.n	800c224 <__utoa+0x40>
 800c246:	2200      	movs	r2, #0
 800c248:	545a      	strb	r2, [r3, r1]
 800c24a:	1919      	adds	r1, r3, r4
 800c24c:	1aa5      	subs	r5, r4, r2
 800c24e:	42aa      	cmp	r2, r5
 800c250:	dae3      	bge.n	800c21a <__utoa+0x36>
 800c252:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c256:	780e      	ldrb	r6, [r1, #0]
 800c258:	3201      	adds	r2, #1
 800c25a:	7006      	strb	r6, [r0, #0]
 800c25c:	f801 5901 	strb.w	r5, [r1], #-1
 800c260:	e7f4      	b.n	800c24c <__utoa+0x68>
 800c262:	bf00      	nop
 800c264:	0800da36 	.word	0x0800da36

0800c268 <strcat>:
 800c268:	4602      	mov	r2, r0
 800c26a:	b510      	push	{r4, lr}
 800c26c:	7814      	ldrb	r4, [r2, #0]
 800c26e:	4613      	mov	r3, r2
 800c270:	3201      	adds	r2, #1
 800c272:	2c00      	cmp	r4, #0
 800c274:	d1fa      	bne.n	800c26c <strcat+0x4>
 800c276:	3b01      	subs	r3, #1
 800c278:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c27c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c280:	2a00      	cmp	r2, #0
 800c282:	d1f9      	bne.n	800c278 <strcat+0x10>
 800c284:	bd10      	pop	{r4, pc}

0800c286 <strncpy>:
 800c286:	4603      	mov	r3, r0
 800c288:	b510      	push	{r4, lr}
 800c28a:	3901      	subs	r1, #1
 800c28c:	b132      	cbz	r2, 800c29c <strncpy+0x16>
 800c28e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c292:	3a01      	subs	r2, #1
 800c294:	f803 4b01 	strb.w	r4, [r3], #1
 800c298:	2c00      	cmp	r4, #0
 800c29a:	d1f7      	bne.n	800c28c <strncpy+0x6>
 800c29c:	2100      	movs	r1, #0
 800c29e:	441a      	add	r2, r3
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d100      	bne.n	800c2a6 <strncpy+0x20>
 800c2a4:	bd10      	pop	{r4, pc}
 800c2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c2aa:	e7f9      	b.n	800c2a0 <strncpy+0x1a>

0800c2ac <memset>:
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	4402      	add	r2, r0
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d100      	bne.n	800c2b6 <memset+0xa>
 800c2b4:	4770      	bx	lr
 800c2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ba:	e7f9      	b.n	800c2b0 <memset+0x4>

0800c2bc <_sbrk_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	2300      	movs	r3, #0
 800c2c0:	4d05      	ldr	r5, [pc, #20]	@ (800c2d8 <_sbrk_r+0x1c>)
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	602b      	str	r3, [r5, #0]
 800c2c8:	f7fb fff4 	bl	80082b4 <_sbrk>
 800c2cc:	1c43      	adds	r3, r0, #1
 800c2ce:	d102      	bne.n	800c2d6 <_sbrk_r+0x1a>
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	b103      	cbz	r3, 800c2d6 <_sbrk_r+0x1a>
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}
 800c2d8:	200005ec 	.word	0x200005ec

0800c2dc <__errno>:
 800c2dc:	4b01      	ldr	r3, [pc, #4]	@ (800c2e4 <__errno+0x8>)
 800c2de:	6818      	ldr	r0, [r3, #0]
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	200000cc 	.word	0x200000cc

0800c2e8 <__libc_init_array>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	2600      	movs	r6, #0
 800c2ec:	4d0c      	ldr	r5, [pc, #48]	@ (800c320 <__libc_init_array+0x38>)
 800c2ee:	4c0d      	ldr	r4, [pc, #52]	@ (800c324 <__libc_init_array+0x3c>)
 800c2f0:	1b64      	subs	r4, r4, r5
 800c2f2:	10a4      	asrs	r4, r4, #2
 800c2f4:	42a6      	cmp	r6, r4
 800c2f6:	d109      	bne.n	800c30c <__libc_init_array+0x24>
 800c2f8:	f000 fbc2 	bl	800ca80 <_init>
 800c2fc:	2600      	movs	r6, #0
 800c2fe:	4d0a      	ldr	r5, [pc, #40]	@ (800c328 <__libc_init_array+0x40>)
 800c300:	4c0a      	ldr	r4, [pc, #40]	@ (800c32c <__libc_init_array+0x44>)
 800c302:	1b64      	subs	r4, r4, r5
 800c304:	10a4      	asrs	r4, r4, #2
 800c306:	42a6      	cmp	r6, r4
 800c308:	d105      	bne.n	800c316 <__libc_init_array+0x2e>
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c310:	4798      	blx	r3
 800c312:	3601      	adds	r6, #1
 800c314:	e7ee      	b.n	800c2f4 <__libc_init_array+0xc>
 800c316:	f855 3b04 	ldr.w	r3, [r5], #4
 800c31a:	4798      	blx	r3
 800c31c:	3601      	adds	r6, #1
 800c31e:	e7f2      	b.n	800c306 <__libc_init_array+0x1e>
 800c320:	0800da98 	.word	0x0800da98
 800c324:	0800da98 	.word	0x0800da98
 800c328:	0800da98 	.word	0x0800da98
 800c32c:	0800da9c 	.word	0x0800da9c

0800c330 <__retarget_lock_acquire_recursive>:
 800c330:	4770      	bx	lr

0800c332 <__retarget_lock_release_recursive>:
 800c332:	4770      	bx	lr

0800c334 <strcpy>:
 800c334:	4603      	mov	r3, r0
 800c336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c33a:	f803 2b01 	strb.w	r2, [r3], #1
 800c33e:	2a00      	cmp	r2, #0
 800c340:	d1f9      	bne.n	800c336 <strcpy+0x2>
 800c342:	4770      	bx	lr

0800c344 <_free_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4605      	mov	r5, r0
 800c348:	2900      	cmp	r1, #0
 800c34a:	d040      	beq.n	800c3ce <_free_r+0x8a>
 800c34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c350:	1f0c      	subs	r4, r1, #4
 800c352:	2b00      	cmp	r3, #0
 800c354:	bfb8      	it	lt
 800c356:	18e4      	addlt	r4, r4, r3
 800c358:	f7ff ff18 	bl	800c18c <__malloc_lock>
 800c35c:	4a1c      	ldr	r2, [pc, #112]	@ (800c3d0 <_free_r+0x8c>)
 800c35e:	6813      	ldr	r3, [r2, #0]
 800c360:	b933      	cbnz	r3, 800c370 <_free_r+0x2c>
 800c362:	6063      	str	r3, [r4, #4]
 800c364:	6014      	str	r4, [r2, #0]
 800c366:	4628      	mov	r0, r5
 800c368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c36c:	f7ff bf14 	b.w	800c198 <__malloc_unlock>
 800c370:	42a3      	cmp	r3, r4
 800c372:	d908      	bls.n	800c386 <_free_r+0x42>
 800c374:	6820      	ldr	r0, [r4, #0]
 800c376:	1821      	adds	r1, r4, r0
 800c378:	428b      	cmp	r3, r1
 800c37a:	bf01      	itttt	eq
 800c37c:	6819      	ldreq	r1, [r3, #0]
 800c37e:	685b      	ldreq	r3, [r3, #4]
 800c380:	1809      	addeq	r1, r1, r0
 800c382:	6021      	streq	r1, [r4, #0]
 800c384:	e7ed      	b.n	800c362 <_free_r+0x1e>
 800c386:	461a      	mov	r2, r3
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	b10b      	cbz	r3, 800c390 <_free_r+0x4c>
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	d9fa      	bls.n	800c386 <_free_r+0x42>
 800c390:	6811      	ldr	r1, [r2, #0]
 800c392:	1850      	adds	r0, r2, r1
 800c394:	42a0      	cmp	r0, r4
 800c396:	d10b      	bne.n	800c3b0 <_free_r+0x6c>
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	4401      	add	r1, r0
 800c39c:	1850      	adds	r0, r2, r1
 800c39e:	4283      	cmp	r3, r0
 800c3a0:	6011      	str	r1, [r2, #0]
 800c3a2:	d1e0      	bne.n	800c366 <_free_r+0x22>
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	4408      	add	r0, r1
 800c3aa:	6010      	str	r0, [r2, #0]
 800c3ac:	6053      	str	r3, [r2, #4]
 800c3ae:	e7da      	b.n	800c366 <_free_r+0x22>
 800c3b0:	d902      	bls.n	800c3b8 <_free_r+0x74>
 800c3b2:	230c      	movs	r3, #12
 800c3b4:	602b      	str	r3, [r5, #0]
 800c3b6:	e7d6      	b.n	800c366 <_free_r+0x22>
 800c3b8:	6820      	ldr	r0, [r4, #0]
 800c3ba:	1821      	adds	r1, r4, r0
 800c3bc:	428b      	cmp	r3, r1
 800c3be:	bf01      	itttt	eq
 800c3c0:	6819      	ldreq	r1, [r3, #0]
 800c3c2:	685b      	ldreq	r3, [r3, #4]
 800c3c4:	1809      	addeq	r1, r1, r0
 800c3c6:	6021      	streq	r1, [r4, #0]
 800c3c8:	6063      	str	r3, [r4, #4]
 800c3ca:	6054      	str	r4, [r2, #4]
 800c3cc:	e7cb      	b.n	800c366 <_free_r+0x22>
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	200004ac 	.word	0x200004ac

0800c3d4 <__ssputs_r>:
 800c3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d8:	461f      	mov	r7, r3
 800c3da:	688e      	ldr	r6, [r1, #8]
 800c3dc:	4682      	mov	sl, r0
 800c3de:	42be      	cmp	r6, r7
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	4690      	mov	r8, r2
 800c3e4:	680b      	ldr	r3, [r1, #0]
 800c3e6:	d82d      	bhi.n	800c444 <__ssputs_r+0x70>
 800c3e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c3f0:	d026      	beq.n	800c440 <__ssputs_r+0x6c>
 800c3f2:	6965      	ldr	r5, [r4, #20]
 800c3f4:	6909      	ldr	r1, [r1, #16]
 800c3f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3fa:	eba3 0901 	sub.w	r9, r3, r1
 800c3fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c402:	1c7b      	adds	r3, r7, #1
 800c404:	444b      	add	r3, r9
 800c406:	106d      	asrs	r5, r5, #1
 800c408:	429d      	cmp	r5, r3
 800c40a:	bf38      	it	cc
 800c40c:	461d      	movcc	r5, r3
 800c40e:	0553      	lsls	r3, r2, #21
 800c410:	d527      	bpl.n	800c462 <__ssputs_r+0x8e>
 800c412:	4629      	mov	r1, r5
 800c414:	f7ff fe3a 	bl	800c08c <_malloc_r>
 800c418:	4606      	mov	r6, r0
 800c41a:	b360      	cbz	r0, 800c476 <__ssputs_r+0xa2>
 800c41c:	464a      	mov	r2, r9
 800c41e:	6921      	ldr	r1, [r4, #16]
 800c420:	f000 fb18 	bl	800ca54 <memcpy>
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	6126      	str	r6, [r4, #16]
 800c432:	444e      	add	r6, r9
 800c434:	6026      	str	r6, [r4, #0]
 800c436:	463e      	mov	r6, r7
 800c438:	6165      	str	r5, [r4, #20]
 800c43a:	eba5 0509 	sub.w	r5, r5, r9
 800c43e:	60a5      	str	r5, [r4, #8]
 800c440:	42be      	cmp	r6, r7
 800c442:	d900      	bls.n	800c446 <__ssputs_r+0x72>
 800c444:	463e      	mov	r6, r7
 800c446:	4632      	mov	r2, r6
 800c448:	4641      	mov	r1, r8
 800c44a:	6820      	ldr	r0, [r4, #0]
 800c44c:	f000 fada 	bl	800ca04 <memmove>
 800c450:	2000      	movs	r0, #0
 800c452:	68a3      	ldr	r3, [r4, #8]
 800c454:	1b9b      	subs	r3, r3, r6
 800c456:	60a3      	str	r3, [r4, #8]
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	4433      	add	r3, r6
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c462:	462a      	mov	r2, r5
 800c464:	f000 faa0 	bl	800c9a8 <_realloc_r>
 800c468:	4606      	mov	r6, r0
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d1e0      	bne.n	800c430 <__ssputs_r+0x5c>
 800c46e:	4650      	mov	r0, sl
 800c470:	6921      	ldr	r1, [r4, #16]
 800c472:	f7ff ff67 	bl	800c344 <_free_r>
 800c476:	230c      	movs	r3, #12
 800c478:	f8ca 3000 	str.w	r3, [sl]
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c486:	81a3      	strh	r3, [r4, #12]
 800c488:	e7e9      	b.n	800c45e <__ssputs_r+0x8a>
	...

0800c48c <_svfiprintf_r>:
 800c48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c490:	4698      	mov	r8, r3
 800c492:	898b      	ldrh	r3, [r1, #12]
 800c494:	4607      	mov	r7, r0
 800c496:	061b      	lsls	r3, r3, #24
 800c498:	460d      	mov	r5, r1
 800c49a:	4614      	mov	r4, r2
 800c49c:	b09d      	sub	sp, #116	@ 0x74
 800c49e:	d510      	bpl.n	800c4c2 <_svfiprintf_r+0x36>
 800c4a0:	690b      	ldr	r3, [r1, #16]
 800c4a2:	b973      	cbnz	r3, 800c4c2 <_svfiprintf_r+0x36>
 800c4a4:	2140      	movs	r1, #64	@ 0x40
 800c4a6:	f7ff fdf1 	bl	800c08c <_malloc_r>
 800c4aa:	6028      	str	r0, [r5, #0]
 800c4ac:	6128      	str	r0, [r5, #16]
 800c4ae:	b930      	cbnz	r0, 800c4be <_svfiprintf_r+0x32>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4b8:	b01d      	add	sp, #116	@ 0x74
 800c4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4be:	2340      	movs	r3, #64	@ 0x40
 800c4c0:	616b      	str	r3, [r5, #20]
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4c6:	2320      	movs	r3, #32
 800c4c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4cc:	2330      	movs	r3, #48	@ 0x30
 800c4ce:	f04f 0901 	mov.w	r9, #1
 800c4d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c670 <_svfiprintf_r+0x1e4>
 800c4da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4de:	4623      	mov	r3, r4
 800c4e0:	469a      	mov	sl, r3
 800c4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4e6:	b10a      	cbz	r2, 800c4ec <_svfiprintf_r+0x60>
 800c4e8:	2a25      	cmp	r2, #37	@ 0x25
 800c4ea:	d1f9      	bne.n	800c4e0 <_svfiprintf_r+0x54>
 800c4ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c4f0:	d00b      	beq.n	800c50a <_svfiprintf_r+0x7e>
 800c4f2:	465b      	mov	r3, fp
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff ff6b 	bl	800c3d4 <__ssputs_r>
 800c4fe:	3001      	adds	r0, #1
 800c500:	f000 80a7 	beq.w	800c652 <_svfiprintf_r+0x1c6>
 800c504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c506:	445a      	add	r2, fp
 800c508:	9209      	str	r2, [sp, #36]	@ 0x24
 800c50a:	f89a 3000 	ldrb.w	r3, [sl]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 809f 	beq.w	800c652 <_svfiprintf_r+0x1c6>
 800c514:	2300      	movs	r3, #0
 800c516:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c51a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c51e:	f10a 0a01 	add.w	sl, sl, #1
 800c522:	9304      	str	r3, [sp, #16]
 800c524:	9307      	str	r3, [sp, #28]
 800c526:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c52a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c52c:	4654      	mov	r4, sl
 800c52e:	2205      	movs	r2, #5
 800c530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c534:	484e      	ldr	r0, [pc, #312]	@ (800c670 <_svfiprintf_r+0x1e4>)
 800c536:	f000 fa7f 	bl	800ca38 <memchr>
 800c53a:	9a04      	ldr	r2, [sp, #16]
 800c53c:	b9d8      	cbnz	r0, 800c576 <_svfiprintf_r+0xea>
 800c53e:	06d0      	lsls	r0, r2, #27
 800c540:	bf44      	itt	mi
 800c542:	2320      	movmi	r3, #32
 800c544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c548:	0711      	lsls	r1, r2, #28
 800c54a:	bf44      	itt	mi
 800c54c:	232b      	movmi	r3, #43	@ 0x2b
 800c54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c552:	f89a 3000 	ldrb.w	r3, [sl]
 800c556:	2b2a      	cmp	r3, #42	@ 0x2a
 800c558:	d015      	beq.n	800c586 <_svfiprintf_r+0xfa>
 800c55a:	4654      	mov	r4, sl
 800c55c:	2000      	movs	r0, #0
 800c55e:	f04f 0c0a 	mov.w	ip, #10
 800c562:	9a07      	ldr	r2, [sp, #28]
 800c564:	4621      	mov	r1, r4
 800c566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c56a:	3b30      	subs	r3, #48	@ 0x30
 800c56c:	2b09      	cmp	r3, #9
 800c56e:	d94b      	bls.n	800c608 <_svfiprintf_r+0x17c>
 800c570:	b1b0      	cbz	r0, 800c5a0 <_svfiprintf_r+0x114>
 800c572:	9207      	str	r2, [sp, #28]
 800c574:	e014      	b.n	800c5a0 <_svfiprintf_r+0x114>
 800c576:	eba0 0308 	sub.w	r3, r0, r8
 800c57a:	fa09 f303 	lsl.w	r3, r9, r3
 800c57e:	4313      	orrs	r3, r2
 800c580:	46a2      	mov	sl, r4
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	e7d2      	b.n	800c52c <_svfiprintf_r+0xa0>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	1d19      	adds	r1, r3, #4
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	9103      	str	r1, [sp, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bfbb      	ittet	lt
 800c592:	425b      	neglt	r3, r3
 800c594:	f042 0202 	orrlt.w	r2, r2, #2
 800c598:	9307      	strge	r3, [sp, #28]
 800c59a:	9307      	strlt	r3, [sp, #28]
 800c59c:	bfb8      	it	lt
 800c59e:	9204      	strlt	r2, [sp, #16]
 800c5a0:	7823      	ldrb	r3, [r4, #0]
 800c5a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5a4:	d10a      	bne.n	800c5bc <_svfiprintf_r+0x130>
 800c5a6:	7863      	ldrb	r3, [r4, #1]
 800c5a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5aa:	d132      	bne.n	800c612 <_svfiprintf_r+0x186>
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	3402      	adds	r4, #2
 800c5b0:	1d1a      	adds	r2, r3, #4
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	9203      	str	r2, [sp, #12]
 800c5b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5ba:	9305      	str	r3, [sp, #20]
 800c5bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c674 <_svfiprintf_r+0x1e8>
 800c5c0:	2203      	movs	r2, #3
 800c5c2:	4650      	mov	r0, sl
 800c5c4:	7821      	ldrb	r1, [r4, #0]
 800c5c6:	f000 fa37 	bl	800ca38 <memchr>
 800c5ca:	b138      	cbz	r0, 800c5dc <_svfiprintf_r+0x150>
 800c5cc:	2240      	movs	r2, #64	@ 0x40
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	eba0 000a 	sub.w	r0, r0, sl
 800c5d4:	4082      	lsls	r2, r0
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	3401      	adds	r4, #1
 800c5da:	9304      	str	r3, [sp, #16]
 800c5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e0:	2206      	movs	r2, #6
 800c5e2:	4825      	ldr	r0, [pc, #148]	@ (800c678 <_svfiprintf_r+0x1ec>)
 800c5e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5e8:	f000 fa26 	bl	800ca38 <memchr>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d036      	beq.n	800c65e <_svfiprintf_r+0x1d2>
 800c5f0:	4b22      	ldr	r3, [pc, #136]	@ (800c67c <_svfiprintf_r+0x1f0>)
 800c5f2:	bb1b      	cbnz	r3, 800c63c <_svfiprintf_r+0x1b0>
 800c5f4:	9b03      	ldr	r3, [sp, #12]
 800c5f6:	3307      	adds	r3, #7
 800c5f8:	f023 0307 	bic.w	r3, r3, #7
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	9303      	str	r3, [sp, #12]
 800c600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c602:	4433      	add	r3, r6
 800c604:	9309      	str	r3, [sp, #36]	@ 0x24
 800c606:	e76a      	b.n	800c4de <_svfiprintf_r+0x52>
 800c608:	460c      	mov	r4, r1
 800c60a:	2001      	movs	r0, #1
 800c60c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c610:	e7a8      	b.n	800c564 <_svfiprintf_r+0xd8>
 800c612:	2300      	movs	r3, #0
 800c614:	f04f 0c0a 	mov.w	ip, #10
 800c618:	4619      	mov	r1, r3
 800c61a:	3401      	adds	r4, #1
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	4620      	mov	r0, r4
 800c620:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c624:	3a30      	subs	r2, #48	@ 0x30
 800c626:	2a09      	cmp	r2, #9
 800c628:	d903      	bls.n	800c632 <_svfiprintf_r+0x1a6>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d0c6      	beq.n	800c5bc <_svfiprintf_r+0x130>
 800c62e:	9105      	str	r1, [sp, #20]
 800c630:	e7c4      	b.n	800c5bc <_svfiprintf_r+0x130>
 800c632:	4604      	mov	r4, r0
 800c634:	2301      	movs	r3, #1
 800c636:	fb0c 2101 	mla	r1, ip, r1, r2
 800c63a:	e7f0      	b.n	800c61e <_svfiprintf_r+0x192>
 800c63c:	ab03      	add	r3, sp, #12
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	462a      	mov	r2, r5
 800c642:	4638      	mov	r0, r7
 800c644:	4b0e      	ldr	r3, [pc, #56]	@ (800c680 <_svfiprintf_r+0x1f4>)
 800c646:	a904      	add	r1, sp, #16
 800c648:	f3af 8000 	nop.w
 800c64c:	1c42      	adds	r2, r0, #1
 800c64e:	4606      	mov	r6, r0
 800c650:	d1d6      	bne.n	800c600 <_svfiprintf_r+0x174>
 800c652:	89ab      	ldrh	r3, [r5, #12]
 800c654:	065b      	lsls	r3, r3, #25
 800c656:	f53f af2d 	bmi.w	800c4b4 <_svfiprintf_r+0x28>
 800c65a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c65c:	e72c      	b.n	800c4b8 <_svfiprintf_r+0x2c>
 800c65e:	ab03      	add	r3, sp, #12
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	462a      	mov	r2, r5
 800c664:	4638      	mov	r0, r7
 800c666:	4b06      	ldr	r3, [pc, #24]	@ (800c680 <_svfiprintf_r+0x1f4>)
 800c668:	a904      	add	r1, sp, #16
 800c66a:	f000 f87d 	bl	800c768 <_printf_i>
 800c66e:	e7ed      	b.n	800c64c <_svfiprintf_r+0x1c0>
 800c670:	0800da5b 	.word	0x0800da5b
 800c674:	0800da61 	.word	0x0800da61
 800c678:	0800da65 	.word	0x0800da65
 800c67c:	00000000 	.word	0x00000000
 800c680:	0800c3d5 	.word	0x0800c3d5

0800c684 <_printf_common>:
 800c684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c688:	4616      	mov	r6, r2
 800c68a:	4698      	mov	r8, r3
 800c68c:	688a      	ldr	r2, [r1, #8]
 800c68e:	690b      	ldr	r3, [r1, #16]
 800c690:	4607      	mov	r7, r0
 800c692:	4293      	cmp	r3, r2
 800c694:	bfb8      	it	lt
 800c696:	4613      	movlt	r3, r2
 800c698:	6033      	str	r3, [r6, #0]
 800c69a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c69e:	460c      	mov	r4, r1
 800c6a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6a4:	b10a      	cbz	r2, 800c6aa <_printf_common+0x26>
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	6033      	str	r3, [r6, #0]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	0699      	lsls	r1, r3, #26
 800c6ae:	bf42      	ittt	mi
 800c6b0:	6833      	ldrmi	r3, [r6, #0]
 800c6b2:	3302      	addmi	r3, #2
 800c6b4:	6033      	strmi	r3, [r6, #0]
 800c6b6:	6825      	ldr	r5, [r4, #0]
 800c6b8:	f015 0506 	ands.w	r5, r5, #6
 800c6bc:	d106      	bne.n	800c6cc <_printf_common+0x48>
 800c6be:	f104 0a19 	add.w	sl, r4, #25
 800c6c2:	68e3      	ldr	r3, [r4, #12]
 800c6c4:	6832      	ldr	r2, [r6, #0]
 800c6c6:	1a9b      	subs	r3, r3, r2
 800c6c8:	42ab      	cmp	r3, r5
 800c6ca:	dc2b      	bgt.n	800c724 <_printf_common+0xa0>
 800c6cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6d0:	6822      	ldr	r2, [r4, #0]
 800c6d2:	3b00      	subs	r3, #0
 800c6d4:	bf18      	it	ne
 800c6d6:	2301      	movne	r3, #1
 800c6d8:	0692      	lsls	r2, r2, #26
 800c6da:	d430      	bmi.n	800c73e <_printf_common+0xba>
 800c6dc:	4641      	mov	r1, r8
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6e4:	47c8      	blx	r9
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	d023      	beq.n	800c732 <_printf_common+0xae>
 800c6ea:	6823      	ldr	r3, [r4, #0]
 800c6ec:	6922      	ldr	r2, [r4, #16]
 800c6ee:	f003 0306 	and.w	r3, r3, #6
 800c6f2:	2b04      	cmp	r3, #4
 800c6f4:	bf14      	ite	ne
 800c6f6:	2500      	movne	r5, #0
 800c6f8:	6833      	ldreq	r3, [r6, #0]
 800c6fa:	f04f 0600 	mov.w	r6, #0
 800c6fe:	bf08      	it	eq
 800c700:	68e5      	ldreq	r5, [r4, #12]
 800c702:	f104 041a 	add.w	r4, r4, #26
 800c706:	bf08      	it	eq
 800c708:	1aed      	subeq	r5, r5, r3
 800c70a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c70e:	bf08      	it	eq
 800c710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c714:	4293      	cmp	r3, r2
 800c716:	bfc4      	itt	gt
 800c718:	1a9b      	subgt	r3, r3, r2
 800c71a:	18ed      	addgt	r5, r5, r3
 800c71c:	42b5      	cmp	r5, r6
 800c71e:	d11a      	bne.n	800c756 <_printf_common+0xd2>
 800c720:	2000      	movs	r0, #0
 800c722:	e008      	b.n	800c736 <_printf_common+0xb2>
 800c724:	2301      	movs	r3, #1
 800c726:	4652      	mov	r2, sl
 800c728:	4641      	mov	r1, r8
 800c72a:	4638      	mov	r0, r7
 800c72c:	47c8      	blx	r9
 800c72e:	3001      	adds	r0, #1
 800c730:	d103      	bne.n	800c73a <_printf_common+0xb6>
 800c732:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73a:	3501      	adds	r5, #1
 800c73c:	e7c1      	b.n	800c6c2 <_printf_common+0x3e>
 800c73e:	2030      	movs	r0, #48	@ 0x30
 800c740:	18e1      	adds	r1, r4, r3
 800c742:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c746:	1c5a      	adds	r2, r3, #1
 800c748:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c74c:	4422      	add	r2, r4
 800c74e:	3302      	adds	r3, #2
 800c750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c754:	e7c2      	b.n	800c6dc <_printf_common+0x58>
 800c756:	2301      	movs	r3, #1
 800c758:	4622      	mov	r2, r4
 800c75a:	4641      	mov	r1, r8
 800c75c:	4638      	mov	r0, r7
 800c75e:	47c8      	blx	r9
 800c760:	3001      	adds	r0, #1
 800c762:	d0e6      	beq.n	800c732 <_printf_common+0xae>
 800c764:	3601      	adds	r6, #1
 800c766:	e7d9      	b.n	800c71c <_printf_common+0x98>

0800c768 <_printf_i>:
 800c768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c76c:	7e0f      	ldrb	r7, [r1, #24]
 800c76e:	4691      	mov	r9, r2
 800c770:	2f78      	cmp	r7, #120	@ 0x78
 800c772:	4680      	mov	r8, r0
 800c774:	460c      	mov	r4, r1
 800c776:	469a      	mov	sl, r3
 800c778:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c77a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c77e:	d807      	bhi.n	800c790 <_printf_i+0x28>
 800c780:	2f62      	cmp	r7, #98	@ 0x62
 800c782:	d80a      	bhi.n	800c79a <_printf_i+0x32>
 800c784:	2f00      	cmp	r7, #0
 800c786:	f000 80d3 	beq.w	800c930 <_printf_i+0x1c8>
 800c78a:	2f58      	cmp	r7, #88	@ 0x58
 800c78c:	f000 80ba 	beq.w	800c904 <_printf_i+0x19c>
 800c790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c794:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c798:	e03a      	b.n	800c810 <_printf_i+0xa8>
 800c79a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c79e:	2b15      	cmp	r3, #21
 800c7a0:	d8f6      	bhi.n	800c790 <_printf_i+0x28>
 800c7a2:	a101      	add	r1, pc, #4	@ (adr r1, 800c7a8 <_printf_i+0x40>)
 800c7a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7a8:	0800c801 	.word	0x0800c801
 800c7ac:	0800c815 	.word	0x0800c815
 800c7b0:	0800c791 	.word	0x0800c791
 800c7b4:	0800c791 	.word	0x0800c791
 800c7b8:	0800c791 	.word	0x0800c791
 800c7bc:	0800c791 	.word	0x0800c791
 800c7c0:	0800c815 	.word	0x0800c815
 800c7c4:	0800c791 	.word	0x0800c791
 800c7c8:	0800c791 	.word	0x0800c791
 800c7cc:	0800c791 	.word	0x0800c791
 800c7d0:	0800c791 	.word	0x0800c791
 800c7d4:	0800c917 	.word	0x0800c917
 800c7d8:	0800c83f 	.word	0x0800c83f
 800c7dc:	0800c8d1 	.word	0x0800c8d1
 800c7e0:	0800c791 	.word	0x0800c791
 800c7e4:	0800c791 	.word	0x0800c791
 800c7e8:	0800c939 	.word	0x0800c939
 800c7ec:	0800c791 	.word	0x0800c791
 800c7f0:	0800c83f 	.word	0x0800c83f
 800c7f4:	0800c791 	.word	0x0800c791
 800c7f8:	0800c791 	.word	0x0800c791
 800c7fc:	0800c8d9 	.word	0x0800c8d9
 800c800:	6833      	ldr	r3, [r6, #0]
 800c802:	1d1a      	adds	r2, r3, #4
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6032      	str	r2, [r6, #0]
 800c808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c80c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c810:	2301      	movs	r3, #1
 800c812:	e09e      	b.n	800c952 <_printf_i+0x1ea>
 800c814:	6833      	ldr	r3, [r6, #0]
 800c816:	6820      	ldr	r0, [r4, #0]
 800c818:	1d19      	adds	r1, r3, #4
 800c81a:	6031      	str	r1, [r6, #0]
 800c81c:	0606      	lsls	r6, r0, #24
 800c81e:	d501      	bpl.n	800c824 <_printf_i+0xbc>
 800c820:	681d      	ldr	r5, [r3, #0]
 800c822:	e003      	b.n	800c82c <_printf_i+0xc4>
 800c824:	0645      	lsls	r5, r0, #25
 800c826:	d5fb      	bpl.n	800c820 <_printf_i+0xb8>
 800c828:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	da03      	bge.n	800c838 <_printf_i+0xd0>
 800c830:	232d      	movs	r3, #45	@ 0x2d
 800c832:	426d      	negs	r5, r5
 800c834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c838:	230a      	movs	r3, #10
 800c83a:	4859      	ldr	r0, [pc, #356]	@ (800c9a0 <_printf_i+0x238>)
 800c83c:	e011      	b.n	800c862 <_printf_i+0xfa>
 800c83e:	6821      	ldr	r1, [r4, #0]
 800c840:	6833      	ldr	r3, [r6, #0]
 800c842:	0608      	lsls	r0, r1, #24
 800c844:	f853 5b04 	ldr.w	r5, [r3], #4
 800c848:	d402      	bmi.n	800c850 <_printf_i+0xe8>
 800c84a:	0649      	lsls	r1, r1, #25
 800c84c:	bf48      	it	mi
 800c84e:	b2ad      	uxthmi	r5, r5
 800c850:	2f6f      	cmp	r7, #111	@ 0x6f
 800c852:	6033      	str	r3, [r6, #0]
 800c854:	bf14      	ite	ne
 800c856:	230a      	movne	r3, #10
 800c858:	2308      	moveq	r3, #8
 800c85a:	4851      	ldr	r0, [pc, #324]	@ (800c9a0 <_printf_i+0x238>)
 800c85c:	2100      	movs	r1, #0
 800c85e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c862:	6866      	ldr	r6, [r4, #4]
 800c864:	2e00      	cmp	r6, #0
 800c866:	bfa8      	it	ge
 800c868:	6821      	ldrge	r1, [r4, #0]
 800c86a:	60a6      	str	r6, [r4, #8]
 800c86c:	bfa4      	itt	ge
 800c86e:	f021 0104 	bicge.w	r1, r1, #4
 800c872:	6021      	strge	r1, [r4, #0]
 800c874:	b90d      	cbnz	r5, 800c87a <_printf_i+0x112>
 800c876:	2e00      	cmp	r6, #0
 800c878:	d04b      	beq.n	800c912 <_printf_i+0x1aa>
 800c87a:	4616      	mov	r6, r2
 800c87c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c880:	fb03 5711 	mls	r7, r3, r1, r5
 800c884:	5dc7      	ldrb	r7, [r0, r7]
 800c886:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c88a:	462f      	mov	r7, r5
 800c88c:	42bb      	cmp	r3, r7
 800c88e:	460d      	mov	r5, r1
 800c890:	d9f4      	bls.n	800c87c <_printf_i+0x114>
 800c892:	2b08      	cmp	r3, #8
 800c894:	d10b      	bne.n	800c8ae <_printf_i+0x146>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	07df      	lsls	r7, r3, #31
 800c89a:	d508      	bpl.n	800c8ae <_printf_i+0x146>
 800c89c:	6923      	ldr	r3, [r4, #16]
 800c89e:	6861      	ldr	r1, [r4, #4]
 800c8a0:	4299      	cmp	r1, r3
 800c8a2:	bfde      	ittt	le
 800c8a4:	2330      	movle	r3, #48	@ 0x30
 800c8a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8aa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c8ae:	1b92      	subs	r2, r2, r6
 800c8b0:	6122      	str	r2, [r4, #16]
 800c8b2:	464b      	mov	r3, r9
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	4640      	mov	r0, r8
 800c8b8:	f8cd a000 	str.w	sl, [sp]
 800c8bc:	aa03      	add	r2, sp, #12
 800c8be:	f7ff fee1 	bl	800c684 <_printf_common>
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	d14a      	bne.n	800c95c <_printf_i+0x1f4>
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8ca:	b004      	add	sp, #16
 800c8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	f043 0320 	orr.w	r3, r3, #32
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	2778      	movs	r7, #120	@ 0x78
 800c8da:	4832      	ldr	r0, [pc, #200]	@ (800c9a4 <_printf_i+0x23c>)
 800c8dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	6831      	ldr	r1, [r6, #0]
 800c8e4:	061f      	lsls	r7, r3, #24
 800c8e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8ea:	d402      	bmi.n	800c8f2 <_printf_i+0x18a>
 800c8ec:	065f      	lsls	r7, r3, #25
 800c8ee:	bf48      	it	mi
 800c8f0:	b2ad      	uxthmi	r5, r5
 800c8f2:	6031      	str	r1, [r6, #0]
 800c8f4:	07d9      	lsls	r1, r3, #31
 800c8f6:	bf44      	itt	mi
 800c8f8:	f043 0320 	orrmi.w	r3, r3, #32
 800c8fc:	6023      	strmi	r3, [r4, #0]
 800c8fe:	b11d      	cbz	r5, 800c908 <_printf_i+0x1a0>
 800c900:	2310      	movs	r3, #16
 800c902:	e7ab      	b.n	800c85c <_printf_i+0xf4>
 800c904:	4826      	ldr	r0, [pc, #152]	@ (800c9a0 <_printf_i+0x238>)
 800c906:	e7e9      	b.n	800c8dc <_printf_i+0x174>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	f023 0320 	bic.w	r3, r3, #32
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	e7f6      	b.n	800c900 <_printf_i+0x198>
 800c912:	4616      	mov	r6, r2
 800c914:	e7bd      	b.n	800c892 <_printf_i+0x12a>
 800c916:	6833      	ldr	r3, [r6, #0]
 800c918:	6825      	ldr	r5, [r4, #0]
 800c91a:	1d18      	adds	r0, r3, #4
 800c91c:	6961      	ldr	r1, [r4, #20]
 800c91e:	6030      	str	r0, [r6, #0]
 800c920:	062e      	lsls	r6, r5, #24
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	d501      	bpl.n	800c92a <_printf_i+0x1c2>
 800c926:	6019      	str	r1, [r3, #0]
 800c928:	e002      	b.n	800c930 <_printf_i+0x1c8>
 800c92a:	0668      	lsls	r0, r5, #25
 800c92c:	d5fb      	bpl.n	800c926 <_printf_i+0x1be>
 800c92e:	8019      	strh	r1, [r3, #0]
 800c930:	2300      	movs	r3, #0
 800c932:	4616      	mov	r6, r2
 800c934:	6123      	str	r3, [r4, #16]
 800c936:	e7bc      	b.n	800c8b2 <_printf_i+0x14a>
 800c938:	6833      	ldr	r3, [r6, #0]
 800c93a:	2100      	movs	r1, #0
 800c93c:	1d1a      	adds	r2, r3, #4
 800c93e:	6032      	str	r2, [r6, #0]
 800c940:	681e      	ldr	r6, [r3, #0]
 800c942:	6862      	ldr	r2, [r4, #4]
 800c944:	4630      	mov	r0, r6
 800c946:	f000 f877 	bl	800ca38 <memchr>
 800c94a:	b108      	cbz	r0, 800c950 <_printf_i+0x1e8>
 800c94c:	1b80      	subs	r0, r0, r6
 800c94e:	6060      	str	r0, [r4, #4]
 800c950:	6863      	ldr	r3, [r4, #4]
 800c952:	6123      	str	r3, [r4, #16]
 800c954:	2300      	movs	r3, #0
 800c956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c95a:	e7aa      	b.n	800c8b2 <_printf_i+0x14a>
 800c95c:	4632      	mov	r2, r6
 800c95e:	4649      	mov	r1, r9
 800c960:	4640      	mov	r0, r8
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	47d0      	blx	sl
 800c966:	3001      	adds	r0, #1
 800c968:	d0ad      	beq.n	800c8c6 <_printf_i+0x15e>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	079b      	lsls	r3, r3, #30
 800c96e:	d413      	bmi.n	800c998 <_printf_i+0x230>
 800c970:	68e0      	ldr	r0, [r4, #12]
 800c972:	9b03      	ldr	r3, [sp, #12]
 800c974:	4298      	cmp	r0, r3
 800c976:	bfb8      	it	lt
 800c978:	4618      	movlt	r0, r3
 800c97a:	e7a6      	b.n	800c8ca <_printf_i+0x162>
 800c97c:	2301      	movs	r3, #1
 800c97e:	4632      	mov	r2, r6
 800c980:	4649      	mov	r1, r9
 800c982:	4640      	mov	r0, r8
 800c984:	47d0      	blx	sl
 800c986:	3001      	adds	r0, #1
 800c988:	d09d      	beq.n	800c8c6 <_printf_i+0x15e>
 800c98a:	3501      	adds	r5, #1
 800c98c:	68e3      	ldr	r3, [r4, #12]
 800c98e:	9903      	ldr	r1, [sp, #12]
 800c990:	1a5b      	subs	r3, r3, r1
 800c992:	42ab      	cmp	r3, r5
 800c994:	dcf2      	bgt.n	800c97c <_printf_i+0x214>
 800c996:	e7eb      	b.n	800c970 <_printf_i+0x208>
 800c998:	2500      	movs	r5, #0
 800c99a:	f104 0619 	add.w	r6, r4, #25
 800c99e:	e7f5      	b.n	800c98c <_printf_i+0x224>
 800c9a0:	0800da6c 	.word	0x0800da6c
 800c9a4:	0800da7d 	.word	0x0800da7d

0800c9a8 <_realloc_r>:
 800c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ac:	4680      	mov	r8, r0
 800c9ae:	4615      	mov	r5, r2
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	b921      	cbnz	r1, 800c9be <_realloc_r+0x16>
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ba:	f7ff bb67 	b.w	800c08c <_malloc_r>
 800c9be:	b92a      	cbnz	r2, 800c9cc <_realloc_r+0x24>
 800c9c0:	f7ff fcc0 	bl	800c344 <_free_r>
 800c9c4:	2400      	movs	r4, #0
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9cc:	f000 f850 	bl	800ca70 <_malloc_usable_size_r>
 800c9d0:	4285      	cmp	r5, r0
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	d802      	bhi.n	800c9dc <_realloc_r+0x34>
 800c9d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c9da:	d8f4      	bhi.n	800c9c6 <_realloc_r+0x1e>
 800c9dc:	4629      	mov	r1, r5
 800c9de:	4640      	mov	r0, r8
 800c9e0:	f7ff fb54 	bl	800c08c <_malloc_r>
 800c9e4:	4607      	mov	r7, r0
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d0ec      	beq.n	800c9c4 <_realloc_r+0x1c>
 800c9ea:	42b5      	cmp	r5, r6
 800c9ec:	462a      	mov	r2, r5
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	bf28      	it	cs
 800c9f2:	4632      	movcs	r2, r6
 800c9f4:	f000 f82e 	bl	800ca54 <memcpy>
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	4640      	mov	r0, r8
 800c9fc:	f7ff fca2 	bl	800c344 <_free_r>
 800ca00:	463c      	mov	r4, r7
 800ca02:	e7e0      	b.n	800c9c6 <_realloc_r+0x1e>

0800ca04 <memmove>:
 800ca04:	4288      	cmp	r0, r1
 800ca06:	b510      	push	{r4, lr}
 800ca08:	eb01 0402 	add.w	r4, r1, r2
 800ca0c:	d902      	bls.n	800ca14 <memmove+0x10>
 800ca0e:	4284      	cmp	r4, r0
 800ca10:	4623      	mov	r3, r4
 800ca12:	d807      	bhi.n	800ca24 <memmove+0x20>
 800ca14:	1e43      	subs	r3, r0, #1
 800ca16:	42a1      	cmp	r1, r4
 800ca18:	d008      	beq.n	800ca2c <memmove+0x28>
 800ca1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca22:	e7f8      	b.n	800ca16 <memmove+0x12>
 800ca24:	4601      	mov	r1, r0
 800ca26:	4402      	add	r2, r0
 800ca28:	428a      	cmp	r2, r1
 800ca2a:	d100      	bne.n	800ca2e <memmove+0x2a>
 800ca2c:	bd10      	pop	{r4, pc}
 800ca2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca36:	e7f7      	b.n	800ca28 <memmove+0x24>

0800ca38 <memchr>:
 800ca38:	4603      	mov	r3, r0
 800ca3a:	b510      	push	{r4, lr}
 800ca3c:	b2c9      	uxtb	r1, r1
 800ca3e:	4402      	add	r2, r0
 800ca40:	4293      	cmp	r3, r2
 800ca42:	4618      	mov	r0, r3
 800ca44:	d101      	bne.n	800ca4a <memchr+0x12>
 800ca46:	2000      	movs	r0, #0
 800ca48:	e003      	b.n	800ca52 <memchr+0x1a>
 800ca4a:	7804      	ldrb	r4, [r0, #0]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	428c      	cmp	r4, r1
 800ca50:	d1f6      	bne.n	800ca40 <memchr+0x8>
 800ca52:	bd10      	pop	{r4, pc}

0800ca54 <memcpy>:
 800ca54:	440a      	add	r2, r1
 800ca56:	4291      	cmp	r1, r2
 800ca58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ca5c:	d100      	bne.n	800ca60 <memcpy+0xc>
 800ca5e:	4770      	bx	lr
 800ca60:	b510      	push	{r4, lr}
 800ca62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca66:	4291      	cmp	r1, r2
 800ca68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca6c:	d1f9      	bne.n	800ca62 <memcpy+0xe>
 800ca6e:	bd10      	pop	{r4, pc}

0800ca70 <_malloc_usable_size_r>:
 800ca70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca74:	1f18      	subs	r0, r3, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	bfbc      	itt	lt
 800ca7a:	580b      	ldrlt	r3, [r1, r0]
 800ca7c:	18c0      	addlt	r0, r0, r3
 800ca7e:	4770      	bx	lr

0800ca80 <_init>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	bf00      	nop
 800ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca86:	bc08      	pop	{r3}
 800ca88:	469e      	mov	lr, r3
 800ca8a:	4770      	bx	lr

0800ca8c <_fini>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	bf00      	nop
 800ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca92:	bc08      	pop	{r3}
 800ca94:	469e      	mov	lr, r3
 800ca96:	4770      	bx	lr
