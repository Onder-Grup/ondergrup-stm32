
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d50c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  0800d6f0  0800d6f0  0001d6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e660  0800e660  00020a14  2**0
                  CONTENTS
  4 .ARM          00000000  0800e660  0800e660  00020a14  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e660  0800e660  00020a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e660  0800e660  0001e660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e664  0800e664  0001e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a14  20000000  0800e668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000a14  0800f07c  00020a14  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff0  0800f07c  00020ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a3d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001362b  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000269e  00000000  00000000  000340ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0c  00000000  00000000  00037910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef5  00000000  00000000  0003871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018964  00000000  00000000  00053611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd63  00000000  00000000  0006bf75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005200  00000000  00000000  0010bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a14 	.word	0x20000a14
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d6d8 	.word	0x0800d6d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a18 	.word	0x20000a18
 8000220:	0800d6d8 	.word	0x0800d6d8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f00c fe1d 	bl	800ce9c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f00b ffe8 	bl	800c24c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f008 ff18 	bl	80090b4 <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f00c fdfb 	bl	800ce9c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00c fdeb 	bl	800ce9c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f00b ffb3 	bl	800c24c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f008 fee3 	bl	80090b4 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f00b ff9f 	bl	800c24c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f008 fecf 	bl	80090b4 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800d73c 	.word	0x0800d73c
 8000324:	0800d74c 	.word	0x0800d74c
 8000328:	20000a30 	.word	0x20000a30
 800032c:	0800d7c8 	.word	0x0800d7c8
 8000330:	0800d76c 	.word	0x0800d76c
 8000334:	0800d7dc 	.word	0x0800d7dc

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f00a fa93 	bl	800a8a6 <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f00a fa7f 	bl	800a88c <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f009 fde2 	bl	8009fcc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000b54 	.word	0x20000b54
 8000414:	20000b2a 	.word	0x20000b2a

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f00a fa23 	bl	800a8a6 <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f00a fa0f 	bl	800a88c <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f009 fd72 	bl	8009fcc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000b54 	.word	0x20000b54
 80004f4:	20000b2a 	.word	0x20000b2a

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f00a f99d 	bl	800a8a6 <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f00a f989 	bl	800a88c <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f009 fcec 	bl	8009fcc <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000b54 	.word	0x20000b54
 8000600:	20000b2a 	.word	0x20000b2a

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f86d 	bl	8000700 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f008 fcf2 	bl	80090b4 <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9d 	bl	800062a <lcd_gotoxy>

    lcd_send_char(' ');
 80006f0:	2020      	movs	r0, #32
 80006f2:	f7ff ff17 	bl	8000524 <lcd_send_char>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <lcd_backlight+0x20>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe11 	bl	8000338 <lcd_send_cmd>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000b2a 	.word	0x20000b2a

08000724 <lcd_cursor>:

void lcd_cursor(int state) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff fe00 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fdfd 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800073e:	e002      	b.n	8000746 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fdf9 	bl	8000338 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <__NVIC_SystemReset+0x24>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000762:	4904      	ldr	r1, [pc, #16]	; (8000774 <__NVIC_SystemReset+0x24>)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x28>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <__NVIC_SystemReset+0x20>
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	05fa0004 	.word	0x05fa0004

0800077c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3301      	adds	r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f00c fa8e 	bl	800ccb0 <malloc>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <copyText+0x2a>
        strcpy(result, text);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f00c fbef 	bl	800cf84 <strcpy>
    }
    return result;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007ba:	20c8      	movs	r0, #200	; 0xc8
 80007bc:	f008 fc7a 	bl	80090b4 <HAL_Delay>
	lcd_clear();
 80007c0:	f7ff ff7e 	bl	80006c0 <lcd_clear>
	if(type == 1 && page == 0) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d143      	bne.n	8000852 <printTemplate+0xa2>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d140      	bne.n	8000852 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007d0:	4a9d      	ldr	r2, [pc, #628]	; (8000a48 <printTemplate+0x298>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff47 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 80007da:	4a9c      	ldr	r2, [pc, #624]	; (8000a4c <printTemplate+0x29c>)
 80007dc:	2103      	movs	r1, #3
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff42 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 80007e4:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <printTemplate+0x2a0>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff3d 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 80007ee:	4a99      	ldr	r2, [pc, #612]	; (8000a54 <printTemplate+0x2a4>)
 80007f0:	2105      	movs	r1, #5
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 80007f8:	4a97      	ldr	r2, [pc, #604]	; (8000a58 <printTemplate+0x2a8>)
 80007fa:	2106      	movs	r1, #6
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8000802:	4a96      	ldr	r2, [pc, #600]	; (8000a5c <printTemplate+0x2ac>)
 8000804:	2107      	movs	r1, #7
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 800080c:	4a94      	ldr	r2, [pc, #592]	; (8000a60 <printTemplate+0x2b0>)
 800080e:	210a      	movs	r1, #10
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff29 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8000816:	4a93      	ldr	r2, [pc, #588]	; (8000a64 <printTemplate+0x2b4>)
 8000818:	210b      	movs	r1, #11
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff24 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8000820:	4a91      	ldr	r2, [pc, #580]	; (8000a68 <printTemplate+0x2b8>)
 8000822:	210c      	movs	r1, #12
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff1f 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 800082a:	4a90      	ldr	r2, [pc, #576]	; (8000a6c <printTemplate+0x2bc>)
 800082c:	210d      	movs	r1, #13
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff1a 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8000834:	4a8e      	ldr	r2, [pc, #568]	; (8000a70 <printTemplate+0x2c0>)
 8000836:	210e      	movs	r1, #14
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff15 	bl	8000668 <lcd_print>
		lcd_print(1, 5, machineID);
 800083e:	4a8d      	ldr	r2, [pc, #564]	; (8000a74 <printTemplate+0x2c4>)
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff10 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000850:	e0f5      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 2) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d178      	bne.n	800094a <printTemplate+0x19a>
		if(page == 1) {
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d114      	bne.n	8000888 <printTemplate+0xd8>
			lcd_clear();
 800085e:	f7ff ff2f 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f008 fc26 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000868:	4a83      	ldr	r2, [pc, #524]	; (8000a78 <printTemplate+0x2c8>)
 800086a:	2101      	movs	r1, #1
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fefb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000872:	4a82      	ldr	r2, [pc, #520]	; (8000a7c <printTemplate+0x2cc>)
 8000874:	2107      	movs	r1, #7
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fef6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800087c:	4a80      	ldr	r2, [pc, #512]	; (8000a80 <printTemplate+0x2d0>)
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fef1 	bl	8000668 <lcd_print>
}
 8000886:	e0da      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d114      	bne.n	80008b8 <printTemplate+0x108>
			lcd_clear();
 800088e:	f7ff ff17 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f008 fc0e 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000898:	4a77      	ldr	r2, [pc, #476]	; (8000a78 <printTemplate+0x2c8>)
 800089a:	2101      	movs	r1, #1
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fee3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008a2:	4a76      	ldr	r2, [pc, #472]	; (8000a7c <printTemplate+0x2cc>)
 80008a4:	2107      	movs	r1, #7
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fede 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008ac:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <printTemplate+0x2d4>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fed9 	bl	8000668 <lcd_print>
}
 80008b6:	e0c2      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d114      	bne.n	80008e8 <printTemplate+0x138>
			lcd_clear();
 80008be:	f7ff feff 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f008 fbf6 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008c8:	4a6b      	ldr	r2, [pc, #428]	; (8000a78 <printTemplate+0x2c8>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fecb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008d2:	4a6a      	ldr	r2, [pc, #424]	; (8000a7c <printTemplate+0x2cc>)
 80008d4:	2107      	movs	r1, #7
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fec6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008dc:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <printTemplate+0x2d8>)
 80008de:	2101      	movs	r1, #1
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fec1 	bl	8000668 <lcd_print>
}
 80008e6:	e0aa      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d114      	bne.n	8000918 <printTemplate+0x168>
			lcd_clear();
 80008ee:	f7ff fee7 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f008 fbde 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008f8:	4a5f      	ldr	r2, [pc, #380]	; (8000a78 <printTemplate+0x2c8>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff feb3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000902:	4a5e      	ldr	r2, [pc, #376]	; (8000a7c <printTemplate+0x2cc>)
 8000904:	2107      	movs	r1, #7
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff feae 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800090c:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <printTemplate+0x2dc>)
 800090e:	2101      	movs	r1, #1
 8000910:	2002      	movs	r0, #2
 8000912:	f7ff fea9 	bl	8000668 <lcd_print>
}
 8000916:	e092      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b05      	cmp	r3, #5
 800091c:	f040 808f 	bne.w	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000920:	f7ff fece 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f008 fbc5 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800092a:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <printTemplate+0x2c8>)
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fe9a 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <printTemplate+0x2cc>)
 8000936:	2107      	movs	r1, #7
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe95 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <printTemplate+0x2e0>)
 8000940:	2101      	movs	r1, #1
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fe90 	bl	8000668 <lcd_print>
}
 8000948:	e079      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 3) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d176      	bne.n	8000a3e <printTemplate+0x28e>
		if(page == 1) {
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d114      	bne.n	8000980 <printTemplate+0x1d0>
			lcd_clear();
 8000956:	f7ff feb3 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f008 fbaa 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000960:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <printTemplate+0x2e4>)
 8000962:	2101      	movs	r1, #1
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fe7f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <printTemplate+0x2e8>)
 800096c:	2107      	movs	r1, #7
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe7a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000974:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <printTemplate+0x2d0>)
 8000976:	2101      	movs	r1, #1
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fe75 	bl	8000668 <lcd_print>
}
 800097e:	e05e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d114      	bne.n	80009b0 <printTemplate+0x200>
			lcd_clear();
 8000986:	f7ff fe9b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f008 fb92 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <printTemplate+0x2e4>)
 8000992:	2101      	movs	r1, #1
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe67 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800099a:	4a3f      	ldr	r2, [pc, #252]	; (8000a98 <printTemplate+0x2e8>)
 800099c:	2107      	movs	r1, #7
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe62 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009a4:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <printTemplate+0x2d4>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fe5d 	bl	8000668 <lcd_print>
}
 80009ae:	e046      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d114      	bne.n	80009e0 <printTemplate+0x230>
			lcd_clear();
 80009b6:	f7ff fe83 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f008 fb7a 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <printTemplate+0x2e4>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fe4f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <printTemplate+0x2e8>)
 80009cc:	2107      	movs	r1, #7
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fe4a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80009d4:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <printTemplate+0x2d8>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fe45 	bl	8000668 <lcd_print>
}
 80009de:	e02e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d114      	bne.n	8000a10 <printTemplate+0x260>
			lcd_clear();
 80009e6:	f7ff fe6b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f008 fb62 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <printTemplate+0x2e4>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe37 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <printTemplate+0x2e8>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fe32 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <printTemplate+0x2dc>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fe2d 	bl	8000668 <lcd_print>
}
 8000a0e:	e016      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d113      	bne.n	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000a16:	f7ff fe53 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f008 fb4a 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <printTemplate+0x2e4>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe1f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <printTemplate+0x2e8>)
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe1a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <printTemplate+0x2e0>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f7ff fe15 	bl	8000668 <lcd_print>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800d868 	.word	0x0800d868
 8000a4c:	0800d870 	.word	0x0800d870
 8000a50:	0800d874 	.word	0x0800d874
 8000a54:	0800d878 	.word	0x0800d878
 8000a58:	0800d87c 	.word	0x0800d87c
 8000a5c:	0800d880 	.word	0x0800d880
 8000a60:	0800d884 	.word	0x0800d884
 8000a64:	0800d888 	.word	0x0800d888
 8000a68:	0800d88c 	.word	0x0800d88c
 8000a6c:	0800d890 	.word	0x0800d890
 8000a70:	0800d894 	.word	0x0800d894
 8000a74:	20000cd4 	.word	0x20000cd4
 8000a78:	0800d898 	.word	0x0800d898
 8000a7c:	20000ce0 	.word	0x20000ce0
 8000a80:	0800d8a0 	.word	0x0800d8a0
 8000a84:	0800d8b4 	.word	0x0800d8b4
 8000a88:	0800d8c8 	.word	0x0800d8c8
 8000a8c:	0800d8dc 	.word	0x0800d8dc
 8000a90:	0800d8f0 	.word	0x0800d8f0
 8000a94:	0800d904 	.word	0x0800d904
 8000a98:	20000cf4 	.word	0x20000cf4

08000a9c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <getCharFromCursorPosition+0x1c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000960 	.word	0x20000960

08000abc <takeMachineID>:
	}

	return -1;
}

void takeMachineID(int state) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff fe2d 	bl	8000724 <lcd_cursor>

    int cursorPosition = 3;
 8000aca:	2303      	movs	r3, #3
 8000acc:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d104      	bne.n	8000ae6 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000adc:	220c      	movs	r2, #12
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4899      	ldr	r0, [pc, #612]	; (8000d48 <takeMachineID+0x28c>)
 8000ae2:	f00c f9fb 	bl	800cedc <memset>
    }
    HAL_Delay(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f008 fae4 	bl	80090b4 <HAL_Delay>

    printTemplate(1, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fe5e 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000af4:	2108      	movs	r1, #8
 8000af6:	4895      	ldr	r0, [pc, #596]	; (8000d4c <takeMachineID+0x290>)
 8000af8:	f009 f8ac 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d138      	bne.n	8000b74 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fe0e 	bl	8000724 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000b08:	4b8f      	ldr	r3, [pc, #572]	; (8000d48 <takeMachineID+0x28c>)
 8000b0a:	7adb      	ldrb	r3, [r3, #11]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d110      	bne.n	8000b32 <takeMachineID+0x76>
        		lcd_clear();
 8000b10:	f7ff fdd6 	bl	80006c0 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000b14:	4a8e      	ldr	r2, [pc, #568]	; (8000d50 <takeMachineID+0x294>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fda5 	bl	8000668 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000b1e:	4a8d      	ldr	r2, [pc, #564]	; (8000d54 <takeMachineID+0x298>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff fda0 	bl	8000668 <lcd_print>
        		HAL_Delay(1200);
 8000b28:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000b2c:	f008 fac2 	bl	80090b4 <HAL_Delay>
        		goto mainSection;
 8000b30:	e7c8      	b.n	8000ac4 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000b32:	4b89      	ldr	r3, [pc, #548]	; (8000d58 <takeMachineID+0x29c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b88      	ldr	r3, [pc, #544]	; (8000d5c <takeMachineID+0x2a0>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a82      	ldr	r2, [pc, #520]	; (8000d48 <takeMachineID+0x28c>)
 8000b3e:	461c      	mov	r4, r3
 8000b40:	4613      	mov	r3, r2
 8000b42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b44:	6020      	str	r0, [r4, #0]
 8000b46:	6061      	str	r1, [r4, #4]
 8000b48:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000b4a:	20c8      	movs	r0, #200	; 0xc8
 8000b4c:	f008 fab2 	bl	80090b4 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 113, eepromData, 113, 3000);
 8000b50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	2371      	movs	r3, #113	; 0x71
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	4b80      	ldr	r3, [pc, #512]	; (8000d5c <takeMachineID+0x2a0>)
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2371      	movs	r3, #113	; 0x71
 8000b60:	2200      	movs	r2, #0
 8000b62:	21a0      	movs	r1, #160	; 0xa0
 8000b64:	487e      	ldr	r0, [pc, #504]	; (8000d60 <takeMachineID+0x2a4>)
 8000b66:	f009 fb2f 	bl	800a1c8 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6e:	f008 faa1 	bl	80090b4 <HAL_Delay>

            break;
 8000b72:	e0e5      	b.n	8000d40 <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000b74:	2101      	movs	r1, #1
 8000b76:	4875      	ldr	r0, [pc, #468]	; (8000d4c <takeMachineID+0x290>)
 8000b78:	f009 f86c 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d112      	bne.n	8000ba8 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	d102      	bne.n	8000b8e <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000b88:	230a      	movs	r3, #10
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e008      	b.n	8000ba0 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b0e      	cmp	r3, #14
 8000b92:	d102      	bne.n	8000b9a <takeMachineID+0xde>
                cursorPosition = 3;
 8000b94:	2303      	movs	r3, #3
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e002      	b.n	8000ba0 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000ba0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ba4:	f008 fa86 	bl	80090b4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000ba8:	2108      	movs	r1, #8
 8000baa:	486e      	ldr	r0, [pc, #440]	; (8000d64 <takeMachineID+0x2a8>)
 8000bac:	f009 f852 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d112      	bne.n	8000bdc <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d102      	bne.n	8000bc2 <takeMachineID+0x106>
                cursorPosition = 14;
 8000bbc:	230e      	movs	r3, #14
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e008      	b.n	8000bd4 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2b0a      	cmp	r3, #10
 8000bc6:	d102      	bne.n	8000bce <takeMachineID+0x112>
            	cursorPosition = 7;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e002      	b.n	8000bd4 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000bd4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bd8:	f008 fa6c 	bl	80090b4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000bdc:	2102      	movs	r1, #2
 8000bde:	485b      	ldr	r0, [pc, #364]	; (8000d4c <takeMachineID+0x290>)
 8000be0:	f009 f838 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d16c      	bne.n	8000cc4 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d105      	bne.n	8000bfc <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000bf0:	4a55      	ldr	r2, [pc, #340]	; (8000d48 <takeMachineID+0x28c>)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	2230      	movs	r2, #48	; 0x30
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e04f      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d105      	bne.n	8000c0e <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000c02:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <takeMachineID+0x28c>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4413      	add	r3, r2
 8000c08:	2231      	movs	r2, #49	; 0x31
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e046      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2b05      	cmp	r3, #5
 8000c12:	d105      	bne.n	8000c20 <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000c14:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <takeMachineID+0x28c>)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2232      	movs	r2, #50	; 0x32
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e03d      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d105      	bne.n	8000c32 <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000c26:	4a48      	ldr	r2, [pc, #288]	; (8000d48 <takeMachineID+0x28c>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	2233      	movs	r2, #51	; 0x33
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e034      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d105      	bne.n	8000c44 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000c38:	4a43      	ldr	r2, [pc, #268]	; (8000d48 <takeMachineID+0x28c>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2234      	movs	r2, #52	; 0x34
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e02b      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	d105      	bne.n	8000c56 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000c4a:	4a3f      	ldr	r2, [pc, #252]	; (8000d48 <takeMachineID+0x28c>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4413      	add	r3, r2
 8000c50:	2235      	movs	r2, #53	; 0x35
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e022      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2b0b      	cmp	r3, #11
 8000c5a:	d105      	bne.n	8000c68 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000c5c:	4a3a      	ldr	r2, [pc, #232]	; (8000d48 <takeMachineID+0x28c>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4413      	add	r3, r2
 8000c62:	2236      	movs	r2, #54	; 0x36
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e019      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	2b0c      	cmp	r3, #12
 8000c6c:	d105      	bne.n	8000c7a <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000c6e:	4a36      	ldr	r2, [pc, #216]	; (8000d48 <takeMachineID+0x28c>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4413      	add	r3, r2
 8000c74:	2237      	movs	r2, #55	; 0x37
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e010      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b0d      	cmp	r3, #13
 8000c7e:	d105      	bne.n	8000c8c <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <takeMachineID+0x28c>)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4413      	add	r3, r2
 8000c86:	2238      	movs	r2, #56	; 0x38
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e007      	b.n	8000c9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b0e      	cmp	r3, #14
 8000c90:	d104      	bne.n	8000c9c <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000c92:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <takeMachineID+0x28c>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4413      	add	r3, r2
 8000c98:	2239      	movs	r2, #57	; 0x39
 8000c9a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	b2d9      	uxtb	r1, r3
 8000ca0:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <takeMachineID+0x28c>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fcf1 	bl	8000692 <lcd_print_char>

        	writeLoc++;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000cbc:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000cc0:	f008 f9f8 	bl	80090b4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4821      	ldr	r0, [pc, #132]	; (8000d4c <takeMachineID+0x290>)
 8000cc8:	f008 ffc4 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d12f      	bne.n	8000d32 <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <takeMachineID+0x28c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d027      	beq.n	8000d2a <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000cda:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <takeMachineID+0x28c>)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4413      	add	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	3304      	adds	r3, #4
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fcf0 	bl	80006d4 <lcd_delete_char>
                HAL_Delay(50);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f008 f9dd 	bl	80090b4 <HAL_Delay>

                if(writeLoc > 5) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	dd03      	ble.n	8000d08 <takeMachineID+0x24c>
                	writeLoc--;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e004      	b.n	8000d12 <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	dc01      	bgt.n	8000d12 <takeMachineID+0x256>
                	writeLoc = 5;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	dd03      	ble.n	8000d20 <takeMachineID+0x264>
                	machineIDLoc--;
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	e004      	b.n	8000d2a <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da01      	bge.n	8000d2a <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000d2a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d2e:	f008 f9c1 	bl	80090b4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f7ff fc76 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d3e:	e6d9      	b.n	8000af4 <takeMachineID+0x38>
    }
}
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	20000cd4 	.word	0x20000cd4
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	0800d90c 	.word	0x0800d90c
 8000d54:	0800d920 	.word	0x0800d920
 8000d58:	200009b1 	.word	0x200009b1
 8000d5c:	20000c38 	.word	0x20000c38
 8000d60:	20000b54 	.word	0x20000b54
 8000d64:	40011000 	.word	0x40011000

08000d68 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fcd7 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000d7c:	2214      	movs	r2, #20
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4888      	ldr	r0, [pc, #544]	; (8000fa4 <takeWifiSSID+0x23c>)
 8000d82:	f00c f8ab 	bl	800cedc <memset>
    }

    int realCharPos = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000d8a:	4b87      	ldr	r3, [pc, #540]	; (8000fa8 <takeWifiSSID+0x240>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
    page = 1;
 8000d90:	4b86      	ldr	r3, [pc, #536]	; (8000fac <takeWifiSSID+0x244>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fd05 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000da6:	2108      	movs	r1, #8
 8000da8:	4881      	ldr	r0, [pc, #516]	; (8000fb0 <takeWifiSSID+0x248>)
 8000daa:	f008 ff53 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d12a      	bne.n	8000e0a <takeWifiSSID+0xa2>
            lcd_cursor(0);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fcb5 	bl	8000724 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000dba:	487a      	ldr	r0, [pc, #488]	; (8000fa4 <takeWifiSSID+0x23c>)
 8000dbc:	f7ff fa32 	bl	8000224 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b14      	cmp	r3, #20
 8000dc4:	d910      	bls.n	8000de8 <takeWifiSSID+0x80>
                lcd_clear();
 8000dc6:	f7ff fc7b 	bl	80006c0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000dca:	4a7a      	ldr	r2, [pc, #488]	; (8000fb4 <takeWifiSSID+0x24c>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff fc4a 	bl	8000668 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000dd4:	4a78      	ldr	r2, [pc, #480]	; (8000fb8 <takeWifiSSID+0x250>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff fc45 	bl	8000668 <lcd_print>
                HAL_Delay(1200);
 8000dde:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000de2:	f008 f967 	bl	80090b4 <HAL_Delay>
                goto mainSSIDSection;
 8000de6:	e7c3      	b.n	8000d70 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, 60);
 8000de8:	4b74      	ldr	r3, [pc, #464]	; (8000fbc <takeWifiSSID+0x254>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b74      	ldr	r3, [pc, #464]	; (8000fc0 <takeWifiSSID+0x258>)
 8000df0:	4413      	add	r3, r2
 8000df2:	223c      	movs	r2, #60	; 0x3c
 8000df4:	496b      	ldr	r1, [pc, #428]	; (8000fa4 <takeWifiSSID+0x23c>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f00c f8cc 	bl	800cf94 <memcpy>
            HAL_Delay(200);
 8000dfc:	20c8      	movs	r0, #200	; 0xc8
 8000dfe:	f008 f959 	bl	80090b4 <HAL_Delay>

            hafizaYaz = 1;
 8000e02:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <takeWifiSSID+0x25c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]

            break;
 8000e08:	e14c      	b.n	80010a4 <takeWifiSSID+0x33c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4868      	ldr	r0, [pc, #416]	; (8000fb0 <takeWifiSSID+0x248>)
 8000e0e:	f008 ff21 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d166      	bne.n	8000ee6 <takeWifiSSID+0x17e>
        	realCharPos++;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b50      	cmp	r3, #80	; 0x50
 8000e22:	dd01      	ble.n	8000e28 <takeWifiSSID+0xc0>
        		realCharPos = 1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000e28:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <takeWifiSSID+0x240>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b10      	cmp	r3, #16
 8000e2e:	d152      	bne.n	8000ed6 <takeWifiSSID+0x16e>
            	if(page == 1) {
 8000e30:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <takeWifiSSID+0x244>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d10c      	bne.n	8000e52 <takeWifiSSID+0xea>
            		cursorPosition = 1;
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <takeWifiSSID+0x240>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]
            		page++;
 8000e3e:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <takeWifiSSID+0x244>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a59      	ldr	r2, [pc, #356]	; (8000fac <takeWifiSSID+0x244>)
 8000e46:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000e48:	2102      	movs	r1, #2
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f7ff fcb0 	bl	80007b0 <printTemplate>
 8000e50:	e046      	b.n	8000ee0 <takeWifiSSID+0x178>
            	} else if(page == 2) {
 8000e52:	4b56      	ldr	r3, [pc, #344]	; (8000fac <takeWifiSSID+0x244>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d10c      	bne.n	8000e74 <takeWifiSSID+0x10c>
            		cursorPosition = 1;
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <takeWifiSSID+0x240>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
            		page++;
 8000e60:	4b52      	ldr	r3, [pc, #328]	; (8000fac <takeWifiSSID+0x244>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a51      	ldr	r2, [pc, #324]	; (8000fac <takeWifiSSID+0x244>)
 8000e68:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff fc9f 	bl	80007b0 <printTemplate>
 8000e72:	e035      	b.n	8000ee0 <takeWifiSSID+0x178>
            	} else if(page == 3) {
 8000e74:	4b4d      	ldr	r3, [pc, #308]	; (8000fac <takeWifiSSID+0x244>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d10c      	bne.n	8000e96 <takeWifiSSID+0x12e>
            		cursorPosition = 1;
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <takeWifiSSID+0x240>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
            		page++;
 8000e82:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <takeWifiSSID+0x244>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <takeWifiSSID+0x244>)
 8000e8a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f7ff fc8e 	bl	80007b0 <printTemplate>
 8000e94:	e024      	b.n	8000ee0 <takeWifiSSID+0x178>
            	} else if(page == 4) {
 8000e96:	4b45      	ldr	r3, [pc, #276]	; (8000fac <takeWifiSSID+0x244>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d10c      	bne.n	8000eb8 <takeWifiSSID+0x150>
            		cursorPosition = 1;
 8000e9e:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <takeWifiSSID+0x240>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
            		page++;
 8000ea4:	4b41      	ldr	r3, [pc, #260]	; (8000fac <takeWifiSSID+0x244>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a40      	ldr	r2, [pc, #256]	; (8000fac <takeWifiSSID+0x244>)
 8000eac:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000eae:	2105      	movs	r1, #5
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fc7d 	bl	80007b0 <printTemplate>
 8000eb6:	e013      	b.n	8000ee0 <takeWifiSSID+0x178>
            	} else if(page == 5) {
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <takeWifiSSID+0x244>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d10f      	bne.n	8000ee0 <takeWifiSSID+0x178>
            		cursorPosition = 1;
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <takeWifiSSID+0x240>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <takeWifiSSID+0x244>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fc6e 	bl	80007b0 <printTemplate>
 8000ed4:	e004      	b.n	8000ee0 <takeWifiSSID+0x178>
            	}
            } else {
            	cursorPosition++;
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <takeWifiSSID+0x240>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <takeWifiSSID+0x240>)
 8000ede:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000ee0:	20fa      	movs	r0, #250	; 0xfa
 8000ee2:	f008 f8e7 	bl	80090b4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	4837      	ldr	r0, [pc, #220]	; (8000fc8 <takeWifiSSID+0x260>)
 8000eea:	f008 feb3 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d173      	bne.n	8000fdc <takeWifiSSID+0x274>
        	realCharPos--;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dc01      	bgt.n	8000f04 <takeWifiSSID+0x19c>
        		realCharPos = 80;
 8000f00:	2350      	movs	r3, #80	; 0x50
 8000f02:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <takeWifiSSID+0x240>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d15f      	bne.n	8000fcc <takeWifiSSID+0x264>
            	if(page == 1) {
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <takeWifiSSID+0x244>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d10a      	bne.n	8000f2a <takeWifiSSID+0x1c2>
            		cursorPosition = 16;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <takeWifiSSID+0x240>)
 8000f16:	2210      	movs	r2, #16
 8000f18:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <takeWifiSSID+0x244>)
 8000f1c:	2205      	movs	r2, #5
 8000f1e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000f20:	2105      	movs	r1, #5
 8000f22:	2002      	movs	r0, #2
 8000f24:	f7ff fc44 	bl	80007b0 <printTemplate>
 8000f28:	e055      	b.n	8000fd6 <takeWifiSSID+0x26e>
            	} else if(page == 2) {
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <takeWifiSSID+0x244>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d10a      	bne.n	8000f48 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <takeWifiSSID+0x240>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <takeWifiSSID+0x244>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff fc35 	bl	80007b0 <printTemplate>
 8000f46:	e046      	b.n	8000fd6 <takeWifiSSID+0x26e>
            	} else if(page == 3) {
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <takeWifiSSID+0x244>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d10a      	bne.n	8000f66 <takeWifiSSID+0x1fe>
            		cursorPosition = 16;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <takeWifiSSID+0x240>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <takeWifiSSID+0x244>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f7ff fc26 	bl	80007b0 <printTemplate>
 8000f64:	e037      	b.n	8000fd6 <takeWifiSSID+0x26e>
            	} else if(page == 4) {
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <takeWifiSSID+0x244>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d10a      	bne.n	8000f84 <takeWifiSSID+0x21c>
            		cursorPosition = 16;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <takeWifiSSID+0x240>)
 8000f70:	2210      	movs	r2, #16
 8000f72:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <takeWifiSSID+0x244>)
 8000f76:	2203      	movs	r2, #3
 8000f78:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f7ff fc17 	bl	80007b0 <printTemplate>
 8000f82:	e028      	b.n	8000fd6 <takeWifiSSID+0x26e>
            	} else if(page == 5) {
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <takeWifiSSID+0x244>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d124      	bne.n	8000fd6 <takeWifiSSID+0x26e>
            		cursorPosition = 16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <takeWifiSSID+0x240>)
 8000f8e:	2210      	movs	r2, #16
 8000f90:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <takeWifiSSID+0x244>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000f98:	2104      	movs	r1, #4
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff fc08 	bl	80007b0 <printTemplate>
 8000fa0:	e019      	b.n	8000fd6 <takeWifiSSID+0x26e>
 8000fa2:	bf00      	nop
 8000fa4:	20000ce0 	.word	0x20000ce0
 8000fa8:	20000944 	.word	0x20000944
 8000fac:	20000948 	.word	0x20000948
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	0800d934 	.word	0x0800d934
 8000fb8:	0800d948 	.word	0x0800d948
 8000fbc:	200009b2 	.word	0x200009b2
 8000fc0:	20000c38 	.word	0x20000c38
 8000fc4:	20000d38 	.word	0x20000d38
 8000fc8:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000fcc:	4b37      	ldr	r3, [pc, #220]	; (80010ac <takeWifiSSID+0x344>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	4a36      	ldr	r2, [pc, #216]	; (80010ac <takeWifiSSID+0x344>)
 8000fd4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000fd6:	20fa      	movs	r0, #250	; 0xfa
 8000fd8:	f008 f86c 	bl	80090b4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4834      	ldr	r0, [pc, #208]	; (80010b0 <takeWifiSSID+0x348>)
 8000fe0:	f008 fe38 	bl	8009c54 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d11e      	bne.n	8001028 <takeWifiSSID+0x2c0>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd54 	bl	8000a9c <getCharFromCursorPosition>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <takeWifiSSID+0x34c>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	460a      	mov	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	b2d9      	uxtb	r1, r3
 8001006:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <takeWifiSSID+0x34c>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fb3e 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3301      	adds	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	3301      	adds	r3, #1
 8001020:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001022:	20fa      	movs	r0, #250	; 0xfa
 8001024:	f008 f846 	bl	80090b4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001028:	2104      	movs	r1, #4
 800102a:	4821      	ldr	r0, [pc, #132]	; (80010b0 <takeWifiSSID+0x348>)
 800102c:	f008 fe12 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d12e      	bne.n	8001094 <takeWifiSSID+0x32c>
        	if(strlen(wifiSSID) >= 1) {
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <takeWifiSSID+0x34c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d027      	beq.n	800108e <takeWifiSSID+0x326>
        		wifiSSID[wifiNameLoc] = '\0';
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <takeWifiSSID+0x34c>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4413      	add	r3, r2
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3306      	adds	r3, #6
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4619      	mov	r1, r3
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fb3e 	bl	80006d4 <lcd_delete_char>
        		HAL_Delay(50);
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	f008 f82b 	bl	80090b4 <HAL_Delay>
        		if(writeLoc > 7) {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b07      	cmp	r3, #7
 8001062:	dd03      	ble.n	800106c <takeWifiSSID+0x304>
        			writeLoc--;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3b01      	subs	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e004      	b.n	8001076 <takeWifiSSID+0x30e>
        		} else if(writeLoc < 7) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b06      	cmp	r3, #6
 8001070:	dc01      	bgt.n	8001076 <takeWifiSSID+0x30e>
        			writeLoc = 7;
 8001072:	2307      	movs	r3, #7
 8001074:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dd03      	ble.n	8001084 <takeWifiSSID+0x31c>
        			wifiNameLoc--;
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	3b01      	subs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	e004      	b.n	800108e <takeWifiSSID+0x326>
        		} else if(wifiNameLoc < 0) {
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da01      	bge.n	800108e <takeWifiSSID+0x326>
        			wifiNameLoc = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 800108e:	20fa      	movs	r0, #250	; 0xfa
 8001090:	f008 f810 	bl	80090b4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <takeWifiSSID+0x344>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4619      	mov	r1, r3
 800109c:	2002      	movs	r0, #2
 800109e:	f7ff fac4 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010a2:	e680      	b.n	8000da6 <takeWifiSSID+0x3e>
    }
}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000944 	.word	0x20000944
 80010b0:	40010800 	.word	0x40010800
 80010b4:	20000ce0 	.word	0x20000ce0

080010b8 <takeWifiPass>:

void takeWifiPass(int state) {
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb2f 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d104      	bne.n	80010d6 <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 80010cc:	2214      	movs	r2, #20
 80010ce:	2100      	movs	r1, #0
 80010d0:	488a      	ldr	r0, [pc, #552]	; (80012fc <takeWifiPass+0x244>)
 80010d2:	f00b ff03 	bl	800cedc <memset>
    }

    int realCharPos = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 80010da:	4b89      	ldr	r3, [pc, #548]	; (8001300 <takeWifiPass+0x248>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
    page = 1;
 80010e0:	4b88      	ldr	r3, [pc, #544]	; (8001304 <takeWifiPass+0x24c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 80010ea:	2307      	movs	r3, #7
 80010ec:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 80010ee:	2101      	movs	r1, #1
 80010f0:	2003      	movs	r0, #3
 80010f2:	f7ff fb5d 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010f6:	2108      	movs	r1, #8
 80010f8:	4883      	ldr	r0, [pc, #524]	; (8001308 <takeWifiPass+0x250>)
 80010fa:	f008 fdab 	bl	8009c54 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d12f      	bne.n	8001164 <takeWifiPass+0xac>
            lcd_cursor(0);
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fb0d 	bl	8000724 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800110a:	487c      	ldr	r0, [pc, #496]	; (80012fc <takeWifiPass+0x244>)
 800110c:	f7ff f88a 	bl	8000224 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	2b14      	cmp	r3, #20
 8001114:	d910      	bls.n	8001138 <takeWifiPass+0x80>
                lcd_clear();
 8001116:	f7ff fad3 	bl	80006c0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800111a:	4a7c      	ldr	r2, [pc, #496]	; (800130c <takeWifiPass+0x254>)
 800111c:	2101      	movs	r1, #1
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff faa2 	bl	8000668 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8001124:	4a7a      	ldr	r2, [pc, #488]	; (8001310 <takeWifiPass+0x258>)
 8001126:	2101      	movs	r1, #1
 8001128:	2002      	movs	r0, #2
 800112a:	f7ff fa9d 	bl	8000668 <lcd_print>
                HAL_Delay(1200);
 800112e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001132:	f007 ffbf 	bl	80090b4 <HAL_Delay>
                goto mainPASSSection;
 8001136:	e7c3      	b.n	80010c0 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, 20);
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <takeWifiPass+0x25c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b76      	ldr	r3, [pc, #472]	; (8001318 <takeWifiPass+0x260>)
 8001140:	4413      	add	r3, r2
 8001142:	4a6e      	ldr	r2, [pc, #440]	; (80012fc <takeWifiPass+0x244>)
 8001144:	461d      	mov	r5, r3
 8001146:	4614      	mov	r4, r2
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	6028      	str	r0, [r5, #0]
 800114c:	6069      	str	r1, [r5, #4]
 800114e:	60aa      	str	r2, [r5, #8]
 8001150:	60eb      	str	r3, [r5, #12]
 8001152:	6820      	ldr	r0, [r4, #0]
 8001154:	6128      	str	r0, [r5, #16]
            HAL_Delay(200);
 8001156:	20c8      	movs	r0, #200	; 0xc8
 8001158:	f007 ffac 	bl	80090b4 <HAL_Delay>

            hafizaYaz = 1;
 800115c:	4b6f      	ldr	r3, [pc, #444]	; (800131c <takeWifiPass+0x264>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]

            break;
 8001162:	e14b      	b.n	80013fc <takeWifiPass+0x344>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001164:	2101      	movs	r1, #1
 8001166:	4868      	ldr	r0, [pc, #416]	; (8001308 <takeWifiPass+0x250>)
 8001168:	f008 fd74 	bl	8009c54 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d166      	bne.n	8001240 <takeWifiPass+0x188>
        	realCharPos++;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b50      	cmp	r3, #80	; 0x50
 800117c:	dd01      	ble.n	8001182 <takeWifiPass+0xca>
        	    realCharPos = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <takeWifiPass+0x248>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b10      	cmp	r3, #16
 8001188:	d152      	bne.n	8001230 <takeWifiPass+0x178>
            	if(page == 1) {
 800118a:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <takeWifiPass+0x24c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d10c      	bne.n	80011ac <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8001192:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <takeWifiPass+0x248>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
            		page++;
 8001198:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <takeWifiPass+0x24c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a59      	ldr	r2, [pc, #356]	; (8001304 <takeWifiPass+0x24c>)
 80011a0:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80011a2:	2102      	movs	r1, #2
 80011a4:	2003      	movs	r0, #3
 80011a6:	f7ff fb03 	bl	80007b0 <printTemplate>
 80011aa:	e046      	b.n	800123a <takeWifiPass+0x182>
            	} else if(page == 2) {
 80011ac:	4b55      	ldr	r3, [pc, #340]	; (8001304 <takeWifiPass+0x24c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d10c      	bne.n	80011ce <takeWifiPass+0x116>
            		cursorPosition = 1;
 80011b4:	4b52      	ldr	r3, [pc, #328]	; (8001300 <takeWifiPass+0x248>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
            		page++;
 80011ba:	4b52      	ldr	r3, [pc, #328]	; (8001304 <takeWifiPass+0x24c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a50      	ldr	r2, [pc, #320]	; (8001304 <takeWifiPass+0x24c>)
 80011c2:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80011c4:	2103      	movs	r1, #3
 80011c6:	2003      	movs	r0, #3
 80011c8:	f7ff faf2 	bl	80007b0 <printTemplate>
 80011cc:	e035      	b.n	800123a <takeWifiPass+0x182>
            	} else if(page == 3) {
 80011ce:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <takeWifiPass+0x24c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d10c      	bne.n	80011f0 <takeWifiPass+0x138>
            		cursorPosition = 1;
 80011d6:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <takeWifiPass+0x248>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]
            		page++;
 80011dc:	4b49      	ldr	r3, [pc, #292]	; (8001304 <takeWifiPass+0x24c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a48      	ldr	r2, [pc, #288]	; (8001304 <takeWifiPass+0x24c>)
 80011e4:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80011e6:	2104      	movs	r1, #4
 80011e8:	2003      	movs	r0, #3
 80011ea:	f7ff fae1 	bl	80007b0 <printTemplate>
 80011ee:	e024      	b.n	800123a <takeWifiPass+0x182>
            	} else if(page == 4) {
 80011f0:	4b44      	ldr	r3, [pc, #272]	; (8001304 <takeWifiPass+0x24c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d10c      	bne.n	8001212 <takeWifiPass+0x15a>
            		cursorPosition = 1;
 80011f8:	4b41      	ldr	r3, [pc, #260]	; (8001300 <takeWifiPass+0x248>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
            		page++;
 80011fe:	4b41      	ldr	r3, [pc, #260]	; (8001304 <takeWifiPass+0x24c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <takeWifiPass+0x24c>)
 8001206:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001208:	2105      	movs	r1, #5
 800120a:	2003      	movs	r0, #3
 800120c:	f7ff fad0 	bl	80007b0 <printTemplate>
 8001210:	e013      	b.n	800123a <takeWifiPass+0x182>
            	} else if(page == 5) {
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <takeWifiPass+0x24c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b05      	cmp	r3, #5
 8001218:	d10f      	bne.n	800123a <takeWifiPass+0x182>
            		cursorPosition = 1;
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <takeWifiPass+0x248>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001220:	4b38      	ldr	r3, [pc, #224]	; (8001304 <takeWifiPass+0x24c>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001226:	2101      	movs	r1, #1
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff fac1 	bl	80007b0 <printTemplate>
 800122e:	e004      	b.n	800123a <takeWifiPass+0x182>
            	}
            } else {
            	cursorPosition++;
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <takeWifiPass+0x248>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a32      	ldr	r2, [pc, #200]	; (8001300 <takeWifiPass+0x248>)
 8001238:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800123a:	20fa      	movs	r0, #250	; 0xfa
 800123c:	f007 ff3a 	bl	80090b4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001240:	2108      	movs	r1, #8
 8001242:	4837      	ldr	r0, [pc, #220]	; (8001320 <takeWifiPass+0x268>)
 8001244:	f008 fd06 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b01      	cmp	r3, #1
 800124c:	d172      	bne.n	8001334 <takeWifiPass+0x27c>
        	realCharPos--;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3b01      	subs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	dc01      	bgt.n	800125e <takeWifiPass+0x1a6>
        	    realCharPos = 80;
 800125a:	2350      	movs	r3, #80	; 0x50
 800125c:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <takeWifiPass+0x248>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d15e      	bne.n	8001324 <takeWifiPass+0x26c>
            	if(page == 1) {
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <takeWifiPass+0x24c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10a      	bne.n	8001284 <takeWifiPass+0x1cc>
            		cursorPosition = 16;
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <takeWifiPass+0x248>)
 8001270:	2210      	movs	r2, #16
 8001272:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <takeWifiPass+0x24c>)
 8001276:	2205      	movs	r2, #5
 8001278:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800127a:	2105      	movs	r1, #5
 800127c:	2003      	movs	r0, #3
 800127e:	f7ff fa97 	bl	80007b0 <printTemplate>
 8001282:	e054      	b.n	800132e <takeWifiPass+0x276>
            	} else if(page == 2) {
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <takeWifiPass+0x24c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d10a      	bne.n	80012a2 <takeWifiPass+0x1ea>
            		cursorPosition = 16;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <takeWifiPass+0x248>)
 800128e:	2210      	movs	r2, #16
 8001290:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <takeWifiPass+0x24c>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001298:	2101      	movs	r1, #1
 800129a:	2003      	movs	r0, #3
 800129c:	f7ff fa88 	bl	80007b0 <printTemplate>
 80012a0:	e045      	b.n	800132e <takeWifiPass+0x276>
            	} else if(page == 3) {
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <takeWifiPass+0x24c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d10a      	bne.n	80012c0 <takeWifiPass+0x208>
            		cursorPosition = 16;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <takeWifiPass+0x248>)
 80012ac:	2210      	movs	r2, #16
 80012ae:	601a      	str	r2, [r3, #0]
            		page = 2;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <takeWifiPass+0x24c>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80012b6:	2102      	movs	r1, #2
 80012b8:	2003      	movs	r0, #3
 80012ba:	f7ff fa79 	bl	80007b0 <printTemplate>
 80012be:	e036      	b.n	800132e <takeWifiPass+0x276>
            	} else if(page == 4) {
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <takeWifiPass+0x24c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d10a      	bne.n	80012de <takeWifiPass+0x226>
            		cursorPosition = 16;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <takeWifiPass+0x248>)
 80012ca:	2210      	movs	r2, #16
 80012cc:	601a      	str	r2, [r3, #0]
            		page = 3;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <takeWifiPass+0x24c>)
 80012d0:	2203      	movs	r2, #3
 80012d2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80012d4:	2103      	movs	r1, #3
 80012d6:	2003      	movs	r0, #3
 80012d8:	f7ff fa6a 	bl	80007b0 <printTemplate>
 80012dc:	e027      	b.n	800132e <takeWifiPass+0x276>
            	} else if(page == 5) {
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <takeWifiPass+0x24c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	d123      	bne.n	800132e <takeWifiPass+0x276>
            		cursorPosition = 16;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <takeWifiPass+0x248>)
 80012e8:	2210      	movs	r2, #16
 80012ea:	601a      	str	r2, [r3, #0]
            		page = 4;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <takeWifiPass+0x24c>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80012f2:	2104      	movs	r1, #4
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff fa5b 	bl	80007b0 <printTemplate>
 80012fa:	e018      	b.n	800132e <takeWifiPass+0x276>
 80012fc:	20000cf4 	.word	0x20000cf4
 8001300:	20000944 	.word	0x20000944
 8001304:	20000948 	.word	0x20000948
 8001308:	40010800 	.word	0x40010800
 800130c:	0800d934 	.word	0x0800d934
 8001310:	0800d95c 	.word	0x0800d95c
 8001314:	200009b3 	.word	0x200009b3
 8001318:	20000c38 	.word	0x20000c38
 800131c:	20000d38 	.word	0x20000d38
 8001320:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <takeWifiPass+0x34c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3b01      	subs	r3, #1
 800132a:	4a36      	ldr	r2, [pc, #216]	; (8001404 <takeWifiPass+0x34c>)
 800132c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800132e:	20fa      	movs	r0, #250	; 0xfa
 8001330:	f007 fec0 	bl	80090b4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001334:	2102      	movs	r1, #2
 8001336:	4834      	ldr	r0, [pc, #208]	; (8001408 <takeWifiPass+0x350>)
 8001338:	f008 fc8c 	bl	8009c54 <HAL_GPIO_ReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d11e      	bne.n	8001380 <takeWifiPass+0x2c8>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3b01      	subs	r3, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fba8 	bl	8000a9c <getCharFromCursorPosition>
 800134c:	4603      	mov	r3, r0
 800134e:	4619      	mov	r1, r3
 8001350:	4a2e      	ldr	r2, [pc, #184]	; (800140c <takeWifiPass+0x354>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4413      	add	r3, r2
 8001356:	460a      	mov	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	b2d9      	uxtb	r1, r3
 800135e:	4a2b      	ldr	r2, [pc, #172]	; (800140c <takeWifiPass+0x354>)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff f992 	bl	8000692 <lcd_print_char>

            writeLoc++;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3301      	adds	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800137a:	20fa      	movs	r0, #250	; 0xfa
 800137c:	f007 fe9a 	bl	80090b4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001380:	2104      	movs	r1, #4
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <takeWifiPass+0x350>)
 8001384:	f008 fc66 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d12e      	bne.n	80013ec <takeWifiPass+0x334>
            if(strlen(wifiPass) >= 1) {
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <takeWifiPass+0x354>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d027      	beq.n	80013e6 <takeWifiPass+0x32e>
            	wifiPass[wifiPassLoc] = '\0';
 8001396:	4a1d      	ldr	r2, [pc, #116]	; (800140c <takeWifiPass+0x354>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4413      	add	r3, r2
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	3306      	adds	r3, #6
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4619      	mov	r1, r3
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff f992 	bl	80006d4 <lcd_delete_char>
            	HAL_Delay(50);
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f007 fe7f 	bl	80090b4 <HAL_Delay>

            	if(writeLoc > 7) {
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	dd03      	ble.n	80013c4 <takeWifiPass+0x30c>
            		writeLoc--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3b01      	subs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	e004      	b.n	80013ce <takeWifiPass+0x316>
            	} else if(writeLoc < 7) {
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	dc01      	bgt.n	80013ce <takeWifiPass+0x316>
            		writeLoc = 7;
 80013ca:	2307      	movs	r3, #7
 80013cc:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd03      	ble.n	80013dc <takeWifiPass+0x324>
            		wifiPassLoc--;
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	e004      	b.n	80013e6 <takeWifiPass+0x32e>
            	} else if(wifiPassLoc < 0) {
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da01      	bge.n	80013e6 <takeWifiPass+0x32e>
            		wifiPassLoc = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80013e6:	20fa      	movs	r0, #250	; 0xfa
 80013e8:	f007 fe64 	bl	80090b4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <takeWifiPass+0x34c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4619      	mov	r1, r3
 80013f4:	2002      	movs	r0, #2
 80013f6:	f7ff f918 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80013fa:	e67c      	b.n	80010f6 <takeWifiPass+0x3e>
    }
}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}
 8001404:	20000944 	.word	0x20000944
 8001408:	40010800 	.word	0x40010800
 800140c:	20000cf4 	.word	0x20000cf4

08001410 <checkSlideVal>:

int checkSlideVal(int state) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d111      	bne.n	8001442 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800141e:	2101      	movs	r1, #1
 8001420:	4813      	ldr	r0, [pc, #76]	; (8001470 <checkSlideVal+0x60>)
 8001422:	f008 fc17 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <checkSlideVal+0x20>
			return 34;
 800142c:	2322      	movs	r3, #34	; 0x22
 800142e:	e01b      	b.n	8001468 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001430:	2108      	movs	r1, #8
 8001432:	4810      	ldr	r0, [pc, #64]	; (8001474 <checkSlideVal+0x64>)
 8001434:	f008 fc0e 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d113      	bne.n	8001466 <checkSlideVal+0x56>
			return 32;
 800143e:	2320      	movs	r3, #32
 8001440:	e012      	b.n	8001468 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001442:	2101      	movs	r1, #1
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <checkSlideVal+0x60>)
 8001446:	f008 fc05 	bl	8009c54 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <checkSlideVal+0x44>
			return 35;
 8001450:	2323      	movs	r3, #35	; 0x23
 8001452:	e009      	b.n	8001468 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001454:	2108      	movs	r1, #8
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <checkSlideVal+0x64>)
 8001458:	f008 fbfc 	bl	8009c54 <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <checkSlideVal+0x56>
			return 33;
 8001462:	2321      	movs	r3, #33	; 0x21
 8001464:	e000      	b.n	8001468 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40010800 	.word	0x40010800
 8001474:	40011000 	.word	0x40011000

08001478 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7fe fecc 	bl	8000224 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001494:	e08a      	b.n	80015ac <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f7ff ffba 	bl	8001410 <checkSlideVal>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	dd07      	ble.n	80014b2 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f7ff ffb4 	bl	8001410 <checkSlideVal>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <slideText+0x148>)
 80014ae:	701a      	strb	r2, [r3, #0]
			break;
 80014b0:	e081      	b.n	80015b6 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
 80014b6:	e075      	b.n	80015a4 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f7ff ffa9 	bl	8001410 <checkSlideVal>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dd09      	ble.n	80014d8 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80014c4:	6838      	ldr	r0, [r7, #0]
 80014c6:	f7ff ffa3 	bl	8001410 <checkSlideVal>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <slideText+0x148>)
 80014d0:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80014d6:	e069      	b.n	80015ac <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	4413      	add	r3, r2
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	e029      	b.n	8001536 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f7ff ff94 	bl	8001410 <checkSlideVal>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	dd0b      	ble.n	8001506 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f7ff ff8e 	bl	8001410 <checkSlideVal>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <slideText+0x148>)
 80014fa:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001504:	e01d      	b.n	8001542 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	b2d9      	uxtb	r1, r3
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	461a      	mov	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	f7ff f8b4 	bl	8000692 <lcd_print_char>
				HAL_Delay(30);
 800152a:	201e      	movs	r0, #30
 800152c:	f007 fdc2 	bl	80090b4 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	3301      	adds	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	7dfa      	ldrb	r2, [r7, #23]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4413      	add	r3, r2
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbcf      	blt.n	80014e2 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	3b01      	subs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	e023      	b.n	8001592 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	f7ff ff60 	bl	8001410 <checkSlideVal>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	dd0b      	ble.n	800156e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001556:	6838      	ldr	r0, [r7, #0]
 8001558:	f7ff ff5a 	bl	8001410 <checkSlideVal>
 800155c:	4603      	mov	r3, r0
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <slideText+0x148>)
 8001562:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800156c:	e017      	b.n	800159e <slideText+0x126>
				}
			     if(j >= startPos) {
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	db0a      	blt.n	800158c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	b2d1      	uxtb	r1, r2
 800157e:	2220      	movs	r2, #32
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f886 	bl	8000692 <lcd_print_char>
			    	 HAL_Delay(30);
 8001586:	201e      	movs	r0, #30
 8001588:	f007 fd94 	bl	80090b4 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	3b01      	subs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	7dfa      	ldrb	r2, [r7, #23]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	429a      	cmp	r2, r3
 800159c:	dad5      	bge.n	800154a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	3301      	adds	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
 80015a6:	6a3a      	ldr	r2, [r7, #32]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	db85      	blt.n	80014b8 <slideText+0x40>
	while(mainLoopVal == 1) {
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	f43f af71 	beq.w	8001496 <slideText+0x1e>
			     }
			}
		}
	}
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000d0c 	.word	0x20000d0c

080015c4 <menu>:

void menu() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015c8:	2101      	movs	r1, #1
 80015ca:	488f      	ldr	r0, [pc, #572]	; (8001808 <menu+0x244>)
 80015cc:	f008 fb42 	bl	8009c54 <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	f040 808e 	bne.w	80016f4 <menu+0x130>
 80015d8:	4b8c      	ldr	r3, [pc, #560]	; (800180c <menu+0x248>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8086 	beq.w	80016f4 <menu+0x130>
		menuSayac = menuSayac+1;
 80015e8:	4b89      	ldr	r3, [pc, #548]	; (8001810 <menu+0x24c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b87      	ldr	r3, [pc, #540]	; (8001810 <menu+0x24c>)
 80015f2:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015f4:	4b86      	ldr	r3, [pc, #536]	; (8001810 <menu+0x24c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b24      	cmp	r3, #36	; 0x24
 80015fa:	d102      	bne.n	8001602 <menu+0x3e>
			menuSayac = 1;
 80015fc:	4b84      	ldr	r3, [pc, #528]	; (8001810 <menu+0x24c>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001602:	4b83      	ldr	r3, [pc, #524]	; (8001810 <menu+0x24c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b12      	cmp	r3, #18
 8001608:	d106      	bne.n	8001618 <menu+0x54>
 800160a:	4b82      	ldr	r3, [pc, #520]	; (8001814 <menu+0x250>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <menu+0x54>
			menuSayac = 21;
 8001612:	4b7f      	ldr	r3, [pc, #508]	; (8001810 <menu+0x24c>)
 8001614:	2215      	movs	r2, #21
 8001616:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001618:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <menu+0x24c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b08      	cmp	r3, #8
 800161e:	d106      	bne.n	800162e <menu+0x6a>
 8001620:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <menu+0x254>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <menu+0x6a>
			menuSayac = 16;
 8001628:	4b79      	ldr	r3, [pc, #484]	; (8001810 <menu+0x24c>)
 800162a:	2210      	movs	r2, #16
 800162c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800162e:	4b78      	ldr	r3, [pc, #480]	; (8001810 <menu+0x24c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0d      	cmp	r3, #13
 8001634:	d106      	bne.n	8001644 <menu+0x80>
 8001636:	4b78      	ldr	r3, [pc, #480]	; (8001818 <menu+0x254>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d102      	bne.n	8001644 <menu+0x80>
			menuSayac = 16;
 800163e:	4b74      	ldr	r3, [pc, #464]	; (8001810 <menu+0x24c>)
 8001640:	2210      	movs	r2, #16
 8001642:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001644:	4b72      	ldr	r3, [pc, #456]	; (8001810 <menu+0x24c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d106      	bne.n	800165a <menu+0x96>
 800164c:	4b72      	ldr	r3, [pc, #456]	; (8001818 <menu+0x254>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d102      	bne.n	800165a <menu+0x96>
			menuSayac = 13;
 8001654:	4b6e      	ldr	r3, [pc, #440]	; (8001810 <menu+0x24c>)
 8001656:	220d      	movs	r2, #13
 8001658:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800165a:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <menu+0x24c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b0a      	cmp	r3, #10
 8001660:	d10a      	bne.n	8001678 <menu+0xb4>
 8001662:	4b6e      	ldr	r3, [pc, #440]	; (800181c <menu+0x258>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d003      	beq.n	8001672 <menu+0xae>
 800166a:	4b6c      	ldr	r3, [pc, #432]	; (800181c <menu+0x258>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d102      	bne.n	8001678 <menu+0xb4>
			menuSayac = 11;
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <menu+0x24c>)
 8001674:	220b      	movs	r2, #11
 8001676:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001678:	4b65      	ldr	r3, [pc, #404]	; (8001810 <menu+0x24c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b0c      	cmp	r3, #12
 800167e:	d10e      	bne.n	800169e <menu+0xda>
 8001680:	4b67      	ldr	r3, [pc, #412]	; (8001820 <menu+0x25c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d003      	beq.n	8001690 <menu+0xcc>
 8001688:	4b65      	ldr	r3, [pc, #404]	; (8001820 <menu+0x25c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d106      	bne.n	800169e <menu+0xda>
 8001690:	4b61      	ldr	r3, [pc, #388]	; (8001818 <menu+0x254>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d102      	bne.n	800169e <menu+0xda>
			menuSayac = 16;
 8001698:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <menu+0x24c>)
 800169a:	2210      	movs	r2, #16
 800169c:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <menu+0x24c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d10e      	bne.n	80016c4 <menu+0x100>
 80016a6:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <menu+0x25c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d003      	beq.n	80016b6 <menu+0xf2>
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <menu+0x25c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d106      	bne.n	80016c4 <menu+0x100>
 80016b6:	4b58      	ldr	r3, [pc, #352]	; (8001818 <menu+0x254>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d102      	bne.n	80016c4 <menu+0x100>
			menuSayac = 13;
 80016be:	4b54      	ldr	r3, [pc, #336]	; (8001810 <menu+0x24c>)
 80016c0:	220d      	movs	r2, #13
 80016c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <menu+0x24c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d106      	bne.n	80016da <menu+0x116>
 80016cc:	4b55      	ldr	r3, [pc, #340]	; (8001824 <menu+0x260>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <menu+0x116>
			menuSayac = 16;
 80016d4:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <menu+0x24c>)
 80016d6:	2210      	movs	r2, #16
 80016d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016da:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <menu+0x24c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b18      	cmp	r3, #24
 80016e0:	d106      	bne.n	80016f0 <menu+0x12c>
 80016e2:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <menu+0x250>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <menu+0x12c>
			menuSayac = 26;
 80016ea:	4b49      	ldr	r3, [pc, #292]	; (8001810 <menu+0x24c>)
 80016ec:	221a      	movs	r2, #26
 80016ee:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016f0:	f004 fcd4 	bl	800609c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016f4:	2108      	movs	r1, #8
 80016f6:	484c      	ldr	r0, [pc, #304]	; (8001828 <menu+0x264>)
 80016f8:	f008 faac 	bl	8009c54 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d175      	bne.n	80017ee <menu+0x22a>
 8001702:	4b42      	ldr	r3, [pc, #264]	; (800180c <menu+0x248>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	f083 0301 	eor.w	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d06e      	beq.n	80017ee <menu+0x22a>
		if (menuSayac <= 1) {
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <menu+0x24c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d802      	bhi.n	800171e <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <menu+0x24c>)
 800171a:	2224      	movs	r2, #36	; 0x24
 800171c:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <menu+0x24c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <menu+0x24c>)
 8001728:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800172a:	4b39      	ldr	r3, [pc, #228]	; (8001810 <menu+0x24c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b14      	cmp	r3, #20
 8001730:	d106      	bne.n	8001740 <menu+0x17c>
 8001732:	4b38      	ldr	r3, [pc, #224]	; (8001814 <menu+0x250>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <menu+0x17c>
			menuSayac = 17;
 800173a:	4b35      	ldr	r3, [pc, #212]	; (8001810 <menu+0x24c>)
 800173c:	2211      	movs	r2, #17
 800173e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001740:	4b33      	ldr	r3, [pc, #204]	; (8001810 <menu+0x24c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d106      	bne.n	8001756 <menu+0x192>
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <menu+0x254>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <menu+0x192>
			menuSayac = 7;
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <menu+0x24c>)
 8001752:	2207      	movs	r2, #7
 8001754:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <menu+0x24c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	d106      	bne.n	800176c <menu+0x1a8>
 800175e:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <menu+0x254>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <menu+0x1a8>
			menuSayac = 12;
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <menu+0x24c>)
 8001768:	220c      	movs	r2, #12
 800176a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <menu+0x24c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d106      	bne.n	8001782 <menu+0x1be>
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <menu+0x254>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d102      	bne.n	8001782 <menu+0x1be>
			menuSayac = 8;
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <menu+0x24c>)
 800177e:	2208      	movs	r2, #8
 8001780:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <menu+0x24c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d10a      	bne.n	80017a0 <menu+0x1dc>
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <menu+0x258>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <menu+0x1d6>
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <menu+0x258>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d102      	bne.n	80017a0 <menu+0x1dc>
			menuSayac = 9;
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <menu+0x24c>)
 800179c:	2209      	movs	r2, #9
 800179e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <menu+0x24c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d10a      	bne.n	80017be <menu+0x1fa>
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <menu+0x25c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d003      	beq.n	80017b8 <menu+0x1f4>
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <menu+0x25c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d102      	bne.n	80017be <menu+0x1fa>
			menuSayac = 11;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <menu+0x24c>)
 80017ba:	220b      	movs	r2, #11
 80017bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <menu+0x24c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	d106      	bne.n	80017d4 <menu+0x210>
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <menu+0x260>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d102      	bne.n	80017d4 <menu+0x210>
			menuSayac = 14;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <menu+0x24c>)
 80017d0:	220e      	movs	r2, #14
 80017d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <menu+0x24c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b19      	cmp	r3, #25
 80017da:	d106      	bne.n	80017ea <menu+0x226>
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <menu+0x250>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <menu+0x226>
			menuSayac = 23;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <menu+0x24c>)
 80017e6:	2217      	movs	r2, #23
 80017e8:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017ea:	f004 fc57 	bl	800609c <bekle>
	}

	if (menuSayac == 0) {
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <menu+0x24c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d134      	bne.n	8001860 <menu+0x29c>
		if(dilSecim == 0) {
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <menu+0x268>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d122      	bne.n	8001844 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <menu+0x26c>)
 8001800:	2101      	movs	r1, #1
 8001802:	2001      	movs	r0, #1
 8001804:	e016      	b.n	8001834 <menu+0x270>
 8001806:	bf00      	nop
 8001808:	40010800 	.word	0x40010800
 800180c:	20000d3b 	.word	0x20000d3b
 8001810:	20000d0c 	.word	0x20000d0c
 8001814:	20000d1b 	.word	0x20000d1b
 8001818:	20000d14 	.word	0x20000d14
 800181c:	20000d15 	.word	0x20000d15
 8001820:	20000d16 	.word	0x20000d16
 8001824:	20000d17 	.word	0x20000d17
 8001828:	40011000 	.word	0x40011000
 800182c:	20000d2d 	.word	0x20000d2d
 8001830:	0800d970 	.word	0x0800d970
 8001834:	f7fe ff18 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001838:	4a94      	ldr	r2, [pc, #592]	; (8001a8c <menu+0x4c8>)
 800183a:	2101      	movs	r1, #1
 800183c:	2002      	movs	r0, #2
 800183e:	f7fe ff13 	bl	8000668 <lcd_print>
 8001842:	e00d      	b.n	8001860 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001844:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <menu+0x4cc>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d109      	bne.n	8001860 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800184c:	4a91      	ldr	r2, [pc, #580]	; (8001a94 <menu+0x4d0>)
 800184e:	2101      	movs	r1, #1
 8001850:	2001      	movs	r0, #1
 8001852:	f7fe ff09 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001856:	4a90      	ldr	r2, [pc, #576]	; (8001a98 <menu+0x4d4>)
 8001858:	2101      	movs	r1, #1
 800185a:	2002      	movs	r0, #2
 800185c:	f7fe ff04 	bl	8000668 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001860:	4b8e      	ldr	r3, [pc, #568]	; (8001a9c <menu+0x4d8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	f040 82b5 	bne.w	8001dd4 <menu+0x810>
		if(dilSecim == 0) {
 800186a:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <menu+0x4cc>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001872:	4a8b      	ldr	r2, [pc, #556]	; (8001aa0 <menu+0x4dc>)
 8001874:	2101      	movs	r1, #1
 8001876:	2001      	movs	r0, #1
 8001878:	f7fe fef6 	bl	8000668 <lcd_print>
 800187c:	e008      	b.n	8001890 <menu+0x2cc>
		} else if(dilSecim == 1) {
 800187e:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <menu+0x4cc>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d104      	bne.n	8001890 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001886:	4a87      	ldr	r2, [pc, #540]	; (8001aa4 <menu+0x4e0>)
 8001888:	2101      	movs	r1, #1
 800188a:	2001      	movs	r0, #1
 800188c:	f7fe feec 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001890:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <menu+0x4e4>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d123      	bne.n	80018e0 <menu+0x31c>
			if(dilSecim == 0) {
 8001898:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <menu+0x4cc>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80018a0:	4a82      	ldr	r2, [pc, #520]	; (8001aac <menu+0x4e8>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	2002      	movs	r0, #2
 80018a6:	f7fe fedf 	bl	8000668 <lcd_print>
 80018aa:	e008      	b.n	80018be <menu+0x2fa>

			} else if(dilSecim == 1) {
 80018ac:	4b78      	ldr	r3, [pc, #480]	; (8001a90 <menu+0x4cc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d104      	bne.n	80018be <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80018b4:	4a7e      	ldr	r2, [pc, #504]	; (8001ab0 <menu+0x4ec>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	2002      	movs	r0, #2
 80018ba:	f7fe fed5 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80018be:	4a7d      	ldr	r2, [pc, #500]	; (8001ab4 <menu+0x4f0>)
 80018c0:	210f      	movs	r1, #15
 80018c2:	2002      	movs	r0, #2
 80018c4:	f7fe fed0 	bl	8000668 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80018c8:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <menu+0x4f4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	220a      	movs	r2, #10
 80018ce:	497b      	ldr	r1, [pc, #492]	; (8001abc <menu+0x4f8>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00b f9eb 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 80018d6:	4a79      	ldr	r2, [pc, #484]	; (8001abc <menu+0x4f8>)
 80018d8:	210e      	movs	r1, #14
 80018da:	2002      	movs	r0, #2
 80018dc:	f7fe fec4 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80018e0:	4b71      	ldr	r3, [pc, #452]	; (8001aa8 <menu+0x4e4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d123      	bne.n	8001930 <menu+0x36c>
			if(dilSecim == 0) {
 80018e8:	4b69      	ldr	r3, [pc, #420]	; (8001a90 <menu+0x4cc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80018f0:	4a73      	ldr	r2, [pc, #460]	; (8001ac0 <menu+0x4fc>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	2002      	movs	r0, #2
 80018f6:	f7fe feb7 	bl	8000668 <lcd_print>
 80018fa:	e008      	b.n	800190e <menu+0x34a>
			} else if(dilSecim == 1) {
 80018fc:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <menu+0x4cc>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d104      	bne.n	800190e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001904:	4a6f      	ldr	r2, [pc, #444]	; (8001ac4 <menu+0x500>)
 8001906:	2101      	movs	r1, #1
 8001908:	2002      	movs	r0, #2
 800190a:	f7fe fead 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800190e:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <menu+0x504>)
 8001910:	210f      	movs	r1, #15
 8001912:	2002      	movs	r0, #2
 8001914:	f7fe fea8 	bl	8000668 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001918:	4b6c      	ldr	r3, [pc, #432]	; (8001acc <menu+0x508>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	220a      	movs	r2, #10
 800191e:	4967      	ldr	r1, [pc, #412]	; (8001abc <menu+0x4f8>)
 8001920:	4618      	mov	r0, r3
 8001922:	f00b f9c3 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 8001926:	4a65      	ldr	r2, [pc, #404]	; (8001abc <menu+0x4f8>)
 8001928:	210e      	movs	r1, #14
 800192a:	2002      	movs	r0, #2
 800192c:	f7fe fe9c 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001930:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <menu+0x4e4>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d123      	bne.n	8001980 <menu+0x3bc>
			if(dilSecim == 0) {
 8001938:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <menu+0x4cc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001940:	4a63      	ldr	r2, [pc, #396]	; (8001ad0 <menu+0x50c>)
 8001942:	2101      	movs	r1, #1
 8001944:	2002      	movs	r0, #2
 8001946:	f7fe fe8f 	bl	8000668 <lcd_print>
 800194a:	e008      	b.n	800195e <menu+0x39a>
			} else if(dilSecim == 1) {
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <menu+0x4cc>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d104      	bne.n	800195e <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001954:	4a5f      	ldr	r2, [pc, #380]	; (8001ad4 <menu+0x510>)
 8001956:	2101      	movs	r1, #1
 8001958:	2002      	movs	r0, #2
 800195a:	f7fe fe85 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800195e:	4a5a      	ldr	r2, [pc, #360]	; (8001ac8 <menu+0x504>)
 8001960:	210f      	movs	r1, #15
 8001962:	2002      	movs	r0, #2
 8001964:	f7fe fe80 	bl	8000668 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <menu+0x514>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	220a      	movs	r2, #10
 800196e:	4953      	ldr	r1, [pc, #332]	; (8001abc <menu+0x4f8>)
 8001970:	4618      	mov	r0, r3
 8001972:	f00b f99b 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 8001976:	4a51      	ldr	r2, [pc, #324]	; (8001abc <menu+0x4f8>)
 8001978:	210e      	movs	r1, #14
 800197a:	2002      	movs	r0, #2
 800197c:	f7fe fe74 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001980:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <menu+0x4e4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d123      	bne.n	80019d0 <menu+0x40c>
			if(dilSecim == 0) {
 8001988:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <menu+0x4cc>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <menu+0x518>)
 8001992:	2101      	movs	r1, #1
 8001994:	2002      	movs	r0, #2
 8001996:	f7fe fe67 	bl	8000668 <lcd_print>
 800199a:	e008      	b.n	80019ae <menu+0x3ea>
			} else if(dilSecim == 1) {
 800199c:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <menu+0x4cc>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d104      	bne.n	80019ae <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80019a4:	4a4e      	ldr	r2, [pc, #312]	; (8001ae0 <menu+0x51c>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	2002      	movs	r0, #2
 80019aa:	f7fe fe5d 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019ae:	4a46      	ldr	r2, [pc, #280]	; (8001ac8 <menu+0x504>)
 80019b0:	210f      	movs	r1, #15
 80019b2:	2002      	movs	r0, #2
 80019b4:	f7fe fe58 	bl	8000668 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80019b8:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <menu+0x520>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	220a      	movs	r2, #10
 80019be:	493f      	ldr	r1, [pc, #252]	; (8001abc <menu+0x4f8>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00b f973 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 80019c6:	4a3d      	ldr	r2, [pc, #244]	; (8001abc <menu+0x4f8>)
 80019c8:	210e      	movs	r1, #14
 80019ca:	2002      	movs	r0, #2
 80019cc:	f7fe fe4c 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <menu+0x4e4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d123      	bne.n	8001a20 <menu+0x45c>
			if(dilSecim == 0) {
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <menu+0x4cc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80019e0:	4a41      	ldr	r2, [pc, #260]	; (8001ae8 <menu+0x524>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7fe fe3f 	bl	8000668 <lcd_print>
 80019ea:	e008      	b.n	80019fe <menu+0x43a>
			} else if(dilSecim == 1) {
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <menu+0x4cc>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d104      	bne.n	80019fe <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80019f4:	4a3d      	ldr	r2, [pc, #244]	; (8001aec <menu+0x528>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	2002      	movs	r0, #2
 80019fa:	f7fe fe35 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019fe:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <menu+0x504>)
 8001a00:	210f      	movs	r1, #15
 8001a02:	2002      	movs	r0, #2
 8001a04:	f7fe fe30 	bl	8000668 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001a08:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <menu+0x52c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	492b      	ldr	r1, [pc, #172]	; (8001abc <menu+0x4f8>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00b f94b 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 8001a16:	4a29      	ldr	r2, [pc, #164]	; (8001abc <menu+0x4f8>)
 8001a18:	210e      	movs	r1, #14
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f7fe fe24 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <menu+0x4e4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d123      	bne.n	8001a70 <menu+0x4ac>
			if(dilSecim == 0) {
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <menu+0x4cc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001a30:	4a30      	ldr	r2, [pc, #192]	; (8001af4 <menu+0x530>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7fe fe17 	bl	8000668 <lcd_print>
 8001a3a:	e008      	b.n	8001a4e <menu+0x48a>
			} else if(dilSecim == 1) {
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <menu+0x4cc>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d104      	bne.n	8001a4e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001a44:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <menu+0x534>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7fe fe0d 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <menu+0x504>)
 8001a50:	210f      	movs	r1, #15
 8001a52:	2002      	movs	r0, #2
 8001a54:	f7fe fe08 	bl	8000668 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <menu+0x538>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	4917      	ldr	r1, [pc, #92]	; (8001abc <menu+0x4f8>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f00b f923 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <menu+0x4f8>)
 8001a68:	210e      	movs	r1, #14
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7fe fdfc 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <menu+0x4e4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b06      	cmp	r3, #6
 8001a76:	d15f      	bne.n	8001b38 <menu+0x574>
			if(dilSecim == 0) {
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <menu+0x4cc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d141      	bne.n	8001b04 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <menu+0x53c>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	2002      	movs	r0, #2
 8001a86:	f7fe fdef 	bl	8000668 <lcd_print>
 8001a8a:	e044      	b.n	8001b16 <menu+0x552>
 8001a8c:	0800d984 	.word	0x0800d984
 8001a90:	20000d2d 	.word	0x20000d2d
 8001a94:	0800d998 	.word	0x0800d998
 8001a98:	0800d9ac 	.word	0x0800d9ac
 8001a9c:	20000d0c 	.word	0x20000d0c
 8001aa0:	0800d9c0 	.word	0x0800d9c0
 8001aa4:	0800d9d4 	.word	0x0800d9d4
 8001aa8:	20000d0e 	.word	0x20000d0e
 8001aac:	0800d9e8 	.word	0x0800d9e8
 8001ab0:	0800d9f8 	.word	0x0800d9f8
 8001ab4:	0800da08 	.word	0x0800da08
 8001ab8:	20000d2e 	.word	0x20000d2e
 8001abc:	20000cac 	.word	0x20000cac
 8001ac0:	0800da0c 	.word	0x0800da0c
 8001ac4:	0800da1c 	.word	0x0800da1c
 8001ac8:	0800da2c 	.word	0x0800da2c
 8001acc:	20000d2f 	.word	0x20000d2f
 8001ad0:	0800da30 	.word	0x0800da30
 8001ad4:	0800da40 	.word	0x0800da40
 8001ad8:	20000d30 	.word	0x20000d30
 8001adc:	0800da50 	.word	0x0800da50
 8001ae0:	0800da60 	.word	0x0800da60
 8001ae4:	20000d31 	.word	0x20000d31
 8001ae8:	0800da70 	.word	0x0800da70
 8001aec:	0800da80 	.word	0x0800da80
 8001af0:	20000d32 	.word	0x20000d32
 8001af4:	0800da90 	.word	0x0800da90
 8001af8:	0800daa0 	.word	0x0800daa0
 8001afc:	20000d33 	.word	0x20000d33
 8001b00:	0800dab0 	.word	0x0800dab0
			} else if(dilSecim == 1) {
 8001b04:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <menu+0x680>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d104      	bne.n	8001b16 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001b0c:	4a4e      	ldr	r2, [pc, #312]	; (8001c48 <menu+0x684>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7fe fda9 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b16:	4a4d      	ldr	r2, [pc, #308]	; (8001c4c <menu+0x688>)
 8001b18:	210f      	movs	r1, #15
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f7fe fda4 	bl	8000668 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <menu+0x68c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	220a      	movs	r2, #10
 8001b26:	494b      	ldr	r1, [pc, #300]	; (8001c54 <menu+0x690>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00b f8bf 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 8001b2e:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <menu+0x690>)
 8001b30:	210e      	movs	r1, #14
 8001b32:	2002      	movs	r0, #2
 8001b34:	f7fe fd98 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <menu+0x694>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b07      	cmp	r3, #7
 8001b3e:	d123      	bne.n	8001b88 <menu+0x5c4>
			if(dilSecim == 0) {
 8001b40:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <menu+0x680>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001b48:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <menu+0x698>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7fe fd8b 	bl	8000668 <lcd_print>
 8001b52:	e008      	b.n	8001b66 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <menu+0x680>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d104      	bne.n	8001b66 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001b5c:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <menu+0x69c>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2002      	movs	r0, #2
 8001b62:	f7fe fd81 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b66:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <menu+0x688>)
 8001b68:	210f      	movs	r1, #15
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f7fe fd7c 	bl	8000668 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b70:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <menu+0x6a0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	220a      	movs	r2, #10
 8001b76:	4937      	ldr	r1, [pc, #220]	; (8001c54 <menu+0x690>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00b f897 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 8001b7e:	4a35      	ldr	r2, [pc, #212]	; (8001c54 <menu+0x690>)
 8001b80:	210e      	movs	r1, #14
 8001b82:	2002      	movs	r0, #2
 8001b84:	f7fe fd70 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b88:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <menu+0x694>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d123      	bne.n	8001bd8 <menu+0x614>
			if(dilSecim == 0) {
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <menu+0x680>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001b98:	4a33      	ldr	r2, [pc, #204]	; (8001c68 <menu+0x6a4>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7fe fd63 	bl	8000668 <lcd_print>
 8001ba2:	e008      	b.n	8001bb6 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <menu+0x680>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d104      	bne.n	8001bb6 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001bac:	4a2f      	ldr	r2, [pc, #188]	; (8001c6c <menu+0x6a8>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f7fe fd59 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bb6:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <menu+0x688>)
 8001bb8:	210f      	movs	r1, #15
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f7fe fd54 	bl	8000668 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <menu+0x6ac>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	4923      	ldr	r1, [pc, #140]	; (8001c54 <menu+0x690>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00b f86f 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <menu+0x690>)
 8001bd0:	210e      	movs	r1, #14
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f7fe fd48 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <menu+0x694>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	d123      	bne.n	8001c28 <menu+0x664>
			if(dilSecim == 0) {
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <menu+0x680>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001be8:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <menu+0x6b0>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	2002      	movs	r0, #2
 8001bee:	f7fe fd3b 	bl	8000668 <lcd_print>
 8001bf2:	e008      	b.n	8001c06 <menu+0x642>
			} else if(dilSecim == 1) {
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <menu+0x680>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d104      	bne.n	8001c06 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <menu+0x6b4>)
 8001bfe:	2101      	movs	r1, #1
 8001c00:	2002      	movs	r0, #2
 8001c02:	f7fe fd31 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <menu+0x6b8>)
 8001c08:	2110      	movs	r1, #16
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f7fe fd2c 	bl	8000668 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <menu+0x6bc>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	220a      	movs	r2, #10
 8001c16:	490f      	ldr	r1, [pc, #60]	; (8001c54 <menu+0x690>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00b f847 	bl	800ccac <itoa>
			lcd_print(2, 15, snum);
 8001c1e:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <menu+0x690>)
 8001c20:	210f      	movs	r1, #15
 8001c22:	2002      	movs	r0, #2
 8001c24:	f7fe fd20 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <menu+0x694>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b0a      	cmp	r3, #10
 8001c2e:	d134      	bne.n	8001c9a <menu+0x6d6>
			if(dilSecim == 0) {
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <menu+0x680>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d127      	bne.n	8001c88 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <menu+0x6c0>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7fe fd13 	bl	8000668 <lcd_print>
 8001c42:	e02a      	b.n	8001c9a <menu+0x6d6>
 8001c44:	20000d2d 	.word	0x20000d2d
 8001c48:	0800dac0 	.word	0x0800dac0
 8001c4c:	0800da2c 	.word	0x0800da2c
 8001c50:	20000d34 	.word	0x20000d34
 8001c54:	20000cac 	.word	0x20000cac
 8001c58:	20000d0e 	.word	0x20000d0e
 8001c5c:	0800dad0 	.word	0x0800dad0
 8001c60:	0800dae0 	.word	0x0800dae0
 8001c64:	20000d35 	.word	0x20000d35
 8001c68:	0800daf0 	.word	0x0800daf0
 8001c6c:	0800db00 	.word	0x0800db00
 8001c70:	20000d36 	.word	0x20000d36
 8001c74:	0800db10 	.word	0x0800db10
 8001c78:	0800db20 	.word	0x0800db20
 8001c7c:	0800db30 	.word	0x0800db30
 8001c80:	20000d37 	.word	0x20000d37
 8001c84:	0800db34 	.word	0x0800db34
			} else if(dilSecim == 1) {
 8001c88:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <menu+0x8d0>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d104      	bne.n	8001c9a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001c90:	4a81      	ldr	r2, [pc, #516]	; (8001e98 <menu+0x8d4>)
 8001c92:	2101      	movs	r1, #1
 8001c94:	2002      	movs	r0, #2
 8001c96:	f7fe fce7 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	487f      	ldr	r0, [pc, #508]	; (8001e9c <menu+0x8d8>)
 8001c9e:	f007 ffd9 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d119      	bne.n	8001cdc <menu+0x718>
 8001ca8:	4b7d      	ldr	r3, [pc, #500]	; (8001ea0 <menu+0x8dc>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	f083 0301 	eor.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d012      	beq.n	8001cdc <menu+0x718>
 8001cb6:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <menu+0x8e0>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001cbe:	4b7a      	ldr	r3, [pc, #488]	; (8001ea8 <menu+0x8e4>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <menu+0x8e4>)
 8001cc8:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001cca:	4b77      	ldr	r3, [pc, #476]	; (8001ea8 <menu+0x8e4>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b0a      	cmp	r3, #10
 8001cd0:	d902      	bls.n	8001cd8 <menu+0x714>
				hataGostermeSirasi = 0;
 8001cd2:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <menu+0x8e4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cd8:	f004 f9e0 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cdc:	2104      	movs	r1, #4
 8001cde:	486f      	ldr	r0, [pc, #444]	; (8001e9c <menu+0x8d8>)
 8001ce0:	f007 ffb8 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d119      	bne.n	8001d1e <menu+0x75a>
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <menu+0x8dc>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	f083 0301 	eor.w	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <menu+0x75a>
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <menu+0x8e0>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10e      	bne.n	8001d1e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001d00:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <menu+0x8e4>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <menu+0x8e4>)
 8001d0a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001d0c:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <menu+0x8e4>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b0b      	cmp	r3, #11
 8001d12:	d902      	bls.n	8001d1a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001d14:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <menu+0x8e4>)
 8001d16:	220a      	movs	r2, #10
 8001d18:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d1a:	f004 f9bf 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001d1e:	2108      	movs	r1, #8
 8001d20:	485e      	ldr	r0, [pc, #376]	; (8001e9c <menu+0x8d8>)
 8001d22:	f007 ff97 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d153      	bne.n	8001dd4 <menu+0x810>
 8001d2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <menu+0x8dc>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f083 0301 	eor.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d04c      	beq.n	8001dd4 <menu+0x810>
 8001d3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <menu+0x8e4>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b0a      	cmp	r3, #10
 8001d40:	d148      	bne.n	8001dd4 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001d42:	4b5a      	ldr	r3, [pc, #360]	; (8001eac <menu+0x8e8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <menu+0x8ec>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001d50:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <menu+0x8f0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <menu+0x8ec>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001d5e:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <menu+0x8f4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <menu+0x8ec>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <menu+0x8f8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <menu+0x8ec>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001d7a:	4b51      	ldr	r3, [pc, #324]	; (8001ec0 <menu+0x8fc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <menu+0x8ec>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d88:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <menu+0x900>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <menu+0x8ec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <menu+0x904>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <menu+0x8ec>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001da4:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <menu+0x908>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <menu+0x8ec>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <menu+0x90c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <menu+0x8ec>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001dc0:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <menu+0x910>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <menu+0x8ec>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001dce:	4b42      	ldr	r3, [pc, #264]	; (8001ed8 <menu+0x914>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001dd4:	4b41      	ldr	r3, [pc, #260]	; (8001edc <menu+0x918>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	f040 80fc 	bne.w	8001fd6 <menu+0xa12>
		if(dilSecim == 0) {
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <menu+0x8d0>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001de6:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <menu+0x91c>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7fe fc3c 	bl	8000668 <lcd_print>
 8001df0:	e008      	b.n	8001e04 <menu+0x840>
		} else if(dilSecim == 1) {
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <menu+0x8d0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d104      	bne.n	8001e04 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001dfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ee4 <menu+0x920>)
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7fe fc32 	bl	8000668 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <menu+0x8e0>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d003      	beq.n	8001e14 <menu+0x850>
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <menu+0x8e0>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d112      	bne.n	8001e3a <menu+0x876>
			if(dilSecim == 0) {
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <menu+0x8d0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001e1c:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <menu+0x924>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2002      	movs	r0, #2
 8001e22:	f7fe fc21 	bl	8000668 <lcd_print>
 8001e26:	e008      	b.n	8001e3a <menu+0x876>
			} else if(dilSecim == 1) {
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <menu+0x8d0>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d104      	bne.n	8001e3a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e30:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <menu+0x928>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	2002      	movs	r0, #2
 8001e36:	f7fe fc17 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <menu+0x92c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <menu+0x8ac>
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <menu+0x8e0>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d112      	bne.n	8001e70 <menu+0x8ac>
			if(dilSecim == 0) {
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <menu+0x8d0>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e52:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <menu+0x930>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	2002      	movs	r0, #2
 8001e58:	f7fe fc06 	bl	8000668 <lcd_print>
 8001e5c:	e008      	b.n	8001e70 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <menu+0x8d0>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d104      	bne.n	8001e70 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001e66:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <menu+0x934>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f7fe fbfc 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <menu+0x92c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d14c      	bne.n	8001f12 <menu+0x94e>
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <menu+0x8e0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d148      	bne.n	8001f12 <menu+0x94e>
			if(dilSecim == 0) {
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <menu+0x8d0>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d13b      	bne.n	8001f00 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <menu+0x938>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f7fe fbeb 	bl	8000668 <lcd_print>
 8001e92:	e03e      	b.n	8001f12 <menu+0x94e>
 8001e94:	20000d2d 	.word	0x20000d2d
 8001e98:	0800db48 	.word	0x0800db48
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	20000d3b 	.word	0x20000d3b
 8001ea4:	20000d1b 	.word	0x20000d1b
 8001ea8:	20000d0e 	.word	0x20000d0e
 8001eac:	20000d2e 	.word	0x20000d2e
 8001eb0:	20000c38 	.word	0x20000c38
 8001eb4:	20000d2f 	.word	0x20000d2f
 8001eb8:	20000d30 	.word	0x20000d30
 8001ebc:	20000d31 	.word	0x20000d31
 8001ec0:	20000d32 	.word	0x20000d32
 8001ec4:	20000d33 	.word	0x20000d33
 8001ec8:	20000d34 	.word	0x20000d34
 8001ecc:	20000d35 	.word	0x20000d35
 8001ed0:	20000d36 	.word	0x20000d36
 8001ed4:	20000d37 	.word	0x20000d37
 8001ed8:	20000d38 	.word	0x20000d38
 8001edc:	20000d0c 	.word	0x20000d0c
 8001ee0:	0800db5c 	.word	0x0800db5c
 8001ee4:	0800db70 	.word	0x0800db70
 8001ee8:	0800db84 	.word	0x0800db84
 8001eec:	0800db98 	.word	0x0800db98
 8001ef0:	20000d0d 	.word	0x20000d0d
 8001ef4:	0800dbac 	.word	0x0800dbac
 8001ef8:	0800dbbc 	.word	0x0800dbbc
 8001efc:	0800dbcc 	.word	0x0800dbcc
			} else if(dilSecim == 1) {
 8001f00:	4b98      	ldr	r3, [pc, #608]	; (8002164 <menu+0xba0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d104      	bne.n	8001f12 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001f08:	4a97      	ldr	r2, [pc, #604]	; (8002168 <menu+0xba4>)
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f7fe fbab 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f12:	2102      	movs	r1, #2
 8001f14:	4895      	ldr	r0, [pc, #596]	; (800216c <menu+0xba8>)
 8001f16:	f007 fe9d 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d119      	bne.n	8001f54 <menu+0x990>
 8001f20:	4b93      	ldr	r3, [pc, #588]	; (8002170 <menu+0xbac>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d012      	beq.n	8001f54 <menu+0x990>
 8001f2e:	4b91      	ldr	r3, [pc, #580]	; (8002174 <menu+0xbb0>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10e      	bne.n	8001f54 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001f36:	4b90      	ldr	r3, [pc, #576]	; (8002178 <menu+0xbb4>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b8e      	ldr	r3, [pc, #568]	; (8002178 <menu+0xbb4>)
 8001f40:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f42:	4b8d      	ldr	r3, [pc, #564]	; (8002178 <menu+0xbb4>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d902      	bls.n	8001f50 <menu+0x98c>
				calismaSekli = 0;
 8001f4a:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <menu+0xbb4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f50:	f004 f8a4 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f54:	2104      	movs	r1, #4
 8001f56:	4885      	ldr	r0, [pc, #532]	; (800216c <menu+0xba8>)
 8001f58:	f007 fe7c 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d119      	bne.n	8001f96 <menu+0x9d2>
 8001f62:	4b83      	ldr	r3, [pc, #524]	; (8002170 <menu+0xbac>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	f083 0301 	eor.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d012      	beq.n	8001f96 <menu+0x9d2>
 8001f70:	4b80      	ldr	r3, [pc, #512]	; (8002174 <menu+0xbb0>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10e      	bne.n	8001f96 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001f78:	4b7f      	ldr	r3, [pc, #508]	; (8002178 <menu+0xbb4>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b7d      	ldr	r3, [pc, #500]	; (8002178 <menu+0xbb4>)
 8001f82:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001f84:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <menu+0xbb4>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <menu+0x9ce>
	    		calismaSekli = 1;
 8001f8c:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <menu+0xbb4>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f92:	f004 f883 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f96:	2108      	movs	r1, #8
 8001f98:	4874      	ldr	r0, [pc, #464]	; (800216c <menu+0xba8>)
 8001f9a:	f007 fe5b 	bl	8009c54 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d118      	bne.n	8001fd6 <menu+0xa12>
 8001fa4:	4b72      	ldr	r3, [pc, #456]	; (8002170 <menu+0xbac>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d011      	beq.n	8001fd6 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001fb2:	4b71      	ldr	r3, [pc, #452]	; (8002178 <menu+0xbb4>)
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	4b71      	ldr	r3, [pc, #452]	; (800217c <menu+0xbb8>)
 8001fb8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001fba:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <menu+0xbb4>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d106      	bne.n	8001fd0 <menu+0xa0c>
				altLimit = 1;
 8001fc2:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <menu+0xbbc>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fc8:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <menu+0xbbc>)
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b6b      	ldr	r3, [pc, #428]	; (800217c <menu+0xbb8>)
 8001fce:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001fd0:	4b6c      	ldr	r3, [pc, #432]	; (8002184 <menu+0xbc0>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001fd6:	4b6c      	ldr	r3, [pc, #432]	; (8002188 <menu+0xbc4>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	f040 8083 	bne.w	80020e6 <menu+0xb22>
		if(dilSecim == 0) {
 8001fe0:	4b60      	ldr	r3, [pc, #384]	; (8002164 <menu+0xba0>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001fe8:	4a68      	ldr	r2, [pc, #416]	; (800218c <menu+0xbc8>)
 8001fea:	2101      	movs	r1, #1
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7fe fb3b 	bl	8000668 <lcd_print>
 8001ff2:	e008      	b.n	8002006 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ff4:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <menu+0xba0>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d104      	bne.n	8002006 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ffc:	4a64      	ldr	r2, [pc, #400]	; (8002190 <menu+0xbcc>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	2001      	movs	r0, #1
 8002002:	f7fe fb31 	bl	8000668 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <menu+0xbd0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d113      	bne.n	8002036 <menu+0xa72>
			if(dilSecim == 0) {
 800200e:	4b55      	ldr	r3, [pc, #340]	; (8002164 <menu+0xba0>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8002016:	4a60      	ldr	r2, [pc, #384]	; (8002198 <menu+0xbd4>)
 8002018:	2101      	movs	r1, #1
 800201a:	2002      	movs	r0, #2
 800201c:	f7fe fb24 	bl	8000668 <lcd_print>
 8002020:	e012      	b.n	8002048 <menu+0xa84>
			} else if(dilSecim == 1) {
 8002022:	4b50      	ldr	r3, [pc, #320]	; (8002164 <menu+0xba0>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10e      	bne.n	8002048 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 800202a:	4a5c      	ldr	r2, [pc, #368]	; (800219c <menu+0xbd8>)
 800202c:	2101      	movs	r1, #1
 800202e:	2002      	movs	r0, #2
 8002030:	f7fe fb1a 	bl	8000668 <lcd_print>
 8002034:	e008      	b.n	8002048 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <menu+0xbd0>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d104      	bne.n	8002048 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800203e:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <menu+0xbdc>)
 8002040:	2101      	movs	r1, #1
 8002042:	2002      	movs	r0, #2
 8002044:	f7fe fb10 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002048:	2102      	movs	r1, #2
 800204a:	4848      	ldr	r0, [pc, #288]	; (800216c <menu+0xba8>)
 800204c:	f007 fe02 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d115      	bne.n	8002082 <menu+0xabe>
 8002056:	4b46      	ldr	r3, [pc, #280]	; (8002170 <menu+0xbac>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f083 0301 	eor.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00e      	beq.n	8002082 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <menu+0xbd0>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b49      	ldr	r3, [pc, #292]	; (8002194 <menu+0xbd0>)
 800206e:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002070:	4b48      	ldr	r3, [pc, #288]	; (8002194 <menu+0xbd0>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d902      	bls.n	800207e <menu+0xaba>
				emniyetCercevesi = 0;
 8002078:	4b46      	ldr	r3, [pc, #280]	; (8002194 <menu+0xbd0>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800207e:	f004 f80d 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002082:	2104      	movs	r1, #4
 8002084:	4839      	ldr	r0, [pc, #228]	; (800216c <menu+0xba8>)
 8002086:	f007 fde5 	bl	8009c54 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d115      	bne.n	80020bc <menu+0xaf8>
 8002090:	4b37      	ldr	r3, [pc, #220]	; (8002170 <menu+0xbac>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f083 0301 	eor.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00e      	beq.n	80020bc <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <menu+0xbd0>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <menu+0xbd0>)
 80020a8:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80020aa:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <menu+0xbd0>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80020b2:	4b38      	ldr	r3, [pc, #224]	; (8002194 <menu+0xbd0>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020b8:	f003 fff0 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80020bc:	2108      	movs	r1, #8
 80020be:	482b      	ldr	r0, [pc, #172]	; (800216c <menu+0xba8>)
 80020c0:	f007 fdc8 	bl	8009c54 <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d10d      	bne.n	80020e6 <menu+0xb22>
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <menu+0xbac>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	f083 0301 	eor.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <menu+0xbd0>)
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <menu+0xbb8>)
 80020de:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <menu+0xbc0>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <menu+0xbc4>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	f040 80ba 	bne.w	8002264 <menu+0xca0>
		if(dilSecim == 0) {
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <menu+0xba0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80020f8:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <menu+0xbe0>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7fe fab3 	bl	8000668 <lcd_print>
 8002102:	e008      	b.n	8002116 <menu+0xb52>
		} else if(dilSecim == 1) {
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <menu+0xba0>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d104      	bne.n	8002116 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <menu+0xbe4>)
 800210e:	2101      	movs	r1, #1
 8002110:	2001      	movs	r0, #1
 8002112:	f7fe faa9 	bl	8000668 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <menu+0xbe8>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d113      	bne.n	8002146 <menu+0xb82>
			if(dilSecim == 0) {
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <menu+0xba0>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d105      	bne.n	8002132 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <menu+0xbd4>)
 8002128:	2101      	movs	r1, #1
 800212a:	2002      	movs	r0, #2
 800212c:	f7fe fa9c 	bl	8000668 <lcd_print>
 8002130:	e049      	b.n	80021c6 <menu+0xc02>
			} else if(dilSecim == 1) {
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <menu+0xba0>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d145      	bne.n	80021c6 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <menu+0xbd8>)
 800213c:	2101      	movs	r1, #1
 800213e:	2002      	movs	r0, #2
 8002140:	f7fe fa92 	bl	8000668 <lcd_print>
 8002144:	e03f      	b.n	80021c6 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <menu+0xbe8>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d13b      	bne.n	80021c6 <menu+0xc02>
			if(dilSecim == 0) {
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <menu+0xba0>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d12e      	bne.n	80021b4 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <menu+0xbec>)
 8002158:	2101      	movs	r1, #1
 800215a:	2002      	movs	r0, #2
 800215c:	f7fe fa84 	bl	8000668 <lcd_print>
 8002160:	e031      	b.n	80021c6 <menu+0xc02>
 8002162:	bf00      	nop
 8002164:	20000d2d 	.word	0x20000d2d
 8002168:	0800dbdc 	.word	0x0800dbdc
 800216c:	40010800 	.word	0x40010800
 8002170:	20000d3b 	.word	0x20000d3b
 8002174:	20000d1b 	.word	0x20000d1b
 8002178:	20000d0d 	.word	0x20000d0d
 800217c:	20000c38 	.word	0x20000c38
 8002180:	20000d12 	.word	0x20000d12
 8002184:	20000d38 	.word	0x20000d38
 8002188:	20000d0c 	.word	0x20000d0c
 800218c:	0800dbec 	.word	0x0800dbec
 8002190:	0800dc00 	.word	0x0800dc00
 8002194:	20000d10 	.word	0x20000d10
 8002198:	0800dc14 	.word	0x0800dc14
 800219c:	0800dc28 	.word	0x0800dc28
 80021a0:	0800dc3c 	.word	0x0800dc3c
 80021a4:	0800dc4c 	.word	0x0800dc4c
 80021a8:	0800dc60 	.word	0x0800dc60
 80021ac:	20000d11 	.word	0x20000d11
 80021b0:	0800dc74 	.word	0x0800dc74
			} else if(dilSecim == 1) {
 80021b4:	4b92      	ldr	r3, [pc, #584]	; (8002400 <menu+0xe3c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d104      	bne.n	80021c6 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80021bc:	4a91      	ldr	r2, [pc, #580]	; (8002404 <menu+0xe40>)
 80021be:	2101      	movs	r1, #1
 80021c0:	2002      	movs	r0, #2
 80021c2:	f7fe fa51 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021c6:	2102      	movs	r1, #2
 80021c8:	488f      	ldr	r0, [pc, #572]	; (8002408 <menu+0xe44>)
 80021ca:	f007 fd43 	bl	8009c54 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d115      	bne.n	8002200 <menu+0xc3c>
 80021d4:	4b8d      	ldr	r3, [pc, #564]	; (800240c <menu+0xe48>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00e      	beq.n	8002200 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <menu+0xe4c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	3301      	adds	r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b89      	ldr	r3, [pc, #548]	; (8002410 <menu+0xe4c>)
 80021ec:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <menu+0xe4c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d902      	bls.n	80021fc <menu+0xc38>
				yavaslamaLimit = 0;
 80021f6:	4b86      	ldr	r3, [pc, #536]	; (8002410 <menu+0xe4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021fc:	f003 ff4e 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002200:	2104      	movs	r1, #4
 8002202:	4881      	ldr	r0, [pc, #516]	; (8002408 <menu+0xe44>)
 8002204:	f007 fd26 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	2b01      	cmp	r3, #1
 800220c:	d115      	bne.n	800223a <menu+0xc76>
 800220e:	4b7f      	ldr	r3, [pc, #508]	; (800240c <menu+0xe48>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <menu+0xe4c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	3b01      	subs	r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <menu+0xe4c>)
 8002226:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002228:	4b79      	ldr	r3, [pc, #484]	; (8002410 <menu+0xe4c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002230:	4b77      	ldr	r3, [pc, #476]	; (8002410 <menu+0xe4c>)
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002236:	f003 ff31 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800223a:	2108      	movs	r1, #8
 800223c:	4872      	ldr	r0, [pc, #456]	; (8002408 <menu+0xe44>)
 800223e:	f007 fd09 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10d      	bne.n	8002264 <menu+0xca0>
 8002248:	4b70      	ldr	r3, [pc, #448]	; (800240c <menu+0xe48>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002256:	4b6e      	ldr	r3, [pc, #440]	; (8002410 <menu+0xe4c>)
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <menu+0xe50>)
 800225c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800225e:	4b6e      	ldr	r3, [pc, #440]	; (8002418 <menu+0xe54>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002264:	4b6d      	ldr	r3, [pc, #436]	; (800241c <menu+0xe58>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b05      	cmp	r3, #5
 800226a:	f040 80b9 	bne.w	80023e0 <menu+0xe1c>
		if(dilSecim == 0) {
 800226e:	4b64      	ldr	r3, [pc, #400]	; (8002400 <menu+0xe3c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002276:	4a6a      	ldr	r2, [pc, #424]	; (8002420 <menu+0xe5c>)
 8002278:	2101      	movs	r1, #1
 800227a:	2001      	movs	r0, #1
 800227c:	f7fe f9f4 	bl	8000668 <lcd_print>
 8002280:	e008      	b.n	8002294 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002282:	4b5f      	ldr	r3, [pc, #380]	; (8002400 <menu+0xe3c>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d104      	bne.n	8002294 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800228a:	4a66      	ldr	r2, [pc, #408]	; (8002424 <menu+0xe60>)
 800228c:	2101      	movs	r1, #1
 800228e:	2001      	movs	r0, #1
 8002290:	f7fe f9ea 	bl	8000668 <lcd_print>
		}

		if(altLimit == 0) {
 8002294:	4b64      	ldr	r3, [pc, #400]	; (8002428 <menu+0xe64>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d113      	bne.n	80022c4 <menu+0xd00>
			if(dilSecim == 0) {
 800229c:	4b58      	ldr	r3, [pc, #352]	; (8002400 <menu+0xe3c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80022a4:	4a61      	ldr	r2, [pc, #388]	; (800242c <menu+0xe68>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	2002      	movs	r0, #2
 80022aa:	f7fe f9dd 	bl	8000668 <lcd_print>
 80022ae:	e020      	b.n	80022f2 <menu+0xd2e>
			} else if(dilSecim == 1) {
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <menu+0xe3c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d11c      	bne.n	80022f2 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80022b8:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <menu+0xe6c>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	2002      	movs	r0, #2
 80022be:	f7fe f9d3 	bl	8000668 <lcd_print>
 80022c2:	e016      	b.n	80022f2 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80022c4:	4b58      	ldr	r3, [pc, #352]	; (8002428 <menu+0xe64>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d112      	bne.n	80022f2 <menu+0xd2e>
			if(dilSecim == 0){
 80022cc:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <menu+0xe3c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80022d4:	4a57      	ldr	r2, [pc, #348]	; (8002434 <menu+0xe70>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	2002      	movs	r0, #2
 80022da:	f7fe f9c5 	bl	8000668 <lcd_print>
 80022de:	e008      	b.n	80022f2 <menu+0xd2e>
			} else if(dilSecim == 1){
 80022e0:	4b47      	ldr	r3, [pc, #284]	; (8002400 <menu+0xe3c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d104      	bne.n	80022f2 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80022e8:	4a46      	ldr	r2, [pc, #280]	; (8002404 <menu+0xe40>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	2002      	movs	r0, #2
 80022ee:	f7fe f9bb 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80022f2:	2102      	movs	r1, #2
 80022f4:	4844      	ldr	r0, [pc, #272]	; (8002408 <menu+0xe44>)
 80022f6:	f007 fcad 	bl	8009c54 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d119      	bne.n	8002334 <menu+0xd70>
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <menu+0xe48>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f083 0301 	eor.w	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <menu+0xd70>
 800230e:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <menu+0xe74>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10e      	bne.n	8002334 <menu+0xd70>
			altLimit = altLimit + 1;
 8002316:	4b44      	ldr	r3, [pc, #272]	; (8002428 <menu+0xe64>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b42      	ldr	r3, [pc, #264]	; (8002428 <menu+0xe64>)
 8002320:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <menu+0xe64>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d902      	bls.n	8002330 <menu+0xd6c>
				altLimit = 0;
 800232a:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <menu+0xe64>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002330:	f003 feb4 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002334:	2104      	movs	r1, #4
 8002336:	4834      	ldr	r0, [pc, #208]	; (8002408 <menu+0xe44>)
 8002338:	f007 fc8c 	bl	8009c54 <HAL_GPIO_ReadPin>
 800233c:	4603      	mov	r3, r0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d119      	bne.n	8002376 <menu+0xdb2>
 8002342:	4b32      	ldr	r3, [pc, #200]	; (800240c <menu+0xe48>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f083 0301 	eor.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d012      	beq.n	8002376 <menu+0xdb2>
 8002350:	4b39      	ldr	r3, [pc, #228]	; (8002438 <menu+0xe74>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10e      	bne.n	8002376 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002358:	4b33      	ldr	r3, [pc, #204]	; (8002428 <menu+0xe64>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	3b01      	subs	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <menu+0xe64>)
 8002362:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <menu+0xe64>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <menu+0xdae>
		   		altLimit = 1;
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <menu+0xe64>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002372:	f003 fe93 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002376:	2108      	movs	r1, #8
 8002378:	4823      	ldr	r0, [pc, #140]	; (8002408 <menu+0xe44>)
 800237a:	f007 fc6b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800237e:	4603      	mov	r3, r0
 8002380:	2b01      	cmp	r3, #1
 8002382:	d12d      	bne.n	80023e0 <menu+0xe1c>
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <menu+0xe48>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	f083 0301 	eor.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d026      	beq.n	80023e0 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <menu+0xe64>)
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <menu+0xe50>)
 8002398:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <menu+0xe64>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d110      	bne.n	80023c4 <menu+0xe00>
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <menu+0xe78>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <menu+0xdee>
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <menu+0xe78>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d108      	bne.n	80023c4 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <menu+0xe78>)
 80023b4:	2203      	movs	r2, #3
 80023b6:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <menu+0xe78>)
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <menu+0xe50>)
 80023be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80023c2:	e00a      	b.n	80023da <menu+0xe16>
			} else if(altLimit == 0) {
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <menu+0xe64>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d106      	bne.n	80023da <menu+0xe16>
				platformSilindirTipi = 0;
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <menu+0xe7c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <menu+0xe7c>)
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <menu+0xe50>)
 80023d8:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <menu+0xe54>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <menu+0xe58>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	f040 80b6 	bne.w	8002556 <menu+0xf92>
		if(dilSecim == 0) {
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <menu+0xe3c>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d12a      	bne.n	8002448 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80023f2:	4a14      	ldr	r2, [pc, #80]	; (8002444 <menu+0xe80>)
 80023f4:	2101      	movs	r1, #1
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7fe f936 	bl	8000668 <lcd_print>
 80023fc:	e02d      	b.n	800245a <menu+0xe96>
 80023fe:	bf00      	nop
 8002400:	20000d2d 	.word	0x20000d2d
 8002404:	0800dc88 	.word	0x0800dc88
 8002408:	40010800 	.word	0x40010800
 800240c:	20000d3b 	.word	0x20000d3b
 8002410:	20000d11 	.word	0x20000d11
 8002414:	20000c38 	.word	0x20000c38
 8002418:	20000d38 	.word	0x20000d38
 800241c:	20000d0c 	.word	0x20000d0c
 8002420:	0800dc9c 	.word	0x0800dc9c
 8002424:	0800dcb0 	.word	0x0800dcb0
 8002428:	20000d12 	.word	0x20000d12
 800242c:	0800dc14 	.word	0x0800dc14
 8002430:	0800dc28 	.word	0x0800dc28
 8002434:	0800dc74 	.word	0x0800dc74
 8002438:	20000d0d 	.word	0x20000d0d
 800243c:	20000d19 	.word	0x20000d19
 8002440:	20000d1f 	.word	0x20000d1f
 8002444:	0800dcc4 	.word	0x0800dcc4
		} else if(dilSecim == 1){
 8002448:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <menu+0x1070>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d104      	bne.n	800245a <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002450:	4a79      	ldr	r2, [pc, #484]	; (8002638 <menu+0x1074>)
 8002452:	2101      	movs	r1, #1
 8002454:	2001      	movs	r0, #1
 8002456:	f7fe f907 	bl	8000668 <lcd_print>
		}
		if(basincSalteri == 0){
 800245a:	4b78      	ldr	r3, [pc, #480]	; (800263c <menu+0x1078>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d113      	bne.n	800248a <menu+0xec6>
			if(dilSecim == 0) {
 8002462:	4b74      	ldr	r3, [pc, #464]	; (8002634 <menu+0x1070>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <menu+0x107c>)
 800246c:	2101      	movs	r1, #1
 800246e:	2002      	movs	r0, #2
 8002470:	f7fe f8fa 	bl	8000668 <lcd_print>
 8002474:	e020      	b.n	80024b8 <menu+0xef4>
			} else if(dilSecim == 1){
 8002476:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <menu+0x1070>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d11c      	bne.n	80024b8 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800247e:	4a71      	ldr	r2, [pc, #452]	; (8002644 <menu+0x1080>)
 8002480:	2101      	movs	r1, #1
 8002482:	2002      	movs	r0, #2
 8002484:	f7fe f8f0 	bl	8000668 <lcd_print>
 8002488:	e016      	b.n	80024b8 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800248a:	4b6c      	ldr	r3, [pc, #432]	; (800263c <menu+0x1078>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d112      	bne.n	80024b8 <menu+0xef4>
			if(dilSecim == 0) {
 8002492:	4b68      	ldr	r3, [pc, #416]	; (8002634 <menu+0x1070>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800249a:	4a6b      	ldr	r2, [pc, #428]	; (8002648 <menu+0x1084>)
 800249c:	2101      	movs	r1, #1
 800249e:	2002      	movs	r0, #2
 80024a0:	f7fe f8e2 	bl	8000668 <lcd_print>
 80024a4:	e008      	b.n	80024b8 <menu+0xef4>
			} else if(dilSecim == 1) {
 80024a6:	4b63      	ldr	r3, [pc, #396]	; (8002634 <menu+0x1070>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d104      	bne.n	80024b8 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80024ae:	4a67      	ldr	r2, [pc, #412]	; (800264c <menu+0x1088>)
 80024b0:	2101      	movs	r1, #1
 80024b2:	2002      	movs	r0, #2
 80024b4:	f7fe f8d8 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024b8:	2102      	movs	r1, #2
 80024ba:	4865      	ldr	r0, [pc, #404]	; (8002650 <menu+0x108c>)
 80024bc:	f007 fbca 	bl	8009c54 <HAL_GPIO_ReadPin>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d115      	bne.n	80024f2 <menu+0xf2e>
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <menu+0x1090>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00e      	beq.n	80024f2 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <menu+0x1078>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b57      	ldr	r3, [pc, #348]	; (800263c <menu+0x1078>)
 80024de:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80024e0:	4b56      	ldr	r3, [pc, #344]	; (800263c <menu+0x1078>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d902      	bls.n	80024ee <menu+0xf2a>
				basincSalteri = 0;
 80024e8:	4b54      	ldr	r3, [pc, #336]	; (800263c <menu+0x1078>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024ee:	f003 fdd5 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f2:	2104      	movs	r1, #4
 80024f4:	4856      	ldr	r0, [pc, #344]	; (8002650 <menu+0x108c>)
 80024f6:	f007 fbad 	bl	8009c54 <HAL_GPIO_ReadPin>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d115      	bne.n	800252c <menu+0xf68>
 8002500:	4b54      	ldr	r3, [pc, #336]	; (8002654 <menu+0x1090>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	f083 0301 	eor.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00e      	beq.n	800252c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800250e:	4b4b      	ldr	r3, [pc, #300]	; (800263c <menu+0x1078>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3b01      	subs	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b49      	ldr	r3, [pc, #292]	; (800263c <menu+0x1078>)
 8002518:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <menu+0x1078>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <menu+0xf64>
		   		basincSalteri = 1;
 8002522:	4b46      	ldr	r3, [pc, #280]	; (800263c <menu+0x1078>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002528:	f003 fdb8 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800252c:	2108      	movs	r1, #8
 800252e:	4848      	ldr	r0, [pc, #288]	; (8002650 <menu+0x108c>)
 8002530:	f007 fb90 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10d      	bne.n	8002556 <menu+0xf92>
 800253a:	4b46      	ldr	r3, [pc, #280]	; (8002654 <menu+0x1090>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	f083 0301 	eor.w	r3, r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002548:	4b3c      	ldr	r3, [pc, #240]	; (800263c <menu+0x1078>)
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	4b42      	ldr	r3, [pc, #264]	; (8002658 <menu+0x1094>)
 800254e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <menu+0x1098>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <menu+0x109c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b07      	cmp	r3, #7
 800255c:	f040 80f5 	bne.w	800274a <menu+0x1186>
		if(dilSecim == 0) {
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <menu+0x1070>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002568:	4a3e      	ldr	r2, [pc, #248]	; (8002664 <menu+0x10a0>)
 800256a:	2101      	movs	r1, #1
 800256c:	2001      	movs	r0, #1
 800256e:	f7fe f87b 	bl	8000668 <lcd_print>
 8002572:	e008      	b.n	8002586 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <menu+0x1070>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d104      	bne.n	8002586 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800257c:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <menu+0x10a4>)
 800257e:	2101      	movs	r1, #1
 8002580:	2001      	movs	r0, #1
 8002582:	f7fe f871 	bl	8000668 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <menu+0x10a8>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d113      	bne.n	80025b6 <menu+0xff2>
			if(dilSecim == 0) {
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <menu+0x1070>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002596:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <menu+0x107c>)
 8002598:	2101      	movs	r1, #1
 800259a:	2002      	movs	r0, #2
 800259c:	f7fe f864 	bl	8000668 <lcd_print>
 80025a0:	e079      	b.n	8002696 <menu+0x10d2>
			} else if(dilSecim == 1){
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <menu+0x1070>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d175      	bne.n	8002696 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80025aa:	4a26      	ldr	r2, [pc, #152]	; (8002644 <menu+0x1080>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	2002      	movs	r0, #2
 80025b0:	f7fe f85a 	bl	8000668 <lcd_print>
 80025b4:	e06f      	b.n	8002696 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80025b6:	4b2d      	ldr	r3, [pc, #180]	; (800266c <menu+0x10a8>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d113      	bne.n	80025e6 <menu+0x1022>
			if(dilSecim == 0) {
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <menu+0x1070>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80025c6:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <menu+0x10ac>)
 80025c8:	2101      	movs	r1, #1
 80025ca:	2002      	movs	r0, #2
 80025cc:	f7fe f84c 	bl	8000668 <lcd_print>
 80025d0:	e061      	b.n	8002696 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <menu+0x1070>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d15d      	bne.n	8002696 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <menu+0x10b0>)
 80025dc:	2101      	movs	r1, #1
 80025de:	2002      	movs	r0, #2
 80025e0:	f7fe f842 	bl	8000668 <lcd_print>
 80025e4:	e057      	b.n	8002696 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <menu+0x10a8>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d113      	bne.n	8002616 <menu+0x1052>
			if(dilSecim == 0) {
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <menu+0x1070>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80025f6:	4a20      	ldr	r2, [pc, #128]	; (8002678 <menu+0x10b4>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	2002      	movs	r0, #2
 80025fc:	f7fe f834 	bl	8000668 <lcd_print>
 8002600:	e049      	b.n	8002696 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <menu+0x1070>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d145      	bne.n	8002696 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <menu+0x10b8>)
 800260c:	2101      	movs	r1, #1
 800260e:	2002      	movs	r0, #2
 8002610:	f7fe f82a 	bl	8000668 <lcd_print>
 8002614:	e03f      	b.n	8002696 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <menu+0x10a8>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d13b      	bne.n	8002696 <menu+0x10d2>
			if(dilSecim == 0) {
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <menu+0x1070>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d12e      	bne.n	8002684 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <menu+0x10bc>)
 8002628:	2101      	movs	r1, #1
 800262a:	2002      	movs	r0, #2
 800262c:	f7fe f81c 	bl	8000668 <lcd_print>
 8002630:	e031      	b.n	8002696 <menu+0x10d2>
 8002632:	bf00      	nop
 8002634:	20000d2d 	.word	0x20000d2d
 8002638:	0800dcd4 	.word	0x0800dcd4
 800263c:	20000d13 	.word	0x20000d13
 8002640:	0800dc14 	.word	0x0800dc14
 8002644:	0800dc28 	.word	0x0800dc28
 8002648:	0800dc74 	.word	0x0800dc74
 800264c:	0800dc88 	.word	0x0800dc88
 8002650:	40010800 	.word	0x40010800
 8002654:	20000d3b 	.word	0x20000d3b
 8002658:	20000c38 	.word	0x20000c38
 800265c:	20000d38 	.word	0x20000d38
 8002660:	20000d0c 	.word	0x20000d0c
 8002664:	0800dce4 	.word	0x0800dce4
 8002668:	0800dcf8 	.word	0x0800dcf8
 800266c:	20000d14 	.word	0x20000d14
 8002670:	0800dd0c 	.word	0x0800dd0c
 8002674:	0800dd20 	.word	0x0800dd20
 8002678:	0800dd34 	.word	0x0800dd34
 800267c:	0800dd48 	.word	0x0800dd48
 8002680:	0800dd5c 	.word	0x0800dd5c
			} else if(dilSecim == 1){
 8002684:	4b99      	ldr	r3, [pc, #612]	; (80028ec <menu+0x1328>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d104      	bne.n	8002696 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800268c:	4a98      	ldr	r2, [pc, #608]	; (80028f0 <menu+0x132c>)
 800268e:	2101      	movs	r1, #1
 8002690:	2002      	movs	r0, #2
 8002692:	f7fd ffe9 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002696:	2102      	movs	r1, #2
 8002698:	4896      	ldr	r0, [pc, #600]	; (80028f4 <menu+0x1330>)
 800269a:	f007 fadb 	bl	8009c54 <HAL_GPIO_ReadPin>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d115      	bne.n	80026d0 <menu+0x110c>
 80026a4:	4b94      	ldr	r3, [pc, #592]	; (80028f8 <menu+0x1334>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	f083 0301 	eor.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00e      	beq.n	80026d0 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80026b2:	4b92      	ldr	r3, [pc, #584]	; (80028fc <menu+0x1338>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4b90      	ldr	r3, [pc, #576]	; (80028fc <menu+0x1338>)
 80026bc:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80026be:	4b8f      	ldr	r3, [pc, #572]	; (80028fc <menu+0x1338>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d902      	bls.n	80026cc <menu+0x1108>
				kapiSecimleri = 0;
 80026c6:	4b8d      	ldr	r3, [pc, #564]	; (80028fc <menu+0x1338>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026cc:	f003 fce6 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d0:	2104      	movs	r1, #4
 80026d2:	4888      	ldr	r0, [pc, #544]	; (80028f4 <menu+0x1330>)
 80026d4:	f007 fabe 	bl	8009c54 <HAL_GPIO_ReadPin>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d115      	bne.n	800270a <menu+0x1146>
 80026de:	4b86      	ldr	r3, [pc, #536]	; (80028f8 <menu+0x1334>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	f083 0301 	eor.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80026ec:	4b83      	ldr	r3, [pc, #524]	; (80028fc <menu+0x1338>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b81      	ldr	r3, [pc, #516]	; (80028fc <menu+0x1338>)
 80026f6:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80026f8:	4b80      	ldr	r3, [pc, #512]	; (80028fc <menu+0x1338>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d902      	bls.n	8002706 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002700:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <menu+0x1338>)
 8002702:	2203      	movs	r2, #3
 8002704:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002706:	f003 fcc9 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800270a:	2108      	movs	r1, #8
 800270c:	4879      	ldr	r0, [pc, #484]	; (80028f4 <menu+0x1330>)
 800270e:	f007 faa1 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d118      	bne.n	800274a <menu+0x1186>
 8002718:	4b77      	ldr	r3, [pc, #476]	; (80028f8 <menu+0x1334>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d011      	beq.n	800274a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002726:	4b75      	ldr	r3, [pc, #468]	; (80028fc <menu+0x1338>)
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	4b75      	ldr	r3, [pc, #468]	; (8002900 <menu+0x133c>)
 800272c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800272e:	4b73      	ldr	r3, [pc, #460]	; (80028fc <menu+0x1338>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <menu+0x1180>
				altLimit = 1;
 8002736:	4b73      	ldr	r3, [pc, #460]	; (8002904 <menu+0x1340>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800273c:	4b71      	ldr	r3, [pc, #452]	; (8002904 <menu+0x1340>)
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <menu+0x133c>)
 8002742:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002744:	4b70      	ldr	r3, [pc, #448]	; (8002908 <menu+0x1344>)
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800274a:	4b70      	ldr	r3, [pc, #448]	; (800290c <menu+0x1348>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b08      	cmp	r3, #8
 8002750:	f040 8092 	bne.w	8002878 <menu+0x12b4>
		if(dilSecim == 0) {
 8002754:	4b65      	ldr	r3, [pc, #404]	; (80028ec <menu+0x1328>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800275c:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <menu+0x134c>)
 800275e:	2101      	movs	r1, #1
 8002760:	2001      	movs	r0, #1
 8002762:	f7fd ff81 	bl	8000668 <lcd_print>
 8002766:	e008      	b.n	800277a <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002768:	4b60      	ldr	r3, [pc, #384]	; (80028ec <menu+0x1328>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d104      	bne.n	800277a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002770:	4a68      	ldr	r2, [pc, #416]	; (8002914 <menu+0x1350>)
 8002772:	2101      	movs	r1, #1
 8002774:	2001      	movs	r0, #1
 8002776:	f7fd ff77 	bl	8000668 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <menu+0x1354>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <menu+0x11e6>
			if(dilSecim == 0) {
 8002782:	4b5a      	ldr	r3, [pc, #360]	; (80028ec <menu+0x1328>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800278a:	4a64      	ldr	r2, [pc, #400]	; (800291c <menu+0x1358>)
 800278c:	2101      	movs	r1, #1
 800278e:	2002      	movs	r0, #2
 8002790:	f7fd ff6a 	bl	8000668 <lcd_print>
 8002794:	e020      	b.n	80027d8 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002796:	4b55      	ldr	r3, [pc, #340]	; (80028ec <menu+0x1328>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d11c      	bne.n	80027d8 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800279e:	4a60      	ldr	r2, [pc, #384]	; (8002920 <menu+0x135c>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	2002      	movs	r0, #2
 80027a4:	f7fd ff60 	bl	8000668 <lcd_print>
 80027a8:	e016      	b.n	80027d8 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80027aa:	4b5b      	ldr	r3, [pc, #364]	; (8002918 <menu+0x1354>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d112      	bne.n	80027d8 <menu+0x1214>
			if(dilSecim == 0){
 80027b2:	4b4e      	ldr	r3, [pc, #312]	; (80028ec <menu+0x1328>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80027ba:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <menu+0x1360>)
 80027bc:	2101      	movs	r1, #1
 80027be:	2002      	movs	r0, #2
 80027c0:	f7fd ff52 	bl	8000668 <lcd_print>
 80027c4:	e008      	b.n	80027d8 <menu+0x1214>
			} else if(dilSecim == 1){
 80027c6:	4b49      	ldr	r3, [pc, #292]	; (80028ec <menu+0x1328>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d104      	bne.n	80027d8 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80027ce:	4a56      	ldr	r2, [pc, #344]	; (8002928 <menu+0x1364>)
 80027d0:	2101      	movs	r1, #1
 80027d2:	2002      	movs	r0, #2
 80027d4:	f7fd ff48 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d8:	2102      	movs	r1, #2
 80027da:	4846      	ldr	r0, [pc, #280]	; (80028f4 <menu+0x1330>)
 80027dc:	f007 fa3a 	bl	8009c54 <HAL_GPIO_ReadPin>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d115      	bne.n	8002812 <menu+0x124e>
 80027e6:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <menu+0x1334>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80027f4:	4b48      	ldr	r3, [pc, #288]	; (8002918 <menu+0x1354>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b46      	ldr	r3, [pc, #280]	; (8002918 <menu+0x1354>)
 80027fe:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002800:	4b45      	ldr	r3, [pc, #276]	; (8002918 <menu+0x1354>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d902      	bls.n	800280e <menu+0x124a>
				kapiAcTipi = 0;
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <menu+0x1354>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800280e:	f003 fc45 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002812:	2104      	movs	r1, #4
 8002814:	4837      	ldr	r0, [pc, #220]	; (80028f4 <menu+0x1330>)
 8002816:	f007 fa1d 	bl	8009c54 <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d115      	bne.n	800284c <menu+0x1288>
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <menu+0x1334>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f083 0301 	eor.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <menu+0x1354>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <menu+0x1354>)
 8002838:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <menu+0x1354>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002842:	4b35      	ldr	r3, [pc, #212]	; (8002918 <menu+0x1354>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002848:	f003 fc28 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800284c:	2108      	movs	r1, #8
 800284e:	4829      	ldr	r0, [pc, #164]	; (80028f4 <menu+0x1330>)
 8002850:	f007 fa00 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d10e      	bne.n	8002878 <menu+0x12b4>
 800285a:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <menu+0x1334>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	f083 0301 	eor.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <menu+0x1354>)
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <menu+0x133c>)
 800286e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <menu+0x1344>)
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <menu+0x1348>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b09      	cmp	r3, #9
 800287e:	f040 80b9 	bne.w	80029f4 <menu+0x1430>
		if(dilSecim == 0){
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <menu+0x1328>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800288a:	4a28      	ldr	r2, [pc, #160]	; (800292c <menu+0x1368>)
 800288c:	2101      	movs	r1, #1
 800288e:	2001      	movs	r0, #1
 8002890:	f7fd feea 	bl	8000668 <lcd_print>
 8002894:	e008      	b.n	80028a8 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <menu+0x1328>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d104      	bne.n	80028a8 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800289e:	4a24      	ldr	r2, [pc, #144]	; (8002930 <menu+0x136c>)
 80028a0:	2101      	movs	r1, #1
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7fd fee0 	bl	8000668 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <menu+0x1370>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <menu+0x1374>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	2002      	movs	r0, #2
 80028b6:	f7fd fed7 	bl	8000668 <lcd_print>
 80028ba:	e04c      	b.n	8002956 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <menu+0x1370>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d13f      	bne.n	8002944 <menu+0x1380>
			if(dilSecim == 0){
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <menu+0x1328>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <menu+0x1378>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2002      	movs	r0, #2
 80028d2:	f7fd fec9 	bl	8000668 <lcd_print>
 80028d6:	e03e      	b.n	8002956 <menu+0x1392>
			} else if(dilSecim == 1) {
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <menu+0x1328>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d13a      	bne.n	8002956 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80028e0:	4a17      	ldr	r2, [pc, #92]	; (8002940 <menu+0x137c>)
 80028e2:	2101      	movs	r1, #1
 80028e4:	2002      	movs	r0, #2
 80028e6:	f7fd febf 	bl	8000668 <lcd_print>
 80028ea:	e034      	b.n	8002956 <menu+0x1392>
 80028ec:	20000d2d 	.word	0x20000d2d
 80028f0:	0800dd70 	.word	0x0800dd70
 80028f4:	40010800 	.word	0x40010800
 80028f8:	20000d3b 	.word	0x20000d3b
 80028fc:	20000d14 	.word	0x20000d14
 8002900:	20000c38 	.word	0x20000c38
 8002904:	20000d12 	.word	0x20000d12
 8002908:	20000d38 	.word	0x20000d38
 800290c:	20000d0c 	.word	0x20000d0c
 8002910:	0800dd84 	.word	0x0800dd84
 8002914:	0800dd98 	.word	0x0800dd98
 8002918:	20000d18 	.word	0x20000d18
 800291c:	0800ddac 	.word	0x0800ddac
 8002920:	0800ddbc 	.word	0x0800ddbc
 8002924:	0800ddcc 	.word	0x0800ddcc
 8002928:	0800dde0 	.word	0x0800dde0
 800292c:	0800ddf4 	.word	0x0800ddf4
 8002930:	0800de08 	.word	0x0800de08
 8002934:	20000d15 	.word	0x20000d15
 8002938:	0800de1c 	.word	0x0800de1c
 800293c:	0800de30 	.word	0x0800de30
 8002940:	0800de40 	.word	0x0800de40
			}
		} else if(kapi1Tip == 2) {
 8002944:	4b8a      	ldr	r3, [pc, #552]	; (8002b70 <menu+0x15ac>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d104      	bne.n	8002956 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 800294c:	4a89      	ldr	r2, [pc, #548]	; (8002b74 <menu+0x15b0>)
 800294e:	2101      	movs	r1, #1
 8002950:	2002      	movs	r0, #2
 8002952:	f7fd fe89 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002956:	2102      	movs	r1, #2
 8002958:	4887      	ldr	r0, [pc, #540]	; (8002b78 <menu+0x15b4>)
 800295a:	f007 f97b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800295e:	4603      	mov	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	d115      	bne.n	8002990 <menu+0x13cc>
 8002964:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <menu+0x15b8>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	f083 0301 	eor.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00e      	beq.n	8002990 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002972:	4b7f      	ldr	r3, [pc, #508]	; (8002b70 <menu+0x15ac>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b7d      	ldr	r3, [pc, #500]	; (8002b70 <menu+0x15ac>)
 800297c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800297e:	4b7c      	ldr	r3, [pc, #496]	; (8002b70 <menu+0x15ac>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d902      	bls.n	800298c <menu+0x13c8>
				kapi1Tip = 0;
 8002986:	4b7a      	ldr	r3, [pc, #488]	; (8002b70 <menu+0x15ac>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800298c:	f003 fb86 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002990:	2104      	movs	r1, #4
 8002992:	4879      	ldr	r0, [pc, #484]	; (8002b78 <menu+0x15b4>)
 8002994:	f007 f95e 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d115      	bne.n	80029ca <menu+0x1406>
 800299e:	4b77      	ldr	r3, [pc, #476]	; (8002b7c <menu+0x15b8>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	f083 0301 	eor.w	r3, r3, #1
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00e      	beq.n	80029ca <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80029ac:	4b70      	ldr	r3, [pc, #448]	; (8002b70 <menu+0x15ac>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b6e      	ldr	r3, [pc, #440]	; (8002b70 <menu+0x15ac>)
 80029b6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80029b8:	4b6d      	ldr	r3, [pc, #436]	; (8002b70 <menu+0x15ac>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d902      	bls.n	80029c6 <menu+0x1402>
		   		kapi1Tip = 2;
 80029c0:	4b6b      	ldr	r3, [pc, #428]	; (8002b70 <menu+0x15ac>)
 80029c2:	2202      	movs	r2, #2
 80029c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029c6:	f003 fb69 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ca:	2108      	movs	r1, #8
 80029cc:	486a      	ldr	r0, [pc, #424]	; (8002b78 <menu+0x15b4>)
 80029ce:	f007 f941 	bl	8009c54 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10d      	bne.n	80029f4 <menu+0x1430>
 80029d8:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <menu+0x15b8>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80029e6:	4b62      	ldr	r3, [pc, #392]	; (8002b70 <menu+0x15ac>)
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <menu+0x15bc>)
 80029ec:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <menu+0x15c0>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <menu+0x15c4>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b0a      	cmp	r3, #10
 80029fa:	d17f      	bne.n	8002afc <menu+0x1538>
		if(dilSecim == 0) {
 80029fc:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <menu+0x15c8>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002a04:	4a62      	ldr	r2, [pc, #392]	; (8002b90 <menu+0x15cc>)
 8002a06:	2101      	movs	r1, #1
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f7fd fe2d 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a0e:	4a61      	ldr	r2, [pc, #388]	; (8002b94 <menu+0x15d0>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	2002      	movs	r0, #2
 8002a14:	f7fd fe28 	bl	8000668 <lcd_print>
 8002a18:	e00d      	b.n	8002a36 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002a1a:	4b5c      	ldr	r3, [pc, #368]	; (8002b8c <menu+0x15c8>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d109      	bne.n	8002a36 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002a22:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <menu+0x15d4>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7fd fe1e 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a2c:	4a5b      	ldr	r2, [pc, #364]	; (8002b9c <menu+0x15d8>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f7fd fe19 	bl	8000668 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002a36:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <menu+0x15dc>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	220a      	movs	r2, #10
 8002a3c:	4959      	ldr	r1, [pc, #356]	; (8002ba4 <menu+0x15e0>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f00a f934 	bl	800ccac <itoa>
		lcd_print(2,16,snum);
 8002a44:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <menu+0x15e0>)
 8002a46:	2110      	movs	r1, #16
 8002a48:	2002      	movs	r0, #2
 8002a4a:	f7fd fe0d 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a4e:	2102      	movs	r1, #2
 8002a50:	4849      	ldr	r0, [pc, #292]	; (8002b78 <menu+0x15b4>)
 8002a52:	f007 f8ff 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d119      	bne.n	8002a90 <menu+0x14cc>
 8002a5c:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <menu+0x15b8>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	f083 0301 	eor.w	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d012      	beq.n	8002a90 <menu+0x14cc>
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <menu+0x15ac>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002a72:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <menu+0x15dc>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4b49      	ldr	r3, [pc, #292]	; (8002ba0 <menu+0x15dc>)
 8002a7c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002a7e:	4b48      	ldr	r3, [pc, #288]	; (8002ba0 <menu+0x15dc>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	d902      	bls.n	8002a8c <menu+0x14c8>
				kapi1AcSure = 0;
 8002a86:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <menu+0x15dc>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a8c:	f003 fb06 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a90:	2104      	movs	r1, #4
 8002a92:	4839      	ldr	r0, [pc, #228]	; (8002b78 <menu+0x15b4>)
 8002a94:	f007 f8de 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d119      	bne.n	8002ad2 <menu+0x150e>
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <menu+0x15b8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	f083 0301 	eor.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <menu+0x150e>
 8002aac:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <menu+0x15ac>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002ab4:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <menu+0x15dc>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <menu+0x15dc>)
 8002abe:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002ac0:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <menu+0x15dc>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d902      	bls.n	8002ace <menu+0x150a>
		   		kapi1AcSure = 5;
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <menu+0x15dc>)
 8002aca:	2205      	movs	r2, #5
 8002acc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ace:	f003 fae5 	bl	800609c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	4828      	ldr	r0, [pc, #160]	; (8002b78 <menu+0x15b4>)
 8002ad6:	f007 f8bd 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10d      	bne.n	8002afc <menu+0x1538>
 8002ae0:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <menu+0x15b8>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <menu+0x15dc>)
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <menu+0x15bc>)
 8002af4:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002af6:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <menu+0x15c0>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002afc:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <menu+0x15c4>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b0b      	cmp	r3, #11
 8002b02:	f040 80b5 	bne.w	8002c70 <menu+0x16ac>
		if(dilSecim == 0) {
 8002b06:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <menu+0x15c8>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002b0e:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <menu+0x15e4>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7fd fda8 	bl	8000668 <lcd_print>
 8002b18:	e008      	b.n	8002b2c <menu+0x1568>
		} else if(dilSecim == 1) {
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <menu+0x15c8>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d104      	bne.n	8002b2c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <menu+0x15e8>)
 8002b24:	2101      	movs	r1, #1
 8002b26:	2001      	movs	r0, #1
 8002b28:	f7fd fd9e 	bl	8000668 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <menu+0x15ec>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <menu+0x15f0>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f7fd fd95 	bl	8000668 <lcd_print>
 8002b3e:	e048      	b.n	8002bd2 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <menu+0x15ec>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d13b      	bne.n	8002bc0 <menu+0x15fc>
			if(dilSecim == 0) {
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <menu+0x15c8>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002b50:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <menu+0x15f4>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7fd fd87 	bl	8000668 <lcd_print>
 8002b5a:	e03a      	b.n	8002bd2 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <menu+0x15c8>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d136      	bne.n	8002bd2 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <menu+0x15f8>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f7fd fd7d 	bl	8000668 <lcd_print>
 8002b6e:	e030      	b.n	8002bd2 <menu+0x160e>
 8002b70:	20000d15 	.word	0x20000d15
 8002b74:	0800de54 	.word	0x0800de54
 8002b78:	40010800 	.word	0x40010800
 8002b7c:	20000d3b 	.word	0x20000d3b
 8002b80:	20000c38 	.word	0x20000c38
 8002b84:	20000d38 	.word	0x20000d38
 8002b88:	20000d0c 	.word	0x20000d0c
 8002b8c:	20000d2d 	.word	0x20000d2d
 8002b90:	0800de64 	.word	0x0800de64
 8002b94:	0800de78 	.word	0x0800de78
 8002b98:	0800de88 	.word	0x0800de88
 8002b9c:	0800de9c 	.word	0x0800de9c
 8002ba0:	20000d25 	.word	0x20000d25
 8002ba4:	20000cac 	.word	0x20000cac
 8002ba8:	0800deac 	.word	0x0800deac
 8002bac:	0800dec0 	.word	0x0800dec0
 8002bb0:	20000d16 	.word	0x20000d16
 8002bb4:	0800de1c 	.word	0x0800de1c
 8002bb8:	0800de30 	.word	0x0800de30
 8002bbc:	0800de40 	.word	0x0800de40
			}
		} else if(kapi2Tip == 2) {
 8002bc0:	4b8a      	ldr	r3, [pc, #552]	; (8002dec <menu+0x1828>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d104      	bne.n	8002bd2 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002bc8:	4a89      	ldr	r2, [pc, #548]	; (8002df0 <menu+0x182c>)
 8002bca:	2101      	movs	r1, #1
 8002bcc:	2002      	movs	r0, #2
 8002bce:	f7fd fd4b 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4887      	ldr	r0, [pc, #540]	; (8002df4 <menu+0x1830>)
 8002bd6:	f007 f83d 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d115      	bne.n	8002c0c <menu+0x1648>
 8002be0:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <menu+0x1834>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00e      	beq.n	8002c0c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002bee:	4b7f      	ldr	r3, [pc, #508]	; (8002dec <menu+0x1828>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <menu+0x1828>)
 8002bf8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002bfa:	4b7c      	ldr	r3, [pc, #496]	; (8002dec <menu+0x1828>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <menu+0x1644>
				kapi2Tip = 0;
 8002c02:	4b7a      	ldr	r3, [pc, #488]	; (8002dec <menu+0x1828>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c08:	f003 fa48 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	4879      	ldr	r0, [pc, #484]	; (8002df4 <menu+0x1830>)
 8002c10:	f007 f820 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d115      	bne.n	8002c46 <menu+0x1682>
 8002c1a:	4b77      	ldr	r3, [pc, #476]	; (8002df8 <menu+0x1834>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002c28:	4b70      	ldr	r3, [pc, #448]	; (8002dec <menu+0x1828>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b6e      	ldr	r3, [pc, #440]	; (8002dec <menu+0x1828>)
 8002c32:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002c34:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <menu+0x1828>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d902      	bls.n	8002c42 <menu+0x167e>
		   		kapi2Tip = 2;
 8002c3c:	4b6b      	ldr	r3, [pc, #428]	; (8002dec <menu+0x1828>)
 8002c3e:	2202      	movs	r2, #2
 8002c40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c42:	f003 fa2b 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c46:	2108      	movs	r1, #8
 8002c48:	486a      	ldr	r0, [pc, #424]	; (8002df4 <menu+0x1830>)
 8002c4a:	f007 f803 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10d      	bne.n	8002c70 <menu+0x16ac>
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <menu+0x1834>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002c62:	4b62      	ldr	r3, [pc, #392]	; (8002dec <menu+0x1828>)
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <menu+0x1838>)
 8002c68:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002c6a:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <menu+0x183c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002c70:	4b64      	ldr	r3, [pc, #400]	; (8002e04 <menu+0x1840>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d17f      	bne.n	8002d78 <menu+0x17b4>
		if(dilSecim == 0) {
 8002c78:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <menu+0x1844>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002c80:	4a62      	ldr	r2, [pc, #392]	; (8002e0c <menu+0x1848>)
 8002c82:	2101      	movs	r1, #1
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7fd fcef 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c8a:	4a61      	ldr	r2, [pc, #388]	; (8002e10 <menu+0x184c>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	2002      	movs	r0, #2
 8002c90:	f7fd fcea 	bl	8000668 <lcd_print>
 8002c94:	e00d      	b.n	8002cb2 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002c96:	4b5c      	ldr	r3, [pc, #368]	; (8002e08 <menu+0x1844>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d109      	bne.n	8002cb2 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002c9e:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <menu+0x1850>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7fd fce0 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ca8:	4a5b      	ldr	r2, [pc, #364]	; (8002e18 <menu+0x1854>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	2002      	movs	r0, #2
 8002cae:	f7fd fcdb 	bl	8000668 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002cb2:	4b5a      	ldr	r3, [pc, #360]	; (8002e1c <menu+0x1858>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	220a      	movs	r2, #10
 8002cb8:	4959      	ldr	r1, [pc, #356]	; (8002e20 <menu+0x185c>)
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f009 fff6 	bl	800ccac <itoa>
		lcd_print(2,16,snum);
 8002cc0:	4a57      	ldr	r2, [pc, #348]	; (8002e20 <menu+0x185c>)
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	f7fd fccf 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002cca:	2102      	movs	r1, #2
 8002ccc:	4849      	ldr	r0, [pc, #292]	; (8002df4 <menu+0x1830>)
 8002cce:	f006 ffc1 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d119      	bne.n	8002d0c <menu+0x1748>
 8002cd8:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <menu+0x1834>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	f083 0301 	eor.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <menu+0x1748>
 8002ce6:	4b41      	ldr	r3, [pc, #260]	; (8002dec <menu+0x1828>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10e      	bne.n	8002d0c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002cee:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <menu+0x1858>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b49      	ldr	r3, [pc, #292]	; (8002e1c <menu+0x1858>)
 8002cf8:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002cfa:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <menu+0x1858>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d902      	bls.n	8002d08 <menu+0x1744>
				kapi2AcSure = 0;
 8002d02:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <menu+0x1858>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d08:	f003 f9c8 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	4839      	ldr	r0, [pc, #228]	; (8002df4 <menu+0x1830>)
 8002d10:	f006 ffa0 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d119      	bne.n	8002d4e <menu+0x178a>
 8002d1a:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <menu+0x1834>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	f083 0301 	eor.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <menu+0x178a>
 8002d28:	4b30      	ldr	r3, [pc, #192]	; (8002dec <menu+0x1828>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10e      	bne.n	8002d4e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002d30:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <menu+0x1858>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <menu+0x1858>)
 8002d3a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002d3c:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <menu+0x1858>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d902      	bls.n	8002d4a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <menu+0x1858>)
 8002d46:	2205      	movs	r2, #5
 8002d48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d4a:	f003 f9a7 	bl	800609c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4e:	2108      	movs	r1, #8
 8002d50:	4828      	ldr	r0, [pc, #160]	; (8002df4 <menu+0x1830>)
 8002d52:	f006 ff7f 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10d      	bne.n	8002d78 <menu+0x17b4>
 8002d5c:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <menu+0x1834>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	f083 0301 	eor.w	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <menu+0x1858>)
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <menu+0x1838>)
 8002d70:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <menu+0x183c>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002d78:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <menu+0x1840>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b0d      	cmp	r3, #13
 8002d7e:	f040 80b5 	bne.w	8002eec <menu+0x1928>
		if(dilSecim == 0) {
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <menu+0x1844>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002d8a:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <menu+0x1860>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f7fd fc6a 	bl	8000668 <lcd_print>
 8002d94:	e008      	b.n	8002da8 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <menu+0x1844>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d104      	bne.n	8002da8 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002d9e:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <menu+0x1864>)
 8002da0:	2101      	movs	r1, #1
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7fd fc60 	bl	8000668 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <menu+0x1868>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002db0:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <menu+0x186c>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	2002      	movs	r0, #2
 8002db6:	f7fd fc57 	bl	8000668 <lcd_print>
 8002dba:	e048      	b.n	8002e4e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <menu+0x1868>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d13b      	bne.n	8002e3c <menu+0x1878>
			if(dilSecim == 0) {
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <menu+0x1844>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <menu+0x1870>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f7fd fc49 	bl	8000668 <lcd_print>
 8002dd6:	e03a      	b.n	8002e4e <menu+0x188a>
			} else if(dilSecim == 1) {
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <menu+0x1844>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d136      	bne.n	8002e4e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <menu+0x1874>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2002      	movs	r0, #2
 8002de6:	f7fd fc3f 	bl	8000668 <lcd_print>
 8002dea:	e030      	b.n	8002e4e <menu+0x188a>
 8002dec:	20000d16 	.word	0x20000d16
 8002df0:	0800de54 	.word	0x0800de54
 8002df4:	40010800 	.word	0x40010800
 8002df8:	20000d3b 	.word	0x20000d3b
 8002dfc:	20000c38 	.word	0x20000c38
 8002e00:	20000d38 	.word	0x20000d38
 8002e04:	20000d0c 	.word	0x20000d0c
 8002e08:	20000d2d 	.word	0x20000d2d
 8002e0c:	0800ded4 	.word	0x0800ded4
 8002e10:	0800de78 	.word	0x0800de78
 8002e14:	0800dee8 	.word	0x0800dee8
 8002e18:	0800de9c 	.word	0x0800de9c
 8002e1c:	20000d26 	.word	0x20000d26
 8002e20:	20000cac 	.word	0x20000cac
 8002e24:	0800defc 	.word	0x0800defc
 8002e28:	0800df10 	.word	0x0800df10
 8002e2c:	20000d17 	.word	0x20000d17
 8002e30:	0800de1c 	.word	0x0800de1c
 8002e34:	0800de30 	.word	0x0800de30
 8002e38:	0800de40 	.word	0x0800de40
			}
		} else if(kapitablaTip == 2) {
 8002e3c:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <menu+0x19e8>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d104      	bne.n	8002e4e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002e44:	4a5a      	ldr	r2, [pc, #360]	; (8002fb0 <menu+0x19ec>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	2002      	movs	r0, #2
 8002e4a:	f7fd fc0d 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e4e:	2102      	movs	r1, #2
 8002e50:	4858      	ldr	r0, [pc, #352]	; (8002fb4 <menu+0x19f0>)
 8002e52:	f006 feff 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d115      	bne.n	8002e88 <menu+0x18c4>
 8002e5c:	4b56      	ldr	r3, [pc, #344]	; (8002fb8 <menu+0x19f4>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00e      	beq.n	8002e88 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002e6a:	4b50      	ldr	r3, [pc, #320]	; (8002fac <menu+0x19e8>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <menu+0x19e8>)
 8002e74:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002e76:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <menu+0x19e8>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d902      	bls.n	8002e84 <menu+0x18c0>
				kapitablaTip = 0;
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <menu+0x19e8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e84:	f003 f90a 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e88:	2104      	movs	r1, #4
 8002e8a:	484a      	ldr	r0, [pc, #296]	; (8002fb4 <menu+0x19f0>)
 8002e8c:	f006 fee2 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d115      	bne.n	8002ec2 <menu+0x18fe>
 8002e96:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <menu+0x19f4>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	f083 0301 	eor.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00e      	beq.n	8002ec2 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002ea4:	4b41      	ldr	r3, [pc, #260]	; (8002fac <menu+0x19e8>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <menu+0x19e8>)
 8002eae:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <menu+0x19e8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d902      	bls.n	8002ebe <menu+0x18fa>
		   		kapitablaTip = 2;
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <menu+0x19e8>)
 8002eba:	2202      	movs	r2, #2
 8002ebc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ebe:	f003 f8ed 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ec2:	2108      	movs	r1, #8
 8002ec4:	483b      	ldr	r0, [pc, #236]	; (8002fb4 <menu+0x19f0>)
 8002ec6:	f006 fec5 	bl	8009c54 <HAL_GPIO_ReadPin>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10d      	bne.n	8002eec <menu+0x1928>
 8002ed0:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <menu+0x19f4>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002ede:	4b33      	ldr	r3, [pc, #204]	; (8002fac <menu+0x19e8>)
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <menu+0x19f8>)
 8002ee4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <menu+0x19fc>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002eec:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <menu+0x1a00>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b0e      	cmp	r3, #14
 8002ef2:	f040 80f2 	bne.w	80030da <menu+0x1b16>
		if(dilSecim == 0) {
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <menu+0x1a04>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002efe:	4a33      	ldr	r2, [pc, #204]	; (8002fcc <menu+0x1a08>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fd fbb0 	bl	8000668 <lcd_print>
 8002f08:	e008      	b.n	8002f1c <menu+0x1958>
		} else if(dilSecim == 1) {
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <menu+0x1a04>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d104      	bne.n	8002f1c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002f12:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <menu+0x1a0c>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	2001      	movs	r0, #1
 8002f18:	f7fd fba6 	bl	8000668 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <menu+0x1a10>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d113      	bne.n	8002f4c <menu+0x1988>
			if(dilSecim == 0){
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <menu+0x1a04>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <menu+0x1a14>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2002      	movs	r0, #2
 8002f32:	f7fd fb99 	bl	8000668 <lcd_print>
 8002f36:	e071      	b.n	800301c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <menu+0x1a04>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d16d      	bne.n	800301c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002f40:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <menu+0x1a18>)
 8002f42:	2101      	movs	r1, #1
 8002f44:	2002      	movs	r0, #2
 8002f46:	f7fd fb8f 	bl	8000668 <lcd_print>
 8002f4a:	e067      	b.n	800301c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002f4c:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <menu+0x1a10>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d112      	bne.n	8002f7a <menu+0x19b6>
			if(dilSecim == 0){
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <menu+0x1a04>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002f5c:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <menu+0x1a1c>)
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2002      	movs	r0, #2
 8002f62:	f7fd fb81 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <menu+0x1a04>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d156      	bne.n	800301c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <menu+0x1a20>)
 8002f70:	2101      	movs	r1, #1
 8002f72:	2002      	movs	r0, #2
 8002f74:	f7fd fb78 	bl	8000668 <lcd_print>
 8002f78:	e050      	b.n	800301c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <menu+0x1a10>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d136      	bne.n	8002ff0 <menu+0x1a2c>
			if(dilSecim == 0){
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <menu+0x1a04>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <menu+0x1a24>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f7fd fb6a 	bl	8000668 <lcd_print>
 8002f94:	e042      	b.n	800301c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <menu+0x1a04>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d13e      	bne.n	800301c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <menu+0x1a28>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f7fd fb60 	bl	8000668 <lcd_print>
 8002fa8:	e038      	b.n	800301c <menu+0x1a58>
 8002faa:	bf00      	nop
 8002fac:	20000d17 	.word	0x20000d17
 8002fb0:	0800de54 	.word	0x0800de54
 8002fb4:	40010800 	.word	0x40010800
 8002fb8:	20000d3b 	.word	0x20000d3b
 8002fbc:	20000c38 	.word	0x20000c38
 8002fc0:	20000d38 	.word	0x20000d38
 8002fc4:	20000d0c 	.word	0x20000d0c
 8002fc8:	20000d2d 	.word	0x20000d2d
 8002fcc:	0800df24 	.word	0x0800df24
 8002fd0:	0800df38 	.word	0x0800df38
 8002fd4:	20000d19 	.word	0x20000d19
 8002fd8:	0800df4c 	.word	0x0800df4c
 8002fdc:	0800df5c 	.word	0x0800df5c
 8002fe0:	0800df6c 	.word	0x0800df6c
 8002fe4:	0800df7c 	.word	0x0800df7c
 8002fe8:	0800df8c 	.word	0x0800df8c
 8002fec:	0800dfa0 	.word	0x0800dfa0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ff0:	4b9b      	ldr	r3, [pc, #620]	; (8003260 <menu+0x1c9c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d111      	bne.n	800301c <menu+0x1a58>
			if(dilSecim == 0) {
 8002ff8:	4b9a      	ldr	r3, [pc, #616]	; (8003264 <menu+0x1ca0>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8003000:	4a99      	ldr	r2, [pc, #612]	; (8003268 <menu+0x1ca4>)
 8003002:	2101      	movs	r1, #1
 8003004:	2002      	movs	r0, #2
 8003006:	f7fd fb2f 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 800300a:	4b96      	ldr	r3, [pc, #600]	; (8003264 <menu+0x1ca0>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d104      	bne.n	800301c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8003012:	4a96      	ldr	r2, [pc, #600]	; (800326c <menu+0x1ca8>)
 8003014:	2101      	movs	r1, #1
 8003016:	2002      	movs	r0, #2
 8003018:	f7fd fb26 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800301c:	2102      	movs	r1, #2
 800301e:	4894      	ldr	r0, [pc, #592]	; (8003270 <menu+0x1cac>)
 8003020:	f006 fe18 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003024:	4603      	mov	r3, r0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d115      	bne.n	8003056 <menu+0x1a92>
 800302a:	4b92      	ldr	r3, [pc, #584]	; (8003274 <menu+0x1cb0>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00e      	beq.n	8003056 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8003038:	4b89      	ldr	r3, [pc, #548]	; (8003260 <menu+0x1c9c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	b2da      	uxtb	r2, r3
 8003040:	4b87      	ldr	r3, [pc, #540]	; (8003260 <menu+0x1c9c>)
 8003042:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003044:	4b86      	ldr	r3, [pc, #536]	; (8003260 <menu+0x1c9c>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d902      	bls.n	8003052 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 800304c:	4b84      	ldr	r3, [pc, #528]	; (8003260 <menu+0x1c9c>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003052:	f003 f823 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003056:	2104      	movs	r1, #4
 8003058:	4885      	ldr	r0, [pc, #532]	; (8003270 <menu+0x1cac>)
 800305a:	f006 fdfb 	bl	8009c54 <HAL_GPIO_ReadPin>
 800305e:	4603      	mov	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d115      	bne.n	8003090 <menu+0x1acc>
 8003064:	4b83      	ldr	r3, [pc, #524]	; (8003274 <menu+0x1cb0>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	f083 0301 	eor.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00e      	beq.n	8003090 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8003072:	4b7b      	ldr	r3, [pc, #492]	; (8003260 <menu+0x1c9c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	3b01      	subs	r3, #1
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4b79      	ldr	r3, [pc, #484]	; (8003260 <menu+0x1c9c>)
 800307c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800307e:	4b78      	ldr	r3, [pc, #480]	; (8003260 <menu+0x1c9c>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b03      	cmp	r3, #3
 8003084:	d902      	bls.n	800308c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8003086:	4b76      	ldr	r3, [pc, #472]	; (8003260 <menu+0x1c9c>)
 8003088:	2202      	movs	r2, #2
 800308a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800308c:	f003 f806 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003090:	2108      	movs	r1, #8
 8003092:	4877      	ldr	r0, [pc, #476]	; (8003270 <menu+0x1cac>)
 8003094:	f006 fdde 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d11d      	bne.n	80030da <menu+0x1b16>
 800309e:	4b75      	ldr	r3, [pc, #468]	; (8003274 <menu+0x1cb0>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d016      	beq.n	80030da <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80030ac:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <menu+0x1c9c>)
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	4b71      	ldr	r3, [pc, #452]	; (8003278 <menu+0x1cb4>)
 80030b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80030b6:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <menu+0x1c9c>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <menu+0x1b02>
 80030be:	4b68      	ldr	r3, [pc, #416]	; (8003260 <menu+0x1c9c>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d106      	bne.n	80030d4 <menu+0x1b10>
				altLimit = 1;
 80030c6:	4b6d      	ldr	r3, [pc, #436]	; (800327c <menu+0x1cb8>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030cc:	4b6b      	ldr	r3, [pc, #428]	; (800327c <menu+0x1cb8>)
 80030ce:	781a      	ldrb	r2, [r3, #0]
 80030d0:	4b69      	ldr	r3, [pc, #420]	; (8003278 <menu+0x1cb4>)
 80030d2:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80030d4:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <menu+0x1cbc>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80030da:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <menu+0x1cc0>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	d17f      	bne.n	80031e2 <menu+0x1c1e>
		if(dilSecim == 0) {
 80030e2:	4b60      	ldr	r3, [pc, #384]	; (8003264 <menu+0x1ca0>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80030ea:	4a67      	ldr	r2, [pc, #412]	; (8003288 <menu+0x1cc4>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7fd faba 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80030f4:	4a65      	ldr	r2, [pc, #404]	; (800328c <menu+0x1cc8>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	2002      	movs	r0, #2
 80030fa:	f7fd fab5 	bl	8000668 <lcd_print>
 80030fe:	e00d      	b.n	800311c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8003100:	4b58      	ldr	r3, [pc, #352]	; (8003264 <menu+0x1ca0>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d109      	bne.n	800311c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003108:	4a61      	ldr	r2, [pc, #388]	; (8003290 <menu+0x1ccc>)
 800310a:	2101      	movs	r1, #1
 800310c:	2001      	movs	r0, #1
 800310e:	f7fd faab 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003112:	4a60      	ldr	r2, [pc, #384]	; (8003294 <menu+0x1cd0>)
 8003114:	2101      	movs	r1, #1
 8003116:	2002      	movs	r0, #2
 8003118:	f7fd faa6 	bl	8000668 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 800311c:	4b5e      	ldr	r3, [pc, #376]	; (8003298 <menu+0x1cd4>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	220a      	movs	r2, #10
 8003122:	495e      	ldr	r1, [pc, #376]	; (800329c <menu+0x1cd8>)
 8003124:	4618      	mov	r0, r3
 8003126:	f009 fdc1 	bl	800ccac <itoa>
		lcd_print(2,16,snum);
 800312a:	4a5c      	ldr	r2, [pc, #368]	; (800329c <menu+0x1cd8>)
 800312c:	2110      	movs	r1, #16
 800312e:	2002      	movs	r0, #2
 8003130:	f7fd fa9a 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003134:	2102      	movs	r1, #2
 8003136:	484e      	ldr	r0, [pc, #312]	; (8003270 <menu+0x1cac>)
 8003138:	f006 fd8c 	bl	8009c54 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d119      	bne.n	8003176 <menu+0x1bb2>
 8003142:	4b4c      	ldr	r3, [pc, #304]	; (8003274 <menu+0x1cb0>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f083 0301 	eor.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d012      	beq.n	8003176 <menu+0x1bb2>
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <menu+0x1cdc>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10e      	bne.n	8003176 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003158:	4b4f      	ldr	r3, [pc, #316]	; (8003298 <menu+0x1cd4>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <menu+0x1cd4>)
 8003162:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003164:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <menu+0x1cd4>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b05      	cmp	r3, #5
 800316a:	d902      	bls.n	8003172 <menu+0x1bae>
				kapiTablaAcSure = 0;
 800316c:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <menu+0x1cd4>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003172:	f002 ff93 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003176:	2104      	movs	r1, #4
 8003178:	483d      	ldr	r0, [pc, #244]	; (8003270 <menu+0x1cac>)
 800317a:	f006 fd6b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800317e:	4603      	mov	r3, r0
 8003180:	2b01      	cmp	r3, #1
 8003182:	d119      	bne.n	80031b8 <menu+0x1bf4>
 8003184:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <menu+0x1cb0>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	f083 0301 	eor.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d012      	beq.n	80031b8 <menu+0x1bf4>
 8003192:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <menu+0x1cdc>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10e      	bne.n	80031b8 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <menu+0x1cd4>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	3b01      	subs	r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <menu+0x1cd4>)
 80031a4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <menu+0x1cd4>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d902      	bls.n	80031b4 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80031ae:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <menu+0x1cd4>)
 80031b0:	2205      	movs	r2, #5
 80031b2:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80031b4:	f002 ff72 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b8:	2108      	movs	r1, #8
 80031ba:	482d      	ldr	r0, [pc, #180]	; (8003270 <menu+0x1cac>)
 80031bc:	f006 fd4a 	bl	8009c54 <HAL_GPIO_ReadPin>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10d      	bne.n	80031e2 <menu+0x1c1e>
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <menu+0x1cb0>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d006      	beq.n	80031e2 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <menu+0x1cd4>)
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <menu+0x1cb4>)
 80031da:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <menu+0x1cbc>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80031e2:	4b28      	ldr	r3, [pc, #160]	; (8003284 <menu+0x1cc0>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	f040 80bc 	bne.w	8003364 <menu+0x1da0>
		if(dilSecim == 0) {
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <menu+0x1ca0>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80031f4:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <menu+0x1ce0>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7fd fa35 	bl	8000668 <lcd_print>
 80031fe:	e008      	b.n	8003212 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003200:	4b18      	ldr	r3, [pc, #96]	; (8003264 <menu+0x1ca0>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d104      	bne.n	8003212 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <menu+0x1ce4>)
 800320a:	2101      	movs	r1, #1
 800320c:	2001      	movs	r0, #1
 800320e:	f7fd fa2b 	bl	8000668 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <menu+0x1ce8>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d113      	bne.n	8003242 <menu+0x1c7e>
			if(dilSecim == 0) {
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <menu+0x1ca0>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8003222:	4a11      	ldr	r2, [pc, #68]	; (8003268 <menu+0x1ca4>)
 8003224:	2101      	movs	r1, #1
 8003226:	2002      	movs	r0, #2
 8003228:	f7fd fa1e 	bl	8000668 <lcd_print>
 800322c:	e04b      	b.n	80032c6 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <menu+0x1ca0>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d147      	bne.n	80032c6 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003236:	4a0d      	ldr	r2, [pc, #52]	; (800326c <menu+0x1ca8>)
 8003238:	2101      	movs	r1, #1
 800323a:	2002      	movs	r0, #2
 800323c:	f7fd fa14 	bl	8000668 <lcd_print>
 8003240:	e041      	b.n	80032c6 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <menu+0x1ce8>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d13d      	bne.n	80032c6 <menu+0x1d02>
			if(dilSecim == 0) {
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <menu+0x1ca0>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d130      	bne.n	80032b4 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8003252:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <menu+0x1cec>)
 8003254:	2101      	movs	r1, #1
 8003256:	2002      	movs	r0, #2
 8003258:	f7fd fa06 	bl	8000668 <lcd_print>
 800325c:	e033      	b.n	80032c6 <menu+0x1d02>
 800325e:	bf00      	nop
 8003260:	20000d19 	.word	0x20000d19
 8003264:	20000d2d 	.word	0x20000d2d
 8003268:	0800dc14 	.word	0x0800dc14
 800326c:	0800dc28 	.word	0x0800dc28
 8003270:	40010800 	.word	0x40010800
 8003274:	20000d3b 	.word	0x20000d3b
 8003278:	20000c38 	.word	0x20000c38
 800327c:	20000d12 	.word	0x20000d12
 8003280:	20000d38 	.word	0x20000d38
 8003284:	20000d0c 	.word	0x20000d0c
 8003288:	0800dfb4 	.word	0x0800dfb4
 800328c:	0800de78 	.word	0x0800de78
 8003290:	0800dfc8 	.word	0x0800dfc8
 8003294:	0800de9c 	.word	0x0800de9c
 8003298:	20000d27 	.word	0x20000d27
 800329c:	20000cac 	.word	0x20000cac
 80032a0:	20000d17 	.word	0x20000d17
 80032a4:	0800dfdc 	.word	0x0800dfdc
 80032a8:	0800dff0 	.word	0x0800dff0
 80032ac:	20000d1a 	.word	0x20000d1a
 80032b0:	0800dc74 	.word	0x0800dc74
			} else if(dilSecim == 1) {
 80032b4:	4b99      	ldr	r3, [pc, #612]	; (800351c <menu+0x1f58>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d104      	bne.n	80032c6 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80032bc:	4a98      	ldr	r2, [pc, #608]	; (8003520 <menu+0x1f5c>)
 80032be:	2101      	movs	r1, #1
 80032c0:	2002      	movs	r0, #2
 80032c2:	f7fd f9d1 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c6:	2102      	movs	r1, #2
 80032c8:	4896      	ldr	r0, [pc, #600]	; (8003524 <menu+0x1f60>)
 80032ca:	f006 fcc3 	bl	8009c54 <HAL_GPIO_ReadPin>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d115      	bne.n	8003300 <menu+0x1d3c>
 80032d4:	4b94      	ldr	r3, [pc, #592]	; (8003528 <menu+0x1f64>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	f083 0301 	eor.w	r3, r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00e      	beq.n	8003300 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80032e2:	4b92      	ldr	r3, [pc, #584]	; (800352c <menu+0x1f68>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b90      	ldr	r3, [pc, #576]	; (800352c <menu+0x1f68>)
 80032ec:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80032ee:	4b8f      	ldr	r3, [pc, #572]	; (800352c <menu+0x1f68>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d902      	bls.n	80032fc <menu+0x1d38>
				yukariYavasLimit = 0;
 80032f6:	4b8d      	ldr	r3, [pc, #564]	; (800352c <menu+0x1f68>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032fc:	f002 fece 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003300:	2104      	movs	r1, #4
 8003302:	4888      	ldr	r0, [pc, #544]	; (8003524 <menu+0x1f60>)
 8003304:	f006 fca6 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d115      	bne.n	800333a <menu+0x1d76>
 800330e:	4b86      	ldr	r3, [pc, #536]	; (8003528 <menu+0x1f64>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	f083 0301 	eor.w	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 800331c:	4b83      	ldr	r3, [pc, #524]	; (800352c <menu+0x1f68>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	3b01      	subs	r3, #1
 8003322:	b2da      	uxtb	r2, r3
 8003324:	4b81      	ldr	r3, [pc, #516]	; (800352c <menu+0x1f68>)
 8003326:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003328:	4b80      	ldr	r3, [pc, #512]	; (800352c <menu+0x1f68>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003330:	4b7e      	ldr	r3, [pc, #504]	; (800352c <menu+0x1f68>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003336:	f002 feb1 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800333a:	2108      	movs	r1, #8
 800333c:	4879      	ldr	r0, [pc, #484]	; (8003524 <menu+0x1f60>)
 800333e:	f006 fc89 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003342:	4603      	mov	r3, r0
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10d      	bne.n	8003364 <menu+0x1da0>
 8003348:	4b77      	ldr	r3, [pc, #476]	; (8003528 <menu+0x1f64>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	f083 0301 	eor.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003356:	4b75      	ldr	r3, [pc, #468]	; (800352c <menu+0x1f68>)
 8003358:	781a      	ldrb	r2, [r3, #0]
 800335a:	4b75      	ldr	r3, [pc, #468]	; (8003530 <menu+0x1f6c>)
 800335c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800335e:	4b75      	ldr	r3, [pc, #468]	; (8003534 <menu+0x1f70>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003364:	4b74      	ldr	r3, [pc, #464]	; (8003538 <menu+0x1f74>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b11      	cmp	r3, #17
 800336a:	f040 80c3 	bne.w	80034f4 <menu+0x1f30>
		if(dilSecim == 0) {
 800336e:	4b6b      	ldr	r3, [pc, #428]	; (800351c <menu+0x1f58>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003376:	4a71      	ldr	r2, [pc, #452]	; (800353c <menu+0x1f78>)
 8003378:	2101      	movs	r1, #1
 800337a:	2001      	movs	r0, #1
 800337c:	f7fd f974 	bl	8000668 <lcd_print>
 8003380:	e008      	b.n	8003394 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003382:	4b66      	ldr	r3, [pc, #408]	; (800351c <menu+0x1f58>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d104      	bne.n	8003394 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800338a:	4a6d      	ldr	r2, [pc, #436]	; (8003540 <menu+0x1f7c>)
 800338c:	2101      	movs	r1, #1
 800338e:	2001      	movs	r0, #1
 8003390:	f7fd f96a 	bl	8000668 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003394:	4b6b      	ldr	r3, [pc, #428]	; (8003544 <menu+0x1f80>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d113      	bne.n	80033c4 <menu+0x1e00>
			if(dilSecim == 0){
 800339c:	4b5f      	ldr	r3, [pc, #380]	; (800351c <menu+0x1f58>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <menu+0x1f84>)
 80033a6:	2101      	movs	r1, #1
 80033a8:	2002      	movs	r0, #2
 80033aa:	f7fd f95d 	bl	8000668 <lcd_print>
 80033ae:	e038      	b.n	8003422 <menu+0x1e5e>
			} else if(dilSecim == 1){
 80033b0:	4b5a      	ldr	r3, [pc, #360]	; (800351c <menu+0x1f58>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d134      	bne.n	8003422 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80033b8:	4a64      	ldr	r2, [pc, #400]	; (800354c <menu+0x1f88>)
 80033ba:	2101      	movs	r1, #1
 80033bc:	2002      	movs	r0, #2
 80033be:	f7fd f953 	bl	8000668 <lcd_print>
 80033c2:	e02e      	b.n	8003422 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033c4:	4b5f      	ldr	r3, [pc, #380]	; (8003544 <menu+0x1f80>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d113      	bne.n	80033f4 <menu+0x1e30>
			if(dilSecim == 0){
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <menu+0x1f58>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80033d4:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <menu+0x1f8c>)
 80033d6:	2101      	movs	r1, #1
 80033d8:	2002      	movs	r0, #2
 80033da:	f7fd f945 	bl	8000668 <lcd_print>
 80033de:	e020      	b.n	8003422 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80033e0:	4b4e      	ldr	r3, [pc, #312]	; (800351c <menu+0x1f58>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d11c      	bne.n	8003422 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80033e8:	4a5a      	ldr	r2, [pc, #360]	; (8003554 <menu+0x1f90>)
 80033ea:	2101      	movs	r1, #1
 80033ec:	2002      	movs	r0, #2
 80033ee:	f7fd f93b 	bl	8000668 <lcd_print>
 80033f2:	e016      	b.n	8003422 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <menu+0x1f80>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d112      	bne.n	8003422 <menu+0x1e5e>
			if(dilSecim == 0) {
 80033fc:	4b47      	ldr	r3, [pc, #284]	; (800351c <menu+0x1f58>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003404:	4a54      	ldr	r2, [pc, #336]	; (8003558 <menu+0x1f94>)
 8003406:	2101      	movs	r1, #1
 8003408:	2002      	movs	r0, #2
 800340a:	f7fd f92d 	bl	8000668 <lcd_print>
 800340e:	e008      	b.n	8003422 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003410:	4b42      	ldr	r3, [pc, #264]	; (800351c <menu+0x1f58>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d104      	bne.n	8003422 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003418:	4a50      	ldr	r2, [pc, #320]	; (800355c <menu+0x1f98>)
 800341a:	2101      	movs	r1, #1
 800341c:	2002      	movs	r0, #2
 800341e:	f7fd f923 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003422:	2102      	movs	r1, #2
 8003424:	483f      	ldr	r0, [pc, #252]	; (8003524 <menu+0x1f60>)
 8003426:	f006 fc15 	bl	8009c54 <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d115      	bne.n	800345c <menu+0x1e98>
 8003430:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <menu+0x1f64>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <menu+0x1f80>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <menu+0x1f80>)
 8003448:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <menu+0x1f80>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d902      	bls.n	8003458 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003452:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <menu+0x1f80>)
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003458:	f002 fe20 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800345c:	2104      	movs	r1, #4
 800345e:	4831      	ldr	r0, [pc, #196]	; (8003524 <menu+0x1f60>)
 8003460:	f006 fbf8 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d115      	bne.n	8003496 <menu+0x1ed2>
 800346a:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <menu+0x1f64>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	f083 0301 	eor.w	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <menu+0x1f80>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	3b01      	subs	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b30      	ldr	r3, [pc, #192]	; (8003544 <menu+0x1f80>)
 8003482:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003484:	4b2f      	ldr	r3, [pc, #188]	; (8003544 <menu+0x1f80>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d902      	bls.n	8003492 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <menu+0x1f80>)
 800348e:	2202      	movs	r2, #2
 8003490:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003492:	f002 fe03 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003496:	2108      	movs	r1, #8
 8003498:	4822      	ldr	r0, [pc, #136]	; (8003524 <menu+0x1f60>)
 800349a:	f006 fbdb 	bl	8009c54 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d127      	bne.n	80034f4 <menu+0x1f30>
 80034a4:	4b20      	ldr	r3, [pc, #128]	; (8003528 <menu+0x1f64>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d020      	beq.n	80034f4 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <menu+0x1f80>)
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <menu+0x1f6c>)
 80034b8:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <menu+0x1f80>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d003      	beq.n	80034ca <menu+0x1f06>
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <menu+0x1f80>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d106      	bne.n	80034d8 <menu+0x1f14>
				calismaSekli = 0;
 80034ca:	4b25      	ldr	r3, [pc, #148]	; (8003560 <menu+0x1f9c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80034d0:	4b23      	ldr	r3, [pc, #140]	; (8003560 <menu+0x1f9c>)
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <menu+0x1f6c>)
 80034d6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <menu+0x1f80>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80034e0:	4b20      	ldr	r3, [pc, #128]	; (8003564 <menu+0x1fa0>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80034e6:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <menu+0x1fa0>)
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <menu+0x1f6c>)
 80034ec:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <menu+0x1f70>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <menu+0x1f74>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b12      	cmp	r3, #18
 80034fa:	f040 80d5 	bne.w	80036a8 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <menu+0x1f80>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d13c      	bne.n	8003580 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <menu+0x1f58>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d12e      	bne.n	800356c <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <menu+0x1fa4>)
 8003510:	2101      	movs	r1, #1
 8003512:	2001      	movs	r0, #1
 8003514:	f7fd f8a8 	bl	8000668 <lcd_print>
 8003518:	e048      	b.n	80035ac <menu+0x1fe8>
 800351a:	bf00      	nop
 800351c:	20000d2d 	.word	0x20000d2d
 8003520:	0800dc88 	.word	0x0800dc88
 8003524:	40010800 	.word	0x40010800
 8003528:	20000d3b 	.word	0x20000d3b
 800352c:	20000d1a 	.word	0x20000d1a
 8003530:	20000c38 	.word	0x20000c38
 8003534:	20000d38 	.word	0x20000d38
 8003538:	20000d0c 	.word	0x20000d0c
 800353c:	0800e004 	.word	0x0800e004
 8003540:	0800e018 	.word	0x0800e018
 8003544:	20000d1b 	.word	0x20000d1b
 8003548:	0800e02c 	.word	0x0800e02c
 800354c:	0800e03c 	.word	0x0800e03c
 8003550:	0800e04c 	.word	0x0800e04c
 8003554:	0800e05c 	.word	0x0800e05c
 8003558:	0800dc14 	.word	0x0800dc14
 800355c:	0800dc28 	.word	0x0800dc28
 8003560:	20000d0d 	.word	0x20000d0d
 8003564:	20000d1e 	.word	0x20000d1e
 8003568:	0800e06c 	.word	0x0800e06c
			} else if(dilSecim == 1) {
 800356c:	4b7b      	ldr	r3, [pc, #492]	; (800375c <menu+0x2198>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d11b      	bne.n	80035ac <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003574:	4a7a      	ldr	r2, [pc, #488]	; (8003760 <menu+0x219c>)
 8003576:	2101      	movs	r1, #1
 8003578:	2001      	movs	r0, #1
 800357a:	f7fd f875 	bl	8000668 <lcd_print>
 800357e:	e015      	b.n	80035ac <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003580:	4b78      	ldr	r3, [pc, #480]	; (8003764 <menu+0x21a0>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d111      	bne.n	80035ac <menu+0x1fe8>
			if(dilSecim == 0){
 8003588:	4b74      	ldr	r3, [pc, #464]	; (800375c <menu+0x2198>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003590:	4a75      	ldr	r2, [pc, #468]	; (8003768 <menu+0x21a4>)
 8003592:	2101      	movs	r1, #1
 8003594:	2001      	movs	r0, #1
 8003596:	f7fd f867 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 800359a:	4b70      	ldr	r3, [pc, #448]	; (800375c <menu+0x2198>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d104      	bne.n	80035ac <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80035a2:	4a72      	ldr	r2, [pc, #456]	; (800376c <menu+0x21a8>)
 80035a4:	2101      	movs	r1, #1
 80035a6:	2001      	movs	r0, #1
 80035a8:	f7fd f85e 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80035ac:	4b70      	ldr	r3, [pc, #448]	; (8003770 <menu+0x21ac>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d113      	bne.n	80035dc <menu+0x2018>
			if(dilSecim == 0) {
 80035b4:	4b69      	ldr	r3, [pc, #420]	; (800375c <menu+0x2198>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80035bc:	4a6d      	ldr	r2, [pc, #436]	; (8003774 <menu+0x21b0>)
 80035be:	2101      	movs	r1, #1
 80035c0:	2002      	movs	r0, #2
 80035c2:	f7fd f851 	bl	8000668 <lcd_print>
 80035c6:	e020      	b.n	800360a <menu+0x2046>
			} else if(dilSecim == 1){
 80035c8:	4b64      	ldr	r3, [pc, #400]	; (800375c <menu+0x2198>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d11c      	bne.n	800360a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80035d0:	4a69      	ldr	r2, [pc, #420]	; (8003778 <menu+0x21b4>)
 80035d2:	2101      	movs	r1, #1
 80035d4:	2002      	movs	r0, #2
 80035d6:	f7fd f847 	bl	8000668 <lcd_print>
 80035da:	e016      	b.n	800360a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80035dc:	4b64      	ldr	r3, [pc, #400]	; (8003770 <menu+0x21ac>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d112      	bne.n	800360a <menu+0x2046>
			if(dilSecim == 0){
 80035e4:	4b5d      	ldr	r3, [pc, #372]	; (800375c <menu+0x2198>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80035ec:	4a63      	ldr	r2, [pc, #396]	; (800377c <menu+0x21b8>)
 80035ee:	2101      	movs	r1, #1
 80035f0:	2002      	movs	r0, #2
 80035f2:	f7fd f839 	bl	8000668 <lcd_print>
 80035f6:	e008      	b.n	800360a <menu+0x2046>
			} else if(dilSecim == 1){
 80035f8:	4b58      	ldr	r3, [pc, #352]	; (800375c <menu+0x2198>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d104      	bne.n	800360a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003600:	4a5f      	ldr	r2, [pc, #380]	; (8003780 <menu+0x21bc>)
 8003602:	2101      	movs	r1, #1
 8003604:	2002      	movs	r0, #2
 8003606:	f7fd f82f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800360a:	2102      	movs	r1, #2
 800360c:	485d      	ldr	r0, [pc, #372]	; (8003784 <menu+0x21c0>)
 800360e:	f006 fb21 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d115      	bne.n	8003644 <menu+0x2080>
 8003618:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <menu+0x21c4>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f083 0301 	eor.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003626:	4b52      	ldr	r3, [pc, #328]	; (8003770 <menu+0x21ac>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	3301      	adds	r3, #1
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b50      	ldr	r3, [pc, #320]	; (8003770 <menu+0x21ac>)
 8003630:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003632:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <menu+0x21ac>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d902      	bls.n	8003640 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800363a:	4b4d      	ldr	r3, [pc, #308]	; (8003770 <menu+0x21ac>)
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003640:	f002 fd2c 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003644:	2104      	movs	r1, #4
 8003646:	484f      	ldr	r0, [pc, #316]	; (8003784 <menu+0x21c0>)
 8003648:	f006 fb04 	bl	8009c54 <HAL_GPIO_ReadPin>
 800364c:	4603      	mov	r3, r0
 800364e:	2b01      	cmp	r3, #1
 8003650:	d115      	bne.n	800367e <menu+0x20ba>
 8003652:	4b4d      	ldr	r3, [pc, #308]	; (8003788 <menu+0x21c4>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f083 0301 	eor.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003660:	4b43      	ldr	r3, [pc, #268]	; (8003770 <menu+0x21ac>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	3b01      	subs	r3, #1
 8003666:	b2da      	uxtb	r2, r3
 8003668:	4b41      	ldr	r3, [pc, #260]	; (8003770 <menu+0x21ac>)
 800366a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <menu+0x21ac>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <menu+0x21ac>)
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800367a:	f002 fd0f 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800367e:	2108      	movs	r1, #8
 8003680:	4840      	ldr	r0, [pc, #256]	; (8003784 <menu+0x21c0>)
 8003682:	f006 fae7 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10d      	bne.n	80036a8 <menu+0x20e4>
 800368c:	4b3e      	ldr	r3, [pc, #248]	; (8003788 <menu+0x21c4>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800369a:	4b35      	ldr	r3, [pc, #212]	; (8003770 <menu+0x21ac>)
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	4b3b      	ldr	r3, [pc, #236]	; (800378c <menu+0x21c8>)
 80036a0:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80036a2:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <menu+0x21cc>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80036a8:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <menu+0x21d0>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b13      	cmp	r3, #19
 80036ae:	f040 80d5 	bne.w	800385c <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80036b2:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <menu+0x21a0>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d113      	bne.n	80036e2 <menu+0x211e>
			if(dilSecim == 0) {
 80036ba:	4b28      	ldr	r3, [pc, #160]	; (800375c <menu+0x2198>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80036c2:	4a35      	ldr	r2, [pc, #212]	; (8003798 <menu+0x21d4>)
 80036c4:	2101      	movs	r1, #1
 80036c6:	2001      	movs	r0, #1
 80036c8:	f7fc ffce 	bl	8000668 <lcd_print>
 80036cc:	e01f      	b.n	800370e <menu+0x214a>
			} else if(dilSecim == 1) {
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <menu+0x2198>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d11b      	bne.n	800370e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80036d6:	4a31      	ldr	r2, [pc, #196]	; (800379c <menu+0x21d8>)
 80036d8:	2101      	movs	r1, #1
 80036da:	2001      	movs	r0, #1
 80036dc:	f7fc ffc4 	bl	8000668 <lcd_print>
 80036e0:	e015      	b.n	800370e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <menu+0x21a0>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d111      	bne.n	800370e <menu+0x214a>
			if(dilSecim == 0) {
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <menu+0x2198>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80036f2:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <menu+0x21dc>)
 80036f4:	2101      	movs	r1, #1
 80036f6:	2001      	movs	r0, #1
 80036f8:	f7fc ffb6 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <menu+0x2198>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d104      	bne.n	800370e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003704:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <menu+0x21e0>)
 8003706:	2101      	movs	r1, #1
 8003708:	2001      	movs	r0, #1
 800370a:	f7fc ffad 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800370e:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <menu+0x21e4>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d113      	bne.n	800373e <menu+0x217a>
			if(dilSecim == 0) {
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <menu+0x2198>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <menu+0x21b0>)
 8003720:	2101      	movs	r1, #1
 8003722:	2002      	movs	r0, #2
 8003724:	f7fc ffa0 	bl	8000668 <lcd_print>
 8003728:	e049      	b.n	80037be <menu+0x21fa>
			} else if(dilSecim == 1) {
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <menu+0x2198>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d145      	bne.n	80037be <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003732:	4a11      	ldr	r2, [pc, #68]	; (8003778 <menu+0x21b4>)
 8003734:	2101      	movs	r1, #1
 8003736:	2002      	movs	r0, #2
 8003738:	f7fc ff96 	bl	8000668 <lcd_print>
 800373c:	e03f      	b.n	80037be <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <menu+0x21e4>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d13b      	bne.n	80037be <menu+0x21fa>
			if(dilSecim == 0) {
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <menu+0x2198>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d12e      	bne.n	80037ac <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <menu+0x21b8>)
 8003750:	2101      	movs	r1, #1
 8003752:	2002      	movs	r0, #2
 8003754:	f7fc ff88 	bl	8000668 <lcd_print>
 8003758:	e031      	b.n	80037be <menu+0x21fa>
 800375a:	bf00      	nop
 800375c:	20000d2d 	.word	0x20000d2d
 8003760:	0800e080 	.word	0x0800e080
 8003764:	20000d1b 	.word	0x20000d1b
 8003768:	0800e090 	.word	0x0800e090
 800376c:	0800e0a4 	.word	0x0800e0a4
 8003770:	20000d1c 	.word	0x20000d1c
 8003774:	0800dc14 	.word	0x0800dc14
 8003778:	0800dc28 	.word	0x0800dc28
 800377c:	0800dc74 	.word	0x0800dc74
 8003780:	0800dc88 	.word	0x0800dc88
 8003784:	40010800 	.word	0x40010800
 8003788:	20000d3b 	.word	0x20000d3b
 800378c:	20000c38 	.word	0x20000c38
 8003790:	20000d38 	.word	0x20000d38
 8003794:	20000d0c 	.word	0x20000d0c
 8003798:	0800e0b8 	.word	0x0800e0b8
 800379c:	0800e0cc 	.word	0x0800e0cc
 80037a0:	0800e0e0 	.word	0x0800e0e0
 80037a4:	0800e0f4 	.word	0x0800e0f4
 80037a8:	20000d1d 	.word	0x20000d1d
			} else if(dilSecim == 1) {
 80037ac:	4b90      	ldr	r3, [pc, #576]	; (80039f0 <menu+0x242c>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d104      	bne.n	80037be <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80037b4:	4a8f      	ldr	r2, [pc, #572]	; (80039f4 <menu+0x2430>)
 80037b6:	2101      	movs	r1, #1
 80037b8:	2002      	movs	r0, #2
 80037ba:	f7fc ff55 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037be:	2102      	movs	r1, #2
 80037c0:	488d      	ldr	r0, [pc, #564]	; (80039f8 <menu+0x2434>)
 80037c2:	f006 fa47 	bl	8009c54 <HAL_GPIO_ReadPin>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d115      	bne.n	80037f8 <menu+0x2234>
 80037cc:	4b8b      	ldr	r3, [pc, #556]	; (80039fc <menu+0x2438>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	f083 0301 	eor.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00e      	beq.n	80037f8 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80037da:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <menu+0x243c>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	3301      	adds	r3, #1
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4b87      	ldr	r3, [pc, #540]	; (8003a00 <menu+0x243c>)
 80037e4:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80037e6:	4b86      	ldr	r3, [pc, #536]	; (8003a00 <menu+0x243c>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d902      	bls.n	80037f4 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80037ee:	4b84      	ldr	r3, [pc, #528]	; (8003a00 <menu+0x243c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037f4:	f002 fc52 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f8:	2104      	movs	r1, #4
 80037fa:	487f      	ldr	r0, [pc, #508]	; (80039f8 <menu+0x2434>)
 80037fc:	f006 fa2a 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d115      	bne.n	8003832 <menu+0x226e>
 8003806:	4b7d      	ldr	r3, [pc, #500]	; (80039fc <menu+0x2438>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	f083 0301 	eor.w	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00e      	beq.n	8003832 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003814:	4b7a      	ldr	r3, [pc, #488]	; (8003a00 <menu+0x243c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	3b01      	subs	r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b78      	ldr	r3, [pc, #480]	; (8003a00 <menu+0x243c>)
 800381e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003820:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <menu+0x243c>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003828:	4b75      	ldr	r3, [pc, #468]	; (8003a00 <menu+0x243c>)
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800382e:	f002 fc35 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003832:	2108      	movs	r1, #8
 8003834:	4870      	ldr	r0, [pc, #448]	; (80039f8 <menu+0x2434>)
 8003836:	f006 fa0d 	bl	8009c54 <HAL_GPIO_ReadPin>
 800383a:	4603      	mov	r3, r0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d10d      	bne.n	800385c <menu+0x2298>
 8003840:	4b6e      	ldr	r3, [pc, #440]	; (80039fc <menu+0x2438>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	f083 0301 	eor.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800384e:	4b6c      	ldr	r3, [pc, #432]	; (8003a00 <menu+0x243c>)
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	4b6c      	ldr	r3, [pc, #432]	; (8003a04 <menu+0x2440>)
 8003854:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <menu+0x2444>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800385c:	4b6b      	ldr	r3, [pc, #428]	; (8003a0c <menu+0x2448>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b14      	cmp	r3, #20
 8003862:	f040 80b5 	bne.w	80039d0 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003866:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <menu+0x244c>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d113      	bne.n	8003896 <menu+0x22d2>
			if(dilSecim == 0) {
 800386e:	4b60      	ldr	r3, [pc, #384]	; (80039f0 <menu+0x242c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003876:	4a67      	ldr	r2, [pc, #412]	; (8003a14 <menu+0x2450>)
 8003878:	2101      	movs	r1, #1
 800387a:	2001      	movs	r0, #1
 800387c:	f7fc fef4 	bl	8000668 <lcd_print>
 8003880:	e020      	b.n	80038c4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003882:	4b5b      	ldr	r3, [pc, #364]	; (80039f0 <menu+0x242c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d11c      	bne.n	80038c4 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800388a:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <menu+0x2454>)
 800388c:	2101      	movs	r1, #1
 800388e:	2001      	movs	r0, #1
 8003890:	f7fc feea 	bl	8000668 <lcd_print>
 8003894:	e016      	b.n	80038c4 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003896:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <menu+0x244c>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d112      	bne.n	80038c4 <menu+0x2300>
			if(dilSecim == 0) {
 800389e:	4b54      	ldr	r3, [pc, #336]	; (80039f0 <menu+0x242c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80038a6:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <menu+0x2458>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	2001      	movs	r0, #1
 80038ac:	f7fc fedc 	bl	8000668 <lcd_print>
 80038b0:	e008      	b.n	80038c4 <menu+0x2300>
			} else if(dilSecim == 1) {
 80038b2:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <menu+0x242c>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d104      	bne.n	80038c4 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80038ba:	4a59      	ldr	r2, [pc, #356]	; (8003a20 <menu+0x245c>)
 80038bc:	2101      	movs	r1, #1
 80038be:	2001      	movs	r0, #1
 80038c0:	f7fc fed2 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80038c4:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <menu+0x2460>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d113      	bne.n	80038f4 <menu+0x2330>
			if(dilSecim == 0) {
 80038cc:	4b48      	ldr	r3, [pc, #288]	; (80039f0 <menu+0x242c>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80038d4:	4a54      	ldr	r2, [pc, #336]	; (8003a28 <menu+0x2464>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	2002      	movs	r0, #2
 80038da:	f7fc fec5 	bl	8000668 <lcd_print>
 80038de:	e020      	b.n	8003922 <menu+0x235e>
			} else if(dilSecim == 1) {
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <menu+0x242c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d11c      	bne.n	8003922 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80038e8:	4a50      	ldr	r2, [pc, #320]	; (8003a2c <menu+0x2468>)
 80038ea:	2101      	movs	r1, #1
 80038ec:	2002      	movs	r0, #2
 80038ee:	f7fc febb 	bl	8000668 <lcd_print>
 80038f2:	e016      	b.n	8003922 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <menu+0x2460>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d112      	bne.n	8003922 <menu+0x235e>
			if(dilSecim == 0) {
 80038fc:	4b3c      	ldr	r3, [pc, #240]	; (80039f0 <menu+0x242c>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003904:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <menu+0x246c>)
 8003906:	2101      	movs	r1, #1
 8003908:	2002      	movs	r0, #2
 800390a:	f7fc fead 	bl	8000668 <lcd_print>
 800390e:	e008      	b.n	8003922 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003910:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <menu+0x242c>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d104      	bne.n	8003922 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003918:	4a46      	ldr	r2, [pc, #280]	; (8003a34 <menu+0x2470>)
 800391a:	2101      	movs	r1, #1
 800391c:	2002      	movs	r0, #2
 800391e:	f7fc fea3 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003922:	2102      	movs	r1, #2
 8003924:	4834      	ldr	r0, [pc, #208]	; (80039f8 <menu+0x2434>)
 8003926:	f006 f995 	bl	8009c54 <HAL_GPIO_ReadPin>
 800392a:	4603      	mov	r3, r0
 800392c:	2b01      	cmp	r3, #1
 800392e:	d119      	bne.n	8003964 <menu+0x23a0>
 8003930:	4b32      	ldr	r3, [pc, #200]	; (80039fc <menu+0x2438>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	f083 0301 	eor.w	r3, r3, #1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d012      	beq.n	8003964 <menu+0x23a0>
 800393e:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <menu+0x244c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d10e      	bne.n	8003964 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <menu+0x2460>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	3301      	adds	r3, #1
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <menu+0x2460>)
 8003950:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <menu+0x2460>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d902      	bls.n	8003960 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800395a:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <menu+0x2460>)
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003960:	f002 fb9c 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003964:	2104      	movs	r1, #4
 8003966:	4824      	ldr	r0, [pc, #144]	; (80039f8 <menu+0x2434>)
 8003968:	f006 f974 	bl	8009c54 <HAL_GPIO_ReadPin>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d119      	bne.n	80039a6 <menu+0x23e2>
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <menu+0x2438>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	f083 0301 	eor.w	r3, r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <menu+0x23e2>
 8003980:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <menu+0x244c>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d10e      	bne.n	80039a6 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003988:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <menu+0x2460>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	3b01      	subs	r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <menu+0x2460>)
 8003992:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <menu+0x2460>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <menu+0x2460>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039a2:	f002 fb7b 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a6:	2108      	movs	r1, #8
 80039a8:	4813      	ldr	r0, [pc, #76]	; (80039f8 <menu+0x2434>)
 80039aa:	f006 f953 	bl	8009c54 <HAL_GPIO_ReadPin>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10d      	bne.n	80039d0 <menu+0x240c>
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <menu+0x2438>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	f083 0301 	eor.w	r3, r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <menu+0x2460>)
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <menu+0x2440>)
 80039c8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <menu+0x2444>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <menu+0x2448>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b15      	cmp	r3, #21
 80039d6:	f040 80c2 	bne.w	8003b5e <menu+0x259a>
		if(dilSecim == 0) {
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <menu+0x242c>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d12c      	bne.n	8003a3c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <menu+0x2474>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7fc fe3e 	bl	8000668 <lcd_print>
 80039ec:	e02f      	b.n	8003a4e <menu+0x248a>
 80039ee:	bf00      	nop
 80039f0:	20000d2d 	.word	0x20000d2d
 80039f4:	0800dc88 	.word	0x0800dc88
 80039f8:	40010800 	.word	0x40010800
 80039fc:	20000d3b 	.word	0x20000d3b
 8003a00:	20000d1d 	.word	0x20000d1d
 8003a04:	20000c38 	.word	0x20000c38
 8003a08:	20000d38 	.word	0x20000d38
 8003a0c:	20000d0c 	.word	0x20000d0c
 8003a10:	20000d1b 	.word	0x20000d1b
 8003a14:	0800e108 	.word	0x0800e108
 8003a18:	0800e11c 	.word	0x0800e11c
 8003a1c:	0800e130 	.word	0x0800e130
 8003a20:	0800e144 	.word	0x0800e144
 8003a24:	20000d1e 	.word	0x20000d1e
 8003a28:	0800e158 	.word	0x0800e158
 8003a2c:	0800e16c 	.word	0x0800e16c
 8003a30:	0800e17c 	.word	0x0800e17c
 8003a34:	0800e190 	.word	0x0800e190
 8003a38:	0800e1a0 	.word	0x0800e1a0
		} else if(dilSecim == 1) {
 8003a3c:	4b9c      	ldr	r3, [pc, #624]	; (8003cb0 <menu+0x26ec>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d104      	bne.n	8003a4e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003a44:	4a9b      	ldr	r2, [pc, #620]	; (8003cb4 <menu+0x26f0>)
 8003a46:	2101      	movs	r1, #1
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f7fc fe0d 	bl	8000668 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003a4e:	4b9a      	ldr	r3, [pc, #616]	; (8003cb8 <menu+0x26f4>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d112      	bne.n	8003a7c <menu+0x24b8>
			if(dilSecim == 0) {
 8003a56:	4b96      	ldr	r3, [pc, #600]	; (8003cb0 <menu+0x26ec>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003a5e:	4a97      	ldr	r2, [pc, #604]	; (8003cbc <menu+0x26f8>)
 8003a60:	2101      	movs	r1, #1
 8003a62:	2002      	movs	r0, #2
 8003a64:	f7fc fe00 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a68:	4b91      	ldr	r3, [pc, #580]	; (8003cb0 <menu+0x26ec>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d11c      	bne.n	8003aaa <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003a70:	4a93      	ldr	r2, [pc, #588]	; (8003cc0 <menu+0x26fc>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	2002      	movs	r0, #2
 8003a76:	f7fc fdf7 	bl	8000668 <lcd_print>
 8003a7a:	e016      	b.n	8003aaa <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003a7c:	4b8e      	ldr	r3, [pc, #568]	; (8003cb8 <menu+0x26f4>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d112      	bne.n	8003aaa <menu+0x24e6>
			if(dilSecim == 0) {
 8003a84:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <menu+0x26ec>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d105      	bne.n	8003a98 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003a8c:	4a8d      	ldr	r2, [pc, #564]	; (8003cc4 <menu+0x2700>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	2002      	movs	r0, #2
 8003a92:	f7fc fde9 	bl	8000668 <lcd_print>
 8003a96:	e008      	b.n	8003aaa <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003a98:	4b85      	ldr	r3, [pc, #532]	; (8003cb0 <menu+0x26ec>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d104      	bne.n	8003aaa <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003aa0:	4a89      	ldr	r2, [pc, #548]	; (8003cc8 <menu+0x2704>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	2002      	movs	r0, #2
 8003aa6:	f7fc fddf 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4887      	ldr	r0, [pc, #540]	; (8003ccc <menu+0x2708>)
 8003aae:	f006 f8d1 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d115      	bne.n	8003ae4 <menu+0x2520>
 8003ab8:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <menu+0x270c>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	f083 0301 	eor.w	r3, r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00e      	beq.n	8003ae4 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003ac6:	4b7c      	ldr	r3, [pc, #496]	; (8003cb8 <menu+0x26f4>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <menu+0x26f4>)
 8003ad0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003ad2:	4b79      	ldr	r3, [pc, #484]	; (8003cb8 <menu+0x26f4>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d902      	bls.n	8003ae0 <menu+0x251c>
				platformSilindirTipi = 0;
 8003ada:	4b77      	ldr	r3, [pc, #476]	; (8003cb8 <menu+0x26f4>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ae0:	f002 fadc 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4879      	ldr	r0, [pc, #484]	; (8003ccc <menu+0x2708>)
 8003ae8:	f006 f8b4 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d115      	bne.n	8003b1e <menu+0x255a>
 8003af2:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <menu+0x270c>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	f083 0301 	eor.w	r3, r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003b00:	4b6d      	ldr	r3, [pc, #436]	; (8003cb8 <menu+0x26f4>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b6b      	ldr	r3, [pc, #428]	; (8003cb8 <menu+0x26f4>)
 8003b0a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <menu+0x26f4>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003b14:	4b68      	ldr	r3, [pc, #416]	; (8003cb8 <menu+0x26f4>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b1a:	f002 fabf 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1e:	2108      	movs	r1, #8
 8003b20:	486a      	ldr	r0, [pc, #424]	; (8003ccc <menu+0x2708>)
 8003b22:	f006 f897 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d118      	bne.n	8003b5e <menu+0x259a>
 8003b2c:	4b68      	ldr	r3, [pc, #416]	; (8003cd0 <menu+0x270c>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	f083 0301 	eor.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d011      	beq.n	8003b5e <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <menu+0x26f4>)
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <menu+0x2710>)
 8003b40:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003b42:	4b5d      	ldr	r3, [pc, #372]	; (8003cb8 <menu+0x26f4>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d106      	bne.n	8003b58 <menu+0x2594>
				altLimit = 1;
 8003b4a:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <menu+0x2714>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003b50:	4b61      	ldr	r3, [pc, #388]	; (8003cd8 <menu+0x2714>)
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	4b5f      	ldr	r3, [pc, #380]	; (8003cd4 <menu+0x2710>)
 8003b56:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003b58:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <menu+0x2718>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003b5e:	4b60      	ldr	r3, [pc, #384]	; (8003ce0 <menu+0x271c>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b16      	cmp	r3, #22
 8003b64:	f040 8081 	bne.w	8003c6a <menu+0x26a6>
		if(dilSecim == 0) {
 8003b68:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <menu+0x26ec>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003b70:	4a5c      	ldr	r2, [pc, #368]	; (8003ce4 <menu+0x2720>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	2001      	movs	r0, #1
 8003b76:	f7fc fd77 	bl	8000668 <lcd_print>
 8003b7a:	e008      	b.n	8003b8e <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003b7c:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <menu+0x26ec>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d104      	bne.n	8003b8e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <menu+0x2724>)
 8003b86:	2101      	movs	r1, #1
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f7fc fd6d 	bl	8000668 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b8e:	4b48      	ldr	r3, [pc, #288]	; (8003cb0 <menu+0x26ec>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b96:	4a55      	ldr	r2, [pc, #340]	; (8003cec <menu+0x2728>)
 8003b98:	2101      	movs	r1, #1
 8003b9a:	2002      	movs	r0, #2
 8003b9c:	f7fc fd64 	bl	8000668 <lcd_print>
 8003ba0:	e008      	b.n	8003bb4 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003ba2:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <menu+0x26ec>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d104      	bne.n	8003bb4 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003baa:	4a51      	ldr	r2, [pc, #324]	; (8003cf0 <menu+0x272c>)
 8003bac:	2101      	movs	r1, #1
 8003bae:	2002      	movs	r0, #2
 8003bb0:	f7fc fd5a 	bl	8000668 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <menu+0x2730>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	220a      	movs	r2, #10
 8003bba:	494f      	ldr	r1, [pc, #316]	; (8003cf8 <menu+0x2734>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f009 f875 	bl	800ccac <itoa>
		lcd_print(2,16,snum);
 8003bc2:	4a4d      	ldr	r2, [pc, #308]	; (8003cf8 <menu+0x2734>)
 8003bc4:	2110      	movs	r1, #16
 8003bc6:	2002      	movs	r0, #2
 8003bc8:	f7fc fd4e 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bcc:	2102      	movs	r1, #2
 8003bce:	483f      	ldr	r0, [pc, #252]	; (8003ccc <menu+0x2708>)
 8003bd0:	f006 f840 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d115      	bne.n	8003c06 <menu+0x2642>
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <menu+0x270c>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	f083 0301 	eor.w	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003be8:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <menu+0x2730>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <menu+0x2730>)
 8003bf2:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <menu+0x2730>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d902      	bls.n	8003c02 <menu+0x263e>
				yukariValfTmr = 0;
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <menu+0x2730>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c02:	f002 fa4b 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c06:	2104      	movs	r1, #4
 8003c08:	4830      	ldr	r0, [pc, #192]	; (8003ccc <menu+0x2708>)
 8003c0a:	f006 f823 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d115      	bne.n	8003c40 <menu+0x267c>
 8003c14:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <menu+0x270c>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	f083 0301 	eor.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00e      	beq.n	8003c40 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003c22:	4b34      	ldr	r3, [pc, #208]	; (8003cf4 <menu+0x2730>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <menu+0x2730>)
 8003c2c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003c2e:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <menu+0x2730>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d902      	bls.n	8003c3c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <menu+0x2730>)
 8003c38:	2205      	movs	r2, #5
 8003c3a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c3c:	f002 fa2e 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c40:	2108      	movs	r1, #8
 8003c42:	4822      	ldr	r0, [pc, #136]	; (8003ccc <menu+0x2708>)
 8003c44:	f006 f806 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d10d      	bne.n	8003c6a <menu+0x26a6>
 8003c4e:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <menu+0x270c>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	f083 0301 	eor.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d006      	beq.n	8003c6a <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <menu+0x2730>)
 8003c5e:	781a      	ldrb	r2, [r3, #0]
 8003c60:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <menu+0x2710>)
 8003c62:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c64:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <menu+0x2718>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <menu+0x271c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b17      	cmp	r3, #23
 8003c70:	f040 80ac 	bne.w	8003dcc <menu+0x2808>
		if(dilSecim == 0) {
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <menu+0x26ec>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <menu+0x2738>)
 8003c7e:	2101      	movs	r1, #1
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7fc fcf1 	bl	8000668 <lcd_print>
 8003c86:	e008      	b.n	8003c9a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <menu+0x26ec>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d104      	bne.n	8003c9a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <menu+0x273c>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	2001      	movs	r0, #1
 8003c96:	f7fc fce7 	bl	8000668 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <menu+0x26ec>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d130      	bne.n	8003d04 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ca2:	4a12      	ldr	r2, [pc, #72]	; (8003cec <menu+0x2728>)
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	2002      	movs	r0, #2
 8003ca8:	f7fc fcde 	bl	8000668 <lcd_print>
 8003cac:	e033      	b.n	8003d16 <menu+0x2752>
 8003cae:	bf00      	nop
 8003cb0:	20000d2d 	.word	0x20000d2d
 8003cb4:	0800e1b4 	.word	0x0800e1b4
 8003cb8:	20000d1f 	.word	0x20000d1f
 8003cbc:	0800e158 	.word	0x0800e158
 8003cc0:	0800e16c 	.word	0x0800e16c
 8003cc4:	0800e17c 	.word	0x0800e17c
 8003cc8:	0800e190 	.word	0x0800e190
 8003ccc:	40010800 	.word	0x40010800
 8003cd0:	20000d3b 	.word	0x20000d3b
 8003cd4:	20000c38 	.word	0x20000c38
 8003cd8:	20000d12 	.word	0x20000d12
 8003cdc:	20000d38 	.word	0x20000d38
 8003ce0:	20000d0c 	.word	0x20000d0c
 8003ce4:	0800e1c4 	.word	0x0800e1c4
 8003ce8:	0800e1d8 	.word	0x0800e1d8
 8003cec:	0800de78 	.word	0x0800de78
 8003cf0:	0800e1ec 	.word	0x0800e1ec
 8003cf4:	20000d20 	.word	0x20000d20
 8003cf8:	20000cac 	.word	0x20000cac
 8003cfc:	0800e1fc 	.word	0x0800e1fc
 8003d00:	0800e210 	.word	0x0800e210
			} else if(dilSecim == 1) {
 8003d04:	4b98      	ldr	r3, [pc, #608]	; (8003f68 <menu+0x29a4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d104      	bne.n	8003d16 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003d0c:	4a97      	ldr	r2, [pc, #604]	; (8003f6c <menu+0x29a8>)
 8003d0e:	2101      	movs	r1, #1
 8003d10:	2002      	movs	r0, #2
 8003d12:	f7fc fca9 	bl	8000668 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003d16:	4b96      	ldr	r3, [pc, #600]	; (8003f70 <menu+0x29ac>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	220a      	movs	r2, #10
 8003d1c:	4995      	ldr	r1, [pc, #596]	; (8003f74 <menu+0x29b0>)
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f008 ffc4 	bl	800ccac <itoa>
		lcd_print(2,16,snum);
 8003d24:	4a93      	ldr	r2, [pc, #588]	; (8003f74 <menu+0x29b0>)
 8003d26:	2110      	movs	r1, #16
 8003d28:	2002      	movs	r0, #2
 8003d2a:	f7fc fc9d 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4891      	ldr	r0, [pc, #580]	; (8003f78 <menu+0x29b4>)
 8003d32:	f005 ff8f 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d115      	bne.n	8003d68 <menu+0x27a4>
 8003d3c:	4b8f      	ldr	r3, [pc, #572]	; (8003f7c <menu+0x29b8>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	f083 0301 	eor.w	r3, r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003d4a:	4b89      	ldr	r3, [pc, #548]	; (8003f70 <menu+0x29ac>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b87      	ldr	r3, [pc, #540]	; (8003f70 <menu+0x29ac>)
 8003d54:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003d56:	4b86      	ldr	r3, [pc, #536]	; (8003f70 <menu+0x29ac>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d902      	bls.n	8003d64 <menu+0x27a0>
				asagiValfTmr = 0;
 8003d5e:	4b84      	ldr	r3, [pc, #528]	; (8003f70 <menu+0x29ac>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d64:	f002 f99a 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d68:	2104      	movs	r1, #4
 8003d6a:	4883      	ldr	r0, [pc, #524]	; (8003f78 <menu+0x29b4>)
 8003d6c:	f005 ff72 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d115      	bne.n	8003da2 <menu+0x27de>
 8003d76:	4b81      	ldr	r3, [pc, #516]	; (8003f7c <menu+0x29b8>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	f083 0301 	eor.w	r3, r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00e      	beq.n	8003da2 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003d84:	4b7a      	ldr	r3, [pc, #488]	; (8003f70 <menu+0x29ac>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <menu+0x29ac>)
 8003d8e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003d90:	4b77      	ldr	r3, [pc, #476]	; (8003f70 <menu+0x29ac>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d902      	bls.n	8003d9e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003d98:	4b75      	ldr	r3, [pc, #468]	; (8003f70 <menu+0x29ac>)
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d9e:	f002 f97d 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003da2:	2108      	movs	r1, #8
 8003da4:	4874      	ldr	r0, [pc, #464]	; (8003f78 <menu+0x29b4>)
 8003da6:	f005 ff55 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10d      	bne.n	8003dcc <menu+0x2808>
 8003db0:	4b72      	ldr	r3, [pc, #456]	; (8003f7c <menu+0x29b8>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	f083 0301 	eor.w	r3, r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003dbe:	4b6c      	ldr	r3, [pc, #432]	; (8003f70 <menu+0x29ac>)
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <menu+0x29bc>)
 8003dc4:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003dc6:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <menu+0x29c0>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003dcc:	4b6e      	ldr	r3, [pc, #440]	; (8003f88 <menu+0x29c4>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b18      	cmp	r3, #24
 8003dd2:	f040 809d 	bne.w	8003f10 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003dd6:	4b6d      	ldr	r3, [pc, #436]	; (8003f8c <menu+0x29c8>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d113      	bne.n	8003e06 <menu+0x2842>
			if(dilSecim == 0) {
 8003dde:	4b62      	ldr	r3, [pc, #392]	; (8003f68 <menu+0x29a4>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003de6:	4a6a      	ldr	r2, [pc, #424]	; (8003f90 <menu+0x29cc>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	2001      	movs	r0, #1
 8003dec:	f7fc fc3c 	bl	8000668 <lcd_print>
 8003df0:	e020      	b.n	8003e34 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003df2:	4b5d      	ldr	r3, [pc, #372]	; (8003f68 <menu+0x29a4>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d11c      	bne.n	8003e34 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003dfa:	4a66      	ldr	r2, [pc, #408]	; (8003f94 <menu+0x29d0>)
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f7fc fc32 	bl	8000668 <lcd_print>
 8003e04:	e016      	b.n	8003e34 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e06:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <menu+0x29c8>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d112      	bne.n	8003e34 <menu+0x2870>
			if(dilSecim == 0) {
 8003e0e:	4b56      	ldr	r3, [pc, #344]	; (8003f68 <menu+0x29a4>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d105      	bne.n	8003e22 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003e16:	4a60      	ldr	r2, [pc, #384]	; (8003f98 <menu+0x29d4>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7fc fc24 	bl	8000668 <lcd_print>
 8003e20:	e008      	b.n	8003e34 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003e22:	4b51      	ldr	r3, [pc, #324]	; (8003f68 <menu+0x29a4>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d104      	bne.n	8003e34 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003e2a:	4a5c      	ldr	r2, [pc, #368]	; (8003f9c <menu+0x29d8>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f7fc fc1a 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <menu+0x29a4>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e3c:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <menu+0x29dc>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	2002      	movs	r0, #2
 8003e42:	f7fc fc11 	bl	8000668 <lcd_print>
 8003e46:	e008      	b.n	8003e5a <menu+0x2896>
			} else if(dilSecim == 1) {
 8003e48:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <menu+0x29a4>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d104      	bne.n	8003e5a <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003e50:	4a46      	ldr	r2, [pc, #280]	; (8003f6c <menu+0x29a8>)
 8003e52:	2101      	movs	r1, #1
 8003e54:	2002      	movs	r0, #2
 8003e56:	f7fc fc07 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003e5a:	4b52      	ldr	r3, [pc, #328]	; (8003fa4 <menu+0x29e0>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	220a      	movs	r2, #10
 8003e60:	4944      	ldr	r1, [pc, #272]	; (8003f74 <menu+0x29b0>)
 8003e62:	4618      	mov	r0, r3
 8003e64:	f008 ff22 	bl	800ccac <itoa>
		lcd_print(2, 16, snum);
 8003e68:	4a42      	ldr	r2, [pc, #264]	; (8003f74 <menu+0x29b0>)
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	f7fc fbfb 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e72:	2102      	movs	r1, #2
 8003e74:	4840      	ldr	r0, [pc, #256]	; (8003f78 <menu+0x29b4>)
 8003e76:	f005 feed 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d115      	bne.n	8003eac <menu+0x28e8>
 8003e80:	4b3e      	ldr	r3, [pc, #248]	; (8003f7c <menu+0x29b8>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	f083 0301 	eor.w	r3, r3, #1
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00e      	beq.n	8003eac <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003e8e:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <menu+0x29e0>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <menu+0x29e0>)
 8003e98:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003e9a:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <menu+0x29e0>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d902      	bls.n	8003ea8 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003ea2:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <menu+0x29e0>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ea8:	f002 f8f8 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eac:	2104      	movs	r1, #4
 8003eae:	4832      	ldr	r0, [pc, #200]	; (8003f78 <menu+0x29b4>)
 8003eb0:	f005 fed0 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d115      	bne.n	8003ee6 <menu+0x2922>
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <menu+0x29b8>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	f083 0301 	eor.w	r3, r3, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003ec8:	4b36      	ldr	r3, [pc, #216]	; (8003fa4 <menu+0x29e0>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <menu+0x29e0>)
 8003ed2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003ed4:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <menu+0x29e0>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d902      	bls.n	8003ee2 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003edc:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <menu+0x29e0>)
 8003ede:	2205      	movs	r2, #5
 8003ee0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ee2:	f002 f8db 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ee6:	2108      	movs	r1, #8
 8003ee8:	4823      	ldr	r0, [pc, #140]	; (8003f78 <menu+0x29b4>)
 8003eea:	f005 feb3 	bl	8009c54 <HAL_GPIO_ReadPin>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d10d      	bne.n	8003f10 <menu+0x294c>
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <menu+0x29b8>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f083 0301 	eor.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <menu+0x29e0>)
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <menu+0x29bc>)
 8003f08:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <menu+0x29c0>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <menu+0x29c4>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b19      	cmp	r3, #25
 8003f16:	f040 80c4 	bne.w	80040a2 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <menu+0x29c8>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d113      	bne.n	8003f4a <menu+0x2986>
			if(dilSecim == 0) {
 8003f22:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <menu+0x29a4>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <menu+0x29e4>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	2001      	movs	r0, #1
 8003f30:	f7fc fb9a 	bl	8000668 <lcd_print>
 8003f34:	e047      	b.n	8003fc6 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <menu+0x29a4>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d143      	bne.n	8003fc6 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003f3e:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <menu+0x29e8>)
 8003f40:	2101      	movs	r1, #1
 8003f42:	2001      	movs	r0, #1
 8003f44:	f7fc fb90 	bl	8000668 <lcd_print>
 8003f48:	e03d      	b.n	8003fc6 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <menu+0x29c8>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d139      	bne.n	8003fc6 <menu+0x2a02>
			if(dilSecim == 0) {
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <menu+0x29a4>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d12c      	bne.n	8003fb4 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <menu+0x29ec>)
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	2001      	movs	r0, #1
 8003f60:	f7fc fb82 	bl	8000668 <lcd_print>
 8003f64:	e02f      	b.n	8003fc6 <menu+0x2a02>
 8003f66:	bf00      	nop
 8003f68:	20000d2d 	.word	0x20000d2d
 8003f6c:	0800e1ec 	.word	0x0800e1ec
 8003f70:	20000d21 	.word	0x20000d21
 8003f74:	20000cac 	.word	0x20000cac
 8003f78:	40010800 	.word	0x40010800
 8003f7c:	20000d3b 	.word	0x20000d3b
 8003f80:	20000c38 	.word	0x20000c38
 8003f84:	20000d38 	.word	0x20000d38
 8003f88:	20000d0c 	.word	0x20000d0c
 8003f8c:	20000d1b 	.word	0x20000d1b
 8003f90:	0800e224 	.word	0x0800e224
 8003f94:	0800e238 	.word	0x0800e238
 8003f98:	0800e24c 	.word	0x0800e24c
 8003f9c:	0800e260 	.word	0x0800e260
 8003fa0:	0800de78 	.word	0x0800de78
 8003fa4:	20000d22 	.word	0x20000d22
 8003fa8:	0800e274 	.word	0x0800e274
 8003fac:	0800e288 	.word	0x0800e288
 8003fb0:	0800e29c 	.word	0x0800e29c
			} else if(dilSecim == 1) {
 8003fb4:	4b73      	ldr	r3, [pc, #460]	; (8004184 <menu+0x2bc0>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d104      	bne.n	8003fc6 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003fbc:	4a72      	ldr	r2, [pc, #456]	; (8004188 <menu+0x2bc4>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f7fc fb51 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003fc6:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <menu+0x2bc0>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fce:	4a6f      	ldr	r2, [pc, #444]	; (800418c <menu+0x2bc8>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	2002      	movs	r0, #2
 8003fd4:	f7fc fb48 	bl	8000668 <lcd_print>
 8003fd8:	e008      	b.n	8003fec <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003fda:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <menu+0x2bc0>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d104      	bne.n	8003fec <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003fe2:	4a6b      	ldr	r2, [pc, #428]	; (8004190 <menu+0x2bcc>)
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	2002      	movs	r0, #2
 8003fe8:	f7fc fb3e 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003fec:	4b69      	ldr	r3, [pc, #420]	; (8004194 <menu+0x2bd0>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	220a      	movs	r2, #10
 8003ff2:	4969      	ldr	r1, [pc, #420]	; (8004198 <menu+0x2bd4>)
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f008 fe59 	bl	800ccac <itoa>
		lcd_print(2,16,snum);
 8003ffa:	4a67      	ldr	r2, [pc, #412]	; (8004198 <menu+0x2bd4>)
 8003ffc:	2110      	movs	r1, #16
 8003ffe:	2002      	movs	r0, #2
 8004000:	f7fc fb32 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004004:	2102      	movs	r1, #2
 8004006:	4865      	ldr	r0, [pc, #404]	; (800419c <menu+0x2bd8>)
 8004008:	f005 fe24 	bl	8009c54 <HAL_GPIO_ReadPin>
 800400c:	4603      	mov	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d115      	bne.n	800403e <menu+0x2a7a>
 8004012:	4b63      	ldr	r3, [pc, #396]	; (80041a0 <menu+0x2bdc>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	f083 0301 	eor.w	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00e      	beq.n	800403e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8004020:	4b5c      	ldr	r3, [pc, #368]	; (8004194 <menu+0x2bd0>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	b2da      	uxtb	r2, r3
 8004028:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <menu+0x2bd0>)
 800402a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800402c:	4b59      	ldr	r3, [pc, #356]	; (8004194 <menu+0x2bd0>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b05      	cmp	r3, #5
 8004032:	d902      	bls.n	800403a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8004034:	4b57      	ldr	r3, [pc, #348]	; (8004194 <menu+0x2bd0>)
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800403a:	f002 f82f 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800403e:	2104      	movs	r1, #4
 8004040:	4856      	ldr	r0, [pc, #344]	; (800419c <menu+0x2bd8>)
 8004042:	f005 fe07 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d115      	bne.n	8004078 <menu+0x2ab4>
 800404c:	4b54      	ldr	r3, [pc, #336]	; (80041a0 <menu+0x2bdc>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	f083 0301 	eor.w	r3, r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00e      	beq.n	8004078 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800405a:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <menu+0x2bd0>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	3b01      	subs	r3, #1
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4b4c      	ldr	r3, [pc, #304]	; (8004194 <menu+0x2bd0>)
 8004064:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8004066:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <menu+0x2bd0>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b06      	cmp	r3, #6
 800406c:	d902      	bls.n	8004074 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800406e:	4b49      	ldr	r3, [pc, #292]	; (8004194 <menu+0x2bd0>)
 8004070:	2205      	movs	r2, #5
 8004072:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004074:	f002 f812 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004078:	2108      	movs	r1, #8
 800407a:	4848      	ldr	r0, [pc, #288]	; (800419c <menu+0x2bd8>)
 800407c:	f005 fdea 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10d      	bne.n	80040a2 <menu+0x2ade>
 8004086:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <menu+0x2bdc>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	f083 0301 	eor.w	r3, r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004094:	4b3f      	ldr	r3, [pc, #252]	; (8004194 <menu+0x2bd0>)
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <menu+0x2be0>)
 800409a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <menu+0x2be4>)
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <menu+0x2be8>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b1a      	cmp	r3, #26
 80040a8:	f040 80ec 	bne.w	8004284 <menu+0x2cc0>
		if(dilSecim == 0) {
 80040ac:	4b35      	ldr	r3, [pc, #212]	; (8004184 <menu+0x2bc0>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80040b4:	4a3e      	ldr	r2, [pc, #248]	; (80041b0 <menu+0x2bec>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7fc fad5 	bl	8000668 <lcd_print>
 80040be:	e008      	b.n	80040d2 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80040c0:	4b30      	ldr	r3, [pc, #192]	; (8004184 <menu+0x2bc0>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d104      	bne.n	80040d2 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80040c8:	4a3a      	ldr	r2, [pc, #232]	; (80041b4 <menu+0x2bf0>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	2001      	movs	r0, #1
 80040ce:	f7fc facb 	bl	8000668 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <menu+0x2bf4>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b63      	cmp	r3, #99	; 0x63
 80040d8:	d91e      	bls.n	8004118 <menu+0x2b54>
			if(dilSecim == 0) {
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <menu+0x2bc0>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80040e2:	4a2a      	ldr	r2, [pc, #168]	; (800418c <menu+0x2bc8>)
 80040e4:	2101      	movs	r1, #1
 80040e6:	2002      	movs	r0, #2
 80040e8:	f7fc fabe 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <menu+0x2bc0>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d104      	bne.n	80040fe <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80040f4:	4a26      	ldr	r2, [pc, #152]	; (8004190 <menu+0x2bcc>)
 80040f6:	2101      	movs	r1, #1
 80040f8:	2002      	movs	r0, #2
 80040fa:	f7fc fab5 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040fe:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <menu+0x2bf4>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	220a      	movs	r2, #10
 8004104:	4924      	ldr	r1, [pc, #144]	; (8004198 <menu+0x2bd4>)
 8004106:	4618      	mov	r0, r3
 8004108:	f008 fdd0 	bl	800ccac <itoa>
			lcd_print(2,14,snum);
 800410c:	4a22      	ldr	r2, [pc, #136]	; (8004198 <menu+0x2bd4>)
 800410e:	210e      	movs	r1, #14
 8004110:	2002      	movs	r0, #2
 8004112:	f7fc faa9 	bl	8000668 <lcd_print>
 8004116:	e066      	b.n	80041e6 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004118:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <menu+0x2bf4>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b09      	cmp	r3, #9
 800411e:	d923      	bls.n	8004168 <menu+0x2ba4>
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <menu+0x2bf4>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b63      	cmp	r3, #99	; 0x63
 8004126:	d81f      	bhi.n	8004168 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004128:	4b16      	ldr	r3, [pc, #88]	; (8004184 <menu+0x2bc0>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8004130:	4a16      	ldr	r2, [pc, #88]	; (800418c <menu+0x2bc8>)
 8004132:	2101      	movs	r1, #1
 8004134:	2002      	movs	r0, #2
 8004136:	f7fc fa97 	bl	8000668 <lcd_print>
 800413a:	e008      	b.n	800414e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <menu+0x2bc0>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d104      	bne.n	800414e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004144:	4a12      	ldr	r2, [pc, #72]	; (8004190 <menu+0x2bcc>)
 8004146:	2101      	movs	r1, #1
 8004148:	2002      	movs	r0, #2
 800414a:	f7fc fa8d 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <menu+0x2bf4>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	220a      	movs	r2, #10
 8004154:	4910      	ldr	r1, [pc, #64]	; (8004198 <menu+0x2bd4>)
 8004156:	4618      	mov	r0, r3
 8004158:	f008 fda8 	bl	800ccac <itoa>
			lcd_print(2, 15, snum);
 800415c:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <menu+0x2bd4>)
 800415e:	210f      	movs	r1, #15
 8004160:	2002      	movs	r0, #2
 8004162:	f7fc fa81 	bl	8000668 <lcd_print>
 8004166:	e03e      	b.n	80041e6 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <menu+0x2bf4>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b09      	cmp	r3, #9
 800416e:	d83a      	bhi.n	80041e6 <menu+0x2c22>
			if(dilSecim == 0) {
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <menu+0x2bc0>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d121      	bne.n	80041bc <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004178:	4a04      	ldr	r2, [pc, #16]	; (800418c <menu+0x2bc8>)
 800417a:	2101      	movs	r1, #1
 800417c:	2002      	movs	r0, #2
 800417e:	f7fc fa73 	bl	8000668 <lcd_print>
 8004182:	e024      	b.n	80041ce <menu+0x2c0a>
 8004184:	20000d2d 	.word	0x20000d2d
 8004188:	0800e2b0 	.word	0x0800e2b0
 800418c:	0800de78 	.word	0x0800de78
 8004190:	0800e1ec 	.word	0x0800e1ec
 8004194:	20000d23 	.word	0x20000d23
 8004198:	20000cac 	.word	0x20000cac
 800419c:	40010800 	.word	0x40010800
 80041a0:	20000d3b 	.word	0x20000d3b
 80041a4:	20000c38 	.word	0x20000c38
 80041a8:	20000d38 	.word	0x20000d38
 80041ac:	20000d0c 	.word	0x20000d0c
 80041b0:	0800e2c4 	.word	0x0800e2c4
 80041b4:	0800e2d8 	.word	0x0800e2d8
 80041b8:	20000d24 	.word	0x20000d24
			} else if(dilSecim == 1) {
 80041bc:	4b8f      	ldr	r3, [pc, #572]	; (80043fc <menu+0x2e38>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d104      	bne.n	80041ce <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80041c4:	4a8e      	ldr	r2, [pc, #568]	; (8004400 <menu+0x2e3c>)
 80041c6:	2101      	movs	r1, #1
 80041c8:	2002      	movs	r0, #2
 80041ca:	f7fc fa4d 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041ce:	4b8d      	ldr	r3, [pc, #564]	; (8004404 <menu+0x2e40>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	220a      	movs	r2, #10
 80041d4:	498c      	ldr	r1, [pc, #560]	; (8004408 <menu+0x2e44>)
 80041d6:	4618      	mov	r0, r3
 80041d8:	f008 fd68 	bl	800ccac <itoa>
			lcd_print(2, 16, snum);
 80041dc:	4a8a      	ldr	r2, [pc, #552]	; (8004408 <menu+0x2e44>)
 80041de:	2110      	movs	r1, #16
 80041e0:	2002      	movs	r0, #2
 80041e2:	f7fc fa41 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041e6:	2102      	movs	r1, #2
 80041e8:	4888      	ldr	r0, [pc, #544]	; (800440c <menu+0x2e48>)
 80041ea:	f005 fd33 	bl	8009c54 <HAL_GPIO_ReadPin>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d115      	bne.n	8004220 <menu+0x2c5c>
 80041f4:	4b86      	ldr	r3, [pc, #536]	; (8004410 <menu+0x2e4c>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f083 0301 	eor.w	r3, r3, #1
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00e      	beq.n	8004220 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004202:	4b80      	ldr	r3, [pc, #512]	; (8004404 <menu+0x2e40>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b7e      	ldr	r3, [pc, #504]	; (8004404 <menu+0x2e40>)
 800420c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800420e:	4b7d      	ldr	r3, [pc, #500]	; (8004404 <menu+0x2e40>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2bb4      	cmp	r3, #180	; 0xb4
 8004214:	d902      	bls.n	800421c <menu+0x2c58>
				makineCalismaTmr = 0;
 8004216:	4b7b      	ldr	r3, [pc, #492]	; (8004404 <menu+0x2e40>)
 8004218:	2200      	movs	r2, #0
 800421a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800421c:	f001 ff3e 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004220:	2104      	movs	r1, #4
 8004222:	487a      	ldr	r0, [pc, #488]	; (800440c <menu+0x2e48>)
 8004224:	f005 fd16 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d115      	bne.n	800425a <menu+0x2c96>
 800422e:	4b78      	ldr	r3, [pc, #480]	; (8004410 <menu+0x2e4c>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	f083 0301 	eor.w	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 800423c:	4b71      	ldr	r3, [pc, #452]	; (8004404 <menu+0x2e40>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	3b01      	subs	r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <menu+0x2e40>)
 8004246:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004248:	4b6e      	ldr	r3, [pc, #440]	; (8004404 <menu+0x2e40>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2bb5      	cmp	r3, #181	; 0xb5
 800424e:	d902      	bls.n	8004256 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <menu+0x2e40>)
 8004252:	22b4      	movs	r2, #180	; 0xb4
 8004254:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004256:	f001 ff21 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800425a:	2108      	movs	r1, #8
 800425c:	486b      	ldr	r0, [pc, #428]	; (800440c <menu+0x2e48>)
 800425e:	f005 fcf9 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004262:	4603      	mov	r3, r0
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10d      	bne.n	8004284 <menu+0x2cc0>
 8004268:	4b69      	ldr	r3, [pc, #420]	; (8004410 <menu+0x2e4c>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	f083 0301 	eor.w	r3, r3, #1
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d006      	beq.n	8004284 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004276:	4b63      	ldr	r3, [pc, #396]	; (8004404 <menu+0x2e40>)
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	4b66      	ldr	r3, [pc, #408]	; (8004414 <menu+0x2e50>)
 800427c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800427e:	4b66      	ldr	r3, [pc, #408]	; (8004418 <menu+0x2e54>)
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004284:	4b65      	ldr	r3, [pc, #404]	; (800441c <menu+0x2e58>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b1b      	cmp	r3, #27
 800428a:	f040 8083 	bne.w	8004394 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800428e:	4a64      	ldr	r2, [pc, #400]	; (8004420 <menu+0x2e5c>)
 8004290:	2101      	movs	r1, #1
 8004292:	2001      	movs	r0, #1
 8004294:	f7fc f9e8 	bl	8000668 <lcd_print>

		if(buzzer == 0) {
 8004298:	4b62      	ldr	r3, [pc, #392]	; (8004424 <menu+0x2e60>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d113      	bne.n	80042c8 <menu+0x2d04>
			if(dilSecim == 0) {
 80042a0:	4b56      	ldr	r3, [pc, #344]	; (80043fc <menu+0x2e38>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80042a8:	4a5f      	ldr	r2, [pc, #380]	; (8004428 <menu+0x2e64>)
 80042aa:	2101      	movs	r1, #1
 80042ac:	2002      	movs	r0, #2
 80042ae:	f7fc f9db 	bl	8000668 <lcd_print>
 80042b2:	e020      	b.n	80042f6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042b4:	4b51      	ldr	r3, [pc, #324]	; (80043fc <menu+0x2e38>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d11c      	bne.n	80042f6 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80042bc:	4a5b      	ldr	r2, [pc, #364]	; (800442c <menu+0x2e68>)
 80042be:	2101      	movs	r1, #1
 80042c0:	2002      	movs	r0, #2
 80042c2:	f7fc f9d1 	bl	8000668 <lcd_print>
 80042c6:	e016      	b.n	80042f6 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80042c8:	4b56      	ldr	r3, [pc, #344]	; (8004424 <menu+0x2e60>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d112      	bne.n	80042f6 <menu+0x2d32>
			if(dilSecim == 0) {
 80042d0:	4b4a      	ldr	r3, [pc, #296]	; (80043fc <menu+0x2e38>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80042d8:	4a55      	ldr	r2, [pc, #340]	; (8004430 <menu+0x2e6c>)
 80042da:	2101      	movs	r1, #1
 80042dc:	2002      	movs	r0, #2
 80042de:	f7fc f9c3 	bl	8000668 <lcd_print>
 80042e2:	e008      	b.n	80042f6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042e4:	4b45      	ldr	r3, [pc, #276]	; (80043fc <menu+0x2e38>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d104      	bne.n	80042f6 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80042ec:	4a51      	ldr	r2, [pc, #324]	; (8004434 <menu+0x2e70>)
 80042ee:	2101      	movs	r1, #1
 80042f0:	2002      	movs	r0, #2
 80042f2:	f7fc f9b9 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042f6:	2102      	movs	r1, #2
 80042f8:	4844      	ldr	r0, [pc, #272]	; (800440c <menu+0x2e48>)
 80042fa:	f005 fcab 	bl	8009c54 <HAL_GPIO_ReadPin>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b01      	cmp	r3, #1
 8004302:	d115      	bne.n	8004330 <menu+0x2d6c>
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <menu+0x2e4c>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f083 0301 	eor.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00e      	beq.n	8004330 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8004312:	4b44      	ldr	r3, [pc, #272]	; (8004424 <menu+0x2e60>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b42      	ldr	r3, [pc, #264]	; (8004424 <menu+0x2e60>)
 800431c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800431e:	4b41      	ldr	r3, [pc, #260]	; (8004424 <menu+0x2e60>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d902      	bls.n	800432c <menu+0x2d68>
				buzzer = 0;
 8004326:	4b3f      	ldr	r3, [pc, #252]	; (8004424 <menu+0x2e60>)
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800432c:	f001 feb6 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004330:	2104      	movs	r1, #4
 8004332:	4836      	ldr	r0, [pc, #216]	; (800440c <menu+0x2e48>)
 8004334:	f005 fc8e 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004338:	4603      	mov	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d115      	bne.n	800436a <menu+0x2da6>
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <menu+0x2e4c>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	f083 0301 	eor.w	r3, r3, #1
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <menu+0x2da6>
			buzzer = buzzer - 1;
 800434c:	4b35      	ldr	r3, [pc, #212]	; (8004424 <menu+0x2e60>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	3b01      	subs	r3, #1
 8004352:	b2da      	uxtb	r2, r3
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <menu+0x2e60>)
 8004356:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004358:	4b32      	ldr	r3, [pc, #200]	; (8004424 <menu+0x2e60>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <menu+0x2da2>
		   		buzzer = 1;
 8004360:	4b30      	ldr	r3, [pc, #192]	; (8004424 <menu+0x2e60>)
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004366:	f001 fe99 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800436a:	2108      	movs	r1, #8
 800436c:	4827      	ldr	r0, [pc, #156]	; (800440c <menu+0x2e48>)
 800436e:	f005 fc71 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004372:	4603      	mov	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d10d      	bne.n	8004394 <menu+0x2dd0>
 8004378:	4b25      	ldr	r3, [pc, #148]	; (8004410 <menu+0x2e4c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	f083 0301 	eor.w	r3, r3, #1
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d006      	beq.n	8004394 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004386:	4b27      	ldr	r3, [pc, #156]	; (8004424 <menu+0x2e60>)
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <menu+0x2e50>)
 800438c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <menu+0x2e54>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <menu+0x2e58>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b1c      	cmp	r3, #28
 800439a:	f040 80ab 	bne.w	80044f4 <menu+0x2f30>
		calismaSayModu = 0;
 800439e:	4b26      	ldr	r3, [pc, #152]	; (8004438 <menu+0x2e74>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <menu+0x2e78>)
 80043a6:	2101      	movs	r1, #1
 80043a8:	2001      	movs	r0, #1
 80043aa:	f7fc f95d 	bl	8000668 <lcd_print>

		if(demoMode == 0) {
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <menu+0x2e7c>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d113      	bne.n	80043de <menu+0x2e1a>
			if(dilSecim == 0) {
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <menu+0x2e38>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <menu+0x2e64>)
 80043c0:	2101      	movs	r1, #1
 80043c2:	2002      	movs	r0, #2
 80043c4:	f7fc f950 	bl	8000668 <lcd_print>
 80043c8:	e045      	b.n	8004456 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <menu+0x2e38>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d141      	bne.n	8004456 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80043d2:	4a16      	ldr	r2, [pc, #88]	; (800442c <menu+0x2e68>)
 80043d4:	2101      	movs	r1, #1
 80043d6:	2002      	movs	r0, #2
 80043d8:	f7fc f946 	bl	8000668 <lcd_print>
 80043dc:	e03b      	b.n	8004456 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <menu+0x2e7c>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d137      	bne.n	8004456 <menu+0x2e92>
			if(dilSecim == 0){
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <menu+0x2e38>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d12a      	bne.n	8004444 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80043ee:	4a10      	ldr	r2, [pc, #64]	; (8004430 <menu+0x2e6c>)
 80043f0:	2101      	movs	r1, #1
 80043f2:	2002      	movs	r0, #2
 80043f4:	f7fc f938 	bl	8000668 <lcd_print>
 80043f8:	e02d      	b.n	8004456 <menu+0x2e92>
 80043fa:	bf00      	nop
 80043fc:	20000d2d 	.word	0x20000d2d
 8004400:	0800e1ec 	.word	0x0800e1ec
 8004404:	20000d24 	.word	0x20000d24
 8004408:	20000cac 	.word	0x20000cac
 800440c:	40010800 	.word	0x40010800
 8004410:	20000d3b 	.word	0x20000d3b
 8004414:	20000c38 	.word	0x20000c38
 8004418:	20000d38 	.word	0x20000d38
 800441c:	20000d0c 	.word	0x20000d0c
 8004420:	0800e2ec 	.word	0x0800e2ec
 8004424:	20000d28 	.word	0x20000d28
 8004428:	0800dc14 	.word	0x0800dc14
 800442c:	0800dc28 	.word	0x0800dc28
 8004430:	0800dc74 	.word	0x0800dc74
 8004434:	0800dc88 	.word	0x0800dc88
 8004438:	20000d2c 	.word	0x20000d2c
 800443c:	0800e300 	.word	0x0800e300
 8004440:	20000d2a 	.word	0x20000d2a
			} else if(dilSecim == 1) {
 8004444:	4b71      	ldr	r3, [pc, #452]	; (800460c <menu+0x3048>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d104      	bne.n	8004456 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 800444c:	4a70      	ldr	r2, [pc, #448]	; (8004610 <menu+0x304c>)
 800444e:	2101      	movs	r1, #1
 8004450:	2002      	movs	r0, #2
 8004452:	f7fc f909 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004456:	2102      	movs	r1, #2
 8004458:	486e      	ldr	r0, [pc, #440]	; (8004614 <menu+0x3050>)
 800445a:	f005 fbfb 	bl	8009c54 <HAL_GPIO_ReadPin>
 800445e:	4603      	mov	r3, r0
 8004460:	2b01      	cmp	r3, #1
 8004462:	d115      	bne.n	8004490 <menu+0x2ecc>
 8004464:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <menu+0x3054>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	f083 0301 	eor.w	r3, r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00e      	beq.n	8004490 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004472:	4b6a      	ldr	r3, [pc, #424]	; (800461c <menu+0x3058>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4b68      	ldr	r3, [pc, #416]	; (800461c <menu+0x3058>)
 800447c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800447e:	4b67      	ldr	r3, [pc, #412]	; (800461c <menu+0x3058>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d902      	bls.n	800448c <menu+0x2ec8>
				demoMode = 0;
 8004486:	4b65      	ldr	r3, [pc, #404]	; (800461c <menu+0x3058>)
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800448c:	f001 fe06 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004490:	2104      	movs	r1, #4
 8004492:	4860      	ldr	r0, [pc, #384]	; (8004614 <menu+0x3050>)
 8004494:	f005 fbde 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d115      	bne.n	80044ca <menu+0x2f06>
 800449e:	4b5e      	ldr	r3, [pc, #376]	; (8004618 <menu+0x3054>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	f083 0301 	eor.w	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00e      	beq.n	80044ca <menu+0x2f06>
			demoMode = demoMode - 1;
 80044ac:	4b5b      	ldr	r3, [pc, #364]	; (800461c <menu+0x3058>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <menu+0x3058>)
 80044b6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80044b8:	4b58      	ldr	r3, [pc, #352]	; (800461c <menu+0x3058>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <menu+0x2f02>
		   		demoMode = 1;
 80044c0:	4b56      	ldr	r3, [pc, #344]	; (800461c <menu+0x3058>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044c6:	f001 fde9 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ca:	2108      	movs	r1, #8
 80044cc:	4851      	ldr	r0, [pc, #324]	; (8004614 <menu+0x3050>)
 80044ce:	f005 fbc1 	bl	8009c54 <HAL_GPIO_ReadPin>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10d      	bne.n	80044f4 <menu+0x2f30>
 80044d8:	4b4f      	ldr	r3, [pc, #316]	; (8004618 <menu+0x3054>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	f083 0301 	eor.w	r3, r3, #1
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d006      	beq.n	80044f4 <menu+0x2f30>
			eepromData[26] = demoMode;
 80044e6:	4b4d      	ldr	r3, [pc, #308]	; (800461c <menu+0x3058>)
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	4b4d      	ldr	r3, [pc, #308]	; (8004620 <menu+0x305c>)
 80044ec:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80044ee:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <menu+0x3060>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80044f4:	4b4c      	ldr	r3, [pc, #304]	; (8004628 <menu+0x3064>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b1d      	cmp	r3, #29
 80044fa:	f040 8132 	bne.w	8004762 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80044fe:	4b4b      	ldr	r3, [pc, #300]	; (800462c <menu+0x3068>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d113      	bne.n	800452e <menu+0x2f6a>
 8004506:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <menu+0x306c>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <menu+0x2f6a>
 800450e:	4b49      	ldr	r3, [pc, #292]	; (8004634 <menu+0x3070>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <menu+0x2f6a>
 8004516:	4b48      	ldr	r3, [pc, #288]	; (8004638 <menu+0x3074>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d107      	bne.n	800452e <menu+0x2f6a>
 800451e:	4b47      	ldr	r3, [pc, #284]	; (800463c <menu+0x3078>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004526:	4b46      	ldr	r3, [pc, #280]	; (8004640 <menu+0x307c>)
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	e002      	b.n	8004534 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800452e:	4b44      	ldr	r3, [pc, #272]	; (8004640 <menu+0x307c>)
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <menu+0x3080>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d154      	bne.n	80045e6 <menu+0x3022>
			if(dilSecim == 0) {
 800453c:	4b33      	ldr	r3, [pc, #204]	; (800460c <menu+0x3048>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004544:	4a40      	ldr	r2, [pc, #256]	; (8004648 <menu+0x3084>)
 8004546:	2101      	movs	r1, #1
 8004548:	2001      	movs	r0, #1
 800454a:	f7fc f88d 	bl	8000668 <lcd_print>
 800454e:	e008      	b.n	8004562 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004550:	4b2e      	ldr	r3, [pc, #184]	; (800460c <menu+0x3048>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d104      	bne.n	8004562 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004558:	4a3c      	ldr	r2, [pc, #240]	; (800464c <menu+0x3088>)
 800455a:	2101      	movs	r1, #1
 800455c:	2001      	movs	r0, #1
 800455e:	f7fc f883 	bl	8000668 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004562:	4b36      	ldr	r3, [pc, #216]	; (800463c <menu+0x3078>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	220a      	movs	r2, #10
 8004568:	4939      	ldr	r1, [pc, #228]	; (8004650 <menu+0x308c>)
 800456a:	4618      	mov	r0, r3
 800456c:	f008 fb9e 	bl	800ccac <itoa>
			lcd_print(2, 12, snum);
 8004570:	4a37      	ldr	r2, [pc, #220]	; (8004650 <menu+0x308c>)
 8004572:	210c      	movs	r1, #12
 8004574:	2002      	movs	r0, #2
 8004576:	f7fc f877 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800457a:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <menu+0x3074>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	220a      	movs	r2, #10
 8004580:	4933      	ldr	r1, [pc, #204]	; (8004650 <menu+0x308c>)
 8004582:	4618      	mov	r0, r3
 8004584:	f008 fb92 	bl	800ccac <itoa>
			lcd_print(2, 13, snum);
 8004588:	4a31      	ldr	r2, [pc, #196]	; (8004650 <menu+0x308c>)
 800458a:	210d      	movs	r1, #13
 800458c:	2002      	movs	r0, #2
 800458e:	f7fc f86b 	bl	8000668 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004592:	4b28      	ldr	r3, [pc, #160]	; (8004634 <menu+0x3070>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	220a      	movs	r2, #10
 8004598:	492d      	ldr	r1, [pc, #180]	; (8004650 <menu+0x308c>)
 800459a:	4618      	mov	r0, r3
 800459c:	f008 fb86 	bl	800ccac <itoa>
			lcd_print(2, 14, snum);
 80045a0:	4a2b      	ldr	r2, [pc, #172]	; (8004650 <menu+0x308c>)
 80045a2:	210e      	movs	r1, #14
 80045a4:	2002      	movs	r0, #2
 80045a6:	f7fc f85f 	bl	8000668 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <menu+0x306c>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	220a      	movs	r2, #10
 80045b0:	4927      	ldr	r1, [pc, #156]	; (8004650 <menu+0x308c>)
 80045b2:	4618      	mov	r0, r3
 80045b4:	f008 fb7a 	bl	800ccac <itoa>
			lcd_print(2, 15, snum);
 80045b8:	4a25      	ldr	r2, [pc, #148]	; (8004650 <menu+0x308c>)
 80045ba:	210f      	movs	r1, #15
 80045bc:	2002      	movs	r0, #2
 80045be:	f7fc f853 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <menu+0x3068>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	220a      	movs	r2, #10
 80045c8:	4921      	ldr	r1, [pc, #132]	; (8004650 <menu+0x308c>)
 80045ca:	4618      	mov	r0, r3
 80045cc:	f008 fb6e 	bl	800ccac <itoa>
			lcd_print(2, 16, snum);
 80045d0:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <menu+0x308c>)
 80045d2:	2110      	movs	r1, #16
 80045d4:	2002      	movs	r0, #2
 80045d6:	f7fc f847 	bl	8000668 <lcd_print>

			lcd_print(2, 1, "           ");
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <menu+0x3090>)
 80045dc:	2101      	movs	r1, #1
 80045de:	2002      	movs	r0, #2
 80045e0:	f7fc f842 	bl	8000668 <lcd_print>
 80045e4:	e048      	b.n	8004678 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80045e6:	4b17      	ldr	r3, [pc, #92]	; (8004644 <menu+0x3080>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d144      	bne.n	8004678 <menu+0x30b4>
			if(dilSecim == 0) {
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <menu+0x3048>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d132      	bne.n	800465c <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <menu+0x3084>)
 80045f8:	2101      	movs	r1, #1
 80045fa:	2001      	movs	r0, #1
 80045fc:	f7fc f834 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004600:	4a15      	ldr	r2, [pc, #84]	; (8004658 <menu+0x3094>)
 8004602:	2101      	movs	r1, #1
 8004604:	2002      	movs	r0, #2
 8004606:	f7fc f82f 	bl	8000668 <lcd_print>
 800460a:	e035      	b.n	8004678 <menu+0x30b4>
 800460c:	20000d2d 	.word	0x20000d2d
 8004610:	0800dc88 	.word	0x0800dc88
 8004614:	40010800 	.word	0x40010800
 8004618:	20000d3b 	.word	0x20000d3b
 800461c:	20000d2a 	.word	0x20000d2a
 8004620:	20000c38 	.word	0x20000c38
 8004624:	20000d38 	.word	0x20000d38
 8004628:	20000d0c 	.word	0x20000d0c
 800462c:	20000d09 	.word	0x20000d09
 8004630:	20000d0a 	.word	0x20000d0a
 8004634:	200009b4 	.word	0x200009b4
 8004638:	200009b5 	.word	0x200009b5
 800463c:	20000d0b 	.word	0x20000d0b
 8004640:	20000d4d 	.word	0x20000d4d
 8004644:	20000d2c 	.word	0x20000d2c
 8004648:	0800e310 	.word	0x0800e310
 800464c:	0800e324 	.word	0x0800e324
 8004650:	20000cac 	.word	0x20000cac
 8004654:	0800e338 	.word	0x0800e338
 8004658:	0800e344 	.word	0x0800e344
			} else if(dilSecim == 1) {
 800465c:	4b94      	ldr	r3, [pc, #592]	; (80048b0 <menu+0x32ec>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d109      	bne.n	8004678 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004664:	4a93      	ldr	r2, [pc, #588]	; (80048b4 <menu+0x32f0>)
 8004666:	2101      	movs	r1, #1
 8004668:	2001      	movs	r0, #1
 800466a:	f7fb fffd 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800466e:	4a92      	ldr	r2, [pc, #584]	; (80048b8 <menu+0x32f4>)
 8004670:	2101      	movs	r1, #1
 8004672:	2002      	movs	r0, #2
 8004674:	f7fb fff8 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004678:	2102      	movs	r1, #2
 800467a:	4890      	ldr	r0, [pc, #576]	; (80048bc <menu+0x32f8>)
 800467c:	f005 faea 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d119      	bne.n	80046ba <menu+0x30f6>
 8004686:	4b8e      	ldr	r3, [pc, #568]	; (80048c0 <menu+0x32fc>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	f083 0301 	eor.w	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d012      	beq.n	80046ba <menu+0x30f6>
 8004694:	4b8b      	ldr	r3, [pc, #556]	; (80048c4 <menu+0x3300>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800469c:	4b8a      	ldr	r3, [pc, #552]	; (80048c8 <menu+0x3304>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	3301      	adds	r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	4b88      	ldr	r3, [pc, #544]	; (80048c8 <menu+0x3304>)
 80046a6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80046a8:	4b87      	ldr	r3, [pc, #540]	; (80048c8 <menu+0x3304>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d902      	bls.n	80046b6 <menu+0x30f2>
				calismaSayModu = 0;
 80046b0:	4b85      	ldr	r3, [pc, #532]	; (80048c8 <menu+0x3304>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046b6:	f001 fcf1 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80046ba:	2104      	movs	r1, #4
 80046bc:	487f      	ldr	r0, [pc, #508]	; (80048bc <menu+0x32f8>)
 80046be:	f005 fac9 	bl	8009c54 <HAL_GPIO_ReadPin>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d119      	bne.n	80046fc <menu+0x3138>
 80046c8:	4b7d      	ldr	r3, [pc, #500]	; (80048c0 <menu+0x32fc>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	f083 0301 	eor.w	r3, r3, #1
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d012      	beq.n	80046fc <menu+0x3138>
 80046d6:	4b7b      	ldr	r3, [pc, #492]	; (80048c4 <menu+0x3300>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00e      	beq.n	80046fc <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80046de:	4b7a      	ldr	r3, [pc, #488]	; (80048c8 <menu+0x3304>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4b78      	ldr	r3, [pc, #480]	; (80048c8 <menu+0x3304>)
 80046e8:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80046ea:	4b77      	ldr	r3, [pc, #476]	; (80048c8 <menu+0x3304>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <menu+0x3134>
		   		calismaSayModu = 1;
 80046f2:	4b75      	ldr	r3, [pc, #468]	; (80048c8 <menu+0x3304>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046f8:	f001 fcd0 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046fc:	2108      	movs	r1, #8
 80046fe:	486f      	ldr	r0, [pc, #444]	; (80048bc <menu+0x32f8>)
 8004700:	f005 faa8 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004704:	4603      	mov	r3, r0
 8004706:	2b01      	cmp	r3, #1
 8004708:	d12b      	bne.n	8004762 <menu+0x319e>
 800470a:	4b6d      	ldr	r3, [pc, #436]	; (80048c0 <menu+0x32fc>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f083 0301 	eor.w	r3, r3, #1
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d024      	beq.n	8004762 <menu+0x319e>
			eepromData[32] = 0;
 8004718:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <menu+0x3308>)
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004720:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <menu+0x3308>)
 8004722:	2200      	movs	r2, #0
 8004724:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004726:	4b69      	ldr	r3, [pc, #420]	; (80048cc <menu+0x3308>)
 8004728:	2200      	movs	r2, #0
 800472a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800472c:	4b67      	ldr	r3, [pc, #412]	; (80048cc <menu+0x3308>)
 800472e:	2200      	movs	r2, #0
 8004730:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004732:	4b66      	ldr	r3, [pc, #408]	; (80048cc <menu+0x3308>)
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004738:	4b65      	ldr	r3, [pc, #404]	; (80048d0 <menu+0x330c>)
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800473e:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <menu+0x3310>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004744:	4b64      	ldr	r3, [pc, #400]	; (80048d8 <menu+0x3314>)
 8004746:	2200      	movs	r2, #0
 8004748:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800474a:	4b64      	ldr	r3, [pc, #400]	; (80048dc <menu+0x3318>)
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004750:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <menu+0x331c>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004756:	4b5c      	ldr	r3, [pc, #368]	; (80048c8 <menu+0x3304>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800475c:	4b61      	ldr	r3, [pc, #388]	; (80048e4 <menu+0x3320>)
 800475e:	2201      	movs	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004762:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <menu+0x3324>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b1e      	cmp	r3, #30
 8004768:	d16f      	bne.n	800484a <menu+0x3286>
		calismaSayModu = 0;
 800476a:	4b57      	ldr	r3, [pc, #348]	; (80048c8 <menu+0x3304>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004770:	4b4f      	ldr	r3, [pc, #316]	; (80048b0 <menu+0x32ec>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004778:	4a5c      	ldr	r2, [pc, #368]	; (80048ec <menu+0x3328>)
 800477a:	2101      	movs	r1, #1
 800477c:	2001      	movs	r0, #1
 800477e:	f7fb ff73 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004782:	4a5b      	ldr	r2, [pc, #364]	; (80048f0 <menu+0x332c>)
 8004784:	2101      	movs	r1, #1
 8004786:	2002      	movs	r0, #2
 8004788:	f7fb ff6e 	bl	8000668 <lcd_print>
 800478c:	e00d      	b.n	80047aa <menu+0x31e6>
		} else if(dilSecim == 1) {
 800478e:	4b48      	ldr	r3, [pc, #288]	; (80048b0 <menu+0x32ec>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d109      	bne.n	80047aa <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004796:	4a57      	ldr	r2, [pc, #348]	; (80048f4 <menu+0x3330>)
 8004798:	2101      	movs	r1, #1
 800479a:	2001      	movs	r0, #1
 800479c:	f7fb ff64 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80047a0:	4a55      	ldr	r2, [pc, #340]	; (80048f8 <menu+0x3334>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	2002      	movs	r0, #2
 80047a6:	f7fb ff5f 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047aa:	2102      	movs	r1, #2
 80047ac:	4843      	ldr	r0, [pc, #268]	; (80048bc <menu+0x32f8>)
 80047ae:	f005 fa51 	bl	8009c54 <HAL_GPIO_ReadPin>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d115      	bne.n	80047e4 <menu+0x3220>
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <menu+0x32fc>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f083 0301 	eor.w	r3, r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00e      	beq.n	80047e4 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <menu+0x32ec>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4b38      	ldr	r3, [pc, #224]	; (80048b0 <menu+0x32ec>)
 80047d0:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80047d2:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <menu+0x32ec>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d902      	bls.n	80047e0 <menu+0x321c>
				dilSecim = 0;
 80047da:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <menu+0x32ec>)
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047e0:	f001 fc5c 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047e4:	2104      	movs	r1, #4
 80047e6:	4835      	ldr	r0, [pc, #212]	; (80048bc <menu+0x32f8>)
 80047e8:	f005 fa34 	bl	8009c54 <HAL_GPIO_ReadPin>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d115      	bne.n	800481e <menu+0x325a>
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <menu+0x32fc>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	f083 0301 	eor.w	r3, r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00e      	beq.n	800481e <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <menu+0x32ec>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	3b01      	subs	r3, #1
 8004806:	b2da      	uxtb	r2, r3
 8004808:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <menu+0x32ec>)
 800480a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <menu+0x32ec>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <menu+0x3256>
		   		dilSecim = 1;
 8004814:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <menu+0x32ec>)
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800481a:	f001 fc3f 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800481e:	2108      	movs	r1, #8
 8004820:	4826      	ldr	r0, [pc, #152]	; (80048bc <menu+0x32f8>)
 8004822:	f005 fa17 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004826:	4603      	mov	r3, r0
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10e      	bne.n	800484a <menu+0x3286>
 800482c:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <menu+0x32fc>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f083 0301 	eor.w	r3, r3, #1
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <menu+0x3286>
			eepromData[33] = dilSecim;
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <menu+0x32ec>)
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	4b23      	ldr	r3, [pc, #140]	; (80048cc <menu+0x3308>)
 8004840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <menu+0x3320>)
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800484a:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <menu+0x3324>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b1f      	cmp	r3, #31
 8004850:	f040 80b7 	bne.w	80049c2 <menu+0x33fe>
		calismaSayModu = 0;
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <menu+0x3304>)
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800485a:	4a28      	ldr	r2, [pc, #160]	; (80048fc <menu+0x3338>)
 800485c:	2101      	movs	r1, #1
 800485e:	2001      	movs	r0, #1
 8004860:	f7fb ff02 	bl	8000668 <lcd_print>

		if(iotMode == 0) {
 8004864:	4b26      	ldr	r3, [pc, #152]	; (8004900 <menu+0x333c>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d113      	bne.n	8004894 <menu+0x32d0>
			if(dilSecim == 0) {
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <menu+0x32ec>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004874:	4a23      	ldr	r2, [pc, #140]	; (8004904 <menu+0x3340>)
 8004876:	2101      	movs	r1, #1
 8004878:	2002      	movs	r0, #2
 800487a:	f7fb fef5 	bl	8000668 <lcd_print>
 800487e:	e050      	b.n	8004922 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <menu+0x32ec>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d14c      	bne.n	8004922 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004888:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <menu+0x3344>)
 800488a:	2101      	movs	r1, #1
 800488c:	2002      	movs	r0, #2
 800488e:	f7fb feeb 	bl	8000668 <lcd_print>
 8004892:	e046      	b.n	8004922 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <menu+0x333c>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d142      	bne.n	8004922 <menu+0x335e>
			if(dilSecim == 0){
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <menu+0x32ec>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d135      	bne.n	8004910 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <menu+0x3348>)
 80048a6:	2101      	movs	r1, #1
 80048a8:	2002      	movs	r0, #2
 80048aa:	f7fb fedd 	bl	8000668 <lcd_print>
 80048ae:	e038      	b.n	8004922 <menu+0x335e>
 80048b0:	20000d2d 	.word	0x20000d2d
 80048b4:	0800e324 	.word	0x0800e324
 80048b8:	0800e358 	.word	0x0800e358
 80048bc:	40010800 	.word	0x40010800
 80048c0:	20000d3b 	.word	0x20000d3b
 80048c4:	20000d4d 	.word	0x20000d4d
 80048c8:	20000d2c 	.word	0x20000d2c
 80048cc:	20000c38 	.word	0x20000c38
 80048d0:	20000d0b 	.word	0x20000d0b
 80048d4:	200009b5 	.word	0x200009b5
 80048d8:	200009b4 	.word	0x200009b4
 80048dc:	20000d0a 	.word	0x20000d0a
 80048e0:	20000d09 	.word	0x20000d09
 80048e4:	20000d38 	.word	0x20000d38
 80048e8:	20000d0c 	.word	0x20000d0c
 80048ec:	0800e36c 	.word	0x0800e36c
 80048f0:	0800e380 	.word	0x0800e380
 80048f4:	0800e394 	.word	0x0800e394
 80048f8:	0800e3a8 	.word	0x0800e3a8
 80048fc:	0800e3bc 	.word	0x0800e3bc
 8004900:	20000d2b 	.word	0x20000d2b
 8004904:	0800dc14 	.word	0x0800dc14
 8004908:	0800dc28 	.word	0x0800dc28
 800490c:	0800dc74 	.word	0x0800dc74
			} else if(dilSecim == 1) {
 8004910:	4bac      	ldr	r3, [pc, #688]	; (8004bc4 <menu+0x3600>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d104      	bne.n	8004922 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004918:	4aab      	ldr	r2, [pc, #684]	; (8004bc8 <menu+0x3604>)
 800491a:	2101      	movs	r1, #1
 800491c:	2002      	movs	r0, #2
 800491e:	f7fb fea3 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004922:	2102      	movs	r1, #2
 8004924:	48a9      	ldr	r0, [pc, #676]	; (8004bcc <menu+0x3608>)
 8004926:	f005 f995 	bl	8009c54 <HAL_GPIO_ReadPin>
 800492a:	4603      	mov	r3, r0
 800492c:	2b01      	cmp	r3, #1
 800492e:	d115      	bne.n	800495c <menu+0x3398>
 8004930:	4ba7      	ldr	r3, [pc, #668]	; (8004bd0 <menu+0x360c>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f083 0301 	eor.w	r3, r3, #1
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <menu+0x3398>
			iotMode = iotMode + 1;
 800493e:	4ba5      	ldr	r3, [pc, #660]	; (8004bd4 <menu+0x3610>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4ba3      	ldr	r3, [pc, #652]	; (8004bd4 <menu+0x3610>)
 8004948:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800494a:	4ba2      	ldr	r3, [pc, #648]	; (8004bd4 <menu+0x3610>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d902      	bls.n	8004958 <menu+0x3394>
				iotMode = 0;
 8004952:	4ba0      	ldr	r3, [pc, #640]	; (8004bd4 <menu+0x3610>)
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004958:	f001 fba0 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800495c:	2104      	movs	r1, #4
 800495e:	489b      	ldr	r0, [pc, #620]	; (8004bcc <menu+0x3608>)
 8004960:	f005 f978 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004964:	4603      	mov	r3, r0
 8004966:	2b01      	cmp	r3, #1
 8004968:	d115      	bne.n	8004996 <menu+0x33d2>
 800496a:	4b99      	ldr	r3, [pc, #612]	; (8004bd0 <menu+0x360c>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f083 0301 	eor.w	r3, r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00e      	beq.n	8004996 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004978:	4b96      	ldr	r3, [pc, #600]	; (8004bd4 <menu+0x3610>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	3b01      	subs	r3, #1
 800497e:	b2da      	uxtb	r2, r3
 8004980:	4b94      	ldr	r3, [pc, #592]	; (8004bd4 <menu+0x3610>)
 8004982:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004984:	4b93      	ldr	r3, [pc, #588]	; (8004bd4 <menu+0x3610>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <menu+0x33ce>
		   		iotMode = 1;
 800498c:	4b91      	ldr	r3, [pc, #580]	; (8004bd4 <menu+0x3610>)
 800498e:	2201      	movs	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004992:	f001 fb83 	bl	800609c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004996:	2108      	movs	r1, #8
 8004998:	488c      	ldr	r0, [pc, #560]	; (8004bcc <menu+0x3608>)
 800499a:	f005 f95b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10e      	bne.n	80049c2 <menu+0x33fe>
 80049a4:	4b8a      	ldr	r3, [pc, #552]	; (8004bd0 <menu+0x360c>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f083 0301 	eor.w	r3, r3, #1
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <menu+0x33fe>
			eepromData[48] = iotMode;
 80049b2:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <menu+0x3610>)
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	4b88      	ldr	r3, [pc, #544]	; (8004bd8 <menu+0x3614>)
 80049b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80049bc:	4b87      	ldr	r3, [pc, #540]	; (8004bdc <menu+0x3618>)
 80049be:	2201      	movs	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80049c2:	4b87      	ldr	r3, [pc, #540]	; (8004be0 <menu+0x361c>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d138      	bne.n	8004a3c <menu+0x3478>
		calismaSayModu = 0;
 80049ca:	4b86      	ldr	r3, [pc, #536]	; (8004be4 <menu+0x3620>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80049d0:	4a85      	ldr	r2, [pc, #532]	; (8004be8 <menu+0x3624>)
 80049d2:	2101      	movs	r1, #1
 80049d4:	2001      	movs	r0, #1
 80049d6:	f7fb fe47 	bl	8000668 <lcd_print>

		lcd_print(2, 1, machineID);
 80049da:	4a84      	ldr	r2, [pc, #528]	; (8004bec <menu+0x3628>)
 80049dc:	2101      	movs	r1, #1
 80049de:	2002      	movs	r0, #2
 80049e0:	f7fb fe42 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "    ");
 80049e4:	4a82      	ldr	r2, [pc, #520]	; (8004bf0 <menu+0x362c>)
 80049e6:	210d      	movs	r1, #13
 80049e8:	2002      	movs	r0, #2
 80049ea:	f7fb fe3d 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049ee:	2102      	movs	r1, #2
 80049f0:	4876      	ldr	r0, [pc, #472]	; (8004bcc <menu+0x3608>)
 80049f2:	f005 f92f 	bl	8009c54 <HAL_GPIO_ReadPin>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d11f      	bne.n	8004a3c <menu+0x3478>
 80049fc:	2104      	movs	r1, #4
 80049fe:	4873      	ldr	r0, [pc, #460]	; (8004bcc <menu+0x3608>)
 8004a00:	f005 f928 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d118      	bne.n	8004a3c <menu+0x3478>
 8004a0a:	4b71      	ldr	r3, [pc, #452]	; (8004bd0 <menu+0x360c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	f083 0301 	eor.w	r3, r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d011      	beq.n	8004a3c <menu+0x3478>
			takeMachineID(0);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7fc f84f 	bl	8000abc <takeMachineID>

			HAL_Delay(50);
 8004a1e:	2032      	movs	r0, #50	; 0x32
 8004a20:	f004 fb48 	bl	80090b4 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004a24:	4a71      	ldr	r2, [pc, #452]	; (8004bec <menu+0x3628>)
 8004a26:	2101      	movs	r1, #1
 8004a28:	2002      	movs	r0, #2
 8004a2a:	f7fb fe1d 	bl	8000668 <lcd_print>
			lcd_print(2, 13, "    ");
 8004a2e:	4a70      	ldr	r2, [pc, #448]	; (8004bf0 <menu+0x362c>)
 8004a30:	210d      	movs	r1, #13
 8004a32:	2002      	movs	r0, #2
 8004a34:	f7fb fe18 	bl	8000668 <lcd_print>

			bekle();
 8004a38:	f001 fb30 	bl	800609c <bekle>
		}
	}

	if (menuSayac == 33) {
 8004a3c:	4b68      	ldr	r3, [pc, #416]	; (8004be0 <menu+0x361c>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b21      	cmp	r3, #33	; 0x21
 8004a42:	d153      	bne.n	8004aec <menu+0x3528>
		calismaSayModu = 0;
 8004a44:	4b67      	ldr	r3, [pc, #412]	; (8004be4 <menu+0x3620>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004a4a:	4a6a      	ldr	r2, [pc, #424]	; (8004bf4 <menu+0x3630>)
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f7fb fe0a 	bl	8000668 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004a54:	4868      	ldr	r0, [pc, #416]	; (8004bf8 <menu+0x3634>)
 8004a56:	f7fb fbe5 	bl	8000224 <strlen>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d811      	bhi.n	8004a84 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004a60:	4a65      	ldr	r2, [pc, #404]	; (8004bf8 <menu+0x3634>)
 8004a62:	2101      	movs	r1, #1
 8004a64:	2002      	movs	r0, #2
 8004a66:	f7fb fdff 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004a6a:	4863      	ldr	r0, [pc, #396]	; (8004bf8 <menu+0x3634>)
 8004a6c:	f7fb fbda 	bl	8000224 <strlen>
 8004a70:	4603      	mov	r3, r0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3301      	adds	r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	4a60      	ldr	r2, [pc, #384]	; (8004bfc <menu+0x3638>)
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	2002      	movs	r0, #2
 8004a7e:	f7fb fdf3 	bl	8000668 <lcd_print>
 8004a82:	e005      	b.n	8004a90 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004a84:	2300      	movs	r3, #0
 8004a86:	2202      	movs	r2, #2
 8004a88:	2101      	movs	r1, #1
 8004a8a:	485b      	ldr	r0, [pc, #364]	; (8004bf8 <menu+0x3634>)
 8004a8c:	f7fc fcf4 	bl	8001478 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a90:	2102      	movs	r1, #2
 8004a92:	484e      	ldr	r0, [pc, #312]	; (8004bcc <menu+0x3608>)
 8004a94:	f005 f8de 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d126      	bne.n	8004aec <menu+0x3528>
 8004a9e:	2104      	movs	r1, #4
 8004aa0:	484a      	ldr	r0, [pc, #296]	; (8004bcc <menu+0x3608>)
 8004aa2:	f005 f8d7 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d11f      	bne.n	8004aec <menu+0x3528>
 8004aac:	4b48      	ldr	r3, [pc, #288]	; (8004bd0 <menu+0x360c>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f083 0301 	eor.w	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d018      	beq.n	8004aec <menu+0x3528>
			takeWifiSSID(0);
 8004aba:	2000      	movs	r0, #0
 8004abc:	f7fc f954 	bl	8000d68 <takeWifiSSID>

			HAL_Delay(100);
 8004ac0:	2064      	movs	r0, #100	; 0x64
 8004ac2:	f004 faf7 	bl	80090b4 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004ac6:	4a4c      	ldr	r2, [pc, #304]	; (8004bf8 <menu+0x3634>)
 8004ac8:	2101      	movs	r1, #1
 8004aca:	2002      	movs	r0, #2
 8004acc:	f7fb fdcc 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004ad0:	4849      	ldr	r0, [pc, #292]	; (8004bf8 <menu+0x3634>)
 8004ad2:	f7fb fba7 	bl	8000224 <strlen>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	4a47      	ldr	r2, [pc, #284]	; (8004bfc <menu+0x3638>)
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	f7fb fdc0 	bl	8000668 <lcd_print>

			bekle();
 8004ae8:	f001 fad8 	bl	800609c <bekle>
		}
	}

	if (menuSayac == 34) {
 8004aec:	4b3c      	ldr	r3, [pc, #240]	; (8004be0 <menu+0x361c>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b22      	cmp	r3, #34	; 0x22
 8004af2:	d153      	bne.n	8004b9c <menu+0x35d8>
		calismaSayModu = 0;
 8004af4:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <menu+0x3620>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004afa:	4a41      	ldr	r2, [pc, #260]	; (8004c00 <menu+0x363c>)
 8004afc:	2101      	movs	r1, #1
 8004afe:	2001      	movs	r0, #1
 8004b00:	f7fb fdb2 	bl	8000668 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004b04:	483f      	ldr	r0, [pc, #252]	; (8004c04 <menu+0x3640>)
 8004b06:	f7fb fb8d 	bl	8000224 <strlen>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d811      	bhi.n	8004b34 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004b10:	4a3c      	ldr	r2, [pc, #240]	; (8004c04 <menu+0x3640>)
 8004b12:	2101      	movs	r1, #1
 8004b14:	2002      	movs	r0, #2
 8004b16:	f7fb fda7 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004b1a:	483a      	ldr	r0, [pc, #232]	; (8004c04 <menu+0x3640>)
 8004b1c:	f7fb fb82 	bl	8000224 <strlen>
 8004b20:	4603      	mov	r3, r0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	4a34      	ldr	r2, [pc, #208]	; (8004bfc <menu+0x3638>)
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	2002      	movs	r0, #2
 8004b2e:	f7fb fd9b 	bl	8000668 <lcd_print>
 8004b32:	e005      	b.n	8004b40 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004b34:	2301      	movs	r3, #1
 8004b36:	2202      	movs	r2, #2
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4832      	ldr	r0, [pc, #200]	; (8004c04 <menu+0x3640>)
 8004b3c:	f7fc fc9c 	bl	8001478 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b40:	2102      	movs	r1, #2
 8004b42:	4822      	ldr	r0, [pc, #136]	; (8004bcc <menu+0x3608>)
 8004b44:	f005 f886 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d126      	bne.n	8004b9c <menu+0x35d8>
 8004b4e:	2104      	movs	r1, #4
 8004b50:	481e      	ldr	r0, [pc, #120]	; (8004bcc <menu+0x3608>)
 8004b52:	f005 f87f 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d11f      	bne.n	8004b9c <menu+0x35d8>
 8004b5c:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <menu+0x360c>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f083 0301 	eor.w	r3, r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d018      	beq.n	8004b9c <menu+0x35d8>
			takeWifiPass(0);
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f7fc faa4 	bl	80010b8 <takeWifiPass>

			HAL_Delay(50);
 8004b70:	2032      	movs	r0, #50	; 0x32
 8004b72:	f004 fa9f 	bl	80090b4 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004b76:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <menu+0x3640>)
 8004b78:	2101      	movs	r1, #1
 8004b7a:	2002      	movs	r0, #2
 8004b7c:	f7fb fd74 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004b80:	4820      	ldr	r0, [pc, #128]	; (8004c04 <menu+0x3640>)
 8004b82:	f7fb fb4f 	bl	8000224 <strlen>
 8004b86:	4603      	mov	r3, r0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <menu+0x3638>)
 8004b90:	4619      	mov	r1, r3
 8004b92:	2002      	movs	r0, #2
 8004b94:	f7fb fd68 	bl	8000668 <lcd_print>

			bekle();
 8004b98:	f001 fa80 	bl	800609c <bekle>
		}
	}

	if (menuSayac == 35) {
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <menu+0x361c>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b23      	cmp	r3, #35	; 0x23
 8004ba2:	d155      	bne.n	8004c50 <menu+0x368c>
		if(dilSecim == 0) {
 8004ba4:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <menu+0x3600>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d131      	bne.n	8004c10 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <menu+0x3644>)
 8004bae:	2101      	movs	r1, #1
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f7fb fd59 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004bb6:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <menu+0x3648>)
 8004bb8:	2101      	movs	r1, #1
 8004bba:	2002      	movs	r0, #2
 8004bbc:	f7fb fd54 	bl	8000668 <lcd_print>
 8004bc0:	e034      	b.n	8004c2c <menu+0x3668>
 8004bc2:	bf00      	nop
 8004bc4:	20000d2d 	.word	0x20000d2d
 8004bc8:	0800dc88 	.word	0x0800dc88
 8004bcc:	40010800 	.word	0x40010800
 8004bd0:	20000d3b 	.word	0x20000d3b
 8004bd4:	20000d2b 	.word	0x20000d2b
 8004bd8:	20000c38 	.word	0x20000c38
 8004bdc:	20000d38 	.word	0x20000d38
 8004be0:	20000d0c 	.word	0x20000d0c
 8004be4:	20000d2c 	.word	0x20000d2c
 8004be8:	0800e3d0 	.word	0x0800e3d0
 8004bec:	20000cd4 	.word	0x20000cd4
 8004bf0:	0800e3e4 	.word	0x0800e3e4
 8004bf4:	0800e3ec 	.word	0x0800e3ec
 8004bf8:	20000ce0 	.word	0x20000ce0
 8004bfc:	2000094c 	.word	0x2000094c
 8004c00:	0800e400 	.word	0x0800e400
 8004c04:	20000cf4 	.word	0x20000cf4
 8004c08:	0800e414 	.word	0x0800e414
 8004c0c:	0800e428 	.word	0x0800e428
		} else if(dilSecim == 1) {
 8004c10:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <menu+0x3690>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d109      	bne.n	8004c2c <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004c18:	4a0f      	ldr	r2, [pc, #60]	; (8004c58 <menu+0x3694>)
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f7fb fd23 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004c22:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <menu+0x3698>)
 8004c24:	2101      	movs	r1, #1
 8004c26:	2002      	movs	r0, #2
 8004c28:	f7fb fd1e 	bl	8000668 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004c2c:	2108      	movs	r1, #8
 8004c2e:	480c      	ldr	r0, [pc, #48]	; (8004c60 <menu+0x369c>)
 8004c30:	f005 f810 	bl	8009c54 <HAL_GPIO_ReadPin>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d10a      	bne.n	8004c50 <menu+0x368c>
			menuGiris = 0;
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <menu+0x36a0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004c40:	f7fb fd3e 	bl	80006c0 <lcd_clear>
			HAL_Delay(500);
 8004c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c48:	f004 fa34 	bl	80090b4 <HAL_Delay>
			NVIC_SystemReset();
 8004c4c:	f7fb fd80 	bl	8000750 <__NVIC_SystemReset>
		}
	}
}
 8004c50:	bf00      	nop
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000d2d 	.word	0x20000d2d
 8004c58:	0800e43c 	.word	0x0800e43c
 8004c5c:	0800e450 	.word	0x0800e450
 8004c60:	40010800 	.word	0x40010800
 8004c64:	20000d29 	.word	0x20000d29

08004c68 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004c72:	48a9      	ldr	r0, [pc, #676]	; (8004f18 <loadMenuTexts+0x2b0>)
 8004c74:	f7fb fd82 	bl	800077c <copyText>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4aa8      	ldr	r2, [pc, #672]	; (8004f1c <loadMenuTexts+0x2b4>)
 8004c7c:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004c7e:	48a8      	ldr	r0, [pc, #672]	; (8004f20 <loadMenuTexts+0x2b8>)
 8004c80:	f7fb fd7c 	bl	800077c <copyText>
 8004c84:	4603      	mov	r3, r0
 8004c86:	4aa7      	ldr	r2, [pc, #668]	; (8004f24 <loadMenuTexts+0x2bc>)
 8004c88:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004c8a:	48a7      	ldr	r0, [pc, #668]	; (8004f28 <loadMenuTexts+0x2c0>)
 8004c8c:	f7fb fd76 	bl	800077c <copyText>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4aa6      	ldr	r2, [pc, #664]	; (8004f2c <loadMenuTexts+0x2c4>)
 8004c94:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004c96:	48a6      	ldr	r0, [pc, #664]	; (8004f30 <loadMenuTexts+0x2c8>)
 8004c98:	f7fb fd70 	bl	800077c <copyText>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4aa5      	ldr	r2, [pc, #660]	; (8004f34 <loadMenuTexts+0x2cc>)
 8004ca0:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004ca2:	48a5      	ldr	r0, [pc, #660]	; (8004f38 <loadMenuTexts+0x2d0>)
 8004ca4:	f7fb fd6a 	bl	800077c <copyText>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4aa4      	ldr	r2, [pc, #656]	; (8004f3c <loadMenuTexts+0x2d4>)
 8004cac:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004cae:	48a4      	ldr	r0, [pc, #656]	; (8004f40 <loadMenuTexts+0x2d8>)
 8004cb0:	f7fb fd64 	bl	800077c <copyText>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4aa3      	ldr	r2, [pc, #652]	; (8004f44 <loadMenuTexts+0x2dc>)
 8004cb8:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004cba:	48a3      	ldr	r0, [pc, #652]	; (8004f48 <loadMenuTexts+0x2e0>)
 8004cbc:	f7fb fd5e 	bl	800077c <copyText>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4aa2      	ldr	r2, [pc, #648]	; (8004f4c <loadMenuTexts+0x2e4>)
 8004cc4:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f040 82d1 	bne.w	8005270 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004cce:	48a0      	ldr	r0, [pc, #640]	; (8004f50 <loadMenuTexts+0x2e8>)
 8004cd0:	f7fb fd54 	bl	800077c <copyText>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4a9f      	ldr	r2, [pc, #636]	; (8004f54 <loadMenuTexts+0x2ec>)
 8004cd8:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004cda:	489f      	ldr	r0, [pc, #636]	; (8004f58 <loadMenuTexts+0x2f0>)
 8004cdc:	f7fb fd4e 	bl	800077c <copyText>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a9e      	ldr	r2, [pc, #632]	; (8004f5c <loadMenuTexts+0x2f4>)
 8004ce4:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004ce6:	489e      	ldr	r0, [pc, #632]	; (8004f60 <loadMenuTexts+0x2f8>)
 8004ce8:	f7fb fd48 	bl	800077c <copyText>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4a9d      	ldr	r2, [pc, #628]	; (8004f64 <loadMenuTexts+0x2fc>)
 8004cf0:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004cf2:	489d      	ldr	r0, [pc, #628]	; (8004f68 <loadMenuTexts+0x300>)
 8004cf4:	f7fb fd42 	bl	800077c <copyText>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a9c      	ldr	r2, [pc, #624]	; (8004f6c <loadMenuTexts+0x304>)
 8004cfc:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004cfe:	489c      	ldr	r0, [pc, #624]	; (8004f70 <loadMenuTexts+0x308>)
 8004d00:	f7fb fd3c 	bl	800077c <copyText>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4a9b      	ldr	r2, [pc, #620]	; (8004f74 <loadMenuTexts+0x30c>)
 8004d08:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004d0a:	489b      	ldr	r0, [pc, #620]	; (8004f78 <loadMenuTexts+0x310>)
 8004d0c:	f7fb fd36 	bl	800077c <copyText>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4a9a      	ldr	r2, [pc, #616]	; (8004f7c <loadMenuTexts+0x314>)
 8004d14:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004d16:	489a      	ldr	r0, [pc, #616]	; (8004f80 <loadMenuTexts+0x318>)
 8004d18:	f7fb fd30 	bl	800077c <copyText>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4a99      	ldr	r2, [pc, #612]	; (8004f84 <loadMenuTexts+0x31c>)
 8004d20:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004d22:	4899      	ldr	r0, [pc, #612]	; (8004f88 <loadMenuTexts+0x320>)
 8004d24:	f7fb fd2a 	bl	800077c <copyText>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4a98      	ldr	r2, [pc, #608]	; (8004f8c <loadMenuTexts+0x324>)
 8004d2c:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004d2e:	4898      	ldr	r0, [pc, #608]	; (8004f90 <loadMenuTexts+0x328>)
 8004d30:	f7fb fd24 	bl	800077c <copyText>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4a97      	ldr	r2, [pc, #604]	; (8004f94 <loadMenuTexts+0x32c>)
 8004d38:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004d3a:	4897      	ldr	r0, [pc, #604]	; (8004f98 <loadMenuTexts+0x330>)
 8004d3c:	f7fb fd1e 	bl	800077c <copyText>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4a96      	ldr	r2, [pc, #600]	; (8004f9c <loadMenuTexts+0x334>)
 8004d44:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004d46:	4896      	ldr	r0, [pc, #600]	; (8004fa0 <loadMenuTexts+0x338>)
 8004d48:	f7fb fd18 	bl	800077c <copyText>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a95      	ldr	r2, [pc, #596]	; (8004fa4 <loadMenuTexts+0x33c>)
 8004d50:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004d52:	4895      	ldr	r0, [pc, #596]	; (8004fa8 <loadMenuTexts+0x340>)
 8004d54:	f7fb fd12 	bl	800077c <copyText>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4a94      	ldr	r2, [pc, #592]	; (8004fac <loadMenuTexts+0x344>)
 8004d5c:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004d5e:	4894      	ldr	r0, [pc, #592]	; (8004fb0 <loadMenuTexts+0x348>)
 8004d60:	f7fb fd0c 	bl	800077c <copyText>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4a93      	ldr	r2, [pc, #588]	; (8004fb4 <loadMenuTexts+0x34c>)
 8004d68:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004d6a:	4893      	ldr	r0, [pc, #588]	; (8004fb8 <loadMenuTexts+0x350>)
 8004d6c:	f7fb fd06 	bl	800077c <copyText>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a92      	ldr	r2, [pc, #584]	; (8004fbc <loadMenuTexts+0x354>)
 8004d74:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004d76:	4892      	ldr	r0, [pc, #584]	; (8004fc0 <loadMenuTexts+0x358>)
 8004d78:	f7fb fd00 	bl	800077c <copyText>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4a91      	ldr	r2, [pc, #580]	; (8004fc4 <loadMenuTexts+0x35c>)
 8004d80:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004d82:	4891      	ldr	r0, [pc, #580]	; (8004fc8 <loadMenuTexts+0x360>)
 8004d84:	f7fb fcfa 	bl	800077c <copyText>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4a90      	ldr	r2, [pc, #576]	; (8004fcc <loadMenuTexts+0x364>)
 8004d8c:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004d8e:	4890      	ldr	r0, [pc, #576]	; (8004fd0 <loadMenuTexts+0x368>)
 8004d90:	f7fb fcf4 	bl	800077c <copyText>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4a8f      	ldr	r2, [pc, #572]	; (8004fd4 <loadMenuTexts+0x36c>)
 8004d98:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004d9a:	488f      	ldr	r0, [pc, #572]	; (8004fd8 <loadMenuTexts+0x370>)
 8004d9c:	f7fb fcee 	bl	800077c <copyText>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4a8e      	ldr	r2, [pc, #568]	; (8004fdc <loadMenuTexts+0x374>)
 8004da4:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004da6:	488e      	ldr	r0, [pc, #568]	; (8004fe0 <loadMenuTexts+0x378>)
 8004da8:	f7fb fce8 	bl	800077c <copyText>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4a8d      	ldr	r2, [pc, #564]	; (8004fe4 <loadMenuTexts+0x37c>)
 8004db0:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004db2:	488d      	ldr	r0, [pc, #564]	; (8004fe8 <loadMenuTexts+0x380>)
 8004db4:	f7fb fce2 	bl	800077c <copyText>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a8c      	ldr	r2, [pc, #560]	; (8004fec <loadMenuTexts+0x384>)
 8004dbc:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004dbe:	488c      	ldr	r0, [pc, #560]	; (8004ff0 <loadMenuTexts+0x388>)
 8004dc0:	f7fb fcdc 	bl	800077c <copyText>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4a8b      	ldr	r2, [pc, #556]	; (8004ff4 <loadMenuTexts+0x38c>)
 8004dc8:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004dca:	488b      	ldr	r0, [pc, #556]	; (8004ff8 <loadMenuTexts+0x390>)
 8004dcc:	f7fb fcd6 	bl	800077c <copyText>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4a8a      	ldr	r2, [pc, #552]	; (8004ffc <loadMenuTexts+0x394>)
 8004dd4:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004dd6:	488a      	ldr	r0, [pc, #552]	; (8005000 <loadMenuTexts+0x398>)
 8004dd8:	f7fb fcd0 	bl	800077c <copyText>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a89      	ldr	r2, [pc, #548]	; (8005004 <loadMenuTexts+0x39c>)
 8004de0:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004de2:	4889      	ldr	r0, [pc, #548]	; (8005008 <loadMenuTexts+0x3a0>)
 8004de4:	f7fb fcca 	bl	800077c <copyText>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4a88      	ldr	r2, [pc, #544]	; (800500c <loadMenuTexts+0x3a4>)
 8004dec:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004dee:	4888      	ldr	r0, [pc, #544]	; (8005010 <loadMenuTexts+0x3a8>)
 8004df0:	f7fb fcc4 	bl	800077c <copyText>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a87      	ldr	r2, [pc, #540]	; (8005014 <loadMenuTexts+0x3ac>)
 8004df8:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004dfa:	4887      	ldr	r0, [pc, #540]	; (8005018 <loadMenuTexts+0x3b0>)
 8004dfc:	f7fb fcbe 	bl	800077c <copyText>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4a86      	ldr	r2, [pc, #536]	; (800501c <loadMenuTexts+0x3b4>)
 8004e04:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004e06:	4886      	ldr	r0, [pc, #536]	; (8005020 <loadMenuTexts+0x3b8>)
 8004e08:	f7fb fcb8 	bl	800077c <copyText>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a85      	ldr	r2, [pc, #532]	; (8005024 <loadMenuTexts+0x3bc>)
 8004e10:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004e12:	4885      	ldr	r0, [pc, #532]	; (8005028 <loadMenuTexts+0x3c0>)
 8004e14:	f7fb fcb2 	bl	800077c <copyText>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a84      	ldr	r2, [pc, #528]	; (800502c <loadMenuTexts+0x3c4>)
 8004e1c:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004e1e:	4884      	ldr	r0, [pc, #528]	; (8005030 <loadMenuTexts+0x3c8>)
 8004e20:	f7fb fcac 	bl	800077c <copyText>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4a83      	ldr	r2, [pc, #524]	; (8005034 <loadMenuTexts+0x3cc>)
 8004e28:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004e2a:	4883      	ldr	r0, [pc, #524]	; (8005038 <loadMenuTexts+0x3d0>)
 8004e2c:	f7fb fca6 	bl	800077c <copyText>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4a82      	ldr	r2, [pc, #520]	; (800503c <loadMenuTexts+0x3d4>)
 8004e34:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004e36:	4882      	ldr	r0, [pc, #520]	; (8005040 <loadMenuTexts+0x3d8>)
 8004e38:	f7fb fca0 	bl	800077c <copyText>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4a81      	ldr	r2, [pc, #516]	; (8005044 <loadMenuTexts+0x3dc>)
 8004e40:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004e42:	4881      	ldr	r0, [pc, #516]	; (8005048 <loadMenuTexts+0x3e0>)
 8004e44:	f7fb fc9a 	bl	800077c <copyText>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4a80      	ldr	r2, [pc, #512]	; (800504c <loadMenuTexts+0x3e4>)
 8004e4c:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004e4e:	4880      	ldr	r0, [pc, #512]	; (8005050 <loadMenuTexts+0x3e8>)
 8004e50:	f7fb fc94 	bl	800077c <copyText>
 8004e54:	4603      	mov	r3, r0
 8004e56:	4a7f      	ldr	r2, [pc, #508]	; (8005054 <loadMenuTexts+0x3ec>)
 8004e58:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004e5a:	487f      	ldr	r0, [pc, #508]	; (8005058 <loadMenuTexts+0x3f0>)
 8004e5c:	f7fb fc8e 	bl	800077c <copyText>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4a7e      	ldr	r2, [pc, #504]	; (800505c <loadMenuTexts+0x3f4>)
 8004e64:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004e66:	487e      	ldr	r0, [pc, #504]	; (8005060 <loadMenuTexts+0x3f8>)
 8004e68:	f7fb fc88 	bl	800077c <copyText>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4a7d      	ldr	r2, [pc, #500]	; (8005064 <loadMenuTexts+0x3fc>)
 8004e70:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004e72:	487d      	ldr	r0, [pc, #500]	; (8005068 <loadMenuTexts+0x400>)
 8004e74:	f7fb fc82 	bl	800077c <copyText>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4a7c      	ldr	r2, [pc, #496]	; (800506c <loadMenuTexts+0x404>)
 8004e7c:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004e7e:	487c      	ldr	r0, [pc, #496]	; (8005070 <loadMenuTexts+0x408>)
 8004e80:	f7fb fc7c 	bl	800077c <copyText>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4a7b      	ldr	r2, [pc, #492]	; (8005074 <loadMenuTexts+0x40c>)
 8004e88:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004e8a:	487b      	ldr	r0, [pc, #492]	; (8005078 <loadMenuTexts+0x410>)
 8004e8c:	f7fb fc76 	bl	800077c <copyText>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4a7a      	ldr	r2, [pc, #488]	; (800507c <loadMenuTexts+0x414>)
 8004e94:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004e96:	487a      	ldr	r0, [pc, #488]	; (8005080 <loadMenuTexts+0x418>)
 8004e98:	f7fb fc70 	bl	800077c <copyText>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4a79      	ldr	r2, [pc, #484]	; (8005084 <loadMenuTexts+0x41c>)
 8004ea0:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004ea2:	4879      	ldr	r0, [pc, #484]	; (8005088 <loadMenuTexts+0x420>)
 8004ea4:	f7fb fc6a 	bl	800077c <copyText>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4a78      	ldr	r2, [pc, #480]	; (800508c <loadMenuTexts+0x424>)
 8004eac:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004eae:	4878      	ldr	r0, [pc, #480]	; (8005090 <loadMenuTexts+0x428>)
 8004eb0:	f7fb fc64 	bl	800077c <copyText>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4a77      	ldr	r2, [pc, #476]	; (8005094 <loadMenuTexts+0x42c>)
 8004eb8:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004eba:	4877      	ldr	r0, [pc, #476]	; (8005098 <loadMenuTexts+0x430>)
 8004ebc:	f7fb fc5e 	bl	800077c <copyText>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4a76      	ldr	r2, [pc, #472]	; (800509c <loadMenuTexts+0x434>)
 8004ec4:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004ec6:	4876      	ldr	r0, [pc, #472]	; (80050a0 <loadMenuTexts+0x438>)
 8004ec8:	f7fb fc58 	bl	800077c <copyText>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4a75      	ldr	r2, [pc, #468]	; (80050a4 <loadMenuTexts+0x43c>)
 8004ed0:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004ed2:	4875      	ldr	r0, [pc, #468]	; (80050a8 <loadMenuTexts+0x440>)
 8004ed4:	f7fb fc52 	bl	800077c <copyText>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4a74      	ldr	r2, [pc, #464]	; (80050ac <loadMenuTexts+0x444>)
 8004edc:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004ede:	4874      	ldr	r0, [pc, #464]	; (80050b0 <loadMenuTexts+0x448>)
 8004ee0:	f7fb fc4c 	bl	800077c <copyText>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4a73      	ldr	r2, [pc, #460]	; (80050b4 <loadMenuTexts+0x44c>)
 8004ee8:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004eea:	4873      	ldr	r0, [pc, #460]	; (80050b8 <loadMenuTexts+0x450>)
 8004eec:	f7fb fc46 	bl	800077c <copyText>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4a72      	ldr	r2, [pc, #456]	; (80050bc <loadMenuTexts+0x454>)
 8004ef4:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004ef6:	4872      	ldr	r0, [pc, #456]	; (80050c0 <loadMenuTexts+0x458>)
 8004ef8:	f7fb fc40 	bl	800077c <copyText>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4a71      	ldr	r2, [pc, #452]	; (80050c4 <loadMenuTexts+0x45c>)
 8004f00:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004f02:	4871      	ldr	r0, [pc, #452]	; (80050c8 <loadMenuTexts+0x460>)
 8004f04:	f7fb fc3a 	bl	800077c <copyText>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4a70      	ldr	r2, [pc, #448]	; (80050cc <loadMenuTexts+0x464>)
 8004f0c:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004f0e:	4870      	ldr	r0, [pc, #448]	; (80050d0 <loadMenuTexts+0x468>)
 8004f10:	f7fb fc34 	bl	800077c <copyText>
 8004f14:	4603      	mov	r3, r0
 8004f16:	e0dd      	b.n	80050d4 <loadMenuTexts+0x46c>
 8004f18:	20000000 	.word	0x20000000
 8004f1c:	20000d70 	.word	0x20000d70
 8004f20:	20000010 	.word	0x20000010
 8004f24:	20000d74 	.word	0x20000d74
 8004f28:	20000020 	.word	0x20000020
 8004f2c:	20000dcc 	.word	0x20000dcc
 8004f30:	20000030 	.word	0x20000030
 8004f34:	20000dfc 	.word	0x20000dfc
 8004f38:	20000040 	.word	0x20000040
 8004f3c:	20000e04 	.word	0x20000e04
 8004f40:	20000050 	.word	0x20000050
 8004f44:	20000e7c 	.word	0x20000e7c
 8004f48:	20000060 	.word	0x20000060
 8004f4c:	20000e80 	.word	0x20000e80
 8004f50:	20000070 	.word	0x20000070
 8004f54:	20000d78 	.word	0x20000d78
 8004f58:	20000080 	.word	0x20000080
 8004f5c:	20000d7c 	.word	0x20000d7c
 8004f60:	20000090 	.word	0x20000090
 8004f64:	20000d80 	.word	0x20000d80
 8004f68:	200000a0 	.word	0x200000a0
 8004f6c:	20000d84 	.word	0x20000d84
 8004f70:	200000b0 	.word	0x200000b0
 8004f74:	20000d88 	.word	0x20000d88
 8004f78:	200000c0 	.word	0x200000c0
 8004f7c:	20000d8c 	.word	0x20000d8c
 8004f80:	200000d0 	.word	0x200000d0
 8004f84:	20000d90 	.word	0x20000d90
 8004f88:	200000e0 	.word	0x200000e0
 8004f8c:	20000d94 	.word	0x20000d94
 8004f90:	200000f0 	.word	0x200000f0
 8004f94:	20000d98 	.word	0x20000d98
 8004f98:	20000100 	.word	0x20000100
 8004f9c:	20000d9c 	.word	0x20000d9c
 8004fa0:	20000110 	.word	0x20000110
 8004fa4:	20000da0 	.word	0x20000da0
 8004fa8:	20000120 	.word	0x20000120
 8004fac:	20000da4 	.word	0x20000da4
 8004fb0:	20000130 	.word	0x20000130
 8004fb4:	20000da8 	.word	0x20000da8
 8004fb8:	20000140 	.word	0x20000140
 8004fbc:	20000dac 	.word	0x20000dac
 8004fc0:	20000150 	.word	0x20000150
 8004fc4:	20000db0 	.word	0x20000db0
 8004fc8:	20000160 	.word	0x20000160
 8004fcc:	20000db4 	.word	0x20000db4
 8004fd0:	20000170 	.word	0x20000170
 8004fd4:	20000db8 	.word	0x20000db8
 8004fd8:	20000180 	.word	0x20000180
 8004fdc:	20000dbc 	.word	0x20000dbc
 8004fe0:	20000190 	.word	0x20000190
 8004fe4:	20000dc0 	.word	0x20000dc0
 8004fe8:	200001a0 	.word	0x200001a0
 8004fec:	20000dc4 	.word	0x20000dc4
 8004ff0:	200001b0 	.word	0x200001b0
 8004ff4:	20000dc8 	.word	0x20000dc8
 8004ff8:	200001c0 	.word	0x200001c0
 8004ffc:	20000dd0 	.word	0x20000dd0
 8005000:	200001d0 	.word	0x200001d0
 8005004:	20000dd4 	.word	0x20000dd4
 8005008:	200001e0 	.word	0x200001e0
 800500c:	20000dd8 	.word	0x20000dd8
 8005010:	200001f0 	.word	0x200001f0
 8005014:	20000ddc 	.word	0x20000ddc
 8005018:	20000200 	.word	0x20000200
 800501c:	20000de0 	.word	0x20000de0
 8005020:	20000210 	.word	0x20000210
 8005024:	20000de4 	.word	0x20000de4
 8005028:	20000220 	.word	0x20000220
 800502c:	20000de8 	.word	0x20000de8
 8005030:	20000230 	.word	0x20000230
 8005034:	20000dec 	.word	0x20000dec
 8005038:	20000240 	.word	0x20000240
 800503c:	20000df0 	.word	0x20000df0
 8005040:	20000250 	.word	0x20000250
 8005044:	20000df4 	.word	0x20000df4
 8005048:	20000260 	.word	0x20000260
 800504c:	20000df8 	.word	0x20000df8
 8005050:	20000270 	.word	0x20000270
 8005054:	20000e00 	.word	0x20000e00
 8005058:	20000280 	.word	0x20000280
 800505c:	20000e08 	.word	0x20000e08
 8005060:	20000290 	.word	0x20000290
 8005064:	20000e0c 	.word	0x20000e0c
 8005068:	200002a0 	.word	0x200002a0
 800506c:	20000e10 	.word	0x20000e10
 8005070:	200002b0 	.word	0x200002b0
 8005074:	20000e14 	.word	0x20000e14
 8005078:	200002c0 	.word	0x200002c0
 800507c:	20000e18 	.word	0x20000e18
 8005080:	200002d0 	.word	0x200002d0
 8005084:	20000e1c 	.word	0x20000e1c
 8005088:	200002e0 	.word	0x200002e0
 800508c:	20000e20 	.word	0x20000e20
 8005090:	200002f0 	.word	0x200002f0
 8005094:	20000e24 	.word	0x20000e24
 8005098:	20000300 	.word	0x20000300
 800509c:	20000e28 	.word	0x20000e28
 80050a0:	20000310 	.word	0x20000310
 80050a4:	20000e2c 	.word	0x20000e2c
 80050a8:	20000320 	.word	0x20000320
 80050ac:	20000e30 	.word	0x20000e30
 80050b0:	20000330 	.word	0x20000330
 80050b4:	20000e34 	.word	0x20000e34
 80050b8:	20000340 	.word	0x20000340
 80050bc:	20000e38 	.word	0x20000e38
 80050c0:	20000350 	.word	0x20000350
 80050c4:	20000e3c 	.word	0x20000e3c
 80050c8:	20000360 	.word	0x20000360
 80050cc:	20000e40 	.word	0x20000e40
 80050d0:	20000370 	.word	0x20000370
 80050d4:	4a3d      	ldr	r2, [pc, #244]	; (80051cc <loadMenuTexts+0x564>)
 80050d6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 80050d8:	483d      	ldr	r0, [pc, #244]	; (80051d0 <loadMenuTexts+0x568>)
 80050da:	f7fb fb4f 	bl	800077c <copyText>
 80050de:	4603      	mov	r3, r0
 80050e0:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <loadMenuTexts+0x56c>)
 80050e2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 80050e4:	483c      	ldr	r0, [pc, #240]	; (80051d8 <loadMenuTexts+0x570>)
 80050e6:	f7fb fb49 	bl	800077c <copyText>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <loadMenuTexts+0x574>)
 80050ee:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 80050f0:	483b      	ldr	r0, [pc, #236]	; (80051e0 <loadMenuTexts+0x578>)
 80050f2:	f7fb fb43 	bl	800077c <copyText>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a3a      	ldr	r2, [pc, #232]	; (80051e4 <loadMenuTexts+0x57c>)
 80050fa:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 80050fc:	483a      	ldr	r0, [pc, #232]	; (80051e8 <loadMenuTexts+0x580>)
 80050fe:	f7fb fb3d 	bl	800077c <copyText>
 8005102:	4603      	mov	r3, r0
 8005104:	4a39      	ldr	r2, [pc, #228]	; (80051ec <loadMenuTexts+0x584>)
 8005106:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005108:	4839      	ldr	r0, [pc, #228]	; (80051f0 <loadMenuTexts+0x588>)
 800510a:	f7fb fb37 	bl	800077c <copyText>
 800510e:	4603      	mov	r3, r0
 8005110:	4a38      	ldr	r2, [pc, #224]	; (80051f4 <loadMenuTexts+0x58c>)
 8005112:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005114:	4838      	ldr	r0, [pc, #224]	; (80051f8 <loadMenuTexts+0x590>)
 8005116:	f7fb fb31 	bl	800077c <copyText>
 800511a:	4603      	mov	r3, r0
 800511c:	4a37      	ldr	r2, [pc, #220]	; (80051fc <loadMenuTexts+0x594>)
 800511e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005120:	4837      	ldr	r0, [pc, #220]	; (8005200 <loadMenuTexts+0x598>)
 8005122:	f7fb fb2b 	bl	800077c <copyText>
 8005126:	4603      	mov	r3, r0
 8005128:	4a36      	ldr	r2, [pc, #216]	; (8005204 <loadMenuTexts+0x59c>)
 800512a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 800512c:	4836      	ldr	r0, [pc, #216]	; (8005208 <loadMenuTexts+0x5a0>)
 800512e:	f7fb fb25 	bl	800077c <copyText>
 8005132:	4603      	mov	r3, r0
 8005134:	4a35      	ldr	r2, [pc, #212]	; (800520c <loadMenuTexts+0x5a4>)
 8005136:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005138:	4835      	ldr	r0, [pc, #212]	; (8005210 <loadMenuTexts+0x5a8>)
 800513a:	f7fb fb1f 	bl	800077c <copyText>
 800513e:	4603      	mov	r3, r0
 8005140:	4a34      	ldr	r2, [pc, #208]	; (8005214 <loadMenuTexts+0x5ac>)
 8005142:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005144:	4834      	ldr	r0, [pc, #208]	; (8005218 <loadMenuTexts+0x5b0>)
 8005146:	f7fb fb19 	bl	800077c <copyText>
 800514a:	4603      	mov	r3, r0
 800514c:	4a33      	ldr	r2, [pc, #204]	; (800521c <loadMenuTexts+0x5b4>)
 800514e:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005150:	4833      	ldr	r0, [pc, #204]	; (8005220 <loadMenuTexts+0x5b8>)
 8005152:	f7fb fb13 	bl	800077c <copyText>
 8005156:	4603      	mov	r3, r0
 8005158:	4a32      	ldr	r2, [pc, #200]	; (8005224 <loadMenuTexts+0x5bc>)
 800515a:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 800515c:	4832      	ldr	r0, [pc, #200]	; (8005228 <loadMenuTexts+0x5c0>)
 800515e:	f7fb fb0d 	bl	800077c <copyText>
 8005162:	4603      	mov	r3, r0
 8005164:	4a31      	ldr	r2, [pc, #196]	; (800522c <loadMenuTexts+0x5c4>)
 8005166:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005168:	4831      	ldr	r0, [pc, #196]	; (8005230 <loadMenuTexts+0x5c8>)
 800516a:	f7fb fb07 	bl	800077c <copyText>
 800516e:	4603      	mov	r3, r0
 8005170:	4a30      	ldr	r2, [pc, #192]	; (8005234 <loadMenuTexts+0x5cc>)
 8005172:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005174:	4830      	ldr	r0, [pc, #192]	; (8005238 <loadMenuTexts+0x5d0>)
 8005176:	f7fb fb01 	bl	800077c <copyText>
 800517a:	4603      	mov	r3, r0
 800517c:	4a2f      	ldr	r2, [pc, #188]	; (800523c <loadMenuTexts+0x5d4>)
 800517e:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8005180:	482f      	ldr	r0, [pc, #188]	; (8005240 <loadMenuTexts+0x5d8>)
 8005182:	f7fb fafb 	bl	800077c <copyText>
 8005186:	4603      	mov	r3, r0
 8005188:	4a2e      	ldr	r2, [pc, #184]	; (8005244 <loadMenuTexts+0x5dc>)
 800518a:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 800518c:	482e      	ldr	r0, [pc, #184]	; (8005248 <loadMenuTexts+0x5e0>)
 800518e:	f7fb faf5 	bl	800077c <copyText>
 8005192:	4603      	mov	r3, r0
 8005194:	4a2d      	ldr	r2, [pc, #180]	; (800524c <loadMenuTexts+0x5e4>)
 8005196:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005198:	482d      	ldr	r0, [pc, #180]	; (8005250 <loadMenuTexts+0x5e8>)
 800519a:	f7fb faef 	bl	800077c <copyText>
 800519e:	4603      	mov	r3, r0
 80051a0:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <loadMenuTexts+0x5ec>)
 80051a2:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80051a4:	482c      	ldr	r0, [pc, #176]	; (8005258 <loadMenuTexts+0x5f0>)
 80051a6:	f7fb fae9 	bl	800077c <copyText>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4a2b      	ldr	r2, [pc, #172]	; (800525c <loadMenuTexts+0x5f4>)
 80051ae:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80051b0:	482b      	ldr	r0, [pc, #172]	; (8005260 <loadMenuTexts+0x5f8>)
 80051b2:	f7fb fae3 	bl	800077c <copyText>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <loadMenuTexts+0x5fc>)
 80051ba:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80051bc:	482a      	ldr	r0, [pc, #168]	; (8005268 <loadMenuTexts+0x600>)
 80051be:	f7fb fadd 	bl	800077c <copyText>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4a29      	ldr	r2, [pc, #164]	; (800526c <loadMenuTexts+0x604>)
 80051c6:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80051c8:	e2d3      	b.n	8005772 <loadMenuTexts+0xb0a>
 80051ca:	bf00      	nop
 80051cc:	20000e44 	.word	0x20000e44
 80051d0:	20000380 	.word	0x20000380
 80051d4:	20000e48 	.word	0x20000e48
 80051d8:	20000390 	.word	0x20000390
 80051dc:	20000e4c 	.word	0x20000e4c
 80051e0:	200003a0 	.word	0x200003a0
 80051e4:	20000e50 	.word	0x20000e50
 80051e8:	200003b0 	.word	0x200003b0
 80051ec:	20000e54 	.word	0x20000e54
 80051f0:	200003c0 	.word	0x200003c0
 80051f4:	20000e58 	.word	0x20000e58
 80051f8:	200003d0 	.word	0x200003d0
 80051fc:	20000e5c 	.word	0x20000e5c
 8005200:	200003e0 	.word	0x200003e0
 8005204:	20000e60 	.word	0x20000e60
 8005208:	200003f0 	.word	0x200003f0
 800520c:	20000e64 	.word	0x20000e64
 8005210:	20000400 	.word	0x20000400
 8005214:	20000e68 	.word	0x20000e68
 8005218:	20000410 	.word	0x20000410
 800521c:	20000e6c 	.word	0x20000e6c
 8005220:	20000420 	.word	0x20000420
 8005224:	20000e70 	.word	0x20000e70
 8005228:	20000430 	.word	0x20000430
 800522c:	20000e74 	.word	0x20000e74
 8005230:	20000440 	.word	0x20000440
 8005234:	20000e78 	.word	0x20000e78
 8005238:	20000450 	.word	0x20000450
 800523c:	20000e84 	.word	0x20000e84
 8005240:	20000460 	.word	0x20000460
 8005244:	20000e88 	.word	0x20000e88
 8005248:	20000470 	.word	0x20000470
 800524c:	20000e8c 	.word	0x20000e8c
 8005250:	20000480 	.word	0x20000480
 8005254:	20000e90 	.word	0x20000e90
 8005258:	20000490 	.word	0x20000490
 800525c:	20000e94 	.word	0x20000e94
 8005260:	200004a0 	.word	0x200004a0
 8005264:	20000e98 	.word	0x20000e98
 8005268:	200004b0 	.word	0x200004b0
 800526c:	20000e9c 	.word	0x20000e9c
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8005270:	48a9      	ldr	r0, [pc, #676]	; (8005518 <loadMenuTexts+0x8b0>)
 8005272:	f7fb fa83 	bl	800077c <copyText>
 8005276:	4603      	mov	r3, r0
 8005278:	4aa8      	ldr	r2, [pc, #672]	; (800551c <loadMenuTexts+0x8b4>)
 800527a:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 800527c:	48a8      	ldr	r0, [pc, #672]	; (8005520 <loadMenuTexts+0x8b8>)
 800527e:	f7fb fa7d 	bl	800077c <copyText>
 8005282:	4603      	mov	r3, r0
 8005284:	4aa7      	ldr	r2, [pc, #668]	; (8005524 <loadMenuTexts+0x8bc>)
 8005286:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005288:	48a7      	ldr	r0, [pc, #668]	; (8005528 <loadMenuTexts+0x8c0>)
 800528a:	f7fb fa77 	bl	800077c <copyText>
 800528e:	4603      	mov	r3, r0
 8005290:	4aa6      	ldr	r2, [pc, #664]	; (800552c <loadMenuTexts+0x8c4>)
 8005292:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005294:	48a6      	ldr	r0, [pc, #664]	; (8005530 <loadMenuTexts+0x8c8>)
 8005296:	f7fb fa71 	bl	800077c <copyText>
 800529a:	4603      	mov	r3, r0
 800529c:	4aa5      	ldr	r2, [pc, #660]	; (8005534 <loadMenuTexts+0x8cc>)
 800529e:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80052a0:	48a5      	ldr	r0, [pc, #660]	; (8005538 <loadMenuTexts+0x8d0>)
 80052a2:	f7fb fa6b 	bl	800077c <copyText>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4aa4      	ldr	r2, [pc, #656]	; (800553c <loadMenuTexts+0x8d4>)
 80052aa:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80052ac:	48a4      	ldr	r0, [pc, #656]	; (8005540 <loadMenuTexts+0x8d8>)
 80052ae:	f7fb fa65 	bl	800077c <copyText>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4aa3      	ldr	r2, [pc, #652]	; (8005544 <loadMenuTexts+0x8dc>)
 80052b6:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80052b8:	48a3      	ldr	r0, [pc, #652]	; (8005548 <loadMenuTexts+0x8e0>)
 80052ba:	f7fb fa5f 	bl	800077c <copyText>
 80052be:	4603      	mov	r3, r0
 80052c0:	4aa2      	ldr	r2, [pc, #648]	; (800554c <loadMenuTexts+0x8e4>)
 80052c2:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80052c4:	48a2      	ldr	r0, [pc, #648]	; (8005550 <loadMenuTexts+0x8e8>)
 80052c6:	f7fb fa59 	bl	800077c <copyText>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4aa1      	ldr	r2, [pc, #644]	; (8005554 <loadMenuTexts+0x8ec>)
 80052ce:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80052d0:	48a1      	ldr	r0, [pc, #644]	; (8005558 <loadMenuTexts+0x8f0>)
 80052d2:	f7fb fa53 	bl	800077c <copyText>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4aa0      	ldr	r2, [pc, #640]	; (800555c <loadMenuTexts+0x8f4>)
 80052da:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80052dc:	48a0      	ldr	r0, [pc, #640]	; (8005560 <loadMenuTexts+0x8f8>)
 80052de:	f7fb fa4d 	bl	800077c <copyText>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a9f      	ldr	r2, [pc, #636]	; (8005564 <loadMenuTexts+0x8fc>)
 80052e6:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80052e8:	489f      	ldr	r0, [pc, #636]	; (8005568 <loadMenuTexts+0x900>)
 80052ea:	f7fb fa47 	bl	800077c <copyText>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a9e      	ldr	r2, [pc, #632]	; (800556c <loadMenuTexts+0x904>)
 80052f2:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80052f4:	489e      	ldr	r0, [pc, #632]	; (8005570 <loadMenuTexts+0x908>)
 80052f6:	f7fb fa41 	bl	800077c <copyText>
 80052fa:	4603      	mov	r3, r0
 80052fc:	4a9d      	ldr	r2, [pc, #628]	; (8005574 <loadMenuTexts+0x90c>)
 80052fe:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005300:	489d      	ldr	r0, [pc, #628]	; (8005578 <loadMenuTexts+0x910>)
 8005302:	f7fb fa3b 	bl	800077c <copyText>
 8005306:	4603      	mov	r3, r0
 8005308:	4a9c      	ldr	r2, [pc, #624]	; (800557c <loadMenuTexts+0x914>)
 800530a:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 800530c:	489c      	ldr	r0, [pc, #624]	; (8005580 <loadMenuTexts+0x918>)
 800530e:	f7fb fa35 	bl	800077c <copyText>
 8005312:	4603      	mov	r3, r0
 8005314:	4a9b      	ldr	r2, [pc, #620]	; (8005584 <loadMenuTexts+0x91c>)
 8005316:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005318:	489b      	ldr	r0, [pc, #620]	; (8005588 <loadMenuTexts+0x920>)
 800531a:	f7fb fa2f 	bl	800077c <copyText>
 800531e:	4603      	mov	r3, r0
 8005320:	4a9a      	ldr	r2, [pc, #616]	; (800558c <loadMenuTexts+0x924>)
 8005322:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005324:	489a      	ldr	r0, [pc, #616]	; (8005590 <loadMenuTexts+0x928>)
 8005326:	f7fb fa29 	bl	800077c <copyText>
 800532a:	4603      	mov	r3, r0
 800532c:	4a99      	ldr	r2, [pc, #612]	; (8005594 <loadMenuTexts+0x92c>)
 800532e:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005330:	4899      	ldr	r0, [pc, #612]	; (8005598 <loadMenuTexts+0x930>)
 8005332:	f7fb fa23 	bl	800077c <copyText>
 8005336:	4603      	mov	r3, r0
 8005338:	4a98      	ldr	r2, [pc, #608]	; (800559c <loadMenuTexts+0x934>)
 800533a:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 800533c:	4898      	ldr	r0, [pc, #608]	; (80055a0 <loadMenuTexts+0x938>)
 800533e:	f7fb fa1d 	bl	800077c <copyText>
 8005342:	4603      	mov	r3, r0
 8005344:	4a97      	ldr	r2, [pc, #604]	; (80055a4 <loadMenuTexts+0x93c>)
 8005346:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005348:	4897      	ldr	r0, [pc, #604]	; (80055a8 <loadMenuTexts+0x940>)
 800534a:	f7fb fa17 	bl	800077c <copyText>
 800534e:	4603      	mov	r3, r0
 8005350:	4a96      	ldr	r2, [pc, #600]	; (80055ac <loadMenuTexts+0x944>)
 8005352:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005354:	4896      	ldr	r0, [pc, #600]	; (80055b0 <loadMenuTexts+0x948>)
 8005356:	f7fb fa11 	bl	800077c <copyText>
 800535a:	4603      	mov	r3, r0
 800535c:	4a95      	ldr	r2, [pc, #596]	; (80055b4 <loadMenuTexts+0x94c>)
 800535e:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8005360:	4895      	ldr	r0, [pc, #596]	; (80055b8 <loadMenuTexts+0x950>)
 8005362:	f7fb fa0b 	bl	800077c <copyText>
 8005366:	4603      	mov	r3, r0
 8005368:	4a94      	ldr	r2, [pc, #592]	; (80055bc <loadMenuTexts+0x954>)
 800536a:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 800536c:	4894      	ldr	r0, [pc, #592]	; (80055c0 <loadMenuTexts+0x958>)
 800536e:	f7fb fa05 	bl	800077c <copyText>
 8005372:	4603      	mov	r3, r0
 8005374:	4a93      	ldr	r2, [pc, #588]	; (80055c4 <loadMenuTexts+0x95c>)
 8005376:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8005378:	4893      	ldr	r0, [pc, #588]	; (80055c8 <loadMenuTexts+0x960>)
 800537a:	f7fb f9ff 	bl	800077c <copyText>
 800537e:	4603      	mov	r3, r0
 8005380:	4a92      	ldr	r2, [pc, #584]	; (80055cc <loadMenuTexts+0x964>)
 8005382:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005384:	4892      	ldr	r0, [pc, #584]	; (80055d0 <loadMenuTexts+0x968>)
 8005386:	f7fb f9f9 	bl	800077c <copyText>
 800538a:	4603      	mov	r3, r0
 800538c:	4a91      	ldr	r2, [pc, #580]	; (80055d4 <loadMenuTexts+0x96c>)
 800538e:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005390:	4891      	ldr	r0, [pc, #580]	; (80055d8 <loadMenuTexts+0x970>)
 8005392:	f7fb f9f3 	bl	800077c <copyText>
 8005396:	4603      	mov	r3, r0
 8005398:	4a90      	ldr	r2, [pc, #576]	; (80055dc <loadMenuTexts+0x974>)
 800539a:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 800539c:	4890      	ldr	r0, [pc, #576]	; (80055e0 <loadMenuTexts+0x978>)
 800539e:	f7fb f9ed 	bl	800077c <copyText>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4a8f      	ldr	r2, [pc, #572]	; (80055e4 <loadMenuTexts+0x97c>)
 80053a6:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80053a8:	488f      	ldr	r0, [pc, #572]	; (80055e8 <loadMenuTexts+0x980>)
 80053aa:	f7fb f9e7 	bl	800077c <copyText>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a8e      	ldr	r2, [pc, #568]	; (80055ec <loadMenuTexts+0x984>)
 80053b2:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80053b4:	488e      	ldr	r0, [pc, #568]	; (80055f0 <loadMenuTexts+0x988>)
 80053b6:	f7fb f9e1 	bl	800077c <copyText>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a8d      	ldr	r2, [pc, #564]	; (80055f4 <loadMenuTexts+0x98c>)
 80053be:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80053c0:	488d      	ldr	r0, [pc, #564]	; (80055f8 <loadMenuTexts+0x990>)
 80053c2:	f7fb f9db 	bl	800077c <copyText>
 80053c6:	4603      	mov	r3, r0
 80053c8:	4a8c      	ldr	r2, [pc, #560]	; (80055fc <loadMenuTexts+0x994>)
 80053ca:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80053cc:	488c      	ldr	r0, [pc, #560]	; (8005600 <loadMenuTexts+0x998>)
 80053ce:	f7fb f9d5 	bl	800077c <copyText>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a8b      	ldr	r2, [pc, #556]	; (8005604 <loadMenuTexts+0x99c>)
 80053d6:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80053d8:	488b      	ldr	r0, [pc, #556]	; (8005608 <loadMenuTexts+0x9a0>)
 80053da:	f7fb f9cf 	bl	800077c <copyText>
 80053de:	4603      	mov	r3, r0
 80053e0:	4a8a      	ldr	r2, [pc, #552]	; (800560c <loadMenuTexts+0x9a4>)
 80053e2:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80053e4:	488a      	ldr	r0, [pc, #552]	; (8005610 <loadMenuTexts+0x9a8>)
 80053e6:	f7fb f9c9 	bl	800077c <copyText>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a89      	ldr	r2, [pc, #548]	; (8005614 <loadMenuTexts+0x9ac>)
 80053ee:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80053f0:	4889      	ldr	r0, [pc, #548]	; (8005618 <loadMenuTexts+0x9b0>)
 80053f2:	f7fb f9c3 	bl	800077c <copyText>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a88      	ldr	r2, [pc, #544]	; (800561c <loadMenuTexts+0x9b4>)
 80053fa:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80053fc:	4888      	ldr	r0, [pc, #544]	; (8005620 <loadMenuTexts+0x9b8>)
 80053fe:	f7fb f9bd 	bl	800077c <copyText>
 8005402:	4603      	mov	r3, r0
 8005404:	4a87      	ldr	r2, [pc, #540]	; (8005624 <loadMenuTexts+0x9bc>)
 8005406:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005408:	4887      	ldr	r0, [pc, #540]	; (8005628 <loadMenuTexts+0x9c0>)
 800540a:	f7fb f9b7 	bl	800077c <copyText>
 800540e:	4603      	mov	r3, r0
 8005410:	4a86      	ldr	r2, [pc, #536]	; (800562c <loadMenuTexts+0x9c4>)
 8005412:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005414:	4886      	ldr	r0, [pc, #536]	; (8005630 <loadMenuTexts+0x9c8>)
 8005416:	f7fb f9b1 	bl	800077c <copyText>
 800541a:	4603      	mov	r3, r0
 800541c:	4a85      	ldr	r2, [pc, #532]	; (8005634 <loadMenuTexts+0x9cc>)
 800541e:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005420:	4885      	ldr	r0, [pc, #532]	; (8005638 <loadMenuTexts+0x9d0>)
 8005422:	f7fb f9ab 	bl	800077c <copyText>
 8005426:	4603      	mov	r3, r0
 8005428:	4a84      	ldr	r2, [pc, #528]	; (800563c <loadMenuTexts+0x9d4>)
 800542a:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 800542c:	4884      	ldr	r0, [pc, #528]	; (8005640 <loadMenuTexts+0x9d8>)
 800542e:	f7fb f9a5 	bl	800077c <copyText>
 8005432:	4603      	mov	r3, r0
 8005434:	4a83      	ldr	r2, [pc, #524]	; (8005644 <loadMenuTexts+0x9dc>)
 8005436:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005438:	4883      	ldr	r0, [pc, #524]	; (8005648 <loadMenuTexts+0x9e0>)
 800543a:	f7fb f99f 	bl	800077c <copyText>
 800543e:	4603      	mov	r3, r0
 8005440:	4a82      	ldr	r2, [pc, #520]	; (800564c <loadMenuTexts+0x9e4>)
 8005442:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005444:	4882      	ldr	r0, [pc, #520]	; (8005650 <loadMenuTexts+0x9e8>)
 8005446:	f7fb f999 	bl	800077c <copyText>
 800544a:	4603      	mov	r3, r0
 800544c:	4a81      	ldr	r2, [pc, #516]	; (8005654 <loadMenuTexts+0x9ec>)
 800544e:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005450:	4881      	ldr	r0, [pc, #516]	; (8005658 <loadMenuTexts+0x9f0>)
 8005452:	f7fb f993 	bl	800077c <copyText>
 8005456:	4603      	mov	r3, r0
 8005458:	4a80      	ldr	r2, [pc, #512]	; (800565c <loadMenuTexts+0x9f4>)
 800545a:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 800545c:	4880      	ldr	r0, [pc, #512]	; (8005660 <loadMenuTexts+0x9f8>)
 800545e:	f7fb f98d 	bl	800077c <copyText>
 8005462:	4603      	mov	r3, r0
 8005464:	4a7f      	ldr	r2, [pc, #508]	; (8005664 <loadMenuTexts+0x9fc>)
 8005466:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005468:	487f      	ldr	r0, [pc, #508]	; (8005668 <loadMenuTexts+0xa00>)
 800546a:	f7fb f987 	bl	800077c <copyText>
 800546e:	4603      	mov	r3, r0
 8005470:	4a7e      	ldr	r2, [pc, #504]	; (800566c <loadMenuTexts+0xa04>)
 8005472:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005474:	487e      	ldr	r0, [pc, #504]	; (8005670 <loadMenuTexts+0xa08>)
 8005476:	f7fb f981 	bl	800077c <copyText>
 800547a:	4603      	mov	r3, r0
 800547c:	4a7d      	ldr	r2, [pc, #500]	; (8005674 <loadMenuTexts+0xa0c>)
 800547e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8005480:	487d      	ldr	r0, [pc, #500]	; (8005678 <loadMenuTexts+0xa10>)
 8005482:	f7fb f97b 	bl	800077c <copyText>
 8005486:	4603      	mov	r3, r0
 8005488:	4a7c      	ldr	r2, [pc, #496]	; (800567c <loadMenuTexts+0xa14>)
 800548a:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 800548c:	487c      	ldr	r0, [pc, #496]	; (8005680 <loadMenuTexts+0xa18>)
 800548e:	f7fb f975 	bl	800077c <copyText>
 8005492:	4603      	mov	r3, r0
 8005494:	4a7b      	ldr	r2, [pc, #492]	; (8005684 <loadMenuTexts+0xa1c>)
 8005496:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005498:	487b      	ldr	r0, [pc, #492]	; (8005688 <loadMenuTexts+0xa20>)
 800549a:	f7fb f96f 	bl	800077c <copyText>
 800549e:	4603      	mov	r3, r0
 80054a0:	4a7a      	ldr	r2, [pc, #488]	; (800568c <loadMenuTexts+0xa24>)
 80054a2:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80054a4:	487a      	ldr	r0, [pc, #488]	; (8005690 <loadMenuTexts+0xa28>)
 80054a6:	f7fb f969 	bl	800077c <copyText>
 80054aa:	4603      	mov	r3, r0
 80054ac:	4a79      	ldr	r2, [pc, #484]	; (8005694 <loadMenuTexts+0xa2c>)
 80054ae:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80054b0:	4879      	ldr	r0, [pc, #484]	; (8005698 <loadMenuTexts+0xa30>)
 80054b2:	f7fb f963 	bl	800077c <copyText>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4a78      	ldr	r2, [pc, #480]	; (800569c <loadMenuTexts+0xa34>)
 80054ba:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80054bc:	4878      	ldr	r0, [pc, #480]	; (80056a0 <loadMenuTexts+0xa38>)
 80054be:	f7fb f95d 	bl	800077c <copyText>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4a77      	ldr	r2, [pc, #476]	; (80056a4 <loadMenuTexts+0xa3c>)
 80054c6:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80054c8:	4877      	ldr	r0, [pc, #476]	; (80056a8 <loadMenuTexts+0xa40>)
 80054ca:	f7fb f957 	bl	800077c <copyText>
 80054ce:	4603      	mov	r3, r0
 80054d0:	4a76      	ldr	r2, [pc, #472]	; (80056ac <loadMenuTexts+0xa44>)
 80054d2:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80054d4:	4876      	ldr	r0, [pc, #472]	; (80056b0 <loadMenuTexts+0xa48>)
 80054d6:	f7fb f951 	bl	800077c <copyText>
 80054da:	4603      	mov	r3, r0
 80054dc:	4a75      	ldr	r2, [pc, #468]	; (80056b4 <loadMenuTexts+0xa4c>)
 80054de:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80054e0:	4875      	ldr	r0, [pc, #468]	; (80056b8 <loadMenuTexts+0xa50>)
 80054e2:	f7fb f94b 	bl	800077c <copyText>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4a74      	ldr	r2, [pc, #464]	; (80056bc <loadMenuTexts+0xa54>)
 80054ea:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80054ec:	4874      	ldr	r0, [pc, #464]	; (80056c0 <loadMenuTexts+0xa58>)
 80054ee:	f7fb f945 	bl	800077c <copyText>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4a73      	ldr	r2, [pc, #460]	; (80056c4 <loadMenuTexts+0xa5c>)
 80054f6:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80054f8:	4873      	ldr	r0, [pc, #460]	; (80056c8 <loadMenuTexts+0xa60>)
 80054fa:	f7fb f93f 	bl	800077c <copyText>
 80054fe:	4603      	mov	r3, r0
 8005500:	4a72      	ldr	r2, [pc, #456]	; (80056cc <loadMenuTexts+0xa64>)
 8005502:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005504:	4872      	ldr	r0, [pc, #456]	; (80056d0 <loadMenuTexts+0xa68>)
 8005506:	f7fb f939 	bl	800077c <copyText>
 800550a:	4603      	mov	r3, r0
 800550c:	4a71      	ldr	r2, [pc, #452]	; (80056d4 <loadMenuTexts+0xa6c>)
 800550e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005510:	4871      	ldr	r0, [pc, #452]	; (80056d8 <loadMenuTexts+0xa70>)
 8005512:	f7fb f933 	bl	800077c <copyText>
 8005516:	e0e1      	b.n	80056dc <loadMenuTexts+0xa74>
 8005518:	200004c0 	.word	0x200004c0
 800551c:	20000d78 	.word	0x20000d78
 8005520:	200004d0 	.word	0x200004d0
 8005524:	20000d7c 	.word	0x20000d7c
 8005528:	200004e0 	.word	0x200004e0
 800552c:	20000d80 	.word	0x20000d80
 8005530:	200004f0 	.word	0x200004f0
 8005534:	20000d84 	.word	0x20000d84
 8005538:	20000500 	.word	0x20000500
 800553c:	20000d88 	.word	0x20000d88
 8005540:	20000510 	.word	0x20000510
 8005544:	20000d8c 	.word	0x20000d8c
 8005548:	20000520 	.word	0x20000520
 800554c:	20000d90 	.word	0x20000d90
 8005550:	20000530 	.word	0x20000530
 8005554:	20000d94 	.word	0x20000d94
 8005558:	20000540 	.word	0x20000540
 800555c:	20000d98 	.word	0x20000d98
 8005560:	20000550 	.word	0x20000550
 8005564:	20000d9c 	.word	0x20000d9c
 8005568:	20000560 	.word	0x20000560
 800556c:	20000da0 	.word	0x20000da0
 8005570:	20000570 	.word	0x20000570
 8005574:	20000da4 	.word	0x20000da4
 8005578:	20000580 	.word	0x20000580
 800557c:	20000da8 	.word	0x20000da8
 8005580:	20000590 	.word	0x20000590
 8005584:	20000dac 	.word	0x20000dac
 8005588:	200005a0 	.word	0x200005a0
 800558c:	20000db0 	.word	0x20000db0
 8005590:	200005b0 	.word	0x200005b0
 8005594:	20000db4 	.word	0x20000db4
 8005598:	200005c0 	.word	0x200005c0
 800559c:	20000db8 	.word	0x20000db8
 80055a0:	200005d0 	.word	0x200005d0
 80055a4:	20000dbc 	.word	0x20000dbc
 80055a8:	200005e0 	.word	0x200005e0
 80055ac:	20000dc0 	.word	0x20000dc0
 80055b0:	200005f0 	.word	0x200005f0
 80055b4:	20000dc4 	.word	0x20000dc4
 80055b8:	20000600 	.word	0x20000600
 80055bc:	20000dc8 	.word	0x20000dc8
 80055c0:	20000610 	.word	0x20000610
 80055c4:	20000dd0 	.word	0x20000dd0
 80055c8:	20000620 	.word	0x20000620
 80055cc:	20000dd4 	.word	0x20000dd4
 80055d0:	20000630 	.word	0x20000630
 80055d4:	20000dd8 	.word	0x20000dd8
 80055d8:	20000640 	.word	0x20000640
 80055dc:	20000ddc 	.word	0x20000ddc
 80055e0:	20000650 	.word	0x20000650
 80055e4:	20000de0 	.word	0x20000de0
 80055e8:	20000660 	.word	0x20000660
 80055ec:	20000de4 	.word	0x20000de4
 80055f0:	20000670 	.word	0x20000670
 80055f4:	20000de8 	.word	0x20000de8
 80055f8:	20000680 	.word	0x20000680
 80055fc:	20000dec 	.word	0x20000dec
 8005600:	20000690 	.word	0x20000690
 8005604:	20000df0 	.word	0x20000df0
 8005608:	200006a0 	.word	0x200006a0
 800560c:	20000df4 	.word	0x20000df4
 8005610:	200006b0 	.word	0x200006b0
 8005614:	20000df8 	.word	0x20000df8
 8005618:	200006c0 	.word	0x200006c0
 800561c:	20000e00 	.word	0x20000e00
 8005620:	200006d0 	.word	0x200006d0
 8005624:	20000e08 	.word	0x20000e08
 8005628:	200006e0 	.word	0x200006e0
 800562c:	20000e0c 	.word	0x20000e0c
 8005630:	200006f0 	.word	0x200006f0
 8005634:	20000e10 	.word	0x20000e10
 8005638:	20000700 	.word	0x20000700
 800563c:	20000e14 	.word	0x20000e14
 8005640:	20000710 	.word	0x20000710
 8005644:	20000e18 	.word	0x20000e18
 8005648:	20000720 	.word	0x20000720
 800564c:	20000e1c 	.word	0x20000e1c
 8005650:	20000730 	.word	0x20000730
 8005654:	20000e20 	.word	0x20000e20
 8005658:	20000740 	.word	0x20000740
 800565c:	20000e24 	.word	0x20000e24
 8005660:	20000750 	.word	0x20000750
 8005664:	20000e28 	.word	0x20000e28
 8005668:	20000760 	.word	0x20000760
 800566c:	20000e2c 	.word	0x20000e2c
 8005670:	20000770 	.word	0x20000770
 8005674:	20000e30 	.word	0x20000e30
 8005678:	20000780 	.word	0x20000780
 800567c:	20000e34 	.word	0x20000e34
 8005680:	20000790 	.word	0x20000790
 8005684:	20000e38 	.word	0x20000e38
 8005688:	200007a0 	.word	0x200007a0
 800568c:	20000e3c 	.word	0x20000e3c
 8005690:	200007b0 	.word	0x200007b0
 8005694:	20000e40 	.word	0x20000e40
 8005698:	200007c0 	.word	0x200007c0
 800569c:	20000e44 	.word	0x20000e44
 80056a0:	200007d0 	.word	0x200007d0
 80056a4:	20000e48 	.word	0x20000e48
 80056a8:	200007e0 	.word	0x200007e0
 80056ac:	20000e4c 	.word	0x20000e4c
 80056b0:	200007f0 	.word	0x200007f0
 80056b4:	20000e50 	.word	0x20000e50
 80056b8:	20000800 	.word	0x20000800
 80056bc:	20000e54 	.word	0x20000e54
 80056c0:	20000810 	.word	0x20000810
 80056c4:	20000e58 	.word	0x20000e58
 80056c8:	20000820 	.word	0x20000820
 80056cc:	20000e5c 	.word	0x20000e5c
 80056d0:	20000830 	.word	0x20000830
 80056d4:	20000e60 	.word	0x20000e60
 80056d8:	20000840 	.word	0x20000840
 80056dc:	4603      	mov	r3, r0
 80056de:	4a27      	ldr	r2, [pc, #156]	; (800577c <loadMenuTexts+0xb14>)
 80056e0:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80056e2:	4827      	ldr	r0, [pc, #156]	; (8005780 <loadMenuTexts+0xb18>)
 80056e4:	f7fb f84a 	bl	800077c <copyText>
 80056e8:	4603      	mov	r3, r0
 80056ea:	4a26      	ldr	r2, [pc, #152]	; (8005784 <loadMenuTexts+0xb1c>)
 80056ec:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80056ee:	4826      	ldr	r0, [pc, #152]	; (8005788 <loadMenuTexts+0xb20>)
 80056f0:	f7fb f844 	bl	800077c <copyText>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a25      	ldr	r2, [pc, #148]	; (800578c <loadMenuTexts+0xb24>)
 80056f8:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80056fa:	4825      	ldr	r0, [pc, #148]	; (8005790 <loadMenuTexts+0xb28>)
 80056fc:	f7fb f83e 	bl	800077c <copyText>
 8005700:	4603      	mov	r3, r0
 8005702:	4a24      	ldr	r2, [pc, #144]	; (8005794 <loadMenuTexts+0xb2c>)
 8005704:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005706:	4824      	ldr	r0, [pc, #144]	; (8005798 <loadMenuTexts+0xb30>)
 8005708:	f7fb f838 	bl	800077c <copyText>
 800570c:	4603      	mov	r3, r0
 800570e:	4a23      	ldr	r2, [pc, #140]	; (800579c <loadMenuTexts+0xb34>)
 8005710:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005712:	4823      	ldr	r0, [pc, #140]	; (80057a0 <loadMenuTexts+0xb38>)
 8005714:	f7fb f832 	bl	800077c <copyText>
 8005718:	4603      	mov	r3, r0
 800571a:	4a22      	ldr	r2, [pc, #136]	; (80057a4 <loadMenuTexts+0xb3c>)
 800571c:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800571e:	4822      	ldr	r0, [pc, #136]	; (80057a8 <loadMenuTexts+0xb40>)
 8005720:	f7fb f82c 	bl	800077c <copyText>
 8005724:	4603      	mov	r3, r0
 8005726:	4a21      	ldr	r2, [pc, #132]	; (80057ac <loadMenuTexts+0xb44>)
 8005728:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800572a:	4821      	ldr	r0, [pc, #132]	; (80057b0 <loadMenuTexts+0xb48>)
 800572c:	f7fb f826 	bl	800077c <copyText>
 8005730:	4603      	mov	r3, r0
 8005732:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <loadMenuTexts+0xb4c>)
 8005734:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005736:	4820      	ldr	r0, [pc, #128]	; (80057b8 <loadMenuTexts+0xb50>)
 8005738:	f7fb f820 	bl	800077c <copyText>
 800573c:	4603      	mov	r3, r0
 800573e:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <loadMenuTexts+0xb54>)
 8005740:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005742:	481f      	ldr	r0, [pc, #124]	; (80057c0 <loadMenuTexts+0xb58>)
 8005744:	f7fb f81a 	bl	800077c <copyText>
 8005748:	4603      	mov	r3, r0
 800574a:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <loadMenuTexts+0xb5c>)
 800574c:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800574e:	481e      	ldr	r0, [pc, #120]	; (80057c8 <loadMenuTexts+0xb60>)
 8005750:	f7fb f814 	bl	800077c <copyText>
 8005754:	4603      	mov	r3, r0
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <loadMenuTexts+0xb64>)
 8005758:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800575a:	481d      	ldr	r0, [pc, #116]	; (80057d0 <loadMenuTexts+0xb68>)
 800575c:	f7fb f80e 	bl	800077c <copyText>
 8005760:	4603      	mov	r3, r0
 8005762:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <loadMenuTexts+0xb6c>)
 8005764:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005766:	481c      	ldr	r0, [pc, #112]	; (80057d8 <loadMenuTexts+0xb70>)
 8005768:	f7fb f808 	bl	800077c <copyText>
 800576c:	4603      	mov	r3, r0
 800576e:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <loadMenuTexts+0xb74>)
 8005770:	6013      	str	r3, [r2, #0]
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000e64 	.word	0x20000e64
 8005780:	20000850 	.word	0x20000850
 8005784:	20000e68 	.word	0x20000e68
 8005788:	20000860 	.word	0x20000860
 800578c:	20000e6c 	.word	0x20000e6c
 8005790:	20000870 	.word	0x20000870
 8005794:	20000e70 	.word	0x20000e70
 8005798:	20000880 	.word	0x20000880
 800579c:	20000e74 	.word	0x20000e74
 80057a0:	20000890 	.word	0x20000890
 80057a4:	20000e78 	.word	0x20000e78
 80057a8:	200008a0 	.word	0x200008a0
 80057ac:	20000e84 	.word	0x20000e84
 80057b0:	200008b0 	.word	0x200008b0
 80057b4:	20000e88 	.word	0x20000e88
 80057b8:	200008c0 	.word	0x200008c0
 80057bc:	20000e8c 	.word	0x20000e8c
 80057c0:	200008d0 	.word	0x200008d0
 80057c4:	20000e90 	.word	0x20000e90
 80057c8:	200008e0 	.word	0x200008e0
 80057cc:	20000e94 	.word	0x20000e94
 80057d0:	200008f0 	.word	0x200008f0
 80057d4:	20000e98 	.word	0x20000e98
 80057d8:	20000900 	.word	0x20000900
 80057dc:	20000e9c 	.word	0x20000e9c

080057e0 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d105      	bne.n	80057fc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80057f0:	4a22      	ldr	r2, [pc, #136]	; (800587c <lcdUpdate+0x9c>)
 80057f2:	2101      	movs	r1, #1
 80057f4:	2002      	movs	r0, #2
 80057f6:	f7fa ff37 	bl	8000668 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80057fa:	e03b      	b.n	8005874 <lcdUpdate+0x94>
	} else if(y==2) {
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d105      	bne.n	800580e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005802:	4a1e      	ldr	r2, [pc, #120]	; (800587c <lcdUpdate+0x9c>)
 8005804:	2102      	movs	r1, #2
 8005806:	2002      	movs	r0, #2
 8005808:	f7fa ff2e 	bl	8000668 <lcd_print>
}
 800580c:	e032      	b.n	8005874 <lcdUpdate+0x94>
	} else if(y==3) {
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d105      	bne.n	8005820 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005814:	4a19      	ldr	r2, [pc, #100]	; (800587c <lcdUpdate+0x9c>)
 8005816:	2103      	movs	r1, #3
 8005818:	2002      	movs	r0, #2
 800581a:	f7fa ff25 	bl	8000668 <lcd_print>
}
 800581e:	e029      	b.n	8005874 <lcdUpdate+0x94>
	} else if(y==4) {
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d105      	bne.n	8005832 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005826:	4a15      	ldr	r2, [pc, #84]	; (800587c <lcdUpdate+0x9c>)
 8005828:	2104      	movs	r1, #4
 800582a:	2002      	movs	r0, #2
 800582c:	f7fa ff1c 	bl	8000668 <lcd_print>
}
 8005830:	e020      	b.n	8005874 <lcdUpdate+0x94>
	} else if(y==5) {
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	2b05      	cmp	r3, #5
 8005836:	d105      	bne.n	8005844 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005838:	4a10      	ldr	r2, [pc, #64]	; (800587c <lcdUpdate+0x9c>)
 800583a:	2105      	movs	r1, #5
 800583c:	2002      	movs	r0, #2
 800583e:	f7fa ff13 	bl	8000668 <lcd_print>
}
 8005842:	e017      	b.n	8005874 <lcdUpdate+0x94>
	} else if(y==6) {
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b06      	cmp	r3, #6
 8005848:	d105      	bne.n	8005856 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800584a:	4a0c      	ldr	r2, [pc, #48]	; (800587c <lcdUpdate+0x9c>)
 800584c:	2106      	movs	r1, #6
 800584e:	2002      	movs	r0, #2
 8005850:	f7fa ff0a 	bl	8000668 <lcd_print>
}
 8005854:	e00e      	b.n	8005874 <lcdUpdate+0x94>
	} else if (y==7) {
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b07      	cmp	r3, #7
 800585a:	d10b      	bne.n	8005874 <lcdUpdate+0x94>
		lcd_clear();
 800585c:	f7fa ff30 	bl	80006c0 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005860:	4a07      	ldr	r2, [pc, #28]	; (8005880 <lcdUpdate+0xa0>)
 8005862:	2101      	movs	r1, #1
 8005864:	2001      	movs	r0, #1
 8005866:	f7fa feff 	bl	8000668 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800586a:	4a06      	ldr	r2, [pc, #24]	; (8005884 <lcdUpdate+0xa4>)
 800586c:	2101      	movs	r1, #1
 800586e:	2002      	movs	r0, #2
 8005870:	f7fa fefa 	bl	8000668 <lcd_print>
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	0800db30 	.word	0x0800db30
 8005880:	0800e464 	.word	0x0800e464
 8005884:	0800e478 	.word	0x0800e478

08005888 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d11d      	bne.n	80058d4 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005898:	4b62      	ldr	r3, [pc, #392]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80058a0:	4a61      	ldr	r2, [pc, #388]	; (8005a28 <hataKoduLcdGoster+0x1a0>)
 80058a2:	2101      	movs	r1, #1
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7fa fedf 	bl	8000668 <lcd_print>
 80058aa:	e008      	b.n	80058be <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80058ac:	4b5d      	ldr	r3, [pc, #372]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d104      	bne.n	80058be <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058b4:	4a5d      	ldr	r2, [pc, #372]	; (8005a2c <hataKoduLcdGoster+0x1a4>)
 80058b6:	2101      	movs	r1, #1
 80058b8:	2001      	movs	r0, #1
 80058ba:	f7fa fed5 	bl	8000668 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80058be:	4a5c      	ldr	r2, [pc, #368]	; (8005a30 <hataKoduLcdGoster+0x1a8>)
 80058c0:	2101      	movs	r1, #1
 80058c2:	2002      	movs	r0, #2
 80058c4:	f7fa fed0 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80058c8:	4a5a      	ldr	r2, [pc, #360]	; (8005a34 <hataKoduLcdGoster+0x1ac>)
 80058ca:	2107      	movs	r1, #7
 80058cc:	2002      	movs	r0, #2
 80058ce:	f7fa fecb 	bl	8000668 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80058d2:	e0a3      	b.n	8005a1c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d11d      	bne.n	8005916 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80058da:	4b52      	ldr	r3, [pc, #328]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d105      	bne.n	80058ee <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 80058e2:	4a51      	ldr	r2, [pc, #324]	; (8005a28 <hataKoduLcdGoster+0x1a0>)
 80058e4:	2101      	movs	r1, #1
 80058e6:	2001      	movs	r0, #1
 80058e8:	f7fa febe 	bl	8000668 <lcd_print>
 80058ec:	e008      	b.n	8005900 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80058ee:	4b4d      	ldr	r3, [pc, #308]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d104      	bne.n	8005900 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058f6:	4a4d      	ldr	r2, [pc, #308]	; (8005a2c <hataKoduLcdGoster+0x1a4>)
 80058f8:	2101      	movs	r1, #1
 80058fa:	2001      	movs	r0, #1
 80058fc:	f7fa feb4 	bl	8000668 <lcd_print>
		lcd_print(2, 2, "2");
 8005900:	4a4d      	ldr	r2, [pc, #308]	; (8005a38 <hataKoduLcdGoster+0x1b0>)
 8005902:	2102      	movs	r1, #2
 8005904:	2002      	movs	r0, #2
 8005906:	f7fa feaf 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800590a:	4a4a      	ldr	r2, [pc, #296]	; (8005a34 <hataKoduLcdGoster+0x1ac>)
 800590c:	2107      	movs	r1, #7
 800590e:	2002      	movs	r0, #2
 8005910:	f7fa feaa 	bl	8000668 <lcd_print>
}
 8005914:	e082      	b.n	8005a1c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d11d      	bne.n	8005958 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 800591c:	4b41      	ldr	r3, [pc, #260]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005924:	4a40      	ldr	r2, [pc, #256]	; (8005a28 <hataKoduLcdGoster+0x1a0>)
 8005926:	2101      	movs	r1, #1
 8005928:	2001      	movs	r0, #1
 800592a:	f7fa fe9d 	bl	8000668 <lcd_print>
 800592e:	e008      	b.n	8005942 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005930:	4b3c      	ldr	r3, [pc, #240]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d104      	bne.n	8005942 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005938:	4a3c      	ldr	r2, [pc, #240]	; (8005a2c <hataKoduLcdGoster+0x1a4>)
 800593a:	2101      	movs	r1, #1
 800593c:	2001      	movs	r0, #1
 800593e:	f7fa fe93 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "3");
 8005942:	4a3e      	ldr	r2, [pc, #248]	; (8005a3c <hataKoduLcdGoster+0x1b4>)
 8005944:	2103      	movs	r1, #3
 8005946:	2002      	movs	r0, #2
 8005948:	f7fa fe8e 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800594c:	4a39      	ldr	r2, [pc, #228]	; (8005a34 <hataKoduLcdGoster+0x1ac>)
 800594e:	2107      	movs	r1, #7
 8005950:	2002      	movs	r0, #2
 8005952:	f7fa fe89 	bl	8000668 <lcd_print>
}
 8005956:	e061      	b.n	8005a1c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d11d      	bne.n	800599a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800595e:	4b31      	ldr	r3, [pc, #196]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d105      	bne.n	8005972 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005966:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <hataKoduLcdGoster+0x1a0>)
 8005968:	2101      	movs	r1, #1
 800596a:	2001      	movs	r0, #1
 800596c:	f7fa fe7c 	bl	8000668 <lcd_print>
 8005970:	e008      	b.n	8005984 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005972:	4b2c      	ldr	r3, [pc, #176]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d104      	bne.n	8005984 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800597a:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <hataKoduLcdGoster+0x1a4>)
 800597c:	2101      	movs	r1, #1
 800597e:	2001      	movs	r0, #1
 8005980:	f7fa fe72 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "4");
 8005984:	4a2e      	ldr	r2, [pc, #184]	; (8005a40 <hataKoduLcdGoster+0x1b8>)
 8005986:	2104      	movs	r1, #4
 8005988:	2002      	movs	r0, #2
 800598a:	f7fa fe6d 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800598e:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <hataKoduLcdGoster+0x1ac>)
 8005990:	2107      	movs	r1, #7
 8005992:	2002      	movs	r0, #2
 8005994:	f7fa fe68 	bl	8000668 <lcd_print>
}
 8005998:	e040      	b.n	8005a1c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	2b05      	cmp	r3, #5
 800599e:	d11d      	bne.n	80059dc <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80059a0:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d105      	bne.n	80059b4 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <hataKoduLcdGoster+0x1a0>)
 80059aa:	2101      	movs	r1, #1
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7fa fe5b 	bl	8000668 <lcd_print>
 80059b2:	e008      	b.n	80059c6 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80059b4:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d104      	bne.n	80059c6 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059bc:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <hataKoduLcdGoster+0x1a4>)
 80059be:	2101      	movs	r1, #1
 80059c0:	2001      	movs	r0, #1
 80059c2:	f7fa fe51 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "5");
 80059c6:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <hataKoduLcdGoster+0x1bc>)
 80059c8:	2105      	movs	r1, #5
 80059ca:	2002      	movs	r0, #2
 80059cc:	f7fa fe4c 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80059d0:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <hataKoduLcdGoster+0x1ac>)
 80059d2:	2107      	movs	r1, #7
 80059d4:	2002      	movs	r0, #2
 80059d6:	f7fa fe47 	bl	8000668 <lcd_print>
}
 80059da:	e01f      	b.n	8005a1c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d11c      	bne.n	8005a1c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80059e2:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d105      	bne.n	80059f6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80059ea:	4a0f      	ldr	r2, [pc, #60]	; (8005a28 <hataKoduLcdGoster+0x1a0>)
 80059ec:	2101      	movs	r1, #1
 80059ee:	2001      	movs	r0, #1
 80059f0:	f7fa fe3a 	bl	8000668 <lcd_print>
 80059f4:	e008      	b.n	8005a08 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <hataKoduLcdGoster+0x19c>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d104      	bne.n	8005a08 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059fe:	4a0b      	ldr	r2, [pc, #44]	; (8005a2c <hataKoduLcdGoster+0x1a4>)
 8005a00:	2101      	movs	r1, #1
 8005a02:	2001      	movs	r0, #1
 8005a04:	f7fa fe30 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "6");
 8005a08:	4a0f      	ldr	r2, [pc, #60]	; (8005a48 <hataKoduLcdGoster+0x1c0>)
 8005a0a:	2106      	movs	r1, #6
 8005a0c:	2002      	movs	r0, #2
 8005a0e:	f7fa fe2b 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a12:	4a08      	ldr	r2, [pc, #32]	; (8005a34 <hataKoduLcdGoster+0x1ac>)
 8005a14:	2107      	movs	r1, #7
 8005a16:	2002      	movs	r0, #2
 8005a18:	f7fa fe26 	bl	8000668 <lcd_print>
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000d2d 	.word	0x20000d2d
 8005a28:	0800e48c 	.word	0x0800e48c
 8005a2c:	0800e4a0 	.word	0x0800e4a0
 8005a30:	0800d874 	.word	0x0800d874
 8005a34:	0800e4b4 	.word	0x0800e4b4
 8005a38:	0800d878 	.word	0x0800d878
 8005a3c:	0800d87c 	.word	0x0800d87c
 8005a40:	0800d880 	.word	0x0800d880
 8005a44:	0800d884 	.word	0x0800d884
 8005a48:	0800d888 	.word	0x0800d888

08005a4c <convertAndSendData>:

void convertAndSendData() {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005a52:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <convertAndSendData+0x58>)
 8005a54:	2101      	movs	r1, #1
 8005a56:	2001      	movs	r0, #1
 8005a58:	f7fa fe06 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005a5c:	4a12      	ldr	r2, [pc, #72]	; (8005aa8 <convertAndSendData+0x5c>)
 8005a5e:	2101      	movs	r1, #1
 8005a60:	2002      	movs	r0, #2
 8005a62:	f7fa fe01 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 8005a66:	2300      	movs	r3, #0
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	e00a      	b.n	8005a82 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005a6c:	f002 fb36 	bl	80080dc <mergeData>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461a      	mov	r2, r3
 8005a74:	490d      	ldr	r1, [pc, #52]	; (8005aac <convertAndSendData+0x60>)
 8005a76:	480e      	ldr	r0, [pc, #56]	; (8005ab0 <convertAndSendData+0x64>)
 8005a78:	f7fa fbdc 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	ddf1      	ble.n	8005a6c <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a8c:	f003 fb12 	bl	80090b4 <HAL_Delay>
	lcd_clear();
 8005a90:	f7fa fe16 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 8005a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a98:	f003 fb0c 	bl	80090b4 <HAL_Delay>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	0800e4c0 	.word	0x0800e4c0
 8005aa8:	0800e4cc 	.word	0x0800e4cc
 8005aac:	20000cd4 	.word	0x20000cd4
 8005ab0:	20000bf0 	.word	0x20000bf0

08005ab4 <eepromKontrol>:

void eepromKontrol(int type) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af04      	add	r7, sp, #16
 8005aba:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 113, eepromData, 113, 3000);
 8005abc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	2371      	movs	r3, #113	; 0x71
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	4b9c      	ldr	r3, [pc, #624]	; (8005d38 <eepromKontrol+0x284>)
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2371      	movs	r3, #113	; 0x71
 8005acc:	2200      	movs	r2, #0
 8005ace:	21a0      	movs	r1, #160	; 0xa0
 8005ad0:	489a      	ldr	r0, [pc, #616]	; (8005d3c <eepromKontrol+0x288>)
 8005ad2:	f004 fc73 	bl	800a3bc <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8005ad6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005ada:	f003 faeb 	bl	80090b4 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005ade:	4b96      	ldr	r3, [pc, #600]	; (8005d38 <eepromKontrol+0x284>)
 8005ae0:	78da      	ldrb	r2, [r3, #3]
 8005ae2:	4b97      	ldr	r3, [pc, #604]	; (8005d40 <eepromKontrol+0x28c>)
 8005ae4:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005ae6:	4b94      	ldr	r3, [pc, #592]	; (8005d38 <eepromKontrol+0x284>)
 8005ae8:	785a      	ldrb	r2, [r3, #1]
 8005aea:	4b96      	ldr	r3, [pc, #600]	; (8005d44 <eepromKontrol+0x290>)
 8005aec:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005aee:	4b92      	ldr	r3, [pc, #584]	; (8005d38 <eepromKontrol+0x284>)
 8005af0:	789a      	ldrb	r2, [r3, #2]
 8005af2:	4b95      	ldr	r3, [pc, #596]	; (8005d48 <eepromKontrol+0x294>)
 8005af4:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005af6:	4b90      	ldr	r3, [pc, #576]	; (8005d38 <eepromKontrol+0x284>)
 8005af8:	791a      	ldrb	r2, [r3, #4]
 8005afa:	4b94      	ldr	r3, [pc, #592]	; (8005d4c <eepromKontrol+0x298>)
 8005afc:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005afe:	4b8e      	ldr	r3, [pc, #568]	; (8005d38 <eepromKontrol+0x284>)
 8005b00:	795a      	ldrb	r2, [r3, #5]
 8005b02:	4b93      	ldr	r3, [pc, #588]	; (8005d50 <eepromKontrol+0x29c>)
 8005b04:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005b06:	4b8c      	ldr	r3, [pc, #560]	; (8005d38 <eepromKontrol+0x284>)
 8005b08:	799a      	ldrb	r2, [r3, #6]
 8005b0a:	4b92      	ldr	r3, [pc, #584]	; (8005d54 <eepromKontrol+0x2a0>)
 8005b0c:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005b0e:	4b8a      	ldr	r3, [pc, #552]	; (8005d38 <eepromKontrol+0x284>)
 8005b10:	79da      	ldrb	r2, [r3, #7]
 8005b12:	4b91      	ldr	r3, [pc, #580]	; (8005d58 <eepromKontrol+0x2a4>)
 8005b14:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005b16:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <eepromKontrol+0x284>)
 8005b18:	7a1a      	ldrb	r2, [r3, #8]
 8005b1a:	4b90      	ldr	r3, [pc, #576]	; (8005d5c <eepromKontrol+0x2a8>)
 8005b1c:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005b1e:	4b86      	ldr	r3, [pc, #536]	; (8005d38 <eepromKontrol+0x284>)
 8005b20:	7a5a      	ldrb	r2, [r3, #9]
 8005b22:	4b8f      	ldr	r3, [pc, #572]	; (8005d60 <eepromKontrol+0x2ac>)
 8005b24:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005b26:	4b84      	ldr	r3, [pc, #528]	; (8005d38 <eepromKontrol+0x284>)
 8005b28:	7a9a      	ldrb	r2, [r3, #10]
 8005b2a:	4b8e      	ldr	r3, [pc, #568]	; (8005d64 <eepromKontrol+0x2b0>)
 8005b2c:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005b2e:	4b82      	ldr	r3, [pc, #520]	; (8005d38 <eepromKontrol+0x284>)
 8005b30:	7ada      	ldrb	r2, [r3, #11]
 8005b32:	4b8d      	ldr	r3, [pc, #564]	; (8005d68 <eepromKontrol+0x2b4>)
 8005b34:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005b36:	4b80      	ldr	r3, [pc, #512]	; (8005d38 <eepromKontrol+0x284>)
 8005b38:	7b1a      	ldrb	r2, [r3, #12]
 8005b3a:	4b8c      	ldr	r3, [pc, #560]	; (8005d6c <eepromKontrol+0x2b8>)
 8005b3c:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005b3e:	4b7e      	ldr	r3, [pc, #504]	; (8005d38 <eepromKontrol+0x284>)
 8005b40:	7b5a      	ldrb	r2, [r3, #13]
 8005b42:	4b8b      	ldr	r3, [pc, #556]	; (8005d70 <eepromKontrol+0x2bc>)
 8005b44:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005b46:	4b7c      	ldr	r3, [pc, #496]	; (8005d38 <eepromKontrol+0x284>)
 8005b48:	7b9a      	ldrb	r2, [r3, #14]
 8005b4a:	4b8a      	ldr	r3, [pc, #552]	; (8005d74 <eepromKontrol+0x2c0>)
 8005b4c:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	; (8005d38 <eepromKontrol+0x284>)
 8005b50:	7bda      	ldrb	r2, [r3, #15]
 8005b52:	4b89      	ldr	r3, [pc, #548]	; (8005d78 <eepromKontrol+0x2c4>)
 8005b54:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005b56:	4b78      	ldr	r3, [pc, #480]	; (8005d38 <eepromKontrol+0x284>)
 8005b58:	7c1a      	ldrb	r2, [r3, #16]
 8005b5a:	4b88      	ldr	r3, [pc, #544]	; (8005d7c <eepromKontrol+0x2c8>)
 8005b5c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005b5e:	4b76      	ldr	r3, [pc, #472]	; (8005d38 <eepromKontrol+0x284>)
 8005b60:	7c5a      	ldrb	r2, [r3, #17]
 8005b62:	4b87      	ldr	r3, [pc, #540]	; (8005d80 <eepromKontrol+0x2cc>)
 8005b64:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005b66:	4b74      	ldr	r3, [pc, #464]	; (8005d38 <eepromKontrol+0x284>)
 8005b68:	7c9a      	ldrb	r2, [r3, #18]
 8005b6a:	4b86      	ldr	r3, [pc, #536]	; (8005d84 <eepromKontrol+0x2d0>)
 8005b6c:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005b6e:	4b72      	ldr	r3, [pc, #456]	; (8005d38 <eepromKontrol+0x284>)
 8005b70:	7cda      	ldrb	r2, [r3, #19]
 8005b72:	4b85      	ldr	r3, [pc, #532]	; (8005d88 <eepromKontrol+0x2d4>)
 8005b74:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005b76:	4b70      	ldr	r3, [pc, #448]	; (8005d38 <eepromKontrol+0x284>)
 8005b78:	7d1a      	ldrb	r2, [r3, #20]
 8005b7a:	4b84      	ldr	r3, [pc, #528]	; (8005d8c <eepromKontrol+0x2d8>)
 8005b7c:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005b7e:	4b6e      	ldr	r3, [pc, #440]	; (8005d38 <eepromKontrol+0x284>)
 8005b80:	7d5a      	ldrb	r2, [r3, #21]
 8005b82:	4b83      	ldr	r3, [pc, #524]	; (8005d90 <eepromKontrol+0x2dc>)
 8005b84:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005b86:	4b6c      	ldr	r3, [pc, #432]	; (8005d38 <eepromKontrol+0x284>)
 8005b88:	7d9a      	ldrb	r2, [r3, #22]
 8005b8a:	4b82      	ldr	r3, [pc, #520]	; (8005d94 <eepromKontrol+0x2e0>)
 8005b8c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005b8e:	4b6a      	ldr	r3, [pc, #424]	; (8005d38 <eepromKontrol+0x284>)
 8005b90:	7dda      	ldrb	r2, [r3, #23]
 8005b92:	4b81      	ldr	r3, [pc, #516]	; (8005d98 <eepromKontrol+0x2e4>)
 8005b94:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005b96:	4b68      	ldr	r3, [pc, #416]	; (8005d38 <eepromKontrol+0x284>)
 8005b98:	7e1a      	ldrb	r2, [r3, #24]
 8005b9a:	4b80      	ldr	r3, [pc, #512]	; (8005d9c <eepromKontrol+0x2e8>)
 8005b9c:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005b9e:	4b66      	ldr	r3, [pc, #408]	; (8005d38 <eepromKontrol+0x284>)
 8005ba0:	7e5a      	ldrb	r2, [r3, #25]
 8005ba2:	4b7f      	ldr	r3, [pc, #508]	; (8005da0 <eepromKontrol+0x2ec>)
 8005ba4:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005ba6:	4b64      	ldr	r3, [pc, #400]	; (8005d38 <eepromKontrol+0x284>)
 8005ba8:	7e9a      	ldrb	r2, [r3, #26]
 8005baa:	4b7e      	ldr	r3, [pc, #504]	; (8005da4 <eepromKontrol+0x2f0>)
 8005bac:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005bae:	4b62      	ldr	r3, [pc, #392]	; (8005d38 <eepromKontrol+0x284>)
 8005bb0:	7eda      	ldrb	r2, [r3, #27]
 8005bb2:	4b7d      	ldr	r3, [pc, #500]	; (8005da8 <eepromKontrol+0x2f4>)
 8005bb4:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005bb6:	4b60      	ldr	r3, [pc, #384]	; (8005d38 <eepromKontrol+0x284>)
 8005bb8:	7f1a      	ldrb	r2, [r3, #28]
 8005bba:	4b7c      	ldr	r3, [pc, #496]	; (8005dac <eepromKontrol+0x2f8>)
 8005bbc:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005bbe:	4b5e      	ldr	r3, [pc, #376]	; (8005d38 <eepromKontrol+0x284>)
 8005bc0:	7f5a      	ldrb	r2, [r3, #29]
 8005bc2:	4b7b      	ldr	r3, [pc, #492]	; (8005db0 <eepromKontrol+0x2fc>)
 8005bc4:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005bc6:	4b5c      	ldr	r3, [pc, #368]	; (8005d38 <eepromKontrol+0x284>)
 8005bc8:	7f9a      	ldrb	r2, [r3, #30]
 8005bca:	4b7a      	ldr	r3, [pc, #488]	; (8005db4 <eepromKontrol+0x300>)
 8005bcc:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005bce:	4b5a      	ldr	r3, [pc, #360]	; (8005d38 <eepromKontrol+0x284>)
 8005bd0:	7fda      	ldrb	r2, [r3, #31]
 8005bd2:	4b79      	ldr	r3, [pc, #484]	; (8005db8 <eepromKontrol+0x304>)
 8005bd4:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005bd6:	4b58      	ldr	r3, [pc, #352]	; (8005d38 <eepromKontrol+0x284>)
 8005bd8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005bdc:	4b77      	ldr	r3, [pc, #476]	; (8005dbc <eepromKontrol+0x308>)
 8005bde:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005be0:	4b55      	ldr	r3, [pc, #340]	; (8005d38 <eepromKontrol+0x284>)
 8005be2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005be6:	4b76      	ldr	r3, [pc, #472]	; (8005dc0 <eepromKontrol+0x30c>)
 8005be8:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005bea:	4b53      	ldr	r3, [pc, #332]	; (8005d38 <eepromKontrol+0x284>)
 8005bec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005bf0:	4b74      	ldr	r3, [pc, #464]	; (8005dc4 <eepromKontrol+0x310>)
 8005bf2:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005bf4:	4b50      	ldr	r3, [pc, #320]	; (8005d38 <eepromKontrol+0x284>)
 8005bf6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005bfa:	4b73      	ldr	r3, [pc, #460]	; (8005dc8 <eepromKontrol+0x314>)
 8005bfc:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005bfe:	4b4e      	ldr	r3, [pc, #312]	; (8005d38 <eepromKontrol+0x284>)
 8005c00:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005c04:	4b71      	ldr	r3, [pc, #452]	; (8005dcc <eepromKontrol+0x318>)
 8005c06:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005c08:	4b4b      	ldr	r3, [pc, #300]	; (8005d38 <eepromKontrol+0x284>)
 8005c0a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005c0e:	4b70      	ldr	r3, [pc, #448]	; (8005dd0 <eepromKontrol+0x31c>)
 8005c10:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005c12:	4b49      	ldr	r3, [pc, #292]	; (8005d38 <eepromKontrol+0x284>)
 8005c14:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005c18:	4b6e      	ldr	r3, [pc, #440]	; (8005dd4 <eepromKontrol+0x320>)
 8005c1a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005c1c:	4b46      	ldr	r3, [pc, #280]	; (8005d38 <eepromKontrol+0x284>)
 8005c1e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005c22:	4b6d      	ldr	r3, [pc, #436]	; (8005dd8 <eepromKontrol+0x324>)
 8005c24:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005c26:	4b44      	ldr	r3, [pc, #272]	; (8005d38 <eepromKontrol+0x284>)
 8005c28:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005c2c:	4b6b      	ldr	r3, [pc, #428]	; (8005ddc <eepromKontrol+0x328>)
 8005c2e:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005c30:	4b41      	ldr	r3, [pc, #260]	; (8005d38 <eepromKontrol+0x284>)
 8005c32:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005c36:	4b6a      	ldr	r3, [pc, #424]	; (8005de0 <eepromKontrol+0x32c>)
 8005c38:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005c3a:	4b3f      	ldr	r3, [pc, #252]	; (8005d38 <eepromKontrol+0x284>)
 8005c3c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005c40:	4b68      	ldr	r3, [pc, #416]	; (8005de4 <eepromKontrol+0x330>)
 8005c42:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005c44:	4b3c      	ldr	r3, [pc, #240]	; (8005d38 <eepromKontrol+0x284>)
 8005c46:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005c4a:	4b67      	ldr	r3, [pc, #412]	; (8005de8 <eepromKontrol+0x334>)
 8005c4c:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005c4e:	4b3a      	ldr	r3, [pc, #232]	; (8005d38 <eepromKontrol+0x284>)
 8005c50:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c54:	4b65      	ldr	r3, [pc, #404]	; (8005dec <eepromKontrol+0x338>)
 8005c56:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005c58:	4b37      	ldr	r3, [pc, #220]	; (8005d38 <eepromKontrol+0x284>)
 8005c5a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005c5e:	4b64      	ldr	r3, [pc, #400]	; (8005df0 <eepromKontrol+0x33c>)
 8005c60:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005c62:	4b35      	ldr	r3, [pc, #212]	; (8005d38 <eepromKontrol+0x284>)
 8005c64:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005c68:	4b62      	ldr	r3, [pc, #392]	; (8005df4 <eepromKontrol+0x340>)
 8005c6a:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005c6c:	4b32      	ldr	r3, [pc, #200]	; (8005d38 <eepromKontrol+0x284>)
 8005c6e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005c72:	4b61      	ldr	r3, [pc, #388]	; (8005df8 <eepromKontrol+0x344>)
 8005c74:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005c76:	4b52      	ldr	r3, [pc, #328]	; (8005dc0 <eepromKontrol+0x30c>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fff4 	bl	8004c68 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005c80:	4b4e      	ldr	r3, [pc, #312]	; (8005dbc <eepromKontrol+0x308>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b09      	cmp	r3, #9
 8005c86:	d902      	bls.n	8005c8e <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005c88:	4b4c      	ldr	r3, [pc, #304]	; (8005dbc <eepromKontrol+0x308>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005c8e:	4b4a      	ldr	r3, [pc, #296]	; (8005db8 <eepromKontrol+0x304>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	d902      	bls.n	8005c9c <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005c96:	4b48      	ldr	r3, [pc, #288]	; (8005db8 <eepromKontrol+0x304>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005c9c:	4b45      	ldr	r3, [pc, #276]	; (8005db4 <eepromKontrol+0x300>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b09      	cmp	r3, #9
 8005ca2:	d902      	bls.n	8005caa <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005ca4:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <eepromKontrol+0x300>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005caa:	4b41      	ldr	r3, [pc, #260]	; (8005db0 <eepromKontrol+0x2fc>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b09      	cmp	r3, #9
 8005cb0:	d902      	bls.n	8005cb8 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005cb2:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <eepromKontrol+0x2fc>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005cb8:	4b3c      	ldr	r3, [pc, #240]	; (8005dac <eepromKontrol+0x2f8>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	d902      	bls.n	8005cc6 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005cc0:	4b3a      	ldr	r3, [pc, #232]	; (8005dac <eepromKontrol+0x2f8>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005cc6:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <eepromKontrol+0x290>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d902      	bls.n	8005cd4 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005cce:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <eepromKontrol+0x290>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005cd4:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <eepromKontrol+0x294>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d902      	bls.n	8005ce2 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <eepromKontrol+0x294>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <eepromKontrol+0x298>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d902      	bls.n	8005cf0 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005cea:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <eepromKontrol+0x298>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005cf0:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <eepromKontrol+0x29c>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d902      	bls.n	8005cfe <eepromKontrol+0x24a>
	    altLimit=1;
 8005cf8:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <eepromKontrol+0x29c>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <eepromKontrol+0x2a0>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d902      	bls.n	8005d0c <eepromKontrol+0x258>
	    basincSalteri=1;
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <eepromKontrol+0x2a0>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005d0c:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <eepromKontrol+0x2a4>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d902      	bls.n	8005d1a <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <eepromKontrol+0x2a4>)
 8005d16:	2203      	movs	r2, #3
 8005d18:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005d1a:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <eepromKontrol+0x31c>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d902      	bls.n	8005d28 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005d22:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <eepromKontrol+0x31c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005d28:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <eepromKontrol+0x2a8>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d965      	bls.n	8005dfc <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <eepromKontrol+0x2a8>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e061      	b.n	8005dfc <eepromKontrol+0x348>
 8005d38:	20000c38 	.word	0x20000c38
 8005d3c:	20000b54 	.word	0x20000b54
 8005d40:	20000ca9 	.word	0x20000ca9
 8005d44:	20000d0d 	.word	0x20000d0d
 8005d48:	20000d10 	.word	0x20000d10
 8005d4c:	20000d11 	.word	0x20000d11
 8005d50:	20000d12 	.word	0x20000d12
 8005d54:	20000d13 	.word	0x20000d13
 8005d58:	20000d14 	.word	0x20000d14
 8005d5c:	20000d15 	.word	0x20000d15
 8005d60:	20000d25 	.word	0x20000d25
 8005d64:	20000d16 	.word	0x20000d16
 8005d68:	20000d26 	.word	0x20000d26
 8005d6c:	20000d17 	.word	0x20000d17
 8005d70:	20000d27 	.word	0x20000d27
 8005d74:	20000d1a 	.word	0x20000d1a
 8005d78:	20000d1b 	.word	0x20000d1b
 8005d7c:	20000d1c 	.word	0x20000d1c
 8005d80:	20000d1d 	.word	0x20000d1d
 8005d84:	20000d1e 	.word	0x20000d1e
 8005d88:	20000d1f 	.word	0x20000d1f
 8005d8c:	20000d20 	.word	0x20000d20
 8005d90:	20000d21 	.word	0x20000d21
 8005d94:	20000d22 	.word	0x20000d22
 8005d98:	20000d23 	.word	0x20000d23
 8005d9c:	20000d24 	.word	0x20000d24
 8005da0:	20000d28 	.word	0x20000d28
 8005da4:	20000d2a 	.word	0x20000d2a
 8005da8:	20000d08 	.word	0x20000d08
 8005dac:	20000d09 	.word	0x20000d09
 8005db0:	20000d0a 	.word	0x20000d0a
 8005db4:	200009b4 	.word	0x200009b4
 8005db8:	200009b5 	.word	0x200009b5
 8005dbc:	20000d0b 	.word	0x20000d0b
 8005dc0:	20000d2d 	.word	0x20000d2d
 8005dc4:	20000d2b 	.word	0x20000d2b
 8005dc8:	20000d19 	.word	0x20000d19
 8005dcc:	20000d2c 	.word	0x20000d2c
 8005dd0:	20000d18 	.word	0x20000d18
 8005dd4:	20000d2e 	.word	0x20000d2e
 8005dd8:	20000d2f 	.word	0x20000d2f
 8005ddc:	20000d30 	.word	0x20000d30
 8005de0:	20000d31 	.word	0x20000d31
 8005de4:	20000d32 	.word	0x20000d32
 8005de8:	20000d33 	.word	0x20000d33
 8005dec:	20000d34 	.word	0x20000d34
 8005df0:	20000d35 	.word	0x20000d35
 8005df4:	20000d36 	.word	0x20000d36
 8005df8:	20000d37 	.word	0x20000d37
	}

	if(kapi1AcSure>5) {
 8005dfc:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <eepromKontrol+0x498>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b05      	cmp	r3, #5
 8005e02:	d902      	bls.n	8005e0a <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005e04:	4b51      	ldr	r3, [pc, #324]	; (8005f4c <eepromKontrol+0x498>)
 8005e06:	2205      	movs	r2, #5
 8005e08:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005e0a:	4b51      	ldr	r3, [pc, #324]	; (8005f50 <eepromKontrol+0x49c>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d902      	bls.n	8005e18 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005e12:	4b4f      	ldr	r3, [pc, #316]	; (8005f50 <eepromKontrol+0x49c>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005e18:	4b4e      	ldr	r3, [pc, #312]	; (8005f54 <eepromKontrol+0x4a0>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d902      	bls.n	8005e26 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005e20:	4b4c      	ldr	r3, [pc, #304]	; (8005f54 <eepromKontrol+0x4a0>)
 8005e22:	2205      	movs	r2, #5
 8005e24:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005e26:	4b4c      	ldr	r3, [pc, #304]	; (8005f58 <eepromKontrol+0x4a4>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d902      	bls.n	8005e34 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005e2e:	4b4a      	ldr	r3, [pc, #296]	; (8005f58 <eepromKontrol+0x4a4>)
 8005e30:	2201      	movs	r2, #1
 8005e32:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005e34:	4b49      	ldr	r3, [pc, #292]	; (8005f5c <eepromKontrol+0x4a8>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d902      	bls.n	8005e42 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005e3c:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <eepromKontrol+0x4a8>)
 8005e3e:	2202      	movs	r2, #2
 8005e40:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005e42:	4b47      	ldr	r3, [pc, #284]	; (8005f60 <eepromKontrol+0x4ac>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b05      	cmp	r3, #5
 8005e48:	d902      	bls.n	8005e50 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005e4a:	4b45      	ldr	r3, [pc, #276]	; (8005f60 <eepromKontrol+0x4ac>)
 8005e4c:	2205      	movs	r2, #5
 8005e4e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005e50:	4b44      	ldr	r3, [pc, #272]	; (8005f64 <eepromKontrol+0x4b0>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d902      	bls.n	8005e5e <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005e58:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <eepromKontrol+0x4b0>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005e5e:	4b42      	ldr	r3, [pc, #264]	; (8005f68 <eepromKontrol+0x4b4>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d902      	bls.n	8005e6c <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005e66:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <eepromKontrol+0x4b4>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005e6c:	4b3f      	ldr	r3, [pc, #252]	; (8005f6c <eepromKontrol+0x4b8>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d902      	bls.n	8005e7a <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005e74:	4b3d      	ldr	r3, [pc, #244]	; (8005f6c <eepromKontrol+0x4b8>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005e7a:	4b3d      	ldr	r3, [pc, #244]	; (8005f70 <eepromKontrol+0x4bc>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d902      	bls.n	8005e88 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005e82:	4b3b      	ldr	r3, [pc, #236]	; (8005f70 <eepromKontrol+0x4bc>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005e88:	4b3a      	ldr	r3, [pc, #232]	; (8005f74 <eepromKontrol+0x4c0>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d902      	bls.n	8005e96 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005e90:	4b38      	ldr	r3, [pc, #224]	; (8005f74 <eepromKontrol+0x4c0>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005e96:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <eepromKontrol+0x4c4>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d902      	bls.n	8005ea4 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005e9e:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <eepromKontrol+0x4c4>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005ea4:	4b35      	ldr	r3, [pc, #212]	; (8005f7c <eepromKontrol+0x4c8>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d902      	bls.n	8005eb2 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005eac:	4b33      	ldr	r3, [pc, #204]	; (8005f7c <eepromKontrol+0x4c8>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005eb2:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <eepromKontrol+0x4cc>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d902      	bls.n	8005ec0 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005eba:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <eepromKontrol+0x4cc>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005ec0:	4b30      	ldr	r3, [pc, #192]	; (8005f84 <eepromKontrol+0x4d0>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d902      	bls.n	8005ece <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005ec8:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <eepromKontrol+0x4d0>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005ece:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <eepromKontrol+0x4d4>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	d902      	bls.n	8005edc <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <eepromKontrol+0x4d4>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005edc:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <eepromKontrol+0x4d8>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2bb4      	cmp	r3, #180	; 0xb4
 8005ee2:	d902      	bls.n	8005eea <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005ee4:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <eepromKontrol+0x4d8>)
 8005ee6:	223c      	movs	r2, #60	; 0x3c
 8005ee8:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <eepromKontrol+0x4dc>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d902      	bls.n	8005ef8 <eepromKontrol+0x444>
	    buzzer=0;
 8005ef2:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <eepromKontrol+0x4dc>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005ef8:	4b26      	ldr	r3, [pc, #152]	; (8005f94 <eepromKontrol+0x4e0>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d902      	bls.n	8005f06 <eepromKontrol+0x452>
	    demoMode=0;
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <eepromKontrol+0x4e0>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005f06:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <eepromKontrol+0x4e4>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d902      	bls.n	8005f14 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005f0e:	4b22      	ldr	r3, [pc, #136]	; (8005f98 <eepromKontrol+0x4e4>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005f14:	4b21      	ldr	r3, [pc, #132]	; (8005f9c <eepromKontrol+0x4e8>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d902      	bls.n	8005f22 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005f1c:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <eepromKontrol+0x4e8>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005f22:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <eepromKontrol+0x4ec>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d902      	bls.n	8005f30 <eepromKontrol+0x47c>
		iotMode=0;
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <eepromKontrol+0x4ec>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode == 1 && type == 1) {
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <eepromKontrol+0x4ec>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d104      	bne.n	8005f42 <eepromKontrol+0x48e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <eepromKontrol+0x48e>
		convertAndSendData();
 8005f3e:	f7ff fd85 	bl	8005a4c <convertAndSendData>
	}
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000d25 	.word	0x20000d25
 8005f50:	20000d16 	.word	0x20000d16
 8005f54:	20000d26 	.word	0x20000d26
 8005f58:	20000d17 	.word	0x20000d17
 8005f5c:	20000d19 	.word	0x20000d19
 8005f60:	20000d27 	.word	0x20000d27
 8005f64:	20000d1a 	.word	0x20000d1a
 8005f68:	20000d1b 	.word	0x20000d1b
 8005f6c:	20000d1c 	.word	0x20000d1c
 8005f70:	20000d1d 	.word	0x20000d1d
 8005f74:	20000d1e 	.word	0x20000d1e
 8005f78:	20000d1f 	.word	0x20000d1f
 8005f7c:	20000d20 	.word	0x20000d20
 8005f80:	20000d21 	.word	0x20000d21
 8005f84:	20000d22 	.word	0x20000d22
 8005f88:	20000d23 	.word	0x20000d23
 8005f8c:	20000d24 	.word	0x20000d24
 8005f90:	20000d28 	.word	0x20000d28
 8005f94:	20000d2a 	.word	0x20000d2a
 8005f98:	20000d2c 	.word	0x20000d2c
 8005f9c:	20000d2d 	.word	0x20000d2d
 8005fa0:	20000d2b 	.word	0x20000d2b

08005fa4 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b089      	sub	sp, #36	; 0x24
 8005fa8:	af04      	add	r7, sp, #16
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005fae:	4b26      	ldr	r3, [pc, #152]	; (8006048 <hata2EEPROM+0xa4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	1e5a      	subs	r2, r3, #1
 8005fb4:	4b25      	ldr	r3, [pc, #148]	; (800604c <hata2EEPROM+0xa8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4413      	add	r3, r2
 8005fba:	4a25      	ldr	r2, [pc, #148]	; (8006050 <hata2EEPROM+0xac>)
 8005fbc:	5cd3      	ldrb	r3, [r2, r3]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005fc2:	f000 f849 	bl	8006058 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005fc6:	e000      	b.n	8005fca <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005fc8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e012      	b.n	8005ff6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005fd0:	4b1e      	ldr	r3, [pc, #120]	; (800604c <hata2EEPROM+0xa8>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	; (8006050 <hata2EEPROM+0xac>)
 8005fda:	5cd3      	ldrb	r3, [r2, r3]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d107      	bne.n	8005ff0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <hata2EEPROM+0xa8>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	4919      	ldr	r1, [pc, #100]	; (8006050 <hata2EEPROM+0xac>)
 8005fea:	79fa      	ldrb	r2, [r7, #7]
 8005fec:	54ca      	strb	r2, [r1, r3]
					break;
 8005fee:	e007      	b.n	8006000 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <hata2EEPROM+0xa4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	dbe7      	blt.n	8005fd0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <hata2EEPROM+0xa8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	b299      	uxth	r1, r3
 8006006:	4b10      	ldr	r3, [pc, #64]	; (8006048 <hata2EEPROM+0xa4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	b298      	uxth	r0, r3
 800600c:	4b0f      	ldr	r3, [pc, #60]	; (800604c <hata2EEPROM+0xa8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0f      	ldr	r2, [pc, #60]	; (8006050 <hata2EEPROM+0xac>)
 8006012:	4413      	add	r3, r2
 8006014:	4a0c      	ldr	r2, [pc, #48]	; (8006048 <hata2EEPROM+0xa4>)
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	b292      	uxth	r2, r2
 800601a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800601e:	9402      	str	r4, [sp, #8]
 8006020:	9201      	str	r2, [sp, #4]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4603      	mov	r3, r0
 8006026:	460a      	mov	r2, r1
 8006028:	21a0      	movs	r1, #160	; 0xa0
 800602a:	480a      	ldr	r0, [pc, #40]	; (8006054 <hata2EEPROM+0xb0>)
 800602c:	f004 f8cc 	bl	800a1c8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8006030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006034:	f003 f83e 	bl	80090b4 <HAL_Delay>
	eepromKontrol(1);
 8006038:	2001      	movs	r0, #1
 800603a:	f7ff fd3b 	bl	8005ab4 <eepromKontrol>
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	bd90      	pop	{r4, r7, pc}
 8006046:	bf00      	nop
 8006048:	20000938 	.word	0x20000938
 800604c:	2000093c 	.word	0x2000093c
 8006050:	20000c38 	.word	0x20000c38
 8006054:	20000b54 	.word	0x20000b54

08006058 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
 8006062:	e009      	b.n	8006078 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006064:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <eepromDataFillWithEmpty+0x38>)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606c:	4a09      	ldr	r2, [pc, #36]	; (8006094 <eepromDataFillWithEmpty+0x3c>)
 800606e:	2100      	movs	r1, #0
 8006070:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3301      	adds	r3, #1
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <eepromDataFillWithEmpty+0x40>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	429a      	cmp	r2, r3
 8006080:	dbf0      	blt.n	8006064 <eepromDataFillWithEmpty+0xc>
	}
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000910 	.word	0x20000910
 8006094:	20000c38 	.word	0x20000c38
 8006098:	20000938 	.word	0x20000938

0800609c <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
	timer1=millis;
 80060a0:	4b47      	ldr	r3, [pc, #284]	; (80061c0 <bekle+0x124>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a47      	ldr	r2, [pc, #284]	; (80061c4 <bekle+0x128>)
 80060a6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060a8:	e002      	b.n	80060b0 <bekle+0x14>
    	butonKontrol = 1;
 80060aa:	4b47      	ldr	r3, [pc, #284]	; (80061c8 <bekle+0x12c>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060b0:	2101      	movs	r1, #1
 80060b2:	4846      	ldr	r0, [pc, #280]	; (80061cc <bekle+0x130>)
 80060b4:	f003 fdce 	bl	8009c54 <HAL_GPIO_ReadPin>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d109      	bne.n	80060d2 <bekle+0x36>
 80060be:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <bekle+0x124>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b40      	ldr	r3, [pc, #256]	; (80061c4 <bekle+0x128>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d0ef      	beq.n	80060aa <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060ca:	e002      	b.n	80060d2 <bekle+0x36>
    	butonKontrol = 1;
 80060cc:	4b3e      	ldr	r3, [pc, #248]	; (80061c8 <bekle+0x12c>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060d2:	2108      	movs	r1, #8
 80060d4:	483e      	ldr	r0, [pc, #248]	; (80061d0 <bekle+0x134>)
 80060d6:	f003 fdbd 	bl	8009c54 <HAL_GPIO_ReadPin>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d109      	bne.n	80060f4 <bekle+0x58>
 80060e0:	4b37      	ldr	r3, [pc, #220]	; (80061c0 <bekle+0x124>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <bekle+0x128>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d0ef      	beq.n	80060cc <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060ec:	e002      	b.n	80060f4 <bekle+0x58>
    	butonKontrol = 1;
 80060ee:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <bekle+0x12c>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060f4:	2102      	movs	r1, #2
 80060f6:	4835      	ldr	r0, [pc, #212]	; (80061cc <bekle+0x130>)
 80060f8:	f003 fdac 	bl	8009c54 <HAL_GPIO_ReadPin>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d109      	bne.n	8006116 <bekle+0x7a>
 8006102:	4b2f      	ldr	r3, [pc, #188]	; (80061c0 <bekle+0x124>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b2f      	ldr	r3, [pc, #188]	; (80061c4 <bekle+0x128>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d0ef      	beq.n	80060ee <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800610e:	e002      	b.n	8006116 <bekle+0x7a>
    	butonKontrol = 1;
 8006110:	4b2d      	ldr	r3, [pc, #180]	; (80061c8 <bekle+0x12c>)
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006116:	2104      	movs	r1, #4
 8006118:	482c      	ldr	r0, [pc, #176]	; (80061cc <bekle+0x130>)
 800611a:	f003 fd9b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800611e:	4603      	mov	r3, r0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d109      	bne.n	8006138 <bekle+0x9c>
 8006124:	4b26      	ldr	r3, [pc, #152]	; (80061c0 <bekle+0x124>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <bekle+0x128>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d0ef      	beq.n	8006110 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006130:	e002      	b.n	8006138 <bekle+0x9c>
    	butonKontrol = 1;
 8006132:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <bekle+0x12c>)
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006138:	2108      	movs	r1, #8
 800613a:	4824      	ldr	r0, [pc, #144]	; (80061cc <bekle+0x130>)
 800613c:	f003 fd8a 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b01      	cmp	r3, #1
 8006144:	d109      	bne.n	800615a <bekle+0xbe>
 8006146:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <bekle+0x124>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <bekle+0x128>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d0ef      	beq.n	8006132 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006152:	e002      	b.n	800615a <bekle+0xbe>
    	butonKontrol = 1;
 8006154:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <bekle+0x12c>)
 8006156:	2201      	movs	r2, #1
 8006158:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800615a:	2180      	movs	r1, #128	; 0x80
 800615c:	481c      	ldr	r0, [pc, #112]	; (80061d0 <bekle+0x134>)
 800615e:	f003 fd79 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <bekle+0xe0>
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <bekle+0x124>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b15      	ldr	r3, [pc, #84]	; (80061c4 <bekle+0x128>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d0ef      	beq.n	8006154 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006174:	e002      	b.n	800617c <bekle+0xe0>
    	butonKontrol = 1;
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <bekle+0x12c>)
 8006178:	2201      	movs	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800617c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006180:	4813      	ldr	r0, [pc, #76]	; (80061d0 <bekle+0x134>)
 8006182:	f003 fd67 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <bekle+0x104>
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <bekle+0x124>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <bekle+0x128>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d0ee      	beq.n	8006176 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006198:	e002      	b.n	80061a0 <bekle+0x104>
    	butonKontrol = 1;
 800619a:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <bekle+0x12c>)
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061a4:	480a      	ldr	r0, [pc, #40]	; (80061d0 <bekle+0x134>)
 80061a6:	f003 fd55 	bl	8009c54 <HAL_GPIO_ReadPin>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <bekle+0x120>
 80061b0:	4b03      	ldr	r3, [pc, #12]	; (80061c0 <bekle+0x124>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <bekle+0x128>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d0ee      	beq.n	800619a <bekle+0xfe>
    }

}
 80061bc:	bf00      	nop
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000cb4 	.word	0x20000cb4
 80061c4:	20000cbc 	.word	0x20000cbc
 80061c8:	20000d3b 	.word	0x20000d3b
 80061cc:	40010800 	.word	0x40010800
 80061d0:	40011000 	.word	0x40011000

080061d4 <i2cTest>:

void i2cTest() {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80061da:	463b      	mov	r3, r7
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80061e6:	4b50      	ldr	r3, [pc, #320]	; (8006328 <i2cTest+0x154>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b4e      	ldr	r3, [pc, #312]	; (8006328 <i2cTest+0x154>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80061f6:	484c      	ldr	r0, [pc, #304]	; (8006328 <i2cTest+0x154>)
 80061f8:	f003 feb8 	bl	8009f6c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061fc:	23c0      	movs	r3, #192	; 0xc0
 80061fe:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8006200:	2311      	movs	r3, #17
 8006202:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006204:	2301      	movs	r3, #1
 8006206:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006208:	2303      	movs	r3, #3
 800620a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800620c:	463b      	mov	r3, r7
 800620e:	4619      	mov	r1, r3
 8006210:	4846      	ldr	r0, [pc, #280]	; (800632c <i2cTest+0x158>)
 8006212:	f003 fabf 	bl	8009794 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006216:	2201      	movs	r2, #1
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	4844      	ldr	r0, [pc, #272]	; (800632c <i2cTest+0x158>)
 800621c:	f003 fd31 	bl	8009c82 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006220:	2201      	movs	r2, #1
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	4841      	ldr	r0, [pc, #260]	; (800632c <i2cTest+0x158>)
 8006226:	f003 fd2c 	bl	8009c82 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800622a:	200a      	movs	r0, #10
 800622c:	f002 ff42 	bl	80090b4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006230:	bf00      	nop
 8006232:	2140      	movs	r1, #64	; 0x40
 8006234:	483d      	ldr	r0, [pc, #244]	; (800632c <i2cTest+0x158>)
 8006236:	f003 fd0d 	bl	8009c54 <HAL_GPIO_ReadPin>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d006      	beq.n	800624e <i2cTest+0x7a>
 8006240:	2180      	movs	r1, #128	; 0x80
 8006242:	483a      	ldr	r0, [pc, #232]	; (800632c <i2cTest+0x158>)
 8006244:	f003 fd06 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006248:	4603      	mov	r3, r0
 800624a:	2b01      	cmp	r3, #1
 800624c:	d1f1      	bne.n	8006232 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800624e:	2200      	movs	r2, #0
 8006250:	2180      	movs	r1, #128	; 0x80
 8006252:	4836      	ldr	r0, [pc, #216]	; (800632c <i2cTest+0x158>)
 8006254:	f003 fd15 	bl	8009c82 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006258:	200a      	movs	r0, #10
 800625a:	f002 ff2b 	bl	80090b4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800625e:	bf00      	nop
 8006260:	2180      	movs	r1, #128	; 0x80
 8006262:	4832      	ldr	r0, [pc, #200]	; (800632c <i2cTest+0x158>)
 8006264:	f003 fcf6 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006268:	4603      	mov	r3, r0
 800626a:	2b01      	cmp	r3, #1
 800626c:	d0f8      	beq.n	8006260 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800626e:	2200      	movs	r2, #0
 8006270:	2140      	movs	r1, #64	; 0x40
 8006272:	482e      	ldr	r0, [pc, #184]	; (800632c <i2cTest+0x158>)
 8006274:	f003 fd05 	bl	8009c82 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006278:	200a      	movs	r0, #10
 800627a:	f002 ff1b 	bl	80090b4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800627e:	bf00      	nop
 8006280:	2140      	movs	r1, #64	; 0x40
 8006282:	482a      	ldr	r0, [pc, #168]	; (800632c <i2cTest+0x158>)
 8006284:	f003 fce6 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006288:	4603      	mov	r3, r0
 800628a:	2b01      	cmp	r3, #1
 800628c:	d0f8      	beq.n	8006280 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800628e:	2201      	movs	r2, #1
 8006290:	2140      	movs	r1, #64	; 0x40
 8006292:	4826      	ldr	r0, [pc, #152]	; (800632c <i2cTest+0x158>)
 8006294:	f003 fcf5 	bl	8009c82 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006298:	200a      	movs	r0, #10
 800629a:	f002 ff0b 	bl	80090b4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800629e:	bf00      	nop
 80062a0:	2140      	movs	r1, #64	; 0x40
 80062a2:	4822      	ldr	r0, [pc, #136]	; (800632c <i2cTest+0x158>)
 80062a4:	f003 fcd6 	bl	8009c54 <HAL_GPIO_ReadPin>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d1f8      	bne.n	80062a0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80062ae:	2201      	movs	r2, #1
 80062b0:	2180      	movs	r1, #128	; 0x80
 80062b2:	481e      	ldr	r0, [pc, #120]	; (800632c <i2cTest+0x158>)
 80062b4:	f003 fce5 	bl	8009c82 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80062b8:	200a      	movs	r0, #10
 80062ba:	f002 fefb 	bl	80090b4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80062be:	bf00      	nop
 80062c0:	2180      	movs	r1, #128	; 0x80
 80062c2:	481a      	ldr	r0, [pc, #104]	; (800632c <i2cTest+0x158>)
 80062c4:	f003 fcc6 	bl	8009c54 <HAL_GPIO_ReadPin>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d1f8      	bne.n	80062c0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062ce:	23c0      	movs	r3, #192	; 0xc0
 80062d0:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80062d2:	2312      	movs	r3, #18
 80062d4:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80062d6:	2301      	movs	r3, #1
 80062d8:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80062da:	2303      	movs	r3, #3
 80062dc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80062de:	463b      	mov	r3, r7
 80062e0:	4619      	mov	r1, r3
 80062e2:	4812      	ldr	r0, [pc, #72]	; (800632c <i2cTest+0x158>)
 80062e4:	f003 fa56 	bl	8009794 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80062e8:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <i2cTest+0x154>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b0e      	ldr	r3, [pc, #56]	; (8006328 <i2cTest+0x154>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062f6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80062f8:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <i2cTest+0x154>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <i2cTest+0x154>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006306:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <i2cTest+0x154>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b06      	ldr	r3, [pc, #24]	; (8006328 <i2cTest+0x154>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006318:	4803      	ldr	r0, [pc, #12]	; (8006328 <i2cTest+0x154>)
 800631a:	f003 fce3 	bl	8009ce4 <HAL_I2C_Init>
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000b54 	.word	0x20000b54
 800632c:	40010c00 	.word	0x40010c00

08006330 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006334:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <checkLCDBacklight+0x34>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <checkLCDBacklight+0x38>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	1ad2      	subs	r2, r2, r3
 800633e:	4b0b      	ldr	r3, [pc, #44]	; (800636c <checkLCDBacklight+0x3c>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	460b      	mov	r3, r1
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	429a      	cmp	r2, r3
 800634e:	d303      	bcc.n	8006358 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006350:	2000      	movs	r0, #0
 8006352:	f7fa f9d5 	bl	8000700 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006356:	e002      	b.n	800635e <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006358:	2001      	movs	r0, #1
 800635a:	f7fa f9d1 	bl	8000700 <lcd_backlight>
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000cb4 	.word	0x20000cb4
 8006368:	20000cd0 	.word	0x20000cd0
 800636c:	20000940 	.word	0x20000940

08006370 <checkBasincSalteri>:

void checkBasincSalteri() {
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006374:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <checkBasincSalteri+0x54>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d102      	bne.n	8006382 <checkBasincSalteri+0x12>
		basincVar=1;
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <checkBasincSalteri+0x58>)
 800637e:	2201      	movs	r2, #1
 8006380:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <checkBasincSalteri+0x54>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d119      	bne.n	80063be <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800638a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800638e:	480f      	ldr	r0, [pc, #60]	; (80063cc <checkBasincSalteri+0x5c>)
 8006390:	f003 fc60 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800639a:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <checkBasincSalteri+0x60>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <checkBasincSalteri+0x64>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d90a      	bls.n	80063be <checkBasincSalteri+0x4e>
				basincVar=1;
 80063a8:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <checkBasincSalteri+0x58>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80063ae:	e006      	b.n	80063be <checkBasincSalteri+0x4e>
			timer5=millis;
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <checkBasincSalteri+0x60>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a07      	ldr	r2, [pc, #28]	; (80063d4 <checkBasincSalteri+0x64>)
 80063b6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <checkBasincSalteri+0x58>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
}
 80063be:	bf00      	nop
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000d13 	.word	0x20000d13
 80063c8:	20000d0f 	.word	0x20000d0f
 80063cc:	40011000 	.word	0x40011000
 80063d0:	20000cb4 	.word	0x20000cb4
 80063d4:	20000ccc 	.word	0x20000ccc

080063d8 <checkBasGonder>:

void checkBasGonder() {
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80063dc:	4b1b      	ldr	r3, [pc, #108]	; (800644c <checkBasGonder+0x74>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d10b      	bne.n	80063fc <checkBasGonder+0x24>
 80063e4:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <checkBasGonder+0x78>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <checkBasGonder+0x24>
 80063ec:	4b19      	ldr	r3, [pc, #100]	; (8006454 <checkBasGonder+0x7c>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d103      	bne.n	80063fc <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80063f4:	4b18      	ldr	r3, [pc, #96]	; (8006458 <checkBasGonder+0x80>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	701a      	strb	r2, [r3, #0]
 80063fa:	e009      	b.n	8006410 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <checkBasGonder+0x78>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f083 0301 	eor.w	r3, r3, #1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800640a:	4b13      	ldr	r3, [pc, #76]	; (8006458 <checkBasGonder+0x80>)
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006410:	4b0e      	ldr	r3, [pc, #56]	; (800644c <checkBasGonder+0x74>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d10b      	bne.n	8006430 <checkBasGonder+0x58>
 8006418:	4b10      	ldr	r3, [pc, #64]	; (800645c <checkBasGonder+0x84>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <checkBasGonder+0x58>
 8006420:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <checkBasGonder+0x7c>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006428:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <checkBasGonder+0x88>)
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800642e:	e009      	b.n	8006444 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <checkBasGonder+0x84>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f083 0301 	eor.w	r3, r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <checkBasGonder+0x88>)
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	20000d0d 	.word	0x20000d0d
 8006450:	20000d41 	.word	0x20000d41
 8006454:	20000d1b 	.word	0x20000d1b
 8006458:	20000d48 	.word	0x20000d48
 800645c:	20000d44 	.word	0x20000d44
 8006460:	20000d49 	.word	0x20000d49

08006464 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006468:	4b24      	ldr	r3, [pc, #144]	; (80064fc <checkKapiSecimleri+0x98>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006470:	4b23      	ldr	r3, [pc, #140]	; (8006500 <checkKapiSecimleri+0x9c>)
 8006472:	2201      	movs	r2, #1
 8006474:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8006476:	4b21      	ldr	r3, [pc, #132]	; (80064fc <checkKapiSecimleri+0x98>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10e      	bne.n	800649c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800647e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006482:	4820      	ldr	r0, [pc, #128]	; (8006504 <checkKapiSecimleri+0xa0>)
 8006484:	f003 fbe6 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800648e:	4b1c      	ldr	r3, [pc, #112]	; (8006500 <checkKapiSecimleri+0x9c>)
 8006490:	2201      	movs	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e002      	b.n	800649c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <checkKapiSecimleri+0x9c>)
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 800649c:	4b17      	ldr	r3, [pc, #92]	; (80064fc <checkKapiSecimleri+0x98>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d10e      	bne.n	80064c2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80064a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064a8:	4816      	ldr	r0, [pc, #88]	; (8006504 <checkKapiSecimleri+0xa0>)
 80064aa:	f003 fbd3 	bl	8009c54 <HAL_GPIO_ReadPin>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80064b4:	4b12      	ldr	r3, [pc, #72]	; (8006500 <checkKapiSecimleri+0x9c>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <checkKapiSecimleri+0x9c>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <checkKapiSecimleri+0x98>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d116      	bne.n	80064f8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80064ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064ce:	480d      	ldr	r0, [pc, #52]	; (8006504 <checkKapiSecimleri+0xa0>)
 80064d0:	f003 fbc0 	bl	8009c54 <HAL_GPIO_ReadPin>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <checkKapiSecimleri+0x8e>
 80064da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064de:	4809      	ldr	r0, [pc, #36]	; (8006504 <checkKapiSecimleri+0xa0>)
 80064e0:	f003 fbb8 	bl	8009c54 <HAL_GPIO_ReadPin>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d103      	bne.n	80064f2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <checkKapiSecimleri+0x9c>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80064f0:	e002      	b.n	80064f8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80064f2:	4b03      	ldr	r3, [pc, #12]	; (8006500 <checkKapiSecimleri+0x9c>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
}
 80064f8:	bf00      	nop
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000d14 	.word	0x20000d14
 8006500:	20000d5f 	.word	0x20000d5f
 8006504:	40010800 	.word	0x40010800

08006508 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800650c:	4b62      	ldr	r3, [pc, #392]	; (8006698 <checkAktifCalisma+0x190>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f041 8332 	bne.w	8007b7a <checkAktifCalisma+0x1672>
 8006516:	4b61      	ldr	r3, [pc, #388]	; (800669c <checkAktifCalisma+0x194>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f041 832d 	bne.w	8007b7a <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006520:	4b5f      	ldr	r3, [pc, #380]	; (80066a0 <checkAktifCalisma+0x198>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11a      	bne.n	800655e <checkAktifCalisma+0x56>
 8006528:	4b5e      	ldr	r3, [pc, #376]	; (80066a4 <checkAktifCalisma+0x19c>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d116      	bne.n	800655e <checkAktifCalisma+0x56>
 8006530:	4b5d      	ldr	r3, [pc, #372]	; (80066a8 <checkAktifCalisma+0x1a0>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <checkAktifCalisma+0x46>
 8006538:	4b5c      	ldr	r3, [pc, #368]	; (80066ac <checkAktifCalisma+0x1a4>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f083 0301 	eor.w	r3, r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <checkAktifCalisma+0x46>
 8006546:	4b5a      	ldr	r3, [pc, #360]	; (80066b0 <checkAktifCalisma+0x1a8>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d007      	beq.n	800655e <checkAktifCalisma+0x56>
 800654e:	4b59      	ldr	r3, [pc, #356]	; (80066b4 <checkAktifCalisma+0x1ac>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d018      	beq.n	8006588 <checkAktifCalisma+0x80>
 8006556:	4b58      	ldr	r3, [pc, #352]	; (80066b8 <checkAktifCalisma+0x1b0>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d114      	bne.n	8006588 <checkAktifCalisma+0x80>
 800655e:	4b57      	ldr	r3, [pc, #348]	; (80066bc <checkAktifCalisma+0x1b4>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d010      	beq.n	8006588 <checkAktifCalisma+0x80>
 8006566:	4b56      	ldr	r3, [pc, #344]	; (80066c0 <checkAktifCalisma+0x1b8>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800656e:	2201      	movs	r2, #1
 8006570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006574:	4853      	ldr	r0, [pc, #332]	; (80066c4 <checkAktifCalisma+0x1bc>)
 8006576:	f003 fb84 	bl	8009c82 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800657a:	4b53      	ldr	r3, [pc, #332]	; (80066c8 <checkAktifCalisma+0x1c0>)
 800657c:	2201      	movs	r2, #1
 800657e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006580:	4b52      	ldr	r3, [pc, #328]	; (80066cc <checkAktifCalisma+0x1c4>)
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	e008      	b.n	800659a <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006588:	2200      	movs	r2, #0
 800658a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800658e:	484d      	ldr	r0, [pc, #308]	; (80066c4 <checkAktifCalisma+0x1bc>)
 8006590:	f003 fb77 	bl	8009c82 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006594:	4b4c      	ldr	r3, [pc, #304]	; (80066c8 <checkAktifCalisma+0x1c0>)
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 800659a:	4b40      	ldr	r3, [pc, #256]	; (800669c <checkAktifCalisma+0x194>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d160      	bne.n	8006664 <checkAktifCalisma+0x15c>
 80065a2:	4b46      	ldr	r3, [pc, #280]	; (80066bc <checkAktifCalisma+0x1b4>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d05c      	beq.n	8006664 <checkAktifCalisma+0x15c>
 80065aa:	4b45      	ldr	r3, [pc, #276]	; (80066c0 <checkAktifCalisma+0x1b8>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d058      	beq.n	8006664 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80065b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065b6:	4843      	ldr	r0, [pc, #268]	; (80066c4 <checkAktifCalisma+0x1bc>)
 80065b8:	f003 fb4c 	bl	8009c54 <HAL_GPIO_ReadPin>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <checkAktifCalisma+0xc2>
 80065c2:	4b43      	ldr	r3, [pc, #268]	; (80066d0 <checkAktifCalisma+0x1c8>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d04c      	beq.n	8006664 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80065ca:	2102      	movs	r1, #2
 80065cc:	4841      	ldr	r0, [pc, #260]	; (80066d4 <checkAktifCalisma+0x1cc>)
 80065ce:	f003 fb41 	bl	8009c54 <HAL_GPIO_ReadPin>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d145      	bne.n	8006664 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80065d8:	4b3f      	ldr	r3, [pc, #252]	; (80066d8 <checkAktifCalisma+0x1d0>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d041      	beq.n	8006664 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80065e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065e4:	4837      	ldr	r0, [pc, #220]	; (80066c4 <checkAktifCalisma+0x1bc>)
 80065e6:	f003 fb35 	bl	8009c54 <HAL_GPIO_ReadPin>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10e      	bne.n	800660e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80065f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065f4:	4833      	ldr	r0, [pc, #204]	; (80066c4 <checkAktifCalisma+0x1bc>)
 80065f6:	f003 fb2d 	bl	8009c54 <HAL_GPIO_ReadPin>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d106      	bne.n	800660e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006600:	2140      	movs	r1, #64	; 0x40
 8006602:	4834      	ldr	r0, [pc, #208]	; (80066d4 <checkAktifCalisma+0x1cc>)
 8006604:	f003 fb26 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006608:	4603      	mov	r3, r0
 800660a:	2b01      	cmp	r3, #1
 800660c:	d003      	beq.n	8006616 <checkAktifCalisma+0x10e>
 800660e:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <checkAktifCalisma+0x198>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d026      	beq.n	8006664 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006616:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <checkAktifCalisma+0x1a0>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	f083 0301 	eor.w	r3, r3, #1
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01f      	beq.n	8006664 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006624:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <checkAktifCalisma+0x19c>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	f083 0301 	eor.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d018      	beq.n	8006664 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006632:	4b20      	ldr	r3, [pc, #128]	; (80066b4 <checkAktifCalisma+0x1ac>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f083 0301 	eor.w	r3, r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d011      	beq.n	8006664 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006640:	4b26      	ldr	r3, [pc, #152]	; (80066dc <checkAktifCalisma+0x1d4>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f083 0301 	eor.w	r3, r3, #1
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800664e:	4b24      	ldr	r3, [pc, #144]	; (80066e0 <checkAktifCalisma+0x1d8>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	f083 0301 	eor.w	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <checkAktifCalisma+0x198>)
 800665e:	2201      	movs	r2, #1
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	e002      	b.n	800666a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006664:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <checkAktifCalisma+0x198>)
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800666a:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <checkAktifCalisma+0x198>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d03a      	beq.n	80066e8 <checkAktifCalisma+0x1e0>
 8006672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006676:	4817      	ldr	r0, [pc, #92]	; (80066d4 <checkAktifCalisma+0x1cc>)
 8006678:	f003 faec 	bl	8009c54 <HAL_GPIO_ReadPin>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d132      	bne.n	80066e8 <checkAktifCalisma+0x1e0>
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <checkAktifCalisma+0x1dc>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02e      	beq.n	80066e8 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800668a:	2201      	movs	r2, #1
 800668c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006690:	480c      	ldr	r0, [pc, #48]	; (80066c4 <checkAktifCalisma+0x1bc>)
 8006692:	f003 faf6 	bl	8009c82 <HAL_GPIO_WritePin>
 8006696:	e02d      	b.n	80066f4 <checkAktifCalisma+0x1ec>
 8006698:	20000d2a 	.word	0x20000d2a
 800669c:	20000d29 	.word	0x20000d29
 80066a0:	20000d41 	.word	0x20000d41
 80066a4:	20000d42 	.word	0x20000d42
 80066a8:	20000d44 	.word	0x20000d44
 80066ac:	20000d3c 	.word	0x20000d3c
 80066b0:	20000d1f 	.word	0x20000d1f
 80066b4:	20000d43 	.word	0x20000d43
 80066b8:	20000d1e 	.word	0x20000d1e
 80066bc:	20000d5e 	.word	0x20000d5e
 80066c0:	20000d5f 	.word	0x20000d5f
 80066c4:	40010c00 	.word	0x40010c00
 80066c8:	20000d60 	.word	0x20000d60
 80066cc:	20000d4b 	.word	0x20000d4b
 80066d0:	20000d48 	.word	0x20000d48
 80066d4:	40011000 	.word	0x40011000
 80066d8:	20000d0f 	.word	0x20000d0f
 80066dc:	20000d46 	.word	0x20000d46
 80066e0:	20000d47 	.word	0x20000d47
 80066e4:	20000d1a 	.word	0x20000d1a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80066e8:	2200      	movs	r2, #0
 80066ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066ee:	4860      	ldr	r0, [pc, #384]	; (8006870 <checkAktifCalisma+0x368>)
 80066f0:	f003 fac7 	bl	8009c82 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80066f4:	4b5f      	ldr	r3, [pc, #380]	; (8006874 <checkAktifCalisma+0x36c>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d013      	beq.n	8006724 <checkAktifCalisma+0x21c>
 80066fc:	4b5e      	ldr	r3, [pc, #376]	; (8006878 <checkAktifCalisma+0x370>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d007      	beq.n	8006714 <checkAktifCalisma+0x20c>
 8006704:	4b5c      	ldr	r3, [pc, #368]	; (8006878 <checkAktifCalisma+0x370>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d003      	beq.n	8006714 <checkAktifCalisma+0x20c>
 800670c:	4b5b      	ldr	r3, [pc, #364]	; (800687c <checkAktifCalisma+0x374>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d107      	bne.n	8006724 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006714:	2201      	movs	r2, #1
 8006716:	2104      	movs	r1, #4
 8006718:	4855      	ldr	r0, [pc, #340]	; (8006870 <checkAktifCalisma+0x368>)
 800671a:	f003 fab2 	bl	8009c82 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800671e:	4b58      	ldr	r3, [pc, #352]	; (8006880 <checkAktifCalisma+0x378>)
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006724:	4b56      	ldr	r3, [pc, #344]	; (8006880 <checkAktifCalisma+0x378>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02f      	beq.n	800678c <checkAktifCalisma+0x284>
 800672c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006730:	484f      	ldr	r0, [pc, #316]	; (8006870 <checkAktifCalisma+0x368>)
 8006732:	f003 fa8f 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006736:	4603      	mov	r3, r0
 8006738:	2b01      	cmp	r3, #1
 800673a:	d106      	bne.n	800674a <checkAktifCalisma+0x242>
 800673c:	4b51      	ldr	r3, [pc, #324]	; (8006884 <checkAktifCalisma+0x37c>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	f083 0301 	eor.w	r3, r3, #1
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <checkAktifCalisma+0x250>
 800674a:	2102      	movs	r1, #2
 800674c:	484e      	ldr	r0, [pc, #312]	; (8006888 <checkAktifCalisma+0x380>)
 800674e:	f003 fa81 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006752:	4603      	mov	r3, r0
 8006754:	2b01      	cmp	r3, #1
 8006756:	d119      	bne.n	800678c <checkAktifCalisma+0x284>
 8006758:	4b4c      	ldr	r3, [pc, #304]	; (800688c <checkAktifCalisma+0x384>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d015      	beq.n	800678c <checkAktifCalisma+0x284>
 8006760:	4b4b      	ldr	r3, [pc, #300]	; (8006890 <checkAktifCalisma+0x388>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d011      	beq.n	800678c <checkAktifCalisma+0x284>
 8006768:	4b4a      	ldr	r3, [pc, #296]	; (8006894 <checkAktifCalisma+0x38c>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <checkAktifCalisma+0x284>
 8006770:	4b49      	ldr	r3, [pc, #292]	; (8006898 <checkAktifCalisma+0x390>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f083 0301 	eor.w	r3, r3, #1
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d006      	beq.n	800678c <checkAktifCalisma+0x284>
			timer2=millis;
 800677e:	4b47      	ldr	r3, [pc, #284]	; (800689c <checkAktifCalisma+0x394>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a47      	ldr	r2, [pc, #284]	; (80068a0 <checkAktifCalisma+0x398>)
 8006784:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006786:	4b44      	ldr	r3, [pc, #272]	; (8006898 <checkAktifCalisma+0x390>)
 8006788:	2201      	movs	r2, #1
 800678a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 800678c:	4b43      	ldr	r3, [pc, #268]	; (800689c <checkAktifCalisma+0x394>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4b43      	ldr	r3, [pc, #268]	; (80068a0 <checkAktifCalisma+0x398>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	4a43      	ldr	r2, [pc, #268]	; (80068a4 <checkAktifCalisma+0x39c>)
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	4293      	cmp	r3, r2
 800679c:	d303      	bcc.n	80067a6 <checkAktifCalisma+0x29e>
 800679e:	4b3e      	ldr	r3, [pc, #248]	; (8006898 <checkAktifCalisma+0x390>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d111      	bne.n	80067ca <checkAktifCalisma+0x2c2>
 80067a6:	4b39      	ldr	r3, [pc, #228]	; (800688c <checkAktifCalisma+0x384>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	f083 0301 	eor.w	r3, r3, #1
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <checkAktifCalisma+0x2c2>
 80067b4:	4b36      	ldr	r3, [pc, #216]	; (8006890 <checkAktifCalisma+0x388>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f083 0301 	eor.w	r3, r3, #1
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <checkAktifCalisma+0x2c2>
 80067c2:	4b34      	ldr	r3, [pc, #208]	; (8006894 <checkAktifCalisma+0x38c>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80067ca:	2200      	movs	r2, #0
 80067cc:	2104      	movs	r1, #4
 80067ce:	4828      	ldr	r0, [pc, #160]	; (8006870 <checkAktifCalisma+0x368>)
 80067d0:	f003 fa57 	bl	8009c82 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80067d4:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <checkAktifCalisma+0x378>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80067da:	4b2f      	ldr	r3, [pc, #188]	; (8006898 <checkAktifCalisma+0x390>)
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80067e0:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <checkAktifCalisma+0x3a0>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80067e8:	4b30      	ldr	r3, [pc, #192]	; (80068ac <checkAktifCalisma+0x3a4>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80067ee:	4b2e      	ldr	r3, [pc, #184]	; (80068a8 <checkAktifCalisma+0x3a0>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d116      	bne.n	8006824 <checkAktifCalisma+0x31c>
 80067f6:	4b2e      	ldr	r3, [pc, #184]	; (80068b0 <checkAktifCalisma+0x3a8>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d112      	bne.n	8006824 <checkAktifCalisma+0x31c>
 80067fe:	2101      	movs	r1, #1
 8006800:	4821      	ldr	r0, [pc, #132]	; (8006888 <checkAktifCalisma+0x380>)
 8006802:	f003 fa27 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <checkAktifCalisma+0x31c>
 800680c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006810:	4817      	ldr	r0, [pc, #92]	; (8006870 <checkAktifCalisma+0x368>)
 8006812:	f003 fa1f 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800681c:	4b23      	ldr	r3, [pc, #140]	; (80068ac <checkAktifCalisma+0x3a4>)
 800681e:	2201      	movs	r2, #1
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	e011      	b.n	8006848 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006824:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <checkAktifCalisma+0x3a0>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10d      	bne.n	8006848 <checkAktifCalisma+0x340>
 800682c:	2101      	movs	r1, #1
 800682e:	4816      	ldr	r0, [pc, #88]	; (8006888 <checkAktifCalisma+0x380>)
 8006830:	f003 fa10 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006834:	4603      	mov	r3, r0
 8006836:	2b01      	cmp	r3, #1
 8006838:	d106      	bne.n	8006848 <checkAktifCalisma+0x340>
 800683a:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <checkAktifCalisma+0x3a8>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006842:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <checkAktifCalisma+0x3a4>)
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006848:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <checkAktifCalisma+0x3a0>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d134      	bne.n	80068ba <checkAktifCalisma+0x3b2>
 8006850:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <checkAktifCalisma+0x3a8>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d130      	bne.n	80068ba <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006858:	2101      	movs	r1, #1
 800685a:	480b      	ldr	r0, [pc, #44]	; (8006888 <checkAktifCalisma+0x380>)
 800685c:	f003 f9fa 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d126      	bne.n	80068b4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006866:	4b11      	ldr	r3, [pc, #68]	; (80068ac <checkAktifCalisma+0x3a4>)
 8006868:	2201      	movs	r2, #1
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e025      	b.n	80068ba <checkAktifCalisma+0x3b2>
 800686e:	bf00      	nop
 8006870:	40010c00 	.word	0x40010c00
 8006874:	20000d41 	.word	0x20000d41
 8006878:	20000d1b 	.word	0x20000d1b
 800687c:	20000d1f 	.word	0x20000d1f
 8006880:	20000d45 	.word	0x20000d45
 8006884:	20000d48 	.word	0x20000d48
 8006888:	40011000 	.word	0x40011000
 800688c:	20000d5e 	.word	0x20000d5e
 8006890:	20000d5f 	.word	0x20000d5f
 8006894:	20000d0f 	.word	0x20000d0f
 8006898:	20000d3d 	.word	0x20000d3d
 800689c:	20000cb4 	.word	0x20000cb4
 80068a0:	20000cc0 	.word	0x20000cc0
 80068a4:	20000d20 	.word	0x20000d20
 80068a8:	20000d10 	.word	0x20000d10
 80068ac:	20000d63 	.word	0x20000d63
 80068b0:	20000d0d 	.word	0x20000d0d
			} else {
				cerceveVar=0;
 80068b4:	4b7f      	ldr	r3, [pc, #508]	; (8006ab4 <checkAktifCalisma+0x5ac>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80068ba:	4b7f      	ldr	r3, [pc, #508]	; (8006ab8 <checkAktifCalisma+0x5b0>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d17c      	bne.n	80069bc <checkAktifCalisma+0x4b4>
 80068c2:	4b7e      	ldr	r3, [pc, #504]	; (8006abc <checkAktifCalisma+0x5b4>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d078      	beq.n	80069bc <checkAktifCalisma+0x4b4>
 80068ca:	4b7d      	ldr	r3, [pc, #500]	; (8006ac0 <checkAktifCalisma+0x5b8>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d074      	beq.n	80069bc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80068d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068d6:	487b      	ldr	r0, [pc, #492]	; (8006ac4 <checkAktifCalisma+0x5bc>)
 80068d8:	f003 f9bc 	bl	8009c54 <HAL_GPIO_ReadPin>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <checkAktifCalisma+0x3e2>
 80068e2:	4b79      	ldr	r3, [pc, #484]	; (8006ac8 <checkAktifCalisma+0x5c0>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d068      	beq.n	80069bc <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80068ea:	4b72      	ldr	r3, [pc, #456]	; (8006ab4 <checkAktifCalisma+0x5ac>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d064      	beq.n	80069bc <checkAktifCalisma+0x4b4>
 80068f2:	4b76      	ldr	r3, [pc, #472]	; (8006acc <checkAktifCalisma+0x5c4>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f083 0301 	eor.w	r3, r3, #1
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d05d      	beq.n	80069bc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006900:	2104      	movs	r1, #4
 8006902:	4873      	ldr	r0, [pc, #460]	; (8006ad0 <checkAktifCalisma+0x5c8>)
 8006904:	f003 f9a6 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <checkAktifCalisma+0x40e>
 800690e:	4b71      	ldr	r3, [pc, #452]	; (8006ad4 <checkAktifCalisma+0x5cc>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d152      	bne.n	80069bc <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800691a:	486a      	ldr	r0, [pc, #424]	; (8006ac4 <checkAktifCalisma+0x5bc>)
 800691c:	f003 f99a 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006920:	4603      	mov	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d10e      	bne.n	8006944 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800692a:	4866      	ldr	r0, [pc, #408]	; (8006ac4 <checkAktifCalisma+0x5bc>)
 800692c:	f003 f992 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006930:	4603      	mov	r3, r0
 8006932:	2b01      	cmp	r3, #1
 8006934:	d106      	bne.n	8006944 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006936:	2140      	movs	r1, #64	; 0x40
 8006938:	4865      	ldr	r0, [pc, #404]	; (8006ad0 <checkAktifCalisma+0x5c8>)
 800693a:	f003 f98b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800693e:	4603      	mov	r3, r0
 8006940:	2b01      	cmp	r3, #1
 8006942:	d003      	beq.n	800694c <checkAktifCalisma+0x444>
 8006944:	4b64      	ldr	r3, [pc, #400]	; (8006ad8 <checkAktifCalisma+0x5d0>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d037      	beq.n	80069bc <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800694c:	4b63      	ldr	r3, [pc, #396]	; (8006adc <checkAktifCalisma+0x5d4>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	f083 0301 	eor.w	r3, r3, #1
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d030      	beq.n	80069bc <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800695a:	4b61      	ldr	r3, [pc, #388]	; (8006ae0 <checkAktifCalisma+0x5d8>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f083 0301 	eor.w	r3, r3, #1
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d029      	beq.n	80069bc <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006968:	4b5e      	ldr	r3, [pc, #376]	; (8006ae4 <checkAktifCalisma+0x5dc>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f083 0301 	eor.w	r3, r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d022      	beq.n	80069bc <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006976:	4b5c      	ldr	r3, [pc, #368]	; (8006ae8 <checkAktifCalisma+0x5e0>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	f083 0301 	eor.w	r3, r3, #1
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006984:	4b59      	ldr	r3, [pc, #356]	; (8006aec <checkAktifCalisma+0x5e4>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f083 0301 	eor.w	r3, r3, #1
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d014      	beq.n	80069bc <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006992:	4b57      	ldr	r3, [pc, #348]	; (8006af0 <checkAktifCalisma+0x5e8>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	f083 0301 	eor.w	r3, r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00d      	beq.n	80069bc <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80069a0:	2201      	movs	r2, #1
 80069a2:	2102      	movs	r1, #2
 80069a4:	4847      	ldr	r0, [pc, #284]	; (8006ac4 <checkAktifCalisma+0x5bc>)
 80069a6:	f003 f96c 	bl	8009c82 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80069aa:	4b4b      	ldr	r3, [pc, #300]	; (8006ad8 <checkAktifCalisma+0x5d0>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80069b0:	4b50      	ldr	r3, [pc, #320]	; (8006af4 <checkAktifCalisma+0x5ec>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80069b6:	4b50      	ldr	r3, [pc, #320]	; (8006af8 <checkAktifCalisma+0x5f0>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80069bc:	4b46      	ldr	r3, [pc, #280]	; (8006ad8 <checkAktifCalisma+0x5d0>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d033      	beq.n	8006a2c <checkAktifCalisma+0x524>
 80069c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069c8:	483e      	ldr	r0, [pc, #248]	; (8006ac4 <checkAktifCalisma+0x5bc>)
 80069ca:	f003 f943 	bl	8009c54 <HAL_GPIO_ReadPin>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d106      	bne.n	80069e2 <checkAktifCalisma+0x4da>
 80069d4:	4b3c      	ldr	r3, [pc, #240]	; (8006ac8 <checkAktifCalisma+0x5c0>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f083 0301 	eor.w	r3, r3, #1
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <checkAktifCalisma+0x4f0>
 80069e2:	2104      	movs	r1, #4
 80069e4:	483a      	ldr	r0, [pc, #232]	; (8006ad0 <checkAktifCalisma+0x5c8>)
 80069e6:	f003 f935 	bl	8009c54 <HAL_GPIO_ReadPin>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d11d      	bne.n	8006a2c <checkAktifCalisma+0x524>
 80069f0:	4b38      	ldr	r3, [pc, #224]	; (8006ad4 <checkAktifCalisma+0x5cc>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d019      	beq.n	8006a2c <checkAktifCalisma+0x524>
 80069f8:	4b30      	ldr	r3, [pc, #192]	; (8006abc <checkAktifCalisma+0x5b4>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d015      	beq.n	8006a2c <checkAktifCalisma+0x524>
 8006a00:	4b2f      	ldr	r3, [pc, #188]	; (8006ac0 <checkAktifCalisma+0x5b8>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d011      	beq.n	8006a2c <checkAktifCalisma+0x524>
 8006a08:	4b2a      	ldr	r3, [pc, #168]	; (8006ab4 <checkAktifCalisma+0x5ac>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <checkAktifCalisma+0x524>
 8006a10:	4b3a      	ldr	r3, [pc, #232]	; (8006afc <checkAktifCalisma+0x5f4>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f083 0301 	eor.w	r3, r3, #1
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <checkAktifCalisma+0x524>
			timer2=millis;
 8006a1e:	4b38      	ldr	r3, [pc, #224]	; (8006b00 <checkAktifCalisma+0x5f8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a38      	ldr	r2, [pc, #224]	; (8006b04 <checkAktifCalisma+0x5fc>)
 8006a24:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006a26:	4b35      	ldr	r3, [pc, #212]	; (8006afc <checkAktifCalisma+0x5f4>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006a2c:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <checkAktifCalisma+0x5f8>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b34      	ldr	r3, [pc, #208]	; (8006b04 <checkAktifCalisma+0x5fc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	4a34      	ldr	r2, [pc, #208]	; (8006b08 <checkAktifCalisma+0x600>)
 8006a38:	7812      	ldrb	r2, [r2, #0]
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d303      	bcc.n	8006a46 <checkAktifCalisma+0x53e>
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <checkAktifCalisma+0x5f4>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d114      	bne.n	8006a70 <checkAktifCalisma+0x568>
 8006a46:	4b1d      	ldr	r3, [pc, #116]	; (8006abc <checkAktifCalisma+0x5b4>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	f083 0301 	eor.w	r3, r3, #1
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10d      	bne.n	8006a70 <checkAktifCalisma+0x568>
 8006a54:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <checkAktifCalisma+0x5b8>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f083 0301 	eor.w	r3, r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <checkAktifCalisma+0x568>
 8006a62:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <checkAktifCalisma+0x5ac>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	f083 0301 	eor.w	r3, r3, #1
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006a70:	2200      	movs	r2, #0
 8006a72:	2102      	movs	r1, #2
 8006a74:	4813      	ldr	r0, [pc, #76]	; (8006ac4 <checkAktifCalisma+0x5bc>)
 8006a76:	f003 f904 	bl	8009c82 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006a7a:	4b17      	ldr	r3, [pc, #92]	; (8006ad8 <checkAktifCalisma+0x5d0>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006a80:	4b1e      	ldr	r3, [pc, #120]	; (8006afc <checkAktifCalisma+0x5f4>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <checkAktifCalisma+0x5d0>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d040      	beq.n	8006b10 <checkAktifCalisma+0x608>
 8006a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a92:	480f      	ldr	r0, [pc, #60]	; (8006ad0 <checkAktifCalisma+0x5c8>)
 8006a94:	f003 f8de 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d138      	bne.n	8006b10 <checkAktifCalisma+0x608>
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <checkAktifCalisma+0x604>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d034      	beq.n	8006b10 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4806      	ldr	r0, [pc, #24]	; (8006ac4 <checkAktifCalisma+0x5bc>)
 8006aac:	f003 f8e9 	bl	8009c82 <HAL_GPIO_WritePin>
 8006ab0:	e033      	b.n	8006b1a <checkAktifCalisma+0x612>
 8006ab2:	bf00      	nop
 8006ab4:	20000d63 	.word	0x20000d63
 8006ab8:	20000d29 	.word	0x20000d29
 8006abc:	20000d5e 	.word	0x20000d5e
 8006ac0:	20000d5f 	.word	0x20000d5f
 8006ac4:	40010c00 	.word	0x40010c00
 8006ac8:	20000d49 	.word	0x20000d49
 8006acc:	20000d5d 	.word	0x20000d5d
 8006ad0:	40011000 	.word	0x40011000
 8006ad4:	20000d12 	.word	0x20000d12
 8006ad8:	20000d44 	.word	0x20000d44
 8006adc:	20000d41 	.word	0x20000d41
 8006ae0:	20000d45 	.word	0x20000d45
 8006ae4:	20000d42 	.word	0x20000d42
 8006ae8:	20000d43 	.word	0x20000d43
 8006aec:	20000d46 	.word	0x20000d46
 8006af0:	20000d47 	.word	0x20000d47
 8006af4:	20000d4c 	.word	0x20000d4c
 8006af8:	20000d6d 	.word	0x20000d6d
 8006afc:	20000d3c 	.word	0x20000d3c
 8006b00:	20000cb4 	.word	0x20000cb4
 8006b04:	20000cc0 	.word	0x20000cc0
 8006b08:	20000d21 	.word	0x20000d21
 8006b0c:	20000d11 	.word	0x20000d11
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006b10:	2200      	movs	r2, #0
 8006b12:	2101      	movs	r1, #1
 8006b14:	4836      	ldr	r0, [pc, #216]	; (8006bf0 <checkAktifCalisma+0x6e8>)
 8006b16:	f003 f8b4 	bl	8009c82 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006b1a:	4b36      	ldr	r3, [pc, #216]	; (8006bf4 <checkAktifCalisma+0x6ec>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f040 8080 	bne.w	8006c24 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006b24:	4b34      	ldr	r3, [pc, #208]	; (8006bf8 <checkAktifCalisma+0x6f0>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d003      	beq.n	8006b34 <checkAktifCalisma+0x62c>
 8006b2c:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <checkAktifCalisma+0x6f0>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d177      	bne.n	8006c24 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006b34:	4b31      	ldr	r3, [pc, #196]	; (8006bfc <checkAktifCalisma+0x6f4>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d073      	beq.n	8006c24 <checkAktifCalisma+0x71c>
 8006b3c:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <checkAktifCalisma+0x6f8>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d06f      	beq.n	8006c24 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b48:	4829      	ldr	r0, [pc, #164]	; (8006bf0 <checkAktifCalisma+0x6e8>)
 8006b4a:	f003 f883 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d167      	bne.n	8006c24 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b58:	482a      	ldr	r0, [pc, #168]	; (8006c04 <checkAktifCalisma+0x6fc>)
 8006b5a:	f003 f87b 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <checkAktifCalisma+0x664>
 8006b64:	4b28      	ldr	r3, [pc, #160]	; (8006c08 <checkAktifCalisma+0x700>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d15b      	bne.n	8006c24 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006b6c:	2140      	movs	r1, #64	; 0x40
 8006b6e:	4825      	ldr	r0, [pc, #148]	; (8006c04 <checkAktifCalisma+0x6fc>)
 8006b70:	f003 f870 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d10f      	bne.n	8006b9a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b7e:	481c      	ldr	r0, [pc, #112]	; (8006bf0 <checkAktifCalisma+0x6e8>)
 8006b80:	f003 f868 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b8e:	4818      	ldr	r0, [pc, #96]	; (8006bf0 <checkAktifCalisma+0x6e8>)
 8006b90:	f003 f860 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d003      	beq.n	8006ba2 <checkAktifCalisma+0x69a>
 8006b9a:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <checkAktifCalisma+0x704>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d040      	beq.n	8006c24 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006ba2:	4b1b      	ldr	r3, [pc, #108]	; (8006c10 <checkAktifCalisma+0x708>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f083 0301 	eor.w	r3, r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d039      	beq.n	8006c24 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <checkAktifCalisma+0x70c>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f083 0301 	eor.w	r3, r3, #1
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d032      	beq.n	8006c24 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006bbe:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <checkAktifCalisma+0x710>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f083 0301 	eor.w	r3, r3, #1
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02b      	beq.n	8006c24 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006bcc:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <checkAktifCalisma+0x714>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f083 0301 	eor.w	r3, r3, #1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d024      	beq.n	8006c24 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006bda:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <checkAktifCalisma+0x718>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f083 0301 	eor.w	r3, r3, #1
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01d      	beq.n	8006c24 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006be8:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <checkAktifCalisma+0x704>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	e01c      	b.n	8006c2a <checkAktifCalisma+0x722>
 8006bf0:	40010c00 	.word	0x40010c00
 8006bf4:	20000d29 	.word	0x20000d29
 8006bf8:	20000d1b 	.word	0x20000d1b
 8006bfc:	20000d5e 	.word	0x20000d5e
 8006c00:	20000d5f 	.word	0x20000d5f
 8006c04:	40011000 	.word	0x40011000
 8006c08:	20000d1c 	.word	0x20000d1c
 8006c0c:	20000d42 	.word	0x20000d42
 8006c10:	20000d41 	.word	0x20000d41
 8006c14:	20000d45 	.word	0x20000d45
 8006c18:	20000d44 	.word	0x20000d44
 8006c1c:	20000d43 	.word	0x20000d43
 8006c20:	20000d47 	.word	0x20000d47
		} else {
			devmotoryukaricalisiyor=0;
 8006c24:	4b64      	ldr	r3, [pc, #400]	; (8006db8 <checkAktifCalisma+0x8b0>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006c2a:	4b63      	ldr	r3, [pc, #396]	; (8006db8 <checkAktifCalisma+0x8b0>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006c32:	2201      	movs	r2, #1
 8006c34:	2120      	movs	r1, #32
 8006c36:	4861      	ldr	r0, [pc, #388]	; (8006dbc <checkAktifCalisma+0x8b4>)
 8006c38:	f003 f823 	bl	8009c82 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006c3c:	4b60      	ldr	r3, [pc, #384]	; (8006dc0 <checkAktifCalisma+0x8b8>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006c42:	4b5f      	ldr	r3, [pc, #380]	; (8006dc0 <checkAktifCalisma+0x8b8>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d025      	beq.n	8006c96 <checkAktifCalisma+0x78e>
 8006c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c4e:	485d      	ldr	r0, [pc, #372]	; (8006dc4 <checkAktifCalisma+0x8bc>)
 8006c50:	f003 f800 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d007      	beq.n	8006c6a <checkAktifCalisma+0x762>
 8006c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c5e:	4857      	ldr	r0, [pc, #348]	; (8006dbc <checkAktifCalisma+0x8b4>)
 8006c60:	f002 fff8 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d115      	bne.n	8006c96 <checkAktifCalisma+0x78e>
 8006c6a:	4b57      	ldr	r3, [pc, #348]	; (8006dc8 <checkAktifCalisma+0x8c0>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d011      	beq.n	8006c96 <checkAktifCalisma+0x78e>
 8006c72:	4b56      	ldr	r3, [pc, #344]	; (8006dcc <checkAktifCalisma+0x8c4>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <checkAktifCalisma+0x78e>
 8006c7a:	4b55      	ldr	r3, [pc, #340]	; (8006dd0 <checkAktifCalisma+0x8c8>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	f083 0301 	eor.w	r3, r3, #1
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d006      	beq.n	8006c96 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006c88:	4b52      	ldr	r3, [pc, #328]	; (8006dd4 <checkAktifCalisma+0x8cc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a52      	ldr	r2, [pc, #328]	; (8006dd8 <checkAktifCalisma+0x8d0>)
 8006c8e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006c90:	4b4f      	ldr	r3, [pc, #316]	; (8006dd0 <checkAktifCalisma+0x8c8>)
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006c96:	4b4f      	ldr	r3, [pc, #316]	; (8006dd4 <checkAktifCalisma+0x8cc>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b4f      	ldr	r3, [pc, #316]	; (8006dd8 <checkAktifCalisma+0x8d0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	4a4e      	ldr	r2, [pc, #312]	; (8006ddc <checkAktifCalisma+0x8d4>)
 8006ca2:	7812      	ldrb	r2, [r2, #0]
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d303      	bcc.n	8006cb0 <checkAktifCalisma+0x7a8>
 8006ca8:	4b49      	ldr	r3, [pc, #292]	; (8006dd0 <checkAktifCalisma+0x8c8>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <checkAktifCalisma+0x7c4>
 8006cb0:	4b45      	ldr	r3, [pc, #276]	; (8006dc8 <checkAktifCalisma+0x8c0>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f083 0301 	eor.w	r3, r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <checkAktifCalisma+0x7c4>
 8006cbe:	4b43      	ldr	r3, [pc, #268]	; (8006dcc <checkAktifCalisma+0x8c4>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	f083 0301 	eor.w	r3, r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2120      	movs	r1, #32
 8006cd0:	483a      	ldr	r0, [pc, #232]	; (8006dbc <checkAktifCalisma+0x8b4>)
 8006cd2:	f002 ffd6 	bl	8009c82 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006cd6:	4b3a      	ldr	r3, [pc, #232]	; (8006dc0 <checkAktifCalisma+0x8b8>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006cdc:	4b3c      	ldr	r3, [pc, #240]	; (8006dd0 <checkAktifCalisma+0x8c8>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006ce2:	4b3f      	ldr	r3, [pc, #252]	; (8006de0 <checkAktifCalisma+0x8d8>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f040 8088 	bne.w	8006dfc <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006cec:	4b3d      	ldr	r3, [pc, #244]	; (8006de4 <checkAktifCalisma+0x8dc>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d003      	beq.n	8006cfc <checkAktifCalisma+0x7f4>
 8006cf4:	4b3b      	ldr	r3, [pc, #236]	; (8006de4 <checkAktifCalisma+0x8dc>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d17f      	bne.n	8006dfc <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006cfc:	4b32      	ldr	r3, [pc, #200]	; (8006dc8 <checkAktifCalisma+0x8c0>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d07b      	beq.n	8006dfc <checkAktifCalisma+0x8f4>
 8006d04:	4b31      	ldr	r3, [pc, #196]	; (8006dcc <checkAktifCalisma+0x8c4>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d077      	beq.n	8006dfc <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006d0c:	2140      	movs	r1, #64	; 0x40
 8006d0e:	482b      	ldr	r0, [pc, #172]	; (8006dbc <checkAktifCalisma+0x8b4>)
 8006d10:	f002 ffa0 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d170      	bne.n	8006dfc <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d1e:	4827      	ldr	r0, [pc, #156]	; (8006dbc <checkAktifCalisma+0x8b4>)
 8006d20:	f002 ff98 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <checkAktifCalisma+0x82a>
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	; (8006de8 <checkAktifCalisma+0x8e0>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d164      	bne.n	8006dfc <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d36:	4823      	ldr	r0, [pc, #140]	; (8006dc4 <checkAktifCalisma+0x8bc>)
 8006d38:	f002 ff8c 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d10f      	bne.n	8006d62 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d46:	481f      	ldr	r0, [pc, #124]	; (8006dc4 <checkAktifCalisma+0x8bc>)
 8006d48:	f002 ff84 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d107      	bne.n	8006d62 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d56:	481b      	ldr	r0, [pc, #108]	; (8006dc4 <checkAktifCalisma+0x8bc>)
 8006d58:	f002 ff7c 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d003      	beq.n	8006d6a <checkAktifCalisma+0x862>
 8006d62:	4b22      	ldr	r3, [pc, #136]	; (8006dec <checkAktifCalisma+0x8e4>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d048      	beq.n	8006dfc <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006d6a:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <checkAktifCalisma+0x8e8>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f083 0301 	eor.w	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d041      	beq.n	8006dfc <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006d78:	4b1e      	ldr	r3, [pc, #120]	; (8006df4 <checkAktifCalisma+0x8ec>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f083 0301 	eor.w	r3, r3, #1
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d03a      	beq.n	8006dfc <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006d86:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <checkAktifCalisma+0x8f0>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f083 0301 	eor.w	r3, r3, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d033      	beq.n	8006dfc <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006d94:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <checkAktifCalisma+0x8b8>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f083 0301 	eor.w	r3, r3, #1
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d02c      	beq.n	8006dfc <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <checkAktifCalisma+0x8b0>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f083 0301 	eor.w	r3, r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d025      	beq.n	8006dfc <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006db0:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <checkAktifCalisma+0x8e4>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	e024      	b.n	8006e02 <checkAktifCalisma+0x8fa>
 8006db8:	20000d42 	.word	0x20000d42
 8006dbc:	40011000 	.word	0x40011000
 8006dc0:	20000d46 	.word	0x20000d46
 8006dc4:	40010c00 	.word	0x40010c00
 8006dc8:	20000d5e 	.word	0x20000d5e
 8006dcc:	20000d5f 	.word	0x20000d5f
 8006dd0:	20000d3e 	.word	0x20000d3e
 8006dd4:	20000cb4 	.word	0x20000cb4
 8006dd8:	20000cc0 	.word	0x20000cc0
 8006ddc:	20000d22 	.word	0x20000d22
 8006de0:	20000d29 	.word	0x20000d29
 8006de4:	20000d1b 	.word	0x20000d1b
 8006de8:	20000d1d 	.word	0x20000d1d
 8006dec:	20000d43 	.word	0x20000d43
 8006df0:	20000d41 	.word	0x20000d41
 8006df4:	20000d45 	.word	0x20000d45
 8006df8:	20000d44 	.word	0x20000d44
		} else {
			devmotorasagicalisiyor=0;
 8006dfc:	4b96      	ldr	r3, [pc, #600]	; (8007058 <checkAktifCalisma+0xb50>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006e02:	4b95      	ldr	r3, [pc, #596]	; (8007058 <checkAktifCalisma+0xb50>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2110      	movs	r1, #16
 8006e0e:	4893      	ldr	r0, [pc, #588]	; (800705c <checkAktifCalisma+0xb54>)
 8006e10:	f002 ff37 	bl	8009c82 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006e14:	4b92      	ldr	r3, [pc, #584]	; (8007060 <checkAktifCalisma+0xb58>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006e1a:	4b91      	ldr	r3, [pc, #580]	; (8007060 <checkAktifCalisma+0xb58>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d024      	beq.n	8006e6c <checkAktifCalisma+0x964>
 8006e22:	2140      	movs	r1, #64	; 0x40
 8006e24:	488d      	ldr	r0, [pc, #564]	; (800705c <checkAktifCalisma+0xb54>)
 8006e26:	f002 ff15 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d007      	beq.n	8006e40 <checkAktifCalisma+0x938>
 8006e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e34:	4889      	ldr	r0, [pc, #548]	; (800705c <checkAktifCalisma+0xb54>)
 8006e36:	f002 ff0d 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d115      	bne.n	8006e6c <checkAktifCalisma+0x964>
 8006e40:	4b88      	ldr	r3, [pc, #544]	; (8007064 <checkAktifCalisma+0xb5c>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d011      	beq.n	8006e6c <checkAktifCalisma+0x964>
 8006e48:	4b87      	ldr	r3, [pc, #540]	; (8007068 <checkAktifCalisma+0xb60>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00d      	beq.n	8006e6c <checkAktifCalisma+0x964>
 8006e50:	4b86      	ldr	r3, [pc, #536]	; (800706c <checkAktifCalisma+0xb64>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f083 0301 	eor.w	r3, r3, #1
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d006      	beq.n	8006e6c <checkAktifCalisma+0x964>
			timer2=millis;
 8006e5e:	4b84      	ldr	r3, [pc, #528]	; (8007070 <checkAktifCalisma+0xb68>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a84      	ldr	r2, [pc, #528]	; (8007074 <checkAktifCalisma+0xb6c>)
 8006e64:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006e66:	4b81      	ldr	r3, [pc, #516]	; (800706c <checkAktifCalisma+0xb64>)
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006e6c:	4b80      	ldr	r3, [pc, #512]	; (8007070 <checkAktifCalisma+0xb68>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	4b80      	ldr	r3, [pc, #512]	; (8007074 <checkAktifCalisma+0xb6c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	4a80      	ldr	r2, [pc, #512]	; (8007078 <checkAktifCalisma+0xb70>)
 8006e78:	7812      	ldrb	r2, [r2, #0]
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d303      	bcc.n	8006e86 <checkAktifCalisma+0x97e>
 8006e7e:	4b7b      	ldr	r3, [pc, #492]	; (800706c <checkAktifCalisma+0xb64>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10d      	bne.n	8006ea2 <checkAktifCalisma+0x99a>
 8006e86:	4b77      	ldr	r3, [pc, #476]	; (8007064 <checkAktifCalisma+0xb5c>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f083 0301 	eor.w	r3, r3, #1
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <checkAktifCalisma+0x99a>
 8006e94:	4b74      	ldr	r3, [pc, #464]	; (8007068 <checkAktifCalisma+0xb60>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f083 0301 	eor.w	r3, r3, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2110      	movs	r1, #16
 8006ea6:	486d      	ldr	r0, [pc, #436]	; (800705c <checkAktifCalisma+0xb54>)
 8006ea8:	f002 feeb 	bl	8009c82 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006eac:	4b6c      	ldr	r3, [pc, #432]	; (8007060 <checkAktifCalisma+0xb58>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006eb2:	4b6e      	ldr	r3, [pc, #440]	; (800706c <checkAktifCalisma+0xb64>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ebc:	486f      	ldr	r0, [pc, #444]	; (800707c <checkAktifCalisma+0xb74>)
 8006ebe:	f002 fec9 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d120      	bne.n	8006f0a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ecc:	486b      	ldr	r0, [pc, #428]	; (800707c <checkAktifCalisma+0xb74>)
 8006ece:	f002 fec1 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d118      	bne.n	8006f0a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006ed8:	2104      	movs	r1, #4
 8006eda:	4868      	ldr	r0, [pc, #416]	; (800707c <checkAktifCalisma+0xb74>)
 8006edc:	f002 feba 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d111      	bne.n	8006f0a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006ee6:	2102      	movs	r1, #2
 8006ee8:	4864      	ldr	r0, [pc, #400]	; (800707c <checkAktifCalisma+0xb74>)
 8006eea:	f002 feb3 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	4861      	ldr	r0, [pc, #388]	; (800707c <checkAktifCalisma+0xb74>)
 8006ef8:	f002 feac 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <checkAktifCalisma+0xa02>
			makineStop=1;
 8006f02:	4b5f      	ldr	r3, [pc, #380]	; (8007080 <checkAktifCalisma+0xb78>)
 8006f04:	2201      	movs	r2, #1
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e002      	b.n	8006f10 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006f0a:	4b5d      	ldr	r3, [pc, #372]	; (8007080 <checkAktifCalisma+0xb78>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f10:	4b5c      	ldr	r3, [pc, #368]	; (8007084 <checkAktifCalisma+0xb7c>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d144      	bne.n	8006fa2 <checkAktifCalisma+0xa9a>
 8006f18:	4b5b      	ldr	r3, [pc, #364]	; (8007088 <checkAktifCalisma+0xb80>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d003      	beq.n	8006f28 <checkAktifCalisma+0xa20>
 8006f20:	4b59      	ldr	r3, [pc, #356]	; (8007088 <checkAktifCalisma+0xb80>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d13c      	bne.n	8006fa2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f28:	2180      	movs	r1, #128	; 0x80
 8006f2a:	484c      	ldr	r0, [pc, #304]	; (800705c <checkAktifCalisma+0xb54>)
 8006f2c:	f002 fe92 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <checkAktifCalisma+0xa36>
 8006f36:	4b55      	ldr	r3, [pc, #340]	; (800708c <checkAktifCalisma+0xb84>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <checkAktifCalisma+0xa4e>
 8006f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f42:	484e      	ldr	r0, [pc, #312]	; (800707c <checkAktifCalisma+0xb74>)
 8006f44:	f002 fe86 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d129      	bne.n	8006fa2 <checkAktifCalisma+0xa9a>
 8006f4e:	4b4f      	ldr	r3, [pc, #316]	; (800708c <checkAktifCalisma+0xb84>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d125      	bne.n	8006fa2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f56:	2104      	movs	r1, #4
 8006f58:	4840      	ldr	r0, [pc, #256]	; (800705c <checkAktifCalisma+0xb54>)
 8006f5a:	f002 fe7b 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d003      	beq.n	8006f6c <checkAktifCalisma+0xa64>
 8006f64:	4b4a      	ldr	r3, [pc, #296]	; (8007090 <checkAktifCalisma+0xb88>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d11a      	bne.n	8006fa2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f6c:	2102      	movs	r1, #2
 8006f6e:	483b      	ldr	r0, [pc, #236]	; (800705c <checkAktifCalisma+0xb54>)
 8006f70:	f002 fe70 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d113      	bne.n	8006fa2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006f7a:	4b46      	ldr	r3, [pc, #280]	; (8007094 <checkAktifCalisma+0xb8c>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f083 0301 	eor.w	r3, r3, #1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00c      	beq.n	8006fa2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006f88:	4b3d      	ldr	r3, [pc, #244]	; (8007080 <checkAktifCalisma+0xb78>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d008      	beq.n	8006fa2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006f90:	4b41      	ldr	r3, [pc, #260]	; (8007098 <checkAktifCalisma+0xb90>)
 8006f92:	2201      	movs	r2, #1
 8006f94:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006f96:	4b36      	ldr	r3, [pc, #216]	; (8007070 <checkAktifCalisma+0xb68>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a40      	ldr	r2, [pc, #256]	; (800709c <checkAktifCalisma+0xb94>)
 8006f9c:	6013      	str	r3, [r2, #0]
			bekle();
 8006f9e:	f7ff f87d 	bl	800609c <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006fa2:	4b33      	ldr	r3, [pc, #204]	; (8007070 <checkAktifCalisma+0xb68>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4b3d      	ldr	r3, [pc, #244]	; (800709c <checkAktifCalisma+0xb94>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	4a3c      	ldr	r2, [pc, #240]	; (80070a0 <checkAktifCalisma+0xb98>)
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d211      	bcs.n	8006fd8 <checkAktifCalisma+0xad0>
 8006fb4:	2104      	movs	r1, #4
 8006fb6:	4829      	ldr	r0, [pc, #164]	; (800705c <checkAktifCalisma+0xb54>)
 8006fb8:	f002 fe4c 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <checkAktifCalisma+0xad0>
 8006fc2:	4b33      	ldr	r3, [pc, #204]	; (8007090 <checkAktifCalisma+0xb88>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d006      	beq.n	8006fd8 <checkAktifCalisma+0xad0>
 8006fca:	4b2d      	ldr	r3, [pc, #180]	; (8007080 <checkAktifCalisma+0xb78>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f083 0301 	eor.w	r3, r3, #1
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006fd8:	4b2f      	ldr	r3, [pc, #188]	; (8007098 <checkAktifCalisma+0xb90>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fde:	4b29      	ldr	r3, [pc, #164]	; (8007084 <checkAktifCalisma+0xb7c>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d160      	bne.n	80070a8 <checkAktifCalisma+0xba0>
 8006fe6:	4b28      	ldr	r3, [pc, #160]	; (8007088 <checkAktifCalisma+0xb80>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d003      	beq.n	8006ff6 <checkAktifCalisma+0xaee>
 8006fee:	4b26      	ldr	r3, [pc, #152]	; (8007088 <checkAktifCalisma+0xb80>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d158      	bne.n	80070a8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006ff6:	2104      	movs	r1, #4
 8006ff8:	4818      	ldr	r0, [pc, #96]	; (800705c <checkAktifCalisma+0xb54>)
 8006ffa:	f002 fe2b 	bl	8009c54 <HAL_GPIO_ReadPin>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b01      	cmp	r3, #1
 8007002:	d003      	beq.n	800700c <checkAktifCalisma+0xb04>
 8007004:	4b22      	ldr	r3, [pc, #136]	; (8007090 <checkAktifCalisma+0xb88>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d14d      	bne.n	80070a8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800700c:	2102      	movs	r1, #2
 800700e:	4813      	ldr	r0, [pc, #76]	; (800705c <checkAktifCalisma+0xb54>)
 8007010:	f002 fe20 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d146      	bne.n	80070a8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800701a:	2180      	movs	r1, #128	; 0x80
 800701c:	480f      	ldr	r0, [pc, #60]	; (800705c <checkAktifCalisma+0xb54>)
 800701e:	f002 fe19 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d103      	bne.n	8007030 <checkAktifCalisma+0xb28>
 8007028:	4b18      	ldr	r3, [pc, #96]	; (800708c <checkAktifCalisma+0xb84>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <checkAktifCalisma+0xb40>
 8007030:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007034:	4811      	ldr	r0, [pc, #68]	; (800707c <checkAktifCalisma+0xb74>)
 8007036:	f002 fe0d 	bl	8009c54 <HAL_GPIO_ReadPin>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d133      	bne.n	80070a8 <checkAktifCalisma+0xba0>
 8007040:	4b12      	ldr	r3, [pc, #72]	; (800708c <checkAktifCalisma+0xb84>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d12f      	bne.n	80070a8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8007048:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <checkAktifCalisma+0xb78>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02b      	beq.n	80070a8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8007050:	4b14      	ldr	r3, [pc, #80]	; (80070a4 <checkAktifCalisma+0xb9c>)
 8007052:	2201      	movs	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e02a      	b.n	80070ae <checkAktifCalisma+0xba6>
 8007058:	20000d43 	.word	0x20000d43
 800705c:	40011000 	.word	0x40011000
 8007060:	20000d47 	.word	0x20000d47
 8007064:	20000d5e 	.word	0x20000d5e
 8007068:	20000d5f 	.word	0x20000d5f
 800706c:	20000d3f 	.word	0x20000d3f
 8007070:	20000cb4 	.word	0x20000cb4
 8007074:	20000cc0 	.word	0x20000cc0
 8007078:	20000d22 	.word	0x20000d22
 800707c:	40010c00 	.word	0x40010c00
 8007080:	20000d4e 	.word	0x20000d4e
 8007084:	20000d15 	.word	0x20000d15
 8007088:	20000d14 	.word	0x20000d14
 800708c:	20000d18 	.word	0x20000d18
 8007090:	20000d12 	.word	0x20000d12
 8007094:	20000d3b 	.word	0x20000d3b
 8007098:	20000d4f 	.word	0x20000d4f
 800709c:	20000cb8 	.word	0x20000cb8
 80070a0:	20000d25 	.word	0x20000d25
 80070a4:	20000d50 	.word	0x20000d50
		} else {
			kapi1butonkontrol=0;
 80070a8:	4b8b      	ldr	r3, [pc, #556]	; (80072d8 <checkAktifCalisma+0xdd0>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070ae:	4b8b      	ldr	r3, [pc, #556]	; (80072dc <checkAktifCalisma+0xdd4>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d121      	bne.n	80070fa <checkAktifCalisma+0xbf2>
 80070b6:	4b8a      	ldr	r3, [pc, #552]	; (80072e0 <checkAktifCalisma+0xdd8>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d003      	beq.n	80070c6 <checkAktifCalisma+0xbbe>
 80070be:	4b88      	ldr	r3, [pc, #544]	; (80072e0 <checkAktifCalisma+0xdd8>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d119      	bne.n	80070fa <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80070c6:	2104      	movs	r1, #4
 80070c8:	4886      	ldr	r0, [pc, #536]	; (80072e4 <checkAktifCalisma+0xddc>)
 80070ca:	f002 fdc3 	bl	8009c54 <HAL_GPIO_ReadPin>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d003      	beq.n	80070dc <checkAktifCalisma+0xbd4>
 80070d4:	4b84      	ldr	r3, [pc, #528]	; (80072e8 <checkAktifCalisma+0xde0>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10e      	bne.n	80070fa <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80070dc:	2102      	movs	r1, #2
 80070de:	4881      	ldr	r0, [pc, #516]	; (80072e4 <checkAktifCalisma+0xddc>)
 80070e0:	f002 fdb8 	bl	8009c54 <HAL_GPIO_ReadPin>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d107      	bne.n	80070fa <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80070ea:	4b80      	ldr	r3, [pc, #512]	; (80072ec <checkAktifCalisma+0xde4>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80070f2:	4b7f      	ldr	r3, [pc, #508]	; (80072f0 <checkAktifCalisma+0xde8>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e002      	b.n	8007100 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80070fa:	4b7d      	ldr	r3, [pc, #500]	; (80072f0 <checkAktifCalisma+0xde8>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8007100:	4b75      	ldr	r3, [pc, #468]	; (80072d8 <checkAktifCalisma+0xdd0>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d107      	bne.n	8007118 <checkAktifCalisma+0xc10>
 8007108:	4b79      	ldr	r3, [pc, #484]	; (80072f0 <checkAktifCalisma+0xde8>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <checkAktifCalisma+0xc10>
 8007110:	4b78      	ldr	r3, [pc, #480]	; (80072f4 <checkAktifCalisma+0xdec>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007118:	2201      	movs	r2, #1
 800711a:	2180      	movs	r1, #128	; 0x80
 800711c:	4876      	ldr	r0, [pc, #472]	; (80072f8 <checkAktifCalisma+0xdf0>)
 800711e:	f002 fdb0 	bl	8009c82 <HAL_GPIO_WritePin>
 8007122:	e004      	b.n	800712e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007124:	2200      	movs	r2, #0
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	4873      	ldr	r0, [pc, #460]	; (80072f8 <checkAktifCalisma+0xdf0>)
 800712a:	f002 fdaa 	bl	8009c82 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800712e:	4b73      	ldr	r3, [pc, #460]	; (80072fc <checkAktifCalisma+0xdf4>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d141      	bne.n	80071ba <checkAktifCalisma+0xcb2>
 8007136:	4b6a      	ldr	r3, [pc, #424]	; (80072e0 <checkAktifCalisma+0xdd8>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d003      	beq.n	8007146 <checkAktifCalisma+0xc3e>
 800713e:	4b68      	ldr	r3, [pc, #416]	; (80072e0 <checkAktifCalisma+0xdd8>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d139      	bne.n	80071ba <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800714a:	4866      	ldr	r0, [pc, #408]	; (80072e4 <checkAktifCalisma+0xddc>)
 800714c:	f002 fd82 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d103      	bne.n	800715e <checkAktifCalisma+0xc56>
 8007156:	4b6a      	ldr	r3, [pc, #424]	; (8007300 <checkAktifCalisma+0xdf8>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <checkAktifCalisma+0xc6e>
 800715e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007162:	4868      	ldr	r0, [pc, #416]	; (8007304 <checkAktifCalisma+0xdfc>)
 8007164:	f002 fd76 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d125      	bne.n	80071ba <checkAktifCalisma+0xcb2>
 800716e:	4b64      	ldr	r3, [pc, #400]	; (8007300 <checkAktifCalisma+0xdf8>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d121      	bne.n	80071ba <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007176:	2102      	movs	r1, #2
 8007178:	485a      	ldr	r0, [pc, #360]	; (80072e4 <checkAktifCalisma+0xddc>)
 800717a:	f002 fd6b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800717e:	4603      	mov	r3, r0
 8007180:	2b01      	cmp	r3, #1
 8007182:	d11a      	bne.n	80071ba <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007184:	2104      	movs	r1, #4
 8007186:	4857      	ldr	r0, [pc, #348]	; (80072e4 <checkAktifCalisma+0xddc>)
 8007188:	f002 fd64 	bl	8009c54 <HAL_GPIO_ReadPin>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d113      	bne.n	80071ba <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8007192:	4b56      	ldr	r3, [pc, #344]	; (80072ec <checkAktifCalisma+0xde4>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00f      	beq.n	80071ba <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800719a:	4b5b      	ldr	r3, [pc, #364]	; (8007308 <checkAktifCalisma+0xe00>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	f083 0301 	eor.w	r3, r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80071a8:	4b58      	ldr	r3, [pc, #352]	; (800730c <checkAktifCalisma+0xe04>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80071ae:	4b58      	ldr	r3, [pc, #352]	; (8007310 <checkAktifCalisma+0xe08>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a58      	ldr	r2, [pc, #352]	; (8007314 <checkAktifCalisma+0xe0c>)
 80071b4:	6013      	str	r3, [r2, #0]
			bekle();
 80071b6:	f7fe ff71 	bl	800609c <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80071ba:	4b55      	ldr	r3, [pc, #340]	; (8007310 <checkAktifCalisma+0xe08>)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4b55      	ldr	r3, [pc, #340]	; (8007314 <checkAktifCalisma+0xe0c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	4a54      	ldr	r2, [pc, #336]	; (8007318 <checkAktifCalisma+0xe10>)
 80071c6:	7812      	ldrb	r2, [r2, #0]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d20d      	bcs.n	80071e8 <checkAktifCalisma+0xce0>
 80071cc:	2102      	movs	r1, #2
 80071ce:	4845      	ldr	r0, [pc, #276]	; (80072e4 <checkAktifCalisma+0xddc>)
 80071d0:	f002 fd40 	bl	8009c54 <HAL_GPIO_ReadPin>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d006      	beq.n	80071e8 <checkAktifCalisma+0xce0>
 80071da:	4b44      	ldr	r3, [pc, #272]	; (80072ec <checkAktifCalisma+0xde4>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f083 0301 	eor.w	r3, r3, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80071e8:	4b48      	ldr	r3, [pc, #288]	; (800730c <checkAktifCalisma+0xe04>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80071ee:	4b43      	ldr	r3, [pc, #268]	; (80072fc <checkAktifCalisma+0xdf4>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d135      	bne.n	8007262 <checkAktifCalisma+0xd5a>
 80071f6:	4b3a      	ldr	r3, [pc, #232]	; (80072e0 <checkAktifCalisma+0xdd8>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d003      	beq.n	8007206 <checkAktifCalisma+0xcfe>
 80071fe:	4b38      	ldr	r3, [pc, #224]	; (80072e0 <checkAktifCalisma+0xdd8>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d12d      	bne.n	8007262 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800720a:	4836      	ldr	r0, [pc, #216]	; (80072e4 <checkAktifCalisma+0xddc>)
 800720c:	f002 fd22 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d103      	bne.n	800721e <checkAktifCalisma+0xd16>
 8007216:	4b3a      	ldr	r3, [pc, #232]	; (8007300 <checkAktifCalisma+0xdf8>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <checkAktifCalisma+0xd2e>
 800721e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007222:	4838      	ldr	r0, [pc, #224]	; (8007304 <checkAktifCalisma+0xdfc>)
 8007224:	f002 fd16 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d119      	bne.n	8007262 <checkAktifCalisma+0xd5a>
 800722e:	4b34      	ldr	r3, [pc, #208]	; (8007300 <checkAktifCalisma+0xdf8>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d115      	bne.n	8007262 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007236:	2102      	movs	r1, #2
 8007238:	482a      	ldr	r0, [pc, #168]	; (80072e4 <checkAktifCalisma+0xddc>)
 800723a:	f002 fd0b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800723e:	4603      	mov	r3, r0
 8007240:	2b01      	cmp	r3, #1
 8007242:	d10e      	bne.n	8007262 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007244:	2104      	movs	r1, #4
 8007246:	4827      	ldr	r0, [pc, #156]	; (80072e4 <checkAktifCalisma+0xddc>)
 8007248:	f002 fd04 	bl	8009c54 <HAL_GPIO_ReadPin>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d107      	bne.n	8007262 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8007252:	4b26      	ldr	r3, [pc, #152]	; (80072ec <checkAktifCalisma+0xde4>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800725a:	4b30      	ldr	r3, [pc, #192]	; (800731c <checkAktifCalisma+0xe14>)
 800725c:	2201      	movs	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	e002      	b.n	8007268 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8007262:	4b2e      	ldr	r3, [pc, #184]	; (800731c <checkAktifCalisma+0xe14>)
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007268:	4b24      	ldr	r3, [pc, #144]	; (80072fc <checkAktifCalisma+0xdf4>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d11d      	bne.n	80072ac <checkAktifCalisma+0xda4>
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <checkAktifCalisma+0xdd8>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d003      	beq.n	8007280 <checkAktifCalisma+0xd78>
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <checkAktifCalisma+0xdd8>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b03      	cmp	r3, #3
 800727e:	d115      	bne.n	80072ac <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007280:	2102      	movs	r1, #2
 8007282:	4818      	ldr	r0, [pc, #96]	; (80072e4 <checkAktifCalisma+0xddc>)
 8007284:	f002 fce6 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007288:	4603      	mov	r3, r0
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10e      	bne.n	80072ac <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800728e:	2104      	movs	r1, #4
 8007290:	4814      	ldr	r0, [pc, #80]	; (80072e4 <checkAktifCalisma+0xddc>)
 8007292:	f002 fcdf 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 800729c:	4b13      	ldr	r3, [pc, #76]	; (80072ec <checkAktifCalisma+0xde4>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80072a4:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <checkAktifCalisma+0xe18>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e002      	b.n	80072b2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80072ac:	4b1c      	ldr	r3, [pc, #112]	; (8007320 <checkAktifCalisma+0xe18>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80072b2:	4b1a      	ldr	r3, [pc, #104]	; (800731c <checkAktifCalisma+0xe14>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d107      	bne.n	80072ca <checkAktifCalisma+0xdc2>
 80072ba:	4b19      	ldr	r3, [pc, #100]	; (8007320 <checkAktifCalisma+0xe18>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <checkAktifCalisma+0xdc2>
 80072c2:	4b12      	ldr	r3, [pc, #72]	; (800730c <checkAktifCalisma+0xe04>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d02c      	beq.n	8007324 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80072ca:	2201      	movs	r2, #1
 80072cc:	2140      	movs	r1, #64	; 0x40
 80072ce:	480a      	ldr	r0, [pc, #40]	; (80072f8 <checkAktifCalisma+0xdf0>)
 80072d0:	f002 fcd7 	bl	8009c82 <HAL_GPIO_WritePin>
 80072d4:	e02b      	b.n	800732e <checkAktifCalisma+0xe26>
 80072d6:	bf00      	nop
 80072d8:	20000d50 	.word	0x20000d50
 80072dc:	20000d15 	.word	0x20000d15
 80072e0:	20000d14 	.word	0x20000d14
 80072e4:	40011000 	.word	0x40011000
 80072e8:	20000d12 	.word	0x20000d12
 80072ec:	20000d4e 	.word	0x20000d4e
 80072f0:	20000d51 	.word	0x20000d51
 80072f4:	20000d4f 	.word	0x20000d4f
 80072f8:	40010800 	.word	0x40010800
 80072fc:	20000d16 	.word	0x20000d16
 8007300:	20000d18 	.word	0x20000d18
 8007304:	40010c00 	.word	0x40010c00
 8007308:	20000d3b 	.word	0x20000d3b
 800730c:	20000d52 	.word	0x20000d52
 8007310:	20000cb4 	.word	0x20000cb4
 8007314:	20000cb8 	.word	0x20000cb8
 8007318:	20000d26 	.word	0x20000d26
 800731c:	20000d53 	.word	0x20000d53
 8007320:	20000d54 	.word	0x20000d54
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007324:	2200      	movs	r2, #0
 8007326:	2140      	movs	r1, #64	; 0x40
 8007328:	488d      	ldr	r0, [pc, #564]	; (8007560 <checkAktifCalisma+0x1058>)
 800732a:	f002 fcaa 	bl	8009c82 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800732e:	4b8d      	ldr	r3, [pc, #564]	; (8007564 <checkAktifCalisma+0x105c>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <checkAktifCalisma+0xe36>
 8007336:	4b8b      	ldr	r3, [pc, #556]	; (8007564 <checkAktifCalisma+0x105c>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d115      	bne.n	800736a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800733e:	2104      	movs	r1, #4
 8007340:	4889      	ldr	r0, [pc, #548]	; (8007568 <checkAktifCalisma+0x1060>)
 8007342:	f002 fc87 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007346:	4603      	mov	r3, r0
 8007348:	2b01      	cmp	r3, #1
 800734a:	d003      	beq.n	8007354 <checkAktifCalisma+0xe4c>
 800734c:	4b87      	ldr	r3, [pc, #540]	; (800756c <checkAktifCalisma+0x1064>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007354:	2102      	movs	r1, #2
 8007356:	4884      	ldr	r0, [pc, #528]	; (8007568 <checkAktifCalisma+0x1060>)
 8007358:	f002 fc7c 	bl	8009c54 <HAL_GPIO_ReadPin>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007362:	4b83      	ldr	r3, [pc, #524]	; (8007570 <checkAktifCalisma+0x1068>)
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e002      	b.n	8007370 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800736a:	4b81      	ldr	r3, [pc, #516]	; (8007570 <checkAktifCalisma+0x1068>)
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007370:	4b7c      	ldr	r3, [pc, #496]	; (8007564 <checkAktifCalisma+0x105c>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d003      	beq.n	8007380 <checkAktifCalisma+0xe78>
 8007378:	4b7a      	ldr	r3, [pc, #488]	; (8007564 <checkAktifCalisma+0x105c>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d111      	bne.n	80073a4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007380:	2102      	movs	r1, #2
 8007382:	4879      	ldr	r0, [pc, #484]	; (8007568 <checkAktifCalisma+0x1060>)
 8007384:	f002 fc66 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d10a      	bne.n	80073a4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800738e:	2104      	movs	r1, #4
 8007390:	4875      	ldr	r0, [pc, #468]	; (8007568 <checkAktifCalisma+0x1060>)
 8007392:	f002 fc5f 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d103      	bne.n	80073a4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 800739c:	4b75      	ldr	r3, [pc, #468]	; (8007574 <checkAktifCalisma+0x106c>)
 800739e:	2201      	movs	r2, #1
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	e002      	b.n	80073aa <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80073a4:	4b73      	ldr	r3, [pc, #460]	; (8007574 <checkAktifCalisma+0x106c>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80073aa:	4b71      	ldr	r3, [pc, #452]	; (8007570 <checkAktifCalisma+0x1068>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00f      	beq.n	80073d2 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80073b2:	4b71      	ldr	r3, [pc, #452]	; (8007578 <checkAktifCalisma+0x1070>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d10b      	bne.n	80073d2 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80073ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073be:	486f      	ldr	r0, [pc, #444]	; (800757c <checkAktifCalisma+0x1074>)
 80073c0:	f002 fc48 	bl	8009c54 <HAL_GPIO_ReadPin>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80073ca:	4b6d      	ldr	r3, [pc, #436]	; (8007580 <checkAktifCalisma+0x1078>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	e002      	b.n	80073d8 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80073d2:	4b6b      	ldr	r3, [pc, #428]	; (8007580 <checkAktifCalisma+0x1078>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80073d8:	4b66      	ldr	r3, [pc, #408]	; (8007574 <checkAktifCalisma+0x106c>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00f      	beq.n	8007400 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80073e0:	4b65      	ldr	r3, [pc, #404]	; (8007578 <checkAktifCalisma+0x1070>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d10b      	bne.n	8007400 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80073e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073ec:	4863      	ldr	r0, [pc, #396]	; (800757c <checkAktifCalisma+0x1074>)
 80073ee:	f002 fc31 	bl	8009c54 <HAL_GPIO_ReadPin>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80073f8:	4b62      	ldr	r3, [pc, #392]	; (8007584 <checkAktifCalisma+0x107c>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e002      	b.n	8007406 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007400:	4b60      	ldr	r3, [pc, #384]	; (8007584 <checkAktifCalisma+0x107c>)
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007406:	4b60      	ldr	r3, [pc, #384]	; (8007588 <checkAktifCalisma+0x1080>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d137      	bne.n	800747e <checkAktifCalisma+0xf76>
 800740e:	4b5f      	ldr	r3, [pc, #380]	; (800758c <checkAktifCalisma+0x1084>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d003      	beq.n	800741e <checkAktifCalisma+0xf16>
 8007416:	4b5d      	ldr	r3, [pc, #372]	; (800758c <checkAktifCalisma+0x1084>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b03      	cmp	r3, #3
 800741c:	d12f      	bne.n	800747e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800741e:	4b54      	ldr	r3, [pc, #336]	; (8007570 <checkAktifCalisma+0x1068>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <checkAktifCalisma+0xf26>
 8007426:	4b53      	ldr	r3, [pc, #332]	; (8007574 <checkAktifCalisma+0x106c>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d027      	beq.n	800747e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800742e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007432:	484d      	ldr	r0, [pc, #308]	; (8007568 <checkAktifCalisma+0x1060>)
 8007434:	f002 fc0e 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <checkAktifCalisma+0xf3e>
 800743e:	4b4e      	ldr	r3, [pc, #312]	; (8007578 <checkAktifCalisma+0x1070>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007446:	4b4e      	ldr	r3, [pc, #312]	; (8007580 <checkAktifCalisma+0x1078>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <checkAktifCalisma+0xf4e>
 800744e:	4b4d      	ldr	r3, [pc, #308]	; (8007584 <checkAktifCalisma+0x107c>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d013      	beq.n	800747e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007456:	4b4e      	ldr	r3, [pc, #312]	; (8007590 <checkAktifCalisma+0x1088>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00f      	beq.n	800747e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800745e:	4b4d      	ldr	r3, [pc, #308]	; (8007594 <checkAktifCalisma+0x108c>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f083 0301 	eor.w	r3, r3, #1
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 800746c:	4b4a      	ldr	r3, [pc, #296]	; (8007598 <checkAktifCalisma+0x1090>)
 800746e:	2201      	movs	r2, #1
 8007470:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007472:	4b4a      	ldr	r3, [pc, #296]	; (800759c <checkAktifCalisma+0x1094>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a4a      	ldr	r2, [pc, #296]	; (80075a0 <checkAktifCalisma+0x1098>)
 8007478:	6013      	str	r3, [r2, #0]
			bekle();
 800747a:	f7fe fe0f 	bl	800609c <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800747e:	4b47      	ldr	r3, [pc, #284]	; (800759c <checkAktifCalisma+0x1094>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b47      	ldr	r3, [pc, #284]	; (80075a0 <checkAktifCalisma+0x1098>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	4a46      	ldr	r2, [pc, #280]	; (80075a4 <checkAktifCalisma+0x109c>)
 800748a:	7812      	ldrb	r2, [r2, #0]
 800748c:	4293      	cmp	r3, r2
 800748e:	d214      	bcs.n	80074ba <checkAktifCalisma+0xfb2>
 8007490:	4b37      	ldr	r3, [pc, #220]	; (8007570 <checkAktifCalisma+0x1068>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f083 0301 	eor.w	r3, r3, #1
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d006      	beq.n	80074ac <checkAktifCalisma+0xfa4>
 800749e:	4b35      	ldr	r3, [pc, #212]	; (8007574 <checkAktifCalisma+0x106c>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	f083 0301 	eor.w	r3, r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <checkAktifCalisma+0xfb2>
 80074ac:	4b38      	ldr	r3, [pc, #224]	; (8007590 <checkAktifCalisma+0x1088>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f083 0301 	eor.w	r3, r3, #1
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80074ba:	4b37      	ldr	r3, [pc, #220]	; (8007598 <checkAktifCalisma+0x1090>)
 80074bc:	2200      	movs	r2, #0
 80074be:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80074c0:	4b31      	ldr	r3, [pc, #196]	; (8007588 <checkAktifCalisma+0x1080>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d12b      	bne.n	8007520 <checkAktifCalisma+0x1018>
 80074c8:	4b30      	ldr	r3, [pc, #192]	; (800758c <checkAktifCalisma+0x1084>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d003      	beq.n	80074d8 <checkAktifCalisma+0xfd0>
 80074d0:	4b2e      	ldr	r3, [pc, #184]	; (800758c <checkAktifCalisma+0x1084>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d123      	bne.n	8007520 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <checkAktifCalisma+0x1068>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d103      	bne.n	80074e8 <checkAktifCalisma+0xfe0>
 80074e0:	4b24      	ldr	r3, [pc, #144]	; (8007574 <checkAktifCalisma+0x106c>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01b      	beq.n	8007520 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80074e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074ec:	481e      	ldr	r0, [pc, #120]	; (8007568 <checkAktifCalisma+0x1060>)
 80074ee:	f002 fbb1 	bl	8009c54 <HAL_GPIO_ReadPin>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d103      	bne.n	8007500 <checkAktifCalisma+0xff8>
 80074f8:	4b1f      	ldr	r3, [pc, #124]	; (8007578 <checkAktifCalisma+0x1070>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007500:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <checkAktifCalisma+0x1078>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d103      	bne.n	8007510 <checkAktifCalisma+0x1008>
 8007508:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <checkAktifCalisma+0x107c>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007510:	4b1f      	ldr	r3, [pc, #124]	; (8007590 <checkAktifCalisma+0x1088>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007518:	4b23      	ldr	r3, [pc, #140]	; (80075a8 <checkAktifCalisma+0x10a0>)
 800751a:	2201      	movs	r2, #1
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	e002      	b.n	8007526 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007520:	4b21      	ldr	r3, [pc, #132]	; (80075a8 <checkAktifCalisma+0x10a0>)
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <checkAktifCalisma+0x1080>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d140      	bne.n	80075b0 <checkAktifCalisma+0x10a8>
 800752e:	4b17      	ldr	r3, [pc, #92]	; (800758c <checkAktifCalisma+0x1084>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d003      	beq.n	800753e <checkAktifCalisma+0x1036>
 8007536:	4b15      	ldr	r3, [pc, #84]	; (800758c <checkAktifCalisma+0x1084>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b03      	cmp	r3, #3
 800753c:	d138      	bne.n	80075b0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800753e:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <checkAktifCalisma+0x1068>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <checkAktifCalisma+0x1046>
 8007546:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <checkAktifCalisma+0x106c>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d030      	beq.n	80075b0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800754e:	4b10      	ldr	r3, [pc, #64]	; (8007590 <checkAktifCalisma+0x1088>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d02c      	beq.n	80075b0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <checkAktifCalisma+0x10a4>)
 8007558:	2201      	movs	r2, #1
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	e02b      	b.n	80075b6 <checkAktifCalisma+0x10ae>
 800755e:	bf00      	nop
 8007560:	40010800 	.word	0x40010800
 8007564:	20000d19 	.word	0x20000d19
 8007568:	40011000 	.word	0x40011000
 800756c:	20000d12 	.word	0x20000d12
 8007570:	20000d58 	.word	0x20000d58
 8007574:	20000d59 	.word	0x20000d59
 8007578:	20000d18 	.word	0x20000d18
 800757c:	40010c00 	.word	0x40010c00
 8007580:	20000d68 	.word	0x20000d68
 8007584:	20000d69 	.word	0x20000d69
 8007588:	20000d17 	.word	0x20000d17
 800758c:	20000d14 	.word	0x20000d14
 8007590:	20000d4e 	.word	0x20000d4e
 8007594:	20000d3b 	.word	0x20000d3b
 8007598:	20000d55 	.word	0x20000d55
 800759c:	20000cb4 	.word	0x20000cb4
 80075a0:	20000cb8 	.word	0x20000cb8
 80075a4:	20000d27 	.word	0x20000d27
 80075a8:	20000d56 	.word	0x20000d56
 80075ac:	20000d57 	.word	0x20000d57
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80075b0:	4b89      	ldr	r3, [pc, #548]	; (80077d8 <checkAktifCalisma+0x12d0>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80075b6:	4b89      	ldr	r3, [pc, #548]	; (80077dc <checkAktifCalisma+0x12d4>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d107      	bne.n	80075ce <checkAktifCalisma+0x10c6>
 80075be:	4b88      	ldr	r3, [pc, #544]	; (80077e0 <checkAktifCalisma+0x12d8>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d103      	bne.n	80075ce <checkAktifCalisma+0x10c6>
 80075c6:	4b84      	ldr	r3, [pc, #528]	; (80077d8 <checkAktifCalisma+0x12d0>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80075ce:	2201      	movs	r2, #1
 80075d0:	2120      	movs	r1, #32
 80075d2:	4884      	ldr	r0, [pc, #528]	; (80077e4 <checkAktifCalisma+0x12dc>)
 80075d4:	f002 fb55 	bl	8009c82 <HAL_GPIO_WritePin>
 80075d8:	e004      	b.n	80075e4 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80075da:	2200      	movs	r2, #0
 80075dc:	2120      	movs	r1, #32
 80075de:	4881      	ldr	r0, [pc, #516]	; (80077e4 <checkAktifCalisma+0x12dc>)
 80075e0:	f002 fb4f 	bl	8009c82 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80075e4:	4b80      	ldr	r3, [pc, #512]	; (80077e8 <checkAktifCalisma+0x12e0>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00e      	beq.n	800760a <checkAktifCalisma+0x1102>
 80075ec:	2102      	movs	r1, #2
 80075ee:	487f      	ldr	r0, [pc, #508]	; (80077ec <checkAktifCalisma+0x12e4>)
 80075f0:	f002 fb30 	bl	8009c54 <HAL_GPIO_ReadPin>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d107      	bne.n	800760a <checkAktifCalisma+0x1102>
 80075fa:	4b7d      	ldr	r3, [pc, #500]	; (80077f0 <checkAktifCalisma+0x12e8>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <checkAktifCalisma+0x1102>
 8007602:	4b7c      	ldr	r3, [pc, #496]	; (80077f4 <checkAktifCalisma+0x12ec>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d112      	bne.n	8007630 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800760a:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <checkAktifCalisma+0x12f0>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d066      	beq.n	80076e0 <checkAktifCalisma+0x11d8>
 8007612:	2104      	movs	r1, #4
 8007614:	4875      	ldr	r0, [pc, #468]	; (80077ec <checkAktifCalisma+0x12e4>)
 8007616:	f002 fb1d 	bl	8009c54 <HAL_GPIO_ReadPin>
 800761a:	4603      	mov	r3, r0
 800761c:	2b01      	cmp	r3, #1
 800761e:	d15f      	bne.n	80076e0 <checkAktifCalisma+0x11d8>
 8007620:	4b73      	ldr	r3, [pc, #460]	; (80077f0 <checkAktifCalisma+0x12e8>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d05b      	beq.n	80076e0 <checkAktifCalisma+0x11d8>
 8007628:	4b72      	ldr	r3, [pc, #456]	; (80077f4 <checkAktifCalisma+0x12ec>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d057      	beq.n	80076e0 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007630:	4b72      	ldr	r3, [pc, #456]	; (80077fc <checkAktifCalisma+0x12f4>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	b2da      	uxtb	r2, r3
 8007638:	4b70      	ldr	r3, [pc, #448]	; (80077fc <checkAktifCalisma+0x12f4>)
 800763a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 800763c:	4b6f      	ldr	r3, [pc, #444]	; (80077fc <checkAktifCalisma+0x12f4>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b09      	cmp	r3, #9
 8007642:	d908      	bls.n	8007656 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007644:	4b6d      	ldr	r3, [pc, #436]	; (80077fc <checkAktifCalisma+0x12f4>)
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800764a:	4b6d      	ldr	r3, [pc, #436]	; (8007800 <checkAktifCalisma+0x12f8>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	3301      	adds	r3, #1
 8007650:	b2da      	uxtb	r2, r3
 8007652:	4b6b      	ldr	r3, [pc, #428]	; (8007800 <checkAktifCalisma+0x12f8>)
 8007654:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007656:	4b6a      	ldr	r3, [pc, #424]	; (8007800 <checkAktifCalisma+0x12f8>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b09      	cmp	r3, #9
 800765c:	d908      	bls.n	8007670 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800765e:	4b68      	ldr	r3, [pc, #416]	; (8007800 <checkAktifCalisma+0x12f8>)
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007664:	4b67      	ldr	r3, [pc, #412]	; (8007804 <checkAktifCalisma+0x12fc>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	4b65      	ldr	r3, [pc, #404]	; (8007804 <checkAktifCalisma+0x12fc>)
 800766e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007670:	4b64      	ldr	r3, [pc, #400]	; (8007804 <checkAktifCalisma+0x12fc>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b09      	cmp	r3, #9
 8007676:	d908      	bls.n	800768a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007678:	4b62      	ldr	r3, [pc, #392]	; (8007804 <checkAktifCalisma+0x12fc>)
 800767a:	2200      	movs	r2, #0
 800767c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800767e:	4b62      	ldr	r3, [pc, #392]	; (8007808 <checkAktifCalisma+0x1300>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	4b60      	ldr	r3, [pc, #384]	; (8007808 <checkAktifCalisma+0x1300>)
 8007688:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 800768a:	4b5f      	ldr	r3, [pc, #380]	; (8007808 <checkAktifCalisma+0x1300>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b09      	cmp	r3, #9
 8007690:	d908      	bls.n	80076a4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007692:	4b5d      	ldr	r3, [pc, #372]	; (8007808 <checkAktifCalisma+0x1300>)
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007698:	4b5c      	ldr	r3, [pc, #368]	; (800780c <checkAktifCalisma+0x1304>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	3301      	adds	r3, #1
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	4b5a      	ldr	r3, [pc, #360]	; (800780c <checkAktifCalisma+0x1304>)
 80076a2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80076a4:	4b59      	ldr	r3, [pc, #356]	; (800780c <checkAktifCalisma+0x1304>)
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	4b59      	ldr	r3, [pc, #356]	; (8007810 <checkAktifCalisma+0x1308>)
 80076aa:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80076ae:	4b56      	ldr	r3, [pc, #344]	; (8007808 <checkAktifCalisma+0x1300>)
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	4b57      	ldr	r3, [pc, #348]	; (8007810 <checkAktifCalisma+0x1308>)
 80076b4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80076b6:	4b53      	ldr	r3, [pc, #332]	; (8007804 <checkAktifCalisma+0x12fc>)
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	4b55      	ldr	r3, [pc, #340]	; (8007810 <checkAktifCalisma+0x1308>)
 80076bc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80076be:	4b50      	ldr	r3, [pc, #320]	; (8007800 <checkAktifCalisma+0x12f8>)
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	4b53      	ldr	r3, [pc, #332]	; (8007810 <checkAktifCalisma+0x1308>)
 80076c4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80076c6:	4b4d      	ldr	r3, [pc, #308]	; (80077fc <checkAktifCalisma+0x12f4>)
 80076c8:	781a      	ldrb	r2, [r3, #0]
 80076ca:	4b51      	ldr	r3, [pc, #324]	; (8007810 <checkAktifCalisma+0x1308>)
 80076cc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80076ce:	4b51      	ldr	r3, [pc, #324]	; (8007814 <checkAktifCalisma+0x130c>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80076d4:	4b44      	ldr	r3, [pc, #272]	; (80077e8 <checkAktifCalisma+0x12e0>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80076da:	4b47      	ldr	r3, [pc, #284]	; (80077f8 <checkAktifCalisma+0x12f0>)
 80076dc:	2200      	movs	r2, #0
 80076de:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80076e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80076e4:	484c      	ldr	r0, [pc, #304]	; (8007818 <checkAktifCalisma+0x1310>)
 80076e6:	f002 fab5 	bl	8009c54 <HAL_GPIO_ReadPin>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d016      	beq.n	800771e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80076f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076f4:	4848      	ldr	r0, [pc, #288]	; (8007818 <checkAktifCalisma+0x1310>)
 80076f6:	f002 faad 	bl	8009c54 <HAL_GPIO_ReadPin>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007704:	4844      	ldr	r0, [pc, #272]	; (8007818 <checkAktifCalisma+0x1310>)
 8007706:	f002 faa5 	bl	8009c54 <HAL_GPIO_ReadPin>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d006      	beq.n	800771e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007710:	2140      	movs	r1, #64	; 0x40
 8007712:	4836      	ldr	r0, [pc, #216]	; (80077ec <checkAktifCalisma+0x12e4>)
 8007714:	f002 fa9e 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d103      	bne.n	8007726 <checkAktifCalisma+0x121e>
			startBasili=1;
 800771e:	4b3f      	ldr	r3, [pc, #252]	; (800781c <checkAktifCalisma+0x1314>)
 8007720:	2201      	movs	r2, #1
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	e002      	b.n	800772c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007726:	4b3d      	ldr	r3, [pc, #244]	; (800781c <checkAktifCalisma+0x1314>)
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800772c:	4b3b      	ldr	r3, [pc, #236]	; (800781c <checkAktifCalisma+0x1314>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d014      	beq.n	800775e <checkAktifCalisma+0x1256>
 8007734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007738:	4837      	ldr	r0, [pc, #220]	; (8007818 <checkAktifCalisma+0x1310>)
 800773a:	f002 fa8b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800773e:	4603      	mov	r3, r0
 8007740:	2b01      	cmp	r3, #1
 8007742:	d10c      	bne.n	800775e <checkAktifCalisma+0x1256>
			hataVar=1;
 8007744:	4b36      	ldr	r3, [pc, #216]	; (8007820 <checkAktifCalisma+0x1318>)
 8007746:	2201      	movs	r2, #1
 8007748:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800774a:	2001      	movs	r0, #1
 800774c:	f7fe f89c 	bl	8005888 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007750:	2001      	movs	r0, #1
 8007752:	f7fe fc27 	bl	8005fa4 <hata2EEPROM>
			acilstophatasi=1;
 8007756:	4b33      	ldr	r3, [pc, #204]	; (8007824 <checkAktifCalisma+0x131c>)
 8007758:	2201      	movs	r2, #1
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	e018      	b.n	8007790 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800775e:	4b31      	ldr	r3, [pc, #196]	; (8007824 <checkAktifCalisma+0x131c>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d014      	beq.n	8007790 <checkAktifCalisma+0x1288>
 8007766:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800776a:	482b      	ldr	r0, [pc, #172]	; (8007818 <checkAktifCalisma+0x1310>)
 800776c:	f002 fa72 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10c      	bne.n	8007790 <checkAktifCalisma+0x1288>
 8007776:	4b29      	ldr	r3, [pc, #164]	; (800781c <checkAktifCalisma+0x1314>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	f083 0301 	eor.w	r3, r3, #1
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007784:	4b27      	ldr	r3, [pc, #156]	; (8007824 <checkAktifCalisma+0x131c>)
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800778a:	2001      	movs	r0, #1
 800778c:	f7fe f828 	bl	80057e0 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007790:	4b25      	ldr	r3, [pc, #148]	; (8007828 <checkAktifCalisma+0x1320>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f083 0301 	eor.w	r3, r3, #1
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d04c      	beq.n	8007838 <checkAktifCalisma+0x1330>
 800779e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80077a2:	481d      	ldr	r0, [pc, #116]	; (8007818 <checkAktifCalisma+0x1310>)
 80077a4:	f002 fa56 	bl	8009c54 <HAL_GPIO_ReadPin>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <checkAktifCalisma+0x12ae>
 80077ae:	4b1f      	ldr	r3, [pc, #124]	; (800782c <checkAktifCalisma+0x1324>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d040      	beq.n	8007838 <checkAktifCalisma+0x1330>
 80077b6:	4b1e      	ldr	r3, [pc, #120]	; (8007830 <checkAktifCalisma+0x1328>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d13c      	bne.n	8007838 <checkAktifCalisma+0x1330>
			hataVar=1;
 80077be:	4b18      	ldr	r3, [pc, #96]	; (8007820 <checkAktifCalisma+0x1318>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80077c4:	2002      	movs	r0, #2
 80077c6:	f7fe f85f 	bl	8005888 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80077ca:	2002      	movs	r0, #2
 80077cc:	f7fe fbea 	bl	8005fa4 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80077d0:	4b18      	ldr	r3, [pc, #96]	; (8007834 <checkAktifCalisma+0x132c>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	e047      	b.n	8007868 <checkAktifCalisma+0x1360>
 80077d8:	20000d57 	.word	0x20000d57
 80077dc:	20000d56 	.word	0x20000d56
 80077e0:	20000d55 	.word	0x20000d55
 80077e4:	40010800 	.word	0x40010800
 80077e8:	20000d4b 	.word	0x20000d4b
 80077ec:	40011000 	.word	0x40011000
 80077f0:	20000d12 	.word	0x20000d12
 80077f4:	20000d4e 	.word	0x20000d4e
 80077f8:	20000d4c 	.word	0x20000d4c
 80077fc:	20000d09 	.word	0x20000d09
 8007800:	20000d0a 	.word	0x20000d0a
 8007804:	200009b4 	.word	0x200009b4
 8007808:	200009b5 	.word	0x200009b5
 800780c:	20000d0b 	.word	0x20000d0b
 8007810:	20000c38 	.word	0x20000c38
 8007814:	20000d38 	.word	0x20000d38
 8007818:	40010c00 	.word	0x40010c00
 800781c:	20000d5a 	.word	0x20000d5a
 8007820:	20000d61 	.word	0x20000d61
 8007824:	20000d5c 	.word	0x20000d5c
 8007828:	20000d63 	.word	0x20000d63
 800782c:	20000d6d 	.word	0x20000d6d
 8007830:	20000d10 	.word	0x20000d10
 8007834:	20000d5d 	.word	0x20000d5d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007838:	4b97      	ldr	r3, [pc, #604]	; (8007a98 <checkAktifCalisma+0x1590>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d013      	beq.n	8007868 <checkAktifCalisma+0x1360>
 8007840:	4b96      	ldr	r3, [pc, #600]	; (8007a9c <checkAktifCalisma+0x1594>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00f      	beq.n	8007868 <checkAktifCalisma+0x1360>
 8007848:	4b95      	ldr	r3, [pc, #596]	; (8007aa0 <checkAktifCalisma+0x1598>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	f083 0301 	eor.w	r3, r3, #1
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d008      	beq.n	8007868 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007856:	4b90      	ldr	r3, [pc, #576]	; (8007a98 <checkAktifCalisma+0x1590>)
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 800785c:	4b91      	ldr	r3, [pc, #580]	; (8007aa4 <checkAktifCalisma+0x159c>)
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007862:	2002      	movs	r0, #2
 8007864:	f7fd ffbc 	bl	80057e0 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007868:	4b8f      	ldr	r3, [pc, #572]	; (8007aa8 <checkAktifCalisma+0x15a0>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d11c      	bne.n	80078aa <checkAktifCalisma+0x13a2>
 8007870:	4b8e      	ldr	r3, [pc, #568]	; (8007aac <checkAktifCalisma+0x15a4>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d118      	bne.n	80078aa <checkAktifCalisma+0x13a2>
 8007878:	4b8d      	ldr	r3, [pc, #564]	; (8007ab0 <checkAktifCalisma+0x15a8>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d014      	beq.n	80078aa <checkAktifCalisma+0x13a2>
 8007880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007884:	488b      	ldr	r0, [pc, #556]	; (8007ab4 <checkAktifCalisma+0x15ac>)
 8007886:	f002 f9e5 	bl	8009c54 <HAL_GPIO_ReadPin>
 800788a:	4603      	mov	r3, r0
 800788c:	2b01      	cmp	r3, #1
 800788e:	d10c      	bne.n	80078aa <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007890:	4b89      	ldr	r3, [pc, #548]	; (8007ab8 <checkAktifCalisma+0x15b0>)
 8007892:	2201      	movs	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007896:	2003      	movs	r0, #3
 8007898:	f7fd fff6 	bl	8005888 <hataKoduLcdGoster>
			hata2EEPROM(3);
 800789c:	2003      	movs	r0, #3
 800789e:	f7fe fb81 	bl	8005fa4 <hata2EEPROM>
			basinchatasi=1;
 80078a2:	4b86      	ldr	r3, [pc, #536]	; (8007abc <checkAktifCalisma+0x15b4>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e015      	b.n	80078d6 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80078aa:	4b84      	ldr	r3, [pc, #528]	; (8007abc <checkAktifCalisma+0x15b4>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d011      	beq.n	80078d6 <checkAktifCalisma+0x13ce>
 80078b2:	4b7d      	ldr	r3, [pc, #500]	; (8007aa8 <checkAktifCalisma+0x15a0>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10d      	bne.n	80078d6 <checkAktifCalisma+0x13ce>
 80078ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078be:	4880      	ldr	r0, [pc, #512]	; (8007ac0 <checkAktifCalisma+0x15b8>)
 80078c0:	f002 f9c8 	bl	8009c54 <HAL_GPIO_ReadPin>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d105      	bne.n	80078d6 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80078ca:	4b7c      	ldr	r3, [pc, #496]	; (8007abc <checkAktifCalisma+0x15b4>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80078d0:	2003      	movs	r0, #3
 80078d2:	f7fd ff85 	bl	80057e0 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80078d6:	4b7b      	ldr	r3, [pc, #492]	; (8007ac4 <checkAktifCalisma+0x15bc>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d103      	bne.n	80078e6 <checkAktifCalisma+0x13de>
 80078de:	4b7a      	ldr	r3, [pc, #488]	; (8007ac8 <checkAktifCalisma+0x15c0>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01c      	beq.n	8007920 <checkAktifCalisma+0x1418>
 80078e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078ea:	4878      	ldr	r0, [pc, #480]	; (8007acc <checkAktifCalisma+0x15c4>)
 80078ec:	f002 f9b2 	bl	8009c54 <HAL_GPIO_ReadPin>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d114      	bne.n	8007920 <checkAktifCalisma+0x1418>
 80078f6:	4b76      	ldr	r3, [pc, #472]	; (8007ad0 <checkAktifCalisma+0x15c8>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d003      	beq.n	8007906 <checkAktifCalisma+0x13fe>
 80078fe:	4b74      	ldr	r3, [pc, #464]	; (8007ad0 <checkAktifCalisma+0x15c8>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b03      	cmp	r3, #3
 8007904:	d10c      	bne.n	8007920 <checkAktifCalisma+0x1418>
			hataVar=1;
 8007906:	4b6c      	ldr	r3, [pc, #432]	; (8007ab8 <checkAktifCalisma+0x15b0>)
 8007908:	2201      	movs	r2, #1
 800790a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800790c:	2004      	movs	r0, #4
 800790e:	f7fd ffbb 	bl	8005888 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007912:	2004      	movs	r0, #4
 8007914:	f7fe fb46 	bl	8005fa4 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007918:	4b6e      	ldr	r3, [pc, #440]	; (8007ad4 <checkAktifCalisma+0x15cc>)
 800791a:	2201      	movs	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e01f      	b.n	8007960 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007920:	4b6c      	ldr	r3, [pc, #432]	; (8007ad4 <checkAktifCalisma+0x15cc>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01b      	beq.n	8007960 <checkAktifCalisma+0x1458>
 8007928:	4b6b      	ldr	r3, [pc, #428]	; (8007ad8 <checkAktifCalisma+0x15d0>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d017      	beq.n	8007960 <checkAktifCalisma+0x1458>
 8007930:	4b64      	ldr	r3, [pc, #400]	; (8007ac4 <checkAktifCalisma+0x15bc>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	f083 0301 	eor.w	r3, r3, #1
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d010      	beq.n	8007960 <checkAktifCalisma+0x1458>
 800793e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007942:	4862      	ldr	r0, [pc, #392]	; (8007acc <checkAktifCalisma+0x15c4>)
 8007944:	f002 f986 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d108      	bne.n	8007960 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 800794e:	4b61      	ldr	r3, [pc, #388]	; (8007ad4 <checkAktifCalisma+0x15cc>)
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007954:	4b5c      	ldr	r3, [pc, #368]	; (8007ac8 <checkAktifCalisma+0x15c0>)
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800795a:	2004      	movs	r0, #4
 800795c:	f7fd ff40 	bl	80057e0 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007960:	4b58      	ldr	r3, [pc, #352]	; (8007ac4 <checkAktifCalisma+0x15bc>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <checkAktifCalisma+0x1468>
 8007968:	4b5c      	ldr	r3, [pc, #368]	; (8007adc <checkAktifCalisma+0x15d4>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01c      	beq.n	80079aa <checkAktifCalisma+0x14a2>
 8007970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007974:	4855      	ldr	r0, [pc, #340]	; (8007acc <checkAktifCalisma+0x15c4>)
 8007976:	f002 f96d 	bl	8009c54 <HAL_GPIO_ReadPin>
 800797a:	4603      	mov	r3, r0
 800797c:	2b01      	cmp	r3, #1
 800797e:	d114      	bne.n	80079aa <checkAktifCalisma+0x14a2>
 8007980:	4b53      	ldr	r3, [pc, #332]	; (8007ad0 <checkAktifCalisma+0x15c8>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d003      	beq.n	8007990 <checkAktifCalisma+0x1488>
 8007988:	4b51      	ldr	r3, [pc, #324]	; (8007ad0 <checkAktifCalisma+0x15c8>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d10c      	bne.n	80079aa <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007990:	4b49      	ldr	r3, [pc, #292]	; (8007ab8 <checkAktifCalisma+0x15b0>)
 8007992:	2201      	movs	r2, #1
 8007994:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007996:	2005      	movs	r0, #5
 8007998:	f7fd ff76 	bl	8005888 <hataKoduLcdGoster>
			hata2EEPROM(5);
 800799c:	2005      	movs	r0, #5
 800799e:	f7fe fb01 	bl	8005fa4 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80079a2:	4b4f      	ldr	r3, [pc, #316]	; (8007ae0 <checkAktifCalisma+0x15d8>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	e023      	b.n	80079f2 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80079aa:	4b4d      	ldr	r3, [pc, #308]	; (8007ae0 <checkAktifCalisma+0x15d8>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d01f      	beq.n	80079f2 <checkAktifCalisma+0x14ea>
 80079b2:	4b49      	ldr	r3, [pc, #292]	; (8007ad8 <checkAktifCalisma+0x15d0>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01b      	beq.n	80079f2 <checkAktifCalisma+0x14ea>
 80079ba:	4b42      	ldr	r3, [pc, #264]	; (8007ac4 <checkAktifCalisma+0x15bc>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	f083 0301 	eor.w	r3, r3, #1
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d014      	beq.n	80079f2 <checkAktifCalisma+0x14ea>
 80079c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079cc:	483f      	ldr	r0, [pc, #252]	; (8007acc <checkAktifCalisma+0x15c4>)
 80079ce:	f002 f941 	bl	8009c54 <HAL_GPIO_ReadPin>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10c      	bne.n	80079f2 <checkAktifCalisma+0x14ea>
 80079d8:	4b3f      	ldr	r3, [pc, #252]	; (8007ad8 <checkAktifCalisma+0x15d0>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d008      	beq.n	80079f2 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80079e0:	4b3f      	ldr	r3, [pc, #252]	; (8007ae0 <checkAktifCalisma+0x15d8>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80079e6:	4b3d      	ldr	r3, [pc, #244]	; (8007adc <checkAktifCalisma+0x15d4>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80079ec:	2005      	movs	r0, #5
 80079ee:	f7fd fef7 	bl	80057e0 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80079f2:	4b2f      	ldr	r3, [pc, #188]	; (8007ab0 <checkAktifCalisma+0x15a8>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d107      	bne.n	8007a0a <checkAktifCalisma+0x1502>
 80079fa:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <checkAktifCalisma+0x1598>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <checkAktifCalisma+0x1502>
 8007a02:	4b38      	ldr	r3, [pc, #224]	; (8007ae4 <checkAktifCalisma+0x15dc>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d014      	beq.n	8007a34 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007a0a:	4b37      	ldr	r3, [pc, #220]	; (8007ae8 <checkAktifCalisma+0x15e0>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b37      	ldr	r3, [pc, #220]	; (8007aec <checkAktifCalisma+0x15e4>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	4a36      	ldr	r2, [pc, #216]	; (8007af0 <checkAktifCalisma+0x15e8>)
 8007a16:	7812      	ldrb	r2, [r2, #0]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d30b      	bcc.n	8007a34 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007a1c:	4b26      	ldr	r3, [pc, #152]	; (8007ab8 <checkAktifCalisma+0x15b0>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007a22:	2006      	movs	r0, #6
 8007a24:	f7fd ff30 	bl	8005888 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007a28:	2006      	movs	r0, #6
 8007a2a:	f7fe fabb 	bl	8005fa4 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007a2e:	4b31      	ldr	r3, [pc, #196]	; (8007af4 <checkAktifCalisma+0x15ec>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007a34:	4b2f      	ldr	r3, [pc, #188]	; (8007af4 <checkAktifCalisma+0x15ec>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d013      	beq.n	8007a64 <checkAktifCalisma+0x155c>
 8007a3c:	2108      	movs	r1, #8
 8007a3e:	4823      	ldr	r0, [pc, #140]	; (8007acc <checkAktifCalisma+0x15c4>)
 8007a40:	f002 f908 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00c      	beq.n	8007a64 <checkAktifCalisma+0x155c>
 8007a4a:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <checkAktifCalisma+0x15bc>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f083 0301 	eor.w	r3, r3, #1
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007a58:	4b26      	ldr	r3, [pc, #152]	; (8007af4 <checkAktifCalisma+0x15ec>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007a5e:	2006      	movs	r0, #6
 8007a60:	f7fd febe 	bl	80057e0 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007a64:	4b24      	ldr	r3, [pc, #144]	; (8007af8 <checkAktifCalisma+0x15f0>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <checkAktifCalisma+0x157c>
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <checkAktifCalisma+0x1598>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d107      	bne.n	8007a84 <checkAktifCalisma+0x157c>
 8007a74:	4b21      	ldr	r3, [pc, #132]	; (8007afc <checkAktifCalisma+0x15f4>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d103      	bne.n	8007a84 <checkAktifCalisma+0x157c>
 8007a7c:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <checkAktifCalisma+0x15dc>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d03f      	beq.n	8007b04 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007a84:	4b1e      	ldr	r3, [pc, #120]	; (8007b00 <checkAktifCalisma+0x15f8>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <checkAktifCalisma+0x15c0>)
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007a90:	4b12      	ldr	r3, [pc, #72]	; (8007adc <checkAktifCalisma+0x15d4>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	e03c      	b.n	8007b12 <checkAktifCalisma+0x160a>
 8007a98:	20000d5d 	.word	0x20000d5d
 8007a9c:	20000d63 	.word	0x20000d63
 8007aa0:	20000d44 	.word	0x20000d44
 8007aa4:	20000d6d 	.word	0x20000d6d
 8007aa8:	20000d0f 	.word	0x20000d0f
 8007aac:	20000d13 	.word	0x20000d13
 8007ab0:	20000d60 	.word	0x20000d60
 8007ab4:	40011000 	.word	0x40011000
 8007ab8:	20000d61 	.word	0x20000d61
 8007abc:	20000d6a 	.word	0x20000d6a
 8007ac0:	40010c00 	.word	0x40010c00
 8007ac4:	20000d5a 	.word	0x20000d5a
 8007ac8:	20000d6e 	.word	0x20000d6e
 8007acc:	40010800 	.word	0x40010800
 8007ad0:	20000d14 	.word	0x20000d14
 8007ad4:	20000d6b 	.word	0x20000d6b
 8007ad8:	20000d4e 	.word	0x20000d4e
 8007adc:	20000d6f 	.word	0x20000d6f
 8007ae0:	20000d6c 	.word	0x20000d6c
 8007ae4:	20000d43 	.word	0x20000d43
 8007ae8:	20000cb4 	.word	0x20000cb4
 8007aec:	20000cc8 	.word	0x20000cc8
 8007af0:	20000d24 	.word	0x20000d24
 8007af4:	20000d5b 	.word	0x20000d5b
 8007af8:	20000d41 	.word	0x20000d41
 8007afc:	20000d42 	.word	0x20000d42
 8007b00:	20000d62 	.word	0x20000d62
		} else {
			makineCalisiyor=1;
 8007b04:	4b1e      	ldr	r3, [pc, #120]	; (8007b80 <checkAktifCalisma+0x1678>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <checkAktifCalisma+0x167c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <checkAktifCalisma+0x1680>)
 8007b10:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007b12:	4b1e      	ldr	r3, [pc, #120]	; (8007b8c <checkAktifCalisma+0x1684>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d02f      	beq.n	8007b7a <checkAktifCalisma+0x1672>
 8007b1a:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <checkAktifCalisma+0x1688>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	f083 0301 	eor.w	r3, r3, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d028      	beq.n	8007b7a <checkAktifCalisma+0x1672>
 8007b28:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <checkAktifCalisma+0x168c>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	f083 0301 	eor.w	r3, r3, #1
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d021      	beq.n	8007b7a <checkAktifCalisma+0x1672>
 8007b36:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <checkAktifCalisma+0x1690>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f083 0301 	eor.w	r3, r3, #1
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01a      	beq.n	8007b7a <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007b44:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <checkAktifCalisma+0x1694>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f083 0301 	eor.w	r3, r3, #1
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d013      	beq.n	8007b7a <checkAktifCalisma+0x1672>
 8007b52:	4b13      	ldr	r3, [pc, #76]	; (8007ba0 <checkAktifCalisma+0x1698>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	f083 0301 	eor.w	r3, r3, #1
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <checkAktifCalisma+0x1672>
 8007b60:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <checkAktifCalisma+0x169c>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f083 0301 	eor.w	r3, r3, #1
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <checkAktifCalisma+0x1672>
			hataVar=0;
 8007b6e:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <checkAktifCalisma+0x1684>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007b74:	2007      	movs	r0, #7
 8007b76:	f7fd fe33 	bl	80057e0 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007b7a:	bf00      	nop
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000d62 	.word	0x20000d62
 8007b84:	20000cb4 	.word	0x20000cb4
 8007b88:	20000cc8 	.word	0x20000cc8
 8007b8c:	20000d61 	.word	0x20000d61
 8007b90:	20000d5c 	.word	0x20000d5c
 8007b94:	20000d5d 	.word	0x20000d5d
 8007b98:	20000d6a 	.word	0x20000d6a
 8007b9c:	20000d6b 	.word	0x20000d6b
 8007ba0:	20000d6c 	.word	0x20000d6c
 8007ba4:	20000d5b 	.word	0x20000d5b

08007ba8 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007bac:	4b8b      	ldr	r3, [pc, #556]	; (8007ddc <checkDemoModCalisma+0x234>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	f040 8229 	bne.w	8008008 <checkDemoModCalisma+0x460>
 8007bb6:	4b8a      	ldr	r3, [pc, #552]	; (8007de0 <checkDemoModCalisma+0x238>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8224 	beq.w	8008008 <checkDemoModCalisma+0x460>
 8007bc0:	4b88      	ldr	r3, [pc, #544]	; (8007de4 <checkDemoModCalisma+0x23c>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f040 821f 	bne.w	8008008 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007bca:	2102      	movs	r1, #2
 8007bcc:	4886      	ldr	r0, [pc, #536]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007bce:	f002 f841 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11d      	bne.n	8007c14 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007bd8:	4b84      	ldr	r3, [pc, #528]	; (8007dec <checkDemoModCalisma+0x244>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f083 0301 	eor.w	r3, r3, #1
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d016      	beq.n	8007c14 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007be6:	4b82      	ldr	r3, [pc, #520]	; (8007df0 <checkDemoModCalisma+0x248>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	f083 0301 	eor.w	r3, r3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00f      	beq.n	8007c14 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007bf4:	4b7f      	ldr	r3, [pc, #508]	; (8007df4 <checkDemoModCalisma+0x24c>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f083 0301 	eor.w	r3, r3, #1
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d008      	beq.n	8007c14 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007c02:	2201      	movs	r2, #1
 8007c04:	2104      	movs	r1, #4
 8007c06:	487c      	ldr	r0, [pc, #496]	; (8007df8 <checkDemoModCalisma+0x250>)
 8007c08:	f002 f83b 	bl	8009c82 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007c0c:	4b7b      	ldr	r3, [pc, #492]	; (8007dfc <checkDemoModCalisma+0x254>)
 8007c0e:	2201      	movs	r2, #1
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	e00e      	b.n	8007c32 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007c14:	2102      	movs	r1, #2
 8007c16:	4874      	ldr	r0, [pc, #464]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007c18:	f002 f81c 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d107      	bne.n	8007c32 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c22:	2200      	movs	r2, #0
 8007c24:	2104      	movs	r1, #4
 8007c26:	4874      	ldr	r0, [pc, #464]	; (8007df8 <checkDemoModCalisma+0x250>)
 8007c28:	f002 f82b 	bl	8009c82 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007c2c:	4b73      	ldr	r3, [pc, #460]	; (8007dfc <checkDemoModCalisma+0x254>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007c32:	4b72      	ldr	r3, [pc, #456]	; (8007dfc <checkDemoModCalisma+0x254>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <checkDemoModCalisma+0xaa>
 8007c3a:	4b6d      	ldr	r3, [pc, #436]	; (8007df0 <checkDemoModCalisma+0x248>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <checkDemoModCalisma+0xaa>
 8007c42:	4b6c      	ldr	r3, [pc, #432]	; (8007df4 <checkDemoModCalisma+0x24c>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <checkDemoModCalisma+0xaa>
 8007c4a:	4b68      	ldr	r3, [pc, #416]	; (8007dec <checkDemoModCalisma+0x244>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00c      	beq.n	8007c6c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007c52:	2201      	movs	r2, #1
 8007c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c58:	4867      	ldr	r0, [pc, #412]	; (8007df8 <checkDemoModCalisma+0x250>)
 8007c5a:	f002 f812 	bl	8009c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c64:	4864      	ldr	r0, [pc, #400]	; (8007df8 <checkDemoModCalisma+0x250>)
 8007c66:	f002 f80c 	bl	8009c82 <HAL_GPIO_WritePin>
 8007c6a:	e00b      	b.n	8007c84 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c72:	4861      	ldr	r0, [pc, #388]	; (8007df8 <checkDemoModCalisma+0x250>)
 8007c74:	f002 f805 	bl	8009c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c7e:	485e      	ldr	r0, [pc, #376]	; (8007df8 <checkDemoModCalisma+0x250>)
 8007c80:	f001 ffff 	bl	8009c82 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c84:	2102      	movs	r1, #2
 8007c86:	4858      	ldr	r0, [pc, #352]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007c88:	f001 ffe4 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10d      	bne.n	8007cae <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c96:	4854      	ldr	r0, [pc, #336]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007c98:	f001 ffdc 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d105      	bne.n	8007cae <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007ca2:	4b56      	ldr	r3, [pc, #344]	; (8007dfc <checkDemoModCalisma+0x254>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f083 0301 	eor.w	r3, r3, #1
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007cae:	2102      	movs	r1, #2
 8007cb0:	484d      	ldr	r0, [pc, #308]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007cb2:	f001 ffcf 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d125      	bne.n	8007d08 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cc0:	4849      	ldr	r0, [pc, #292]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007cc2:	f001 ffc7 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d11d      	bne.n	8007d08 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007ccc:	4b4b      	ldr	r3, [pc, #300]	; (8007dfc <checkDemoModCalisma+0x254>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	f083 0301 	eor.w	r3, r3, #1
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d016      	beq.n	8007d08 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007cda:	4b44      	ldr	r3, [pc, #272]	; (8007dec <checkDemoModCalisma+0x244>)
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	f083 0301 	eor.w	r3, r3, #1
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00f      	beq.n	8007d08 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007ce8:	4b42      	ldr	r3, [pc, #264]	; (8007df4 <checkDemoModCalisma+0x24c>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f083 0301 	eor.w	r3, r3, #1
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d008      	beq.n	8007d08 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	2120      	movs	r1, #32
 8007cfa:	483b      	ldr	r0, [pc, #236]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007cfc:	f001 ffc1 	bl	8009c82 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007d00:	4b3b      	ldr	r3, [pc, #236]	; (8007df0 <checkDemoModCalisma+0x248>)
 8007d02:	2201      	movs	r2, #1
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e007      	b.n	8007d18 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2120      	movs	r1, #32
 8007d0c:	4836      	ldr	r0, [pc, #216]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007d0e:	f001 ffb8 	bl	8009c82 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007d12:	4b37      	ldr	r3, [pc, #220]	; (8007df0 <checkDemoModCalisma+0x248>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007d18:	2102      	movs	r1, #2
 8007d1a:	4833      	ldr	r0, [pc, #204]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007d1c:	f001 ff9a 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d125      	bne.n	8007d72 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d2a:	482f      	ldr	r0, [pc, #188]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007d2c:	f001 ff92 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d11d      	bne.n	8007d72 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007d36:	4b31      	ldr	r3, [pc, #196]	; (8007dfc <checkDemoModCalisma+0x254>)
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f083 0301 	eor.w	r3, r3, #1
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d016      	beq.n	8007d72 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007d44:	4b2a      	ldr	r3, [pc, #168]	; (8007df0 <checkDemoModCalisma+0x248>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f083 0301 	eor.w	r3, r3, #1
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00f      	beq.n	8007d72 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007d52:	4b26      	ldr	r3, [pc, #152]	; (8007dec <checkDemoModCalisma+0x244>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	f083 0301 	eor.w	r3, r3, #1
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007d60:	2201      	movs	r2, #1
 8007d62:	2110      	movs	r1, #16
 8007d64:	4820      	ldr	r0, [pc, #128]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007d66:	f001 ff8c 	bl	8009c82 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007d6a:	4b22      	ldr	r3, [pc, #136]	; (8007df4 <checkDemoModCalisma+0x24c>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	e007      	b.n	8007d82 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007d72:	2200      	movs	r2, #0
 8007d74:	2110      	movs	r1, #16
 8007d76:	481c      	ldr	r0, [pc, #112]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007d78:	f001 ff83 	bl	8009c82 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007d7c:	4b1d      	ldr	r3, [pc, #116]	; (8007df4 <checkDemoModCalisma+0x24c>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007d82:	2104      	movs	r1, #4
 8007d84:	4818      	ldr	r0, [pc, #96]	; (8007de8 <checkDemoModCalisma+0x240>)
 8007d86:	f001 ff65 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d139      	bne.n	8007e04 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007d90:	4b1a      	ldr	r3, [pc, #104]	; (8007dfc <checkDemoModCalisma+0x254>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	f083 0301 	eor.w	r3, r3, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d032      	beq.n	8007e04 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007d9e:	4b15      	ldr	r3, [pc, #84]	; (8007df4 <checkDemoModCalisma+0x24c>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	f083 0301 	eor.w	r3, r3, #1
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d02b      	beq.n	8007e04 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007dac:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <checkDemoModCalisma+0x248>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	f083 0301 	eor.w	r3, r3, #1
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d024      	beq.n	8007e04 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007dba:	2201      	movs	r2, #1
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	480e      	ldr	r0, [pc, #56]	; (8007df8 <checkDemoModCalisma+0x250>)
 8007dc0:	f001 ff5f 	bl	8009c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	480b      	ldr	r0, [pc, #44]	; (8007df8 <checkDemoModCalisma+0x250>)
 8007dca:	f001 ff5a 	bl	8009c82 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007dce:	4b07      	ldr	r3, [pc, #28]	; (8007dec <checkDemoModCalisma+0x244>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <checkDemoModCalisma+0x258>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	e027      	b.n	8007e2c <checkDemoModCalisma+0x284>
 8007ddc:	20000d2a 	.word	0x20000d2a
 8007de0:	20000d5e 	.word	0x20000d5e
 8007de4:	20000d29 	.word	0x20000d29
 8007de8:	40011000 	.word	0x40011000
 8007dec:	20000d65 	.word	0x20000d65
 8007df0:	20000d66 	.word	0x20000d66
 8007df4:	20000d67 	.word	0x20000d67
 8007df8:	40010c00 	.word	0x40010c00
 8007dfc:	20000d64 	.word	0x20000d64
 8007e00:	20000d4a 	.word	0x20000d4a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007e04:	2104      	movs	r1, #4
 8007e06:	48a0      	ldr	r0, [pc, #640]	; (8008088 <checkDemoModCalisma+0x4e0>)
 8007e08:	f001 ff24 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d10c      	bne.n	8007e2c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e12:	2200      	movs	r2, #0
 8007e14:	2102      	movs	r1, #2
 8007e16:	489d      	ldr	r0, [pc, #628]	; (800808c <checkDemoModCalisma+0x4e4>)
 8007e18:	f001 ff33 	bl	8009c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2101      	movs	r1, #1
 8007e20:	489a      	ldr	r0, [pc, #616]	; (800808c <checkDemoModCalisma+0x4e4>)
 8007e22:	f001 ff2e 	bl	8009c82 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007e26:	4b9a      	ldr	r3, [pc, #616]	; (8008090 <checkDemoModCalisma+0x4e8>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007e2c:	2104      	movs	r1, #4
 8007e2e:	4896      	ldr	r0, [pc, #600]	; (8008088 <checkDemoModCalisma+0x4e0>)
 8007e30:	f001 ff10 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d10d      	bne.n	8007e56 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	2180      	movs	r1, #128	; 0x80
 8007e3e:	4895      	ldr	r0, [pc, #596]	; (8008094 <checkDemoModCalisma+0x4ec>)
 8007e40:	f001 ff1f 	bl	8009c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007e44:	2201      	movs	r2, #1
 8007e46:	2120      	movs	r1, #32
 8007e48:	4892      	ldr	r0, [pc, #584]	; (8008094 <checkDemoModCalisma+0x4ec>)
 8007e4a:	f001 ff1a 	bl	8009c82 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007e4e:	4b92      	ldr	r3, [pc, #584]	; (8008098 <checkDemoModCalisma+0x4f0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a92      	ldr	r2, [pc, #584]	; (800809c <checkDemoModCalisma+0x4f4>)
 8007e54:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007e56:	4b90      	ldr	r3, [pc, #576]	; (8008098 <checkDemoModCalisma+0x4f0>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4b90      	ldr	r3, [pc, #576]	; (800809c <checkDemoModCalisma+0x4f4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d909      	bls.n	8007e78 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e64:	2200      	movs	r2, #0
 8007e66:	2180      	movs	r1, #128	; 0x80
 8007e68:	488a      	ldr	r0, [pc, #552]	; (8008094 <checkDemoModCalisma+0x4ec>)
 8007e6a:	f001 ff0a 	bl	8009c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2120      	movs	r1, #32
 8007e72:	4888      	ldr	r0, [pc, #544]	; (8008094 <checkDemoModCalisma+0x4ec>)
 8007e74:	f001 ff05 	bl	8009c82 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007e78:	2102      	movs	r1, #2
 8007e7a:	4883      	ldr	r0, [pc, #524]	; (8008088 <checkDemoModCalisma+0x4e0>)
 8007e7c:	f001 feea 	bl	8009c54 <HAL_GPIO_ReadPin>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d108      	bne.n	8007e98 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007e86:	2201      	movs	r2, #1
 8007e88:	2140      	movs	r1, #64	; 0x40
 8007e8a:	4882      	ldr	r0, [pc, #520]	; (8008094 <checkDemoModCalisma+0x4ec>)
 8007e8c:	f001 fef9 	bl	8009c82 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007e90:	4b81      	ldr	r3, [pc, #516]	; (8008098 <checkDemoModCalisma+0x4f0>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a81      	ldr	r2, [pc, #516]	; (800809c <checkDemoModCalisma+0x4f4>)
 8007e96:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007e98:	4b7f      	ldr	r3, [pc, #508]	; (8008098 <checkDemoModCalisma+0x4f0>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4b7f      	ldr	r3, [pc, #508]	; (800809c <checkDemoModCalisma+0x4f4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d904      	bls.n	8007eb0 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2140      	movs	r1, #64	; 0x40
 8007eaa:	487a      	ldr	r0, [pc, #488]	; (8008094 <checkDemoModCalisma+0x4ec>)
 8007eac:	f001 fee9 	bl	8009c82 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007eb0:	4b7b      	ldr	r3, [pc, #492]	; (80080a0 <checkDemoModCalisma+0x4f8>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d058      	beq.n	8007f6a <checkDemoModCalisma+0x3c2>
 8007eb8:	4b7a      	ldr	r3, [pc, #488]	; (80080a4 <checkDemoModCalisma+0x4fc>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d054      	beq.n	8007f6a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007ec0:	4b79      	ldr	r3, [pc, #484]	; (80080a8 <checkDemoModCalisma+0x500>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	4b77      	ldr	r3, [pc, #476]	; (80080a8 <checkDemoModCalisma+0x500>)
 8007eca:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007ecc:	4b76      	ldr	r3, [pc, #472]	; (80080a8 <checkDemoModCalisma+0x500>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b09      	cmp	r3, #9
 8007ed2:	d908      	bls.n	8007ee6 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007ed4:	4b74      	ldr	r3, [pc, #464]	; (80080a8 <checkDemoModCalisma+0x500>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007eda:	4b74      	ldr	r3, [pc, #464]	; (80080ac <checkDemoModCalisma+0x504>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	4b72      	ldr	r3, [pc, #456]	; (80080ac <checkDemoModCalisma+0x504>)
 8007ee4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007ee6:	4b71      	ldr	r3, [pc, #452]	; (80080ac <checkDemoModCalisma+0x504>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b09      	cmp	r3, #9
 8007eec:	d908      	bls.n	8007f00 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007eee:	4b6f      	ldr	r3, [pc, #444]	; (80080ac <checkDemoModCalisma+0x504>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007ef4:	4b6e      	ldr	r3, [pc, #440]	; (80080b0 <checkDemoModCalisma+0x508>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	4b6c      	ldr	r3, [pc, #432]	; (80080b0 <checkDemoModCalisma+0x508>)
 8007efe:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007f00:	4b6b      	ldr	r3, [pc, #428]	; (80080b0 <checkDemoModCalisma+0x508>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d908      	bls.n	8007f1a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007f08:	4b69      	ldr	r3, [pc, #420]	; (80080b0 <checkDemoModCalisma+0x508>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007f0e:	4b69      	ldr	r3, [pc, #420]	; (80080b4 <checkDemoModCalisma+0x50c>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	4b67      	ldr	r3, [pc, #412]	; (80080b4 <checkDemoModCalisma+0x50c>)
 8007f18:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007f1a:	4b66      	ldr	r3, [pc, #408]	; (80080b4 <checkDemoModCalisma+0x50c>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b09      	cmp	r3, #9
 8007f20:	d908      	bls.n	8007f34 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007f22:	4b64      	ldr	r3, [pc, #400]	; (80080b4 <checkDemoModCalisma+0x50c>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007f28:	4b63      	ldr	r3, [pc, #396]	; (80080b8 <checkDemoModCalisma+0x510>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	4b61      	ldr	r3, [pc, #388]	; (80080b8 <checkDemoModCalisma+0x510>)
 8007f32:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007f34:	4b60      	ldr	r3, [pc, #384]	; (80080b8 <checkDemoModCalisma+0x510>)
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	4b60      	ldr	r3, [pc, #384]	; (80080bc <checkDemoModCalisma+0x514>)
 8007f3a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007f3e:	4b5d      	ldr	r3, [pc, #372]	; (80080b4 <checkDemoModCalisma+0x50c>)
 8007f40:	781a      	ldrb	r2, [r3, #0]
 8007f42:	4b5e      	ldr	r3, [pc, #376]	; (80080bc <checkDemoModCalisma+0x514>)
 8007f44:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007f46:	4b5a      	ldr	r3, [pc, #360]	; (80080b0 <checkDemoModCalisma+0x508>)
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	4b5c      	ldr	r3, [pc, #368]	; (80080bc <checkDemoModCalisma+0x514>)
 8007f4c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007f4e:	4b57      	ldr	r3, [pc, #348]	; (80080ac <checkDemoModCalisma+0x504>)
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	4b5a      	ldr	r3, [pc, #360]	; (80080bc <checkDemoModCalisma+0x514>)
 8007f54:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007f56:	4b54      	ldr	r3, [pc, #336]	; (80080a8 <checkDemoModCalisma+0x500>)
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	4b58      	ldr	r3, [pc, #352]	; (80080bc <checkDemoModCalisma+0x514>)
 8007f5c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007f5e:	4b58      	ldr	r3, [pc, #352]	; (80080c0 <checkDemoModCalisma+0x518>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007f64:	4b4f      	ldr	r3, [pc, #316]	; (80080a4 <checkDemoModCalisma+0x4fc>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007f6a:	4b56      	ldr	r3, [pc, #344]	; (80080c4 <checkDemoModCalisma+0x51c>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f040 8087 	bne.w	8008082 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007f74:	4a54      	ldr	r2, [pc, #336]	; (80080c8 <checkDemoModCalisma+0x520>)
 8007f76:	2101      	movs	r1, #1
 8007f78:	2002      	movs	r0, #2
 8007f7a:	f7f8 fb75 	bl	8000668 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007f7e:	4a53      	ldr	r2, [pc, #332]	; (80080cc <checkDemoModCalisma+0x524>)
 8007f80:	2101      	movs	r1, #1
 8007f82:	2001      	movs	r0, #1
 8007f84:	f7f8 fb70 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007f88:	4b4b      	ldr	r3, [pc, #300]	; (80080b8 <checkDemoModCalisma+0x510>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	220a      	movs	r2, #10
 8007f8e:	4950      	ldr	r1, [pc, #320]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007f90:	4618      	mov	r0, r3
 8007f92:	f004 fe8b 	bl	800ccac <itoa>
			lcd_print(2,12,snum);
 8007f96:	4a4e      	ldr	r2, [pc, #312]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007f98:	210c      	movs	r1, #12
 8007f9a:	2002      	movs	r0, #2
 8007f9c:	f7f8 fb64 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007fa0:	4b44      	ldr	r3, [pc, #272]	; (80080b4 <checkDemoModCalisma+0x50c>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	220a      	movs	r2, #10
 8007fa6:	494a      	ldr	r1, [pc, #296]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f004 fe7f 	bl	800ccac <itoa>
			lcd_print(2,13,snum);
 8007fae:	4a48      	ldr	r2, [pc, #288]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007fb0:	210d      	movs	r1, #13
 8007fb2:	2002      	movs	r0, #2
 8007fb4:	f7f8 fb58 	bl	8000668 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007fb8:	4b3d      	ldr	r3, [pc, #244]	; (80080b0 <checkDemoModCalisma+0x508>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	220a      	movs	r2, #10
 8007fbe:	4944      	ldr	r1, [pc, #272]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f004 fe73 	bl	800ccac <itoa>
			lcd_print(2,14,snum);
 8007fc6:	4a42      	ldr	r2, [pc, #264]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007fc8:	210e      	movs	r1, #14
 8007fca:	2002      	movs	r0, #2
 8007fcc:	f7f8 fb4c 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007fd0:	4b36      	ldr	r3, [pc, #216]	; (80080ac <checkDemoModCalisma+0x504>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	220a      	movs	r2, #10
 8007fd6:	493e      	ldr	r1, [pc, #248]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f004 fe67 	bl	800ccac <itoa>
			lcd_print(2,15,snum);
 8007fde:	4a3c      	ldr	r2, [pc, #240]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007fe0:	210f      	movs	r1, #15
 8007fe2:	2002      	movs	r0, #2
 8007fe4:	f7f8 fb40 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007fe8:	4b2f      	ldr	r3, [pc, #188]	; (80080a8 <checkDemoModCalisma+0x500>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	220a      	movs	r2, #10
 8007fee:	4938      	ldr	r1, [pc, #224]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f004 fe5b 	bl	800ccac <itoa>
			lcd_print(2,16,snum);
 8007ff6:	4a36      	ldr	r2, [pc, #216]	; (80080d0 <checkDemoModCalisma+0x528>)
 8007ff8:	2110      	movs	r1, #16
 8007ffa:	2002      	movs	r0, #2
 8007ffc:	f7f8 fb34 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8008000:	4b34      	ldr	r3, [pc, #208]	; (80080d4 <checkDemoModCalisma+0x52c>)
 8008002:	2201      	movs	r2, #1
 8008004:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8008006:	e03c      	b.n	8008082 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8008008:	4b33      	ldr	r3, [pc, #204]	; (80080d8 <checkDemoModCalisma+0x530>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d003      	beq.n	8008018 <checkDemoModCalisma+0x470>
 8008010:	4b2c      	ldr	r3, [pc, #176]	; (80080c4 <checkDemoModCalisma+0x51c>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d134      	bne.n	8008082 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008018:	2200      	movs	r2, #0
 800801a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800801e:	481b      	ldr	r0, [pc, #108]	; (800808c <checkDemoModCalisma+0x4e4>)
 8008020:	f001 fe2f 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008024:	2200      	movs	r2, #0
 8008026:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800802a:	4818      	ldr	r0, [pc, #96]	; (800808c <checkDemoModCalisma+0x4e4>)
 800802c:	f001 fe29 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008030:	2200      	movs	r2, #0
 8008032:	2104      	movs	r1, #4
 8008034:	4815      	ldr	r0, [pc, #84]	; (800808c <checkDemoModCalisma+0x4e4>)
 8008036:	f001 fe24 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800803a:	2200      	movs	r2, #0
 800803c:	2102      	movs	r1, #2
 800803e:	4813      	ldr	r0, [pc, #76]	; (800808c <checkDemoModCalisma+0x4e4>)
 8008040:	f001 fe1f 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008044:	2200      	movs	r2, #0
 8008046:	2101      	movs	r1, #1
 8008048:	4810      	ldr	r0, [pc, #64]	; (800808c <checkDemoModCalisma+0x4e4>)
 800804a:	f001 fe1a 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800804e:	2200      	movs	r2, #0
 8008050:	2120      	movs	r1, #32
 8008052:	480d      	ldr	r0, [pc, #52]	; (8008088 <checkDemoModCalisma+0x4e0>)
 8008054:	f001 fe15 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008058:	2200      	movs	r2, #0
 800805a:	2110      	movs	r1, #16
 800805c:	480a      	ldr	r0, [pc, #40]	; (8008088 <checkDemoModCalisma+0x4e0>)
 800805e:	f001 fe10 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008062:	2200      	movs	r2, #0
 8008064:	2180      	movs	r1, #128	; 0x80
 8008066:	480b      	ldr	r0, [pc, #44]	; (8008094 <checkDemoModCalisma+0x4ec>)
 8008068:	f001 fe0b 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800806c:	2200      	movs	r2, #0
 800806e:	2140      	movs	r1, #64	; 0x40
 8008070:	4808      	ldr	r0, [pc, #32]	; (8008094 <checkDemoModCalisma+0x4ec>)
 8008072:	f001 fe06 	bl	8009c82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008076:	2200      	movs	r2, #0
 8008078:	2120      	movs	r1, #32
 800807a:	4806      	ldr	r0, [pc, #24]	; (8008094 <checkDemoModCalisma+0x4ec>)
 800807c:	f001 fe01 	bl	8009c82 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8008080:	e7ff      	b.n	8008082 <checkDemoModCalisma+0x4da>
 8008082:	bf00      	nop
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40011000 	.word	0x40011000
 800808c:	40010c00 	.word	0x40010c00
 8008090:	20000d65 	.word	0x20000d65
 8008094:	40010800 	.word	0x40010800
 8008098:	20000cb4 	.word	0x20000cb4
 800809c:	20000cc4 	.word	0x20000cc4
 80080a0:	20000d64 	.word	0x20000d64
 80080a4:	20000d4a 	.word	0x20000d4a
 80080a8:	20000d09 	.word	0x20000d09
 80080ac:	20000d0a 	.word	0x20000d0a
 80080b0:	200009b4 	.word	0x200009b4
 80080b4:	200009b5 	.word	0x200009b5
 80080b8:	20000d0b 	.word	0x20000d0b
 80080bc:	20000c38 	.word	0x20000c38
 80080c0:	20000d38 	.word	0x20000d38
 80080c4:	20000d29 	.word	0x20000d29
 80080c8:	0800e4dc 	.word	0x0800e4dc
 80080cc:	0800e4e8 	.word	0x0800e4e8
 80080d0:	20000cac 	.word	0x20000cac
 80080d4:	20000d40 	.word	0x20000d40
 80080d8:	20000d2a 	.word	0x20000d2a

080080dc <mergeData>:

char* mergeData() {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b09e      	sub	sp, #120	; 0x78
 80080e0:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80080e2:	2300      	movs	r3, #0
 80080e4:	643b      	str	r3, [r7, #64]	; 0x40
 80080e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080ea:	2229      	movs	r2, #41	; 0x29
 80080ec:	2100      	movs	r1, #0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f004 fef4 	bl	800cedc <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80080f4:	4b6a      	ldr	r3, [pc, #424]	; (80082a0 <mergeData+0x1c4>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	713b      	strb	r3, [r7, #4]
 80080fa:	4b6a      	ldr	r3, [pc, #424]	; (80082a4 <mergeData+0x1c8>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	717b      	strb	r3, [r7, #5]
 8008100:	4b69      	ldr	r3, [pc, #420]	; (80082a8 <mergeData+0x1cc>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	71bb      	strb	r3, [r7, #6]
 8008106:	4b69      	ldr	r3, [pc, #420]	; (80082ac <mergeData+0x1d0>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	71fb      	strb	r3, [r7, #7]
 800810c:	4b68      	ldr	r3, [pc, #416]	; (80082b0 <mergeData+0x1d4>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	723b      	strb	r3, [r7, #8]
 8008112:	4b68      	ldr	r3, [pc, #416]	; (80082b4 <mergeData+0x1d8>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	727b      	strb	r3, [r7, #9]
 8008118:	4b67      	ldr	r3, [pc, #412]	; (80082b8 <mergeData+0x1dc>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	72bb      	strb	r3, [r7, #10]
 800811e:	4b67      	ldr	r3, [pc, #412]	; (80082bc <mergeData+0x1e0>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	72fb      	strb	r3, [r7, #11]
 8008124:	4b66      	ldr	r3, [pc, #408]	; (80082c0 <mergeData+0x1e4>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	733b      	strb	r3, [r7, #12]
 800812a:	4b66      	ldr	r3, [pc, #408]	; (80082c4 <mergeData+0x1e8>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	737b      	strb	r3, [r7, #13]
 8008130:	4b65      	ldr	r3, [pc, #404]	; (80082c8 <mergeData+0x1ec>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	73bb      	strb	r3, [r7, #14]
 8008136:	4b65      	ldr	r3, [pc, #404]	; (80082cc <mergeData+0x1f0>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	73fb      	strb	r3, [r7, #15]
 800813c:	4b64      	ldr	r3, [pc, #400]	; (80082d0 <mergeData+0x1f4>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	743b      	strb	r3, [r7, #16]
 8008142:	4b64      	ldr	r3, [pc, #400]	; (80082d4 <mergeData+0x1f8>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	747b      	strb	r3, [r7, #17]
 8008148:	4b63      	ldr	r3, [pc, #396]	; (80082d8 <mergeData+0x1fc>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	74bb      	strb	r3, [r7, #18]
 800814e:	4b63      	ldr	r3, [pc, #396]	; (80082dc <mergeData+0x200>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	74fb      	strb	r3, [r7, #19]
 8008154:	4b62      	ldr	r3, [pc, #392]	; (80082e0 <mergeData+0x204>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	753b      	strb	r3, [r7, #20]
 800815a:	4b62      	ldr	r3, [pc, #392]	; (80082e4 <mergeData+0x208>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	757b      	strb	r3, [r7, #21]
 8008160:	4b61      	ldr	r3, [pc, #388]	; (80082e8 <mergeData+0x20c>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	75bb      	strb	r3, [r7, #22]
 8008166:	4b61      	ldr	r3, [pc, #388]	; (80082ec <mergeData+0x210>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	75fb      	strb	r3, [r7, #23]
 800816c:	4b60      	ldr	r3, [pc, #384]	; (80082f0 <mergeData+0x214>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	763b      	strb	r3, [r7, #24]
 8008172:	4b60      	ldr	r3, [pc, #384]	; (80082f4 <mergeData+0x218>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	767b      	strb	r3, [r7, #25]
 8008178:	4b5f      	ldr	r3, [pc, #380]	; (80082f8 <mergeData+0x21c>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	76bb      	strb	r3, [r7, #26]
 800817e:	4b5f      	ldr	r3, [pc, #380]	; (80082fc <mergeData+0x220>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	76fb      	strb	r3, [r7, #27]
 8008184:	4b5e      	ldr	r3, [pc, #376]	; (8008300 <mergeData+0x224>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	773b      	strb	r3, [r7, #28]
 800818a:	4b5e      	ldr	r3, [pc, #376]	; (8008304 <mergeData+0x228>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	777b      	strb	r3, [r7, #29]
 8008190:	4b5d      	ldr	r3, [pc, #372]	; (8008308 <mergeData+0x22c>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	77bb      	strb	r3, [r7, #30]
 8008196:	4b5d      	ldr	r3, [pc, #372]	; (800830c <mergeData+0x230>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	4b5c      	ldr	r3, [pc, #368]	; (8008310 <mergeData+0x234>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	f887 3020 	strb.w	r3, [r7, #32]
 80081a4:	4b5b      	ldr	r3, [pc, #364]	; (8008314 <mergeData+0x238>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80081ac:	4b5a      	ldr	r3, [pc, #360]	; (8008318 <mergeData+0x23c>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80081b4:	4b59      	ldr	r3, [pc, #356]	; (800831c <mergeData+0x240>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081bc:	4b58      	ldr	r3, [pc, #352]	; (8008320 <mergeData+0x244>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80081c4:	4b57      	ldr	r3, [pc, #348]	; (8008324 <mergeData+0x248>)
 80081c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80081ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80081ce:	4b55      	ldr	r3, [pc, #340]	; (8008324 <mergeData+0x248>)
 80081d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80081d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80081d8:	4b52      	ldr	r3, [pc, #328]	; (8008324 <mergeData+0x248>)
 80081da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80081de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80081e2:	4b50      	ldr	r3, [pc, #320]	; (8008324 <mergeData+0x248>)
 80081e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80081e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80081ec:	4b4d      	ldr	r3, [pc, #308]	; (8008324 <mergeData+0x248>)
 80081ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80081f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80081f6:	4b4b      	ldr	r3, [pc, #300]	; (8008324 <mergeData+0x248>)
 80081f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80081fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8008200:	4b48      	ldr	r3, [pc, #288]	; (8008324 <mergeData+0x248>)
 8008202:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 800820a:	4b46      	ldr	r3, [pc, #280]	; (8008324 <mergeData+0x248>)
 800820c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8008210:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008214:	4b43      	ldr	r3, [pc, #268]	; (8008324 <mergeData+0x248>)
 8008216:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800821a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800821e:	4b41      	ldr	r3, [pc, #260]	; (8008324 <mergeData+0x248>)
 8008220:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008224:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008228:	4b3e      	ldr	r3, [pc, #248]	; (8008324 <mergeData+0x248>)
 800822a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800822e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008232:	4b3d      	ldr	r3, [pc, #244]	; (8008328 <mergeData+0x24c>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800823a:	2300      	movs	r3, #0
 800823c:	677b      	str	r3, [r7, #116]	; 0x74
 800823e:	e015      	b.n	800826c <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8008240:	1d3a      	adds	r2, r7, #4
 8008242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008244:	4413      	add	r3, r2
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800824e:	4937      	ldr	r1, [pc, #220]	; (800832c <mergeData+0x250>)
 8008250:	4618      	mov	r0, r3
 8008252:	f004 fe23 	bl	800ce9c <siprintf>
	    strcat(combinedString, temp);
 8008256:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800825a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f004 fe43 	bl	800ceec <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008268:	3301      	adds	r3, #1
 800826a:	677b      	str	r3, [r7, #116]	; 0x74
 800826c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800826e:	2b2c      	cmp	r3, #44	; 0x2c
 8008270:	d9e6      	bls.n	8008240 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008276:	4618      	mov	r0, r3
 8008278:	f7f7 ffd4 	bl	8000224 <strlen>
 800827c:	4603      	mov	r3, r0
 800827e:	3301      	adds	r3, #1
 8008280:	4618      	mov	r0, r3
 8008282:	f004 fd15 	bl	800ccb0 <malloc>
 8008286:	4603      	mov	r3, r0
 8008288:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 800828a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800828e:	4619      	mov	r1, r3
 8008290:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008292:	f004 fe77 	bl	800cf84 <strcpy>
	return result;
 8008296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008298:	4618      	mov	r0, r3
 800829a:	3778      	adds	r7, #120	; 0x78
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000d1b 	.word	0x20000d1b
 80082a4:	20000d0d 	.word	0x20000d0d
 80082a8:	20000d10 	.word	0x20000d10
 80082ac:	20000d11 	.word	0x20000d11
 80082b0:	20000d12 	.word	0x20000d12
 80082b4:	20000d19 	.word	0x20000d19
 80082b8:	20000d13 	.word	0x20000d13
 80082bc:	20000d14 	.word	0x20000d14
 80082c0:	20000d18 	.word	0x20000d18
 80082c4:	20000d15 	.word	0x20000d15
 80082c8:	20000d25 	.word	0x20000d25
 80082cc:	20000d16 	.word	0x20000d16
 80082d0:	20000d26 	.word	0x20000d26
 80082d4:	20000d17 	.word	0x20000d17
 80082d8:	20000d27 	.word	0x20000d27
 80082dc:	20000d1a 	.word	0x20000d1a
 80082e0:	20000d1c 	.word	0x20000d1c
 80082e4:	20000d1d 	.word	0x20000d1d
 80082e8:	20000d1e 	.word	0x20000d1e
 80082ec:	20000d1f 	.word	0x20000d1f
 80082f0:	20000d20 	.word	0x20000d20
 80082f4:	20000d21 	.word	0x20000d21
 80082f8:	20000d22 	.word	0x20000d22
 80082fc:	20000d23 	.word	0x20000d23
 8008300:	20000d24 	.word	0x20000d24
 8008304:	20000d28 	.word	0x20000d28
 8008308:	20000d2a 	.word	0x20000d2a
 800830c:	20000d09 	.word	0x20000d09
 8008310:	20000d0a 	.word	0x20000d0a
 8008314:	200009b4 	.word	0x200009b4
 8008318:	200009b5 	.word	0x200009b5
 800831c:	20000d0b 	.word	0x20000d0b
 8008320:	20000d2d 	.word	0x20000d2d
 8008324:	20000c38 	.word	0x20000c38
 8008328:	20000940 	.word	0x20000940
 800832c:	0800e4fc 	.word	0x0800e4fc

08008330 <mainLoop>:

void mainLoop() {
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008336:	f7fd fffb 	bl	8006330 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800833a:	2101      	movs	r1, #1
 800833c:	48ad      	ldr	r0, [pc, #692]	; (80085f4 <mainLoop+0x2c4>)
 800833e:	f001 fc89 	bl	8009c54 <HAL_GPIO_ReadPin>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d136      	bne.n	80083b6 <mainLoop+0x86>
 8008348:	2108      	movs	r1, #8
 800834a:	48ab      	ldr	r0, [pc, #684]	; (80085f8 <mainLoop+0x2c8>)
 800834c:	f001 fc82 	bl	8009c54 <HAL_GPIO_ReadPin>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d12f      	bne.n	80083b6 <mainLoop+0x86>
 8008356:	2102      	movs	r1, #2
 8008358:	48a6      	ldr	r0, [pc, #664]	; (80085f4 <mainLoop+0x2c4>)
 800835a:	f001 fc7b 	bl	8009c54 <HAL_GPIO_ReadPin>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d128      	bne.n	80083b6 <mainLoop+0x86>
 8008364:	2104      	movs	r1, #4
 8008366:	48a3      	ldr	r0, [pc, #652]	; (80085f4 <mainLoop+0x2c4>)
 8008368:	f001 fc74 	bl	8009c54 <HAL_GPIO_ReadPin>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d121      	bne.n	80083b6 <mainLoop+0x86>
 8008372:	2108      	movs	r1, #8
 8008374:	489f      	ldr	r0, [pc, #636]	; (80085f4 <mainLoop+0x2c4>)
 8008376:	f001 fc6d 	bl	8009c54 <HAL_GPIO_ReadPin>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d11a      	bne.n	80083b6 <mainLoop+0x86>
 8008380:	2180      	movs	r1, #128	; 0x80
 8008382:	489d      	ldr	r0, [pc, #628]	; (80085f8 <mainLoop+0x2c8>)
 8008384:	f001 fc66 	bl	8009c54 <HAL_GPIO_ReadPin>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d113      	bne.n	80083b6 <mainLoop+0x86>
 800838e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008392:	4899      	ldr	r0, [pc, #612]	; (80085f8 <mainLoop+0x2c8>)
 8008394:	f001 fc5e 	bl	8009c54 <HAL_GPIO_ReadPin>
 8008398:	4603      	mov	r3, r0
 800839a:	2b01      	cmp	r3, #1
 800839c:	d10b      	bne.n	80083b6 <mainLoop+0x86>
 800839e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083a2:	4895      	ldr	r0, [pc, #596]	; (80085f8 <mainLoop+0x2c8>)
 80083a4:	f001 fc56 	bl	8009c54 <HAL_GPIO_ReadPin>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d103      	bne.n	80083b6 <mainLoop+0x86>
			butonKontrol=0;
 80083ae:	4b93      	ldr	r3, [pc, #588]	; (80085fc <mainLoop+0x2cc>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	e003      	b.n	80083be <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80083b6:	4b92      	ldr	r3, [pc, #584]	; (8008600 <mainLoop+0x2d0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a92      	ldr	r2, [pc, #584]	; (8008604 <mainLoop+0x2d4>)
 80083bc:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80083be:	4b92      	ldr	r3, [pc, #584]	; (8008608 <mainLoop+0x2d8>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d03a      	beq.n	800843c <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80083c6:	bf00      	nop
 80083c8:	4890      	ldr	r0, [pc, #576]	; (800860c <mainLoop+0x2dc>)
 80083ca:	f002 fa6c 	bl	800a8a6 <HAL_I2C_GetError>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d0f9      	beq.n	80083c8 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80083d4:	bf00      	nop
 80083d6:	488d      	ldr	r0, [pc, #564]	; (800860c <mainLoop+0x2dc>)
 80083d8:	f002 fa58 	bl	800a88c <HAL_I2C_GetState>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d1f9      	bne.n	80083d6 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 113, eepromData, 113, 3000);
 80083e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80083e6:	9302      	str	r3, [sp, #8]
 80083e8:	2371      	movs	r3, #113	; 0x71
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	4b88      	ldr	r3, [pc, #544]	; (8008610 <mainLoop+0x2e0>)
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	2371      	movs	r3, #113	; 0x71
 80083f2:	2200      	movs	r2, #0
 80083f4:	21a0      	movs	r1, #160	; 0xa0
 80083f6:	4885      	ldr	r0, [pc, #532]	; (800860c <mainLoop+0x2dc>)
 80083f8:	f001 fee6 	bl	800a1c8 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80083fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008400:	f000 fe58 	bl	80090b4 <HAL_Delay>

		  hafizaYaz=0;
 8008404:	4b80      	ldr	r3, [pc, #512]	; (8008608 <mainLoop+0x2d8>)
 8008406:	2200      	movs	r2, #0
 8008408:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800840a:	4b82      	ldr	r3, [pc, #520]	; (8008614 <mainLoop+0x2e4>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8008412:	4a81      	ldr	r2, [pc, #516]	; (8008618 <mainLoop+0x2e8>)
 8008414:	2101      	movs	r1, #1
 8008416:	2002      	movs	r0, #2
 8008418:	f7f8 f926 	bl	8000668 <lcd_print>
 800841c:	e008      	b.n	8008430 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 800841e:	4b7d      	ldr	r3, [pc, #500]	; (8008614 <mainLoop+0x2e4>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d104      	bne.n	8008430 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8008426:	4a7d      	ldr	r2, [pc, #500]	; (800861c <mainLoop+0x2ec>)
 8008428:	2101      	movs	r1, #1
 800842a:	2002      	movs	r0, #2
 800842c:	f7f8 f91c 	bl	8000668 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008434:	f000 fe3e 	bl	80090b4 <HAL_Delay>
		  lcd_clear();
 8008438:	f7f8 f942 	bl	80006c0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800843c:	4b78      	ldr	r3, [pc, #480]	; (8008620 <mainLoop+0x2f0>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f083 0301 	eor.w	r3, r3, #1
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d06e      	beq.n	8008528 <mainLoop+0x1f8>
 800844a:	4870      	ldr	r0, [pc, #448]	; (800860c <mainLoop+0x2dc>)
 800844c:	f002 fa1e 	bl	800a88c <HAL_I2C_GetState>
 8008450:	4603      	mov	r3, r0
 8008452:	2b20      	cmp	r3, #32
 8008454:	d168      	bne.n	8008528 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8008456:	4b73      	ldr	r3, [pc, #460]	; (8008624 <mainLoop+0x2f4>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f083 0301 	eor.w	r3, r3, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d044      	beq.n	80084ee <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008464:	4a70      	ldr	r2, [pc, #448]	; (8008628 <mainLoop+0x2f8>)
 8008466:	2101      	movs	r1, #1
 8008468:	2001      	movs	r0, #1
 800846a:	f7f8 f8fd 	bl	8000668 <lcd_print>
			  if(dilSecim==0) {
 800846e:	4b69      	ldr	r3, [pc, #420]	; (8008614 <mainLoop+0x2e4>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d105      	bne.n	8008482 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8008476:	4a6d      	ldr	r2, [pc, #436]	; (800862c <mainLoop+0x2fc>)
 8008478:	2101      	movs	r1, #1
 800847a:	2002      	movs	r0, #2
 800847c:	f7f8 f8f4 	bl	8000668 <lcd_print>
 8008480:	e008      	b.n	8008494 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8008482:	4b64      	ldr	r3, [pc, #400]	; (8008614 <mainLoop+0x2e4>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d104      	bne.n	8008494 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800848a:	4a69      	ldr	r2, [pc, #420]	; (8008630 <mainLoop+0x300>)
 800848c:	2101      	movs	r1, #1
 800848e:	2002      	movs	r0, #2
 8008490:	f7f8 f8ea 	bl	8000668 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008498:	f000 fe0c 	bl	80090b4 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800849c:	bf00      	nop
 800849e:	485b      	ldr	r0, [pc, #364]	; (800860c <mainLoop+0x2dc>)
 80084a0:	f002 fa01 	bl	800a8a6 <HAL_I2C_GetError>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d0f9      	beq.n	800849e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80084aa:	e003      	b.n	80084b4 <mainLoop+0x184>
				  HAL_Delay(1000);
 80084ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084b0:	f000 fe00 	bl	80090b4 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80084b4:	4855      	ldr	r0, [pc, #340]	; (800860c <mainLoop+0x2dc>)
 80084b6:	f002 f9e9 	bl	800a88c <HAL_I2C_GetState>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d1f5      	bne.n	80084ac <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80084c0:	4b54      	ldr	r3, [pc, #336]	; (8008614 <mainLoop+0x2e4>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d105      	bne.n	80084d4 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80084c8:	4a5a      	ldr	r2, [pc, #360]	; (8008634 <mainLoop+0x304>)
 80084ca:	2101      	movs	r1, #1
 80084cc:	2002      	movs	r0, #2
 80084ce:	f7f8 f8cb 	bl	8000668 <lcd_print>
 80084d2:	e008      	b.n	80084e6 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80084d4:	4b4f      	ldr	r3, [pc, #316]	; (8008614 <mainLoop+0x2e4>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d104      	bne.n	80084e6 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80084dc:	4a56      	ldr	r2, [pc, #344]	; (8008638 <mainLoop+0x308>)
 80084de:	2101      	movs	r1, #1
 80084e0:	2002      	movs	r0, #2
 80084e2:	f7f8 f8c1 	bl	8000668 <lcd_print>
			  }

			  ilkOkuma=1;
 80084e6:	4b4f      	ldr	r3, [pc, #316]	; (8008624 <mainLoop+0x2f4>)
 80084e8:	2201      	movs	r2, #1
 80084ea:	701a      	strb	r2, [r3, #0]
 80084ec:	e014      	b.n	8008518 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80084ee:	4b49      	ldr	r3, [pc, #292]	; (8008614 <mainLoop+0x2e4>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80084f6:	4a51      	ldr	r2, [pc, #324]	; (800863c <mainLoop+0x30c>)
 80084f8:	2101      	movs	r1, #1
 80084fa:	2002      	movs	r0, #2
 80084fc:	f7f8 f8b4 	bl	8000668 <lcd_print>
 8008500:	e008      	b.n	8008514 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8008502:	4b44      	ldr	r3, [pc, #272]	; (8008614 <mainLoop+0x2e4>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d104      	bne.n	8008514 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 800850a:	4a4d      	ldr	r2, [pc, #308]	; (8008640 <mainLoop+0x310>)
 800850c:	2101      	movs	r1, #1
 800850e:	2002      	movs	r0, #2
 8008510:	f7f8 f8aa 	bl	8000668 <lcd_print>
			  }
			  lcd_clear();
 8008514:	f7f8 f8d4 	bl	80006c0 <lcd_clear>
		  }

		  lcd_clear();
 8008518:	f7f8 f8d2 	bl	80006c0 <lcd_clear>

		  eepromKontrol(1);
 800851c:	2001      	movs	r0, #1
 800851e:	f7fd fac9 	bl	8005ab4 <eepromKontrol>
		  hafizaOku=1;
 8008522:	4b3f      	ldr	r3, [pc, #252]	; (8008620 <mainLoop+0x2f0>)
 8008524:	2201      	movs	r2, #1
 8008526:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008528:	4b46      	ldr	r3, [pc, #280]	; (8008644 <mainLoop+0x314>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d11c      	bne.n	800856a <mainLoop+0x23a>
 8008530:	4b45      	ldr	r3, [pc, #276]	; (8008648 <mainLoop+0x318>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f083 0301 	eor.w	r3, r3, #1
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d015      	beq.n	800856a <mainLoop+0x23a>
 800853e:	4b43      	ldr	r3, [pc, #268]	; (800864c <mainLoop+0x31c>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d111      	bne.n	800856a <mainLoop+0x23a>
			lcd_clear();
 8008546:	f7f8 f8bb 	bl	80006c0 <lcd_clear>
			HAL_Delay(10);
 800854a:	200a      	movs	r0, #10
 800854c:	f000 fdb2 	bl	80090b4 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008550:	4a3f      	ldr	r2, [pc, #252]	; (8008650 <mainLoop+0x320>)
 8008552:	2101      	movs	r1, #1
 8008554:	2001      	movs	r0, #1
 8008556:	f7f8 f887 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800855a:	4a3e      	ldr	r2, [pc, #248]	; (8008654 <mainLoop+0x324>)
 800855c:	2101      	movs	r1, #1
 800855e:	2002      	movs	r0, #2
 8008560:	f7f8 f882 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8008564:	4b38      	ldr	r3, [pc, #224]	; (8008648 <mainLoop+0x318>)
 8008566:	2201      	movs	r2, #1
 8008568:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800856a:	4b36      	ldr	r3, [pc, #216]	; (8008644 <mainLoop+0x314>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d112      	bne.n	8008598 <mainLoop+0x268>
 8008572:	2102      	movs	r1, #2
 8008574:	481f      	ldr	r0, [pc, #124]	; (80085f4 <mainLoop+0x2c4>)
 8008576:	f001 fb6d 	bl	8009c54 <HAL_GPIO_ReadPin>
 800857a:	4603      	mov	r3, r0
 800857c:	2b01      	cmp	r3, #1
 800857e:	d10b      	bne.n	8008598 <mainLoop+0x268>
 8008580:	2104      	movs	r1, #4
 8008582:	481c      	ldr	r0, [pc, #112]	; (80085f4 <mainLoop+0x2c4>)
 8008584:	f001 fb66 	bl	8009c54 <HAL_GPIO_ReadPin>
 8008588:	4603      	mov	r3, r0
 800858a:	2b01      	cmp	r3, #1
 800858c:	d104      	bne.n	8008598 <mainLoop+0x268>
			menuGiris=1;
 800858e:	4b2d      	ldr	r3, [pc, #180]	; (8008644 <mainLoop+0x314>)
 8008590:	2201      	movs	r2, #1
 8008592:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008594:	f7f8 f894 	bl	80006c0 <lcd_clear>
		}

		if(menuGiris==1) {
 8008598:	4b2a      	ldr	r3, [pc, #168]	; (8008644 <mainLoop+0x314>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d102      	bne.n	80085a6 <mainLoop+0x276>
			menu(&hi2c1);
 80085a0:	481a      	ldr	r0, [pc, #104]	; (800860c <mainLoop+0x2dc>)
 80085a2:	f7f9 f80f 	bl	80015c4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80085a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085aa:	4813      	ldr	r0, [pc, #76]	; (80085f8 <mainLoop+0x2c8>)
 80085ac:	f001 fb81 	bl	8009cb2 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80085b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80085b4:	4828      	ldr	r0, [pc, #160]	; (8008658 <mainLoop+0x328>)
 80085b6:	f001 fb4d 	bl	8009c54 <HAL_GPIO_ReadPin>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10a      	bne.n	80085d6 <mainLoop+0x2a6>
 80085c0:	4b26      	ldr	r3, [pc, #152]	; (800865c <mainLoop+0x32c>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	f083 0301 	eor.w	r3, r3, #1
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <mainLoop+0x2a6>
			stopVar=1;
 80085ce:	4b24      	ldr	r3, [pc, #144]	; (8008660 <mainLoop+0x330>)
 80085d0:	2201      	movs	r2, #1
 80085d2:	701a      	strb	r2, [r3, #0]
 80085d4:	e002      	b.n	80085dc <mainLoop+0x2ac>
		} else {
			stopVar=0;
 80085d6:	4b22      	ldr	r3, [pc, #136]	; (8008660 <mainLoop+0x330>)
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80085dc:	f7fd fec8 	bl	8006370 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80085e0:	f7fd fefa 	bl	80063d8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80085e4:	f7fd ff3e 	bl	8006464 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80085e8:	f7fd ff8e 	bl	8006508 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80085ec:	f7ff fadc 	bl	8007ba8 <checkDemoModCalisma>
		checkLCDBacklight();
 80085f0:	e6a1      	b.n	8008336 <mainLoop+0x6>
 80085f2:	bf00      	nop
 80085f4:	40010800 	.word	0x40010800
 80085f8:	40011000 	.word	0x40011000
 80085fc:	20000d3b 	.word	0x20000d3b
 8008600:	20000cb4 	.word	0x20000cb4
 8008604:	20000cd0 	.word	0x20000cd0
 8008608:	20000d38 	.word	0x20000d38
 800860c:	20000b54 	.word	0x20000b54
 8008610:	20000c38 	.word	0x20000c38
 8008614:	20000d2d 	.word	0x20000d2d
 8008618:	0800e500 	.word	0x0800e500
 800861c:	0800e514 	.word	0x0800e514
 8008620:	20000d39 	.word	0x20000d39
 8008624:	20000d3a 	.word	0x20000d3a
 8008628:	0800e528 	.word	0x0800e528
 800862c:	0800e53c 	.word	0x0800e53c
 8008630:	0800e550 	.word	0x0800e550
 8008634:	0800e564 	.word	0x0800e564
 8008638:	0800e578 	.word	0x0800e578
 800863c:	0800e58c 	.word	0x0800e58c
 8008640:	0800e5a0 	.word	0x0800e5a0
 8008644:	20000d29 	.word	0x20000d29
 8008648:	20000d40 	.word	0x20000d40
 800864c:	20000d2a 	.word	0x20000d2a
 8008650:	0800e464 	.word	0x0800e464
 8008654:	0800e478 	.word	0x0800e478
 8008658:	40010c00 	.word	0x40010c00
 800865c:	20000d61 	.word	0x20000d61
 8008660:	20000d5e 	.word	0x20000d5e

08008664 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	4a03      	ldr	r2, [pc, #12]	; (8008680 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008674:	6013      	str	r3, [r2, #0]
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr
 8008680:	20000cb4 	.word	0x20000cb4

08008684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008684:	b5b0      	push	{r4, r5, r7, lr}
 8008686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008688:	f000 fcb2 	bl	8008ff0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800868c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008690:	f000 fd10 	bl	80090b4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008694:	f000 f8e2 	bl	800885c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008698:	f000 fa04 	bl	8008aa4 <MX_GPIO_Init>
  MX_CAN_Init();
 800869c:	f000 f924 	bl	80088e8 <MX_CAN_Init>
  MX_I2C1_Init();
 80086a0:	f000 f956 	bl	8008950 <MX_I2C1_Init>
  MX_TIM1_Init();
 80086a4:	f000 f982 	bl	80089ac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80086a8:	f000 f9d2 	bl	8008a50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80086ac:	2201      	movs	r2, #1
 80086ae:	2140      	movs	r1, #64	; 0x40
 80086b0:	485a      	ldr	r0, [pc, #360]	; (800881c <main+0x198>)
 80086b2:	f001 fae6 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80086b6:	2201      	movs	r2, #1
 80086b8:	2180      	movs	r1, #128	; 0x80
 80086ba:	4858      	ldr	r0, [pc, #352]	; (800881c <main+0x198>)
 80086bc:	f001 fae1 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80086c0:	200a      	movs	r0, #10
 80086c2:	f000 fcf7 	bl	80090b4 <HAL_Delay>
  lcd_init();
 80086c6:	f7f7 ff9d 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 80086ca:	200a      	movs	r0, #10
 80086cc:	f000 fcf2 	bl	80090b4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80086d0:	4853      	ldr	r0, [pc, #332]	; (8008820 <main+0x19c>)
 80086d2:	f003 f989 	bl	800b9e8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80086d6:	bf00      	nop
 80086d8:	4852      	ldr	r0, [pc, #328]	; (8008824 <main+0x1a0>)
 80086da:	f002 f8e4 	bl	800a8a6 <HAL_I2C_GetError>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d0f9      	beq.n	80086d8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80086e4:	bf00      	nop
 80086e6:	484f      	ldr	r0, [pc, #316]	; (8008824 <main+0x1a0>)
 80086e8:	f002 f8d0 	bl	800a88c <HAL_I2C_GetState>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d1f9      	bne.n	80086e6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80086f2:	2200      	movs	r2, #0
 80086f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086f8:	4848      	ldr	r0, [pc, #288]	; (800881c <main+0x198>)
 80086fa:	f001 fac2 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80086fe:	2200      	movs	r2, #0
 8008700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008704:	4845      	ldr	r0, [pc, #276]	; (800881c <main+0x198>)
 8008706:	f001 fabc 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800870a:	2200      	movs	r2, #0
 800870c:	2104      	movs	r1, #4
 800870e:	4843      	ldr	r0, [pc, #268]	; (800881c <main+0x198>)
 8008710:	f001 fab7 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008714:	2200      	movs	r2, #0
 8008716:	2102      	movs	r1, #2
 8008718:	4840      	ldr	r0, [pc, #256]	; (800881c <main+0x198>)
 800871a:	f001 fab2 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800871e:	2200      	movs	r2, #0
 8008720:	2101      	movs	r1, #1
 8008722:	483e      	ldr	r0, [pc, #248]	; (800881c <main+0x198>)
 8008724:	f001 faad 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008728:	2200      	movs	r2, #0
 800872a:	2120      	movs	r1, #32
 800872c:	483e      	ldr	r0, [pc, #248]	; (8008828 <main+0x1a4>)
 800872e:	f001 faa8 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008732:	2200      	movs	r2, #0
 8008734:	2110      	movs	r1, #16
 8008736:	483c      	ldr	r0, [pc, #240]	; (8008828 <main+0x1a4>)
 8008738:	f001 faa3 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800873c:	2200      	movs	r2, #0
 800873e:	2180      	movs	r1, #128	; 0x80
 8008740:	483a      	ldr	r0, [pc, #232]	; (800882c <main+0x1a8>)
 8008742:	f001 fa9e 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008746:	2200      	movs	r2, #0
 8008748:	2140      	movs	r1, #64	; 0x40
 800874a:	4838      	ldr	r0, [pc, #224]	; (800882c <main+0x1a8>)
 800874c:	f001 fa99 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008750:	2200      	movs	r2, #0
 8008752:	2120      	movs	r1, #32
 8008754:	4835      	ldr	r0, [pc, #212]	; (800882c <main+0x1a8>)
 8008756:	f001 fa94 	bl	8009c82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800875a:	2200      	movs	r2, #0
 800875c:	2110      	movs	r1, #16
 800875e:	4833      	ldr	r0, [pc, #204]	; (800882c <main+0x1a8>)
 8008760:	f001 fa8f 	bl	8009c82 <HAL_GPIO_WritePin>

  i2cTest();
 8008764:	f7fd fd36 	bl	80061d4 <i2cTest>
  HAL_Delay(100);
 8008768:	2064      	movs	r0, #100	; 0x64
 800876a:	f000 fca3 	bl	80090b4 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 800876e:	4a30      	ldr	r2, [pc, #192]	; (8008830 <main+0x1ac>)
 8008770:	2101      	movs	r1, #1
 8008772:	2001      	movs	r0, #1
 8008774:	f7f7 ff78 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008778:	4a2e      	ldr	r2, [pc, #184]	; (8008834 <main+0x1b0>)
 800877a:	2101      	movs	r1, #1
 800877c:	2002      	movs	r0, #2
 800877e:	f7f7 ff73 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 8008782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008786:	f000 fc95 	bl	80090b4 <HAL_Delay>
  lcd_clear();
 800878a:	f7f7 ff99 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 800878e:	2000      	movs	r0, #0
 8008790:	f7fd f990 	bl	8005ab4 <eepromKontrol>
  HAL_Delay(200);
 8008794:	20c8      	movs	r0, #200	; 0xc8
 8008796:	f000 fc8d 	bl	80090b4 <HAL_Delay>

  memcpy(machineID, &eepromData[idStartPos], 12);
 800879a:	4b27      	ldr	r3, [pc, #156]	; (8008838 <main+0x1b4>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	4b26      	ldr	r3, [pc, #152]	; (800883c <main+0x1b8>)
 80087a2:	441a      	add	r2, r3
 80087a4:	4b26      	ldr	r3, [pc, #152]	; (8008840 <main+0x1bc>)
 80087a6:	6810      	ldr	r0, [r2, #0]
 80087a8:	6851      	ldr	r1, [r2, #4]
 80087aa:	6892      	ldr	r2, [r2, #8]
 80087ac:	c307      	stmia	r3!, {r0, r1, r2}
  memcpy(wifiSSID, (char *)&eepromData[ssidStartPos], 20);
 80087ae:	4b25      	ldr	r3, [pc, #148]	; (8008844 <main+0x1c0>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	4b21      	ldr	r3, [pc, #132]	; (800883c <main+0x1b8>)
 80087b6:	4413      	add	r3, r2
 80087b8:	4a23      	ldr	r2, [pc, #140]	; (8008848 <main+0x1c4>)
 80087ba:	4614      	mov	r4, r2
 80087bc:	461d      	mov	r5, r3
 80087be:	6828      	ldr	r0, [r5, #0]
 80087c0:	6869      	ldr	r1, [r5, #4]
 80087c2:	68aa      	ldr	r2, [r5, #8]
 80087c4:	68eb      	ldr	r3, [r5, #12]
 80087c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087c8:	6928      	ldr	r0, [r5, #16]
 80087ca:	6020      	str	r0, [r4, #0]
  HAL_Delay(100);
 80087cc:	2064      	movs	r0, #100	; 0x64
 80087ce:	f000 fc71 	bl	80090b4 <HAL_Delay>
  memcpy(wifiPass, (char *)&eepromData[passStartPos], 20);
 80087d2:	4b1e      	ldr	r3, [pc, #120]	; (800884c <main+0x1c8>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	4b18      	ldr	r3, [pc, #96]	; (800883c <main+0x1b8>)
 80087da:	4413      	add	r3, r2
 80087dc:	4a1c      	ldr	r2, [pc, #112]	; (8008850 <main+0x1cc>)
 80087de:	4614      	mov	r4, r2
 80087e0:	461d      	mov	r5, r3
 80087e2:	6828      	ldr	r0, [r5, #0]
 80087e4:	6869      	ldr	r1, [r5, #4]
 80087e6:	68aa      	ldr	r2, [r5, #8]
 80087e8:	68eb      	ldr	r3, [r5, #12]
 80087ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ec:	6928      	ldr	r0, [r5, #16]
 80087ee:	6020      	str	r0, [r4, #0]
  HAL_Delay(100);
 80087f0:	2064      	movs	r0, #100	; 0x64
 80087f2:	f000 fc5f 	bl	80090b4 <HAL_Delay>

  lcd_clear();
 80087f6:	f7f7 ff63 	bl	80006c0 <lcd_clear>
  HAL_Delay(200);
 80087fa:	20c8      	movs	r0, #200	; 0xc8
 80087fc:	f000 fc5a 	bl	80090b4 <HAL_Delay>

  backLightTimer = millis;
 8008800:	4b14      	ldr	r3, [pc, #80]	; (8008854 <main+0x1d0>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a14      	ldr	r2, [pc, #80]	; (8008858 <main+0x1d4>)
 8008806:	6013      	str	r3, [r2, #0]

  //ESP8266_Init(&huart1, "H.İ.D.", "asdasd0099123");

  if(machineID[11] == '\0') {
 8008808:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <main+0x1bc>)
 800880a:	7adb      	ldrb	r3, [r3, #11]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <main+0x192>
	  takeMachineID(0);
 8008810:	2000      	movs	r0, #0
 8008812:	f7f8 f953 	bl	8000abc <takeMachineID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008816:	f7ff fd8b 	bl	8008330 <mainLoop>
 800881a:	e7fc      	b.n	8008816 <main+0x192>
 800881c:	40010c00 	.word	0x40010c00
 8008820:	20000ba8 	.word	0x20000ba8
 8008824:	20000b54 	.word	0x20000b54
 8008828:	40011000 	.word	0x40011000
 800882c:	40010800 	.word	0x40010800
 8008830:	0800e5b4 	.word	0x0800e5b4
 8008834:	0800e5c8 	.word	0x0800e5c8
 8008838:	200009b1 	.word	0x200009b1
 800883c:	20000c38 	.word	0x20000c38
 8008840:	20000cd4 	.word	0x20000cd4
 8008844:	200009b2 	.word	0x200009b2
 8008848:	20000ce0 	.word	0x20000ce0
 800884c:	200009b3 	.word	0x200009b3
 8008850:	20000cf4 	.word	0x20000cf4
 8008854:	20000cb4 	.word	0x20000cb4
 8008858:	20000cd0 	.word	0x20000cd0

0800885c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b090      	sub	sp, #64	; 0x40
 8008860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008862:	f107 0318 	add.w	r3, r7, #24
 8008866:	2228      	movs	r2, #40	; 0x28
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f004 fb36 	bl	800cedc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008870:	1d3b      	adds	r3, r7, #4
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	605a      	str	r2, [r3, #4]
 8008878:	609a      	str	r2, [r3, #8]
 800887a:	60da      	str	r2, [r3, #12]
 800887c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800887e:	2301      	movs	r3, #1
 8008880:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008886:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008888:	2300      	movs	r3, #0
 800888a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800888c:	2301      	movs	r3, #1
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008890:	2302      	movs	r3, #2
 8008892:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800889a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088a0:	f107 0318 	add.w	r3, r7, #24
 80088a4:	4618      	mov	r0, r3
 80088a6:	f002 fc3f 	bl	800b128 <HAL_RCC_OscConfig>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80088b0:	f000 f9a2 	bl	8008bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088b4:	230f      	movs	r3, #15
 80088b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088b8:	2302      	movs	r3, #2
 80088ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80088c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80088c6:	2300      	movs	r3, #0
 80088c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80088ca:	1d3b      	adds	r3, r7, #4
 80088cc:	2102      	movs	r1, #2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f002 feac 	bl	800b62c <HAL_RCC_ClockConfig>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80088da:	f000 f98d 	bl	8008bf8 <Error_Handler>
  }
}
 80088de:	bf00      	nop
 80088e0:	3740      	adds	r7, #64	; 0x40
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80088ec:	4b16      	ldr	r3, [pc, #88]	; (8008948 <MX_CAN_Init+0x60>)
 80088ee:	4a17      	ldr	r2, [pc, #92]	; (800894c <MX_CAN_Init+0x64>)
 80088f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <MX_CAN_Init+0x60>)
 80088f4:	2210      	movs	r2, #16
 80088f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <MX_CAN_Init+0x60>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80088fe:	4b12      	ldr	r3, [pc, #72]	; (8008948 <MX_CAN_Init+0x60>)
 8008900:	2200      	movs	r2, #0
 8008902:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008904:	4b10      	ldr	r3, [pc, #64]	; (8008948 <MX_CAN_Init+0x60>)
 8008906:	2200      	movs	r2, #0
 8008908:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800890a:	4b0f      	ldr	r3, [pc, #60]	; (8008948 <MX_CAN_Init+0x60>)
 800890c:	2200      	movs	r2, #0
 800890e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008910:	4b0d      	ldr	r3, [pc, #52]	; (8008948 <MX_CAN_Init+0x60>)
 8008912:	2200      	movs	r2, #0
 8008914:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008916:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <MX_CAN_Init+0x60>)
 8008918:	2200      	movs	r2, #0
 800891a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <MX_CAN_Init+0x60>)
 800891e:	2200      	movs	r2, #0
 8008920:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <MX_CAN_Init+0x60>)
 8008924:	2200      	movs	r2, #0
 8008926:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008928:	4b07      	ldr	r3, [pc, #28]	; (8008948 <MX_CAN_Init+0x60>)
 800892a:	2200      	movs	r2, #0
 800892c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800892e:	4b06      	ldr	r3, [pc, #24]	; (8008948 <MX_CAN_Init+0x60>)
 8008930:	2200      	movs	r2, #0
 8008932:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008934:	4804      	ldr	r0, [pc, #16]	; (8008948 <MX_CAN_Init+0x60>)
 8008936:	f000 fbe1 	bl	80090fc <HAL_CAN_Init>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008940:	f000 f95a 	bl	8008bf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008944:	bf00      	nop
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20000b2c 	.word	0x20000b2c
 800894c:	40006400 	.word	0x40006400

08008950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008954:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <MX_I2C1_Init+0x50>)
 8008956:	4a13      	ldr	r2, [pc, #76]	; (80089a4 <MX_I2C1_Init+0x54>)
 8008958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800895a:	4b11      	ldr	r3, [pc, #68]	; (80089a0 <MX_I2C1_Init+0x50>)
 800895c:	4a12      	ldr	r2, [pc, #72]	; (80089a8 <MX_I2C1_Init+0x58>)
 800895e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <MX_I2C1_Init+0x50>)
 8008962:	2200      	movs	r2, #0
 8008964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008966:	4b0e      	ldr	r3, [pc, #56]	; (80089a0 <MX_I2C1_Init+0x50>)
 8008968:	2200      	movs	r2, #0
 800896a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800896c:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <MX_I2C1_Init+0x50>)
 800896e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008974:	4b0a      	ldr	r3, [pc, #40]	; (80089a0 <MX_I2C1_Init+0x50>)
 8008976:	2200      	movs	r2, #0
 8008978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800897a:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <MX_I2C1_Init+0x50>)
 800897c:	2200      	movs	r2, #0
 800897e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008980:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <MX_I2C1_Init+0x50>)
 8008982:	2200      	movs	r2, #0
 8008984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008986:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <MX_I2C1_Init+0x50>)
 8008988:	2200      	movs	r2, #0
 800898a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800898c:	4804      	ldr	r0, [pc, #16]	; (80089a0 <MX_I2C1_Init+0x50>)
 800898e:	f001 f9a9 	bl	8009ce4 <HAL_I2C_Init>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008998:	f000 f92e 	bl	8008bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800899c:	bf00      	nop
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20000b54 	.word	0x20000b54
 80089a4:	40005400 	.word	0x40005400
 80089a8:	00061a80 	.word	0x00061a80

080089ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089b2:	f107 0308 	add.w	r3, r7, #8
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	605a      	str	r2, [r3, #4]
 80089bc:	609a      	str	r2, [r3, #8]
 80089be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089c0:	463b      	mov	r3, r7
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80089c8:	4b1f      	ldr	r3, [pc, #124]	; (8008a48 <MX_TIM1_Init+0x9c>)
 80089ca:	4a20      	ldr	r2, [pc, #128]	; (8008a4c <MX_TIM1_Init+0xa0>)
 80089cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80089ce:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <MX_TIM1_Init+0x9c>)
 80089d0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80089d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089d6:	4b1c      	ldr	r3, [pc, #112]	; (8008a48 <MX_TIM1_Init+0x9c>)
 80089d8:	2200      	movs	r2, #0
 80089da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <MX_TIM1_Init+0x9c>)
 80089de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80089e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089e4:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <MX_TIM1_Init+0x9c>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80089ea:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <MX_TIM1_Init+0x9c>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089f0:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <MX_TIM1_Init+0x9c>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80089f6:	4814      	ldr	r0, [pc, #80]	; (8008a48 <MX_TIM1_Init+0x9c>)
 80089f8:	f002 ffa6 	bl	800b948 <HAL_TIM_Base_Init>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008a02:	f000 f8f9 	bl	8008bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008a0c:	f107 0308 	add.w	r3, r7, #8
 8008a10:	4619      	mov	r1, r3
 8008a12:	480d      	ldr	r0, [pc, #52]	; (8008a48 <MX_TIM1_Init+0x9c>)
 8008a14:	f003 f950 	bl	800bcb8 <HAL_TIM_ConfigClockSource>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008a1e:	f000 f8eb 	bl	8008bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a22:	2300      	movs	r3, #0
 8008a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a2a:	463b      	mov	r3, r7
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4806      	ldr	r0, [pc, #24]	; (8008a48 <MX_TIM1_Init+0x9c>)
 8008a30:	f003 fb3e 	bl	800c0b0 <HAL_TIMEx_MasterConfigSynchronization>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a3a:	f000 f8dd 	bl	8008bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008a3e:	bf00      	nop
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20000ba8 	.word	0x20000ba8
 8008a4c:	40012c00 	.word	0x40012c00

08008a50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a54:	4b11      	ldr	r3, [pc, #68]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a56:	4a12      	ldr	r2, [pc, #72]	; (8008aa0 <MX_USART1_UART_Init+0x50>)
 8008a58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a5a:	4b10      	ldr	r3, [pc, #64]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a62:	4b0e      	ldr	r3, [pc, #56]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a68:	4b0c      	ldr	r3, [pc, #48]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008a6e:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008a74:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a76:	220c      	movs	r2, #12
 8008a78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a7a:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a80:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008a86:	4805      	ldr	r0, [pc, #20]	; (8008a9c <MX_USART1_UART_Init+0x4c>)
 8008a88:	f003 fb90 	bl	800c1ac <HAL_UART_Init>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008a92:	f000 f8b1 	bl	8008bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008a96:	bf00      	nop
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000bf0 	.word	0x20000bf0
 8008aa0:	40013800 	.word	0x40013800

08008aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aaa:	f107 0310 	add.w	r3, r7, #16
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	605a      	str	r2, [r3, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
 8008ab6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ab8:	4b4b      	ldr	r3, [pc, #300]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	4a4a      	ldr	r2, [pc, #296]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008abe:	f043 0310 	orr.w	r3, r3, #16
 8008ac2:	6193      	str	r3, [r2, #24]
 8008ac4:	4b48      	ldr	r3, [pc, #288]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ad0:	4b45      	ldr	r3, [pc, #276]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	4a44      	ldr	r2, [pc, #272]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008ad6:	f043 0320 	orr.w	r3, r3, #32
 8008ada:	6193      	str	r3, [r2, #24]
 8008adc:	4b42      	ldr	r3, [pc, #264]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	60bb      	str	r3, [r7, #8]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ae8:	4b3f      	ldr	r3, [pc, #252]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	4a3e      	ldr	r2, [pc, #248]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008aee:	f043 0304 	orr.w	r3, r3, #4
 8008af2:	6193      	str	r3, [r2, #24]
 8008af4:	4b3c      	ldr	r3, [pc, #240]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b00:	4b39      	ldr	r3, [pc, #228]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	4a38      	ldr	r2, [pc, #224]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008b06:	f043 0308 	orr.w	r3, r3, #8
 8008b0a:	6193      	str	r3, [r2, #24]
 8008b0c:	4b36      	ldr	r3, [pc, #216]	; (8008be8 <MX_GPIO_Init+0x144>)
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	603b      	str	r3, [r7, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	21f0      	movs	r1, #240	; 0xf0
 8008b1c:	4833      	ldr	r0, [pc, #204]	; (8008bec <MX_GPIO_Init+0x148>)
 8008b1e:	f001 f8b0 	bl	8009c82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008b22:	2200      	movs	r2, #0
 8008b24:	f241 0130 	movw	r1, #4144	; 0x1030
 8008b28:	4831      	ldr	r0, [pc, #196]	; (8008bf0 <MX_GPIO_Init+0x14c>)
 8008b2a:	f001 f8aa 	bl	8009c82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f640 4107 	movw	r1, #3079	; 0xc07
 8008b34:	482f      	ldr	r0, [pc, #188]	; (8008bf4 <MX_GPIO_Init+0x150>)
 8008b36:	f001 f8a4 	bl	8009c82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008b3a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008b3e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b48:	f107 0310 	add.w	r3, r7, #16
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4828      	ldr	r0, [pc, #160]	; (8008bf0 <MX_GPIO_Init+0x14c>)
 8008b50:	f000 fe20 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008b54:	f248 130f 	movw	r3, #33039	; 0x810f
 8008b58:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b62:	f107 0310 	add.w	r3, r7, #16
 8008b66:	4619      	mov	r1, r3
 8008b68:	4820      	ldr	r0, [pc, #128]	; (8008bec <MX_GPIO_Init+0x148>)
 8008b6a:	f000 fe13 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008b6e:	23f0      	movs	r3, #240	; 0xf0
 8008b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b72:	2301      	movs	r3, #1
 8008b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b7e:	f107 0310 	add.w	r3, r7, #16
 8008b82:	4619      	mov	r1, r3
 8008b84:	4819      	ldr	r0, [pc, #100]	; (8008bec <MX_GPIO_Init+0x148>)
 8008b86:	f000 fe05 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008b8a:	f241 0330 	movw	r3, #4144	; 0x1030
 8008b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b90:	2301      	movs	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b9c:	f107 0310 	add.w	r3, r7, #16
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4813      	ldr	r0, [pc, #76]	; (8008bf0 <MX_GPIO_Init+0x14c>)
 8008ba4:	f000 fdf6 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008ba8:	f640 4307 	movw	r3, #3079	; 0xc07
 8008bac:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bba:	f107 0310 	add.w	r3, r7, #16
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	480c      	ldr	r0, [pc, #48]	; (8008bf4 <MX_GPIO_Init+0x150>)
 8008bc2:	f000 fde7 	bl	8009794 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008bc6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4806      	ldr	r0, [pc, #24]	; (8008bf4 <MX_GPIO_Init+0x150>)
 8008bdc:	f000 fdda 	bl	8009794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008be0:	bf00      	nop
 8008be2:	3720      	adds	r7, #32
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	40021000 	.word	0x40021000
 8008bec:	40010800 	.word	0x40010800
 8008bf0:	40011000 	.word	0x40011000
 8008bf4:	40010c00 	.word	0x40010c00

08008bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008bfc:	bf00      	nop
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bc80      	pop	{r7}
 8008c02:	4770      	bx	lr

08008c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c0a:	4b15      	ldr	r3, [pc, #84]	; (8008c60 <HAL_MspInit+0x5c>)
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <HAL_MspInit+0x5c>)
 8008c10:	f043 0301 	orr.w	r3, r3, #1
 8008c14:	6193      	str	r3, [r2, #24]
 8008c16:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <HAL_MspInit+0x5c>)
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	60bb      	str	r3, [r7, #8]
 8008c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c22:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <HAL_MspInit+0x5c>)
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	4a0e      	ldr	r2, [pc, #56]	; (8008c60 <HAL_MspInit+0x5c>)
 8008c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c2c:	61d3      	str	r3, [r2, #28]
 8008c2e:	4b0c      	ldr	r3, [pc, #48]	; (8008c60 <HAL_MspInit+0x5c>)
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c36:	607b      	str	r3, [r7, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <HAL_MspInit+0x60>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	4a04      	ldr	r2, [pc, #16]	; (8008c64 <HAL_MspInit+0x60>)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c56:	bf00      	nop
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc80      	pop	{r7}
 8008c5e:	4770      	bx	lr
 8008c60:	40021000 	.word	0x40021000
 8008c64:	40010000 	.word	0x40010000

08008c68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c70:	f107 0310 	add.w	r3, r7, #16
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	605a      	str	r2, [r3, #4]
 8008c7a:	609a      	str	r2, [r3, #8]
 8008c7c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1c      	ldr	r2, [pc, #112]	; (8008cf4 <HAL_CAN_MspInit+0x8c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d131      	bne.n	8008cec <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <HAL_CAN_MspInit+0x90>)
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	4a1a      	ldr	r2, [pc, #104]	; (8008cf8 <HAL_CAN_MspInit+0x90>)
 8008c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c92:	61d3      	str	r3, [r2, #28]
 8008c94:	4b18      	ldr	r3, [pc, #96]	; (8008cf8 <HAL_CAN_MspInit+0x90>)
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ca0:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <HAL_CAN_MspInit+0x90>)
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	4a14      	ldr	r2, [pc, #80]	; (8008cf8 <HAL_CAN_MspInit+0x90>)
 8008ca6:	f043 0304 	orr.w	r3, r3, #4
 8008caa:	6193      	str	r3, [r2, #24]
 8008cac:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <HAL_CAN_MspInit+0x90>)
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	60bb      	str	r3, [r7, #8]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cc6:	f107 0310 	add.w	r3, r7, #16
 8008cca:	4619      	mov	r1, r3
 8008ccc:	480b      	ldr	r0, [pc, #44]	; (8008cfc <HAL_CAN_MspInit+0x94>)
 8008cce:	f000 fd61 	bl	8009794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ce0:	f107 0310 	add.w	r3, r7, #16
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4805      	ldr	r0, [pc, #20]	; (8008cfc <HAL_CAN_MspInit+0x94>)
 8008ce8:	f000 fd54 	bl	8009794 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008cec:	bf00      	nop
 8008cee:	3720      	adds	r7, #32
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	40006400 	.word	0x40006400
 8008cf8:	40021000 	.word	0x40021000
 8008cfc:	40010800 	.word	0x40010800

08008d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d08:	f107 0310 	add.w	r3, r7, #16
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	605a      	str	r2, [r3, #4]
 8008d12:	609a      	str	r2, [r3, #8]
 8008d14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <HAL_I2C_MspInit+0x70>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d123      	bne.n	8008d68 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d20:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <HAL_I2C_MspInit+0x74>)
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	4a13      	ldr	r2, [pc, #76]	; (8008d74 <HAL_I2C_MspInit+0x74>)
 8008d26:	f043 0308 	orr.w	r3, r3, #8
 8008d2a:	6193      	str	r3, [r2, #24]
 8008d2c:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <HAL_I2C_MspInit+0x74>)
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d38:	23c0      	movs	r3, #192	; 0xc0
 8008d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d3c:	2312      	movs	r3, #18
 8008d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d40:	2303      	movs	r3, #3
 8008d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d44:	f107 0310 	add.w	r3, r7, #16
 8008d48:	4619      	mov	r1, r3
 8008d4a:	480b      	ldr	r0, [pc, #44]	; (8008d78 <HAL_I2C_MspInit+0x78>)
 8008d4c:	f000 fd22 	bl	8009794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d50:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <HAL_I2C_MspInit+0x74>)
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	4a07      	ldr	r2, [pc, #28]	; (8008d74 <HAL_I2C_MspInit+0x74>)
 8008d56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d5a:	61d3      	str	r3, [r2, #28]
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <HAL_I2C_MspInit+0x74>)
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d64:	60bb      	str	r3, [r7, #8]
 8008d66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d68:	bf00      	nop
 8008d6a:	3720      	adds	r7, #32
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40005400 	.word	0x40005400
 8008d74:	40021000 	.word	0x40021000
 8008d78:	40010c00 	.word	0x40010c00

08008d7c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a0a      	ldr	r2, [pc, #40]	; (8008db4 <HAL_I2C_MspDeInit+0x38>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d10d      	bne.n	8008daa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <HAL_I2C_MspDeInit+0x3c>)
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	4a09      	ldr	r2, [pc, #36]	; (8008db8 <HAL_I2C_MspDeInit+0x3c>)
 8008d94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d98:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008d9a:	2140      	movs	r1, #64	; 0x40
 8008d9c:	4807      	ldr	r0, [pc, #28]	; (8008dbc <HAL_I2C_MspDeInit+0x40>)
 8008d9e:	f000 fe8d 	bl	8009abc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008da2:	2180      	movs	r1, #128	; 0x80
 8008da4:	4805      	ldr	r0, [pc, #20]	; (8008dbc <HAL_I2C_MspDeInit+0x40>)
 8008da6:	f000 fe89 	bl	8009abc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40005400 	.word	0x40005400
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	40010c00 	.word	0x40010c00

08008dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a0d      	ldr	r2, [pc, #52]	; (8008e04 <HAL_TIM_Base_MspInit+0x44>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d113      	bne.n	8008dfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <HAL_TIM_Base_MspInit+0x48>)
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	4a0c      	ldr	r2, [pc, #48]	; (8008e08 <HAL_TIM_Base_MspInit+0x48>)
 8008dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ddc:	6193      	str	r3, [r2, #24]
 8008dde:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <HAL_TIM_Base_MspInit+0x48>)
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008dea:	2200      	movs	r2, #0
 8008dec:	2100      	movs	r1, #0
 8008dee:	2019      	movs	r0, #25
 8008df0:	f000 fb57 	bl	80094a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008df4:	2019      	movs	r0, #25
 8008df6:	f000 fb70 	bl	80094da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008dfa:	bf00      	nop
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	40012c00 	.word	0x40012c00
 8008e08:	40021000 	.word	0x40021000

08008e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e14:	f107 0310 	add.w	r3, r7, #16
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	609a      	str	r2, [r3, #8]
 8008e20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a20      	ldr	r2, [pc, #128]	; (8008ea8 <HAL_UART_MspInit+0x9c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d139      	bne.n	8008ea0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e2c:	4b1f      	ldr	r3, [pc, #124]	; (8008eac <HAL_UART_MspInit+0xa0>)
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <HAL_UART_MspInit+0xa0>)
 8008e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e36:	6193      	str	r3, [r2, #24]
 8008e38:	4b1c      	ldr	r3, [pc, #112]	; (8008eac <HAL_UART_MspInit+0xa0>)
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e44:	4b19      	ldr	r3, [pc, #100]	; (8008eac <HAL_UART_MspInit+0xa0>)
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	4a18      	ldr	r2, [pc, #96]	; (8008eac <HAL_UART_MspInit+0xa0>)
 8008e4a:	f043 0304 	orr.w	r3, r3, #4
 8008e4e:	6193      	str	r3, [r2, #24]
 8008e50:	4b16      	ldr	r3, [pc, #88]	; (8008eac <HAL_UART_MspInit+0xa0>)
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	60bb      	str	r3, [r7, #8]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e62:	2302      	movs	r3, #2
 8008e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e66:	2303      	movs	r3, #3
 8008e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e6a:	f107 0310 	add.w	r3, r7, #16
 8008e6e:	4619      	mov	r1, r3
 8008e70:	480f      	ldr	r0, [pc, #60]	; (8008eb0 <HAL_UART_MspInit+0xa4>)
 8008e72:	f000 fc8f 	bl	8009794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e84:	f107 0310 	add.w	r3, r7, #16
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4809      	ldr	r0, [pc, #36]	; (8008eb0 <HAL_UART_MspInit+0xa4>)
 8008e8c:	f000 fc82 	bl	8009794 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008e90:	2200      	movs	r2, #0
 8008e92:	2100      	movs	r1, #0
 8008e94:	2025      	movs	r0, #37	; 0x25
 8008e96:	f000 fb04 	bl	80094a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008e9a:	2025      	movs	r0, #37	; 0x25
 8008e9c:	f000 fb1d 	bl	80094da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008ea0:	bf00      	nop
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	40013800 	.word	0x40013800
 8008eac:	40021000 	.word	0x40021000
 8008eb0:	40010800 	.word	0x40010800

08008eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008eb8:	e7fe      	b.n	8008eb8 <NMI_Handler+0x4>

08008eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ebe:	e7fe      	b.n	8008ebe <HardFault_Handler+0x4>

08008ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ec4:	e7fe      	b.n	8008ec4 <MemManage_Handler+0x4>

08008ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008eca:	e7fe      	b.n	8008eca <BusFault_Handler+0x4>

08008ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ed0:	e7fe      	b.n	8008ed0 <UsageFault_Handler+0x4>

08008ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ed6:	bf00      	nop
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bc80      	pop	{r7}
 8008edc:	4770      	bx	lr

08008ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ee2:	bf00      	nop
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr

08008eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008eea:	b480      	push	{r7}
 8008eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008eee:	bf00      	nop
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bc80      	pop	{r7}
 8008ef4:	4770      	bx	lr

08008ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008efa:	f000 f8bf 	bl	800907c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008efe:	bf00      	nop
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008f08:	4802      	ldr	r0, [pc, #8]	; (8008f14 <TIM1_UP_IRQHandler+0x10>)
 8008f0a:	f002 fdcd 	bl	800baa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008f0e:	bf00      	nop
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000ba8 	.word	0x20000ba8

08008f18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008f1c:	4802      	ldr	r0, [pc, #8]	; (8008f28 <USART1_IRQHandler+0x10>)
 8008f1e:	f003 f9cb 	bl	800c2b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008f22:	bf00      	nop
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000bf0 	.word	0x20000bf0

08008f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f34:	4a14      	ldr	r2, [pc, #80]	; (8008f88 <_sbrk+0x5c>)
 8008f36:	4b15      	ldr	r3, [pc, #84]	; (8008f8c <_sbrk+0x60>)
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f40:	4b13      	ldr	r3, [pc, #76]	; (8008f90 <_sbrk+0x64>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f48:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <_sbrk+0x64>)
 8008f4a:	4a12      	ldr	r2, [pc, #72]	; (8008f94 <_sbrk+0x68>)
 8008f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f4e:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <_sbrk+0x64>)
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4413      	add	r3, r2
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d207      	bcs.n	8008f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f5c:	f003 ffe6 	bl	800cf2c <__errno>
 8008f60:	4603      	mov	r3, r0
 8008f62:	220c      	movs	r2, #12
 8008f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f66:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6a:	e009      	b.n	8008f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f6c:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <_sbrk+0x64>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f72:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <_sbrk+0x64>)
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4413      	add	r3, r2
 8008f7a:	4a05      	ldr	r2, [pc, #20]	; (8008f90 <_sbrk+0x64>)
 8008f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	2000c000 	.word	0x2000c000
 8008f8c:	00000400 	.word	0x00000400
 8008f90:	20000ea0 	.word	0x20000ea0
 8008f94:	20000ff0 	.word	0x20000ff0

08008f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008f9c:	bf00      	nop
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bc80      	pop	{r7}
 8008fa2:	4770      	bx	lr

08008fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fa4:	480c      	ldr	r0, [pc, #48]	; (8008fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008fa6:	490d      	ldr	r1, [pc, #52]	; (8008fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008fa8:	4a0d      	ldr	r2, [pc, #52]	; (8008fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fac:	e002      	b.n	8008fb4 <LoopCopyDataInit>

08008fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fb2:	3304      	adds	r3, #4

08008fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fb8:	d3f9      	bcc.n	8008fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fba:	4a0a      	ldr	r2, [pc, #40]	; (8008fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008fbc:	4c0a      	ldr	r4, [pc, #40]	; (8008fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fc0:	e001      	b.n	8008fc6 <LoopFillZerobss>

08008fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008fc4:	3204      	adds	r2, #4

08008fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fc8:	d3fb      	bcc.n	8008fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008fca:	f7ff ffe5 	bl	8008f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008fce:	f003 ffb3 	bl	800cf38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008fd2:	f7ff fb57 	bl	8008684 <main>
  bx lr
 8008fd6:	4770      	bx	lr
  ldr r0, =_sdata
 8008fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008fdc:	20000a14 	.word	0x20000a14
  ldr r2, =_sidata
 8008fe0:	0800e668 	.word	0x0800e668
  ldr r2, =_sbss
 8008fe4:	20000a14 	.word	0x20000a14
  ldr r4, =_ebss
 8008fe8:	20000ff0 	.word	0x20000ff0

08008fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008fec:	e7fe      	b.n	8008fec <ADC1_2_IRQHandler>
	...

08008ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ff4:	4b08      	ldr	r3, [pc, #32]	; (8009018 <HAL_Init+0x28>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a07      	ldr	r2, [pc, #28]	; (8009018 <HAL_Init+0x28>)
 8008ffa:	f043 0310 	orr.w	r3, r3, #16
 8008ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009000:	2003      	movs	r0, #3
 8009002:	f000 fa43 	bl	800948c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009006:	200f      	movs	r0, #15
 8009008:	f000 f808 	bl	800901c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800900c:	f7ff fdfa 	bl	8008c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	40022000 	.word	0x40022000

0800901c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009024:	4b12      	ldr	r3, [pc, #72]	; (8009070 <HAL_InitTick+0x54>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	4b12      	ldr	r3, [pc, #72]	; (8009074 <HAL_InitTick+0x58>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	4619      	mov	r1, r3
 800902e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009032:	fbb3 f3f1 	udiv	r3, r3, r1
 8009036:	fbb2 f3f3 	udiv	r3, r2, r3
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fa5b 	bl	80094f6 <HAL_SYSTICK_Config>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e00e      	b.n	8009068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b0f      	cmp	r3, #15
 800904e:	d80a      	bhi.n	8009066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009050:	2200      	movs	r2, #0
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	f000 fa23 	bl	80094a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800905c:	4a06      	ldr	r2, [pc, #24]	; (8009078 <HAL_InitTick+0x5c>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	e000      	b.n	8009068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	200009b8 	.word	0x200009b8
 8009074:	200009c0 	.word	0x200009c0
 8009078:	200009bc 	.word	0x200009bc

0800907c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800907c:	b480      	push	{r7}
 800907e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <HAL_IncTick+0x1c>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	4b05      	ldr	r3, [pc, #20]	; (800909c <HAL_IncTick+0x20>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4413      	add	r3, r2
 800908c:	4a03      	ldr	r2, [pc, #12]	; (800909c <HAL_IncTick+0x20>)
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	bf00      	nop
 8009092:	46bd      	mov	sp, r7
 8009094:	bc80      	pop	{r7}
 8009096:	4770      	bx	lr
 8009098:	200009c0 	.word	0x200009c0
 800909c:	20000ea4 	.word	0x20000ea4

080090a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
  return uwTick;
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <HAL_GetTick+0x10>)
 80090a6:	681b      	ldr	r3, [r3, #0]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bc80      	pop	{r7}
 80090ae:	4770      	bx	lr
 80090b0:	20000ea4 	.word	0x20000ea4

080090b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090bc:	f7ff fff0 	bl	80090a0 <HAL_GetTick>
 80090c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090cc:	d005      	beq.n	80090da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090ce:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <HAL_Delay+0x44>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090da:	bf00      	nop
 80090dc:	f7ff ffe0 	bl	80090a0 <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d8f7      	bhi.n	80090dc <HAL_Delay+0x28>
  {
  }
}
 80090ec:	bf00      	nop
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	200009c0 	.word	0x200009c0

080090fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e0ed      	b.n	80092ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fda4 	bl	8008c68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009130:	f7ff ffb6 	bl	80090a0 <HAL_GetTick>
 8009134:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009136:	e012      	b.n	800915e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009138:	f7ff ffb2 	bl	80090a0 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b0a      	cmp	r3, #10
 8009144:	d90b      	bls.n	800915e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2205      	movs	r2, #5
 8009156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e0c5      	b.n	80092ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0e5      	beq.n	8009138 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0202 	bic.w	r2, r2, #2
 800917a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800917c:	f7ff ff90 	bl	80090a0 <HAL_GetTick>
 8009180:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009182:	e012      	b.n	80091aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009184:	f7ff ff8c 	bl	80090a0 <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b0a      	cmp	r3, #10
 8009190:	d90b      	bls.n	80091aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2205      	movs	r2, #5
 80091a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e09f      	b.n	80092ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e5      	bne.n	8009184 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	7e1b      	ldrb	r3, [r3, #24]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d108      	bne.n	80091d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e007      	b.n	80091e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7e5b      	ldrb	r3, [r3, #25]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d108      	bne.n	80091fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	e007      	b.n	800920c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800920a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	7e9b      	ldrb	r3, [r3, #26]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d108      	bne.n	8009226 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0220 	orr.w	r2, r2, #32
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e007      	b.n	8009236 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0220 	bic.w	r2, r2, #32
 8009234:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7edb      	ldrb	r3, [r3, #27]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d108      	bne.n	8009250 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 0210 	bic.w	r2, r2, #16
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	e007      	b.n	8009260 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f042 0210 	orr.w	r2, r2, #16
 800925e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	7f1b      	ldrb	r3, [r3, #28]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d108      	bne.n	800927a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0208 	orr.w	r2, r2, #8
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	e007      	b.n	800928a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0208 	bic.w	r2, r2, #8
 8009288:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	7f5b      	ldrb	r3, [r3, #29]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d108      	bne.n	80092a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f042 0204 	orr.w	r2, r2, #4
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	e007      	b.n	80092b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0204 	bic.w	r2, r2, #4
 80092b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	431a      	orrs	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	ea42 0103 	orr.w	r1, r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	1e5a      	subs	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <__NVIC_SetPriorityGrouping>:
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f003 0307 	and.w	r3, r3, #7
 8009302:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009304:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <__NVIC_SetPriorityGrouping+0x44>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009310:	4013      	ands	r3, r2
 8009312:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800931c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009326:	4a04      	ldr	r2, [pc, #16]	; (8009338 <__NVIC_SetPriorityGrouping+0x44>)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	60d3      	str	r3, [r2, #12]
}
 800932c:	bf00      	nop
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	e000ed00 	.word	0xe000ed00

0800933c <__NVIC_GetPriorityGrouping>:
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009340:	4b04      	ldr	r3, [pc, #16]	; (8009354 <__NVIC_GetPriorityGrouping+0x18>)
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	0a1b      	lsrs	r3, r3, #8
 8009346:	f003 0307 	and.w	r3, r3, #7
}
 800934a:	4618      	mov	r0, r3
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	e000ed00 	.word	0xe000ed00

08009358 <__NVIC_EnableIRQ>:
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009366:	2b00      	cmp	r3, #0
 8009368:	db0b      	blt.n	8009382 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	f003 021f 	and.w	r2, r3, #31
 8009370:	4906      	ldr	r1, [pc, #24]	; (800938c <__NVIC_EnableIRQ+0x34>)
 8009372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009376:	095b      	lsrs	r3, r3, #5
 8009378:	2001      	movs	r0, #1
 800937a:	fa00 f202 	lsl.w	r2, r0, r2
 800937e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009382:	bf00      	nop
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	bc80      	pop	{r7}
 800938a:	4770      	bx	lr
 800938c:	e000e100 	.word	0xe000e100

08009390 <__NVIC_SetPriority>:
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	6039      	str	r1, [r7, #0]
 800939a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800939c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	db0a      	blt.n	80093ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	490c      	ldr	r1, [pc, #48]	; (80093dc <__NVIC_SetPriority+0x4c>)
 80093aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ae:	0112      	lsls	r2, r2, #4
 80093b0:	b2d2      	uxtb	r2, r2
 80093b2:	440b      	add	r3, r1
 80093b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80093b8:	e00a      	b.n	80093d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	4908      	ldr	r1, [pc, #32]	; (80093e0 <__NVIC_SetPriority+0x50>)
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	f003 030f 	and.w	r3, r3, #15
 80093c6:	3b04      	subs	r3, #4
 80093c8:	0112      	lsls	r2, r2, #4
 80093ca:	b2d2      	uxtb	r2, r2
 80093cc:	440b      	add	r3, r1
 80093ce:	761a      	strb	r2, [r3, #24]
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	e000e100 	.word	0xe000e100
 80093e0:	e000ed00 	.word	0xe000ed00

080093e4 <NVIC_EncodePriority>:
{
 80093e4:	b480      	push	{r7}
 80093e6:	b089      	sub	sp, #36	; 0x24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	f1c3 0307 	rsb	r3, r3, #7
 80093fe:	2b04      	cmp	r3, #4
 8009400:	bf28      	it	cs
 8009402:	2304      	movcs	r3, #4
 8009404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	3304      	adds	r3, #4
 800940a:	2b06      	cmp	r3, #6
 800940c:	d902      	bls.n	8009414 <NVIC_EncodePriority+0x30>
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	3b03      	subs	r3, #3
 8009412:	e000      	b.n	8009416 <NVIC_EncodePriority+0x32>
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009418:	f04f 32ff 	mov.w	r2, #4294967295
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	fa02 f303 	lsl.w	r3, r2, r3
 8009422:	43da      	mvns	r2, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	401a      	ands	r2, r3
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800942c:	f04f 31ff 	mov.w	r1, #4294967295
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	fa01 f303 	lsl.w	r3, r1, r3
 8009436:	43d9      	mvns	r1, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800943c:	4313      	orrs	r3, r2
}
 800943e:	4618      	mov	r0, r3
 8009440:	3724      	adds	r7, #36	; 0x24
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr

08009448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3b01      	subs	r3, #1
 8009454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009458:	d301      	bcc.n	800945e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800945a:	2301      	movs	r3, #1
 800945c:	e00f      	b.n	800947e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800945e:	4a0a      	ldr	r2, [pc, #40]	; (8009488 <SysTick_Config+0x40>)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3b01      	subs	r3, #1
 8009464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009466:	210f      	movs	r1, #15
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	f7ff ff90 	bl	8009390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <SysTick_Config+0x40>)
 8009472:	2200      	movs	r2, #0
 8009474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009476:	4b04      	ldr	r3, [pc, #16]	; (8009488 <SysTick_Config+0x40>)
 8009478:	2207      	movs	r2, #7
 800947a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	e000e010 	.word	0xe000e010

0800948c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff ff2d 	bl	80092f4 <__NVIC_SetPriorityGrouping>
}
 800949a:	bf00      	nop
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b086      	sub	sp, #24
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	4603      	mov	r3, r0
 80094aa:	60b9      	str	r1, [r7, #8]
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80094b4:	f7ff ff42 	bl	800933c <__NVIC_GetPriorityGrouping>
 80094b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	6978      	ldr	r0, [r7, #20]
 80094c0:	f7ff ff90 	bl	80093e4 <NVIC_EncodePriority>
 80094c4:	4602      	mov	r2, r0
 80094c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ca:	4611      	mov	r1, r2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7ff ff5f 	bl	8009390 <__NVIC_SetPriority>
}
 80094d2:	bf00      	nop
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	4603      	mov	r3, r0
 80094e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff ff35 	bl	8009358 <__NVIC_EnableIRQ>
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff ffa2 	bl	8009448 <SysTick_Config>
 8009504:	4603      	mov	r3, r0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800950e:	b480      	push	{r7}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b02      	cmp	r3, #2
 8009524:	d008      	beq.n	8009538 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2204      	movs	r2, #4
 800952a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e020      	b.n	800957a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 020e 	bic.w	r2, r2, #14
 8009546:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0201 	bic.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009560:	2101      	movs	r1, #1
 8009562:	fa01 f202 	lsl.w	r2, r1, r2
 8009566:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d005      	beq.n	80095a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2204      	movs	r2, #4
 80095a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	73fb      	strb	r3, [r7, #15]
 80095a6:	e0d6      	b.n	8009756 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 020e 	bic.w	r2, r2, #14
 80095b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0201 	bic.w	r2, r2, #1
 80095c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	4b64      	ldr	r3, [pc, #400]	; (8009760 <HAL_DMA_Abort_IT+0x1dc>)
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d958      	bls.n	8009686 <HAL_DMA_Abort_IT+0x102>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a62      	ldr	r2, [pc, #392]	; (8009764 <HAL_DMA_Abort_IT+0x1e0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d04f      	beq.n	800967e <HAL_DMA_Abort_IT+0xfa>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a61      	ldr	r2, [pc, #388]	; (8009768 <HAL_DMA_Abort_IT+0x1e4>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d048      	beq.n	800967a <HAL_DMA_Abort_IT+0xf6>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a5f      	ldr	r2, [pc, #380]	; (800976c <HAL_DMA_Abort_IT+0x1e8>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d040      	beq.n	8009674 <HAL_DMA_Abort_IT+0xf0>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a5e      	ldr	r2, [pc, #376]	; (8009770 <HAL_DMA_Abort_IT+0x1ec>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d038      	beq.n	800966e <HAL_DMA_Abort_IT+0xea>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a5c      	ldr	r2, [pc, #368]	; (8009774 <HAL_DMA_Abort_IT+0x1f0>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d030      	beq.n	8009668 <HAL_DMA_Abort_IT+0xe4>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a5b      	ldr	r2, [pc, #364]	; (8009778 <HAL_DMA_Abort_IT+0x1f4>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d028      	beq.n	8009662 <HAL_DMA_Abort_IT+0xde>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a52      	ldr	r2, [pc, #328]	; (8009760 <HAL_DMA_Abort_IT+0x1dc>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d020      	beq.n	800965c <HAL_DMA_Abort_IT+0xd8>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a57      	ldr	r2, [pc, #348]	; (800977c <HAL_DMA_Abort_IT+0x1f8>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d019      	beq.n	8009658 <HAL_DMA_Abort_IT+0xd4>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a55      	ldr	r2, [pc, #340]	; (8009780 <HAL_DMA_Abort_IT+0x1fc>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d012      	beq.n	8009654 <HAL_DMA_Abort_IT+0xd0>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a54      	ldr	r2, [pc, #336]	; (8009784 <HAL_DMA_Abort_IT+0x200>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d00a      	beq.n	800964e <HAL_DMA_Abort_IT+0xca>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a52      	ldr	r2, [pc, #328]	; (8009788 <HAL_DMA_Abort_IT+0x204>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d102      	bne.n	8009648 <HAL_DMA_Abort_IT+0xc4>
 8009642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009646:	e01b      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 8009648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800964c:	e018      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 800964e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009652:	e015      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 8009654:	2310      	movs	r3, #16
 8009656:	e013      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 8009658:	2301      	movs	r3, #1
 800965a:	e011      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 800965c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009660:	e00e      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 8009662:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009666:	e00b      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 8009668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800966c:	e008      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 800966e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009672:	e005      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 8009674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009678:	e002      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 800967a:	2310      	movs	r3, #16
 800967c:	e000      	b.n	8009680 <HAL_DMA_Abort_IT+0xfc>
 800967e:	2301      	movs	r3, #1
 8009680:	4a42      	ldr	r2, [pc, #264]	; (800978c <HAL_DMA_Abort_IT+0x208>)
 8009682:	6053      	str	r3, [r2, #4]
 8009684:	e057      	b.n	8009736 <HAL_DMA_Abort_IT+0x1b2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a36      	ldr	r2, [pc, #216]	; (8009764 <HAL_DMA_Abort_IT+0x1e0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d04f      	beq.n	8009730 <HAL_DMA_Abort_IT+0x1ac>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a34      	ldr	r2, [pc, #208]	; (8009768 <HAL_DMA_Abort_IT+0x1e4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d048      	beq.n	800972c <HAL_DMA_Abort_IT+0x1a8>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a33      	ldr	r2, [pc, #204]	; (800976c <HAL_DMA_Abort_IT+0x1e8>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d040      	beq.n	8009726 <HAL_DMA_Abort_IT+0x1a2>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a31      	ldr	r2, [pc, #196]	; (8009770 <HAL_DMA_Abort_IT+0x1ec>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d038      	beq.n	8009720 <HAL_DMA_Abort_IT+0x19c>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a30      	ldr	r2, [pc, #192]	; (8009774 <HAL_DMA_Abort_IT+0x1f0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d030      	beq.n	800971a <HAL_DMA_Abort_IT+0x196>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a2e      	ldr	r2, [pc, #184]	; (8009778 <HAL_DMA_Abort_IT+0x1f4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d028      	beq.n	8009714 <HAL_DMA_Abort_IT+0x190>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a26      	ldr	r2, [pc, #152]	; (8009760 <HAL_DMA_Abort_IT+0x1dc>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d020      	beq.n	800970e <HAL_DMA_Abort_IT+0x18a>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2a      	ldr	r2, [pc, #168]	; (800977c <HAL_DMA_Abort_IT+0x1f8>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d019      	beq.n	800970a <HAL_DMA_Abort_IT+0x186>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a29      	ldr	r2, [pc, #164]	; (8009780 <HAL_DMA_Abort_IT+0x1fc>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d012      	beq.n	8009706 <HAL_DMA_Abort_IT+0x182>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a27      	ldr	r2, [pc, #156]	; (8009784 <HAL_DMA_Abort_IT+0x200>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00a      	beq.n	8009700 <HAL_DMA_Abort_IT+0x17c>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a26      	ldr	r2, [pc, #152]	; (8009788 <HAL_DMA_Abort_IT+0x204>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d102      	bne.n	80096fa <HAL_DMA_Abort_IT+0x176>
 80096f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f8:	e01b      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 80096fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096fe:	e018      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 8009700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009704:	e015      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 8009706:	2310      	movs	r3, #16
 8009708:	e013      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 800970a:	2301      	movs	r3, #1
 800970c:	e011      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 800970e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009712:	e00e      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 8009714:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009718:	e00b      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 800971a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800971e:	e008      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 8009720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009724:	e005      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 8009726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800972a:	e002      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 800972c:	2310      	movs	r3, #16
 800972e:	e000      	b.n	8009732 <HAL_DMA_Abort_IT+0x1ae>
 8009730:	2301      	movs	r3, #1
 8009732:	4a17      	ldr	r2, [pc, #92]	; (8009790 <HAL_DMA_Abort_IT+0x20c>)
 8009734:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	4798      	blx	r3
    } 
  }
  return status;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	40020080 	.word	0x40020080
 8009764:	40020008 	.word	0x40020008
 8009768:	4002001c 	.word	0x4002001c
 800976c:	40020030 	.word	0x40020030
 8009770:	40020044 	.word	0x40020044
 8009774:	40020058 	.word	0x40020058
 8009778:	4002006c 	.word	0x4002006c
 800977c:	40020408 	.word	0x40020408
 8009780:	4002041c 	.word	0x4002041c
 8009784:	40020430 	.word	0x40020430
 8009788:	40020444 	.word	0x40020444
 800978c:	40020400 	.word	0x40020400
 8009790:	40020000 	.word	0x40020000

08009794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009794:	b480      	push	{r7}
 8009796:	b08b      	sub	sp, #44	; 0x2c
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800979e:	2300      	movs	r3, #0
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80097a2:	2300      	movs	r3, #0
 80097a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097a6:	e179      	b.n	8009a9c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80097a8:	2201      	movs	r2, #1
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	fa02 f303 	lsl.w	r3, r2, r3
 80097b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	4013      	ands	r3, r2
 80097ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	f040 8168 	bne.w	8009a96 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4a96      	ldr	r2, [pc, #600]	; (8009a24 <HAL_GPIO_Init+0x290>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d05e      	beq.n	800988e <HAL_GPIO_Init+0xfa>
 80097d0:	4a94      	ldr	r2, [pc, #592]	; (8009a24 <HAL_GPIO_Init+0x290>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d875      	bhi.n	80098c2 <HAL_GPIO_Init+0x12e>
 80097d6:	4a94      	ldr	r2, [pc, #592]	; (8009a28 <HAL_GPIO_Init+0x294>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d058      	beq.n	800988e <HAL_GPIO_Init+0xfa>
 80097dc:	4a92      	ldr	r2, [pc, #584]	; (8009a28 <HAL_GPIO_Init+0x294>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d86f      	bhi.n	80098c2 <HAL_GPIO_Init+0x12e>
 80097e2:	4a92      	ldr	r2, [pc, #584]	; (8009a2c <HAL_GPIO_Init+0x298>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d052      	beq.n	800988e <HAL_GPIO_Init+0xfa>
 80097e8:	4a90      	ldr	r2, [pc, #576]	; (8009a2c <HAL_GPIO_Init+0x298>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d869      	bhi.n	80098c2 <HAL_GPIO_Init+0x12e>
 80097ee:	4a90      	ldr	r2, [pc, #576]	; (8009a30 <HAL_GPIO_Init+0x29c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d04c      	beq.n	800988e <HAL_GPIO_Init+0xfa>
 80097f4:	4a8e      	ldr	r2, [pc, #568]	; (8009a30 <HAL_GPIO_Init+0x29c>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d863      	bhi.n	80098c2 <HAL_GPIO_Init+0x12e>
 80097fa:	4a8e      	ldr	r2, [pc, #568]	; (8009a34 <HAL_GPIO_Init+0x2a0>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d046      	beq.n	800988e <HAL_GPIO_Init+0xfa>
 8009800:	4a8c      	ldr	r2, [pc, #560]	; (8009a34 <HAL_GPIO_Init+0x2a0>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d85d      	bhi.n	80098c2 <HAL_GPIO_Init+0x12e>
 8009806:	2b12      	cmp	r3, #18
 8009808:	d82a      	bhi.n	8009860 <HAL_GPIO_Init+0xcc>
 800980a:	2b12      	cmp	r3, #18
 800980c:	d859      	bhi.n	80098c2 <HAL_GPIO_Init+0x12e>
 800980e:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <HAL_GPIO_Init+0x80>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	0800988f 	.word	0x0800988f
 8009818:	08009869 	.word	0x08009869
 800981c:	0800987b 	.word	0x0800987b
 8009820:	080098bd 	.word	0x080098bd
 8009824:	080098c3 	.word	0x080098c3
 8009828:	080098c3 	.word	0x080098c3
 800982c:	080098c3 	.word	0x080098c3
 8009830:	080098c3 	.word	0x080098c3
 8009834:	080098c3 	.word	0x080098c3
 8009838:	080098c3 	.word	0x080098c3
 800983c:	080098c3 	.word	0x080098c3
 8009840:	080098c3 	.word	0x080098c3
 8009844:	080098c3 	.word	0x080098c3
 8009848:	080098c3 	.word	0x080098c3
 800984c:	080098c3 	.word	0x080098c3
 8009850:	080098c3 	.word	0x080098c3
 8009854:	080098c3 	.word	0x080098c3
 8009858:	08009871 	.word	0x08009871
 800985c:	08009885 	.word	0x08009885
 8009860:	4a75      	ldr	r2, [pc, #468]	; (8009a38 <HAL_GPIO_Init+0x2a4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d013      	beq.n	800988e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009866:	e02c      	b.n	80098c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	623b      	str	r3, [r7, #32]
          break;
 800986e:	e029      	b.n	80098c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	3304      	adds	r3, #4
 8009876:	623b      	str	r3, [r7, #32]
          break;
 8009878:	e024      	b.n	80098c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	3308      	adds	r3, #8
 8009880:	623b      	str	r3, [r7, #32]
          break;
 8009882:	e01f      	b.n	80098c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	330c      	adds	r3, #12
 800988a:	623b      	str	r3, [r7, #32]
          break;
 800988c:	e01a      	b.n	80098c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009896:	2304      	movs	r3, #4
 8009898:	623b      	str	r3, [r7, #32]
          break;
 800989a:	e013      	b.n	80098c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d105      	bne.n	80098b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098a4:	2308      	movs	r3, #8
 80098a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	69fa      	ldr	r2, [r7, #28]
 80098ac:	611a      	str	r2, [r3, #16]
          break;
 80098ae:	e009      	b.n	80098c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098b0:	2308      	movs	r3, #8
 80098b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	615a      	str	r2, [r3, #20]
          break;
 80098ba:	e003      	b.n	80098c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80098bc:	2300      	movs	r3, #0
 80098be:	623b      	str	r3, [r7, #32]
          break;
 80098c0:	e000      	b.n	80098c4 <HAL_GPIO_Init+0x130>
          break;
 80098c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2bff      	cmp	r3, #255	; 0xff
 80098c8:	d801      	bhi.n	80098ce <HAL_GPIO_Init+0x13a>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	e001      	b.n	80098d2 <HAL_GPIO_Init+0x13e>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3304      	adds	r3, #4
 80098d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	2bff      	cmp	r3, #255	; 0xff
 80098d8:	d802      	bhi.n	80098e0 <HAL_GPIO_Init+0x14c>
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	e002      	b.n	80098e6 <HAL_GPIO_Init+0x152>
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	3b08      	subs	r3, #8
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	210f      	movs	r1, #15
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	fa01 f303 	lsl.w	r3, r1, r3
 80098f4:	43db      	mvns	r3, r3
 80098f6:	401a      	ands	r2, r3
 80098f8:	6a39      	ldr	r1, [r7, #32]
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009900:	431a      	orrs	r2, r3
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 80c1 	beq.w	8009a96 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009914:	4b49      	ldr	r3, [pc, #292]	; (8009a3c <HAL_GPIO_Init+0x2a8>)
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	4a48      	ldr	r2, [pc, #288]	; (8009a3c <HAL_GPIO_Init+0x2a8>)
 800991a:	f043 0301 	orr.w	r3, r3, #1
 800991e:	6193      	str	r3, [r2, #24]
 8009920:	4b46      	ldr	r3, [pc, #280]	; (8009a3c <HAL_GPIO_Init+0x2a8>)
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	60bb      	str	r3, [r7, #8]
 800992a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800992c:	4a44      	ldr	r2, [pc, #272]	; (8009a40 <HAL_GPIO_Init+0x2ac>)
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	089b      	lsrs	r3, r3, #2
 8009932:	3302      	adds	r3, #2
 8009934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009938:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	220f      	movs	r2, #15
 8009944:	fa02 f303 	lsl.w	r3, r2, r3
 8009948:	43db      	mvns	r3, r3
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	4013      	ands	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a3c      	ldr	r2, [pc, #240]	; (8009a44 <HAL_GPIO_Init+0x2b0>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d01f      	beq.n	8009998 <HAL_GPIO_Init+0x204>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a3b      	ldr	r2, [pc, #236]	; (8009a48 <HAL_GPIO_Init+0x2b4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d019      	beq.n	8009994 <HAL_GPIO_Init+0x200>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a3a      	ldr	r2, [pc, #232]	; (8009a4c <HAL_GPIO_Init+0x2b8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d013      	beq.n	8009990 <HAL_GPIO_Init+0x1fc>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a39      	ldr	r2, [pc, #228]	; (8009a50 <HAL_GPIO_Init+0x2bc>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00d      	beq.n	800998c <HAL_GPIO_Init+0x1f8>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a38      	ldr	r2, [pc, #224]	; (8009a54 <HAL_GPIO_Init+0x2c0>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d007      	beq.n	8009988 <HAL_GPIO_Init+0x1f4>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a37      	ldr	r2, [pc, #220]	; (8009a58 <HAL_GPIO_Init+0x2c4>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d101      	bne.n	8009984 <HAL_GPIO_Init+0x1f0>
 8009980:	2305      	movs	r3, #5
 8009982:	e00a      	b.n	800999a <HAL_GPIO_Init+0x206>
 8009984:	2306      	movs	r3, #6
 8009986:	e008      	b.n	800999a <HAL_GPIO_Init+0x206>
 8009988:	2304      	movs	r3, #4
 800998a:	e006      	b.n	800999a <HAL_GPIO_Init+0x206>
 800998c:	2303      	movs	r3, #3
 800998e:	e004      	b.n	800999a <HAL_GPIO_Init+0x206>
 8009990:	2302      	movs	r3, #2
 8009992:	e002      	b.n	800999a <HAL_GPIO_Init+0x206>
 8009994:	2301      	movs	r3, #1
 8009996:	e000      	b.n	800999a <HAL_GPIO_Init+0x206>
 8009998:	2300      	movs	r3, #0
 800999a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800999c:	f002 0203 	and.w	r2, r2, #3
 80099a0:	0092      	lsls	r2, r2, #2
 80099a2:	4093      	lsls	r3, r2
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80099aa:	4925      	ldr	r1, [pc, #148]	; (8009a40 <HAL_GPIO_Init+0x2ac>)
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	089b      	lsrs	r3, r3, #2
 80099b0:	3302      	adds	r3, #2
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d006      	beq.n	80099d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80099c4:	4b25      	ldr	r3, [pc, #148]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	4924      	ldr	r1, [pc, #144]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	608b      	str	r3, [r1, #8]
 80099d0:	e006      	b.n	80099e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80099d2:	4b22      	ldr	r3, [pc, #136]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 80099d4:	689a      	ldr	r2, [r3, #8]
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	43db      	mvns	r3, r3
 80099da:	4920      	ldr	r1, [pc, #128]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 80099dc:	4013      	ands	r3, r2
 80099de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d006      	beq.n	80099fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80099ec:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 80099ee:	68da      	ldr	r2, [r3, #12]
 80099f0:	491a      	ldr	r1, [pc, #104]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60cb      	str	r3, [r1, #12]
 80099f8:	e006      	b.n	8009a08 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80099fa:	4b18      	ldr	r3, [pc, #96]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	43db      	mvns	r3, r3
 8009a02:	4916      	ldr	r1, [pc, #88]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d025      	beq.n	8009a60 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	4910      	ldr	r1, [pc, #64]	; (8009a5c <HAL_GPIO_Init+0x2c8>)
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	604b      	str	r3, [r1, #4]
 8009a20:	e025      	b.n	8009a6e <HAL_GPIO_Init+0x2da>
 8009a22:	bf00      	nop
 8009a24:	10320000 	.word	0x10320000
 8009a28:	10310000 	.word	0x10310000
 8009a2c:	10220000 	.word	0x10220000
 8009a30:	10210000 	.word	0x10210000
 8009a34:	10120000 	.word	0x10120000
 8009a38:	10110000 	.word	0x10110000
 8009a3c:	40021000 	.word	0x40021000
 8009a40:	40010000 	.word	0x40010000
 8009a44:	40010800 	.word	0x40010800
 8009a48:	40010c00 	.word	0x40010c00
 8009a4c:	40011000 	.word	0x40011000
 8009a50:	40011400 	.word	0x40011400
 8009a54:	40011800 	.word	0x40011800
 8009a58:	40011c00 	.word	0x40011c00
 8009a5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009a60:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <HAL_GPIO_Init+0x324>)
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	43db      	mvns	r3, r3
 8009a68:	4913      	ldr	r1, [pc, #76]	; (8009ab8 <HAL_GPIO_Init+0x324>)
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d006      	beq.n	8009a88 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009a7a:	4b0f      	ldr	r3, [pc, #60]	; (8009ab8 <HAL_GPIO_Init+0x324>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	490e      	ldr	r1, [pc, #56]	; (8009ab8 <HAL_GPIO_Init+0x324>)
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	600b      	str	r3, [r1, #0]
 8009a86:	e006      	b.n	8009a96 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009a88:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <HAL_GPIO_Init+0x324>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	43db      	mvns	r3, r3
 8009a90:	4909      	ldr	r1, [pc, #36]	; (8009ab8 <HAL_GPIO_Init+0x324>)
 8009a92:	4013      	ands	r3, r2
 8009a94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	3301      	adds	r3, #1
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f47f ae7e 	bne.w	80097a8 <HAL_GPIO_Init+0x14>
  }
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	372c      	adds	r7, #44	; 0x2c
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr
 8009ab8:	40010400 	.word	0x40010400

08009abc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b089      	sub	sp, #36	; 0x24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009aca:	e0a6      	b.n	8009c1a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009acc:	2201      	movs	r2, #1
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8099 	beq.w	8009c14 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009ae2:	4a54      	ldr	r2, [pc, #336]	; (8009c34 <HAL_GPIO_DeInit+0x178>)
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	089b      	lsrs	r3, r3, #2
 8009ae8:	3302      	adds	r3, #2
 8009aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aee:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	f003 0303 	and.w	r3, r3, #3
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	220f      	movs	r2, #15
 8009afa:	fa02 f303 	lsl.w	r3, r2, r3
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	4013      	ands	r3, r2
 8009b02:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a4c      	ldr	r2, [pc, #304]	; (8009c38 <HAL_GPIO_DeInit+0x17c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d01f      	beq.n	8009b4c <HAL_GPIO_DeInit+0x90>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a4b      	ldr	r2, [pc, #300]	; (8009c3c <HAL_GPIO_DeInit+0x180>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d019      	beq.n	8009b48 <HAL_GPIO_DeInit+0x8c>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a4a      	ldr	r2, [pc, #296]	; (8009c40 <HAL_GPIO_DeInit+0x184>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d013      	beq.n	8009b44 <HAL_GPIO_DeInit+0x88>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a49      	ldr	r2, [pc, #292]	; (8009c44 <HAL_GPIO_DeInit+0x188>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d00d      	beq.n	8009b40 <HAL_GPIO_DeInit+0x84>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a48      	ldr	r2, [pc, #288]	; (8009c48 <HAL_GPIO_DeInit+0x18c>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d007      	beq.n	8009b3c <HAL_GPIO_DeInit+0x80>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a47      	ldr	r2, [pc, #284]	; (8009c4c <HAL_GPIO_DeInit+0x190>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d101      	bne.n	8009b38 <HAL_GPIO_DeInit+0x7c>
 8009b34:	2305      	movs	r3, #5
 8009b36:	e00a      	b.n	8009b4e <HAL_GPIO_DeInit+0x92>
 8009b38:	2306      	movs	r3, #6
 8009b3a:	e008      	b.n	8009b4e <HAL_GPIO_DeInit+0x92>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	e006      	b.n	8009b4e <HAL_GPIO_DeInit+0x92>
 8009b40:	2303      	movs	r3, #3
 8009b42:	e004      	b.n	8009b4e <HAL_GPIO_DeInit+0x92>
 8009b44:	2302      	movs	r3, #2
 8009b46:	e002      	b.n	8009b4e <HAL_GPIO_DeInit+0x92>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e000      	b.n	8009b4e <HAL_GPIO_DeInit+0x92>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	f002 0203 	and.w	r2, r2, #3
 8009b54:	0092      	lsls	r2, r2, #2
 8009b56:	4093      	lsls	r3, r2
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d132      	bne.n	8009bc4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009b5e:	4b3c      	ldr	r3, [pc, #240]	; (8009c50 <HAL_GPIO_DeInit+0x194>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	43db      	mvns	r3, r3
 8009b66:	493a      	ldr	r1, [pc, #232]	; (8009c50 <HAL_GPIO_DeInit+0x194>)
 8009b68:	4013      	ands	r3, r2
 8009b6a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009b6c:	4b38      	ldr	r3, [pc, #224]	; (8009c50 <HAL_GPIO_DeInit+0x194>)
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	43db      	mvns	r3, r3
 8009b74:	4936      	ldr	r1, [pc, #216]	; (8009c50 <HAL_GPIO_DeInit+0x194>)
 8009b76:	4013      	ands	r3, r2
 8009b78:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009b7a:	4b35      	ldr	r3, [pc, #212]	; (8009c50 <HAL_GPIO_DeInit+0x194>)
 8009b7c:	68da      	ldr	r2, [r3, #12]
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	43db      	mvns	r3, r3
 8009b82:	4933      	ldr	r1, [pc, #204]	; (8009c50 <HAL_GPIO_DeInit+0x194>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009b88:	4b31      	ldr	r3, [pc, #196]	; (8009c50 <HAL_GPIO_DeInit+0x194>)
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	43db      	mvns	r3, r3
 8009b90:	492f      	ldr	r1, [pc, #188]	; (8009c50 <HAL_GPIO_DeInit+0x194>)
 8009b92:	4013      	ands	r3, r2
 8009b94:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	220f      	movs	r2, #15
 8009ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009ba6:	4a23      	ldr	r2, [pc, #140]	; (8009c34 <HAL_GPIO_DeInit+0x178>)
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	089b      	lsrs	r3, r3, #2
 8009bac:	3302      	adds	r3, #2
 8009bae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	43da      	mvns	r2, r3
 8009bb6:	481f      	ldr	r0, [pc, #124]	; (8009c34 <HAL_GPIO_DeInit+0x178>)
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	089b      	lsrs	r3, r3, #2
 8009bbc:	400a      	ands	r2, r1
 8009bbe:	3302      	adds	r3, #2
 8009bc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	2bff      	cmp	r3, #255	; 0xff
 8009bc8:	d801      	bhi.n	8009bce <HAL_GPIO_DeInit+0x112>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	e001      	b.n	8009bd2 <HAL_GPIO_DeInit+0x116>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2bff      	cmp	r3, #255	; 0xff
 8009bd8:	d802      	bhi.n	8009be0 <HAL_GPIO_DeInit+0x124>
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	e002      	b.n	8009be6 <HAL_GPIO_DeInit+0x12a>
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	3b08      	subs	r3, #8
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	210f      	movs	r1, #15
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf4:	43db      	mvns	r3, r3
 8009bf6:	401a      	ands	r2, r3
 8009bf8:	2104      	movs	r1, #4
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8009c00:	431a      	orrs	r2, r3
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68da      	ldr	r2, [r3, #12]
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	43db      	mvns	r3, r3
 8009c0e:	401a      	ands	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	3301      	adds	r3, #1
 8009c18:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f47f af52 	bne.w	8009acc <HAL_GPIO_DeInit+0x10>
  }
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	3724      	adds	r7, #36	; 0x24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr
 8009c34:	40010000 	.word	0x40010000
 8009c38:	40010800 	.word	0x40010800
 8009c3c:	40010c00 	.word	0x40010c00
 8009c40:	40011000 	.word	0x40011000
 8009c44:	40011400 	.word	0x40011400
 8009c48:	40011800 	.word	0x40011800
 8009c4c:	40011c00 	.word	0x40011c00
 8009c50:	40010400 	.word	0x40010400

08009c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689a      	ldr	r2, [r3, #8]
 8009c64:	887b      	ldrh	r3, [r7, #2]
 8009c66:	4013      	ands	r3, r2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	73fb      	strb	r3, [r7, #15]
 8009c70:	e001      	b.n	8009c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c72:	2300      	movs	r3, #0
 8009c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bc80      	pop	{r7}
 8009c80:	4770      	bx	lr

08009c82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	807b      	strh	r3, [r7, #2]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c92:	787b      	ldrb	r3, [r7, #1]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c98:	887a      	ldrh	r2, [r7, #2]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009c9e:	e003      	b.n	8009ca8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009ca0:	887b      	ldrh	r3, [r7, #2]
 8009ca2:	041a      	lsls	r2, r3, #16
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	611a      	str	r2, [r3, #16]
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bc80      	pop	{r7}
 8009cb0:	4770      	bx	lr

08009cb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b085      	sub	sp, #20
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009cc4:	887a      	ldrh	r2, [r7, #2]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	041a      	lsls	r2, r3, #16
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	43d9      	mvns	r1, r3
 8009cd0:	887b      	ldrh	r3, [r7, #2]
 8009cd2:	400b      	ands	r3, r1
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	611a      	str	r2, [r3, #16]
}
 8009cda:	bf00      	nop
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bc80      	pop	{r7}
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e12b      	b.n	8009f4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7fe fff8 	bl	8008d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2224      	movs	r2, #36	; 0x24
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f022 0201 	bic.w	r2, r2, #1
 8009d26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d48:	f001 fdb8 	bl	800b8bc <HAL_RCC_GetPCLK1Freq>
 8009d4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	4a81      	ldr	r2, [pc, #516]	; (8009f58 <HAL_I2C_Init+0x274>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d807      	bhi.n	8009d68 <HAL_I2C_Init+0x84>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a80      	ldr	r2, [pc, #512]	; (8009f5c <HAL_I2C_Init+0x278>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	bf94      	ite	ls
 8009d60:	2301      	movls	r3, #1
 8009d62:	2300      	movhi	r3, #0
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	e006      	b.n	8009d76 <HAL_I2C_Init+0x92>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4a7d      	ldr	r2, [pc, #500]	; (8009f60 <HAL_I2C_Init+0x27c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	bf94      	ite	ls
 8009d70:	2301      	movls	r3, #1
 8009d72:	2300      	movhi	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e0e7      	b.n	8009f4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4a78      	ldr	r2, [pc, #480]	; (8009f64 <HAL_I2C_Init+0x280>)
 8009d82:	fba2 2303 	umull	r2, r3, r2, r3
 8009d86:	0c9b      	lsrs	r3, r3, #18
 8009d88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	4a6a      	ldr	r2, [pc, #424]	; (8009f58 <HAL_I2C_Init+0x274>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d802      	bhi.n	8009db8 <HAL_I2C_Init+0xd4>
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	3301      	adds	r3, #1
 8009db6:	e009      	b.n	8009dcc <HAL_I2C_Init+0xe8>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
 8009dc2:	4a69      	ldr	r2, [pc, #420]	; (8009f68 <HAL_I2C_Init+0x284>)
 8009dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc8:	099b      	lsrs	r3, r3, #6
 8009dca:	3301      	adds	r3, #1
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6812      	ldr	r2, [r2, #0]
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009dde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	495c      	ldr	r1, [pc, #368]	; (8009f58 <HAL_I2C_Init+0x274>)
 8009de8:	428b      	cmp	r3, r1
 8009dea:	d819      	bhi.n	8009e20 <HAL_I2C_Init+0x13c>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	1e59      	subs	r1, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009dfa:	1c59      	adds	r1, r3, #1
 8009dfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e00:	400b      	ands	r3, r1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <HAL_I2C_Init+0x138>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	1e59      	subs	r1, r3, #1
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e1a:	e051      	b.n	8009ec0 <HAL_I2C_Init+0x1dc>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	e04f      	b.n	8009ec0 <HAL_I2C_Init+0x1dc>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d111      	bne.n	8009e4c <HAL_I2C_Init+0x168>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	1e58      	subs	r0, r3, #1
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6859      	ldr	r1, [r3, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	440b      	add	r3, r1
 8009e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	bf0c      	ite	eq
 8009e44:	2301      	moveq	r3, #1
 8009e46:	2300      	movne	r3, #0
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	e012      	b.n	8009e72 <HAL_I2C_Init+0x18e>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	1e58      	subs	r0, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6859      	ldr	r1, [r3, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	440b      	add	r3, r1
 8009e5a:	0099      	lsls	r1, r3, #2
 8009e5c:	440b      	add	r3, r1
 8009e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e62:	3301      	adds	r3, #1
 8009e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bf0c      	ite	eq
 8009e6c:	2301      	moveq	r3, #1
 8009e6e:	2300      	movne	r3, #0
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <HAL_I2C_Init+0x196>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e022      	b.n	8009ec0 <HAL_I2C_Init+0x1dc>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10e      	bne.n	8009ea0 <HAL_I2C_Init+0x1bc>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	1e58      	subs	r0, r3, #1
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6859      	ldr	r1, [r3, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	440b      	add	r3, r1
 8009e90:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e94:	3301      	adds	r3, #1
 8009e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9e:	e00f      	b.n	8009ec0 <HAL_I2C_Init+0x1dc>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	1e58      	subs	r0, r3, #1
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6859      	ldr	r1, [r3, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	0099      	lsls	r1, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	6809      	ldr	r1, [r1, #0]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	69da      	ldr	r2, [r3, #28]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009eee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	6911      	ldr	r1, [r2, #16]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	68d2      	ldr	r2, [r2, #12]
 8009efa:	4311      	orrs	r1, r2
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	430b      	orrs	r3, r1
 8009f02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	695a      	ldr	r2, [r3, #20]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	431a      	orrs	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2220      	movs	r2, #32
 8009f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	000186a0 	.word	0x000186a0
 8009f5c:	001e847f 	.word	0x001e847f
 8009f60:	003d08ff 	.word	0x003d08ff
 8009f64:	431bde83 	.word	0x431bde83
 8009f68:	10624dd3 	.word	0x10624dd3

08009f6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d101      	bne.n	8009f7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e021      	b.n	8009fc2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2224      	movs	r2, #36	; 0x24
 8009f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 0201 	bic.w	r2, r2, #1
 8009f94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fe fef0 	bl	8008d7c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	607a      	str	r2, [r7, #4]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	460b      	mov	r3, r1
 8009fda:	817b      	strh	r3, [r7, #10]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fe0:	f7ff f85e 	bl	80090a0 <HAL_GetTick>
 8009fe4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	f040 80e0 	bne.w	800a1b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	2319      	movs	r3, #25
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	4970      	ldr	r1, [pc, #448]	; (800a1c0 <HAL_I2C_Master_Transmit+0x1f4>)
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f000 fe5c 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a00a:	2302      	movs	r3, #2
 800a00c:	e0d3      	b.n	800a1b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a014:	2b01      	cmp	r3, #1
 800a016:	d101      	bne.n	800a01c <HAL_I2C_Master_Transmit+0x50>
 800a018:	2302      	movs	r3, #2
 800a01a:	e0cc      	b.n	800a1b6 <HAL_I2C_Master_Transmit+0x1ea>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d007      	beq.n	800a042 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f042 0201 	orr.w	r2, r2, #1
 800a040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2221      	movs	r2, #33	; 0x21
 800a056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2210      	movs	r2, #16
 800a05e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	893a      	ldrh	r2, [r7, #8]
 800a072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4a50      	ldr	r2, [pc, #320]	; (800a1c4 <HAL_I2C_Master_Transmit+0x1f8>)
 800a082:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a084:	8979      	ldrh	r1, [r7, #10]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	6a3a      	ldr	r2, [r7, #32]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fc16 	bl	800a8bc <I2C_MasterRequestWrite>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e08d      	b.n	800a1b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a09a:	2300      	movs	r3, #0
 800a09c:	613b      	str	r3, [r7, #16]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	613b      	str	r3, [r7, #16]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	613b      	str	r3, [r7, #16]
 800a0ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a0b0:	e066      	b.n	800a180 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	6a39      	ldr	r1, [r7, #32]
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 ff1a 	bl	800aef0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00d      	beq.n	800a0de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d107      	bne.n	800a0da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e06b      	b.n	800a1b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a106:	3b01      	subs	r3, #1
 800a108:	b29a      	uxth	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d11b      	bne.n	800a154 <HAL_I2C_Master_Transmit+0x188>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a120:	2b00      	cmp	r3, #0
 800a122:	d017      	beq.n	800a154 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	781a      	ldrb	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a13e:	b29b      	uxth	r3, r3
 800a140:	3b01      	subs	r3, #1
 800a142:	b29a      	uxth	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a14c:	3b01      	subs	r3, #1
 800a14e:	b29a      	uxth	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	6a39      	ldr	r1, [r7, #32]
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 ff11 	bl	800af80 <I2C_WaitOnBTFFlagUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00d      	beq.n	800a180 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d107      	bne.n	800a17c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a17a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e01a      	b.n	800a1b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a184:	2b00      	cmp	r3, #0
 800a186:	d194      	bne.n	800a0b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	e000      	b.n	800a1b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a1b4:	2302      	movs	r3, #2
  }
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	00100002 	.word	0x00100002
 800a1c4:	ffff0000 	.word	0xffff0000

0800a1c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	817b      	strh	r3, [r7, #10]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	813b      	strh	r3, [r7, #8]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1e2:	f7fe ff5d 	bl	80090a0 <HAL_GetTick>
 800a1e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b20      	cmp	r3, #32
 800a1f2:	f040 80d9 	bne.w	800a3a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	2319      	movs	r3, #25
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	496d      	ldr	r1, [pc, #436]	; (800a3b4 <HAL_I2C_Mem_Write+0x1ec>)
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 fd5b 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a20c:	2302      	movs	r3, #2
 800a20e:	e0cc      	b.n	800a3aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a216:	2b01      	cmp	r3, #1
 800a218:	d101      	bne.n	800a21e <HAL_I2C_Mem_Write+0x56>
 800a21a:	2302      	movs	r3, #2
 800a21c:	e0c5      	b.n	800a3aa <HAL_I2C_Mem_Write+0x1e2>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b01      	cmp	r3, #1
 800a232:	d007      	beq.n	800a244 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0201 	orr.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2221      	movs	r2, #33	; 0x21
 800a258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2240      	movs	r2, #64	; 0x40
 800a260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a3a      	ldr	r2, [r7, #32]
 800a26e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4a4d      	ldr	r2, [pc, #308]	; (800a3b8 <HAL_I2C_Mem_Write+0x1f0>)
 800a284:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a286:	88f8      	ldrh	r0, [r7, #6]
 800a288:	893a      	ldrh	r2, [r7, #8]
 800a28a:	8979      	ldrh	r1, [r7, #10]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	4603      	mov	r3, r0
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 fb92 	bl	800a9c0 <I2C_RequestMemoryWrite>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d052      	beq.n	800a348 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e081      	b.n	800a3aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 fe20 	bl	800aef0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00d      	beq.n	800a2d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d107      	bne.n	800a2ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e06b      	b.n	800a3aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	781a      	ldrb	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d11b      	bne.n	800a348 <HAL_I2C_Mem_Write+0x180>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a314:	2b00      	cmp	r3, #0
 800a316:	d017      	beq.n	800a348 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	781a      	ldrb	r2, [r3, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a332:	3b01      	subs	r3, #1
 800a334:	b29a      	uxth	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33e:	b29b      	uxth	r3, r3
 800a340:	3b01      	subs	r3, #1
 800a342:	b29a      	uxth	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1aa      	bne.n	800a2a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 fe13 	bl	800af80 <I2C_WaitOnBTFFlagUntilTimeout>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00d      	beq.n	800a37c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	2b04      	cmp	r3, #4
 800a366:	d107      	bne.n	800a378 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a376:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e016      	b.n	800a3aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a38a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2220      	movs	r2, #32
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	e000      	b.n	800a3aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a3a8:	2302      	movs	r3, #2
  }
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	00100002 	.word	0x00100002
 800a3b8:	ffff0000 	.word	0xffff0000

0800a3bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08c      	sub	sp, #48	; 0x30
 800a3c0:	af02      	add	r7, sp, #8
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	817b      	strh	r3, [r7, #10]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	813b      	strh	r3, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a3da:	f7fe fe61 	bl	80090a0 <HAL_GetTick>
 800a3de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b20      	cmp	r3, #32
 800a3ea:	f040 8244 	bne.w	800a876 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	2319      	movs	r3, #25
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	4982      	ldr	r1, [pc, #520]	; (800a600 <HAL_I2C_Mem_Read+0x244>)
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 fc5f 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a404:	2302      	movs	r3, #2
 800a406:	e237      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d101      	bne.n	800a416 <HAL_I2C_Mem_Read+0x5a>
 800a412:	2302      	movs	r3, #2
 800a414:	e230      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d007      	beq.n	800a43c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a44a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2222      	movs	r2, #34	; 0x22
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2240      	movs	r2, #64	; 0x40
 800a458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a46c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a472:	b29a      	uxth	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	4a62      	ldr	r2, [pc, #392]	; (800a604 <HAL_I2C_Mem_Read+0x248>)
 800a47c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a47e:	88f8      	ldrh	r0, [r7, #6]
 800a480:	893a      	ldrh	r2, [r7, #8]
 800a482:	8979      	ldrh	r1, [r7, #10]
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	4603      	mov	r3, r0
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fb2c 	bl	800aaec <I2C_RequestMemoryRead>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e1ec      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d113      	bne.n	800a4ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	61fb      	str	r3, [r7, #28]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	61fb      	str	r3, [r7, #28]
 800a4ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	e1c0      	b.n	800a850 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d11e      	bne.n	800a514 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4e6:	b672      	cpsid	i
}
 800a4e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	61bb      	str	r3, [r7, #24]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	61bb      	str	r3, [r7, #24]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	61bb      	str	r3, [r7, #24]
 800a4fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a50e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a510:	b662      	cpsie	i
}
 800a512:	e035      	b.n	800a580 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d11e      	bne.n	800a55a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a52a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a52c:	b672      	cpsid	i
}
 800a52e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a554:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a556:	b662      	cpsie	i
}
 800a558:	e012      	b.n	800a580 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a568:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a56a:	2300      	movs	r3, #0
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	613b      	str	r3, [r7, #16]
 800a57e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a580:	e166      	b.n	800a850 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a586:	2b03      	cmp	r3, #3
 800a588:	f200 811f 	bhi.w	800a7ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a590:	2b01      	cmp	r3, #1
 800a592:	d123      	bne.n	800a5dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a596:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 fd39 	bl	800b010 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e167      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691a      	ldr	r2, [r3, #16]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5da:	e139      	b.n	800a850 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d152      	bne.n	800a68a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4906      	ldr	r1, [pc, #24]	; (800a608 <HAL_I2C_Mem_Read+0x24c>)
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 fb64 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d008      	beq.n	800a60c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e13c      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
 800a5fe:	bf00      	nop
 800a600:	00100002 	.word	0x00100002
 800a604:	ffff0000 	.word	0xffff0000
 800a608:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a60c:	b672      	cpsid	i
}
 800a60e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a61e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	691a      	ldr	r2, [r3, #16]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	b2d2      	uxtb	r2, r2
 800a62c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a648:	b29b      	uxth	r3, r3
 800a64a:	3b01      	subs	r3, #1
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a652:	b662      	cpsie	i
}
 800a654:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	691a      	ldr	r2, [r3, #16]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	b2d2      	uxtb	r2, r2
 800a662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	1c5a      	adds	r2, r3, #1
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a672:	3b01      	subs	r3, #1
 800a674:	b29a      	uxth	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a67e:	b29b      	uxth	r3, r3
 800a680:	3b01      	subs	r3, #1
 800a682:	b29a      	uxth	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a688:	e0e2      	b.n	800a850 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	2200      	movs	r2, #0
 800a692:	497b      	ldr	r1, [pc, #492]	; (800a880 <HAL_I2C_Mem_Read+0x4c4>)
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 fb11 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e0e9      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6b4:	b672      	cpsid	i
}
 800a6b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	691a      	ldr	r2, [r3, #16]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	b2d2      	uxtb	r2, r2
 800a6c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a6ea:	4b66      	ldr	r3, [pc, #408]	; (800a884 <HAL_I2C_Mem_Read+0x4c8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	08db      	lsrs	r3, r3, #3
 800a6f0:	4a65      	ldr	r2, [pc, #404]	; (800a888 <HAL_I2C_Mem_Read+0x4cc>)
 800a6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f6:	0a1a      	lsrs	r2, r3, #8
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	00da      	lsls	r2, r3, #3
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	3b01      	subs	r3, #1
 800a708:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d118      	bne.n	800a742 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2220      	movs	r2, #32
 800a71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	f043 0220 	orr.w	r2, r3, #32
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a732:	b662      	cpsie	i
}
 800a734:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e09a      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	f003 0304 	and.w	r3, r3, #4
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d1d9      	bne.n	800a704 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a75e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691a      	ldr	r2, [r3, #16]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76a:	b2d2      	uxtb	r2, r2
 800a76c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a77c:	3b01      	subs	r3, #1
 800a77e:	b29a      	uxth	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a788:	b29b      	uxth	r3, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a792:	b662      	cpsie	i
}
 800a794:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	b2d2      	uxtb	r2, r2
 800a7a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	1c5a      	adds	r2, r3, #1
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a7c8:	e042      	b.n	800a850 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 fc1e 	bl	800b010 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e04c      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	b2d2      	uxtb	r2, r2
 800a7ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a806:	b29b      	uxth	r3, r3
 800a808:	3b01      	subs	r3, #1
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	f003 0304 	and.w	r3, r3, #4
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	d118      	bne.n	800a850 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	691a      	ldr	r2, [r3, #16]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	b2d2      	uxtb	r2, r2
 800a82a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a83a:	3b01      	subs	r3, #1
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a846:	b29b      	uxth	r3, r3
 800a848:	3b01      	subs	r3, #1
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a854:	2b00      	cmp	r3, #0
 800a856:	f47f ae94 	bne.w	800a582 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2220      	movs	r2, #32
 800a85e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	e000      	b.n	800a878 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a876:	2302      	movs	r3, #2
  }
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3728      	adds	r7, #40	; 0x28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	00010004 	.word	0x00010004
 800a884:	200009b8 	.word	0x200009b8
 800a888:	14f8b589 	.word	0x14f8b589

0800a88c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a89a:	b2db      	uxtb	r3, r3
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bc80      	pop	{r7}
 800a8a4:	4770      	bx	lr

0800a8a6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bc80      	pop	{r7}
 800a8ba:	4770      	bx	lr

0800a8bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af02      	add	r7, sp, #8
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	603b      	str	r3, [r7, #0]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d006      	beq.n	800a8e6 <I2C_MasterRequestWrite+0x2a>
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d003      	beq.n	800a8e6 <I2C_MasterRequestWrite+0x2a>
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8e4:	d108      	bne.n	800a8f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	e00b      	b.n	800a910 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fc:	2b12      	cmp	r3, #18
 800a8fe:	d107      	bne.n	800a910 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a90e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 f9cd 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00d      	beq.n	800a944 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a936:	d103      	bne.n	800a940 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a93e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e035      	b.n	800a9b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a94c:	d108      	bne.n	800a960 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a94e:	897b      	ldrh	r3, [r7, #10]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a95c:	611a      	str	r2, [r3, #16]
 800a95e:	e01b      	b.n	800a998 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a960:	897b      	ldrh	r3, [r7, #10]
 800a962:	11db      	asrs	r3, r3, #7
 800a964:	b2db      	uxtb	r3, r3
 800a966:	f003 0306 	and.w	r3, r3, #6
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f063 030f 	orn	r3, r3, #15
 800a970:	b2da      	uxtb	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	490e      	ldr	r1, [pc, #56]	; (800a9b8 <I2C_MasterRequestWrite+0xfc>)
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f000 fa16 	bl	800adb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e010      	b.n	800a9b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a98e:	897b      	ldrh	r3, [r7, #10]
 800a990:	b2da      	uxtb	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	4907      	ldr	r1, [pc, #28]	; (800a9bc <I2C_MasterRequestWrite+0x100>)
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 fa06 	bl	800adb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e000      	b.n	800a9b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	00010008 	.word	0x00010008
 800a9bc:	00010002 	.word	0x00010002

0800a9c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	817b      	strh	r3, [r7, #10]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	813b      	strh	r3, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 f960 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00d      	beq.n	800aa1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa10:	d103      	bne.n	800aa1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e05f      	b.n	800aade <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa1e:	897b      	ldrh	r3, [r7, #10]
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	461a      	mov	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	6a3a      	ldr	r2, [r7, #32]
 800aa32:	492d      	ldr	r1, [pc, #180]	; (800aae8 <I2C_RequestMemoryWrite+0x128>)
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 f9bb 	bl	800adb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e04c      	b.n	800aade <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa44:	2300      	movs	r3, #0
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	617b      	str	r3, [r7, #20]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	617b      	str	r3, [r7, #20]
 800aa58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa5c:	6a39      	ldr	r1, [r7, #32]
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 fa46 	bl	800aef0 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00d      	beq.n	800aa86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d107      	bne.n	800aa82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e02b      	b.n	800aade <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d105      	bne.n	800aa98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa8c:	893b      	ldrh	r3, [r7, #8]
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	611a      	str	r2, [r3, #16]
 800aa96:	e021      	b.n	800aadc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa98:	893b      	ldrh	r3, [r7, #8]
 800aa9a:	0a1b      	lsrs	r3, r3, #8
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa8:	6a39      	ldr	r1, [r7, #32]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f000 fa20 	bl	800aef0 <I2C_WaitOnTXEFlagUntilTimeout>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00d      	beq.n	800aad2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaba:	2b04      	cmp	r3, #4
 800aabc:	d107      	bne.n	800aace <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aacc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e005      	b.n	800aade <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aad2:	893b      	ldrh	r3, [r7, #8]
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	00010002 	.word	0x00010002

0800aaec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af02      	add	r7, sp, #8
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	817b      	strh	r3, [r7, #10]
 800aafe:	460b      	mov	r3, r1
 800ab00:	813b      	strh	r3, [r7, #8]
 800ab02:	4613      	mov	r3, r2
 800ab04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 f8c2 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00d      	beq.n	800ab5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab4c:	d103      	bne.n	800ab56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e0aa      	b.n	800acb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab5a:	897b      	ldrh	r3, [r7, #10]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	461a      	mov	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	6a3a      	ldr	r2, [r7, #32]
 800ab6e:	4952      	ldr	r1, [pc, #328]	; (800acb8 <I2C_RequestMemoryRead+0x1cc>)
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f91d 	bl	800adb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e097      	b.n	800acb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab98:	6a39      	ldr	r1, [r7, #32]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 f9a8 	bl	800aef0 <I2C_WaitOnTXEFlagUntilTimeout>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00d      	beq.n	800abc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d107      	bne.n	800abbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e076      	b.n	800acb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abc2:	88fb      	ldrh	r3, [r7, #6]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d105      	bne.n	800abd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abc8:	893b      	ldrh	r3, [r7, #8]
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	611a      	str	r2, [r3, #16]
 800abd2:	e021      	b.n	800ac18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800abd4:	893b      	ldrh	r3, [r7, #8]
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	b29b      	uxth	r3, r3
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe4:	6a39      	ldr	r1, [r7, #32]
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 f982 	bl	800aef0 <I2C_WaitOnTXEFlagUntilTimeout>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00d      	beq.n	800ac0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf6:	2b04      	cmp	r3, #4
 800abf8:	d107      	bne.n	800ac0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e050      	b.n	800acb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac0e:	893b      	ldrh	r3, [r7, #8]
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac1a:	6a39      	ldr	r1, [r7, #32]
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f000 f967 	bl	800aef0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00d      	beq.n	800ac44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	d107      	bne.n	800ac40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e035      	b.n	800acb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 f82b 	bl	800acbc <I2C_WaitOnFlagUntilTimeout>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00d      	beq.n	800ac88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7a:	d103      	bne.n	800ac84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e013      	b.n	800acb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ac88:	897b      	ldrh	r3, [r7, #10]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	f043 0301 	orr.w	r3, r3, #1
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	6a3a      	ldr	r2, [r7, #32]
 800ac9c:	4906      	ldr	r1, [pc, #24]	; (800acb8 <I2C_RequestMemoryRead+0x1cc>)
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 f886 	bl	800adb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e000      	b.n	800acb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	00010002 	.word	0x00010002

0800acbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	4613      	mov	r3, r2
 800acca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800accc:	e048      	b.n	800ad60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd4:	d044      	beq.n	800ad60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acd6:	f7fe f9e3 	bl	80090a0 <HAL_GetTick>
 800acda:	4602      	mov	r2, r0
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d302      	bcc.n	800acec <I2C_WaitOnFlagUntilTimeout+0x30>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d139      	bne.n	800ad60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	0c1b      	lsrs	r3, r3, #16
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d10d      	bne.n	800ad12 <I2C_WaitOnFlagUntilTimeout+0x56>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	43da      	mvns	r2, r3
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	4013      	ands	r3, r2
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bf0c      	ite	eq
 800ad08:	2301      	moveq	r3, #1
 800ad0a:	2300      	movne	r3, #0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	461a      	mov	r2, r3
 800ad10:	e00c      	b.n	800ad2c <I2C_WaitOnFlagUntilTimeout+0x70>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	43da      	mvns	r2, r3
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	bf0c      	ite	eq
 800ad24:	2301      	moveq	r3, #1
 800ad26:	2300      	movne	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d116      	bne.n	800ad60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2220      	movs	r2, #32
 800ad3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4c:	f043 0220 	orr.w	r2, r3, #32
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e023      	b.n	800ada8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	0c1b      	lsrs	r3, r3, #16
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d10d      	bne.n	800ad86 <I2C_WaitOnFlagUntilTimeout+0xca>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	43da      	mvns	r2, r3
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	4013      	ands	r3, r2
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bf0c      	ite	eq
 800ad7c:	2301      	moveq	r3, #1
 800ad7e:	2300      	movne	r3, #0
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	461a      	mov	r2, r3
 800ad84:	e00c      	b.n	800ada0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	43da      	mvns	r2, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	4013      	ands	r3, r2
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	bf0c      	ite	eq
 800ad98:	2301      	moveq	r3, #1
 800ad9a:	2300      	movne	r3, #0
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	461a      	mov	r2, r3
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d093      	beq.n	800acce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800adbe:	e071      	b.n	800aea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adce:	d123      	bne.n	800ae18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ade8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae04:	f043 0204 	orr.w	r2, r3, #4
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e067      	b.n	800aee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1e:	d041      	beq.n	800aea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae20:	f7fe f93e 	bl	80090a0 <HAL_GetTick>
 800ae24:	4602      	mov	r2, r0
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d302      	bcc.n	800ae36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d136      	bne.n	800aea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	0c1b      	lsrs	r3, r3, #16
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d10c      	bne.n	800ae5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	43da      	mvns	r2, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bf14      	ite	ne
 800ae52:	2301      	movne	r3, #1
 800ae54:	2300      	moveq	r3, #0
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	e00b      	b.n	800ae72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	43da      	mvns	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	4013      	ands	r3, r2
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bf14      	ite	ne
 800ae6c:	2301      	movne	r3, #1
 800ae6e:	2300      	moveq	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d016      	beq.n	800aea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae90:	f043 0220 	orr.w	r2, r3, #32
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e021      	b.n	800aee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	0c1b      	lsrs	r3, r3, #16
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d10c      	bne.n	800aec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	43da      	mvns	r2, r3
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	bf14      	ite	ne
 800aec0:	2301      	movne	r3, #1
 800aec2:	2300      	moveq	r3, #0
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	e00b      	b.n	800aee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	43da      	mvns	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	4013      	ands	r3, r2
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bf14      	ite	ne
 800aeda:	2301      	movne	r3, #1
 800aedc:	2300      	moveq	r3, #0
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f47f af6d 	bne.w	800adc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aefc:	e034      	b.n	800af68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f8e3 	bl	800b0ca <I2C_IsAcknowledgeFailed>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d001      	beq.n	800af0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e034      	b.n	800af78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af14:	d028      	beq.n	800af68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af16:	f7fe f8c3 	bl	80090a0 <HAL_GetTick>
 800af1a:	4602      	mov	r2, r0
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	429a      	cmp	r2, r3
 800af24:	d302      	bcc.n	800af2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d11d      	bne.n	800af68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af36:	2b80      	cmp	r3, #128	; 0x80
 800af38:	d016      	beq.n	800af68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af54:	f043 0220 	orr.w	r2, r3, #32
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	e007      	b.n	800af78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af72:	2b80      	cmp	r3, #128	; 0x80
 800af74:	d1c3      	bne.n	800aefe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af8c:	e034      	b.n	800aff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f000 f89b 	bl	800b0ca <I2C_IsAcknowledgeFailed>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e034      	b.n	800b008 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa4:	d028      	beq.n	800aff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afa6:	f7fe f87b 	bl	80090a0 <HAL_GetTick>
 800afaa:	4602      	mov	r2, r0
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d302      	bcc.n	800afbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d11d      	bne.n	800aff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	f003 0304 	and.w	r3, r3, #4
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	d016      	beq.n	800aff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2220      	movs	r2, #32
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe4:	f043 0220 	orr.w	r2, r3, #32
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e007      	b.n	800b008 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	f003 0304 	and.w	r3, r3, #4
 800b002:	2b04      	cmp	r3, #4
 800b004:	d1c3      	bne.n	800af8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b01c:	e049      	b.n	800b0b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	f003 0310 	and.w	r3, r3, #16
 800b028:	2b10      	cmp	r3, #16
 800b02a:	d119      	bne.n	800b060 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f06f 0210 	mvn.w	r2, #16
 800b034:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2220      	movs	r2, #32
 800b040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e030      	b.n	800b0c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b060:	f7fe f81e 	bl	80090a0 <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d302      	bcc.n	800b076 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d11d      	bne.n	800b0b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	695b      	ldr	r3, [r3, #20]
 800b07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b080:	2b40      	cmp	r3, #64	; 0x40
 800b082:	d016      	beq.n	800b0b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2220      	movs	r2, #32
 800b08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	f043 0220 	orr.w	r2, r3, #32
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e007      	b.n	800b0c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0bc:	2b40      	cmp	r3, #64	; 0x40
 800b0be:	d1ae      	bne.n	800b01e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e0:	d11b      	bne.n	800b11a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b0ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	f043 0204 	orr.w	r2, r3, #4
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e000      	b.n	800b11c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	bc80      	pop	{r7}
 800b124:	4770      	bx	lr
	...

0800b128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e272      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 8087 	beq.w	800b256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b148:	4b92      	ldr	r3, [pc, #584]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	f003 030c 	and.w	r3, r3, #12
 800b150:	2b04      	cmp	r3, #4
 800b152:	d00c      	beq.n	800b16e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b154:	4b8f      	ldr	r3, [pc, #572]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	f003 030c 	and.w	r3, r3, #12
 800b15c:	2b08      	cmp	r3, #8
 800b15e:	d112      	bne.n	800b186 <HAL_RCC_OscConfig+0x5e>
 800b160:	4b8c      	ldr	r3, [pc, #560]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b16c:	d10b      	bne.n	800b186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b16e:	4b89      	ldr	r3, [pc, #548]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d06c      	beq.n	800b254 <HAL_RCC_OscConfig+0x12c>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d168      	bne.n	800b254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	e24c      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b18e:	d106      	bne.n	800b19e <HAL_RCC_OscConfig+0x76>
 800b190:	4b80      	ldr	r3, [pc, #512]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a7f      	ldr	r2, [pc, #508]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	e02e      	b.n	800b1fc <HAL_RCC_OscConfig+0xd4>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10c      	bne.n	800b1c0 <HAL_RCC_OscConfig+0x98>
 800b1a6:	4b7b      	ldr	r3, [pc, #492]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a7a      	ldr	r2, [pc, #488]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	4b78      	ldr	r3, [pc, #480]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a77      	ldr	r2, [pc, #476]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	e01d      	b.n	800b1fc <HAL_RCC_OscConfig+0xd4>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1c8:	d10c      	bne.n	800b1e4 <HAL_RCC_OscConfig+0xbc>
 800b1ca:	4b72      	ldr	r3, [pc, #456]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a71      	ldr	r2, [pc, #452]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	4b6f      	ldr	r3, [pc, #444]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a6e      	ldr	r2, [pc, #440]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	e00b      	b.n	800b1fc <HAL_RCC_OscConfig+0xd4>
 800b1e4:	4b6b      	ldr	r3, [pc, #428]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a6a      	ldr	r2, [pc, #424]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1ee:	6013      	str	r3, [r2, #0]
 800b1f0:	4b68      	ldr	r3, [pc, #416]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a67      	ldr	r2, [pc, #412]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b1f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d013      	beq.n	800b22c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b204:	f7fd ff4c 	bl	80090a0 <HAL_GetTick>
 800b208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b20a:	e008      	b.n	800b21e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b20c:	f7fd ff48 	bl	80090a0 <HAL_GetTick>
 800b210:	4602      	mov	r2, r0
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	2b64      	cmp	r3, #100	; 0x64
 800b218:	d901      	bls.n	800b21e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b21a:	2303      	movs	r3, #3
 800b21c:	e200      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b21e:	4b5d      	ldr	r3, [pc, #372]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0f0      	beq.n	800b20c <HAL_RCC_OscConfig+0xe4>
 800b22a:	e014      	b.n	800b256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b22c:	f7fd ff38 	bl	80090a0 <HAL_GetTick>
 800b230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b232:	e008      	b.n	800b246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b234:	f7fd ff34 	bl	80090a0 <HAL_GetTick>
 800b238:	4602      	mov	r2, r0
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	2b64      	cmp	r3, #100	; 0x64
 800b240:	d901      	bls.n	800b246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e1ec      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b246:	4b53      	ldr	r3, [pc, #332]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1f0      	bne.n	800b234 <HAL_RCC_OscConfig+0x10c>
 800b252:	e000      	b.n	800b256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d063      	beq.n	800b32a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b262:	4b4c      	ldr	r3, [pc, #304]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f003 030c 	and.w	r3, r3, #12
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00b      	beq.n	800b286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b26e:	4b49      	ldr	r3, [pc, #292]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	f003 030c 	and.w	r3, r3, #12
 800b276:	2b08      	cmp	r3, #8
 800b278:	d11c      	bne.n	800b2b4 <HAL_RCC_OscConfig+0x18c>
 800b27a:	4b46      	ldr	r3, [pc, #280]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d116      	bne.n	800b2b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b286:	4b43      	ldr	r3, [pc, #268]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d005      	beq.n	800b29e <HAL_RCC_OscConfig+0x176>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d001      	beq.n	800b29e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e1c0      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b29e:	4b3d      	ldr	r3, [pc, #244]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	00db      	lsls	r3, r3, #3
 800b2ac:	4939      	ldr	r1, [pc, #228]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2b2:	e03a      	b.n	800b32a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d020      	beq.n	800b2fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b2bc:	4b36      	ldr	r3, [pc, #216]	; (800b398 <HAL_RCC_OscConfig+0x270>)
 800b2be:	2201      	movs	r2, #1
 800b2c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2c2:	f7fd feed 	bl	80090a0 <HAL_GetTick>
 800b2c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2c8:	e008      	b.n	800b2dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2ca:	f7fd fee9 	bl	80090a0 <HAL_GetTick>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d901      	bls.n	800b2dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e1a1      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2dc:	4b2d      	ldr	r3, [pc, #180]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 0302 	and.w	r3, r3, #2
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d0f0      	beq.n	800b2ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2e8:	4b2a      	ldr	r3, [pc, #168]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	695b      	ldr	r3, [r3, #20]
 800b2f4:	00db      	lsls	r3, r3, #3
 800b2f6:	4927      	ldr	r1, [pc, #156]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	600b      	str	r3, [r1, #0]
 800b2fc:	e015      	b.n	800b32a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2fe:	4b26      	ldr	r3, [pc, #152]	; (800b398 <HAL_RCC_OscConfig+0x270>)
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b304:	f7fd fecc 	bl	80090a0 <HAL_GetTick>
 800b308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b30a:	e008      	b.n	800b31e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b30c:	f7fd fec8 	bl	80090a0 <HAL_GetTick>
 800b310:	4602      	mov	r2, r0
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	2b02      	cmp	r3, #2
 800b318:	d901      	bls.n	800b31e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e180      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b31e:	4b1d      	ldr	r3, [pc, #116]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0302 	and.w	r3, r3, #2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1f0      	bne.n	800b30c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0308 	and.w	r3, r3, #8
 800b332:	2b00      	cmp	r3, #0
 800b334:	d03a      	beq.n	800b3ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d019      	beq.n	800b372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b33e:	4b17      	ldr	r3, [pc, #92]	; (800b39c <HAL_RCC_OscConfig+0x274>)
 800b340:	2201      	movs	r2, #1
 800b342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b344:	f7fd feac 	bl	80090a0 <HAL_GetTick>
 800b348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b34a:	e008      	b.n	800b35e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b34c:	f7fd fea8 	bl	80090a0 <HAL_GetTick>
 800b350:	4602      	mov	r2, r0
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	2b02      	cmp	r3, #2
 800b358:	d901      	bls.n	800b35e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e160      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b35e:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <HAL_RCC_OscConfig+0x26c>)
 800b360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b362:	f003 0302 	and.w	r3, r3, #2
 800b366:	2b00      	cmp	r3, #0
 800b368:	d0f0      	beq.n	800b34c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b36a:	2001      	movs	r0, #1
 800b36c:	f000 face 	bl	800b90c <RCC_Delay>
 800b370:	e01c      	b.n	800b3ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b372:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <HAL_RCC_OscConfig+0x274>)
 800b374:	2200      	movs	r2, #0
 800b376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b378:	f7fd fe92 	bl	80090a0 <HAL_GetTick>
 800b37c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b37e:	e00f      	b.n	800b3a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b380:	f7fd fe8e 	bl	80090a0 <HAL_GetTick>
 800b384:	4602      	mov	r2, r0
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d908      	bls.n	800b3a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	e146      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
 800b392:	bf00      	nop
 800b394:	40021000 	.word	0x40021000
 800b398:	42420000 	.word	0x42420000
 800b39c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b3a0:	4b92      	ldr	r3, [pc, #584]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1e9      	bne.n	800b380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 80a6 	beq.w	800b506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b3be:	4b8b      	ldr	r3, [pc, #556]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10d      	bne.n	800b3e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3ca:	4b88      	ldr	r3, [pc, #544]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	4a87      	ldr	r2, [pc, #540]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b3d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3d4:	61d3      	str	r3, [r2, #28]
 800b3d6:	4b85      	ldr	r3, [pc, #532]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3de:	60bb      	str	r3, [r7, #8]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3e6:	4b82      	ldr	r3, [pc, #520]	; (800b5f0 <HAL_RCC_OscConfig+0x4c8>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d118      	bne.n	800b424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b3f2:	4b7f      	ldr	r3, [pc, #508]	; (800b5f0 <HAL_RCC_OscConfig+0x4c8>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a7e      	ldr	r2, [pc, #504]	; (800b5f0 <HAL_RCC_OscConfig+0x4c8>)
 800b3f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3fe:	f7fd fe4f 	bl	80090a0 <HAL_GetTick>
 800b402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b404:	e008      	b.n	800b418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b406:	f7fd fe4b 	bl	80090a0 <HAL_GetTick>
 800b40a:	4602      	mov	r2, r0
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	2b64      	cmp	r3, #100	; 0x64
 800b412:	d901      	bls.n	800b418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b414:	2303      	movs	r3, #3
 800b416:	e103      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b418:	4b75      	ldr	r3, [pc, #468]	; (800b5f0 <HAL_RCC_OscConfig+0x4c8>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0f0      	beq.n	800b406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d106      	bne.n	800b43a <HAL_RCC_OscConfig+0x312>
 800b42c:	4b6f      	ldr	r3, [pc, #444]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	4a6e      	ldr	r2, [pc, #440]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b432:	f043 0301 	orr.w	r3, r3, #1
 800b436:	6213      	str	r3, [r2, #32]
 800b438:	e02d      	b.n	800b496 <HAL_RCC_OscConfig+0x36e>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10c      	bne.n	800b45c <HAL_RCC_OscConfig+0x334>
 800b442:	4b6a      	ldr	r3, [pc, #424]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	4a69      	ldr	r2, [pc, #420]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b448:	f023 0301 	bic.w	r3, r3, #1
 800b44c:	6213      	str	r3, [r2, #32]
 800b44e:	4b67      	ldr	r3, [pc, #412]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	4a66      	ldr	r2, [pc, #408]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b454:	f023 0304 	bic.w	r3, r3, #4
 800b458:	6213      	str	r3, [r2, #32]
 800b45a:	e01c      	b.n	800b496 <HAL_RCC_OscConfig+0x36e>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	2b05      	cmp	r3, #5
 800b462:	d10c      	bne.n	800b47e <HAL_RCC_OscConfig+0x356>
 800b464:	4b61      	ldr	r3, [pc, #388]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b466:	6a1b      	ldr	r3, [r3, #32]
 800b468:	4a60      	ldr	r2, [pc, #384]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b46a:	f043 0304 	orr.w	r3, r3, #4
 800b46e:	6213      	str	r3, [r2, #32]
 800b470:	4b5e      	ldr	r3, [pc, #376]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	4a5d      	ldr	r2, [pc, #372]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b476:	f043 0301 	orr.w	r3, r3, #1
 800b47a:	6213      	str	r3, [r2, #32]
 800b47c:	e00b      	b.n	800b496 <HAL_RCC_OscConfig+0x36e>
 800b47e:	4b5b      	ldr	r3, [pc, #364]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	4a5a      	ldr	r2, [pc, #360]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b484:	f023 0301 	bic.w	r3, r3, #1
 800b488:	6213      	str	r3, [r2, #32]
 800b48a:	4b58      	ldr	r3, [pc, #352]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	4a57      	ldr	r2, [pc, #348]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b490:	f023 0304 	bic.w	r3, r3, #4
 800b494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d015      	beq.n	800b4ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b49e:	f7fd fdff 	bl	80090a0 <HAL_GetTick>
 800b4a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4a4:	e00a      	b.n	800b4bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4a6:	f7fd fdfb 	bl	80090a0 <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d901      	bls.n	800b4bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	e0b1      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4bc:	4b4b      	ldr	r3, [pc, #300]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b4be:	6a1b      	ldr	r3, [r3, #32]
 800b4c0:	f003 0302 	and.w	r3, r3, #2
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d0ee      	beq.n	800b4a6 <HAL_RCC_OscConfig+0x37e>
 800b4c8:	e014      	b.n	800b4f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4ca:	f7fd fde9 	bl	80090a0 <HAL_GetTick>
 800b4ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4d0:	e00a      	b.n	800b4e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4d2:	f7fd fde5 	bl	80090a0 <HAL_GetTick>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d901      	bls.n	800b4e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e09b      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4e8:	4b40      	ldr	r3, [pc, #256]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1ee      	bne.n	800b4d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d105      	bne.n	800b506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4fa:	4b3c      	ldr	r3, [pc, #240]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b4fc:	69db      	ldr	r3, [r3, #28]
 800b4fe:	4a3b      	ldr	r2, [pc, #236]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 8087 	beq.w	800b61e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b510:	4b36      	ldr	r3, [pc, #216]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f003 030c 	and.w	r3, r3, #12
 800b518:	2b08      	cmp	r3, #8
 800b51a:	d061      	beq.n	800b5e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	2b02      	cmp	r3, #2
 800b522:	d146      	bne.n	800b5b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b524:	4b33      	ldr	r3, [pc, #204]	; (800b5f4 <HAL_RCC_OscConfig+0x4cc>)
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b52a:	f7fd fdb9 	bl	80090a0 <HAL_GetTick>
 800b52e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b530:	e008      	b.n	800b544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b532:	f7fd fdb5 	bl	80090a0 <HAL_GetTick>
 800b536:	4602      	mov	r2, r0
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d901      	bls.n	800b544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e06d      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b544:	4b29      	ldr	r3, [pc, #164]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1f0      	bne.n	800b532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a1b      	ldr	r3, [r3, #32]
 800b554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b558:	d108      	bne.n	800b56c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b55a:	4b24      	ldr	r3, [pc, #144]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	4921      	ldr	r1, [pc, #132]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b568:	4313      	orrs	r3, r2
 800b56a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b56c:	4b1f      	ldr	r3, [pc, #124]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a19      	ldr	r1, [r3, #32]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	430b      	orrs	r3, r1
 800b57e:	491b      	ldr	r1, [pc, #108]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b580:	4313      	orrs	r3, r2
 800b582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b584:	4b1b      	ldr	r3, [pc, #108]	; (800b5f4 <HAL_RCC_OscConfig+0x4cc>)
 800b586:	2201      	movs	r2, #1
 800b588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b58a:	f7fd fd89 	bl	80090a0 <HAL_GetTick>
 800b58e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b590:	e008      	b.n	800b5a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b592:	f7fd fd85 	bl	80090a0 <HAL_GetTick>
 800b596:	4602      	mov	r2, r0
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d901      	bls.n	800b5a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e03d      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5a4:	4b11      	ldr	r3, [pc, #68]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0f0      	beq.n	800b592 <HAL_RCC_OscConfig+0x46a>
 800b5b0:	e035      	b.n	800b61e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5b2:	4b10      	ldr	r3, [pc, #64]	; (800b5f4 <HAL_RCC_OscConfig+0x4cc>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5b8:	f7fd fd72 	bl	80090a0 <HAL_GetTick>
 800b5bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b5be:	e008      	b.n	800b5d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5c0:	f7fd fd6e 	bl	80090a0 <HAL_GetTick>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d901      	bls.n	800b5d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b5ce:	2303      	movs	r3, #3
 800b5d0:	e026      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b5d2:	4b06      	ldr	r3, [pc, #24]	; (800b5ec <HAL_RCC_OscConfig+0x4c4>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1f0      	bne.n	800b5c0 <HAL_RCC_OscConfig+0x498>
 800b5de:	e01e      	b.n	800b61e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	69db      	ldr	r3, [r3, #28]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d107      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e019      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
 800b5ec:	40021000 	.word	0x40021000
 800b5f0:	40007000 	.word	0x40007000
 800b5f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b5f8:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <HAL_RCC_OscConfig+0x500>)
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a1b      	ldr	r3, [r3, #32]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d106      	bne.n	800b61a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b616:	429a      	cmp	r2, r3
 800b618:	d001      	beq.n	800b61e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e000      	b.n	800b620 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3718      	adds	r7, #24
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40021000 	.word	0x40021000

0800b62c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e0d0      	b.n	800b7e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b640:	4b6a      	ldr	r3, [pc, #424]	; (800b7ec <HAL_RCC_ClockConfig+0x1c0>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0307 	and.w	r3, r3, #7
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d910      	bls.n	800b670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b64e:	4b67      	ldr	r3, [pc, #412]	; (800b7ec <HAL_RCC_ClockConfig+0x1c0>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f023 0207 	bic.w	r2, r3, #7
 800b656:	4965      	ldr	r1, [pc, #404]	; (800b7ec <HAL_RCC_ClockConfig+0x1c0>)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b65e:	4b63      	ldr	r3, [pc, #396]	; (800b7ec <HAL_RCC_ClockConfig+0x1c0>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 0307 	and.w	r3, r3, #7
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d001      	beq.n	800b670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e0b8      	b.n	800b7e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 0302 	and.w	r3, r3, #2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d020      	beq.n	800b6be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	2b00      	cmp	r3, #0
 800b686:	d005      	beq.n	800b694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b688:	4b59      	ldr	r3, [pc, #356]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	4a58      	ldr	r2, [pc, #352]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b68e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0308 	and.w	r3, r3, #8
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6a0:	4b53      	ldr	r3, [pc, #332]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	4a52      	ldr	r2, [pc, #328]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b6a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b6aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6ac:	4b50      	ldr	r3, [pc, #320]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	494d      	ldr	r1, [pc, #308]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d040      	beq.n	800b74c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d107      	bne.n	800b6e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6d2:	4b47      	ldr	r3, [pc, #284]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d115      	bne.n	800b70a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e07f      	b.n	800b7e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d107      	bne.n	800b6fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6ea:	4b41      	ldr	r3, [pc, #260]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d109      	bne.n	800b70a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e073      	b.n	800b7e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6fa:	4b3d      	ldr	r3, [pc, #244]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0302 	and.w	r3, r3, #2
 800b702:	2b00      	cmp	r3, #0
 800b704:	d101      	bne.n	800b70a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e06b      	b.n	800b7e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b70a:	4b39      	ldr	r3, [pc, #228]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f023 0203 	bic.w	r2, r3, #3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	4936      	ldr	r1, [pc, #216]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b71c:	f7fd fcc0 	bl	80090a0 <HAL_GetTick>
 800b720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b722:	e00a      	b.n	800b73a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b724:	f7fd fcbc 	bl	80090a0 <HAL_GetTick>
 800b728:	4602      	mov	r2, r0
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b732:	4293      	cmp	r3, r2
 800b734:	d901      	bls.n	800b73a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b736:	2303      	movs	r3, #3
 800b738:	e053      	b.n	800b7e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b73a:	4b2d      	ldr	r3, [pc, #180]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	f003 020c 	and.w	r2, r3, #12
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	429a      	cmp	r2, r3
 800b74a:	d1eb      	bne.n	800b724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b74c:	4b27      	ldr	r3, [pc, #156]	; (800b7ec <HAL_RCC_ClockConfig+0x1c0>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0307 	and.w	r3, r3, #7
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d210      	bcs.n	800b77c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b75a:	4b24      	ldr	r3, [pc, #144]	; (800b7ec <HAL_RCC_ClockConfig+0x1c0>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f023 0207 	bic.w	r2, r3, #7
 800b762:	4922      	ldr	r1, [pc, #136]	; (800b7ec <HAL_RCC_ClockConfig+0x1c0>)
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	4313      	orrs	r3, r2
 800b768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b76a:	4b20      	ldr	r3, [pc, #128]	; (800b7ec <HAL_RCC_ClockConfig+0x1c0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0307 	and.w	r3, r3, #7
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d001      	beq.n	800b77c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e032      	b.n	800b7e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0304 	and.w	r3, r3, #4
 800b784:	2b00      	cmp	r3, #0
 800b786:	d008      	beq.n	800b79a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b788:	4b19      	ldr	r3, [pc, #100]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	4916      	ldr	r1, [pc, #88]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b796:	4313      	orrs	r3, r2
 800b798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0308 	and.w	r3, r3, #8
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d009      	beq.n	800b7ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b7a6:	4b12      	ldr	r3, [pc, #72]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	490e      	ldr	r1, [pc, #56]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7ba:	f000 f821 	bl	800b800 <HAL_RCC_GetSysClockFreq>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	091b      	lsrs	r3, r3, #4
 800b7c6:	f003 030f 	and.w	r3, r3, #15
 800b7ca:	490a      	ldr	r1, [pc, #40]	; (800b7f4 <HAL_RCC_ClockConfig+0x1c8>)
 800b7cc:	5ccb      	ldrb	r3, [r1, r3]
 800b7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d2:	4a09      	ldr	r2, [pc, #36]	; (800b7f8 <HAL_RCC_ClockConfig+0x1cc>)
 800b7d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b7d6:	4b09      	ldr	r3, [pc, #36]	; (800b7fc <HAL_RCC_ClockConfig+0x1d0>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fd fc1e 	bl	800901c <HAL_InitTick>

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	40022000 	.word	0x40022000
 800b7f0:	40021000 	.word	0x40021000
 800b7f4:	0800e5dc 	.word	0x0800e5dc
 800b7f8:	200009b8 	.word	0x200009b8
 800b7fc:	200009bc 	.word	0x200009bc

0800b800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b800:	b480      	push	{r7}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	2300      	movs	r3, #0
 800b80c:	60bb      	str	r3, [r7, #8]
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]
 800b812:	2300      	movs	r3, #0
 800b814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b81a:	4b1e      	ldr	r3, [pc, #120]	; (800b894 <HAL_RCC_GetSysClockFreq+0x94>)
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f003 030c 	and.w	r3, r3, #12
 800b826:	2b04      	cmp	r3, #4
 800b828:	d002      	beq.n	800b830 <HAL_RCC_GetSysClockFreq+0x30>
 800b82a:	2b08      	cmp	r3, #8
 800b82c:	d003      	beq.n	800b836 <HAL_RCC_GetSysClockFreq+0x36>
 800b82e:	e027      	b.n	800b880 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b830:	4b19      	ldr	r3, [pc, #100]	; (800b898 <HAL_RCC_GetSysClockFreq+0x98>)
 800b832:	613b      	str	r3, [r7, #16]
      break;
 800b834:	e027      	b.n	800b886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	0c9b      	lsrs	r3, r3, #18
 800b83a:	f003 030f 	and.w	r3, r3, #15
 800b83e:	4a17      	ldr	r2, [pc, #92]	; (800b89c <HAL_RCC_GetSysClockFreq+0x9c>)
 800b840:	5cd3      	ldrb	r3, [r2, r3]
 800b842:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d010      	beq.n	800b870 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b84e:	4b11      	ldr	r3, [pc, #68]	; (800b894 <HAL_RCC_GetSysClockFreq+0x94>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	0c5b      	lsrs	r3, r3, #17
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	4a11      	ldr	r2, [pc, #68]	; (800b8a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b85a:	5cd3      	ldrb	r3, [r2, r3]
 800b85c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a0d      	ldr	r2, [pc, #52]	; (800b898 <HAL_RCC_GetSysClockFreq+0x98>)
 800b862:	fb03 f202 	mul.w	r2, r3, r2
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	fbb2 f3f3 	udiv	r3, r2, r3
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e004      	b.n	800b87a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a0c      	ldr	r2, [pc, #48]	; (800b8a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b874:	fb02 f303 	mul.w	r3, r2, r3
 800b878:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	613b      	str	r3, [r7, #16]
      break;
 800b87e:	e002      	b.n	800b886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b880:	4b05      	ldr	r3, [pc, #20]	; (800b898 <HAL_RCC_GetSysClockFreq+0x98>)
 800b882:	613b      	str	r3, [r7, #16]
      break;
 800b884:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b886:	693b      	ldr	r3, [r7, #16]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	371c      	adds	r7, #28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bc80      	pop	{r7}
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	40021000 	.word	0x40021000
 800b898:	007a1200 	.word	0x007a1200
 800b89c:	0800e5f4 	.word	0x0800e5f4
 800b8a0:	0800e604 	.word	0x0800e604
 800b8a4:	003d0900 	.word	0x003d0900

0800b8a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8ac:	4b02      	ldr	r3, [pc, #8]	; (800b8b8 <HAL_RCC_GetHCLKFreq+0x10>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bc80      	pop	{r7}
 800b8b6:	4770      	bx	lr
 800b8b8:	200009b8 	.word	0x200009b8

0800b8bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b8c0:	f7ff fff2 	bl	800b8a8 <HAL_RCC_GetHCLKFreq>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	0a1b      	lsrs	r3, r3, #8
 800b8cc:	f003 0307 	and.w	r3, r3, #7
 800b8d0:	4903      	ldr	r1, [pc, #12]	; (800b8e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8d2:	5ccb      	ldrb	r3, [r1, r3]
 800b8d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	40021000 	.word	0x40021000
 800b8e0:	0800e5ec 	.word	0x0800e5ec

0800b8e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8e8:	f7ff ffde 	bl	800b8a8 <HAL_RCC_GetHCLKFreq>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	4b05      	ldr	r3, [pc, #20]	; (800b904 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	0adb      	lsrs	r3, r3, #11
 800b8f4:	f003 0307 	and.w	r3, r3, #7
 800b8f8:	4903      	ldr	r1, [pc, #12]	; (800b908 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8fa:	5ccb      	ldrb	r3, [r1, r3]
 800b8fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b900:	4618      	mov	r0, r3
 800b902:	bd80      	pop	{r7, pc}
 800b904:	40021000 	.word	0x40021000
 800b908:	0800e5ec 	.word	0x0800e5ec

0800b90c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b914:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <RCC_Delay+0x34>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a0a      	ldr	r2, [pc, #40]	; (800b944 <RCC_Delay+0x38>)
 800b91a:	fba2 2303 	umull	r2, r3, r2, r3
 800b91e:	0a5b      	lsrs	r3, r3, #9
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	fb02 f303 	mul.w	r3, r2, r3
 800b926:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b928:	bf00      	nop
  }
  while (Delay --);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	1e5a      	subs	r2, r3, #1
 800b92e:	60fa      	str	r2, [r7, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1f9      	bne.n	800b928 <RCC_Delay+0x1c>
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bc80      	pop	{r7}
 800b93e:	4770      	bx	lr
 800b940:	200009b8 	.word	0x200009b8
 800b944:	10624dd3 	.word	0x10624dd3

0800b948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d101      	bne.n	800b95a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e041      	b.n	800b9de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7fd fa26 	bl	8008dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2202      	movs	r2, #2
 800b978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3304      	adds	r3, #4
 800b984:	4619      	mov	r1, r3
 800b986:	4610      	mov	r0, r2
 800b988:	f000 fa82 	bl	800be90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
	...

0800b9e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d001      	beq.n	800ba00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e044      	b.n	800ba8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2202      	movs	r2, #2
 800ba04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68da      	ldr	r2, [r3, #12]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f042 0201 	orr.w	r2, r2, #1
 800ba16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a1d      	ldr	r2, [pc, #116]	; (800ba94 <HAL_TIM_Base_Start_IT+0xac>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d018      	beq.n	800ba54 <HAL_TIM_Base_Start_IT+0x6c>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a1c      	ldr	r2, [pc, #112]	; (800ba98 <HAL_TIM_Base_Start_IT+0xb0>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d013      	beq.n	800ba54 <HAL_TIM_Base_Start_IT+0x6c>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba34:	d00e      	beq.n	800ba54 <HAL_TIM_Base_Start_IT+0x6c>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a18      	ldr	r2, [pc, #96]	; (800ba9c <HAL_TIM_Base_Start_IT+0xb4>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d009      	beq.n	800ba54 <HAL_TIM_Base_Start_IT+0x6c>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a16      	ldr	r2, [pc, #88]	; (800baa0 <HAL_TIM_Base_Start_IT+0xb8>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d004      	beq.n	800ba54 <HAL_TIM_Base_Start_IT+0x6c>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a15      	ldr	r2, [pc, #84]	; (800baa4 <HAL_TIM_Base_Start_IT+0xbc>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d111      	bne.n	800ba78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	f003 0307 	and.w	r3, r3, #7
 800ba5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b06      	cmp	r3, #6
 800ba64:	d010      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f042 0201 	orr.w	r2, r2, #1
 800ba74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba76:	e007      	b.n	800ba88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f042 0201 	orr.w	r2, r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bc80      	pop	{r7}
 800ba92:	4770      	bx	lr
 800ba94:	40012c00 	.word	0x40012c00
 800ba98:	40013400 	.word	0x40013400
 800ba9c:	40000400 	.word	0x40000400
 800baa0:	40000800 	.word	0x40000800
 800baa4:	40000c00 	.word	0x40000c00

0800baa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	f003 0302 	and.w	r3, r3, #2
 800baba:	2b02      	cmp	r3, #2
 800babc:	d122      	bne.n	800bb04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	f003 0302 	and.w	r3, r3, #2
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d11b      	bne.n	800bb04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f06f 0202 	mvn.w	r2, #2
 800bad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	699b      	ldr	r3, [r3, #24]
 800bae2:	f003 0303 	and.w	r3, r3, #3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f9b4 	bl	800be58 <HAL_TIM_IC_CaptureCallback>
 800baf0:	e005      	b.n	800bafe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f9a7 	bl	800be46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 f9b6 	bl	800be6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	f003 0304 	and.w	r3, r3, #4
 800bb0e:	2b04      	cmp	r3, #4
 800bb10:	d122      	bne.n	800bb58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	f003 0304 	and.w	r3, r3, #4
 800bb1c:	2b04      	cmp	r3, #4
 800bb1e:	d11b      	bne.n	800bb58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f06f 0204 	mvn.w	r2, #4
 800bb28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	699b      	ldr	r3, [r3, #24]
 800bb36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f98a 	bl	800be58 <HAL_TIM_IC_CaptureCallback>
 800bb44:	e005      	b.n	800bb52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f97d 	bl	800be46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f98c 	bl	800be6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	f003 0308 	and.w	r3, r3, #8
 800bb62:	2b08      	cmp	r3, #8
 800bb64:	d122      	bne.n	800bbac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	f003 0308 	and.w	r3, r3, #8
 800bb70:	2b08      	cmp	r3, #8
 800bb72:	d11b      	bne.n	800bbac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f06f 0208 	mvn.w	r2, #8
 800bb7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2204      	movs	r2, #4
 800bb82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	f003 0303 	and.w	r3, r3, #3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d003      	beq.n	800bb9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f960 	bl	800be58 <HAL_TIM_IC_CaptureCallback>
 800bb98:	e005      	b.n	800bba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f953 	bl	800be46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f962 	bl	800be6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	f003 0310 	and.w	r3, r3, #16
 800bbb6:	2b10      	cmp	r3, #16
 800bbb8:	d122      	bne.n	800bc00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	f003 0310 	and.w	r3, r3, #16
 800bbc4:	2b10      	cmp	r3, #16
 800bbc6:	d11b      	bne.n	800bc00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f06f 0210 	mvn.w	r2, #16
 800bbd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2208      	movs	r2, #8
 800bbd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f936 	bl	800be58 <HAL_TIM_IC_CaptureCallback>
 800bbec:	e005      	b.n	800bbfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f929 	bl	800be46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f938 	bl	800be6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d10e      	bne.n	800bc2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	f003 0301 	and.w	r3, r3, #1
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d107      	bne.n	800bc2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f06f 0201 	mvn.w	r2, #1
 800bc24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7fc fd1c 	bl	8008664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc36:	2b80      	cmp	r3, #128	; 0x80
 800bc38:	d10e      	bne.n	800bc58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc44:	2b80      	cmp	r3, #128	; 0x80
 800bc46:	d107      	bne.n	800bc58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 faa1 	bl	800c19a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc62:	2b40      	cmp	r3, #64	; 0x40
 800bc64:	d10e      	bne.n	800bc84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc70:	2b40      	cmp	r3, #64	; 0x40
 800bc72:	d107      	bne.n	800bc84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f8fc 	bl	800be7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	f003 0320 	and.w	r3, r3, #32
 800bc8e:	2b20      	cmp	r3, #32
 800bc90:	d10e      	bne.n	800bcb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	f003 0320 	and.w	r3, r3, #32
 800bc9c:	2b20      	cmp	r3, #32
 800bc9e:	d107      	bne.n	800bcb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f06f 0220 	mvn.w	r2, #32
 800bca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fa6c 	bl	800c188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d101      	bne.n	800bcd4 <HAL_TIM_ConfigClockSource+0x1c>
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	e0b4      	b.n	800be3e <HAL_TIM_ConfigClockSource+0x186>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2202      	movs	r2, #2
 800bce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bcf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd0c:	d03e      	beq.n	800bd8c <HAL_TIM_ConfigClockSource+0xd4>
 800bd0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd12:	f200 8087 	bhi.w	800be24 <HAL_TIM_ConfigClockSource+0x16c>
 800bd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1a:	f000 8086 	beq.w	800be2a <HAL_TIM_ConfigClockSource+0x172>
 800bd1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd22:	d87f      	bhi.n	800be24 <HAL_TIM_ConfigClockSource+0x16c>
 800bd24:	2b70      	cmp	r3, #112	; 0x70
 800bd26:	d01a      	beq.n	800bd5e <HAL_TIM_ConfigClockSource+0xa6>
 800bd28:	2b70      	cmp	r3, #112	; 0x70
 800bd2a:	d87b      	bhi.n	800be24 <HAL_TIM_ConfigClockSource+0x16c>
 800bd2c:	2b60      	cmp	r3, #96	; 0x60
 800bd2e:	d050      	beq.n	800bdd2 <HAL_TIM_ConfigClockSource+0x11a>
 800bd30:	2b60      	cmp	r3, #96	; 0x60
 800bd32:	d877      	bhi.n	800be24 <HAL_TIM_ConfigClockSource+0x16c>
 800bd34:	2b50      	cmp	r3, #80	; 0x50
 800bd36:	d03c      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0xfa>
 800bd38:	2b50      	cmp	r3, #80	; 0x50
 800bd3a:	d873      	bhi.n	800be24 <HAL_TIM_ConfigClockSource+0x16c>
 800bd3c:	2b40      	cmp	r3, #64	; 0x40
 800bd3e:	d058      	beq.n	800bdf2 <HAL_TIM_ConfigClockSource+0x13a>
 800bd40:	2b40      	cmp	r3, #64	; 0x40
 800bd42:	d86f      	bhi.n	800be24 <HAL_TIM_ConfigClockSource+0x16c>
 800bd44:	2b30      	cmp	r3, #48	; 0x30
 800bd46:	d064      	beq.n	800be12 <HAL_TIM_ConfigClockSource+0x15a>
 800bd48:	2b30      	cmp	r3, #48	; 0x30
 800bd4a:	d86b      	bhi.n	800be24 <HAL_TIM_ConfigClockSource+0x16c>
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	d060      	beq.n	800be12 <HAL_TIM_ConfigClockSource+0x15a>
 800bd50:	2b20      	cmp	r3, #32
 800bd52:	d867      	bhi.n	800be24 <HAL_TIM_ConfigClockSource+0x16c>
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d05c      	beq.n	800be12 <HAL_TIM_ConfigClockSource+0x15a>
 800bd58:	2b10      	cmp	r3, #16
 800bd5a:	d05a      	beq.n	800be12 <HAL_TIM_ConfigClockSource+0x15a>
 800bd5c:	e062      	b.n	800be24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd6e:	f000 f980 	bl	800c072 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	609a      	str	r2, [r3, #8]
      break;
 800bd8a:	e04f      	b.n	800be2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd9c:	f000 f969 	bl	800c072 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689a      	ldr	r2, [r3, #8]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdae:	609a      	str	r2, [r3, #8]
      break;
 800bdb0:	e03c      	b.n	800be2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f000 f8e0 	bl	800bf84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2150      	movs	r1, #80	; 0x50
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 f937 	bl	800c03e <TIM_ITRx_SetConfig>
      break;
 800bdd0:	e02c      	b.n	800be2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdde:	461a      	mov	r2, r3
 800bde0:	f000 f8fe 	bl	800bfe0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2160      	movs	r1, #96	; 0x60
 800bdea:	4618      	mov	r0, r3
 800bdec:	f000 f927 	bl	800c03e <TIM_ITRx_SetConfig>
      break;
 800bdf0:	e01c      	b.n	800be2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdfe:	461a      	mov	r2, r3
 800be00:	f000 f8c0 	bl	800bf84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2140      	movs	r1, #64	; 0x40
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 f917 	bl	800c03e <TIM_ITRx_SetConfig>
      break;
 800be10:	e00c      	b.n	800be2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4619      	mov	r1, r3
 800be1c:	4610      	mov	r0, r2
 800be1e:	f000 f90e 	bl	800c03e <TIM_ITRx_SetConfig>
      break;
 800be22:	e003      	b.n	800be2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	73fb      	strb	r3, [r7, #15]
      break;
 800be28:	e000      	b.n	800be2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be46:	b480      	push	{r7}
 800be48:	b083      	sub	sp, #12
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be4e:	bf00      	nop
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	bc80      	pop	{r7}
 800be56:	4770      	bx	lr

0800be58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	bc80      	pop	{r7}
 800be68:	4770      	bx	lr

0800be6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b083      	sub	sp, #12
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be72:	bf00      	nop
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	bc80      	pop	{r7}
 800be7a:	4770      	bx	lr

0800be7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	bc80      	pop	{r7}
 800be8c:	4770      	bx	lr
	...

0800be90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a33      	ldr	r2, [pc, #204]	; (800bf70 <TIM_Base_SetConfig+0xe0>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d013      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a32      	ldr	r2, [pc, #200]	; (800bf74 <TIM_Base_SetConfig+0xe4>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d00f      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beb6:	d00b      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a2f      	ldr	r2, [pc, #188]	; (800bf78 <TIM_Base_SetConfig+0xe8>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d007      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a2e      	ldr	r2, [pc, #184]	; (800bf7c <TIM_Base_SetConfig+0xec>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d003      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a2d      	ldr	r2, [pc, #180]	; (800bf80 <TIM_Base_SetConfig+0xf0>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d108      	bne.n	800bee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	4313      	orrs	r3, r2
 800bee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a22      	ldr	r2, [pc, #136]	; (800bf70 <TIM_Base_SetConfig+0xe0>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d013      	beq.n	800bf12 <TIM_Base_SetConfig+0x82>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a21      	ldr	r2, [pc, #132]	; (800bf74 <TIM_Base_SetConfig+0xe4>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00f      	beq.n	800bf12 <TIM_Base_SetConfig+0x82>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef8:	d00b      	beq.n	800bf12 <TIM_Base_SetConfig+0x82>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a1e      	ldr	r2, [pc, #120]	; (800bf78 <TIM_Base_SetConfig+0xe8>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d007      	beq.n	800bf12 <TIM_Base_SetConfig+0x82>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a1d      	ldr	r2, [pc, #116]	; (800bf7c <TIM_Base_SetConfig+0xec>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d003      	beq.n	800bf12 <TIM_Base_SetConfig+0x82>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a1c      	ldr	r2, [pc, #112]	; (800bf80 <TIM_Base_SetConfig+0xf0>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d108      	bne.n	800bf24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	4313      	orrs	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a09      	ldr	r2, [pc, #36]	; (800bf70 <TIM_Base_SetConfig+0xe0>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d003      	beq.n	800bf58 <TIM_Base_SetConfig+0xc8>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a08      	ldr	r2, [pc, #32]	; (800bf74 <TIM_Base_SetConfig+0xe4>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d103      	bne.n	800bf60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	691a      	ldr	r2, [r3, #16]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	615a      	str	r2, [r3, #20]
}
 800bf66:	bf00      	nop
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bc80      	pop	{r7}
 800bf6e:	4770      	bx	lr
 800bf70:	40012c00 	.word	0x40012c00
 800bf74:	40013400 	.word	0x40013400
 800bf78:	40000400 	.word	0x40000400
 800bf7c:	40000800 	.word	0x40000800
 800bf80:	40000c00 	.word	0x40000c00

0800bf84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	f023 0201 	bic.w	r2, r3, #1
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	f023 030a 	bic.w	r3, r3, #10
 800bfc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	621a      	str	r2, [r3, #32]
}
 800bfd6:	bf00      	nop
 800bfd8:	371c      	adds	r7, #28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bc80      	pop	{r7}
 800bfde:	4770      	bx	lr

0800bfe0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b087      	sub	sp, #28
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	f023 0210 	bic.w	r2, r3, #16
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c00a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	031b      	lsls	r3, r3, #12
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	4313      	orrs	r3, r2
 800c014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c01c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	4313      	orrs	r3, r2
 800c026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	697a      	ldr	r2, [r7, #20]
 800c032:	621a      	str	r2, [r3, #32]
}
 800c034:	bf00      	nop
 800c036:	371c      	adds	r7, #28
 800c038:	46bd      	mov	sp, r7
 800c03a:	bc80      	pop	{r7}
 800c03c:	4770      	bx	lr

0800c03e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c03e:	b480      	push	{r7}
 800c040:	b085      	sub	sp, #20
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	f043 0307 	orr.w	r3, r3, #7
 800c060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	609a      	str	r2, [r3, #8]
}
 800c068:	bf00      	nop
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr

0800c072 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c072:	b480      	push	{r7}
 800c074:	b087      	sub	sp, #28
 800c076:	af00      	add	r7, sp, #0
 800c078:	60f8      	str	r0, [r7, #12]
 800c07a:	60b9      	str	r1, [r7, #8]
 800c07c:	607a      	str	r2, [r7, #4]
 800c07e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c08c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	021a      	lsls	r2, r3, #8
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	431a      	orrs	r2, r3
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	4313      	orrs	r3, r2
 800c09a:	697a      	ldr	r2, [r7, #20]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	609a      	str	r2, [r3, #8]
}
 800c0a6:	bf00      	nop
 800c0a8:	371c      	adds	r7, #28
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bc80      	pop	{r7}
 800c0ae:	4770      	bx	lr

0800c0b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d101      	bne.n	800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	e050      	b.n	800c16a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a1b      	ldr	r2, [pc, #108]	; (800c174 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d018      	beq.n	800c13e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a19      	ldr	r2, [pc, #100]	; (800c178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d013      	beq.n	800c13e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c11e:	d00e      	beq.n	800c13e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a15      	ldr	r2, [pc, #84]	; (800c17c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d009      	beq.n	800c13e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a14      	ldr	r2, [pc, #80]	; (800c180 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d004      	beq.n	800c13e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a12      	ldr	r2, [pc, #72]	; (800c184 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d10c      	bne.n	800c158 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	bc80      	pop	{r7}
 800c172:	4770      	bx	lr
 800c174:	40012c00 	.word	0x40012c00
 800c178:	40013400 	.word	0x40013400
 800c17c:	40000400 	.word	0x40000400
 800c180:	40000800 	.word	0x40000800
 800c184:	40000c00 	.word	0x40000c00

0800c188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	bc80      	pop	{r7}
 800c198:	4770      	bx	lr

0800c19a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b083      	sub	sp, #12
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1a2:	bf00      	nop
 800c1a4:	370c      	adds	r7, #12
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bc80      	pop	{r7}
 800c1aa:	4770      	bx	lr

0800c1ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d101      	bne.n	800c1be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e042      	b.n	800c244 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d106      	bne.n	800c1d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7fc fe1a 	bl	8008e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2224      	movs	r2, #36	; 0x24
 800c1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fcb5 	bl	800cb60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	691a      	ldr	r2, [r3, #16]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	695a      	ldr	r2, [r3, #20]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68da      	ldr	r2, [r3, #12]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2220      	movs	r2, #32
 800c230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2220      	movs	r2, #32
 800c238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c260:	b2db      	uxtb	r3, r3
 800c262:	2b20      	cmp	r3, #32
 800c264:	d121      	bne.n	800c2aa <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <HAL_UART_Transmit_IT+0x26>
 800c26c:	88fb      	ldrh	r3, [r7, #6]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e01a      	b.n	800c2ac <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	88fa      	ldrh	r2, [r7, #6]
 800c280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	88fa      	ldrh	r2, [r7, #6]
 800c286:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2221      	movs	r2, #33	; 0x21
 800c292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68da      	ldr	r2, [r3, #12]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c2a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e000      	b.n	800c2ac <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c2aa:	2302      	movs	r3, #2
  }
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bc80      	pop	{r7}
 800c2b4:	4770      	bx	lr
	...

0800c2b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b0ba      	sub	sp, #232	; 0xe8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	695b      	ldr	r3, [r3, #20]
 800c2da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ee:	f003 030f 	and.w	r3, r3, #15
 800c2f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c2f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10f      	bne.n	800c31e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c302:	f003 0320 	and.w	r3, r3, #32
 800c306:	2b00      	cmp	r3, #0
 800c308:	d009      	beq.n	800c31e <HAL_UART_IRQHandler+0x66>
 800c30a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c30e:	f003 0320 	and.w	r3, r3, #32
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fb63 	bl	800c9e2 <UART_Receive_IT>
      return;
 800c31c:	e25b      	b.n	800c7d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c31e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 80de 	beq.w	800c4e4 <HAL_UART_IRQHandler+0x22c>
 800c328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c32c:	f003 0301 	and.w	r3, r3, #1
 800c330:	2b00      	cmp	r3, #0
 800c332:	d106      	bne.n	800c342 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c338:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 80d1 	beq.w	800c4e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c346:	f003 0301 	and.w	r3, r3, #1
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00b      	beq.n	800c366 <HAL_UART_IRQHandler+0xae>
 800c34e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c356:	2b00      	cmp	r3, #0
 800c358:	d005      	beq.n	800c366 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c35e:	f043 0201 	orr.w	r2, r3, #1
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c36a:	f003 0304 	and.w	r3, r3, #4
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00b      	beq.n	800c38a <HAL_UART_IRQHandler+0xd2>
 800c372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d005      	beq.n	800c38a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c382:	f043 0202 	orr.w	r2, r3, #2
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c38a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c38e:	f003 0302 	and.w	r3, r3, #2
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <HAL_UART_IRQHandler+0xf6>
 800c396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c39a:	f003 0301 	and.w	r3, r3, #1
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d005      	beq.n	800c3ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a6:	f043 0204 	orr.w	r2, r3, #4
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3b2:	f003 0308 	and.w	r3, r3, #8
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d011      	beq.n	800c3de <HAL_UART_IRQHandler+0x126>
 800c3ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3be:	f003 0320 	and.w	r3, r3, #32
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d105      	bne.n	800c3d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d005      	beq.n	800c3de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d6:	f043 0208 	orr.w	r2, r3, #8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 81f2 	beq.w	800c7cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ec:	f003 0320 	and.w	r3, r3, #32
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d008      	beq.n	800c406 <HAL_UART_IRQHandler+0x14e>
 800c3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3f8:	f003 0320 	and.w	r3, r3, #32
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 faee 	bl	800c9e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c410:	2b00      	cmp	r3, #0
 800c412:	bf14      	ite	ne
 800c414:	2301      	movne	r3, #1
 800c416:	2300      	moveq	r3, #0
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c422:	f003 0308 	and.w	r3, r3, #8
 800c426:	2b00      	cmp	r3, #0
 800c428:	d103      	bne.n	800c432 <HAL_UART_IRQHandler+0x17a>
 800c42a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d04f      	beq.n	800c4d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f9f8 	bl	800c828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c442:	2b00      	cmp	r3, #0
 800c444:	d041      	beq.n	800c4ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	3314      	adds	r3, #20
 800c44c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c45c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3314      	adds	r3, #20
 800c46e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c472:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c47e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c482:	e841 2300 	strex	r3, r2, [r1]
 800c486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c48a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1d9      	bne.n	800c446 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c496:	2b00      	cmp	r3, #0
 800c498:	d013      	beq.n	800c4c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49e:	4a7e      	ldr	r2, [pc, #504]	; (800c698 <HAL_UART_IRQHandler+0x3e0>)
 800c4a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fd f86c 	bl	8009584 <HAL_DMA_Abort_IT>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d016      	beq.n	800c4e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c4bc:	4610      	mov	r0, r2
 800c4be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c0:	e00e      	b.n	800c4e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f99c 	bl	800c800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c8:	e00a      	b.n	800c4e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f998 	bl	800c800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d0:	e006      	b.n	800c4e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f994 	bl	800c800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c4de:	e175      	b.n	800c7cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e0:	bf00      	nop
    return;
 800c4e2:	e173      	b.n	800c7cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	f040 814f 	bne.w	800c78c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f2:	f003 0310 	and.w	r3, r3, #16
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 8148 	beq.w	800c78c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c500:	f003 0310 	and.w	r3, r3, #16
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 8141 	beq.w	800c78c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c50a:	2300      	movs	r3, #0
 800c50c:	60bb      	str	r3, [r7, #8]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	60bb      	str	r3, [r7, #8]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	60bb      	str	r3, [r7, #8]
 800c51e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 80b6 	beq.w	800c69c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c53c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c540:	2b00      	cmp	r3, #0
 800c542:	f000 8145 	beq.w	800c7d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c54a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c54e:	429a      	cmp	r2, r3
 800c550:	f080 813e 	bcs.w	800c7d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c55a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	2b20      	cmp	r3, #32
 800c564:	f000 8088 	beq.w	800c678 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	330c      	adds	r3, #12
 800c56e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c576:	e853 3f00 	ldrex	r3, [r3]
 800c57a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c57e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c586:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	330c      	adds	r3, #12
 800c590:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c594:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5a4:	e841 2300 	strex	r3, r2, [r1]
 800c5a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1d9      	bne.n	800c568 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3314      	adds	r3, #20
 800c5ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5be:	e853 3f00 	ldrex	r3, [r3]
 800c5c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5c6:	f023 0301 	bic.w	r3, r3, #1
 800c5ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3314      	adds	r3, #20
 800c5d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5e4:	e841 2300 	strex	r3, r2, [r1]
 800c5e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e1      	bne.n	800c5b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	3314      	adds	r3, #20
 800c5f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5fa:	e853 3f00 	ldrex	r3, [r3]
 800c5fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3314      	adds	r3, #20
 800c610:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c614:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c616:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c618:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c61a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c61c:	e841 2300 	strex	r3, r2, [r1]
 800c620:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1e3      	bne.n	800c5f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2220      	movs	r2, #32
 800c62c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	330c      	adds	r3, #12
 800c63c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c640:	e853 3f00 	ldrex	r3, [r3]
 800c644:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c648:	f023 0310 	bic.w	r3, r3, #16
 800c64c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	330c      	adds	r3, #12
 800c656:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c65a:	65ba      	str	r2, [r7, #88]	; 0x58
 800c65c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c662:	e841 2300 	strex	r3, r2, [r1]
 800c666:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1e3      	bne.n	800c636 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c672:	4618      	mov	r0, r3
 800c674:	f7fc ff4b 	bl	800950e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2202      	movs	r2, #2
 800c67c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c686:	b29b      	uxth	r3, r3
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f8bf 	bl	800c812 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c694:	e09c      	b.n	800c7d0 <HAL_UART_IRQHandler+0x518>
 800c696:	bf00      	nop
 800c698:	0800c8ed 	.word	0x0800c8ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 808e 	beq.w	800c7d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c6b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 8089 	beq.w	800c7d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	330c      	adds	r3, #12
 800c6c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6cc:	e853 3f00 	ldrex	r3, [r3]
 800c6d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	330c      	adds	r3, #12
 800c6e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6e6:	647a      	str	r2, [r7, #68]	; 0x44
 800c6e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ee:	e841 2300 	strex	r3, r2, [r1]
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1e3      	bne.n	800c6c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3314      	adds	r3, #20
 800c700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c704:	e853 3f00 	ldrex	r3, [r3]
 800c708:	623b      	str	r3, [r7, #32]
   return(result);
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	f023 0301 	bic.w	r3, r3, #1
 800c710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	3314      	adds	r3, #20
 800c71a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c71e:	633a      	str	r2, [r7, #48]	; 0x30
 800c720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e3      	bne.n	800c6fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2220      	movs	r2, #32
 800c736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	330c      	adds	r3, #12
 800c746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	e853 3f00 	ldrex	r3, [r3]
 800c74e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f023 0310 	bic.w	r3, r3, #16
 800c756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	330c      	adds	r3, #12
 800c760:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c764:	61fa      	str	r2, [r7, #28]
 800c766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c768:	69b9      	ldr	r1, [r7, #24]
 800c76a:	69fa      	ldr	r2, [r7, #28]
 800c76c:	e841 2300 	strex	r3, r2, [r1]
 800c770:	617b      	str	r3, [r7, #20]
   return(result);
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1e3      	bne.n	800c740 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2202      	movs	r2, #2
 800c77c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c77e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f844 	bl	800c812 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c78a:	e023      	b.n	800c7d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c794:	2b00      	cmp	r3, #0
 800c796:	d009      	beq.n	800c7ac <HAL_UART_IRQHandler+0x4f4>
 800c798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c79c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d003      	beq.n	800c7ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f8b5 	bl	800c914 <UART_Transmit_IT>
    return;
 800c7aa:	e014      	b.n	800c7d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00e      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x51e>
 800c7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d008      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f8f4 	bl	800c9b2 <UART_EndTransmit_IT>
    return;
 800c7ca:	e004      	b.n	800c7d6 <HAL_UART_IRQHandler+0x51e>
    return;
 800c7cc:	bf00      	nop
 800c7ce:	e002      	b.n	800c7d6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c7d0:	bf00      	nop
 800c7d2:	e000      	b.n	800c7d6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c7d4:	bf00      	nop
  }
}
 800c7d6:	37e8      	adds	r7, #232	; 0xe8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bc80      	pop	{r7}
 800c7ec:	4770      	bx	lr

0800c7ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7ee:	b480      	push	{r7}
 800c7f0:	b083      	sub	sp, #12
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c7f6:	bf00      	nop
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bc80      	pop	{r7}
 800c7fe:	4770      	bx	lr

0800c800 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c808:	bf00      	nop
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bc80      	pop	{r7}
 800c810:	4770      	bx	lr

0800c812 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c812:	b480      	push	{r7}
 800c814:	b083      	sub	sp, #12
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	460b      	mov	r3, r1
 800c81c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c81e:	bf00      	nop
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	bc80      	pop	{r7}
 800c826:	4770      	bx	lr

0800c828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c828:	b480      	push	{r7}
 800c82a:	b095      	sub	sp, #84	; 0x54
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	330c      	adds	r3, #12
 800c836:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c83a:	e853 3f00 	ldrex	r3, [r3]
 800c83e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c846:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	330c      	adds	r3, #12
 800c84e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c850:	643a      	str	r2, [r7, #64]	; 0x40
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c854:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c858:	e841 2300 	strex	r3, r2, [r1]
 800c85c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1e5      	bne.n	800c830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	3314      	adds	r3, #20
 800c86a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	e853 3f00 	ldrex	r3, [r3]
 800c872:	61fb      	str	r3, [r7, #28]
   return(result);
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	f023 0301 	bic.w	r3, r3, #1
 800c87a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	3314      	adds	r3, #20
 800c882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c884:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c88a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c88c:	e841 2300 	strex	r3, r2, [r1]
 800c890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e5      	bne.n	800c864 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d119      	bne.n	800c8d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	e853 3f00 	ldrex	r3, [r3]
 800c8ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	f023 0310 	bic.w	r3, r3, #16
 800c8b6:	647b      	str	r3, [r7, #68]	; 0x44
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	330c      	adds	r3, #12
 800c8be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8c0:	61ba      	str	r2, [r7, #24]
 800c8c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c4:	6979      	ldr	r1, [r7, #20]
 800c8c6:	69ba      	ldr	r2, [r7, #24]
 800c8c8:	e841 2300 	strex	r3, r2, [r1]
 800c8cc:	613b      	str	r3, [r7, #16]
   return(result);
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1e5      	bne.n	800c8a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2220      	movs	r2, #32
 800c8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c8e2:	bf00      	nop
 800c8e4:	3754      	adds	r7, #84	; 0x54
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bc80      	pop	{r7}
 800c8ea:	4770      	bx	lr

0800c8ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f7ff ff7a 	bl	800c800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c90c:	bf00      	nop
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b21      	cmp	r3, #33	; 0x21
 800c926:	d13e      	bne.n	800c9a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c930:	d114      	bne.n	800c95c <UART_Transmit_IT+0x48>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d110      	bne.n	800c95c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	461a      	mov	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c94e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	1c9a      	adds	r2, r3, #2
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	621a      	str	r2, [r3, #32]
 800c95a:	e008      	b.n	800c96e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	1c59      	adds	r1, r3, #1
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	6211      	str	r1, [r2, #32]
 800c966:	781a      	ldrb	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c972:	b29b      	uxth	r3, r3
 800c974:	3b01      	subs	r3, #1
 800c976:	b29b      	uxth	r3, r3
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	4619      	mov	r1, r3
 800c97c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10f      	bne.n	800c9a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c990:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e000      	b.n	800c9a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9a6:	2302      	movs	r3, #2
  }
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bc80      	pop	{r7}
 800c9b0:	4770      	bx	lr

0800c9b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68da      	ldr	r2, [r3, #12]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff ff02 	bl	800c7dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b08c      	sub	sp, #48	; 0x30
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	2b22      	cmp	r3, #34	; 0x22
 800c9f4:	f040 80ae 	bne.w	800cb54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca00:	d117      	bne.n	800ca32 <UART_Receive_IT+0x50>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d113      	bne.n	800ca32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2a:	1c9a      	adds	r2, r3, #2
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	629a      	str	r2, [r3, #40]	; 0x28
 800ca30:	e026      	b.n	800ca80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca44:	d007      	beq.n	800ca56 <UART_Receive_IT+0x74>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10a      	bne.n	800ca64 <UART_Receive_IT+0x82>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	e008      	b.n	800ca76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7a:	1c5a      	adds	r2, r3, #1
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	3b01      	subs	r3, #1
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d15d      	bne.n	800cb50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68da      	ldr	r2, [r3, #12]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f022 0220 	bic.w	r2, r2, #32
 800caa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68da      	ldr	r2, [r3, #12]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	695a      	ldr	r2, [r3, #20]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f022 0201 	bic.w	r2, r2, #1
 800cac2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2220      	movs	r2, #32
 800cac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d135      	bne.n	800cb46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	330c      	adds	r3, #12
 800cae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	e853 3f00 	ldrex	r3, [r3]
 800caee:	613b      	str	r3, [r7, #16]
   return(result);
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	f023 0310 	bic.w	r3, r3, #16
 800caf6:	627b      	str	r3, [r7, #36]	; 0x24
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	330c      	adds	r3, #12
 800cafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb00:	623a      	str	r2, [r7, #32]
 800cb02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb04:	69f9      	ldr	r1, [r7, #28]
 800cb06:	6a3a      	ldr	r2, [r7, #32]
 800cb08:	e841 2300 	strex	r3, r2, [r1]
 800cb0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1e5      	bne.n	800cae0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 0310 	and.w	r3, r3, #16
 800cb1e:	2b10      	cmp	r3, #16
 800cb20:	d10a      	bne.n	800cb38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb22:	2300      	movs	r3, #0
 800cb24:	60fb      	str	r3, [r7, #12]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7ff fe67 	bl	800c812 <HAL_UARTEx_RxEventCallback>
 800cb44:	e002      	b.n	800cb4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff fe51 	bl	800c7ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e002      	b.n	800cb56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	e000      	b.n	800cb56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb54:	2302      	movs	r3, #2
  }
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3730      	adds	r7, #48	; 0x30
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
	...

0800cb60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	689a      	ldr	r2, [r3, #8]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	431a      	orrs	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	695b      	ldr	r3, [r3, #20]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cb9a:	f023 030c 	bic.w	r3, r3, #12
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	6812      	ldr	r2, [r2, #0]
 800cba2:	68b9      	ldr	r1, [r7, #8]
 800cba4:	430b      	orrs	r3, r1
 800cba6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	695b      	ldr	r3, [r3, #20]
 800cbae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	699a      	ldr	r2, [r3, #24]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a2c      	ldr	r2, [pc, #176]	; (800cc74 <UART_SetConfig+0x114>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d103      	bne.n	800cbd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cbc8:	f7fe fe8c 	bl	800b8e4 <HAL_RCC_GetPCLK2Freq>
 800cbcc:	60f8      	str	r0, [r7, #12]
 800cbce:	e002      	b.n	800cbd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cbd0:	f7fe fe74 	bl	800b8bc <HAL_RCC_GetPCLK1Freq>
 800cbd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	4613      	mov	r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	009a      	lsls	r2, r3, #2
 800cbe0:	441a      	add	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbec:	4a22      	ldr	r2, [pc, #136]	; (800cc78 <UART_SetConfig+0x118>)
 800cbee:	fba2 2303 	umull	r2, r3, r2, r3
 800cbf2:	095b      	lsrs	r3, r3, #5
 800cbf4:	0119      	lsls	r1, r3, #4
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	009a      	lsls	r2, r3, #2
 800cc00:	441a      	add	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc0c:	4b1a      	ldr	r3, [pc, #104]	; (800cc78 <UART_SetConfig+0x118>)
 800cc0e:	fba3 0302 	umull	r0, r3, r3, r2
 800cc12:	095b      	lsrs	r3, r3, #5
 800cc14:	2064      	movs	r0, #100	; 0x64
 800cc16:	fb00 f303 	mul.w	r3, r0, r3
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	011b      	lsls	r3, r3, #4
 800cc1e:	3332      	adds	r3, #50	; 0x32
 800cc20:	4a15      	ldr	r2, [pc, #84]	; (800cc78 <UART_SetConfig+0x118>)
 800cc22:	fba2 2303 	umull	r2, r3, r2, r3
 800cc26:	095b      	lsrs	r3, r3, #5
 800cc28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc2c:	4419      	add	r1, r3
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	4613      	mov	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	009a      	lsls	r2, r3, #2
 800cc38:	441a      	add	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc44:	4b0c      	ldr	r3, [pc, #48]	; (800cc78 <UART_SetConfig+0x118>)
 800cc46:	fba3 0302 	umull	r0, r3, r3, r2
 800cc4a:	095b      	lsrs	r3, r3, #5
 800cc4c:	2064      	movs	r0, #100	; 0x64
 800cc4e:	fb00 f303 	mul.w	r3, r0, r3
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	011b      	lsls	r3, r3, #4
 800cc56:	3332      	adds	r3, #50	; 0x32
 800cc58:	4a07      	ldr	r2, [pc, #28]	; (800cc78 <UART_SetConfig+0x118>)
 800cc5a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc5e:	095b      	lsrs	r3, r3, #5
 800cc60:	f003 020f 	and.w	r2, r3, #15
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	440a      	add	r2, r1
 800cc6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cc6c:	bf00      	nop
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	40013800 	.word	0x40013800
 800cc78:	51eb851f 	.word	0x51eb851f

0800cc7c <__itoa>:
 800cc7c:	1e93      	subs	r3, r2, #2
 800cc7e:	2b22      	cmp	r3, #34	; 0x22
 800cc80:	b510      	push	{r4, lr}
 800cc82:	460c      	mov	r4, r1
 800cc84:	d904      	bls.n	800cc90 <__itoa+0x14>
 800cc86:	2300      	movs	r3, #0
 800cc88:	461c      	mov	r4, r3
 800cc8a:	700b      	strb	r3, [r1, #0]
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	bd10      	pop	{r4, pc}
 800cc90:	2a0a      	cmp	r2, #10
 800cc92:	d109      	bne.n	800cca8 <__itoa+0x2c>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	da07      	bge.n	800cca8 <__itoa+0x2c>
 800cc98:	232d      	movs	r3, #45	; 0x2d
 800cc9a:	700b      	strb	r3, [r1, #0]
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	4240      	negs	r0, r0
 800cca0:	4421      	add	r1, r4
 800cca2:	f000 f8b9 	bl	800ce18 <__utoa>
 800cca6:	e7f1      	b.n	800cc8c <__itoa+0x10>
 800cca8:	2100      	movs	r1, #0
 800ccaa:	e7f9      	b.n	800cca0 <__itoa+0x24>

0800ccac <itoa>:
 800ccac:	f7ff bfe6 	b.w	800cc7c <__itoa>

0800ccb0 <malloc>:
 800ccb0:	4b02      	ldr	r3, [pc, #8]	; (800ccbc <malloc+0xc>)
 800ccb2:	4601      	mov	r1, r0
 800ccb4:	6818      	ldr	r0, [r3, #0]
 800ccb6:	f000 b823 	b.w	800cd00 <_malloc_r>
 800ccba:	bf00      	nop
 800ccbc:	20000a10 	.word	0x20000a10

0800ccc0 <sbrk_aligned>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	4e0e      	ldr	r6, [pc, #56]	; (800ccfc <sbrk_aligned+0x3c>)
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	6831      	ldr	r1, [r6, #0]
 800ccc8:	4605      	mov	r5, r0
 800ccca:	b911      	cbnz	r1, 800ccd2 <sbrk_aligned+0x12>
 800cccc:	f000 f91e 	bl	800cf0c <_sbrk_r>
 800ccd0:	6030      	str	r0, [r6, #0]
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 f919 	bl	800cf0c <_sbrk_r>
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	d00a      	beq.n	800ccf4 <sbrk_aligned+0x34>
 800ccde:	1cc4      	adds	r4, r0, #3
 800cce0:	f024 0403 	bic.w	r4, r4, #3
 800cce4:	42a0      	cmp	r0, r4
 800cce6:	d007      	beq.n	800ccf8 <sbrk_aligned+0x38>
 800cce8:	1a21      	subs	r1, r4, r0
 800ccea:	4628      	mov	r0, r5
 800ccec:	f000 f90e 	bl	800cf0c <_sbrk_r>
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	d101      	bne.n	800ccf8 <sbrk_aligned+0x38>
 800ccf4:	f04f 34ff 	mov.w	r4, #4294967295
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	20000eac 	.word	0x20000eac

0800cd00 <_malloc_r>:
 800cd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd04:	1ccd      	adds	r5, r1, #3
 800cd06:	f025 0503 	bic.w	r5, r5, #3
 800cd0a:	3508      	adds	r5, #8
 800cd0c:	2d0c      	cmp	r5, #12
 800cd0e:	bf38      	it	cc
 800cd10:	250c      	movcc	r5, #12
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	4607      	mov	r7, r0
 800cd16:	db01      	blt.n	800cd1c <_malloc_r+0x1c>
 800cd18:	42a9      	cmp	r1, r5
 800cd1a:	d905      	bls.n	800cd28 <_malloc_r+0x28>
 800cd1c:	230c      	movs	r3, #12
 800cd1e:	2600      	movs	r6, #0
 800cd20:	603b      	str	r3, [r7, #0]
 800cd22:	4630      	mov	r0, r6
 800cd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cdfc <_malloc_r+0xfc>
 800cd2c:	f000 f868 	bl	800ce00 <__malloc_lock>
 800cd30:	f8d8 3000 	ldr.w	r3, [r8]
 800cd34:	461c      	mov	r4, r3
 800cd36:	bb5c      	cbnz	r4, 800cd90 <_malloc_r+0x90>
 800cd38:	4629      	mov	r1, r5
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	f7ff ffc0 	bl	800ccc0 <sbrk_aligned>
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	4604      	mov	r4, r0
 800cd44:	d155      	bne.n	800cdf2 <_malloc_r+0xf2>
 800cd46:	f8d8 4000 	ldr.w	r4, [r8]
 800cd4a:	4626      	mov	r6, r4
 800cd4c:	2e00      	cmp	r6, #0
 800cd4e:	d145      	bne.n	800cddc <_malloc_r+0xdc>
 800cd50:	2c00      	cmp	r4, #0
 800cd52:	d048      	beq.n	800cde6 <_malloc_r+0xe6>
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	4631      	mov	r1, r6
 800cd58:	4638      	mov	r0, r7
 800cd5a:	eb04 0903 	add.w	r9, r4, r3
 800cd5e:	f000 f8d5 	bl	800cf0c <_sbrk_r>
 800cd62:	4581      	cmp	r9, r0
 800cd64:	d13f      	bne.n	800cde6 <_malloc_r+0xe6>
 800cd66:	6821      	ldr	r1, [r4, #0]
 800cd68:	4638      	mov	r0, r7
 800cd6a:	1a6d      	subs	r5, r5, r1
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	f7ff ffa7 	bl	800ccc0 <sbrk_aligned>
 800cd72:	3001      	adds	r0, #1
 800cd74:	d037      	beq.n	800cde6 <_malloc_r+0xe6>
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	442b      	add	r3, r5
 800cd7a:	6023      	str	r3, [r4, #0]
 800cd7c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d038      	beq.n	800cdf6 <_malloc_r+0xf6>
 800cd84:	685a      	ldr	r2, [r3, #4]
 800cd86:	42a2      	cmp	r2, r4
 800cd88:	d12b      	bne.n	800cde2 <_malloc_r+0xe2>
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	605a      	str	r2, [r3, #4]
 800cd8e:	e00f      	b.n	800cdb0 <_malloc_r+0xb0>
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	1b52      	subs	r2, r2, r5
 800cd94:	d41f      	bmi.n	800cdd6 <_malloc_r+0xd6>
 800cd96:	2a0b      	cmp	r2, #11
 800cd98:	d917      	bls.n	800cdca <_malloc_r+0xca>
 800cd9a:	1961      	adds	r1, r4, r5
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	6025      	str	r5, [r4, #0]
 800cda0:	bf18      	it	ne
 800cda2:	6059      	strne	r1, [r3, #4]
 800cda4:	6863      	ldr	r3, [r4, #4]
 800cda6:	bf08      	it	eq
 800cda8:	f8c8 1000 	streq.w	r1, [r8]
 800cdac:	5162      	str	r2, [r4, r5]
 800cdae:	604b      	str	r3, [r1, #4]
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	f104 060b 	add.w	r6, r4, #11
 800cdb6:	f000 f829 	bl	800ce0c <__malloc_unlock>
 800cdba:	f026 0607 	bic.w	r6, r6, #7
 800cdbe:	1d23      	adds	r3, r4, #4
 800cdc0:	1af2      	subs	r2, r6, r3
 800cdc2:	d0ae      	beq.n	800cd22 <_malloc_r+0x22>
 800cdc4:	1b9b      	subs	r3, r3, r6
 800cdc6:	50a3      	str	r3, [r4, r2]
 800cdc8:	e7ab      	b.n	800cd22 <_malloc_r+0x22>
 800cdca:	42a3      	cmp	r3, r4
 800cdcc:	6862      	ldr	r2, [r4, #4]
 800cdce:	d1dd      	bne.n	800cd8c <_malloc_r+0x8c>
 800cdd0:	f8c8 2000 	str.w	r2, [r8]
 800cdd4:	e7ec      	b.n	800cdb0 <_malloc_r+0xb0>
 800cdd6:	4623      	mov	r3, r4
 800cdd8:	6864      	ldr	r4, [r4, #4]
 800cdda:	e7ac      	b.n	800cd36 <_malloc_r+0x36>
 800cddc:	4634      	mov	r4, r6
 800cdde:	6876      	ldr	r6, [r6, #4]
 800cde0:	e7b4      	b.n	800cd4c <_malloc_r+0x4c>
 800cde2:	4613      	mov	r3, r2
 800cde4:	e7cc      	b.n	800cd80 <_malloc_r+0x80>
 800cde6:	230c      	movs	r3, #12
 800cde8:	4638      	mov	r0, r7
 800cdea:	603b      	str	r3, [r7, #0]
 800cdec:	f000 f80e 	bl	800ce0c <__malloc_unlock>
 800cdf0:	e797      	b.n	800cd22 <_malloc_r+0x22>
 800cdf2:	6025      	str	r5, [r4, #0]
 800cdf4:	e7dc      	b.n	800cdb0 <_malloc_r+0xb0>
 800cdf6:	605b      	str	r3, [r3, #4]
 800cdf8:	deff      	udf	#255	; 0xff
 800cdfa:	bf00      	nop
 800cdfc:	20000ea8 	.word	0x20000ea8

0800ce00 <__malloc_lock>:
 800ce00:	4801      	ldr	r0, [pc, #4]	; (800ce08 <__malloc_lock+0x8>)
 800ce02:	f000 b8bd 	b.w	800cf80 <__retarget_lock_acquire_recursive>
 800ce06:	bf00      	nop
 800ce08:	20000fec 	.word	0x20000fec

0800ce0c <__malloc_unlock>:
 800ce0c:	4801      	ldr	r0, [pc, #4]	; (800ce14 <__malloc_unlock+0x8>)
 800ce0e:	f000 b8b8 	b.w	800cf82 <__retarget_lock_release_recursive>
 800ce12:	bf00      	nop
 800ce14:	20000fec 	.word	0x20000fec

0800ce18 <__utoa>:
 800ce18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce1a:	b08b      	sub	sp, #44	; 0x2c
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	466e      	mov	r6, sp
 800ce22:	4c1d      	ldr	r4, [pc, #116]	; (800ce98 <__utoa+0x80>)
 800ce24:	f104 0c20 	add.w	ip, r4, #32
 800ce28:	4637      	mov	r7, r6
 800ce2a:	6820      	ldr	r0, [r4, #0]
 800ce2c:	6861      	ldr	r1, [r4, #4]
 800ce2e:	3408      	adds	r4, #8
 800ce30:	c703      	stmia	r7!, {r0, r1}
 800ce32:	4564      	cmp	r4, ip
 800ce34:	463e      	mov	r6, r7
 800ce36:	d1f7      	bne.n	800ce28 <__utoa+0x10>
 800ce38:	7921      	ldrb	r1, [r4, #4]
 800ce3a:	6820      	ldr	r0, [r4, #0]
 800ce3c:	7139      	strb	r1, [r7, #4]
 800ce3e:	1e91      	subs	r1, r2, #2
 800ce40:	2922      	cmp	r1, #34	; 0x22
 800ce42:	6038      	str	r0, [r7, #0]
 800ce44:	f04f 0100 	mov.w	r1, #0
 800ce48:	d904      	bls.n	800ce54 <__utoa+0x3c>
 800ce4a:	7019      	strb	r1, [r3, #0]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4618      	mov	r0, r3
 800ce50:	b00b      	add	sp, #44	; 0x2c
 800ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce54:	1e58      	subs	r0, r3, #1
 800ce56:	4684      	mov	ip, r0
 800ce58:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce5c:	fb02 5617 	mls	r6, r2, r7, r5
 800ce60:	3628      	adds	r6, #40	; 0x28
 800ce62:	446e      	add	r6, sp
 800ce64:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ce68:	460c      	mov	r4, r1
 800ce6a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ce6e:	462e      	mov	r6, r5
 800ce70:	42b2      	cmp	r2, r6
 800ce72:	463d      	mov	r5, r7
 800ce74:	f101 0101 	add.w	r1, r1, #1
 800ce78:	d9ee      	bls.n	800ce58 <__utoa+0x40>
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	545a      	strb	r2, [r3, r1]
 800ce7e:	1919      	adds	r1, r3, r4
 800ce80:	1aa5      	subs	r5, r4, r2
 800ce82:	42aa      	cmp	r2, r5
 800ce84:	dae3      	bge.n	800ce4e <__utoa+0x36>
 800ce86:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ce8a:	780e      	ldrb	r6, [r1, #0]
 800ce8c:	3201      	adds	r2, #1
 800ce8e:	7006      	strb	r6, [r0, #0]
 800ce90:	f801 5901 	strb.w	r5, [r1], #-1
 800ce94:	e7f4      	b.n	800ce80 <__utoa+0x68>
 800ce96:	bf00      	nop
 800ce98:	0800e606 	.word	0x0800e606

0800ce9c <siprintf>:
 800ce9c:	b40e      	push	{r1, r2, r3}
 800ce9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cea2:	b500      	push	{lr}
 800cea4:	b09c      	sub	sp, #112	; 0x70
 800cea6:	ab1d      	add	r3, sp, #116	; 0x74
 800cea8:	9002      	str	r0, [sp, #8]
 800ceaa:	9006      	str	r0, [sp, #24]
 800ceac:	9107      	str	r1, [sp, #28]
 800ceae:	9104      	str	r1, [sp, #16]
 800ceb0:	4808      	ldr	r0, [pc, #32]	; (800ced4 <siprintf+0x38>)
 800ceb2:	4909      	ldr	r1, [pc, #36]	; (800ced8 <siprintf+0x3c>)
 800ceb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb8:	9105      	str	r1, [sp, #20]
 800ceba:	6800      	ldr	r0, [r0, #0]
 800cebc:	a902      	add	r1, sp, #8
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	f000 f918 	bl	800d0f4 <_svfiprintf_r>
 800cec4:	2200      	movs	r2, #0
 800cec6:	9b02      	ldr	r3, [sp, #8]
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	b01c      	add	sp, #112	; 0x70
 800cecc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ced0:	b003      	add	sp, #12
 800ced2:	4770      	bx	lr
 800ced4:	20000a10 	.word	0x20000a10
 800ced8:	ffff0208 	.word	0xffff0208

0800cedc <memset>:
 800cedc:	4603      	mov	r3, r0
 800cede:	4402      	add	r2, r0
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d100      	bne.n	800cee6 <memset+0xa>
 800cee4:	4770      	bx	lr
 800cee6:	f803 1b01 	strb.w	r1, [r3], #1
 800ceea:	e7f9      	b.n	800cee0 <memset+0x4>

0800ceec <strcat>:
 800ceec:	4602      	mov	r2, r0
 800ceee:	b510      	push	{r4, lr}
 800cef0:	7814      	ldrb	r4, [r2, #0]
 800cef2:	4613      	mov	r3, r2
 800cef4:	3201      	adds	r2, #1
 800cef6:	2c00      	cmp	r4, #0
 800cef8:	d1fa      	bne.n	800cef0 <strcat+0x4>
 800cefa:	3b01      	subs	r3, #1
 800cefc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf00:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf04:	2a00      	cmp	r2, #0
 800cf06:	d1f9      	bne.n	800cefc <strcat+0x10>
 800cf08:	bd10      	pop	{r4, pc}
	...

0800cf0c <_sbrk_r>:
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	2300      	movs	r3, #0
 800cf10:	4d05      	ldr	r5, [pc, #20]	; (800cf28 <_sbrk_r+0x1c>)
 800cf12:	4604      	mov	r4, r0
 800cf14:	4608      	mov	r0, r1
 800cf16:	602b      	str	r3, [r5, #0]
 800cf18:	f7fc f808 	bl	8008f2c <_sbrk>
 800cf1c:	1c43      	adds	r3, r0, #1
 800cf1e:	d102      	bne.n	800cf26 <_sbrk_r+0x1a>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b103      	cbz	r3, 800cf26 <_sbrk_r+0x1a>
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	20000fe8 	.word	0x20000fe8

0800cf2c <__errno>:
 800cf2c:	4b01      	ldr	r3, [pc, #4]	; (800cf34 <__errno+0x8>)
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	20000a10 	.word	0x20000a10

0800cf38 <__libc_init_array>:
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	2600      	movs	r6, #0
 800cf3c:	4d0c      	ldr	r5, [pc, #48]	; (800cf70 <__libc_init_array+0x38>)
 800cf3e:	4c0d      	ldr	r4, [pc, #52]	; (800cf74 <__libc_init_array+0x3c>)
 800cf40:	1b64      	subs	r4, r4, r5
 800cf42:	10a4      	asrs	r4, r4, #2
 800cf44:	42a6      	cmp	r6, r4
 800cf46:	d109      	bne.n	800cf5c <__libc_init_array+0x24>
 800cf48:	f000 fbc6 	bl	800d6d8 <_init>
 800cf4c:	2600      	movs	r6, #0
 800cf4e:	4d0a      	ldr	r5, [pc, #40]	; (800cf78 <__libc_init_array+0x40>)
 800cf50:	4c0a      	ldr	r4, [pc, #40]	; (800cf7c <__libc_init_array+0x44>)
 800cf52:	1b64      	subs	r4, r4, r5
 800cf54:	10a4      	asrs	r4, r4, #2
 800cf56:	42a6      	cmp	r6, r4
 800cf58:	d105      	bne.n	800cf66 <__libc_init_array+0x2e>
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}
 800cf5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf60:	4798      	blx	r3
 800cf62:	3601      	adds	r6, #1
 800cf64:	e7ee      	b.n	800cf44 <__libc_init_array+0xc>
 800cf66:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf6a:	4798      	blx	r3
 800cf6c:	3601      	adds	r6, #1
 800cf6e:	e7f2      	b.n	800cf56 <__libc_init_array+0x1e>
 800cf70:	0800e660 	.word	0x0800e660
 800cf74:	0800e660 	.word	0x0800e660
 800cf78:	0800e660 	.word	0x0800e660
 800cf7c:	0800e664 	.word	0x0800e664

0800cf80 <__retarget_lock_acquire_recursive>:
 800cf80:	4770      	bx	lr

0800cf82 <__retarget_lock_release_recursive>:
 800cf82:	4770      	bx	lr

0800cf84 <strcpy>:
 800cf84:	4603      	mov	r3, r0
 800cf86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf8a:	f803 2b01 	strb.w	r2, [r3], #1
 800cf8e:	2a00      	cmp	r2, #0
 800cf90:	d1f9      	bne.n	800cf86 <strcpy+0x2>
 800cf92:	4770      	bx	lr

0800cf94 <memcpy>:
 800cf94:	440a      	add	r2, r1
 800cf96:	4291      	cmp	r1, r2
 800cf98:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf9c:	d100      	bne.n	800cfa0 <memcpy+0xc>
 800cf9e:	4770      	bx	lr
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfa6:	4291      	cmp	r1, r2
 800cfa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfac:	d1f9      	bne.n	800cfa2 <memcpy+0xe>
 800cfae:	bd10      	pop	{r4, pc}

0800cfb0 <_free_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	2900      	cmp	r1, #0
 800cfb6:	d040      	beq.n	800d03a <_free_r+0x8a>
 800cfb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfbc:	1f0c      	subs	r4, r1, #4
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	bfb8      	it	lt
 800cfc2:	18e4      	addlt	r4, r4, r3
 800cfc4:	f7ff ff1c 	bl	800ce00 <__malloc_lock>
 800cfc8:	4a1c      	ldr	r2, [pc, #112]	; (800d03c <_free_r+0x8c>)
 800cfca:	6813      	ldr	r3, [r2, #0]
 800cfcc:	b933      	cbnz	r3, 800cfdc <_free_r+0x2c>
 800cfce:	6063      	str	r3, [r4, #4]
 800cfd0:	6014      	str	r4, [r2, #0]
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfd8:	f7ff bf18 	b.w	800ce0c <__malloc_unlock>
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d908      	bls.n	800cff2 <_free_r+0x42>
 800cfe0:	6820      	ldr	r0, [r4, #0]
 800cfe2:	1821      	adds	r1, r4, r0
 800cfe4:	428b      	cmp	r3, r1
 800cfe6:	bf01      	itttt	eq
 800cfe8:	6819      	ldreq	r1, [r3, #0]
 800cfea:	685b      	ldreq	r3, [r3, #4]
 800cfec:	1809      	addeq	r1, r1, r0
 800cfee:	6021      	streq	r1, [r4, #0]
 800cff0:	e7ed      	b.n	800cfce <_free_r+0x1e>
 800cff2:	461a      	mov	r2, r3
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	b10b      	cbz	r3, 800cffc <_free_r+0x4c>
 800cff8:	42a3      	cmp	r3, r4
 800cffa:	d9fa      	bls.n	800cff2 <_free_r+0x42>
 800cffc:	6811      	ldr	r1, [r2, #0]
 800cffe:	1850      	adds	r0, r2, r1
 800d000:	42a0      	cmp	r0, r4
 800d002:	d10b      	bne.n	800d01c <_free_r+0x6c>
 800d004:	6820      	ldr	r0, [r4, #0]
 800d006:	4401      	add	r1, r0
 800d008:	1850      	adds	r0, r2, r1
 800d00a:	4283      	cmp	r3, r0
 800d00c:	6011      	str	r1, [r2, #0]
 800d00e:	d1e0      	bne.n	800cfd2 <_free_r+0x22>
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	4408      	add	r0, r1
 800d016:	6010      	str	r0, [r2, #0]
 800d018:	6053      	str	r3, [r2, #4]
 800d01a:	e7da      	b.n	800cfd2 <_free_r+0x22>
 800d01c:	d902      	bls.n	800d024 <_free_r+0x74>
 800d01e:	230c      	movs	r3, #12
 800d020:	602b      	str	r3, [r5, #0]
 800d022:	e7d6      	b.n	800cfd2 <_free_r+0x22>
 800d024:	6820      	ldr	r0, [r4, #0]
 800d026:	1821      	adds	r1, r4, r0
 800d028:	428b      	cmp	r3, r1
 800d02a:	bf01      	itttt	eq
 800d02c:	6819      	ldreq	r1, [r3, #0]
 800d02e:	685b      	ldreq	r3, [r3, #4]
 800d030:	1809      	addeq	r1, r1, r0
 800d032:	6021      	streq	r1, [r4, #0]
 800d034:	6063      	str	r3, [r4, #4]
 800d036:	6054      	str	r4, [r2, #4]
 800d038:	e7cb      	b.n	800cfd2 <_free_r+0x22>
 800d03a:	bd38      	pop	{r3, r4, r5, pc}
 800d03c:	20000ea8 	.word	0x20000ea8

0800d040 <__ssputs_r>:
 800d040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	461f      	mov	r7, r3
 800d046:	688e      	ldr	r6, [r1, #8]
 800d048:	4682      	mov	sl, r0
 800d04a:	42be      	cmp	r6, r7
 800d04c:	460c      	mov	r4, r1
 800d04e:	4690      	mov	r8, r2
 800d050:	680b      	ldr	r3, [r1, #0]
 800d052:	d82c      	bhi.n	800d0ae <__ssputs_r+0x6e>
 800d054:	898a      	ldrh	r2, [r1, #12]
 800d056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d05a:	d026      	beq.n	800d0aa <__ssputs_r+0x6a>
 800d05c:	6965      	ldr	r5, [r4, #20]
 800d05e:	6909      	ldr	r1, [r1, #16]
 800d060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d064:	eba3 0901 	sub.w	r9, r3, r1
 800d068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d06c:	1c7b      	adds	r3, r7, #1
 800d06e:	444b      	add	r3, r9
 800d070:	106d      	asrs	r5, r5, #1
 800d072:	429d      	cmp	r5, r3
 800d074:	bf38      	it	cc
 800d076:	461d      	movcc	r5, r3
 800d078:	0553      	lsls	r3, r2, #21
 800d07a:	d527      	bpl.n	800d0cc <__ssputs_r+0x8c>
 800d07c:	4629      	mov	r1, r5
 800d07e:	f7ff fe3f 	bl	800cd00 <_malloc_r>
 800d082:	4606      	mov	r6, r0
 800d084:	b360      	cbz	r0, 800d0e0 <__ssputs_r+0xa0>
 800d086:	464a      	mov	r2, r9
 800d088:	6921      	ldr	r1, [r4, #16]
 800d08a:	f7ff ff83 	bl	800cf94 <memcpy>
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	6126      	str	r6, [r4, #16]
 800d09c:	444e      	add	r6, r9
 800d09e:	6026      	str	r6, [r4, #0]
 800d0a0:	463e      	mov	r6, r7
 800d0a2:	6165      	str	r5, [r4, #20]
 800d0a4:	eba5 0509 	sub.w	r5, r5, r9
 800d0a8:	60a5      	str	r5, [r4, #8]
 800d0aa:	42be      	cmp	r6, r7
 800d0ac:	d900      	bls.n	800d0b0 <__ssputs_r+0x70>
 800d0ae:	463e      	mov	r6, r7
 800d0b0:	4632      	mov	r2, r6
 800d0b2:	4641      	mov	r1, r8
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	f000 faaf 	bl	800d618 <memmove>
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	68a3      	ldr	r3, [r4, #8]
 800d0be:	1b9b      	subs	r3, r3, r6
 800d0c0:	60a3      	str	r3, [r4, #8]
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	4433      	add	r3, r6
 800d0c6:	6023      	str	r3, [r4, #0]
 800d0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0cc:	462a      	mov	r2, r5
 800d0ce:	f000 facb 	bl	800d668 <_realloc_r>
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d1e0      	bne.n	800d09a <__ssputs_r+0x5a>
 800d0d8:	4650      	mov	r0, sl
 800d0da:	6921      	ldr	r1, [r4, #16]
 800d0dc:	f7ff ff68 	bl	800cfb0 <_free_r>
 800d0e0:	230c      	movs	r3, #12
 800d0e2:	f8ca 3000 	str.w	r3, [sl]
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f0:	81a3      	strh	r3, [r4, #12]
 800d0f2:	e7e9      	b.n	800d0c8 <__ssputs_r+0x88>

0800d0f4 <_svfiprintf_r>:
 800d0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f8:	4698      	mov	r8, r3
 800d0fa:	898b      	ldrh	r3, [r1, #12]
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	061b      	lsls	r3, r3, #24
 800d100:	460d      	mov	r5, r1
 800d102:	4614      	mov	r4, r2
 800d104:	b09d      	sub	sp, #116	; 0x74
 800d106:	d50e      	bpl.n	800d126 <_svfiprintf_r+0x32>
 800d108:	690b      	ldr	r3, [r1, #16]
 800d10a:	b963      	cbnz	r3, 800d126 <_svfiprintf_r+0x32>
 800d10c:	2140      	movs	r1, #64	; 0x40
 800d10e:	f7ff fdf7 	bl	800cd00 <_malloc_r>
 800d112:	6028      	str	r0, [r5, #0]
 800d114:	6128      	str	r0, [r5, #16]
 800d116:	b920      	cbnz	r0, 800d122 <_svfiprintf_r+0x2e>
 800d118:	230c      	movs	r3, #12
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	e0d0      	b.n	800d2c4 <_svfiprintf_r+0x1d0>
 800d122:	2340      	movs	r3, #64	; 0x40
 800d124:	616b      	str	r3, [r5, #20]
 800d126:	2300      	movs	r3, #0
 800d128:	9309      	str	r3, [sp, #36]	; 0x24
 800d12a:	2320      	movs	r3, #32
 800d12c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d130:	2330      	movs	r3, #48	; 0x30
 800d132:	f04f 0901 	mov.w	r9, #1
 800d136:	f8cd 800c 	str.w	r8, [sp, #12]
 800d13a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d2dc <_svfiprintf_r+0x1e8>
 800d13e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d142:	4623      	mov	r3, r4
 800d144:	469a      	mov	sl, r3
 800d146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d14a:	b10a      	cbz	r2, 800d150 <_svfiprintf_r+0x5c>
 800d14c:	2a25      	cmp	r2, #37	; 0x25
 800d14e:	d1f9      	bne.n	800d144 <_svfiprintf_r+0x50>
 800d150:	ebba 0b04 	subs.w	fp, sl, r4
 800d154:	d00b      	beq.n	800d16e <_svfiprintf_r+0x7a>
 800d156:	465b      	mov	r3, fp
 800d158:	4622      	mov	r2, r4
 800d15a:	4629      	mov	r1, r5
 800d15c:	4638      	mov	r0, r7
 800d15e:	f7ff ff6f 	bl	800d040 <__ssputs_r>
 800d162:	3001      	adds	r0, #1
 800d164:	f000 80a9 	beq.w	800d2ba <_svfiprintf_r+0x1c6>
 800d168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d16a:	445a      	add	r2, fp
 800d16c:	9209      	str	r2, [sp, #36]	; 0x24
 800d16e:	f89a 3000 	ldrb.w	r3, [sl]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 80a1 	beq.w	800d2ba <_svfiprintf_r+0x1c6>
 800d178:	2300      	movs	r3, #0
 800d17a:	f04f 32ff 	mov.w	r2, #4294967295
 800d17e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d182:	f10a 0a01 	add.w	sl, sl, #1
 800d186:	9304      	str	r3, [sp, #16]
 800d188:	9307      	str	r3, [sp, #28]
 800d18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d18e:	931a      	str	r3, [sp, #104]	; 0x68
 800d190:	4654      	mov	r4, sl
 800d192:	2205      	movs	r2, #5
 800d194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d198:	4850      	ldr	r0, [pc, #320]	; (800d2dc <_svfiprintf_r+0x1e8>)
 800d19a:	f000 fa57 	bl	800d64c <memchr>
 800d19e:	9a04      	ldr	r2, [sp, #16]
 800d1a0:	b9d8      	cbnz	r0, 800d1da <_svfiprintf_r+0xe6>
 800d1a2:	06d0      	lsls	r0, r2, #27
 800d1a4:	bf44      	itt	mi
 800d1a6:	2320      	movmi	r3, #32
 800d1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ac:	0711      	lsls	r1, r2, #28
 800d1ae:	bf44      	itt	mi
 800d1b0:	232b      	movmi	r3, #43	; 0x2b
 800d1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d1bc:	d015      	beq.n	800d1ea <_svfiprintf_r+0xf6>
 800d1be:	4654      	mov	r4, sl
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	f04f 0c0a 	mov.w	ip, #10
 800d1c6:	9a07      	ldr	r2, [sp, #28]
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ce:	3b30      	subs	r3, #48	; 0x30
 800d1d0:	2b09      	cmp	r3, #9
 800d1d2:	d94d      	bls.n	800d270 <_svfiprintf_r+0x17c>
 800d1d4:	b1b0      	cbz	r0, 800d204 <_svfiprintf_r+0x110>
 800d1d6:	9207      	str	r2, [sp, #28]
 800d1d8:	e014      	b.n	800d204 <_svfiprintf_r+0x110>
 800d1da:	eba0 0308 	sub.w	r3, r0, r8
 800d1de:	fa09 f303 	lsl.w	r3, r9, r3
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	46a2      	mov	sl, r4
 800d1e6:	9304      	str	r3, [sp, #16]
 800d1e8:	e7d2      	b.n	800d190 <_svfiprintf_r+0x9c>
 800d1ea:	9b03      	ldr	r3, [sp, #12]
 800d1ec:	1d19      	adds	r1, r3, #4
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	9103      	str	r1, [sp, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	bfbb      	ittet	lt
 800d1f6:	425b      	neglt	r3, r3
 800d1f8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1fc:	9307      	strge	r3, [sp, #28]
 800d1fe:	9307      	strlt	r3, [sp, #28]
 800d200:	bfb8      	it	lt
 800d202:	9204      	strlt	r2, [sp, #16]
 800d204:	7823      	ldrb	r3, [r4, #0]
 800d206:	2b2e      	cmp	r3, #46	; 0x2e
 800d208:	d10c      	bne.n	800d224 <_svfiprintf_r+0x130>
 800d20a:	7863      	ldrb	r3, [r4, #1]
 800d20c:	2b2a      	cmp	r3, #42	; 0x2a
 800d20e:	d134      	bne.n	800d27a <_svfiprintf_r+0x186>
 800d210:	9b03      	ldr	r3, [sp, #12]
 800d212:	3402      	adds	r4, #2
 800d214:	1d1a      	adds	r2, r3, #4
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	9203      	str	r2, [sp, #12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	bfb8      	it	lt
 800d21e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d222:	9305      	str	r3, [sp, #20]
 800d224:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d2e0 <_svfiprintf_r+0x1ec>
 800d228:	2203      	movs	r2, #3
 800d22a:	4650      	mov	r0, sl
 800d22c:	7821      	ldrb	r1, [r4, #0]
 800d22e:	f000 fa0d 	bl	800d64c <memchr>
 800d232:	b138      	cbz	r0, 800d244 <_svfiprintf_r+0x150>
 800d234:	2240      	movs	r2, #64	; 0x40
 800d236:	9b04      	ldr	r3, [sp, #16]
 800d238:	eba0 000a 	sub.w	r0, r0, sl
 800d23c:	4082      	lsls	r2, r0
 800d23e:	4313      	orrs	r3, r2
 800d240:	3401      	adds	r4, #1
 800d242:	9304      	str	r3, [sp, #16]
 800d244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d248:	2206      	movs	r2, #6
 800d24a:	4826      	ldr	r0, [pc, #152]	; (800d2e4 <_svfiprintf_r+0x1f0>)
 800d24c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d250:	f000 f9fc 	bl	800d64c <memchr>
 800d254:	2800      	cmp	r0, #0
 800d256:	d038      	beq.n	800d2ca <_svfiprintf_r+0x1d6>
 800d258:	4b23      	ldr	r3, [pc, #140]	; (800d2e8 <_svfiprintf_r+0x1f4>)
 800d25a:	bb1b      	cbnz	r3, 800d2a4 <_svfiprintf_r+0x1b0>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	3307      	adds	r3, #7
 800d260:	f023 0307 	bic.w	r3, r3, #7
 800d264:	3308      	adds	r3, #8
 800d266:	9303      	str	r3, [sp, #12]
 800d268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26a:	4433      	add	r3, r6
 800d26c:	9309      	str	r3, [sp, #36]	; 0x24
 800d26e:	e768      	b.n	800d142 <_svfiprintf_r+0x4e>
 800d270:	460c      	mov	r4, r1
 800d272:	2001      	movs	r0, #1
 800d274:	fb0c 3202 	mla	r2, ip, r2, r3
 800d278:	e7a6      	b.n	800d1c8 <_svfiprintf_r+0xd4>
 800d27a:	2300      	movs	r3, #0
 800d27c:	f04f 0c0a 	mov.w	ip, #10
 800d280:	4619      	mov	r1, r3
 800d282:	3401      	adds	r4, #1
 800d284:	9305      	str	r3, [sp, #20]
 800d286:	4620      	mov	r0, r4
 800d288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d28c:	3a30      	subs	r2, #48	; 0x30
 800d28e:	2a09      	cmp	r2, #9
 800d290:	d903      	bls.n	800d29a <_svfiprintf_r+0x1a6>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0c6      	beq.n	800d224 <_svfiprintf_r+0x130>
 800d296:	9105      	str	r1, [sp, #20]
 800d298:	e7c4      	b.n	800d224 <_svfiprintf_r+0x130>
 800d29a:	4604      	mov	r4, r0
 800d29c:	2301      	movs	r3, #1
 800d29e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2a2:	e7f0      	b.n	800d286 <_svfiprintf_r+0x192>
 800d2a4:	ab03      	add	r3, sp, #12
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	462a      	mov	r2, r5
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <_svfiprintf_r+0x1f8>)
 800d2ae:	a904      	add	r1, sp, #16
 800d2b0:	f3af 8000 	nop.w
 800d2b4:	1c42      	adds	r2, r0, #1
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	d1d6      	bne.n	800d268 <_svfiprintf_r+0x174>
 800d2ba:	89ab      	ldrh	r3, [r5, #12]
 800d2bc:	065b      	lsls	r3, r3, #25
 800d2be:	f53f af2d 	bmi.w	800d11c <_svfiprintf_r+0x28>
 800d2c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2c4:	b01d      	add	sp, #116	; 0x74
 800d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ca:	ab03      	add	r3, sp, #12
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	462a      	mov	r2, r5
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	4b06      	ldr	r3, [pc, #24]	; (800d2ec <_svfiprintf_r+0x1f8>)
 800d2d4:	a904      	add	r1, sp, #16
 800d2d6:	f000 f87d 	bl	800d3d4 <_printf_i>
 800d2da:	e7eb      	b.n	800d2b4 <_svfiprintf_r+0x1c0>
 800d2dc:	0800e62b 	.word	0x0800e62b
 800d2e0:	0800e631 	.word	0x0800e631
 800d2e4:	0800e635 	.word	0x0800e635
 800d2e8:	00000000 	.word	0x00000000
 800d2ec:	0800d041 	.word	0x0800d041

0800d2f0 <_printf_common>:
 800d2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f4:	4616      	mov	r6, r2
 800d2f6:	4699      	mov	r9, r3
 800d2f8:	688a      	ldr	r2, [r1, #8]
 800d2fa:	690b      	ldr	r3, [r1, #16]
 800d2fc:	4607      	mov	r7, r0
 800d2fe:	4293      	cmp	r3, r2
 800d300:	bfb8      	it	lt
 800d302:	4613      	movlt	r3, r2
 800d304:	6033      	str	r3, [r6, #0]
 800d306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d30a:	460c      	mov	r4, r1
 800d30c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d310:	b10a      	cbz	r2, 800d316 <_printf_common+0x26>
 800d312:	3301      	adds	r3, #1
 800d314:	6033      	str	r3, [r6, #0]
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	0699      	lsls	r1, r3, #26
 800d31a:	bf42      	ittt	mi
 800d31c:	6833      	ldrmi	r3, [r6, #0]
 800d31e:	3302      	addmi	r3, #2
 800d320:	6033      	strmi	r3, [r6, #0]
 800d322:	6825      	ldr	r5, [r4, #0]
 800d324:	f015 0506 	ands.w	r5, r5, #6
 800d328:	d106      	bne.n	800d338 <_printf_common+0x48>
 800d32a:	f104 0a19 	add.w	sl, r4, #25
 800d32e:	68e3      	ldr	r3, [r4, #12]
 800d330:	6832      	ldr	r2, [r6, #0]
 800d332:	1a9b      	subs	r3, r3, r2
 800d334:	42ab      	cmp	r3, r5
 800d336:	dc2b      	bgt.n	800d390 <_printf_common+0xa0>
 800d338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d33c:	1e13      	subs	r3, r2, #0
 800d33e:	6822      	ldr	r2, [r4, #0]
 800d340:	bf18      	it	ne
 800d342:	2301      	movne	r3, #1
 800d344:	0692      	lsls	r2, r2, #26
 800d346:	d430      	bmi.n	800d3aa <_printf_common+0xba>
 800d348:	4649      	mov	r1, r9
 800d34a:	4638      	mov	r0, r7
 800d34c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d350:	47c0      	blx	r8
 800d352:	3001      	adds	r0, #1
 800d354:	d023      	beq.n	800d39e <_printf_common+0xae>
 800d356:	6823      	ldr	r3, [r4, #0]
 800d358:	6922      	ldr	r2, [r4, #16]
 800d35a:	f003 0306 	and.w	r3, r3, #6
 800d35e:	2b04      	cmp	r3, #4
 800d360:	bf14      	ite	ne
 800d362:	2500      	movne	r5, #0
 800d364:	6833      	ldreq	r3, [r6, #0]
 800d366:	f04f 0600 	mov.w	r6, #0
 800d36a:	bf08      	it	eq
 800d36c:	68e5      	ldreq	r5, [r4, #12]
 800d36e:	f104 041a 	add.w	r4, r4, #26
 800d372:	bf08      	it	eq
 800d374:	1aed      	subeq	r5, r5, r3
 800d376:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d37a:	bf08      	it	eq
 800d37c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d380:	4293      	cmp	r3, r2
 800d382:	bfc4      	itt	gt
 800d384:	1a9b      	subgt	r3, r3, r2
 800d386:	18ed      	addgt	r5, r5, r3
 800d388:	42b5      	cmp	r5, r6
 800d38a:	d11a      	bne.n	800d3c2 <_printf_common+0xd2>
 800d38c:	2000      	movs	r0, #0
 800d38e:	e008      	b.n	800d3a2 <_printf_common+0xb2>
 800d390:	2301      	movs	r3, #1
 800d392:	4652      	mov	r2, sl
 800d394:	4649      	mov	r1, r9
 800d396:	4638      	mov	r0, r7
 800d398:	47c0      	blx	r8
 800d39a:	3001      	adds	r0, #1
 800d39c:	d103      	bne.n	800d3a6 <_printf_common+0xb6>
 800d39e:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a6:	3501      	adds	r5, #1
 800d3a8:	e7c1      	b.n	800d32e <_printf_common+0x3e>
 800d3aa:	2030      	movs	r0, #48	; 0x30
 800d3ac:	18e1      	adds	r1, r4, r3
 800d3ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3b8:	4422      	add	r2, r4
 800d3ba:	3302      	adds	r3, #2
 800d3bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3c0:	e7c2      	b.n	800d348 <_printf_common+0x58>
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	4622      	mov	r2, r4
 800d3c6:	4649      	mov	r1, r9
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	47c0      	blx	r8
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	d0e6      	beq.n	800d39e <_printf_common+0xae>
 800d3d0:	3601      	adds	r6, #1
 800d3d2:	e7d9      	b.n	800d388 <_printf_common+0x98>

0800d3d4 <_printf_i>:
 800d3d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d8:	7e0f      	ldrb	r7, [r1, #24]
 800d3da:	4691      	mov	r9, r2
 800d3dc:	2f78      	cmp	r7, #120	; 0x78
 800d3de:	4680      	mov	r8, r0
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	469a      	mov	sl, r3
 800d3e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3ea:	d807      	bhi.n	800d3fc <_printf_i+0x28>
 800d3ec:	2f62      	cmp	r7, #98	; 0x62
 800d3ee:	d80a      	bhi.n	800d406 <_printf_i+0x32>
 800d3f0:	2f00      	cmp	r7, #0
 800d3f2:	f000 80d5 	beq.w	800d5a0 <_printf_i+0x1cc>
 800d3f6:	2f58      	cmp	r7, #88	; 0x58
 800d3f8:	f000 80c1 	beq.w	800d57e <_printf_i+0x1aa>
 800d3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d404:	e03a      	b.n	800d47c <_printf_i+0xa8>
 800d406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d40a:	2b15      	cmp	r3, #21
 800d40c:	d8f6      	bhi.n	800d3fc <_printf_i+0x28>
 800d40e:	a101      	add	r1, pc, #4	; (adr r1, 800d414 <_printf_i+0x40>)
 800d410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d414:	0800d46d 	.word	0x0800d46d
 800d418:	0800d481 	.word	0x0800d481
 800d41c:	0800d3fd 	.word	0x0800d3fd
 800d420:	0800d3fd 	.word	0x0800d3fd
 800d424:	0800d3fd 	.word	0x0800d3fd
 800d428:	0800d3fd 	.word	0x0800d3fd
 800d42c:	0800d481 	.word	0x0800d481
 800d430:	0800d3fd 	.word	0x0800d3fd
 800d434:	0800d3fd 	.word	0x0800d3fd
 800d438:	0800d3fd 	.word	0x0800d3fd
 800d43c:	0800d3fd 	.word	0x0800d3fd
 800d440:	0800d587 	.word	0x0800d587
 800d444:	0800d4ad 	.word	0x0800d4ad
 800d448:	0800d541 	.word	0x0800d541
 800d44c:	0800d3fd 	.word	0x0800d3fd
 800d450:	0800d3fd 	.word	0x0800d3fd
 800d454:	0800d5a9 	.word	0x0800d5a9
 800d458:	0800d3fd 	.word	0x0800d3fd
 800d45c:	0800d4ad 	.word	0x0800d4ad
 800d460:	0800d3fd 	.word	0x0800d3fd
 800d464:	0800d3fd 	.word	0x0800d3fd
 800d468:	0800d549 	.word	0x0800d549
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	1d1a      	adds	r2, r3, #4
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	602a      	str	r2, [r5, #0]
 800d474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d47c:	2301      	movs	r3, #1
 800d47e:	e0a0      	b.n	800d5c2 <_printf_i+0x1ee>
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	682b      	ldr	r3, [r5, #0]
 800d484:	0607      	lsls	r7, r0, #24
 800d486:	f103 0104 	add.w	r1, r3, #4
 800d48a:	6029      	str	r1, [r5, #0]
 800d48c:	d501      	bpl.n	800d492 <_printf_i+0xbe>
 800d48e:	681e      	ldr	r6, [r3, #0]
 800d490:	e003      	b.n	800d49a <_printf_i+0xc6>
 800d492:	0646      	lsls	r6, r0, #25
 800d494:	d5fb      	bpl.n	800d48e <_printf_i+0xba>
 800d496:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d49a:	2e00      	cmp	r6, #0
 800d49c:	da03      	bge.n	800d4a6 <_printf_i+0xd2>
 800d49e:	232d      	movs	r3, #45	; 0x2d
 800d4a0:	4276      	negs	r6, r6
 800d4a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4a6:	230a      	movs	r3, #10
 800d4a8:	4859      	ldr	r0, [pc, #356]	; (800d610 <_printf_i+0x23c>)
 800d4aa:	e012      	b.n	800d4d2 <_printf_i+0xfe>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	6820      	ldr	r0, [r4, #0]
 800d4b0:	1d19      	adds	r1, r3, #4
 800d4b2:	6029      	str	r1, [r5, #0]
 800d4b4:	0605      	lsls	r5, r0, #24
 800d4b6:	d501      	bpl.n	800d4bc <_printf_i+0xe8>
 800d4b8:	681e      	ldr	r6, [r3, #0]
 800d4ba:	e002      	b.n	800d4c2 <_printf_i+0xee>
 800d4bc:	0641      	lsls	r1, r0, #25
 800d4be:	d5fb      	bpl.n	800d4b8 <_printf_i+0xe4>
 800d4c0:	881e      	ldrh	r6, [r3, #0]
 800d4c2:	2f6f      	cmp	r7, #111	; 0x6f
 800d4c4:	bf0c      	ite	eq
 800d4c6:	2308      	moveq	r3, #8
 800d4c8:	230a      	movne	r3, #10
 800d4ca:	4851      	ldr	r0, [pc, #324]	; (800d610 <_printf_i+0x23c>)
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4d2:	6865      	ldr	r5, [r4, #4]
 800d4d4:	2d00      	cmp	r5, #0
 800d4d6:	bfa8      	it	ge
 800d4d8:	6821      	ldrge	r1, [r4, #0]
 800d4da:	60a5      	str	r5, [r4, #8]
 800d4dc:	bfa4      	itt	ge
 800d4de:	f021 0104 	bicge.w	r1, r1, #4
 800d4e2:	6021      	strge	r1, [r4, #0]
 800d4e4:	b90e      	cbnz	r6, 800d4ea <_printf_i+0x116>
 800d4e6:	2d00      	cmp	r5, #0
 800d4e8:	d04b      	beq.n	800d582 <_printf_i+0x1ae>
 800d4ea:	4615      	mov	r5, r2
 800d4ec:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4f0:	fb03 6711 	mls	r7, r3, r1, r6
 800d4f4:	5dc7      	ldrb	r7, [r0, r7]
 800d4f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4fa:	4637      	mov	r7, r6
 800d4fc:	42bb      	cmp	r3, r7
 800d4fe:	460e      	mov	r6, r1
 800d500:	d9f4      	bls.n	800d4ec <_printf_i+0x118>
 800d502:	2b08      	cmp	r3, #8
 800d504:	d10b      	bne.n	800d51e <_printf_i+0x14a>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	07de      	lsls	r6, r3, #31
 800d50a:	d508      	bpl.n	800d51e <_printf_i+0x14a>
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	6861      	ldr	r1, [r4, #4]
 800d510:	4299      	cmp	r1, r3
 800d512:	bfde      	ittt	le
 800d514:	2330      	movle	r3, #48	; 0x30
 800d516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d51a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d51e:	1b52      	subs	r2, r2, r5
 800d520:	6122      	str	r2, [r4, #16]
 800d522:	464b      	mov	r3, r9
 800d524:	4621      	mov	r1, r4
 800d526:	4640      	mov	r0, r8
 800d528:	f8cd a000 	str.w	sl, [sp]
 800d52c:	aa03      	add	r2, sp, #12
 800d52e:	f7ff fedf 	bl	800d2f0 <_printf_common>
 800d532:	3001      	adds	r0, #1
 800d534:	d14a      	bne.n	800d5cc <_printf_i+0x1f8>
 800d536:	f04f 30ff 	mov.w	r0, #4294967295
 800d53a:	b004      	add	sp, #16
 800d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d540:	6823      	ldr	r3, [r4, #0]
 800d542:	f043 0320 	orr.w	r3, r3, #32
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	2778      	movs	r7, #120	; 0x78
 800d54a:	4832      	ldr	r0, [pc, #200]	; (800d614 <_printf_i+0x240>)
 800d54c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d550:	6823      	ldr	r3, [r4, #0]
 800d552:	6829      	ldr	r1, [r5, #0]
 800d554:	061f      	lsls	r7, r3, #24
 800d556:	f851 6b04 	ldr.w	r6, [r1], #4
 800d55a:	d402      	bmi.n	800d562 <_printf_i+0x18e>
 800d55c:	065f      	lsls	r7, r3, #25
 800d55e:	bf48      	it	mi
 800d560:	b2b6      	uxthmi	r6, r6
 800d562:	07df      	lsls	r7, r3, #31
 800d564:	bf48      	it	mi
 800d566:	f043 0320 	orrmi.w	r3, r3, #32
 800d56a:	6029      	str	r1, [r5, #0]
 800d56c:	bf48      	it	mi
 800d56e:	6023      	strmi	r3, [r4, #0]
 800d570:	b91e      	cbnz	r6, 800d57a <_printf_i+0x1a6>
 800d572:	6823      	ldr	r3, [r4, #0]
 800d574:	f023 0320 	bic.w	r3, r3, #32
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	2310      	movs	r3, #16
 800d57c:	e7a6      	b.n	800d4cc <_printf_i+0xf8>
 800d57e:	4824      	ldr	r0, [pc, #144]	; (800d610 <_printf_i+0x23c>)
 800d580:	e7e4      	b.n	800d54c <_printf_i+0x178>
 800d582:	4615      	mov	r5, r2
 800d584:	e7bd      	b.n	800d502 <_printf_i+0x12e>
 800d586:	682b      	ldr	r3, [r5, #0]
 800d588:	6826      	ldr	r6, [r4, #0]
 800d58a:	1d18      	adds	r0, r3, #4
 800d58c:	6961      	ldr	r1, [r4, #20]
 800d58e:	6028      	str	r0, [r5, #0]
 800d590:	0635      	lsls	r5, r6, #24
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	d501      	bpl.n	800d59a <_printf_i+0x1c6>
 800d596:	6019      	str	r1, [r3, #0]
 800d598:	e002      	b.n	800d5a0 <_printf_i+0x1cc>
 800d59a:	0670      	lsls	r0, r6, #25
 800d59c:	d5fb      	bpl.n	800d596 <_printf_i+0x1c2>
 800d59e:	8019      	strh	r1, [r3, #0]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4615      	mov	r5, r2
 800d5a4:	6123      	str	r3, [r4, #16]
 800d5a6:	e7bc      	b.n	800d522 <_printf_i+0x14e>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	1d1a      	adds	r2, r3, #4
 800d5ae:	602a      	str	r2, [r5, #0]
 800d5b0:	681d      	ldr	r5, [r3, #0]
 800d5b2:	6862      	ldr	r2, [r4, #4]
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	f000 f849 	bl	800d64c <memchr>
 800d5ba:	b108      	cbz	r0, 800d5c0 <_printf_i+0x1ec>
 800d5bc:	1b40      	subs	r0, r0, r5
 800d5be:	6060      	str	r0, [r4, #4]
 800d5c0:	6863      	ldr	r3, [r4, #4]
 800d5c2:	6123      	str	r3, [r4, #16]
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5ca:	e7aa      	b.n	800d522 <_printf_i+0x14e>
 800d5cc:	462a      	mov	r2, r5
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	4640      	mov	r0, r8
 800d5d2:	6923      	ldr	r3, [r4, #16]
 800d5d4:	47d0      	blx	sl
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	d0ad      	beq.n	800d536 <_printf_i+0x162>
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	079b      	lsls	r3, r3, #30
 800d5de:	d413      	bmi.n	800d608 <_printf_i+0x234>
 800d5e0:	68e0      	ldr	r0, [r4, #12]
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	4298      	cmp	r0, r3
 800d5e6:	bfb8      	it	lt
 800d5e8:	4618      	movlt	r0, r3
 800d5ea:	e7a6      	b.n	800d53a <_printf_i+0x166>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	4632      	mov	r2, r6
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	47d0      	blx	sl
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	d09d      	beq.n	800d536 <_printf_i+0x162>
 800d5fa:	3501      	adds	r5, #1
 800d5fc:	68e3      	ldr	r3, [r4, #12]
 800d5fe:	9903      	ldr	r1, [sp, #12]
 800d600:	1a5b      	subs	r3, r3, r1
 800d602:	42ab      	cmp	r3, r5
 800d604:	dcf2      	bgt.n	800d5ec <_printf_i+0x218>
 800d606:	e7eb      	b.n	800d5e0 <_printf_i+0x20c>
 800d608:	2500      	movs	r5, #0
 800d60a:	f104 0619 	add.w	r6, r4, #25
 800d60e:	e7f5      	b.n	800d5fc <_printf_i+0x228>
 800d610:	0800e63c 	.word	0x0800e63c
 800d614:	0800e64d 	.word	0x0800e64d

0800d618 <memmove>:
 800d618:	4288      	cmp	r0, r1
 800d61a:	b510      	push	{r4, lr}
 800d61c:	eb01 0402 	add.w	r4, r1, r2
 800d620:	d902      	bls.n	800d628 <memmove+0x10>
 800d622:	4284      	cmp	r4, r0
 800d624:	4623      	mov	r3, r4
 800d626:	d807      	bhi.n	800d638 <memmove+0x20>
 800d628:	1e43      	subs	r3, r0, #1
 800d62a:	42a1      	cmp	r1, r4
 800d62c:	d008      	beq.n	800d640 <memmove+0x28>
 800d62e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d632:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d636:	e7f8      	b.n	800d62a <memmove+0x12>
 800d638:	4601      	mov	r1, r0
 800d63a:	4402      	add	r2, r0
 800d63c:	428a      	cmp	r2, r1
 800d63e:	d100      	bne.n	800d642 <memmove+0x2a>
 800d640:	bd10      	pop	{r4, pc}
 800d642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d64a:	e7f7      	b.n	800d63c <memmove+0x24>

0800d64c <memchr>:
 800d64c:	4603      	mov	r3, r0
 800d64e:	b510      	push	{r4, lr}
 800d650:	b2c9      	uxtb	r1, r1
 800d652:	4402      	add	r2, r0
 800d654:	4293      	cmp	r3, r2
 800d656:	4618      	mov	r0, r3
 800d658:	d101      	bne.n	800d65e <memchr+0x12>
 800d65a:	2000      	movs	r0, #0
 800d65c:	e003      	b.n	800d666 <memchr+0x1a>
 800d65e:	7804      	ldrb	r4, [r0, #0]
 800d660:	3301      	adds	r3, #1
 800d662:	428c      	cmp	r4, r1
 800d664:	d1f6      	bne.n	800d654 <memchr+0x8>
 800d666:	bd10      	pop	{r4, pc}

0800d668 <_realloc_r>:
 800d668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66c:	4680      	mov	r8, r0
 800d66e:	4614      	mov	r4, r2
 800d670:	460e      	mov	r6, r1
 800d672:	b921      	cbnz	r1, 800d67e <_realloc_r+0x16>
 800d674:	4611      	mov	r1, r2
 800d676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d67a:	f7ff bb41 	b.w	800cd00 <_malloc_r>
 800d67e:	b92a      	cbnz	r2, 800d68c <_realloc_r+0x24>
 800d680:	f7ff fc96 	bl	800cfb0 <_free_r>
 800d684:	4625      	mov	r5, r4
 800d686:	4628      	mov	r0, r5
 800d688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d68c:	f000 f81b 	bl	800d6c6 <_malloc_usable_size_r>
 800d690:	4284      	cmp	r4, r0
 800d692:	4607      	mov	r7, r0
 800d694:	d802      	bhi.n	800d69c <_realloc_r+0x34>
 800d696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d69a:	d812      	bhi.n	800d6c2 <_realloc_r+0x5a>
 800d69c:	4621      	mov	r1, r4
 800d69e:	4640      	mov	r0, r8
 800d6a0:	f7ff fb2e 	bl	800cd00 <_malloc_r>
 800d6a4:	4605      	mov	r5, r0
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d0ed      	beq.n	800d686 <_realloc_r+0x1e>
 800d6aa:	42bc      	cmp	r4, r7
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	4631      	mov	r1, r6
 800d6b0:	bf28      	it	cs
 800d6b2:	463a      	movcs	r2, r7
 800d6b4:	f7ff fc6e 	bl	800cf94 <memcpy>
 800d6b8:	4631      	mov	r1, r6
 800d6ba:	4640      	mov	r0, r8
 800d6bc:	f7ff fc78 	bl	800cfb0 <_free_r>
 800d6c0:	e7e1      	b.n	800d686 <_realloc_r+0x1e>
 800d6c2:	4635      	mov	r5, r6
 800d6c4:	e7df      	b.n	800d686 <_realloc_r+0x1e>

0800d6c6 <_malloc_usable_size_r>:
 800d6c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ca:	1f18      	subs	r0, r3, #4
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	bfbc      	itt	lt
 800d6d0:	580b      	ldrlt	r3, [r1, r0]
 800d6d2:	18c0      	addlt	r0, r0, r3
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <_init>:
 800d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6da:	bf00      	nop
 800d6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6de:	bc08      	pop	{r3}
 800d6e0:	469e      	mov	lr, r3
 800d6e2:	4770      	bx	lr

0800d6e4 <_fini>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	bf00      	nop
 800d6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ea:	bc08      	pop	{r3}
 800d6ec:	469e      	mov	lr, r3
 800d6ee:	4770      	bx	lr
