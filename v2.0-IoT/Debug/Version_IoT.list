
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d570  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800d754  0800d754  0000e754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db68  0800db68  0000fe6c  2**0
                  CONTENTS
  4 .ARM          00000008  0800db68  0800db68  0000eb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db70  0800db70  0000fe6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db70  0800db70  0000eb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db74  0800db74  0000eb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e6c  20000000  0800db78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af0  20000e6c  0800e9e4  0000fe6c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000195c  0800e9e4  0001095c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000fe6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018935  00000000  00000000  0000fe95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003627  00000000  00000000  000287ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0002bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb1  00000000  00000000  0002d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c898  00000000  00000000  0002df81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c87b  00000000  00000000  0004a819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0233  00000000  00000000  00067094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001072c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e0  00000000  00000000  0010730c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000e6c 	.word	0x20000e6c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d73c 	.word	0x0800d73c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000e70 	.word	0x20000e70
 8000220:	0800d73c 	.word	0x0800d73c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	@ (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	@ (80004bc <eepromKontrol+0x288>)
 8000250:	f00a f8d6 	bl	800a400 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f008 ff4e 	bl	80090f8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	@ (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	@ (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	@ (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	@ (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	@ (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	@ (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	@ (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	@ (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	@ (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	@ (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	@ (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	@ (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	@ (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	@ (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	@ (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	@ (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	@ (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	@ (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	@ (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	@ (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	@ (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	@ (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	@ (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	@ (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	@ (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	@ (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	@ (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	@ (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	@ (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	@ (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	@ (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	@ (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	@ (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	@ (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	@ (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	@ (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	@ (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	@ (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	@ (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	@ (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	@ (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	@ (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	@ (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	@ (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	@ (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	@ (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	@ (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	@ (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	@ (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	@ (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	@ (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	@ (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	@ (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	@ (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	@ (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	@ (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000e88 	.word	0x20000e88
 80004bc:	20001728 	.word	0x20001728
 80004c0:	20000f35 	.word	0x20000f35
 80004c4:	20000f61 	.word	0x20000f61
 80004c8:	20000f64 	.word	0x20000f64
 80004cc:	20000f65 	.word	0x20000f65
 80004d0:	20000f66 	.word	0x20000f66
 80004d4:	20000f67 	.word	0x20000f67
 80004d8:	20000f68 	.word	0x20000f68
 80004dc:	20000f69 	.word	0x20000f69
 80004e0:	20000f79 	.word	0x20000f79
 80004e4:	20000f6a 	.word	0x20000f6a
 80004e8:	20000f7a 	.word	0x20000f7a
 80004ec:	20000f6b 	.word	0x20000f6b
 80004f0:	20000f7b 	.word	0x20000f7b
 80004f4:	20000f6e 	.word	0x20000f6e
 80004f8:	20000f6f 	.word	0x20000f6f
 80004fc:	20000f70 	.word	0x20000f70
 8000500:	20000f71 	.word	0x20000f71
 8000504:	20000f72 	.word	0x20000f72
 8000508:	20000f73 	.word	0x20000f73
 800050c:	20000f74 	.word	0x20000f74
 8000510:	20000f75 	.word	0x20000f75
 8000514:	20000f76 	.word	0x20000f76
 8000518:	20000f77 	.word	0x20000f77
 800051c:	20000f78 	.word	0x20000f78
 8000520:	20000f7c 	.word	0x20000f7c
 8000524:	20000f7e 	.word	0x20000f7e
 8000528:	20000f5c 	.word	0x20000f5c
 800052c:	20000f5d 	.word	0x20000f5d
 8000530:	20000f5e 	.word	0x20000f5e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000f5f 	.word	0x20000f5f
 8000540:	20000f81 	.word	0x20000f81
 8000544:	20000f7f 	.word	0x20000f7f
 8000548:	20000f6d 	.word	0x20000f6d
 800054c:	20000f80 	.word	0x20000f80
 8000550:	20000f6c 	.word	0x20000f6c
 8000554:	20000f82 	.word	0x20000f82
 8000558:	20000f83 	.word	0x20000f83
 800055c:	20000f84 	.word	0x20000f84
 8000560:	20000f85 	.word	0x20000f85
 8000564:	20000f86 	.word	0x20000f86
 8000568:	20000f87 	.word	0x20000f87
 800056c:	20000f88 	.word	0x20000f88
 8000570:	20000f89 	.word	0x20000f89
 8000574:	20000f8a 	.word	0x20000f8a
 8000578:	20000f8b 	.word	0x20000f8b
 800057c:	20000f34 	.word	0x20000f34
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	@ (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	@ (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	@ (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	@ (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	@ (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	@ (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	@ (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	@ 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	@ 0xfa
 80006bc:	f008 fd1c 	bl	80090f8 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	f008 fd16 	bl	80090f8 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	@ 0xfa
 80006d4:	f008 fd10 	bl	80090f8 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fc97 	bl	8006010 <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000f79 	.word	0x20000f79
 80006ec:	20000f6a 	.word	0x20000f6a
 80006f0:	20000f7a 	.word	0x20000f7a
 80006f4:	20000f6b 	.word	0x20000f6b
 80006f8:	20000f6d 	.word	0x20000f6d
 80006fc:	20000f7b 	.word	0x20000f7b
 8000700:	20000f6e 	.word	0x20000f6e
 8000704:	20000f6f 	.word	0x20000f6f
 8000708:	20000f70 	.word	0x20000f70
 800070c:	20000f71 	.word	0x20000f71
 8000710:	20000f72 	.word	0x20000f72
 8000714:	20000f73 	.word	0x20000f73
 8000718:	20000f74 	.word	0x20000f74
 800071c:	20000f75 	.word	0x20000f75
 8000720:	20000f76 	.word	0x20000f76
 8000724:	20000f77 	.word	0x20000f77
 8000728:	20000f78 	.word	0x20000f78
 800072c:	20000f7c 	.word	0x20000f7c
 8000730:	20000f7e 	.word	0x20000f7e
 8000734:	20000f80 	.word	0x20000f80
 8000738:	20000f81 	.word	0x20000f81
 800073c:	20000f7f 	.word	0x20000f7f

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	@ (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	@ 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000e88 	.word	0x20000e88
 8000828:	20000010 	.word	0x20000010
 800082c:	20000f00 	.word	0x20000f00
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20000f0c 	.word	0x20000f0c
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20000f20 	.word	0x20000f20

08000844 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800084a:	af04      	add	r7, sp, #16
 800084c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8000850:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8000854:	6020      	str	r0, [r4, #0]
 8000856:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800085a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800085e:	6001      	str	r1, [r0, #0]
 8000860:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000864:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000868:	600a      	str	r2, [r1, #0]
 800086a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800086e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000872:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000874:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000878:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800087c:	f107 0014 	add.w	r0, r7, #20
 8000880:	220c      	movs	r2, #12
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	f00c fb5d 	bl	800cf42 <strncpy>
	subMachineID[12] = '\0';
 8000888:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800088c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000890:	2200      	movs	r2, #0
 8000892:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000894:	4a35      	ldr	r2, [pc, #212]	@ (800096c <sendMachineData+0x128>)
 8000896:	4936      	ldr	r1, [pc, #216]	@ (8000970 <sendMachineData+0x12c>)
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <sendMachineData+0x130>)
 800089a:	f00c fae1 	bl	800ce60 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800089e:	4835      	ldr	r0, [pc, #212]	@ (8000974 <sendMachineData+0x130>)
 80008a0:	f7ff fcc0 	bl	8000224 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008ac:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80008b0:	4930      	ldr	r1, [pc, #192]	@ (8000974 <sendMachineData+0x130>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f00b fcec 	bl	800c290 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008bc:	f008 fc1c 	bl	80090f8 <HAL_Delay>

	sprintf(local_txA,
 80008c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008c8:	f107 0114 	add.w	r1, r7, #20
 80008cc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <sendMachineData+0x134>)
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80008de:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	460a      	mov	r2, r1
 80008ea:	4924      	ldr	r1, [pc, #144]	@ (800097c <sendMachineData+0x138>)
 80008ec:	f00c fab8 	bl	800ce60 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000908:	491d      	ldr	r1, [pc, #116]	@ (8000980 <sendMachineData+0x13c>)
 800090a:	4618      	mov	r0, r3
 800090c:	f00c faa8 	bl	800ce60 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000922:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000926:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	f00b fcb0 	bl	800c290 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000930:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000934:	f008 fbe0 	bl	80090f8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000938:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc71 	bl	8000224 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800094a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800094e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f00b fc9c 	bl	800c290 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000958:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800095c:	f008 fbcc 	bl	80090f8 <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000966:	46bd      	mov	sp, r7
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	bf00      	nop
 800096c:	0800d7a4 	.word	0x0800d7a4
 8000970:	0800d7b4 	.word	0x0800d7b4
 8000974:	20000fc4 	.word	0x20000fc4
 8000978:	0800d848 	.word	0x0800d848
 800097c:	0800d7d4 	.word	0x0800d7d4
 8000980:	0800d85c 	.word	0x0800d85c

08000984 <hata2EEPROM>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af04      	add	r7, sp, #16
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <hata2EEPROM+0xa0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <hata2EEPROM+0xa4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <hata2EEPROM+0xa8>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009a2:	f000 f929 	bl	8000bf8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009a6:	e000      	b.n	80009aa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009a8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e012      	b.n	80009d6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	4918      	ldr	r1, [pc, #96]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	54ca      	strb	r2, [r1, r3]
					break;
 80009ce:	e007      	b.n	80009e0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbe7      	blt.n	80009b0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b299      	uxth	r1, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b298      	uxth	r0, r3
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009f2:	4413      	add	r3, r2
 80009f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	b292      	uxth	r2, r2
 80009fa:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80009fe:	9402      	str	r4, [sp, #8]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	21a0      	movs	r1, #160	@ 0xa0
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <hata2EEPROM+0xac>)
 8000a0c:	f009 fbfe 	bl	800a20c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a14:	f008 fb70 	bl	80090f8 <HAL_Delay>
	eepromKontrol();
 8000a18:	f7ff fc0c 	bl	8000234 <eepromKontrol>
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000098 	.word	0x20000098
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	20000e88 	.word	0x20000e88
 8000a30:	20001728 	.word	0x20001728

08000a34 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d11d      	bne.n	8000a80 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a44:	4b62      	ldr	r3, [pc, #392]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d105      	bne.n	8000a58 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a4c:	4a61      	ldr	r2, [pc, #388]	@ (8000bd4 <hataKoduLcdGoster+0x1a0>)
 8000a4e:	2101      	movs	r1, #1
 8000a50:	2001      	movs	r0, #1
 8000a52:	f007 fdf7 	bl	8008644 <lcd_print>
 8000a56:	e008      	b.n	8000a6a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a58:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d104      	bne.n	8000a6a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a60:	4a5d      	ldr	r2, [pc, #372]	@ (8000bd8 <hataKoduLcdGoster+0x1a4>)
 8000a62:	2101      	movs	r1, #1
 8000a64:	2001      	movs	r0, #1
 8000a66:	f007 fded 	bl	8008644 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8000bdc <hataKoduLcdGoster+0x1a8>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f007 fde8 	bl	8008644 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a74:	4a5a      	ldr	r2, [pc, #360]	@ (8000be0 <hataKoduLcdGoster+0x1ac>)
 8000a76:	2107      	movs	r1, #7
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f007 fde3 	bl	8008644 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a7e:	e0a3      	b.n	8000bc8 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d11d      	bne.n	8000ac2 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000a86:	4b52      	ldr	r3, [pc, #328]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d105      	bne.n	8000a9a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000a8e:	4a51      	ldr	r2, [pc, #324]	@ (8000bd4 <hataKoduLcdGoster+0x1a0>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	2001      	movs	r0, #1
 8000a94:	f007 fdd6 	bl	8008644 <lcd_print>
 8000a98:	e008      	b.n	8000aac <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d104      	bne.n	8000aac <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd8 <hataKoduLcdGoster+0x1a4>)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f007 fdcc 	bl	8008644 <lcd_print>
		lcd_print(2, 2, "2");
 8000aac:	4a4d      	ldr	r2, [pc, #308]	@ (8000be4 <hataKoduLcdGoster+0x1b0>)
 8000aae:	2102      	movs	r1, #2
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f007 fdc7 	bl	8008644 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8000be0 <hataKoduLcdGoster+0x1ac>)
 8000ab8:	2107      	movs	r1, #7
 8000aba:	2002      	movs	r0, #2
 8000abc:	f007 fdc2 	bl	8008644 <lcd_print>
}
 8000ac0:	e082      	b.n	8000bc8 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d11d      	bne.n	8000b04 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000ac8:	4b41      	ldr	r3, [pc, #260]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d105      	bne.n	8000adc <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000ad0:	4a40      	ldr	r2, [pc, #256]	@ (8000bd4 <hataKoduLcdGoster+0x1a0>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f007 fdb5 	bl	8008644 <lcd_print>
 8000ada:	e008      	b.n	8000aee <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000adc:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d104      	bne.n	8000aee <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd8 <hataKoduLcdGoster+0x1a4>)
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f007 fdab 	bl	8008644 <lcd_print>
		lcd_print(2, 3, "3");
 8000aee:	4a3e      	ldr	r2, [pc, #248]	@ (8000be8 <hataKoduLcdGoster+0x1b4>)
 8000af0:	2103      	movs	r1, #3
 8000af2:	2002      	movs	r0, #2
 8000af4:	f007 fda6 	bl	8008644 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af8:	4a39      	ldr	r2, [pc, #228]	@ (8000be0 <hataKoduLcdGoster+0x1ac>)
 8000afa:	2107      	movs	r1, #7
 8000afc:	2002      	movs	r0, #2
 8000afe:	f007 fda1 	bl	8008644 <lcd_print>
}
 8000b02:	e061      	b.n	8000bc8 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d11d      	bne.n	8000b46 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b0a:	4b31      	ldr	r3, [pc, #196]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d105      	bne.n	8000b1e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b12:	4a30      	ldr	r2, [pc, #192]	@ (8000bd4 <hataKoduLcdGoster+0x1a0>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	2001      	movs	r0, #1
 8000b18:	f007 fd94 	bl	8008644 <lcd_print>
 8000b1c:	e008      	b.n	8000b30 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d104      	bne.n	8000b30 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b26:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd8 <hataKoduLcdGoster+0x1a4>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f007 fd8a 	bl	8008644 <lcd_print>
		lcd_print(2, 4, "4");
 8000b30:	4a2e      	ldr	r2, [pc, #184]	@ (8000bec <hataKoduLcdGoster+0x1b8>)
 8000b32:	2104      	movs	r1, #4
 8000b34:	2002      	movs	r0, #2
 8000b36:	f007 fd85 	bl	8008644 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b3a:	4a29      	ldr	r2, [pc, #164]	@ (8000be0 <hataKoduLcdGoster+0x1ac>)
 8000b3c:	2107      	movs	r1, #7
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f007 fd80 	bl	8008644 <lcd_print>
}
 8000b44:	e040      	b.n	8000bc8 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b05      	cmp	r3, #5
 8000b4a:	d11d      	bne.n	8000b88 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d105      	bne.n	8000b60 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b54:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd4 <hataKoduLcdGoster+0x1a0>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f007 fd73 	bl	8008644 <lcd_print>
 8000b5e:	e008      	b.n	8000b72 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d104      	bne.n	8000b72 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b68:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd8 <hataKoduLcdGoster+0x1a4>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f007 fd69 	bl	8008644 <lcd_print>
		lcd_print(2, 5, "5");
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <hataKoduLcdGoster+0x1bc>)
 8000b74:	2105      	movs	r1, #5
 8000b76:	2002      	movs	r0, #2
 8000b78:	f007 fd64 	bl	8008644 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b7c:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <hataKoduLcdGoster+0x1ac>)
 8000b7e:	2107      	movs	r1, #7
 8000b80:	2002      	movs	r0, #2
 8000b82:	f007 fd5f 	bl	8008644 <lcd_print>
}
 8000b86:	e01f      	b.n	8000bc8 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d11c      	bne.n	8000bc8 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d105      	bne.n	8000ba2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <hataKoduLcdGoster+0x1a0>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f007 fd52 	bl	8008644 <lcd_print>
 8000ba0:	e008      	b.n	8000bb4 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <hataKoduLcdGoster+0x19c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d104      	bne.n	8000bb4 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000baa:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd8 <hataKoduLcdGoster+0x1a4>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f007 fd48 	bl	8008644 <lcd_print>
		lcd_print(2, 6, "6");
 8000bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <hataKoduLcdGoster+0x1c0>)
 8000bb6:	2106      	movs	r1, #6
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f007 fd43 	bl	8008644 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <hataKoduLcdGoster+0x1ac>)
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f007 fd3e 	bl	8008644 <lcd_print>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000f81 	.word	0x20000f81
 8000bd4:	0800d8d0 	.word	0x0800d8d0
 8000bd8:	0800d8e0 	.word	0x0800d8e0
 8000bdc:	0800d8f0 	.word	0x0800d8f0
 8000be0:	0800d8f4 	.word	0x0800d8f4
 8000be4:	0800d900 	.word	0x0800d900
 8000be8:	0800d904 	.word	0x0800d904
 8000bec:	0800d908 	.word	0x0800d908
 8000bf0:	0800d90c 	.word	0x0800d90c
 8000bf4:	0800d910 	.word	0x0800d910

08000bf8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	e009      	b.n	8000c18 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c04:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <eepromDataFillWithEmpty+0x38>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <eepromDataFillWithEmpty+0x3c>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3301      	adds	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <eepromDataFillWithEmpty+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbf0      	blt.n	8000c04 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000070 	.word	0x20000070
 8000c34:	20000e88 	.word	0x20000e88
 8000c38:	20000098 	.word	0x20000098

08000c3c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c4e:	4b50      	ldr	r3, [pc, #320]	@ (8000d90 <i2cTest+0x154>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b4e      	ldr	r3, [pc, #312]	@ (8000d90 <i2cTest+0x154>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f022 0201 	bic.w	r2, r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c5e:	484c      	ldr	r0, [pc, #304]	@ (8000d90 <i2cTest+0x154>)
 8000c60:	f009 f9a6 	bl	8009fb0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c64:	23c0      	movs	r3, #192	@ 0xc0
 8000c66:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c68:	2311      	movs	r3, #17
 8000c6a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4846      	ldr	r0, [pc, #280]	@ (8000d94 <i2cTest+0x158>)
 8000c7a:	f008 fdad 	bl	80097d8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2140      	movs	r1, #64	@ 0x40
 8000c82:	4844      	ldr	r0, [pc, #272]	@ (8000d94 <i2cTest+0x158>)
 8000c84:	f009 f81f 	bl	8009cc6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2180      	movs	r1, #128	@ 0x80
 8000c8c:	4841      	ldr	r0, [pc, #260]	@ (8000d94 <i2cTest+0x158>)
 8000c8e:	f009 f81a 	bl	8009cc6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f008 fa30 	bl	80090f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c98:	bf00      	nop
 8000c9a:	2140      	movs	r1, #64	@ 0x40
 8000c9c:	483d      	ldr	r0, [pc, #244]	@ (8000d94 <i2cTest+0x158>)
 8000c9e:	f008 fffb 	bl	8009c98 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d006      	beq.n	8000cb6 <i2cTest+0x7a>
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	483a      	ldr	r0, [pc, #232]	@ (8000d94 <i2cTest+0x158>)
 8000cac:	f008 fff4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d1f1      	bne.n	8000c9a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2180      	movs	r1, #128	@ 0x80
 8000cba:	4836      	ldr	r0, [pc, #216]	@ (8000d94 <i2cTest+0x158>)
 8000cbc:	f009 f803 	bl	8009cc6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cc0:	200a      	movs	r0, #10
 8000cc2:	f008 fa19 	bl	80090f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cc6:	bf00      	nop
 8000cc8:	2180      	movs	r1, #128	@ 0x80
 8000cca:	4832      	ldr	r0, [pc, #200]	@ (8000d94 <i2cTest+0x158>)
 8000ccc:	f008 ffe4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d0f8      	beq.n	8000cc8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2140      	movs	r1, #64	@ 0x40
 8000cda:	482e      	ldr	r0, [pc, #184]	@ (8000d94 <i2cTest+0x158>)
 8000cdc:	f008 fff3 	bl	8009cc6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f008 fa09 	bl	80090f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000ce6:	bf00      	nop
 8000ce8:	2140      	movs	r1, #64	@ 0x40
 8000cea:	482a      	ldr	r0, [pc, #168]	@ (8000d94 <i2cTest+0x158>)
 8000cec:	f008 ffd4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d0f8      	beq.n	8000ce8 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2140      	movs	r1, #64	@ 0x40
 8000cfa:	4826      	ldr	r0, [pc, #152]	@ (8000d94 <i2cTest+0x158>)
 8000cfc:	f008 ffe3 	bl	8009cc6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d00:	200a      	movs	r0, #10
 8000d02:	f008 f9f9 	bl	80090f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d06:	bf00      	nop
 8000d08:	2140      	movs	r1, #64	@ 0x40
 8000d0a:	4822      	ldr	r0, [pc, #136]	@ (8000d94 <i2cTest+0x158>)
 8000d0c:	f008 ffc4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d1f8      	bne.n	8000d08 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2180      	movs	r1, #128	@ 0x80
 8000d1a:	481e      	ldr	r0, [pc, #120]	@ (8000d94 <i2cTest+0x158>)
 8000d1c:	f008 ffd3 	bl	8009cc6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d20:	200a      	movs	r0, #10
 8000d22:	f008 f9e9 	bl	80090f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d26:	bf00      	nop
 8000d28:	2180      	movs	r1, #128	@ 0x80
 8000d2a:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <i2cTest+0x158>)
 8000d2c:	f008 ffb4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d1f8      	bne.n	8000d28 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d36:	23c0      	movs	r3, #192	@ 0xc0
 8000d38:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4812      	ldr	r0, [pc, #72]	@ (8000d94 <i2cTest+0x158>)
 8000d4c:	f008 fd44 	bl	80097d8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <i2cTest+0x154>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <i2cTest+0x154>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d5e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <i2cTest+0x154>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <i2cTest+0x154>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d6e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <i2cTest+0x154>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <i2cTest+0x154>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0201 	orr.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <i2cTest+0x154>)
 8000d82:	f008 ffd1 	bl	8009d28 <HAL_I2C_Init>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20001728 	.word	0x20001728
 8000d94:	40010c00 	.word	0x40010c00

08000d98 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000da2:	20c8      	movs	r0, #200	@ 0xc8
 8000da4:	f008 f9a8 	bl	80090f8 <HAL_Delay>
	lcd_clear();
 8000da8:	f007 fc78 	bl	800869c <lcd_clear>
	if(type == 1 && page == 0) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d13e      	bne.n	8000e30 <printTemplate+0x98>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d13b      	bne.n	8000e30 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000db8:	4a81      	ldr	r2, [pc, #516]	@ (8000fc0 <printTemplate+0x228>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f007 fc41 	bl	8008644 <lcd_print>
		lcd_print(2, 3, "0");
 8000dc2:	4a80      	ldr	r2, [pc, #512]	@ (8000fc4 <printTemplate+0x22c>)
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f007 fc3c 	bl	8008644 <lcd_print>
		lcd_print(2, 4, "1");
 8000dcc:	4a7e      	ldr	r2, [pc, #504]	@ (8000fc8 <printTemplate+0x230>)
 8000dce:	2104      	movs	r1, #4
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f007 fc37 	bl	8008644 <lcd_print>
		lcd_print(2, 5, "2");
 8000dd6:	4a7d      	ldr	r2, [pc, #500]	@ (8000fcc <printTemplate+0x234>)
 8000dd8:	2105      	movs	r1, #5
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f007 fc32 	bl	8008644 <lcd_print>
		lcd_print(2, 6, "3");
 8000de0:	4a7b      	ldr	r2, [pc, #492]	@ (8000fd0 <printTemplate+0x238>)
 8000de2:	2106      	movs	r1, #6
 8000de4:	2002      	movs	r0, #2
 8000de6:	f007 fc2d 	bl	8008644 <lcd_print>
		lcd_print(2, 7, "4");
 8000dea:	4a7a      	ldr	r2, [pc, #488]	@ (8000fd4 <printTemplate+0x23c>)
 8000dec:	2107      	movs	r1, #7
 8000dee:	2002      	movs	r0, #2
 8000df0:	f007 fc28 	bl	8008644 <lcd_print>
		lcd_print(2, 10, "5");
 8000df4:	4a78      	ldr	r2, [pc, #480]	@ (8000fd8 <printTemplate+0x240>)
 8000df6:	210a      	movs	r1, #10
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f007 fc23 	bl	8008644 <lcd_print>
		lcd_print(2, 11, "6");
 8000dfe:	4a77      	ldr	r2, [pc, #476]	@ (8000fdc <printTemplate+0x244>)
 8000e00:	210b      	movs	r1, #11
 8000e02:	2002      	movs	r0, #2
 8000e04:	f007 fc1e 	bl	8008644 <lcd_print>
		lcd_print(2, 12, "7");
 8000e08:	4a75      	ldr	r2, [pc, #468]	@ (8000fe0 <printTemplate+0x248>)
 8000e0a:	210c      	movs	r1, #12
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f007 fc19 	bl	8008644 <lcd_print>
		lcd_print(2, 13, "8");
 8000e12:	4a74      	ldr	r2, [pc, #464]	@ (8000fe4 <printTemplate+0x24c>)
 8000e14:	210d      	movs	r1, #13
 8000e16:	2002      	movs	r0, #2
 8000e18:	f007 fc14 	bl	8008644 <lcd_print>
		lcd_print(2, 14, "9");
 8000e1c:	4a72      	ldr	r2, [pc, #456]	@ (8000fe8 <printTemplate+0x250>)
 8000e1e:	210e      	movs	r1, #14
 8000e20:	2002      	movs	r0, #2
 8000e22:	f007 fc0f 	bl	8008644 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e26:	2103      	movs	r1, #3
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f007 fbec 	bl	8008606 <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000e2e:	e0c2      	b.n	8000fb6 <printTemplate+0x21e>
	} else if(type == 2) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d15e      	bne.n	8000ef4 <printTemplate+0x15c>
		if(page == 1) {
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d10f      	bne.n	8000e5c <printTemplate+0xc4>
			lcd_clear();
 8000e3c:	f007 fc2e 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000e40:	2064      	movs	r0, #100	@ 0x64
 8000e42:	f008 f959 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e46:	4a69      	ldr	r2, [pc, #420]	@ (8000fec <printTemplate+0x254>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f007 fbfa 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e50:	4a67      	ldr	r2, [pc, #412]	@ (8000ff0 <printTemplate+0x258>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	2002      	movs	r0, #2
 8000e56:	f007 fbf5 	bl	8008644 <lcd_print>
}
 8000e5a:	e0ac      	b.n	8000fb6 <printTemplate+0x21e>
		} else if(page == 2) {
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d10f      	bne.n	8000e82 <printTemplate+0xea>
			lcd_clear();
 8000e62:	f007 fc1b 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000e66:	2064      	movs	r0, #100	@ 0x64
 8000e68:	f008 f946 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8000fec <printTemplate+0x254>)
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2001      	movs	r0, #1
 8000e72:	f007 fbe7 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e76:	4a5f      	ldr	r2, [pc, #380]	@ (8000ff4 <printTemplate+0x25c>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f007 fbe2 	bl	8008644 <lcd_print>
}
 8000e80:	e099      	b.n	8000fb6 <printTemplate+0x21e>
		} else if(page == 3) {
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d10f      	bne.n	8000ea8 <printTemplate+0x110>
			lcd_clear();
 8000e88:	f007 fc08 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000e8c:	2064      	movs	r0, #100	@ 0x64
 8000e8e:	f008 f933 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e92:	4a56      	ldr	r2, [pc, #344]	@ (8000fec <printTemplate+0x254>)
 8000e94:	2101      	movs	r1, #1
 8000e96:	2001      	movs	r0, #1
 8000e98:	f007 fbd4 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000e9c:	4a56      	ldr	r2, [pc, #344]	@ (8000ff8 <printTemplate+0x260>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f007 fbcf 	bl	8008644 <lcd_print>
}
 8000ea6:	e086      	b.n	8000fb6 <printTemplate+0x21e>
		} else if(page == 4) {
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d10f      	bne.n	8000ece <printTemplate+0x136>
			lcd_clear();
 8000eae:	f007 fbf5 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000eb2:	2064      	movs	r0, #100	@ 0x64
 8000eb4:	f008 f920 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000fec <printTemplate+0x254>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f007 fbc1 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8000ffc <printTemplate+0x264>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f007 fbbc 	bl	8008644 <lcd_print>
}
 8000ecc:	e073      	b.n	8000fb6 <printTemplate+0x21e>
		} else if(page == 5) {
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	d170      	bne.n	8000fb6 <printTemplate+0x21e>
			lcd_clear();
 8000ed4:	f007 fbe2 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000ed8:	2064      	movs	r0, #100	@ 0x64
 8000eda:	f008 f90d 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ede:	4a43      	ldr	r2, [pc, #268]	@ (8000fec <printTemplate+0x254>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f007 fbae 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000ee8:	4a45      	ldr	r2, [pc, #276]	@ (8001000 <printTemplate+0x268>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	2002      	movs	r0, #2
 8000eee:	f007 fba9 	bl	8008644 <lcd_print>
}
 8000ef2:	e060      	b.n	8000fb6 <printTemplate+0x21e>
	} else if(type == 3) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d15d      	bne.n	8000fb6 <printTemplate+0x21e>
		if(page == 1) {
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d10f      	bne.n	8000f20 <printTemplate+0x188>
			lcd_clear();
 8000f00:	f007 fbcc 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000f04:	2064      	movs	r0, #100	@ 0x64
 8000f06:	f008 f8f7 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001004 <printTemplate+0x26c>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f007 fb98 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f14:	4a36      	ldr	r2, [pc, #216]	@ (8000ff0 <printTemplate+0x258>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f007 fb93 	bl	8008644 <lcd_print>
}
 8000f1e:	e04a      	b.n	8000fb6 <printTemplate+0x21e>
		} else if(page == 2) {
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d10f      	bne.n	8000f46 <printTemplate+0x1ae>
			lcd_clear();
 8000f26:	f007 fbb9 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000f2a:	2064      	movs	r0, #100	@ 0x64
 8000f2c:	f008 f8e4 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f30:	4a34      	ldr	r2, [pc, #208]	@ (8001004 <printTemplate+0x26c>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	2001      	movs	r0, #1
 8000f36:	f007 fb85 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff4 <printTemplate+0x25c>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f007 fb80 	bl	8008644 <lcd_print>
}
 8000f44:	e037      	b.n	8000fb6 <printTemplate+0x21e>
		} else if(page == 3) {
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d10f      	bne.n	8000f6c <printTemplate+0x1d4>
			lcd_clear();
 8000f4c:	f007 fba6 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000f50:	2064      	movs	r0, #100	@ 0x64
 8000f52:	f008 f8d1 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f56:	4a2b      	ldr	r2, [pc, #172]	@ (8001004 <printTemplate+0x26c>)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f007 fb72 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000f60:	4a25      	ldr	r2, [pc, #148]	@ (8000ff8 <printTemplate+0x260>)
 8000f62:	2101      	movs	r1, #1
 8000f64:	2002      	movs	r0, #2
 8000f66:	f007 fb6d 	bl	8008644 <lcd_print>
}
 8000f6a:	e024      	b.n	8000fb6 <printTemplate+0x21e>
		} else if(page == 4) {
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d10f      	bne.n	8000f92 <printTemplate+0x1fa>
			lcd_clear();
 8000f72:	f007 fb93 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000f76:	2064      	movs	r0, #100	@ 0x64
 8000f78:	f008 f8be 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <printTemplate+0x26c>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2001      	movs	r0, #1
 8000f82:	f007 fb5f 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f86:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <printTemplate+0x264>)
 8000f88:	2101      	movs	r1, #1
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f007 fb5a 	bl	8008644 <lcd_print>
}
 8000f90:	e011      	b.n	8000fb6 <printTemplate+0x21e>
		} else if(page == 5) {
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d10e      	bne.n	8000fb6 <printTemplate+0x21e>
			lcd_clear();
 8000f98:	f007 fb80 	bl	800869c <lcd_clear>
			HAL_Delay(100);
 8000f9c:	2064      	movs	r0, #100	@ 0x64
 8000f9e:	f008 f8ab 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fa2:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <printTemplate+0x26c>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f007 fb4c 	bl	8008644 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000fac:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <printTemplate+0x268>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f007 fb47 	bl	8008644 <lcd_print>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	0800d914 	.word	0x0800d914
 8000fc4:	0800d91c 	.word	0x0800d91c
 8000fc8:	0800d920 	.word	0x0800d920
 8000fcc:	0800d924 	.word	0x0800d924
 8000fd0:	0800d928 	.word	0x0800d928
 8000fd4:	0800d92c 	.word	0x0800d92c
 8000fd8:	0800d930 	.word	0x0800d930
 8000fdc:	0800d934 	.word	0x0800d934
 8000fe0:	0800d938 	.word	0x0800d938
 8000fe4:	0800d93c 	.word	0x0800d93c
 8000fe8:	0800d940 	.word	0x0800d940
 8000fec:	0800d944 	.word	0x0800d944
 8000ff0:	0800d94c 	.word	0x0800d94c
 8000ff4:	0800d960 	.word	0x0800d960
 8000ff8:	0800d974 	.word	0x0800d974
 8000ffc:	0800d988 	.word	0x0800d988
 8001000:	0800d99c 	.word	0x0800d99c
 8001004:	0800d9b0 	.word	0x0800d9b0

08001008 <checkSlideVal>:

int checkSlideVal(int state) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d111      	bne.n	800103a <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001016:	2101      	movs	r1, #1
 8001018:	4813      	ldr	r0, [pc, #76]	@ (8001068 <checkSlideVal+0x60>)
 800101a:	f008 fe3d 	bl	8009c98 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <checkSlideVal+0x20>
			return 34;
 8001024:	2322      	movs	r3, #34	@ 0x22
 8001026:	e01b      	b.n	8001060 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001028:	2108      	movs	r1, #8
 800102a:	4810      	ldr	r0, [pc, #64]	@ (800106c <checkSlideVal+0x64>)
 800102c:	f008 fe34 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d113      	bne.n	800105e <checkSlideVal+0x56>
			return 32;
 8001036:	2320      	movs	r3, #32
 8001038:	e012      	b.n	8001060 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800103a:	2101      	movs	r1, #1
 800103c:	480a      	ldr	r0, [pc, #40]	@ (8001068 <checkSlideVal+0x60>)
 800103e:	f008 fe2b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <checkSlideVal+0x44>
			return 35;
 8001048:	2323      	movs	r3, #35	@ 0x23
 800104a:	e009      	b.n	8001060 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800104c:	2108      	movs	r1, #8
 800104e:	4807      	ldr	r0, [pc, #28]	@ (800106c <checkSlideVal+0x64>)
 8001050:	f008 fe22 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <checkSlideVal+0x56>
			return 33;
 800105a:	2321      	movs	r3, #33	@ 0x21
 800105c:	e000      	b.n	8001060 <checkSlideVal+0x58>
		}
	}
	return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40010800 	.word	0x40010800
 800106c:	40011000 	.word	0x40011000

08001070 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff f8d0 	bl	8000224 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 800108c:	e0aa      	b.n	80011e4 <slideText+0x174>
		if(checkSlideVal(state) > 0) {
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f7ff ffba 	bl	8001008 <checkSlideVal>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	dd07      	ble.n	80010aa <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f7ff ffb4 	bl	8001008 <checkSlideVal>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b54      	ldr	r3, [pc, #336]	@ (80011f8 <slideText+0x188>)
 80010a6:	701a      	strb	r2, [r3, #0]
			break;
 80010a8:	e0a2      	b.n	80011f0 <slideText+0x180>
		}
		checkEditMode();
 80010aa:	f000 f935 	bl	8001318 <checkEditMode>
		if(editMode == 1) {
 80010ae:	4b53      	ldr	r3, [pc, #332]	@ (80011fc <slideText+0x18c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	f000 809b 	beq.w	80011ee <slideText+0x17e>
			break;
		}

		for(int z=0; z < uzunluk; z++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	e08b      	b.n	80011d6 <slideText+0x166>
			if(checkSlideVal(state) > 0) {
 80010be:	6838      	ldr	r0, [r7, #0]
 80010c0:	f7ff ffa2 	bl	8001008 <checkSlideVal>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	dd09      	ble.n	80010de <slideText+0x6e>
				menuSayac = checkSlideVal(state);
 80010ca:	6838      	ldr	r0, [r7, #0]
 80010cc:	f7ff ff9c 	bl	8001008 <checkSlideVal>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <slideText+0x188>)
 80010d6:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 80010dc:	e082      	b.n	80011e4 <slideText+0x174>
			}
			checkEditMode();
 80010de:	f000 f91b 	bl	8001318 <checkEditMode>
			if(editMode == 1) {
 80010e2:	4b46      	ldr	r3, [pc, #280]	@ (80011fc <slideText+0x18c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d07b      	beq.n	80011e2 <slideText+0x172>
				break;
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	4413      	add	r3, r2
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e02f      	b.n	8001154 <slideText+0xe4>
				if(checkSlideVal(state) > 0) {
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f7ff ff87 	bl	8001008 <checkSlideVal>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd0b      	ble.n	8001118 <slideText+0xa8>
					menuSayac = checkSlideVal(state);
 8001100:	6838      	ldr	r0, [r7, #0]
 8001102:	f7ff ff81 	bl	8001008 <checkSlideVal>
 8001106:	4603      	mov	r3, r0
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <slideText+0x188>)
 800110c:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001116:	e025      	b.n	8001164 <slideText+0xf4>
				}
				checkEditMode();
 8001118:	f000 f8fe 	bl	8001318 <checkEditMode>
				if(editMode == 1) {
 800111c:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <slideText+0x18c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d01e      	beq.n	8001162 <slideText+0xf2>
					break;
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	b2d8      	uxtb	r0, r3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b2d9      	uxtb	r1, r3
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	f007 fa93 	bl	800866e <lcd_print_char>
				HAL_Delay(30);
 8001148:	201e      	movs	r0, #30
 800114a:	f007 ffd5 	bl	80090f8 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	7dfa      	ldrb	r2, [r7, #23]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	4413      	add	r3, r2
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbc9      	blt.n	80010f4 <slideText+0x84>
 8001160:	e000      	b.n	8001164 <slideText+0xf4>
					break;
 8001162:	bf00      	nop
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	3b01      	subs	r3, #1
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	e029      	b.n	80011c0 <slideText+0x150>
				if(checkSlideVal(state) > 0) {
 800116c:	6838      	ldr	r0, [r7, #0]
 800116e:	f7ff ff4b 	bl	8001008 <checkSlideVal>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	dd0b      	ble.n	8001190 <slideText+0x120>
					menuSayac = checkSlideVal(state);
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f7ff ff45 	bl	8001008 <checkSlideVal>
 800117e:	4603      	mov	r3, r0
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <slideText+0x188>)
 8001184:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800118e:	e01f      	b.n	80011d0 <slideText+0x160>
				}
				checkEditMode();
 8001190:	f000 f8c2 	bl	8001318 <checkEditMode>
				if(editMode == 1) {
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <slideText+0x18c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d018      	beq.n	80011ce <slideText+0x15e>
					break;
				}
			    if(j >= startPos) {
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	db0a      	blt.n	80011ba <slideText+0x14a>
			    	lcd_print_char(startLine, j, ' ');
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	b2d1      	uxtb	r1, r2
 80011ac:	2220      	movs	r2, #32
 80011ae:	4618      	mov	r0, r3
 80011b0:	f007 fa5d 	bl	800866e <lcd_print_char>
			    	HAL_Delay(30);
 80011b4:	201e      	movs	r0, #30
 80011b6:	f007 ff9f 	bl	80090f8 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	3b01      	subs	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	7dfa      	ldrb	r2, [r7, #23]
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dacf      	bge.n	800116c <slideText+0xfc>
 80011cc:	e000      	b.n	80011d0 <slideText+0x160>
					break;
 80011ce:	bf00      	nop
		for(int z=0; z < uzunluk; z++) {
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	3301      	adds	r3, #1
 80011d4:	623b      	str	r3, [r7, #32]
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	6a3a      	ldr	r2, [r7, #32]
 80011da:	429a      	cmp	r2, r3
 80011dc:	f6ff af6f 	blt.w	80010be <slideText+0x4e>
 80011e0:	e000      	b.n	80011e4 <slideText+0x174>
				break;
 80011e2:	bf00      	nop
	while(mainLoopVal == 1) {
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	f43f af51 	beq.w	800108e <slideText+0x1e>
			    }
			}
		}
	}
}
 80011ec:	e000      	b.n	80011f0 <slideText+0x180>
			break;
 80011ee:	bf00      	nop
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000f60 	.word	0x20000f60
 80011fc:	20000f58 	.word	0x20000f58

08001200 <printCredentials>:

void printCredentials(int type) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d119      	bne.n	8001242 <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 800120e:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <printCredentials+0xf0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d105      	bne.n	8001222 <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 8001216:	4a37      	ldr	r2, [pc, #220]	@ (80012f4 <printCredentials+0xf4>)
 8001218:	2101      	movs	r1, #1
 800121a:	2001      	movs	r0, #1
 800121c:	f007 fa12 	bl	8008644 <lcd_print>
 8001220:	e004      	b.n	800122c <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8001222:	4a35      	ldr	r2, [pc, #212]	@ (80012f8 <printCredentials+0xf8>)
 8001224:	2101      	movs	r1, #1
 8001226:	2001      	movs	r0, #1
 8001228:	f007 fa0c 	bl	8008644 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 800122c:	4a33      	ldr	r2, [pc, #204]	@ (80012fc <printCredentials+0xfc>)
 800122e:	2101      	movs	r1, #1
 8001230:	2002      	movs	r0, #2
 8001232:	f007 fa07 	bl	8008644 <lcd_print>
		lcd_print(2, 13, "    ");
 8001236:	4a32      	ldr	r2, [pc, #200]	@ (8001300 <printCredentials+0x100>)
 8001238:	210d      	movs	r1, #13
 800123a:	2002      	movs	r0, #2
 800123c:	f007 fa02 	bl	8008644 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 8001240:	e051      	b.n	80012e6 <printCredentials+0xe6>
	} else if(type == 2) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d127      	bne.n	8001298 <printCredentials+0x98>
		int ssidLength = strlen(wifiSSID);
 8001248:	482e      	ldr	r0, [pc, #184]	@ (8001304 <printCredentials+0x104>)
 800124a:	f7fe ffeb 	bl	8000224 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 8001252:	4a2d      	ldr	r2, [pc, #180]	@ (8001308 <printCredentials+0x108>)
 8001254:	2101      	movs	r1, #1
 8001256:	2001      	movs	r0, #1
 8001258:	f007 f9f4 	bl	8008644 <lcd_print>
		if(ssidLength == 16) {
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b10      	cmp	r3, #16
 8001260:	d105      	bne.n	800126e <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 8001262:	4a28      	ldr	r2, [pc, #160]	@ (8001304 <printCredentials+0x104>)
 8001264:	2101      	movs	r1, #1
 8001266:	2002      	movs	r0, #2
 8001268:	f007 f9ec 	bl	8008644 <lcd_print>
}
 800126c:	e03b      	b.n	80012e6 <printCredentials+0xe6>
		} else if(ssidLength < 16) {
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	dc0a      	bgt.n	800128a <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 8001274:	4a25      	ldr	r2, [pc, #148]	@ (800130c <printCredentials+0x10c>)
 8001276:	2101      	movs	r1, #1
 8001278:	2002      	movs	r0, #2
 800127a:	f007 f9e3 	bl	8008644 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 800127e:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <printCredentials+0x104>)
 8001280:	2101      	movs	r1, #1
 8001282:	2002      	movs	r0, #2
 8001284:	f007 f9de 	bl	8008644 <lcd_print>
}
 8001288:	e02d      	b.n	80012e6 <printCredentials+0xe6>
			slideText(wifiSSID, 1, 2, 0);
 800128a:	2300      	movs	r3, #0
 800128c:	2202      	movs	r2, #2
 800128e:	2101      	movs	r1, #1
 8001290:	481c      	ldr	r0, [pc, #112]	@ (8001304 <printCredentials+0x104>)
 8001292:	f7ff feed 	bl	8001070 <slideText>
}
 8001296:	e026      	b.n	80012e6 <printCredentials+0xe6>
		int passLength = strlen(wifiPass);
 8001298:	481d      	ldr	r0, [pc, #116]	@ (8001310 <printCredentials+0x110>)
 800129a:	f7fe ffc3 	bl	8000224 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 80012a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001314 <printCredentials+0x114>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	2001      	movs	r0, #1
 80012a8:	f007 f9cc 	bl	8008644 <lcd_print>
		if(passLength == 16) {
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	d105      	bne.n	80012be <printCredentials+0xbe>
			lcd_print(2, 1, wifiPass);
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <printCredentials+0x110>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	2002      	movs	r0, #2
 80012b8:	f007 f9c4 	bl	8008644 <lcd_print>
}
 80012bc:	e013      	b.n	80012e6 <printCredentials+0xe6>
		} else if(passLength < 16) {
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	dc0a      	bgt.n	80012da <printCredentials+0xda>
			lcd_print(2, 1, "                ");
 80012c4:	4a11      	ldr	r2, [pc, #68]	@ (800130c <printCredentials+0x10c>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2002      	movs	r0, #2
 80012ca:	f007 f9bb 	bl	8008644 <lcd_print>
			lcd_print(2, 1, wifiPass);
 80012ce:	4a10      	ldr	r2, [pc, #64]	@ (8001310 <printCredentials+0x110>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	2002      	movs	r0, #2
 80012d4:	f007 f9b6 	bl	8008644 <lcd_print>
}
 80012d8:	e005      	b.n	80012e6 <printCredentials+0xe6>
			slideText(wifiPass, 1, 2, 1);
 80012da:	2301      	movs	r3, #1
 80012dc:	2202      	movs	r2, #2
 80012de:	2101      	movs	r1, #1
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <printCredentials+0x110>)
 80012e2:	f7ff fec5 	bl	8001070 <slideText>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000f81 	.word	0x20000f81
 80012f4:	0800d9b8 	.word	0x0800d9b8
 80012f8:	0800d9cc 	.word	0x0800d9cc
 80012fc:	20000f00 	.word	0x20000f00
 8001300:	0800d9e0 	.word	0x0800d9e0
 8001304:	20000f0c 	.word	0x20000f0c
 8001308:	0800d9e8 	.word	0x0800d9e8
 800130c:	0800d9fc 	.word	0x0800d9fc
 8001310:	20000f20 	.word	0x20000f20
 8001314:	0800da10 	.word	0x0800da10

08001318 <checkEditMode>:

void checkEditMode(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)) {
 800131c:	2102      	movs	r1, #2
 800131e:	4809      	ldr	r0, [pc, #36]	@ (8001344 <checkEditMode+0x2c>)
 8001320:	f008 fcba 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d109      	bne.n	800133e <checkEditMode+0x26>
 800132a:	2104      	movs	r1, #4
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <checkEditMode+0x2c>)
 800132e:	f008 fcb3 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	2b01      	cmp	r3, #1
 8001336:	d102      	bne.n	800133e <checkEditMode+0x26>
		editMode = 1;
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <checkEditMode+0x30>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
	}
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40010800 	.word	0x40010800
 8001348:	20000f58 	.word	0x20000f58

0800134c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001350:	f3bf 8f4f 	dsb	sy
}
 8001354:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <__NVIC_SystemReset+0x24>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800135e:	4904      	ldr	r1, [pc, #16]	@ (8001370 <__NVIC_SystemReset+0x24>)
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_SystemReset+0x28>)
 8001362:	4313      	orrs	r3, r2
 8001364:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <__NVIC_SystemReset+0x20>
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	05fa0004 	.word	0x05fa0004

08001378 <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800137e:	2101      	movs	r1, #1
 8001380:	4890      	ldr	r0, [pc, #576]	@ (80015c4 <menu+0x24c>)
 8001382:	f008 fc89 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b01      	cmp	r3, #1
 800138a:	f040 808e 	bne.w	80014aa <menu+0x132>
 800138e:	4b8e      	ldr	r3, [pc, #568]	@ (80015c8 <menu+0x250>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8086 	beq.w	80014aa <menu+0x132>
		menuSayac = menuSayac+1;
 800139e:	4b8b      	ldr	r3, [pc, #556]	@ (80015cc <menu+0x254>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b89      	ldr	r3, [pc, #548]	@ (80015cc <menu+0x254>)
 80013a8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80013aa:	4b88      	ldr	r3, [pc, #544]	@ (80015cc <menu+0x254>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b24      	cmp	r3, #36	@ 0x24
 80013b0:	d102      	bne.n	80013b8 <menu+0x40>
			menuSayac = 1;
 80013b2:	4b86      	ldr	r3, [pc, #536]	@ (80015cc <menu+0x254>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013b8:	4b84      	ldr	r3, [pc, #528]	@ (80015cc <menu+0x254>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b12      	cmp	r3, #18
 80013be:	d106      	bne.n	80013ce <menu+0x56>
 80013c0:	4b83      	ldr	r3, [pc, #524]	@ (80015d0 <menu+0x258>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <menu+0x56>
			menuSayac = 21;
 80013c8:	4b80      	ldr	r3, [pc, #512]	@ (80015cc <menu+0x254>)
 80013ca:	2215      	movs	r2, #21
 80013cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80013ce:	4b7f      	ldr	r3, [pc, #508]	@ (80015cc <menu+0x254>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d106      	bne.n	80013e4 <menu+0x6c>
 80013d6:	4b7f      	ldr	r3, [pc, #508]	@ (80015d4 <menu+0x25c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <menu+0x6c>
			menuSayac = 16;
 80013de:	4b7b      	ldr	r3, [pc, #492]	@ (80015cc <menu+0x254>)
 80013e0:	2210      	movs	r2, #16
 80013e2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80013e4:	4b79      	ldr	r3, [pc, #484]	@ (80015cc <menu+0x254>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b0d      	cmp	r3, #13
 80013ea:	d106      	bne.n	80013fa <menu+0x82>
 80013ec:	4b79      	ldr	r3, [pc, #484]	@ (80015d4 <menu+0x25c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <menu+0x82>
			menuSayac = 16;
 80013f4:	4b75      	ldr	r3, [pc, #468]	@ (80015cc <menu+0x254>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013fa:	4b74      	ldr	r3, [pc, #464]	@ (80015cc <menu+0x254>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b09      	cmp	r3, #9
 8001400:	d106      	bne.n	8001410 <menu+0x98>
 8001402:	4b74      	ldr	r3, [pc, #464]	@ (80015d4 <menu+0x25c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d102      	bne.n	8001410 <menu+0x98>
			menuSayac = 13;
 800140a:	4b70      	ldr	r3, [pc, #448]	@ (80015cc <menu+0x254>)
 800140c:	220d      	movs	r2, #13
 800140e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001410:	4b6e      	ldr	r3, [pc, #440]	@ (80015cc <menu+0x254>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b0a      	cmp	r3, #10
 8001416:	d10a      	bne.n	800142e <menu+0xb6>
 8001418:	4b6f      	ldr	r3, [pc, #444]	@ (80015d8 <menu+0x260>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d003      	beq.n	8001428 <menu+0xb0>
 8001420:	4b6d      	ldr	r3, [pc, #436]	@ (80015d8 <menu+0x260>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d102      	bne.n	800142e <menu+0xb6>
			menuSayac = 11;
 8001428:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <menu+0x254>)
 800142a:	220b      	movs	r2, #11
 800142c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800142e:	4b67      	ldr	r3, [pc, #412]	@ (80015cc <menu+0x254>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d10e      	bne.n	8001454 <menu+0xdc>
 8001436:	4b69      	ldr	r3, [pc, #420]	@ (80015dc <menu+0x264>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d003      	beq.n	8001446 <menu+0xce>
 800143e:	4b67      	ldr	r3, [pc, #412]	@ (80015dc <menu+0x264>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d106      	bne.n	8001454 <menu+0xdc>
 8001446:	4b63      	ldr	r3, [pc, #396]	@ (80015d4 <menu+0x25c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <menu+0xdc>
			menuSayac = 16;
 800144e:	4b5f      	ldr	r3, [pc, #380]	@ (80015cc <menu+0x254>)
 8001450:	2210      	movs	r2, #16
 8001452:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001454:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <menu+0x254>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d10e      	bne.n	800147a <menu+0x102>
 800145c:	4b5f      	ldr	r3, [pc, #380]	@ (80015dc <menu+0x264>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d003      	beq.n	800146c <menu+0xf4>
 8001464:	4b5d      	ldr	r3, [pc, #372]	@ (80015dc <menu+0x264>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d106      	bne.n	800147a <menu+0x102>
 800146c:	4b59      	ldr	r3, [pc, #356]	@ (80015d4 <menu+0x25c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d102      	bne.n	800147a <menu+0x102>
			menuSayac = 13;
 8001474:	4b55      	ldr	r3, [pc, #340]	@ (80015cc <menu+0x254>)
 8001476:	220d      	movs	r2, #13
 8001478:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800147a:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <menu+0x254>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	d106      	bne.n	8001490 <menu+0x118>
 8001482:	4b57      	ldr	r3, [pc, #348]	@ (80015e0 <menu+0x268>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d102      	bne.n	8001490 <menu+0x118>
			menuSayac = 16;
 800148a:	4b50      	ldr	r3, [pc, #320]	@ (80015cc <menu+0x254>)
 800148c:	2210      	movs	r2, #16
 800148e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001490:	4b4e      	ldr	r3, [pc, #312]	@ (80015cc <menu+0x254>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b18      	cmp	r3, #24
 8001496:	d106      	bne.n	80014a6 <menu+0x12e>
 8001498:	4b4d      	ldr	r3, [pc, #308]	@ (80015d0 <menu+0x258>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <menu+0x12e>
			menuSayac = 26;
 80014a0:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <menu+0x254>)
 80014a2:	221a      	movs	r2, #26
 80014a4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014a6:	f002 fc7b 	bl	8003da0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014aa:	2108      	movs	r1, #8
 80014ac:	484d      	ldr	r0, [pc, #308]	@ (80015e4 <menu+0x26c>)
 80014ae:	f008 fbf3 	bl	8009c98 <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d175      	bne.n	80015a4 <menu+0x22c>
 80014b8:	4b43      	ldr	r3, [pc, #268]	@ (80015c8 <menu+0x250>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f083 0301 	eor.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d06e      	beq.n	80015a4 <menu+0x22c>
		if (menuSayac <= 1) {
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <menu+0x254>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d802      	bhi.n	80014d4 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80014ce:	4b3f      	ldr	r3, [pc, #252]	@ (80015cc <menu+0x254>)
 80014d0:	2224      	movs	r2, #36	@ 0x24
 80014d2:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80014d4:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <menu+0x254>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <menu+0x254>)
 80014de:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80014e0:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <menu+0x254>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b14      	cmp	r3, #20
 80014e6:	d106      	bne.n	80014f6 <menu+0x17e>
 80014e8:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <menu+0x258>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <menu+0x17e>
			menuSayac = 17;
 80014f0:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <menu+0x254>)
 80014f2:	2211      	movs	r2, #17
 80014f4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80014f6:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <menu+0x254>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	d106      	bne.n	800150c <menu+0x194>
 80014fe:	4b35      	ldr	r3, [pc, #212]	@ (80015d4 <menu+0x25c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <menu+0x194>
			menuSayac = 7;
 8001506:	4b31      	ldr	r3, [pc, #196]	@ (80015cc <menu+0x254>)
 8001508:	2207      	movs	r2, #7
 800150a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <menu+0x254>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d106      	bne.n	8001522 <menu+0x1aa>
 8001514:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <menu+0x25c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d102      	bne.n	8001522 <menu+0x1aa>
			menuSayac = 12;
 800151c:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <menu+0x254>)
 800151e:	220c      	movs	r2, #12
 8001520:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001522:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <menu+0x254>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d106      	bne.n	8001538 <menu+0x1c0>
 800152a:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <menu+0x25c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d102      	bne.n	8001538 <menu+0x1c0>
			menuSayac = 8;
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <menu+0x254>)
 8001534:	2208      	movs	r2, #8
 8001536:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <menu+0x254>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b0a      	cmp	r3, #10
 800153e:	d10a      	bne.n	8001556 <menu+0x1de>
 8001540:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <menu+0x260>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d003      	beq.n	8001550 <menu+0x1d8>
 8001548:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <menu+0x260>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d102      	bne.n	8001556 <menu+0x1de>
			menuSayac = 9;
 8001550:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <menu+0x254>)
 8001552:	2209      	movs	r2, #9
 8001554:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <menu+0x254>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d10a      	bne.n	8001574 <menu+0x1fc>
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <menu+0x264>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d003      	beq.n	800156e <menu+0x1f6>
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <menu+0x264>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d102      	bne.n	8001574 <menu+0x1fc>
			menuSayac = 11;
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <menu+0x254>)
 8001570:	220b      	movs	r2, #11
 8001572:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <menu+0x254>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d106      	bne.n	800158a <menu+0x212>
 800157c:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <menu+0x268>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d102      	bne.n	800158a <menu+0x212>
			menuSayac = 14;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <menu+0x254>)
 8001586:	220e      	movs	r2, #14
 8001588:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <menu+0x254>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b19      	cmp	r3, #25
 8001590:	d106      	bne.n	80015a0 <menu+0x228>
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <menu+0x258>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <menu+0x228>
			menuSayac = 23;
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <menu+0x254>)
 800159c:	2217      	movs	r2, #23
 800159e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015a0:	f002 fbfe 	bl	8003da0 <bekle>
	}

	if (menuSayac == 0) {
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <menu+0x254>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d121      	bne.n	80015f0 <menu+0x278>
		lcd_print(1, 1, menuyeGirildiText);
 80015ac:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <menu+0x270>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	2001      	movs	r0, #1
 80015b2:	f007 f847 	bl	8008644 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80015b6:	4a0d      	ldr	r2, [pc, #52]	@ (80015ec <menu+0x274>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	2002      	movs	r0, #2
 80015bc:	f007 f842 	bl	8008644 <lcd_print>
 80015c0:	e016      	b.n	80015f0 <menu+0x278>
 80015c2:	bf00      	nop
 80015c4:	40010800 	.word	0x40010800
 80015c8:	20000f8f 	.word	0x20000f8f
 80015cc:	20000f60 	.word	0x20000f60
 80015d0:	20000f6f 	.word	0x20000f6f
 80015d4:	20000f68 	.word	0x20000f68
 80015d8:	20000f69 	.word	0x20000f69
 80015dc:	20000f6a 	.word	0x20000f6a
 80015e0:	20000f6b 	.word	0x20000f6b
 80015e4:	40011000 	.word	0x40011000
 80015e8:	200010c0 	.word	0x200010c0
 80015ec:	200010d4 	.word	0x200010d4
	}

	if (menuSayac == 1) {
 80015f0:	4bb0      	ldr	r3, [pc, #704]	@ (80018b4 <menu+0x53c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f040 81ef 	bne.w	80019d8 <menu+0x660>
		lcd_print(1, 1, hataKayitListText);
 80015fa:	4aaf      	ldr	r2, [pc, #700]	@ (80018b8 <menu+0x540>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	2001      	movs	r0, #1
 8001600:	f007 f820 	bl	8008644 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001604:	4bad      	ldr	r3, [pc, #692]	@ (80018bc <menu+0x544>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d115      	bne.n	8001638 <menu+0x2c0>
			lcd_print(2, 1, birHataKoduText);
 800160c:	4aac      	ldr	r2, [pc, #688]	@ (80018c0 <menu+0x548>)
 800160e:	2101      	movs	r1, #1
 8001610:	2002      	movs	r0, #2
 8001612:	f007 f817 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "   ");
 8001616:	4aab      	ldr	r2, [pc, #684]	@ (80018c4 <menu+0x54c>)
 8001618:	210f      	movs	r1, #15
 800161a:	2002      	movs	r0, #2
 800161c:	f007 f812 	bl	8008644 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001620:	4ba9      	ldr	r3, [pc, #676]	@ (80018c8 <menu+0x550>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	220a      	movs	r2, #10
 8001626:	49a9      	ldr	r1, [pc, #676]	@ (80018cc <menu+0x554>)
 8001628:	4618      	mov	r0, r3
 800162a:	f00b fb61 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 800162e:	4aa7      	ldr	r2, [pc, #668]	@ (80018cc <menu+0x554>)
 8001630:	210e      	movs	r1, #14
 8001632:	2002      	movs	r0, #2
 8001634:	f007 f806 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001638:	4ba0      	ldr	r3, [pc, #640]	@ (80018bc <menu+0x544>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d115      	bne.n	800166c <menu+0x2f4>
			lcd_print(2, 1, ikiHataKoduText);
 8001640:	4aa3      	ldr	r2, [pc, #652]	@ (80018d0 <menu+0x558>)
 8001642:	2101      	movs	r1, #1
 8001644:	2002      	movs	r0, #2
 8001646:	f006 fffd 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "  ");
 800164a:	4aa2      	ldr	r2, [pc, #648]	@ (80018d4 <menu+0x55c>)
 800164c:	210f      	movs	r1, #15
 800164e:	2002      	movs	r0, #2
 8001650:	f006 fff8 	bl	8008644 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001654:	4ba0      	ldr	r3, [pc, #640]	@ (80018d8 <menu+0x560>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	220a      	movs	r2, #10
 800165a:	499c      	ldr	r1, [pc, #624]	@ (80018cc <menu+0x554>)
 800165c:	4618      	mov	r0, r3
 800165e:	f00b fb47 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 8001662:	4a9a      	ldr	r2, [pc, #616]	@ (80018cc <menu+0x554>)
 8001664:	210e      	movs	r1, #14
 8001666:	2002      	movs	r0, #2
 8001668:	f006 ffec 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800166c:	4b93      	ldr	r3, [pc, #588]	@ (80018bc <menu+0x544>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d115      	bne.n	80016a0 <menu+0x328>
			lcd_print(2, 1, ucHataKoduText);
 8001674:	4a99      	ldr	r2, [pc, #612]	@ (80018dc <menu+0x564>)
 8001676:	2101      	movs	r1, #1
 8001678:	2002      	movs	r0, #2
 800167a:	f006 ffe3 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "  ");
 800167e:	4a95      	ldr	r2, [pc, #596]	@ (80018d4 <menu+0x55c>)
 8001680:	210f      	movs	r1, #15
 8001682:	2002      	movs	r0, #2
 8001684:	f006 ffde 	bl	8008644 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001688:	4b95      	ldr	r3, [pc, #596]	@ (80018e0 <menu+0x568>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	220a      	movs	r2, #10
 800168e:	498f      	ldr	r1, [pc, #572]	@ (80018cc <menu+0x554>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00b fb2d 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 8001696:	4a8d      	ldr	r2, [pc, #564]	@ (80018cc <menu+0x554>)
 8001698:	210e      	movs	r1, #14
 800169a:	2002      	movs	r0, #2
 800169c:	f006 ffd2 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80016a0:	4b86      	ldr	r3, [pc, #536]	@ (80018bc <menu+0x544>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d115      	bne.n	80016d4 <menu+0x35c>
			lcd_print(2, 1, dortHataKoduText);
 80016a8:	4a8e      	ldr	r2, [pc, #568]	@ (80018e4 <menu+0x56c>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	2002      	movs	r0, #2
 80016ae:	f006 ffc9 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "  ");
 80016b2:	4a88      	ldr	r2, [pc, #544]	@ (80018d4 <menu+0x55c>)
 80016b4:	210f      	movs	r1, #15
 80016b6:	2002      	movs	r0, #2
 80016b8:	f006 ffc4 	bl	8008644 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80016bc:	4b8a      	ldr	r3, [pc, #552]	@ (80018e8 <menu+0x570>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	220a      	movs	r2, #10
 80016c2:	4982      	ldr	r1, [pc, #520]	@ (80018cc <menu+0x554>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00b fb13 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 80016ca:	4a80      	ldr	r2, [pc, #512]	@ (80018cc <menu+0x554>)
 80016cc:	210e      	movs	r1, #14
 80016ce:	2002      	movs	r0, #2
 80016d0:	f006 ffb8 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80016d4:	4b79      	ldr	r3, [pc, #484]	@ (80018bc <menu+0x544>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d115      	bne.n	8001708 <menu+0x390>
			lcd_print(2, 1, besHataKoduText);
 80016dc:	4a83      	ldr	r2, [pc, #524]	@ (80018ec <menu+0x574>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f006 ffaf 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "  ");
 80016e6:	4a7b      	ldr	r2, [pc, #492]	@ (80018d4 <menu+0x55c>)
 80016e8:	210f      	movs	r1, #15
 80016ea:	2002      	movs	r0, #2
 80016ec:	f006 ffaa 	bl	8008644 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80016f0:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <menu+0x578>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	220a      	movs	r2, #10
 80016f6:	4975      	ldr	r1, [pc, #468]	@ (80018cc <menu+0x554>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00b faf9 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 80016fe:	4a73      	ldr	r2, [pc, #460]	@ (80018cc <menu+0x554>)
 8001700:	210e      	movs	r1, #14
 8001702:	2002      	movs	r0, #2
 8001704:	f006 ff9e 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001708:	4b6c      	ldr	r3, [pc, #432]	@ (80018bc <menu+0x544>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d115      	bne.n	800173c <menu+0x3c4>
			lcd_print(2, 1, altiHataKoduText);
 8001710:	4a78      	ldr	r2, [pc, #480]	@ (80018f4 <menu+0x57c>)
 8001712:	2101      	movs	r1, #1
 8001714:	2002      	movs	r0, #2
 8001716:	f006 ff95 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "  ");
 800171a:	4a6e      	ldr	r2, [pc, #440]	@ (80018d4 <menu+0x55c>)
 800171c:	210f      	movs	r1, #15
 800171e:	2002      	movs	r0, #2
 8001720:	f006 ff90 	bl	8008644 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001724:	4b74      	ldr	r3, [pc, #464]	@ (80018f8 <menu+0x580>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	220a      	movs	r2, #10
 800172a:	4968      	ldr	r1, [pc, #416]	@ (80018cc <menu+0x554>)
 800172c:	4618      	mov	r0, r3
 800172e:	f00b fadf 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 8001732:	4a66      	ldr	r2, [pc, #408]	@ (80018cc <menu+0x554>)
 8001734:	210e      	movs	r1, #14
 8001736:	2002      	movs	r0, #2
 8001738:	f006 ff84 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800173c:	4b5f      	ldr	r3, [pc, #380]	@ (80018bc <menu+0x544>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d115      	bne.n	8001770 <menu+0x3f8>
			lcd_print(2, 1, yediHataKoduText);
 8001744:	4a6d      	ldr	r2, [pc, #436]	@ (80018fc <menu+0x584>)
 8001746:	2101      	movs	r1, #1
 8001748:	2002      	movs	r0, #2
 800174a:	f006 ff7b 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "  ");
 800174e:	4a61      	ldr	r2, [pc, #388]	@ (80018d4 <menu+0x55c>)
 8001750:	210f      	movs	r1, #15
 8001752:	2002      	movs	r0, #2
 8001754:	f006 ff76 	bl	8008644 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001758:	4b69      	ldr	r3, [pc, #420]	@ (8001900 <menu+0x588>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	220a      	movs	r2, #10
 800175e:	495b      	ldr	r1, [pc, #364]	@ (80018cc <menu+0x554>)
 8001760:	4618      	mov	r0, r3
 8001762:	f00b fac5 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 8001766:	4a59      	ldr	r2, [pc, #356]	@ (80018cc <menu+0x554>)
 8001768:	210e      	movs	r1, #14
 800176a:	2002      	movs	r0, #2
 800176c:	f006 ff6a 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001770:	4b52      	ldr	r3, [pc, #328]	@ (80018bc <menu+0x544>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b07      	cmp	r3, #7
 8001776:	d115      	bne.n	80017a4 <menu+0x42c>
			lcd_print(2, 1, sekizHataKoduText);
 8001778:	4a62      	ldr	r2, [pc, #392]	@ (8001904 <menu+0x58c>)
 800177a:	2101      	movs	r1, #1
 800177c:	2002      	movs	r0, #2
 800177e:	f006 ff61 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "  ");
 8001782:	4a54      	ldr	r2, [pc, #336]	@ (80018d4 <menu+0x55c>)
 8001784:	210f      	movs	r1, #15
 8001786:	2002      	movs	r0, #2
 8001788:	f006 ff5c 	bl	8008644 <lcd_print>
			itoa(hataKayit8, snum, 10);
 800178c:	4b5e      	ldr	r3, [pc, #376]	@ (8001908 <menu+0x590>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	220a      	movs	r2, #10
 8001792:	494e      	ldr	r1, [pc, #312]	@ (80018cc <menu+0x554>)
 8001794:	4618      	mov	r0, r3
 8001796:	f00b faab 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 800179a:	4a4c      	ldr	r2, [pc, #304]	@ (80018cc <menu+0x554>)
 800179c:	210e      	movs	r1, #14
 800179e:	2002      	movs	r0, #2
 80017a0:	f006 ff50 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80017a4:	4b45      	ldr	r3, [pc, #276]	@ (80018bc <menu+0x544>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d115      	bne.n	80017d8 <menu+0x460>
			lcd_print(2, 1, dokuzHataKoduText);
 80017ac:	4a57      	ldr	r2, [pc, #348]	@ (800190c <menu+0x594>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	2002      	movs	r0, #2
 80017b2:	f006 ff47 	bl	8008644 <lcd_print>
			lcd_print(2, 15, "  ");
 80017b6:	4a47      	ldr	r2, [pc, #284]	@ (80018d4 <menu+0x55c>)
 80017b8:	210f      	movs	r1, #15
 80017ba:	2002      	movs	r0, #2
 80017bc:	f006 ff42 	bl	8008644 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80017c0:	4b53      	ldr	r3, [pc, #332]	@ (8001910 <menu+0x598>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	220a      	movs	r2, #10
 80017c6:	4941      	ldr	r1, [pc, #260]	@ (80018cc <menu+0x554>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00b fa91 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 80017ce:	4a3f      	ldr	r2, [pc, #252]	@ (80018cc <menu+0x554>)
 80017d0:	210e      	movs	r1, #14
 80017d2:	2002      	movs	r0, #2
 80017d4:	f006 ff36 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017d8:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <menu+0x544>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d115      	bne.n	800180c <menu+0x494>
			lcd_print(2, 1, onHataKoduText);
 80017e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001914 <menu+0x59c>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f006 ff2d 	bl	8008644 <lcd_print>
			lcd_print(2, 16, " ");
 80017ea:	4a4b      	ldr	r2, [pc, #300]	@ (8001918 <menu+0x5a0>)
 80017ec:	2110      	movs	r1, #16
 80017ee:	2002      	movs	r0, #2
 80017f0:	f006 ff28 	bl	8008644 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80017f4:	4b49      	ldr	r3, [pc, #292]	@ (800191c <menu+0x5a4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	220a      	movs	r2, #10
 80017fa:	4934      	ldr	r1, [pc, #208]	@ (80018cc <menu+0x554>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00b fa77 	bl	800ccf0 <itoa>
			lcd_print(2, 15, snum);
 8001802:	4a32      	ldr	r2, [pc, #200]	@ (80018cc <menu+0x554>)
 8001804:	210f      	movs	r1, #15
 8001806:	2002      	movs	r0, #2
 8001808:	f006 ff1c 	bl	8008644 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800180c:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <menu+0x544>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b0a      	cmp	r3, #10
 8001812:	d104      	bne.n	800181e <menu+0x4a6>
			lcd_print(2, 1, silmekIcinText);
 8001814:	4a42      	ldr	r2, [pc, #264]	@ (8001920 <menu+0x5a8>)
 8001816:	2101      	movs	r1, #1
 8001818:	2002      	movs	r0, #2
 800181a:	f006 ff13 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800181e:	2102      	movs	r1, #2
 8001820:	4840      	ldr	r0, [pc, #256]	@ (8001924 <menu+0x5ac>)
 8001822:	f008 fa39 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d119      	bne.n	8001860 <menu+0x4e8>
 800182c:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <menu+0x5b0>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d012      	beq.n	8001860 <menu+0x4e8>
 800183a:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <menu+0x5b4>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10e      	bne.n	8001860 <menu+0x4e8>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <menu+0x544>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <menu+0x544>)
 800184c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <menu+0x544>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b0a      	cmp	r3, #10
 8001854:	d902      	bls.n	800185c <menu+0x4e4>
				hataGostermeSirasi = 0;
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <menu+0x544>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800185c:	f002 faa0 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001860:	2104      	movs	r1, #4
 8001862:	4830      	ldr	r0, [pc, #192]	@ (8001924 <menu+0x5ac>)
 8001864:	f008 fa18 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d119      	bne.n	80018a2 <menu+0x52a>
 800186e:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <menu+0x5b0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	f083 0301 	eor.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d012      	beq.n	80018a2 <menu+0x52a>
 800187c:	4b2b      	ldr	r3, [pc, #172]	@ (800192c <menu+0x5b4>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10e      	bne.n	80018a2 <menu+0x52a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <menu+0x544>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <menu+0x544>)
 800188e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001890:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <menu+0x544>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b0b      	cmp	r3, #11
 8001896:	d902      	bls.n	800189e <menu+0x526>
	    		hataGostermeSirasi = 10;
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <menu+0x544>)
 800189a:	220a      	movs	r2, #10
 800189c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800189e:	f002 fa7f 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80018a2:	2108      	movs	r1, #8
 80018a4:	481f      	ldr	r0, [pc, #124]	@ (8001924 <menu+0x5ac>)
 80018a6:	f008 f9f7 	bl	8009c98 <HAL_GPIO_ReadPin>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	f040 8093 	bne.w	80019d8 <menu+0x660>
 80018b2:	e03d      	b.n	8001930 <menu+0x5b8>
 80018b4:	20000f60 	.word	0x20000f60
 80018b8:	200010e8 	.word	0x200010e8
 80018bc:	20000f62 	.word	0x20000f62
 80018c0:	200010fc 	.word	0x200010fc
 80018c4:	0800da24 	.word	0x0800da24
 80018c8:	20000f82 	.word	0x20000f82
 80018cc:	20000ef8 	.word	0x20000ef8
 80018d0:	20001110 	.word	0x20001110
 80018d4:	0800da28 	.word	0x0800da28
 80018d8:	20000f83 	.word	0x20000f83
 80018dc:	20001124 	.word	0x20001124
 80018e0:	20000f84 	.word	0x20000f84
 80018e4:	20001138 	.word	0x20001138
 80018e8:	20000f85 	.word	0x20000f85
 80018ec:	2000114c 	.word	0x2000114c
 80018f0:	20000f86 	.word	0x20000f86
 80018f4:	20001160 	.word	0x20001160
 80018f8:	20000f87 	.word	0x20000f87
 80018fc:	20001174 	.word	0x20001174
 8001900:	20000f88 	.word	0x20000f88
 8001904:	20001188 	.word	0x20001188
 8001908:	20000f89 	.word	0x20000f89
 800190c:	2000119c 	.word	0x2000119c
 8001910:	20000f8a 	.word	0x20000f8a
 8001914:	200011b0 	.word	0x200011b0
 8001918:	0800da2c 	.word	0x0800da2c
 800191c:	20000f8b 	.word	0x20000f8b
 8001920:	200011c4 	.word	0x200011c4
 8001924:	40010800 	.word	0x40010800
 8001928:	20000f8f 	.word	0x20000f8f
 800192c:	20000f6f 	.word	0x20000f6f
 8001930:	4b7d      	ldr	r3, [pc, #500]	@ (8001b28 <menu+0x7b0>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d04c      	beq.n	80019d8 <menu+0x660>
 800193e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b2c <menu+0x7b4>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d148      	bne.n	80019d8 <menu+0x660>
			hataKayit1 = 0; eepromData[37] = 0;
 8001946:	4b7a      	ldr	r3, [pc, #488]	@ (8001b30 <menu+0x7b8>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	4b79      	ldr	r3, [pc, #484]	@ (8001b34 <menu+0x7bc>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001954:	4b78      	ldr	r3, [pc, #480]	@ (8001b38 <menu+0x7c0>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	4b76      	ldr	r3, [pc, #472]	@ (8001b34 <menu+0x7bc>)
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001962:	4b76      	ldr	r3, [pc, #472]	@ (8001b3c <menu+0x7c4>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	4b72      	ldr	r3, [pc, #456]	@ (8001b34 <menu+0x7bc>)
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001970:	4b73      	ldr	r3, [pc, #460]	@ (8001b40 <menu+0x7c8>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	4b6f      	ldr	r3, [pc, #444]	@ (8001b34 <menu+0x7bc>)
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800197e:	4b71      	ldr	r3, [pc, #452]	@ (8001b44 <menu+0x7cc>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	4b6b      	ldr	r3, [pc, #428]	@ (8001b34 <menu+0x7bc>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800198c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b48 <menu+0x7d0>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	4b68      	ldr	r3, [pc, #416]	@ (8001b34 <menu+0x7bc>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800199a:	4b6c      	ldr	r3, [pc, #432]	@ (8001b4c <menu+0x7d4>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	4b64      	ldr	r3, [pc, #400]	@ (8001b34 <menu+0x7bc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80019a8:	4b69      	ldr	r3, [pc, #420]	@ (8001b50 <menu+0x7d8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	4b61      	ldr	r3, [pc, #388]	@ (8001b34 <menu+0x7bc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80019b6:	4b67      	ldr	r3, [pc, #412]	@ (8001b54 <menu+0x7dc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001b34 <menu+0x7bc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80019c4:	4b64      	ldr	r3, [pc, #400]	@ (8001b58 <menu+0x7e0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001b34 <menu+0x7bc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80019d2:	4b62      	ldr	r3, [pc, #392]	@ (8001b5c <menu+0x7e4>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019d8:	4b61      	ldr	r3, [pc, #388]	@ (8001b60 <menu+0x7e8>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	f040 808e 	bne.w	8001afe <menu+0x786>
		lcd_print(1, 1, calismaSekliText);
 80019e2:	4a60      	ldr	r2, [pc, #384]	@ (8001b64 <menu+0x7ec>)
 80019e4:	2101      	movs	r1, #1
 80019e6:	2001      	movs	r0, #1
 80019e8:	f006 fe2c 	bl	8008644 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001b68 <menu+0x7f0>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d003      	beq.n	80019fc <menu+0x684>
 80019f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b68 <menu+0x7f0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d104      	bne.n	8001a06 <menu+0x68e>
			lcd_print(2, 1, devirmeYuruyusText);
 80019fc:	4a5b      	ldr	r2, [pc, #364]	@ (8001b6c <menu+0x7f4>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	2002      	movs	r0, #2
 8001a02:	f006 fe1f 	bl	8008644 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a06:	4b5a      	ldr	r3, [pc, #360]	@ (8001b70 <menu+0x7f8>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <menu+0x6a8>
 8001a0e:	4b56      	ldr	r3, [pc, #344]	@ (8001b68 <menu+0x7f0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d104      	bne.n	8001a20 <menu+0x6a8>
			lcd_print(2, 1, bastikcaCalisanText);
 8001a16:	4a57      	ldr	r2, [pc, #348]	@ (8001b74 <menu+0x7fc>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f006 fe12 	bl	8008644 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001a20:	4b53      	ldr	r3, [pc, #332]	@ (8001b70 <menu+0x7f8>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d108      	bne.n	8001a3a <menu+0x6c2>
 8001a28:	4b4f      	ldr	r3, [pc, #316]	@ (8001b68 <menu+0x7f0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d104      	bne.n	8001a3a <menu+0x6c2>
			lcd_print(2, 1, basGonderText);
 8001a30:	4a51      	ldr	r2, [pc, #324]	@ (8001b78 <menu+0x800>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f006 fe05 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	484f      	ldr	r0, [pc, #316]	@ (8001b7c <menu+0x804>)
 8001a3e:	f008 f92b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d119      	bne.n	8001a7c <menu+0x704>
 8001a48:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <menu+0x7b0>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	f083 0301 	eor.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d012      	beq.n	8001a7c <menu+0x704>
 8001a56:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <menu+0x7f0>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10e      	bne.n	8001a7c <menu+0x704>
			calismaSekli = calismaSekli + 1;
 8001a5e:	4b44      	ldr	r3, [pc, #272]	@ (8001b70 <menu+0x7f8>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <menu+0x7f8>)
 8001a68:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a6a:	4b41      	ldr	r3, [pc, #260]	@ (8001b70 <menu+0x7f8>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d902      	bls.n	8001a78 <menu+0x700>
				calismaSekli = 0;
 8001a72:	4b3f      	ldr	r3, [pc, #252]	@ (8001b70 <menu+0x7f8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a78:	f002 f992 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	483f      	ldr	r0, [pc, #252]	@ (8001b7c <menu+0x804>)
 8001a80:	f008 f90a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d119      	bne.n	8001abe <menu+0x746>
 8001a8a:	4b27      	ldr	r3, [pc, #156]	@ (8001b28 <menu+0x7b0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	f083 0301 	eor.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d012      	beq.n	8001abe <menu+0x746>
 8001a98:	4b33      	ldr	r3, [pc, #204]	@ (8001b68 <menu+0x7f0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10e      	bne.n	8001abe <menu+0x746>
			calismaSekli = calismaSekli - 1;
 8001aa0:	4b33      	ldr	r3, [pc, #204]	@ (8001b70 <menu+0x7f8>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <menu+0x7f8>)
 8001aaa:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001aac:	4b30      	ldr	r3, [pc, #192]	@ (8001b70 <menu+0x7f8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <menu+0x742>
	    		calismaSekli = 1;
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <menu+0x7f8>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001aba:	f002 f971 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001abe:	2108      	movs	r1, #8
 8001ac0:	482e      	ldr	r0, [pc, #184]	@ (8001b7c <menu+0x804>)
 8001ac2:	f008 f8e9 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d118      	bne.n	8001afe <menu+0x786>
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <menu+0x7b0>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	f083 0301 	eor.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d011      	beq.n	8001afe <menu+0x786>
			eepromData[1] = calismaSekli;
 8001ada:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <menu+0x7f8>)
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <menu+0x7bc>)
 8001ae0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <menu+0x7f8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d106      	bne.n	8001af8 <menu+0x780>
				altLimit = 1;
 8001aea:	4b25      	ldr	r3, [pc, #148]	@ (8001b80 <menu+0x808>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001af0:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <menu+0x808>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <menu+0x7bc>)
 8001af6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001af8:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <menu+0x7e4>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <menu+0x7e8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	f040 809c 	bne.w	8001c40 <menu+0x8c8>
		lcd_print(1, 1, emniyetCercevesiText);
 8001b08:	4a1e      	ldr	r2, [pc, #120]	@ (8001b84 <menu+0x80c>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f006 fd99 	bl	8008644 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001b12:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <menu+0x810>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d13a      	bne.n	8001b90 <menu+0x818>
			lcd_print(2, 1, pasifText);
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <menu+0x814>)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f006 fd90 	bl	8008644 <lcd_print>
 8001b24:	e03d      	b.n	8001ba2 <menu+0x82a>
 8001b26:	bf00      	nop
 8001b28:	20000f8f 	.word	0x20000f8f
 8001b2c:	20000f62 	.word	0x20000f62
 8001b30:	20000f82 	.word	0x20000f82
 8001b34:	20000e88 	.word	0x20000e88
 8001b38:	20000f83 	.word	0x20000f83
 8001b3c:	20000f84 	.word	0x20000f84
 8001b40:	20000f85 	.word	0x20000f85
 8001b44:	20000f86 	.word	0x20000f86
 8001b48:	20000f87 	.word	0x20000f87
 8001b4c:	20000f88 	.word	0x20000f88
 8001b50:	20000f89 	.word	0x20000f89
 8001b54:	20000f8a 	.word	0x20000f8a
 8001b58:	20000f8b 	.word	0x20000f8b
 8001b5c:	20000f8c 	.word	0x20000f8c
 8001b60:	20000f60 	.word	0x20000f60
 8001b64:	200011d8 	.word	0x200011d8
 8001b68:	20000f6f 	.word	0x20000f6f
 8001b6c:	200011ec 	.word	0x200011ec
 8001b70:	20000f61 	.word	0x20000f61
 8001b74:	20001200 	.word	0x20001200
 8001b78:	20001214 	.word	0x20001214
 8001b7c:	40010800 	.word	0x40010800
 8001b80:	20000f66 	.word	0x20000f66
 8001b84:	20001228 	.word	0x20001228
 8001b88:	20000f64 	.word	0x20000f64
 8001b8c:	2000123c 	.word	0x2000123c
		} else if(emniyetCercevesi == 1) {
 8001b90:	4b6b      	ldr	r3, [pc, #428]	@ (8001d40 <menu+0x9c8>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d104      	bne.n	8001ba2 <menu+0x82a>
			lcd_print(2, 1, ondSafetyTextGN);
 8001b98:	4a6a      	ldr	r2, [pc, #424]	@ (8001d44 <menu+0x9cc>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f006 fd51 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	4868      	ldr	r0, [pc, #416]	@ (8001d48 <menu+0x9d0>)
 8001ba6:	f008 f877 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d115      	bne.n	8001bdc <menu+0x864>
 8001bb0:	4b66      	ldr	r3, [pc, #408]	@ (8001d4c <menu+0x9d4>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	f083 0301 	eor.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00e      	beq.n	8001bdc <menu+0x864>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001bbe:	4b60      	ldr	r3, [pc, #384]	@ (8001d40 <menu+0x9c8>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d40 <menu+0x9c8>)
 8001bc8:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001bca:	4b5d      	ldr	r3, [pc, #372]	@ (8001d40 <menu+0x9c8>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d902      	bls.n	8001bd8 <menu+0x860>
				emniyetCercevesi = 0;
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d40 <menu+0x9c8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bd8:	f002 f8e2 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bdc:	2104      	movs	r1, #4
 8001bde:	485a      	ldr	r0, [pc, #360]	@ (8001d48 <menu+0x9d0>)
 8001be0:	f008 f85a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d115      	bne.n	8001c16 <menu+0x89e>
 8001bea:	4b58      	ldr	r3, [pc, #352]	@ (8001d4c <menu+0x9d4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <menu+0x89e>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001bf8:	4b51      	ldr	r3, [pc, #324]	@ (8001d40 <menu+0x9c8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b4f      	ldr	r3, [pc, #316]	@ (8001d40 <menu+0x9c8>)
 8001c02:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c04:	4b4e      	ldr	r3, [pc, #312]	@ (8001d40 <menu+0x9c8>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <menu+0x89a>
		   		emniyetCercevesi = 1;
 8001c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d40 <menu+0x9c8>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c12:	f002 f8c5 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c16:	2108      	movs	r1, #8
 8001c18:	484b      	ldr	r0, [pc, #300]	@ (8001d48 <menu+0x9d0>)
 8001c1a:	f008 f83d 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10d      	bne.n	8001c40 <menu+0x8c8>
 8001c24:	4b49      	ldr	r3, [pc, #292]	@ (8001d4c <menu+0x9d4>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f083 0301 	eor.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <menu+0x8c8>
			eepromData[2] = emniyetCercevesi;
 8001c32:	4b43      	ldr	r3, [pc, #268]	@ (8001d40 <menu+0x9c8>)
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	4b46      	ldr	r3, [pc, #280]	@ (8001d50 <menu+0x9d8>)
 8001c38:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001c3a:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <menu+0x9dc>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001c40:	4b45      	ldr	r3, [pc, #276]	@ (8001d58 <menu+0x9e0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d166      	bne.n	8001d16 <menu+0x99e>
		lcd_print(1, 1, yavaslamaLimitText);
 8001c48:	4a44      	ldr	r2, [pc, #272]	@ (8001d5c <menu+0x9e4>)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f006 fcf9 	bl	8008644 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001c52:	4b43      	ldr	r3, [pc, #268]	@ (8001d60 <menu+0x9e8>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <menu+0x8ee>
			lcd_print(2, 1, pasifText);
 8001c5a:	4a42      	ldr	r2, [pc, #264]	@ (8001d64 <menu+0x9ec>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f006 fcf0 	bl	8008644 <lcd_print>
 8001c64:	e008      	b.n	8001c78 <menu+0x900>
		} else if(yavaslamaLimit == 1) {
 8001c66:	4b3e      	ldr	r3, [pc, #248]	@ (8001d60 <menu+0x9e8>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d104      	bne.n	8001c78 <menu+0x900>
			lcd_print(2, 1, aktifText);
 8001c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d68 <menu+0x9f0>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	2002      	movs	r0, #2
 8001c74:	f006 fce6 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4833      	ldr	r0, [pc, #204]	@ (8001d48 <menu+0x9d0>)
 8001c7c:	f008 f80c 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d115      	bne.n	8001cb2 <menu+0x93a>
 8001c86:	4b31      	ldr	r3, [pc, #196]	@ (8001d4c <menu+0x9d4>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	f083 0301 	eor.w	r3, r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00e      	beq.n	8001cb2 <menu+0x93a>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001c94:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <menu+0x9e8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <menu+0x9e8>)
 8001c9e:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <menu+0x9e8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d902      	bls.n	8001cae <menu+0x936>
				yavaslamaLimit = 0;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <menu+0x9e8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cae:	f002 f877 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	4824      	ldr	r0, [pc, #144]	@ (8001d48 <menu+0x9d0>)
 8001cb6:	f007 ffef 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d115      	bne.n	8001cec <menu+0x974>
 8001cc0:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <menu+0x9d4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00e      	beq.n	8001cec <menu+0x974>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001cce:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <menu+0x9e8>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <menu+0x9e8>)
 8001cd8:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <menu+0x9e8>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <menu+0x970>
		   		yavaslamaLimit = 1;
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <menu+0x9e8>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ce8:	f002 f85a 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cec:	2108      	movs	r1, #8
 8001cee:	4816      	ldr	r0, [pc, #88]	@ (8001d48 <menu+0x9d0>)
 8001cf0:	f007 ffd2 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10d      	bne.n	8001d16 <menu+0x99e>
 8001cfa:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <menu+0x9d4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <menu+0x99e>
			eepromData[4] = yavaslamaLimit;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <menu+0x9e8>)
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <menu+0x9d8>)
 8001d0e:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <menu+0x9dc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <menu+0x9e0>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	f040 80aa 	bne.w	8001e74 <menu+0xafc>
		lcd_print(1, 1, altLimitText);
 8001d20:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <menu+0x9f4>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	2001      	movs	r0, #1
 8001d26:	f006 fc8d 	bl	8008644 <lcd_print>

		if(altLimit == 0) {
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <menu+0x9f8>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d120      	bne.n	8001d74 <menu+0x9fc>
			lcd_print(2, 1, pasifText);
 8001d32:	4a0c      	ldr	r2, [pc, #48]	@ (8001d64 <menu+0x9ec>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	2002      	movs	r0, #2
 8001d38:	f006 fc84 	bl	8008644 <lcd_print>
 8001d3c:	e023      	b.n	8001d86 <menu+0xa0e>
 8001d3e:	bf00      	nop
 8001d40:	20000f64 	.word	0x20000f64
 8001d44:	200000f0 	.word	0x200000f0
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	20000f8f 	.word	0x20000f8f
 8001d50:	20000e88 	.word	0x20000e88
 8001d54:	20000f8c 	.word	0x20000f8c
 8001d58:	20000f60 	.word	0x20000f60
 8001d5c:	20001264 	.word	0x20001264
 8001d60:	20000f65 	.word	0x20000f65
 8001d64:	2000123c 	.word	0x2000123c
 8001d68:	20001250 	.word	0x20001250
 8001d6c:	20001278 	.word	0x20001278
 8001d70:	20000f66 	.word	0x20000f66
		} else if(altLimit == 1) {
 8001d74:	4b89      	ldr	r3, [pc, #548]	@ (8001f9c <menu+0xc24>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d104      	bne.n	8001d86 <menu+0xa0e>
			lcd_print(2, 1, aktifText);
 8001d7c:	4a88      	ldr	r2, [pc, #544]	@ (8001fa0 <menu+0xc28>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2002      	movs	r0, #2
 8001d82:	f006 fc5f 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001d86:	2102      	movs	r1, #2
 8001d88:	4886      	ldr	r0, [pc, #536]	@ (8001fa4 <menu+0xc2c>)
 8001d8a:	f007 ff85 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d119      	bne.n	8001dc8 <menu+0xa50>
 8001d94:	4b84      	ldr	r3, [pc, #528]	@ (8001fa8 <menu+0xc30>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f083 0301 	eor.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <menu+0xa50>
 8001da2:	4b82      	ldr	r3, [pc, #520]	@ (8001fac <menu+0xc34>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10e      	bne.n	8001dc8 <menu+0xa50>
			altLimit = altLimit + 1;
 8001daa:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <menu+0xc24>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b7a      	ldr	r3, [pc, #488]	@ (8001f9c <menu+0xc24>)
 8001db4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001db6:	4b79      	ldr	r3, [pc, #484]	@ (8001f9c <menu+0xc24>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d902      	bls.n	8001dc4 <menu+0xa4c>
				altLimit = 0;
 8001dbe:	4b77      	ldr	r3, [pc, #476]	@ (8001f9c <menu+0xc24>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dc4:	f001 ffec 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001dc8:	2104      	movs	r1, #4
 8001dca:	4876      	ldr	r0, [pc, #472]	@ (8001fa4 <menu+0xc2c>)
 8001dcc:	f007 ff64 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d119      	bne.n	8001e0a <menu+0xa92>
 8001dd6:	4b74      	ldr	r3, [pc, #464]	@ (8001fa8 <menu+0xc30>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	f083 0301 	eor.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <menu+0xa92>
 8001de4:	4b71      	ldr	r3, [pc, #452]	@ (8001fac <menu+0xc34>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10e      	bne.n	8001e0a <menu+0xa92>
			altLimit = altLimit - 1;
 8001dec:	4b6b      	ldr	r3, [pc, #428]	@ (8001f9c <menu+0xc24>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b69      	ldr	r3, [pc, #420]	@ (8001f9c <menu+0xc24>)
 8001df6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001df8:	4b68      	ldr	r3, [pc, #416]	@ (8001f9c <menu+0xc24>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <menu+0xa8e>
		   		altLimit = 1;
 8001e00:	4b66      	ldr	r3, [pc, #408]	@ (8001f9c <menu+0xc24>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e06:	f001 ffcb 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	4865      	ldr	r0, [pc, #404]	@ (8001fa4 <menu+0xc2c>)
 8001e0e:	f007 ff43 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d12d      	bne.n	8001e74 <menu+0xafc>
 8001e18:	4b63      	ldr	r3, [pc, #396]	@ (8001fa8 <menu+0xc30>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d026      	beq.n	8001e74 <menu+0xafc>
			eepromData[5] = altLimit;
 8001e26:	4b5d      	ldr	r3, [pc, #372]	@ (8001f9c <menu+0xc24>)
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	4b61      	ldr	r3, [pc, #388]	@ (8001fb0 <menu+0xc38>)
 8001e2c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f9c <menu+0xc24>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d110      	bne.n	8001e58 <menu+0xae0>
 8001e36:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb4 <menu+0xc3c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <menu+0xace>
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb4 <menu+0xc3c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d108      	bne.n	8001e58 <menu+0xae0>
				kapiTablaAcKonum = 3;
 8001e46:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb4 <menu+0xc3c>)
 8001e48:	2203      	movs	r2, #3
 8001e4a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001e4c:	4b59      	ldr	r3, [pc, #356]	@ (8001fb4 <menu+0xc3c>)
 8001e4e:	781a      	ldrb	r2, [r3, #0]
 8001e50:	4b57      	ldr	r3, [pc, #348]	@ (8001fb0 <menu+0xc38>)
 8001e52:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001e56:	e00a      	b.n	8001e6e <menu+0xaf6>
			} else if(altLimit == 0) {
 8001e58:	4b50      	ldr	r3, [pc, #320]	@ (8001f9c <menu+0xc24>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <menu+0xaf6>
				platformSilindirTipi = 0;
 8001e60:	4b55      	ldr	r3, [pc, #340]	@ (8001fb8 <menu+0xc40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001e66:	4b54      	ldr	r3, [pc, #336]	@ (8001fb8 <menu+0xc40>)
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	4b51      	ldr	r3, [pc, #324]	@ (8001fb0 <menu+0xc38>)
 8001e6c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001e6e:	4b53      	ldr	r3, [pc, #332]	@ (8001fbc <menu+0xc44>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001e74:	4b52      	ldr	r3, [pc, #328]	@ (8001fc0 <menu+0xc48>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b06      	cmp	r3, #6
 8001e7a:	d166      	bne.n	8001f4a <menu+0xbd2>
		lcd_print(1, 1, basincSalteriText);
 8001e7c:	4a51      	ldr	r2, [pc, #324]	@ (8001fc4 <menu+0xc4c>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	2001      	movs	r0, #1
 8001e82:	f006 fbdf 	bl	8008644 <lcd_print>

		if(basincSalteri == 0) {
 8001e86:	4b50      	ldr	r3, [pc, #320]	@ (8001fc8 <menu+0xc50>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <menu+0xb22>
			lcd_print(2, 1, pasifText);
 8001e8e:	4a4f      	ldr	r2, [pc, #316]	@ (8001fcc <menu+0xc54>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	2002      	movs	r0, #2
 8001e94:	f006 fbd6 	bl	8008644 <lcd_print>
 8001e98:	e008      	b.n	8001eac <menu+0xb34>
		} else if(basincSalteri == 1) {
 8001e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001fc8 <menu+0xc50>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d104      	bne.n	8001eac <menu+0xb34>
			lcd_print(2, 1, aktifText);
 8001ea2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fa0 <menu+0xc28>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f006 fbcc 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eac:	2102      	movs	r1, #2
 8001eae:	483d      	ldr	r0, [pc, #244]	@ (8001fa4 <menu+0xc2c>)
 8001eb0:	f007 fef2 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d115      	bne.n	8001ee6 <menu+0xb6e>
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <menu+0xc30>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <menu+0xb6e>
			basincSalteri = basincSalteri + 1;
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc8 <menu+0xc50>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc8 <menu+0xc50>)
 8001ed2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc8 <menu+0xc50>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d902      	bls.n	8001ee2 <menu+0xb6a>
				basincSalteri = 0;
 8001edc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc8 <menu+0xc50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ee2:	f001 ff5d 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	482e      	ldr	r0, [pc, #184]	@ (8001fa4 <menu+0xc2c>)
 8001eea:	f007 fed5 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d115      	bne.n	8001f20 <menu+0xba8>
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa8 <menu+0xc30>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f083 0301 	eor.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00e      	beq.n	8001f20 <menu+0xba8>
			basincSalteri = basincSalteri - 1;
 8001f02:	4b31      	ldr	r3, [pc, #196]	@ (8001fc8 <menu+0xc50>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc8 <menu+0xc50>)
 8001f0c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc8 <menu+0xc50>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <menu+0xba4>
		   		basincSalteri = 1;
 8001f16:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc8 <menu+0xc50>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f1c:	f001 ff40 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f20:	2108      	movs	r1, #8
 8001f22:	4820      	ldr	r0, [pc, #128]	@ (8001fa4 <menu+0xc2c>)
 8001f24:	f007 feb8 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d10d      	bne.n	8001f4a <menu+0xbd2>
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <menu+0xc30>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	f083 0301 	eor.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <menu+0xbd2>
			eepromData[6] = basincSalteri;
 8001f3c:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <menu+0xc50>)
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <menu+0xc38>)
 8001f42:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <menu+0xc44>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <menu+0xc48>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b07      	cmp	r3, #7
 8001f50:	f040 80a9 	bne.w	80020a6 <menu+0xd2e>
		lcd_print(1, 1, kapiSecimleriText);
 8001f54:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd0 <menu+0xc58>)
 8001f56:	2101      	movs	r1, #1
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f006 fb73 	bl	8008644 <lcd_print>

		if(kapiSecimleri == 0) {
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <menu+0xc5c>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <menu+0xbfa>
			lcd_print(2, 1, pasifText);
 8001f66:	4a19      	ldr	r2, [pc, #100]	@ (8001fcc <menu+0xc54>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	f006 fb6a 	bl	8008644 <lcd_print>
 8001f70:	e03f      	b.n	8001ff2 <menu+0xc7a>
		} else if(kapiSecimleri == 1) {
 8001f72:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <menu+0xc5c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <menu+0xc0e>
			lcd_print(2, 1, katKapisiAktifText);
 8001f7a:	4a17      	ldr	r2, [pc, #92]	@ (8001fd8 <menu+0xc60>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f006 fb60 	bl	8008644 <lcd_print>
 8001f84:	e035      	b.n	8001ff2 <menu+0xc7a>
		} else if(kapiSecimleri == 2) {
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <menu+0xc5c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d128      	bne.n	8001fe0 <menu+0xc68>
			lcd_print(2, 1, tablaKapiAktifText);
 8001f8e:	4a13      	ldr	r2, [pc, #76]	@ (8001fdc <menu+0xc64>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	2002      	movs	r0, #2
 8001f94:	f006 fb56 	bl	8008644 <lcd_print>
 8001f98:	e02b      	b.n	8001ff2 <menu+0xc7a>
 8001f9a:	bf00      	nop
 8001f9c:	20000f66 	.word	0x20000f66
 8001fa0:	20001250 	.word	0x20001250
 8001fa4:	40010800 	.word	0x40010800
 8001fa8:	20000f8f 	.word	0x20000f8f
 8001fac:	20000f61 	.word	0x20000f61
 8001fb0:	20000e88 	.word	0x20000e88
 8001fb4:	20000f6d 	.word	0x20000f6d
 8001fb8:	20000f73 	.word	0x20000f73
 8001fbc:	20000f8c 	.word	0x20000f8c
 8001fc0:	20000f60 	.word	0x20000f60
 8001fc4:	2000128c 	.word	0x2000128c
 8001fc8:	20000f67 	.word	0x20000f67
 8001fcc:	2000123c 	.word	0x2000123c
 8001fd0:	200012a0 	.word	0x200012a0
 8001fd4:	20000f68 	.word	0x20000f68
 8001fd8:	200012b4 	.word	0x200012b4
 8001fdc:	200012c8 	.word	0x200012c8
		} else if(kapiSecimleri == 3) {
 8001fe0:	4b76      	ldr	r3, [pc, #472]	@ (80021bc <menu+0xe44>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d104      	bne.n	8001ff2 <menu+0xc7a>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001fe8:	4a75      	ldr	r2, [pc, #468]	@ (80021c0 <menu+0xe48>)
 8001fea:	2101      	movs	r1, #1
 8001fec:	2002      	movs	r0, #2
 8001fee:	f006 fb29 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	4873      	ldr	r0, [pc, #460]	@ (80021c4 <menu+0xe4c>)
 8001ff6:	f007 fe4f 	bl	8009c98 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d115      	bne.n	800202c <menu+0xcb4>
 8002000:	4b71      	ldr	r3, [pc, #452]	@ (80021c8 <menu+0xe50>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	f083 0301 	eor.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00e      	beq.n	800202c <menu+0xcb4>
			kapiSecimleri = kapiSecimleri + 1;
 800200e:	4b6b      	ldr	r3, [pc, #428]	@ (80021bc <menu+0xe44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b69      	ldr	r3, [pc, #420]	@ (80021bc <menu+0xe44>)
 8002018:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800201a:	4b68      	ldr	r3, [pc, #416]	@ (80021bc <menu+0xe44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d902      	bls.n	8002028 <menu+0xcb0>
				kapiSecimleri = 0;
 8002022:	4b66      	ldr	r3, [pc, #408]	@ (80021bc <menu+0xe44>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002028:	f001 feba 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800202c:	2104      	movs	r1, #4
 800202e:	4865      	ldr	r0, [pc, #404]	@ (80021c4 <menu+0xe4c>)
 8002030:	f007 fe32 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	2b01      	cmp	r3, #1
 8002038:	d115      	bne.n	8002066 <menu+0xcee>
 800203a:	4b63      	ldr	r3, [pc, #396]	@ (80021c8 <menu+0xe50>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <menu+0xcee>
			kapiSecimleri = kapiSecimleri - 1;
 8002048:	4b5c      	ldr	r3, [pc, #368]	@ (80021bc <menu+0xe44>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3b01      	subs	r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b5a      	ldr	r3, [pc, #360]	@ (80021bc <menu+0xe44>)
 8002052:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002054:	4b59      	ldr	r3, [pc, #356]	@ (80021bc <menu+0xe44>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d902      	bls.n	8002062 <menu+0xcea>
		   		kapiSecimleri = 3;
 800205c:	4b57      	ldr	r3, [pc, #348]	@ (80021bc <menu+0xe44>)
 800205e:	2203      	movs	r2, #3
 8002060:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002062:	f001 fe9d 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002066:	2108      	movs	r1, #8
 8002068:	4856      	ldr	r0, [pc, #344]	@ (80021c4 <menu+0xe4c>)
 800206a:	f007 fe15 	bl	8009c98 <HAL_GPIO_ReadPin>
 800206e:	4603      	mov	r3, r0
 8002070:	2b01      	cmp	r3, #1
 8002072:	d118      	bne.n	80020a6 <menu+0xd2e>
 8002074:	4b54      	ldr	r3, [pc, #336]	@ (80021c8 <menu+0xe50>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d011      	beq.n	80020a6 <menu+0xd2e>
			eepromData[7] = kapiSecimleri;
 8002082:	4b4e      	ldr	r3, [pc, #312]	@ (80021bc <menu+0xe44>)
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	4b51      	ldr	r3, [pc, #324]	@ (80021cc <menu+0xe54>)
 8002088:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800208a:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <menu+0xe44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <menu+0xd28>
				altLimit = 1;
 8002092:	4b4f      	ldr	r3, [pc, #316]	@ (80021d0 <menu+0xe58>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002098:	4b4d      	ldr	r3, [pc, #308]	@ (80021d0 <menu+0xe58>)
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	4b4b      	ldr	r3, [pc, #300]	@ (80021cc <menu+0xe54>)
 800209e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80020a0:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <menu+0xe5c>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80020a6:	4b4c      	ldr	r3, [pc, #304]	@ (80021d8 <menu+0xe60>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d167      	bne.n	800217e <menu+0xe06>
		lcd_print(1, 1, kapiAcmaTipiText);
 80020ae:	4a4b      	ldr	r2, [pc, #300]	@ (80021dc <menu+0xe64>)
 80020b0:	2101      	movs	r1, #1
 80020b2:	2001      	movs	r0, #1
 80020b4:	f006 fac6 	bl	8008644 <lcd_print>

		if(kapiAcTipi == 0) {
 80020b8:	4b49      	ldr	r3, [pc, #292]	@ (80021e0 <menu+0xe68>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <menu+0xd54>
			lcd_print(2, 1, kapiButonuESPText);
 80020c0:	4a48      	ldr	r2, [pc, #288]	@ (80021e4 <menu+0xe6c>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2002      	movs	r0, #2
 80020c6:	f006 fabd 	bl	8008644 <lcd_print>
 80020ca:	e008      	b.n	80020de <menu+0xd66>
		} else if(kapiAcTipi == 1){
 80020cc:	4b44      	ldr	r3, [pc, #272]	@ (80021e0 <menu+0xe68>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d104      	bne.n	80020de <menu+0xd66>
			lcd_print(2, 1, katButonuEXTText);
 80020d4:	4a44      	ldr	r2, [pc, #272]	@ (80021e8 <menu+0xe70>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2002      	movs	r0, #2
 80020da:	f006 fab3 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020de:	2102      	movs	r1, #2
 80020e0:	4838      	ldr	r0, [pc, #224]	@ (80021c4 <menu+0xe4c>)
 80020e2:	f007 fdd9 	bl	8009c98 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d115      	bne.n	8002118 <menu+0xda0>
 80020ec:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <menu+0xe50>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f083 0301 	eor.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00e      	beq.n	8002118 <menu+0xda0>
			kapiAcTipi = kapiAcTipi + 1;
 80020fa:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <menu+0xe68>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b37      	ldr	r3, [pc, #220]	@ (80021e0 <menu+0xe68>)
 8002104:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002106:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <menu+0xe68>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d902      	bls.n	8002114 <menu+0xd9c>
				kapiAcTipi = 0;
 800210e:	4b34      	ldr	r3, [pc, #208]	@ (80021e0 <menu+0xe68>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002114:	f001 fe44 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002118:	2104      	movs	r1, #4
 800211a:	482a      	ldr	r0, [pc, #168]	@ (80021c4 <menu+0xe4c>)
 800211c:	f007 fdbc 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	2b01      	cmp	r3, #1
 8002124:	d115      	bne.n	8002152 <menu+0xdda>
 8002126:	4b28      	ldr	r3, [pc, #160]	@ (80021c8 <menu+0xe50>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <menu+0xdda>
			kapiAcTipi = kapiAcTipi - 1;
 8002134:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <menu+0xe68>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3b01      	subs	r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <menu+0xe68>)
 800213e:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002140:	4b27      	ldr	r3, [pc, #156]	@ (80021e0 <menu+0xe68>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <menu+0xdd6>
		   		kapiAcTipi = 1;
 8002148:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <menu+0xe68>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800214e:	f001 fe27 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002152:	2108      	movs	r1, #8
 8002154:	481b      	ldr	r0, [pc, #108]	@ (80021c4 <menu+0xe4c>)
 8002156:	f007 fd9f 	bl	8009c98 <HAL_GPIO_ReadPin>
 800215a:	4603      	mov	r3, r0
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10e      	bne.n	800217e <menu+0xe06>
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <menu+0xe50>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	f083 0301 	eor.w	r3, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <menu+0xe06>
			eepromData[36] = kapiAcTipi;
 800216e:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <menu+0xe68>)
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <menu+0xe54>)
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002178:	4b16      	ldr	r3, [pc, #88]	@ (80021d4 <menu+0xe5c>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800217e:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <menu+0xe60>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b09      	cmp	r3, #9
 8002184:	f040 8092 	bne.w	80022ac <menu+0xf34>
		lcd_print(1, 1, birKatKapiTipiText);
 8002188:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <menu+0xe74>)
 800218a:	2101      	movs	r1, #1
 800218c:	2001      	movs	r0, #1
 800218e:	f006 fa59 	bl	8008644 <lcd_print>

		if(kapi1Tip == 0) {
 8002192:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <menu+0xe78>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <menu+0xe2e>
			lcd_print(2, 1, prudhomeTextGN);
 800219a:	4a16      	ldr	r2, [pc, #88]	@ (80021f4 <menu+0xe7c>)
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f006 fa50 	bl	8008644 <lcd_print>
 80021a4:	e033      	b.n	800220e <menu+0xe96>
		} else if(kapi1Tip == 1) {
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <menu+0xe78>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d126      	bne.n	80021fc <menu+0xe84>
			lcd_print(2, 1, butonKontrolluText);
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <menu+0xe80>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	2002      	movs	r0, #2
 80021b4:	f006 fa46 	bl	8008644 <lcd_print>
 80021b8:	e029      	b.n	800220e <menu+0xe96>
 80021ba:	bf00      	nop
 80021bc:	20000f68 	.word	0x20000f68
 80021c0:	200012dc 	.word	0x200012dc
 80021c4:	40010800 	.word	0x40010800
 80021c8:	20000f8f 	.word	0x20000f8f
 80021cc:	20000e88 	.word	0x20000e88
 80021d0:	20000f66 	.word	0x20000f66
 80021d4:	20000f8c 	.word	0x20000f8c
 80021d8:	20000f60 	.word	0x20000f60
 80021dc:	200012f0 	.word	0x200012f0
 80021e0:	20000f6c 	.word	0x20000f6c
 80021e4:	20001304 	.word	0x20001304
 80021e8:	20001318 	.word	0x20001318
 80021ec:	2000132c 	.word	0x2000132c
 80021f0:	20000f69 	.word	0x20000f69
 80021f4:	20000104 	.word	0x20000104
 80021f8:	20001340 	.word	0x20001340
		} else if(kapi1Tip == 2) {
 80021fc:	4b73      	ldr	r3, [pc, #460]	@ (80023cc <menu+0x1054>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d104      	bne.n	800220e <menu+0xe96>
			lcd_print(2, 1, pizzattoTextGN);
 8002204:	4a72      	ldr	r2, [pc, #456]	@ (80023d0 <menu+0x1058>)
 8002206:	2101      	movs	r1, #1
 8002208:	2002      	movs	r0, #2
 800220a:	f006 fa1b 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800220e:	2102      	movs	r1, #2
 8002210:	4870      	ldr	r0, [pc, #448]	@ (80023d4 <menu+0x105c>)
 8002212:	f007 fd41 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002216:	4603      	mov	r3, r0
 8002218:	2b01      	cmp	r3, #1
 800221a:	d115      	bne.n	8002248 <menu+0xed0>
 800221c:	4b6e      	ldr	r3, [pc, #440]	@ (80023d8 <menu+0x1060>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	f083 0301 	eor.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00e      	beq.n	8002248 <menu+0xed0>
			kapi1Tip = kapi1Tip + 1;
 800222a:	4b68      	ldr	r3, [pc, #416]	@ (80023cc <menu+0x1054>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b66      	ldr	r3, [pc, #408]	@ (80023cc <menu+0x1054>)
 8002234:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002236:	4b65      	ldr	r3, [pc, #404]	@ (80023cc <menu+0x1054>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <menu+0xecc>
				kapi1Tip = 0;
 800223e:	4b63      	ldr	r3, [pc, #396]	@ (80023cc <menu+0x1054>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002244:	f001 fdac 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002248:	2104      	movs	r1, #4
 800224a:	4862      	ldr	r0, [pc, #392]	@ (80023d4 <menu+0x105c>)
 800224c:	f007 fd24 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d115      	bne.n	8002282 <menu+0xf0a>
 8002256:	4b60      	ldr	r3, [pc, #384]	@ (80023d8 <menu+0x1060>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	f083 0301 	eor.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00e      	beq.n	8002282 <menu+0xf0a>
			kapi1Tip = kapi1Tip - 1;
 8002264:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <menu+0x1054>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	3b01      	subs	r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b57      	ldr	r3, [pc, #348]	@ (80023cc <menu+0x1054>)
 800226e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002270:	4b56      	ldr	r3, [pc, #344]	@ (80023cc <menu+0x1054>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d902      	bls.n	800227e <menu+0xf06>
		   		kapi1Tip = 2;
 8002278:	4b54      	ldr	r3, [pc, #336]	@ (80023cc <menu+0x1054>)
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800227e:	f001 fd8f 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002282:	2108      	movs	r1, #8
 8002284:	4853      	ldr	r0, [pc, #332]	@ (80023d4 <menu+0x105c>)
 8002286:	f007 fd07 	bl	8009c98 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10d      	bne.n	80022ac <menu+0xf34>
 8002290:	4b51      	ldr	r3, [pc, #324]	@ (80023d8 <menu+0x1060>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <menu+0xf34>
			eepromData[8] = kapi1Tip;
 800229e:	4b4b      	ldr	r3, [pc, #300]	@ (80023cc <menu+0x1054>)
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <menu+0x1064>)
 80022a4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80022a6:	4b4e      	ldr	r3, [pc, #312]	@ (80023e0 <menu+0x1068>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80022ac:	4b4d      	ldr	r3, [pc, #308]	@ (80023e4 <menu+0x106c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b0a      	cmp	r3, #10
 80022b2:	d16c      	bne.n	800238e <menu+0x1016>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80022b4:	4a4c      	ldr	r2, [pc, #304]	@ (80023e8 <menu+0x1070>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	2001      	movs	r0, #1
 80022ba:	f006 f9c3 	bl	8008644 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80022be:	4a4b      	ldr	r2, [pc, #300]	@ (80023ec <menu+0x1074>)
 80022c0:	2101      	movs	r1, #1
 80022c2:	2002      	movs	r0, #2
 80022c4:	f006 f9be 	bl	8008644 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80022c8:	4b49      	ldr	r3, [pc, #292]	@ (80023f0 <menu+0x1078>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	220a      	movs	r2, #10
 80022ce:	4949      	ldr	r1, [pc, #292]	@ (80023f4 <menu+0x107c>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00a fd0d 	bl	800ccf0 <itoa>
		lcd_print(2,16,snum);
 80022d6:	4a47      	ldr	r2, [pc, #284]	@ (80023f4 <menu+0x107c>)
 80022d8:	2110      	movs	r1, #16
 80022da:	2002      	movs	r0, #2
 80022dc:	f006 f9b2 	bl	8008644 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80022e0:	2102      	movs	r1, #2
 80022e2:	483c      	ldr	r0, [pc, #240]	@ (80023d4 <menu+0x105c>)
 80022e4:	f007 fcd8 	bl	8009c98 <HAL_GPIO_ReadPin>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d119      	bne.n	8002322 <menu+0xfaa>
 80022ee:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <menu+0x1060>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d012      	beq.n	8002322 <menu+0xfaa>
 80022fc:	4b33      	ldr	r3, [pc, #204]	@ (80023cc <menu+0x1054>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10e      	bne.n	8002322 <menu+0xfaa>
			kapi1AcSure = kapi1AcSure + 1;
 8002304:	4b3a      	ldr	r3, [pc, #232]	@ (80023f0 <menu+0x1078>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	b2da      	uxtb	r2, r3
 800230c:	4b38      	ldr	r3, [pc, #224]	@ (80023f0 <menu+0x1078>)
 800230e:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002310:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <menu+0x1078>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d902      	bls.n	800231e <menu+0xfa6>
				kapi1AcSure = 0;
 8002318:	4b35      	ldr	r3, [pc, #212]	@ (80023f0 <menu+0x1078>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800231e:	f001 fd3f 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002322:	2104      	movs	r1, #4
 8002324:	482b      	ldr	r0, [pc, #172]	@ (80023d4 <menu+0x105c>)
 8002326:	f007 fcb7 	bl	8009c98 <HAL_GPIO_ReadPin>
 800232a:	4603      	mov	r3, r0
 800232c:	2b01      	cmp	r3, #1
 800232e:	d119      	bne.n	8002364 <menu+0xfec>
 8002330:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <menu+0x1060>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f083 0301 	eor.w	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d012      	beq.n	8002364 <menu+0xfec>
 800233e:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <menu+0x1054>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10e      	bne.n	8002364 <menu+0xfec>
			kapi1AcSure = kapi1AcSure - 1;
 8002346:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <menu+0x1078>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	3b01      	subs	r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <menu+0x1078>)
 8002350:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002352:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <menu+0x1078>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <menu+0xfe8>
		   		kapi1AcSure = 5;
 800235a:	4b25      	ldr	r3, [pc, #148]	@ (80023f0 <menu+0x1078>)
 800235c:	2205      	movs	r2, #5
 800235e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002360:	f001 fd1e 	bl	8003da0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002364:	2108      	movs	r1, #8
 8002366:	481b      	ldr	r0, [pc, #108]	@ (80023d4 <menu+0x105c>)
 8002368:	f007 fc96 	bl	8009c98 <HAL_GPIO_ReadPin>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10d      	bne.n	800238e <menu+0x1016>
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <menu+0x1060>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	f083 0301 	eor.w	r3, r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <menu+0x1016>
			eepromData[9] = kapi1AcSure;
 8002380:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <menu+0x1078>)
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <menu+0x1064>)
 8002386:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002388:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <menu+0x1068>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <menu+0x106c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b0b      	cmp	r3, #11
 8002394:	f040 8090 	bne.w	80024b8 <menu+0x1140>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002398:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <menu+0x1080>)
 800239a:	2101      	movs	r1, #1
 800239c:	2001      	movs	r0, #1
 800239e:	f006 f951 	bl	8008644 <lcd_print>

		if(kapi2Tip == 0) {
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <menu+0x1084>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <menu+0x103e>
			lcd_print(2, 1, prudhomeTextGN);
 80023aa:	4a15      	ldr	r2, [pc, #84]	@ (8002400 <menu+0x1088>)
 80023ac:	2101      	movs	r1, #1
 80023ae:	2002      	movs	r0, #2
 80023b0:	f006 f948 	bl	8008644 <lcd_print>
 80023b4:	e031      	b.n	800241a <menu+0x10a2>
		} else if(kapi2Tip == 1) {
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <menu+0x1084>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d124      	bne.n	8002408 <menu+0x1090>
			lcd_print(2, 1, butonKontrolluText);
 80023be:	4a11      	ldr	r2, [pc, #68]	@ (8002404 <menu+0x108c>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	2002      	movs	r0, #2
 80023c4:	f006 f93e 	bl	8008644 <lcd_print>
 80023c8:	e027      	b.n	800241a <menu+0x10a2>
 80023ca:	bf00      	nop
 80023cc:	20000f69 	.word	0x20000f69
 80023d0:	20000118 	.word	0x20000118
 80023d4:	40010800 	.word	0x40010800
 80023d8:	20000f8f 	.word	0x20000f8f
 80023dc:	20000e88 	.word	0x20000e88
 80023e0:	20000f8c 	.word	0x20000f8c
 80023e4:	20000f60 	.word	0x20000f60
 80023e8:	20001354 	.word	0x20001354
 80023ec:	20001368 	.word	0x20001368
 80023f0:	20000f79 	.word	0x20000f79
 80023f4:	20000ef8 	.word	0x20000ef8
 80023f8:	2000137c 	.word	0x2000137c
 80023fc:	20000f6a 	.word	0x20000f6a
 8002400:	20000104 	.word	0x20000104
 8002404:	20001340 	.word	0x20001340
		} else if(kapi2Tip == 2) {
 8002408:	4b73      	ldr	r3, [pc, #460]	@ (80025d8 <menu+0x1260>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d104      	bne.n	800241a <menu+0x10a2>
			lcd_print(2, 1, pizzattoTextGN);
 8002410:	4a72      	ldr	r2, [pc, #456]	@ (80025dc <menu+0x1264>)
 8002412:	2101      	movs	r1, #1
 8002414:	2002      	movs	r0, #2
 8002416:	f006 f915 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800241a:	2102      	movs	r1, #2
 800241c:	4870      	ldr	r0, [pc, #448]	@ (80025e0 <menu+0x1268>)
 800241e:	f007 fc3b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	d115      	bne.n	8002454 <menu+0x10dc>
 8002428:	4b6e      	ldr	r3, [pc, #440]	@ (80025e4 <menu+0x126c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00e      	beq.n	8002454 <menu+0x10dc>
			kapi2Tip = kapi2Tip + 1;
 8002436:	4b68      	ldr	r3, [pc, #416]	@ (80025d8 <menu+0x1260>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b66      	ldr	r3, [pc, #408]	@ (80025d8 <menu+0x1260>)
 8002440:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002442:	4b65      	ldr	r3, [pc, #404]	@ (80025d8 <menu+0x1260>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d902      	bls.n	8002450 <menu+0x10d8>
				kapi2Tip = 0;
 800244a:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <menu+0x1260>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002450:	f001 fca6 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002454:	2104      	movs	r1, #4
 8002456:	4862      	ldr	r0, [pc, #392]	@ (80025e0 <menu+0x1268>)
 8002458:	f007 fc1e 	bl	8009c98 <HAL_GPIO_ReadPin>
 800245c:	4603      	mov	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	d115      	bne.n	800248e <menu+0x1116>
 8002462:	4b60      	ldr	r3, [pc, #384]	@ (80025e4 <menu+0x126c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f083 0301 	eor.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <menu+0x1116>
			kapi2Tip = kapi2Tip - 1;
 8002470:	4b59      	ldr	r3, [pc, #356]	@ (80025d8 <menu+0x1260>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b57      	ldr	r3, [pc, #348]	@ (80025d8 <menu+0x1260>)
 800247a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800247c:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <menu+0x1260>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d902      	bls.n	800248a <menu+0x1112>
		   		kapi2Tip = 2;
 8002484:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <menu+0x1260>)
 8002486:	2202      	movs	r2, #2
 8002488:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800248a:	f001 fc89 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800248e:	2108      	movs	r1, #8
 8002490:	4853      	ldr	r0, [pc, #332]	@ (80025e0 <menu+0x1268>)
 8002492:	f007 fc01 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	2b01      	cmp	r3, #1
 800249a:	d10d      	bne.n	80024b8 <menu+0x1140>
 800249c:	4b51      	ldr	r3, [pc, #324]	@ (80025e4 <menu+0x126c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <menu+0x1140>
			eepromData[10] = kapi2Tip;
 80024aa:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <menu+0x1260>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b4e      	ldr	r3, [pc, #312]	@ (80025e8 <menu+0x1270>)
 80024b0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80024b2:	4b4e      	ldr	r3, [pc, #312]	@ (80025ec <menu+0x1274>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80024b8:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <menu+0x1278>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b0c      	cmp	r3, #12
 80024be:	d16c      	bne.n	800259a <menu+0x1222>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80024c0:	4a4c      	ldr	r2, [pc, #304]	@ (80025f4 <menu+0x127c>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	2001      	movs	r0, #1
 80024c6:	f006 f8bd 	bl	8008644 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80024ca:	4a4b      	ldr	r2, [pc, #300]	@ (80025f8 <menu+0x1280>)
 80024cc:	2101      	movs	r1, #1
 80024ce:	2002      	movs	r0, #2
 80024d0:	f006 f8b8 	bl	8008644 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80024d4:	4b49      	ldr	r3, [pc, #292]	@ (80025fc <menu+0x1284>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	220a      	movs	r2, #10
 80024da:	4949      	ldr	r1, [pc, #292]	@ (8002600 <menu+0x1288>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f00a fc07 	bl	800ccf0 <itoa>
		lcd_print(2,16,snum);
 80024e2:	4a47      	ldr	r2, [pc, #284]	@ (8002600 <menu+0x1288>)
 80024e4:	2110      	movs	r1, #16
 80024e6:	2002      	movs	r0, #2
 80024e8:	f006 f8ac 	bl	8008644 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80024ec:	2102      	movs	r1, #2
 80024ee:	483c      	ldr	r0, [pc, #240]	@ (80025e0 <menu+0x1268>)
 80024f0:	f007 fbd2 	bl	8009c98 <HAL_GPIO_ReadPin>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d119      	bne.n	800252e <menu+0x11b6>
 80024fa:	4b3a      	ldr	r3, [pc, #232]	@ (80025e4 <menu+0x126c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	f083 0301 	eor.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d012      	beq.n	800252e <menu+0x11b6>
 8002508:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <menu+0x1260>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10e      	bne.n	800252e <menu+0x11b6>
			kapi2AcSure = kapi2AcSure + 1;
 8002510:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <menu+0x1284>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b38      	ldr	r3, [pc, #224]	@ (80025fc <menu+0x1284>)
 800251a:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800251c:	4b37      	ldr	r3, [pc, #220]	@ (80025fc <menu+0x1284>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d902      	bls.n	800252a <menu+0x11b2>
				kapi2AcSure = 0;
 8002524:	4b35      	ldr	r3, [pc, #212]	@ (80025fc <menu+0x1284>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800252a:	f001 fc39 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800252e:	2104      	movs	r1, #4
 8002530:	482b      	ldr	r0, [pc, #172]	@ (80025e0 <menu+0x1268>)
 8002532:	f007 fbb1 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d119      	bne.n	8002570 <menu+0x11f8>
 800253c:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <menu+0x126c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <menu+0x11f8>
 800254a:	4b23      	ldr	r3, [pc, #140]	@ (80025d8 <menu+0x1260>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10e      	bne.n	8002570 <menu+0x11f8>
			kapi2AcSure = kapi2AcSure - 1;
 8002552:	4b2a      	ldr	r3, [pc, #168]	@ (80025fc <menu+0x1284>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	3b01      	subs	r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <menu+0x1284>)
 800255c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800255e:	4b27      	ldr	r3, [pc, #156]	@ (80025fc <menu+0x1284>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b06      	cmp	r3, #6
 8002564:	d902      	bls.n	800256c <menu+0x11f4>
		   		kapi2AcSure = 5;
 8002566:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <menu+0x1284>)
 8002568:	2205      	movs	r2, #5
 800256a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800256c:	f001 fc18 	bl	8003da0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002570:	2108      	movs	r1, #8
 8002572:	481b      	ldr	r0, [pc, #108]	@ (80025e0 <menu+0x1268>)
 8002574:	f007 fb90 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10d      	bne.n	800259a <menu+0x1222>
 800257e:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <menu+0x126c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <menu+0x1222>
			eepromData[11] = kapi2AcSure;
 800258c:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <menu+0x1284>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <menu+0x1270>)
 8002592:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002594:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <menu+0x1274>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <menu+0x1278>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b0d      	cmp	r3, #13
 80025a0:	f040 8090 	bne.w	80026c4 <menu+0x134c>
		lcd_print(1, 1, tablaKapiTipiText);
 80025a4:	4a17      	ldr	r2, [pc, #92]	@ (8002604 <menu+0x128c>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	2001      	movs	r0, #1
 80025aa:	f006 f84b 	bl	8008644 <lcd_print>

		if(kapitablaTip == 0) {
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <menu+0x1290>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <menu+0x124a>
			lcd_print(2, 1, prudhomeTextGN);
 80025b6:	4a15      	ldr	r2, [pc, #84]	@ (800260c <menu+0x1294>)
 80025b8:	2101      	movs	r1, #1
 80025ba:	2002      	movs	r0, #2
 80025bc:	f006 f842 	bl	8008644 <lcd_print>
 80025c0:	e031      	b.n	8002626 <menu+0x12ae>
		} else if(kapitablaTip == 1) {
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <menu+0x1290>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d124      	bne.n	8002614 <menu+0x129c>
			lcd_print(2, 1, butonKontrolluText);
 80025ca:	4a11      	ldr	r2, [pc, #68]	@ (8002610 <menu+0x1298>)
 80025cc:	2101      	movs	r1, #1
 80025ce:	2002      	movs	r0, #2
 80025d0:	f006 f838 	bl	8008644 <lcd_print>
 80025d4:	e027      	b.n	8002626 <menu+0x12ae>
 80025d6:	bf00      	nop
 80025d8:	20000f6a 	.word	0x20000f6a
 80025dc:	20000118 	.word	0x20000118
 80025e0:	40010800 	.word	0x40010800
 80025e4:	20000f8f 	.word	0x20000f8f
 80025e8:	20000e88 	.word	0x20000e88
 80025ec:	20000f8c 	.word	0x20000f8c
 80025f0:	20000f60 	.word	0x20000f60
 80025f4:	20001390 	.word	0x20001390
 80025f8:	20001368 	.word	0x20001368
 80025fc:	20000f7a 	.word	0x20000f7a
 8002600:	20000ef8 	.word	0x20000ef8
 8002604:	200013a4 	.word	0x200013a4
 8002608:	20000f6b 	.word	0x20000f6b
 800260c:	20000104 	.word	0x20000104
 8002610:	20001340 	.word	0x20001340
		} else if(kapitablaTip == 2) {
 8002614:	4b3f      	ldr	r3, [pc, #252]	@ (8002714 <menu+0x139c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d104      	bne.n	8002626 <menu+0x12ae>
			lcd_print(2, 1, pizzattoTextGN);
 800261c:	4a3e      	ldr	r2, [pc, #248]	@ (8002718 <menu+0x13a0>)
 800261e:	2101      	movs	r1, #1
 8002620:	2002      	movs	r0, #2
 8002622:	f006 f80f 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002626:	2102      	movs	r1, #2
 8002628:	483c      	ldr	r0, [pc, #240]	@ (800271c <menu+0x13a4>)
 800262a:	f007 fb35 	bl	8009c98 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d115      	bne.n	8002660 <menu+0x12e8>
 8002634:	4b3a      	ldr	r3, [pc, #232]	@ (8002720 <menu+0x13a8>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	f083 0301 	eor.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00e      	beq.n	8002660 <menu+0x12e8>
			kapitablaTip = kapitablaTip + 1;
 8002642:	4b34      	ldr	r3, [pc, #208]	@ (8002714 <menu+0x139c>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <menu+0x139c>)
 800264c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800264e:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <menu+0x139c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <menu+0x12e4>
				kapitablaTip = 0;
 8002656:	4b2f      	ldr	r3, [pc, #188]	@ (8002714 <menu+0x139c>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800265c:	f001 fba0 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002660:	2104      	movs	r1, #4
 8002662:	482e      	ldr	r0, [pc, #184]	@ (800271c <menu+0x13a4>)
 8002664:	f007 fb18 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d115      	bne.n	800269a <menu+0x1322>
 800266e:	4b2c      	ldr	r3, [pc, #176]	@ (8002720 <menu+0x13a8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f083 0301 	eor.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <menu+0x1322>
			kapitablaTip = kapitablaTip - 1;
 800267c:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <menu+0x139c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	3b01      	subs	r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	4b23      	ldr	r3, [pc, #140]	@ (8002714 <menu+0x139c>)
 8002686:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <menu+0x139c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d902      	bls.n	8002696 <menu+0x131e>
		   		kapitablaTip = 2;
 8002690:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <menu+0x139c>)
 8002692:	2202      	movs	r2, #2
 8002694:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002696:	f001 fb83 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800269a:	2108      	movs	r1, #8
 800269c:	481f      	ldr	r0, [pc, #124]	@ (800271c <menu+0x13a4>)
 800269e:	f007 fafb 	bl	8009c98 <HAL_GPIO_ReadPin>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d10d      	bne.n	80026c4 <menu+0x134c>
 80026a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <menu+0x13a8>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	f083 0301 	eor.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <menu+0x134c>
			eepromData[12] = kapitablaTip;
 80026b6:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <menu+0x139c>)
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <menu+0x13ac>)
 80026bc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80026be:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <menu+0x13b0>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <menu+0x13b4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b0e      	cmp	r3, #14
 80026ca:	f040 80a3 	bne.w	8002814 <menu+0x149c>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80026ce:	4a18      	ldr	r2, [pc, #96]	@ (8002730 <menu+0x13b8>)
 80026d0:	2101      	movs	r1, #1
 80026d2:	2001      	movs	r0, #1
 80026d4:	f005 ffb6 	bl	8008644 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80026d8:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <menu+0x13bc>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <menu+0x1374>
			lcd_print(2, 1, birinciKattaAcText);
 80026e0:	4a15      	ldr	r2, [pc, #84]	@ (8002738 <menu+0x13c0>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	2002      	movs	r0, #2
 80026e6:	f005 ffad 	bl	8008644 <lcd_print>
 80026ea:	e034      	b.n	8002756 <menu+0x13de>
		} else if(kapiTablaAcKonum == 1) {
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <menu+0x13bc>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <menu+0x1388>
			lcd_print(2, 1, ikinciKattaAcText);
 80026f4:	4a11      	ldr	r2, [pc, #68]	@ (800273c <menu+0x13c4>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	2002      	movs	r0, #2
 80026fa:	f005 ffa3 	bl	8008644 <lcd_print>
 80026fe:	e02a      	b.n	8002756 <menu+0x13de>
		} else if(kapiTablaAcKonum == 2) {
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <menu+0x13bc>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d11d      	bne.n	8002744 <menu+0x13cc>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002708:	4a0d      	ldr	r2, [pc, #52]	@ (8002740 <menu+0x13c8>)
 800270a:	2101      	movs	r1, #1
 800270c:	2002      	movs	r0, #2
 800270e:	f005 ff99 	bl	8008644 <lcd_print>
 8002712:	e020      	b.n	8002756 <menu+0x13de>
 8002714:	20000f6b 	.word	0x20000f6b
 8002718:	20000118 	.word	0x20000118
 800271c:	40010800 	.word	0x40010800
 8002720:	20000f8f 	.word	0x20000f8f
 8002724:	20000e88 	.word	0x20000e88
 8002728:	20000f8c 	.word	0x20000f8c
 800272c:	20000f60 	.word	0x20000f60
 8002730:	200013b8 	.word	0x200013b8
 8002734:	20000f6d 	.word	0x20000f6d
 8002738:	200013cc 	.word	0x200013cc
 800273c:	200013e0 	.word	0x200013e0
 8002740:	200013f4 	.word	0x200013f4
		} else if(kapiTablaAcKonum == 3) {
 8002744:	4b76      	ldr	r3, [pc, #472]	@ (8002920 <menu+0x15a8>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d104      	bne.n	8002756 <menu+0x13de>
			lcd_print(2, 1, pasifText);
 800274c:	4a75      	ldr	r2, [pc, #468]	@ (8002924 <menu+0x15ac>)
 800274e:	2101      	movs	r1, #1
 8002750:	2002      	movs	r0, #2
 8002752:	f005 ff77 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002756:	2102      	movs	r1, #2
 8002758:	4873      	ldr	r0, [pc, #460]	@ (8002928 <menu+0x15b0>)
 800275a:	f007 fa9d 	bl	8009c98 <HAL_GPIO_ReadPin>
 800275e:	4603      	mov	r3, r0
 8002760:	2b01      	cmp	r3, #1
 8002762:	d115      	bne.n	8002790 <menu+0x1418>
 8002764:	4b71      	ldr	r3, [pc, #452]	@ (800292c <menu+0x15b4>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	f083 0301 	eor.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00e      	beq.n	8002790 <menu+0x1418>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002772:	4b6b      	ldr	r3, [pc, #428]	@ (8002920 <menu+0x15a8>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b69      	ldr	r3, [pc, #420]	@ (8002920 <menu+0x15a8>)
 800277c:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 800277e:	4b68      	ldr	r3, [pc, #416]	@ (8002920 <menu+0x15a8>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <menu+0x1414>
				kapiTablaAcKonum = 0;
 8002786:	4b66      	ldr	r3, [pc, #408]	@ (8002920 <menu+0x15a8>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800278c:	f001 fb08 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002790:	2104      	movs	r1, #4
 8002792:	4865      	ldr	r0, [pc, #404]	@ (8002928 <menu+0x15b0>)
 8002794:	f007 fa80 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002798:	4603      	mov	r3, r0
 800279a:	2b01      	cmp	r3, #1
 800279c:	d115      	bne.n	80027ca <menu+0x1452>
 800279e:	4b63      	ldr	r3, [pc, #396]	@ (800292c <menu+0x15b4>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	f083 0301 	eor.w	r3, r3, #1
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00e      	beq.n	80027ca <menu+0x1452>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80027ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002920 <menu+0x15a8>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002920 <menu+0x15a8>)
 80027b6:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80027b8:	4b59      	ldr	r3, [pc, #356]	@ (8002920 <menu+0x15a8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d902      	bls.n	80027c6 <menu+0x144e>
		   		kapiTablaAcKonum = 2;
 80027c0:	4b57      	ldr	r3, [pc, #348]	@ (8002920 <menu+0x15a8>)
 80027c2:	2202      	movs	r2, #2
 80027c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027c6:	f001 faeb 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ca:	2108      	movs	r1, #8
 80027cc:	4856      	ldr	r0, [pc, #344]	@ (8002928 <menu+0x15b0>)
 80027ce:	f007 fa63 	bl	8009c98 <HAL_GPIO_ReadPin>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d11d      	bne.n	8002814 <menu+0x149c>
 80027d8:	4b54      	ldr	r3, [pc, #336]	@ (800292c <menu+0x15b4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	f083 0301 	eor.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <menu+0x149c>
			eepromData[34] = kapiTablaAcKonum;
 80027e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002920 <menu+0x15a8>)
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	4b51      	ldr	r3, [pc, #324]	@ (8002930 <menu+0x15b8>)
 80027ec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80027f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002920 <menu+0x15a8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <menu+0x1488>
 80027f8:	4b49      	ldr	r3, [pc, #292]	@ (8002920 <menu+0x15a8>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d106      	bne.n	800280e <menu+0x1496>
				altLimit = 1;
 8002800:	4b4c      	ldr	r3, [pc, #304]	@ (8002934 <menu+0x15bc>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002806:	4b4b      	ldr	r3, [pc, #300]	@ (8002934 <menu+0x15bc>)
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	4b49      	ldr	r3, [pc, #292]	@ (8002930 <menu+0x15b8>)
 800280c:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800280e:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <menu+0x15c0>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002814:	4b49      	ldr	r3, [pc, #292]	@ (800293c <menu+0x15c4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d16c      	bne.n	80028f6 <menu+0x157e>
		lcd_print(1, 1, tablaKapiAcSureText);
 800281c:	4a48      	ldr	r2, [pc, #288]	@ (8002940 <menu+0x15c8>)
 800281e:	2101      	movs	r1, #1
 8002820:	2001      	movs	r0, #1
 8002822:	f005 ff0f 	bl	8008644 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002826:	4a47      	ldr	r2, [pc, #284]	@ (8002944 <menu+0x15cc>)
 8002828:	2101      	movs	r1, #1
 800282a:	2002      	movs	r0, #2
 800282c:	f005 ff0a 	bl	8008644 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002830:	4b45      	ldr	r3, [pc, #276]	@ (8002948 <menu+0x15d0>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	220a      	movs	r2, #10
 8002836:	4945      	ldr	r1, [pc, #276]	@ (800294c <menu+0x15d4>)
 8002838:	4618      	mov	r0, r3
 800283a:	f00a fa59 	bl	800ccf0 <itoa>
		lcd_print(2,16,snum);
 800283e:	4a43      	ldr	r2, [pc, #268]	@ (800294c <menu+0x15d4>)
 8002840:	2110      	movs	r1, #16
 8002842:	2002      	movs	r0, #2
 8002844:	f005 fefe 	bl	8008644 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002848:	2102      	movs	r1, #2
 800284a:	4837      	ldr	r0, [pc, #220]	@ (8002928 <menu+0x15b0>)
 800284c:	f007 fa24 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d119      	bne.n	800288a <menu+0x1512>
 8002856:	4b35      	ldr	r3, [pc, #212]	@ (800292c <menu+0x15b4>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d012      	beq.n	800288a <menu+0x1512>
 8002864:	4b3a      	ldr	r3, [pc, #232]	@ (8002950 <menu+0x15d8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10e      	bne.n	800288a <menu+0x1512>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800286c:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <menu+0x15d0>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <menu+0x15d0>)
 8002876:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002878:	4b33      	ldr	r3, [pc, #204]	@ (8002948 <menu+0x15d0>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d902      	bls.n	8002886 <menu+0x150e>
				kapiTablaAcSure = 0;
 8002880:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <menu+0x15d0>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002886:	f001 fa8b 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800288a:	2104      	movs	r1, #4
 800288c:	4826      	ldr	r0, [pc, #152]	@ (8002928 <menu+0x15b0>)
 800288e:	f007 fa03 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002892:	4603      	mov	r3, r0
 8002894:	2b01      	cmp	r3, #1
 8002896:	d119      	bne.n	80028cc <menu+0x1554>
 8002898:	4b24      	ldr	r3, [pc, #144]	@ (800292c <menu+0x15b4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <menu+0x1554>
 80028a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <menu+0x15d8>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10e      	bne.n	80028cc <menu+0x1554>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80028ae:	4b26      	ldr	r3, [pc, #152]	@ (8002948 <menu+0x15d0>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <menu+0x15d0>)
 80028b8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80028ba:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <menu+0x15d0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <menu+0x1550>
		   		kapiTablaAcSure = 5;
 80028c2:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <menu+0x15d0>)
 80028c4:	2205      	movs	r2, #5
 80028c6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80028c8:	f001 fa6a 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028cc:	2108      	movs	r1, #8
 80028ce:	4816      	ldr	r0, [pc, #88]	@ (8002928 <menu+0x15b0>)
 80028d0:	f007 f9e2 	bl	8009c98 <HAL_GPIO_ReadPin>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10d      	bne.n	80028f6 <menu+0x157e>
 80028da:	4b14      	ldr	r3, [pc, #80]	@ (800292c <menu+0x15b4>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	f083 0301 	eor.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <menu+0x157e>
			eepromData[13] = kapiTablaAcSure;
 80028e8:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <menu+0x15d0>)
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <menu+0x15b8>)
 80028ee:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <menu+0x15c0>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <menu+0x15c4>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	f040 8086 	bne.w	8002a0c <menu+0x1694>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <menu+0x15dc>)
 8002902:	2101      	movs	r1, #1
 8002904:	2001      	movs	r0, #1
 8002906:	f005 fe9d 	bl	8008644 <lcd_print>

		if(yukariYavasLimit == 0) {
 800290a:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <menu+0x15e0>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d124      	bne.n	800295c <menu+0x15e4>
			lcd_print(2, 1, pasifText);
 8002912:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <menu+0x15ac>)
 8002914:	2101      	movs	r1, #1
 8002916:	2002      	movs	r0, #2
 8002918:	f005 fe94 	bl	8008644 <lcd_print>
 800291c:	e027      	b.n	800296e <menu+0x15f6>
 800291e:	bf00      	nop
 8002920:	20000f6d 	.word	0x20000f6d
 8002924:	2000123c 	.word	0x2000123c
 8002928:	40010800 	.word	0x40010800
 800292c:	20000f8f 	.word	0x20000f8f
 8002930:	20000e88 	.word	0x20000e88
 8002934:	20000f66 	.word	0x20000f66
 8002938:	20000f8c 	.word	0x20000f8c
 800293c:	20000f60 	.word	0x20000f60
 8002940:	20001408 	.word	0x20001408
 8002944:	20001368 	.word	0x20001368
 8002948:	20000f7b 	.word	0x20000f7b
 800294c:	20000ef8 	.word	0x20000ef8
 8002950:	20000f6b 	.word	0x20000f6b
 8002954:	2000141c 	.word	0x2000141c
 8002958:	20000f6e 	.word	0x20000f6e
		} else if(yukariYavasLimit == 1) {
 800295c:	4b84      	ldr	r3, [pc, #528]	@ (8002b70 <menu+0x17f8>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d104      	bne.n	800296e <menu+0x15f6>
			lcd_print(2, 1, aktifText);
 8002964:	4a83      	ldr	r2, [pc, #524]	@ (8002b74 <menu+0x17fc>)
 8002966:	2101      	movs	r1, #1
 8002968:	2002      	movs	r0, #2
 800296a:	f005 fe6b 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800296e:	2102      	movs	r1, #2
 8002970:	4881      	ldr	r0, [pc, #516]	@ (8002b78 <menu+0x1800>)
 8002972:	f007 f991 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002976:	4603      	mov	r3, r0
 8002978:	2b01      	cmp	r3, #1
 800297a:	d115      	bne.n	80029a8 <menu+0x1630>
 800297c:	4b7f      	ldr	r3, [pc, #508]	@ (8002b7c <menu+0x1804>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	f083 0301 	eor.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00e      	beq.n	80029a8 <menu+0x1630>
			yukariYavasLimit = yukariYavasLimit + 1;
 800298a:	4b79      	ldr	r3, [pc, #484]	@ (8002b70 <menu+0x17f8>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b77      	ldr	r3, [pc, #476]	@ (8002b70 <menu+0x17f8>)
 8002994:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002996:	4b76      	ldr	r3, [pc, #472]	@ (8002b70 <menu+0x17f8>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d902      	bls.n	80029a4 <menu+0x162c>
				yukariYavasLimit = 0;
 800299e:	4b74      	ldr	r3, [pc, #464]	@ (8002b70 <menu+0x17f8>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029a4:	f001 f9fc 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a8:	2104      	movs	r1, #4
 80029aa:	4873      	ldr	r0, [pc, #460]	@ (8002b78 <menu+0x1800>)
 80029ac:	f007 f974 	bl	8009c98 <HAL_GPIO_ReadPin>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d115      	bne.n	80029e2 <menu+0x166a>
 80029b6:	4b71      	ldr	r3, [pc, #452]	@ (8002b7c <menu+0x1804>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	f083 0301 	eor.w	r3, r3, #1
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <menu+0x166a>
			yukariYavasLimit = yukariYavasLimit - 1;
 80029c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b70 <menu+0x17f8>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b68      	ldr	r3, [pc, #416]	@ (8002b70 <menu+0x17f8>)
 80029ce:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80029d0:	4b67      	ldr	r3, [pc, #412]	@ (8002b70 <menu+0x17f8>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <menu+0x1666>
		   		yukariYavasLimit = 1;
 80029d8:	4b65      	ldr	r3, [pc, #404]	@ (8002b70 <menu+0x17f8>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029de:	f001 f9df 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e2:	2108      	movs	r1, #8
 80029e4:	4864      	ldr	r0, [pc, #400]	@ (8002b78 <menu+0x1800>)
 80029e6:	f007 f957 	bl	8009c98 <HAL_GPIO_ReadPin>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d10d      	bne.n	8002a0c <menu+0x1694>
 80029f0:	4b62      	ldr	r3, [pc, #392]	@ (8002b7c <menu+0x1804>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	f083 0301 	eor.w	r3, r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <menu+0x1694>
			eepromData[14] = yukariYavasLimit;
 80029fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002b70 <menu+0x17f8>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	4b5f      	ldr	r3, [pc, #380]	@ (8002b80 <menu+0x1808>)
 8002a04:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002a06:	4b5f      	ldr	r3, [pc, #380]	@ (8002b84 <menu+0x180c>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b88 <menu+0x1810>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b11      	cmp	r3, #17
 8002a12:	f040 808b 	bne.w	8002b2c <menu+0x17b4>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002a16:	4a5d      	ldr	r2, [pc, #372]	@ (8002b8c <menu+0x1814>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f005 fe12 	bl	8008644 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002a20:	4b5b      	ldr	r3, [pc, #364]	@ (8002b90 <menu+0x1818>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d105      	bne.n	8002a34 <menu+0x16bc>
			lcd_print(2, 1, devirmeAktifText);
 8002a28:	4a5a      	ldr	r2, [pc, #360]	@ (8002b94 <menu+0x181c>)
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f005 fe09 	bl	8008644 <lcd_print>
 8002a32:	e012      	b.n	8002a5a <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 1) {
 8002a34:	4b56      	ldr	r3, [pc, #344]	@ (8002b90 <menu+0x1818>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <menu+0x16d0>
			lcd_print(2, 1, yuruyusAktifText);
 8002a3c:	4a56      	ldr	r2, [pc, #344]	@ (8002b98 <menu+0x1820>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2002      	movs	r0, #2
 8002a42:	f005 fdff 	bl	8008644 <lcd_print>
 8002a46:	e008      	b.n	8002a5a <menu+0x16e2>
		} else if(devirmeYuruyusSecim == 0) {
 8002a48:	4b51      	ldr	r3, [pc, #324]	@ (8002b90 <menu+0x1818>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d104      	bne.n	8002a5a <menu+0x16e2>
			lcd_print(2, 1, pasifText);
 8002a50:	4a52      	ldr	r2, [pc, #328]	@ (8002b9c <menu+0x1824>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	2002      	movs	r0, #2
 8002a56:	f005 fdf5 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4846      	ldr	r0, [pc, #280]	@ (8002b78 <menu+0x1800>)
 8002a5e:	f007 f91b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d115      	bne.n	8002a94 <menu+0x171c>
 8002a68:	4b44      	ldr	r3, [pc, #272]	@ (8002b7c <menu+0x1804>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	f083 0301 	eor.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00e      	beq.n	8002a94 <menu+0x171c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002a76:	4b46      	ldr	r3, [pc, #280]	@ (8002b90 <menu+0x1818>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b44      	ldr	r3, [pc, #272]	@ (8002b90 <menu+0x1818>)
 8002a80:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002a82:	4b43      	ldr	r3, [pc, #268]	@ (8002b90 <menu+0x1818>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d902      	bls.n	8002a90 <menu+0x1718>
				devirmeYuruyusSecim = 0;
 8002a8a:	4b41      	ldr	r3, [pc, #260]	@ (8002b90 <menu+0x1818>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a90:	f001 f986 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a94:	2104      	movs	r1, #4
 8002a96:	4838      	ldr	r0, [pc, #224]	@ (8002b78 <menu+0x1800>)
 8002a98:	f007 f8fe 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d115      	bne.n	8002ace <menu+0x1756>
 8002aa2:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <menu+0x1804>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00e      	beq.n	8002ace <menu+0x1756>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002ab0:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <menu+0x1818>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	4b35      	ldr	r3, [pc, #212]	@ (8002b90 <menu+0x1818>)
 8002aba:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002abc:	4b34      	ldr	r3, [pc, #208]	@ (8002b90 <menu+0x1818>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d902      	bls.n	8002aca <menu+0x1752>
		   		devirmeYuruyusSecim = 2;
 8002ac4:	4b32      	ldr	r3, [pc, #200]	@ (8002b90 <menu+0x1818>)
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aca:	f001 f969 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ace:	2108      	movs	r1, #8
 8002ad0:	4829      	ldr	r0, [pc, #164]	@ (8002b78 <menu+0x1800>)
 8002ad2:	f007 f8e1 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d127      	bne.n	8002b2c <menu+0x17b4>
 8002adc:	4b27      	ldr	r3, [pc, #156]	@ (8002b7c <menu+0x1804>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f083 0301 	eor.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d020      	beq.n	8002b2c <menu+0x17b4>
			eepromData[15] = devirmeYuruyusSecim;
 8002aea:	4b29      	ldr	r3, [pc, #164]	@ (8002b90 <menu+0x1818>)
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <menu+0x1808>)
 8002af0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002af2:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <menu+0x1818>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <menu+0x178a>
 8002afa:	4b25      	ldr	r3, [pc, #148]	@ (8002b90 <menu+0x1818>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d106      	bne.n	8002b10 <menu+0x1798>
				calismaSekli = 0;
 8002b02:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <menu+0x1828>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002b08:	4b25      	ldr	r3, [pc, #148]	@ (8002ba0 <menu+0x1828>)
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <menu+0x1808>)
 8002b0e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002b10:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <menu+0x1818>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <menu+0x17ae>
				devirmeSilindirTipi = 1;
 8002b18:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <menu+0x182c>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <menu+0x182c>)
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <menu+0x1808>)
 8002b24:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002b26:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <menu+0x180c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002b2c:	4b16      	ldr	r3, [pc, #88]	@ (8002b88 <menu+0x1810>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b12      	cmp	r3, #18
 8002b32:	f040 8097 	bne.w	8002c64 <menu+0x18ec>
		if(devirmeYuruyusSecim == 2) {
 8002b36:	4b16      	ldr	r3, [pc, #88]	@ (8002b90 <menu+0x1818>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d105      	bne.n	8002b4a <menu+0x17d2>
			lcd_print(1, 1, devirmeYukariText);
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba8 <menu+0x1830>)
 8002b40:	2101      	movs	r1, #1
 8002b42:	2001      	movs	r0, #1
 8002b44:	f005 fd7e 	bl	8008644 <lcd_print>
 8002b48:	e008      	b.n	8002b5c <menu+0x17e4>
		} else if(devirmeYuruyusSecim == 1) {
 8002b4a:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <menu+0x1818>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d104      	bne.n	8002b5c <menu+0x17e4>
			lcd_print(1, 1, yuruyusIleriText);
 8002b52:	4a16      	ldr	r2, [pc, #88]	@ (8002bac <menu+0x1834>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	2001      	movs	r0, #1
 8002b58:	f005 fd74 	bl	8008644 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002b5c:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <menu+0x1838>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d127      	bne.n	8002bb4 <menu+0x183c>
			lcd_print(2, 1, pasifText);
 8002b64:	4a0d      	ldr	r2, [pc, #52]	@ (8002b9c <menu+0x1824>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f005 fd6b 	bl	8008644 <lcd_print>
 8002b6e:	e02a      	b.n	8002bc6 <menu+0x184e>
 8002b70:	20000f6e 	.word	0x20000f6e
 8002b74:	20001250 	.word	0x20001250
 8002b78:	40010800 	.word	0x40010800
 8002b7c:	20000f8f 	.word	0x20000f8f
 8002b80:	20000e88 	.word	0x20000e88
 8002b84:	20000f8c 	.word	0x20000f8c
 8002b88:	20000f60 	.word	0x20000f60
 8002b8c:	20001430 	.word	0x20001430
 8002b90:	20000f6f 	.word	0x20000f6f
 8002b94:	20001444 	.word	0x20001444
 8002b98:	20001458 	.word	0x20001458
 8002b9c:	2000123c 	.word	0x2000123c
 8002ba0:	20000f61 	.word	0x20000f61
 8002ba4:	20000f72 	.word	0x20000f72
 8002ba8:	2000146c 	.word	0x2000146c
 8002bac:	20001480 	.word	0x20001480
 8002bb0:	20000f70 	.word	0x20000f70
		} else if(devirmeYukariIleriLimit == 1){
 8002bb4:	4b79      	ldr	r3, [pc, #484]	@ (8002d9c <menu+0x1a24>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d104      	bne.n	8002bc6 <menu+0x184e>
			lcd_print(2, 1, aktifText);
 8002bbc:	4a78      	ldr	r2, [pc, #480]	@ (8002da0 <menu+0x1a28>)
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f005 fd3f 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	4876      	ldr	r0, [pc, #472]	@ (8002da4 <menu+0x1a2c>)
 8002bca:	f007 f865 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d115      	bne.n	8002c00 <menu+0x1888>
 8002bd4:	4b74      	ldr	r3, [pc, #464]	@ (8002da8 <menu+0x1a30>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	f083 0301 	eor.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00e      	beq.n	8002c00 <menu+0x1888>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002be2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d9c <menu+0x1a24>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4b6c      	ldr	r3, [pc, #432]	@ (8002d9c <menu+0x1a24>)
 8002bec:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002bee:	4b6b      	ldr	r3, [pc, #428]	@ (8002d9c <menu+0x1a24>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d902      	bls.n	8002bfc <menu+0x1884>
				devirmeYukariIleriLimit = 0;
 8002bf6:	4b69      	ldr	r3, [pc, #420]	@ (8002d9c <menu+0x1a24>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bfc:	f001 f8d0 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c00:	2104      	movs	r1, #4
 8002c02:	4868      	ldr	r0, [pc, #416]	@ (8002da4 <menu+0x1a2c>)
 8002c04:	f007 f848 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d115      	bne.n	8002c3a <menu+0x18c2>
 8002c0e:	4b66      	ldr	r3, [pc, #408]	@ (8002da8 <menu+0x1a30>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	f083 0301 	eor.w	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <menu+0x18c2>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002c1c:	4b5f      	ldr	r3, [pc, #380]	@ (8002d9c <menu+0x1a24>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b5d      	ldr	r3, [pc, #372]	@ (8002d9c <menu+0x1a24>)
 8002c26:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002c28:	4b5c      	ldr	r3, [pc, #368]	@ (8002d9c <menu+0x1a24>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <menu+0x18be>
		   		devirmeYukariIleriLimit = 1;
 8002c30:	4b5a      	ldr	r3, [pc, #360]	@ (8002d9c <menu+0x1a24>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c36:	f001 f8b3 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3a:	2108      	movs	r1, #8
 8002c3c:	4859      	ldr	r0, [pc, #356]	@ (8002da4 <menu+0x1a2c>)
 8002c3e:	f007 f82b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10d      	bne.n	8002c64 <menu+0x18ec>
 8002c48:	4b57      	ldr	r3, [pc, #348]	@ (8002da8 <menu+0x1a30>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f083 0301 	eor.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <menu+0x18ec>
			eepromData[16] = devirmeYukariIleriLimit;
 8002c56:	4b51      	ldr	r3, [pc, #324]	@ (8002d9c <menu+0x1a24>)
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	4b54      	ldr	r3, [pc, #336]	@ (8002dac <menu+0x1a34>)
 8002c5c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002c5e:	4b54      	ldr	r3, [pc, #336]	@ (8002db0 <menu+0x1a38>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002c64:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <menu+0x1a3c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b13      	cmp	r3, #19
 8002c6a:	d174      	bne.n	8002d56 <menu+0x19de>
		if(devirmeYuruyusSecim == 2) {
 8002c6c:	4b52      	ldr	r3, [pc, #328]	@ (8002db8 <menu+0x1a40>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d105      	bne.n	8002c80 <menu+0x1908>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002c74:	4a51      	ldr	r2, [pc, #324]	@ (8002dbc <menu+0x1a44>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f005 fce3 	bl	8008644 <lcd_print>
 8002c7e:	e008      	b.n	8002c92 <menu+0x191a>
		} else if(devirmeYuruyusSecim == 1) {
 8002c80:	4b4d      	ldr	r3, [pc, #308]	@ (8002db8 <menu+0x1a40>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d104      	bne.n	8002c92 <menu+0x191a>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002c88:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc0 <menu+0x1a48>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f005 fcd9 	bl	8008644 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002c92:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc4 <menu+0x1a4c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <menu+0x192e>
			lcd_print(2, 1, pasifText);
 8002c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc8 <menu+0x1a50>)
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	2002      	movs	r0, #2
 8002ca0:	f005 fcd0 	bl	8008644 <lcd_print>
 8002ca4:	e008      	b.n	8002cb8 <menu+0x1940>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002ca6:	4b47      	ldr	r3, [pc, #284]	@ (8002dc4 <menu+0x1a4c>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d104      	bne.n	8002cb8 <menu+0x1940>
			lcd_print(2, 1, aktifText);
 8002cae:	4a3c      	ldr	r2, [pc, #240]	@ (8002da0 <menu+0x1a28>)
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f005 fcc6 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb8:	2102      	movs	r1, #2
 8002cba:	483a      	ldr	r0, [pc, #232]	@ (8002da4 <menu+0x1a2c>)
 8002cbc:	f006 ffec 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d115      	bne.n	8002cf2 <menu+0x197a>
 8002cc6:	4b38      	ldr	r3, [pc, #224]	@ (8002da8 <menu+0x1a30>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	f083 0301 	eor.w	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <menu+0x197a>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc4 <menu+0x1a4c>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b39      	ldr	r3, [pc, #228]	@ (8002dc4 <menu+0x1a4c>)
 8002cde:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002ce0:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <menu+0x1a4c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d902      	bls.n	8002cee <menu+0x1976>
				devirmeAsagiGeriLimit = 0;
 8002ce8:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <menu+0x1a4c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cee:	f001 f857 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	482b      	ldr	r0, [pc, #172]	@ (8002da4 <menu+0x1a2c>)
 8002cf6:	f006 ffcf 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d115      	bne.n	8002d2c <menu+0x19b4>
 8002d00:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <menu+0x1a30>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	f083 0301 	eor.w	r3, r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00e      	beq.n	8002d2c <menu+0x19b4>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc4 <menu+0x1a4c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc4 <menu+0x1a4c>)
 8002d18:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <menu+0x1a4c>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <menu+0x19b0>
		   		devirmeAsagiGeriLimit = 1;
 8002d22:	4b28      	ldr	r3, [pc, #160]	@ (8002dc4 <menu+0x1a4c>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d28:	f001 f83a 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	481d      	ldr	r0, [pc, #116]	@ (8002da4 <menu+0x1a2c>)
 8002d30:	f006 ffb2 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d10d      	bne.n	8002d56 <menu+0x19de>
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <menu+0x1a30>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <menu+0x19de>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <menu+0x1a4c>)
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <menu+0x1a34>)
 8002d4e:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002d50:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <menu+0x1a38>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002d56:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <menu+0x1a3c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b14      	cmp	r3, #20
 8002d5c:	f040 809e 	bne.w	8002e9c <menu+0x1b24>
		if(devirmeYuruyusSecim == 1) {
 8002d60:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <menu+0x1a40>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <menu+0x19fc>
			lcd_print(1, 1, yuruyusSecildiText);
 8002d68:	4a18      	ldr	r2, [pc, #96]	@ (8002dcc <menu+0x1a54>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f005 fc69 	bl	8008644 <lcd_print>
 8002d72:	e008      	b.n	8002d86 <menu+0x1a0e>
		} else if(devirmeYuruyusSecim == 2) {
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <menu+0x1a40>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d104      	bne.n	8002d86 <menu+0x1a0e>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002d7c:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <menu+0x1a58>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2001      	movs	r0, #1
 8002d82:	f005 fc5f 	bl	8008644 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <menu+0x1a5c>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d126      	bne.n	8002ddc <menu+0x1a64>
			lcd_print(2, 1, tekTesirText);
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <menu+0x1a60>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	2002      	movs	r0, #2
 8002d94:	f005 fc56 	bl	8008644 <lcd_print>
 8002d98:	e029      	b.n	8002dee <menu+0x1a76>
 8002d9a:	bf00      	nop
 8002d9c:	20000f70 	.word	0x20000f70
 8002da0:	20001250 	.word	0x20001250
 8002da4:	40010800 	.word	0x40010800
 8002da8:	20000f8f 	.word	0x20000f8f
 8002dac:	20000e88 	.word	0x20000e88
 8002db0:	20000f8c 	.word	0x20000f8c
 8002db4:	20000f60 	.word	0x20000f60
 8002db8:	20000f6f 	.word	0x20000f6f
 8002dbc:	20001494 	.word	0x20001494
 8002dc0:	200014a8 	.word	0x200014a8
 8002dc4:	20000f71 	.word	0x20000f71
 8002dc8:	2000123c 	.word	0x2000123c
 8002dcc:	200014bc 	.word	0x200014bc
 8002dd0:	200014d0 	.word	0x200014d0
 8002dd4:	20000f72 	.word	0x20000f72
 8002dd8:	200014e4 	.word	0x200014e4
		} else if(devirmeSilindirTipi == 1) {
 8002ddc:	4b39      	ldr	r3, [pc, #228]	@ (8002ec4 <menu+0x1b4c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d104      	bne.n	8002dee <menu+0x1a76>
			lcd_print(2, 1, ciftTesirText);
 8002de4:	4a38      	ldr	r2, [pc, #224]	@ (8002ec8 <menu+0x1b50>)
 8002de6:	2101      	movs	r1, #1
 8002de8:	2002      	movs	r0, #2
 8002dea:	f005 fc2b 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002dee:	2102      	movs	r1, #2
 8002df0:	4836      	ldr	r0, [pc, #216]	@ (8002ecc <menu+0x1b54>)
 8002df2:	f006 ff51 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d119      	bne.n	8002e30 <menu+0x1ab8>
 8002dfc:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <menu+0x1b58>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d012      	beq.n	8002e30 <menu+0x1ab8>
 8002e0a:	4b32      	ldr	r3, [pc, #200]	@ (8002ed4 <menu+0x1b5c>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d10e      	bne.n	8002e30 <menu+0x1ab8>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002e12:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec4 <menu+0x1b4c>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec4 <menu+0x1b4c>)
 8002e1c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002e1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <menu+0x1b4c>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d902      	bls.n	8002e2c <menu+0x1ab4>
				devirmeSilindirTipi = 0;
 8002e26:	4b27      	ldr	r3, [pc, #156]	@ (8002ec4 <menu+0x1b4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e2c:	f000 ffb8 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002e30:	2104      	movs	r1, #4
 8002e32:	4826      	ldr	r0, [pc, #152]	@ (8002ecc <menu+0x1b54>)
 8002e34:	f006 ff30 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d119      	bne.n	8002e72 <menu+0x1afa>
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <menu+0x1b58>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	f083 0301 	eor.w	r3, r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <menu+0x1afa>
 8002e4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ed4 <menu+0x1b5c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d10e      	bne.n	8002e72 <menu+0x1afa>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <menu+0x1b4c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <menu+0x1b4c>)
 8002e5e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002e60:	4b18      	ldr	r3, [pc, #96]	@ (8002ec4 <menu+0x1b4c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <menu+0x1af6>
		   		devirmeSilindirTipi = 1;
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <menu+0x1b4c>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e6e:	f000 ff97 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e72:	2108      	movs	r1, #8
 8002e74:	4815      	ldr	r0, [pc, #84]	@ (8002ecc <menu+0x1b54>)
 8002e76:	f006 ff0f 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10d      	bne.n	8002e9c <menu+0x1b24>
 8002e80:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <menu+0x1b58>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f083 0301 	eor.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <menu+0x1b24>
			eepromData[18] = devirmeSilindirTipi;
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <menu+0x1b4c>)
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <menu+0x1b60>)
 8002e94:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <menu+0x1b64>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002e9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <menu+0x1b68>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b15      	cmp	r3, #21
 8002ea2:	f040 8088 	bne.w	8002fb6 <menu+0x1c3e>
		lcd_print(1, 1, platformSilindirTipiText);
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee4 <menu+0x1b6c>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f005 fbca 	bl	8008644 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <menu+0x1b70>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d11b      	bne.n	8002ef0 <menu+0x1b78>
			lcd_print(2, 1, tekTesirText);
 8002eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8002eec <menu+0x1b74>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	f005 fbc1 	bl	8008644 <lcd_print>
 8002ec2:	e01e      	b.n	8002f02 <menu+0x1b8a>
 8002ec4:	20000f72 	.word	0x20000f72
 8002ec8:	200014f8 	.word	0x200014f8
 8002ecc:	40010800 	.word	0x40010800
 8002ed0:	20000f8f 	.word	0x20000f8f
 8002ed4:	20000f6f 	.word	0x20000f6f
 8002ed8:	20000e88 	.word	0x20000e88
 8002edc:	20000f8c 	.word	0x20000f8c
 8002ee0:	20000f60 	.word	0x20000f60
 8002ee4:	2000150c 	.word	0x2000150c
 8002ee8:	20000f73 	.word	0x20000f73
 8002eec:	200014e4 	.word	0x200014e4
		} else if(platformSilindirTipi == 1) {
 8002ef0:	4ba1      	ldr	r3, [pc, #644]	@ (8003178 <menu+0x1e00>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d104      	bne.n	8002f02 <menu+0x1b8a>
			lcd_print(2, 1, ciftTesirText);
 8002ef8:	4aa0      	ldr	r2, [pc, #640]	@ (800317c <menu+0x1e04>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2002      	movs	r0, #2
 8002efe:	f005 fba1 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f02:	2102      	movs	r1, #2
 8002f04:	489e      	ldr	r0, [pc, #632]	@ (8003180 <menu+0x1e08>)
 8002f06:	f006 fec7 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d115      	bne.n	8002f3c <menu+0x1bc4>
 8002f10:	4b9c      	ldr	r3, [pc, #624]	@ (8003184 <menu+0x1e0c>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <menu+0x1bc4>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002f1e:	4b96      	ldr	r3, [pc, #600]	@ (8003178 <menu+0x1e00>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b94      	ldr	r3, [pc, #592]	@ (8003178 <menu+0x1e00>)
 8002f28:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002f2a:	4b93      	ldr	r3, [pc, #588]	@ (8003178 <menu+0x1e00>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d902      	bls.n	8002f38 <menu+0x1bc0>
				platformSilindirTipi = 0;
 8002f32:	4b91      	ldr	r3, [pc, #580]	@ (8003178 <menu+0x1e00>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f38:	f000 ff32 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4890      	ldr	r0, [pc, #576]	@ (8003180 <menu+0x1e08>)
 8002f40:	f006 feaa 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d115      	bne.n	8002f76 <menu+0x1bfe>
 8002f4a:	4b8e      	ldr	r3, [pc, #568]	@ (8003184 <menu+0x1e0c>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <menu+0x1bfe>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002f58:	4b87      	ldr	r3, [pc, #540]	@ (8003178 <menu+0x1e00>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b85      	ldr	r3, [pc, #532]	@ (8003178 <menu+0x1e00>)
 8002f62:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002f64:	4b84      	ldr	r3, [pc, #528]	@ (8003178 <menu+0x1e00>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <menu+0x1bfa>
		   		platformSilindirTipi = 1;
 8002f6c:	4b82      	ldr	r3, [pc, #520]	@ (8003178 <menu+0x1e00>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f72:	f000 ff15 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f76:	2108      	movs	r1, #8
 8002f78:	4881      	ldr	r0, [pc, #516]	@ (8003180 <menu+0x1e08>)
 8002f7a:	f006 fe8d 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d118      	bne.n	8002fb6 <menu+0x1c3e>
 8002f84:	4b7f      	ldr	r3, [pc, #508]	@ (8003184 <menu+0x1e0c>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f083 0301 	eor.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d011      	beq.n	8002fb6 <menu+0x1c3e>
			eepromData[19] = platformSilindirTipi;
 8002f92:	4b79      	ldr	r3, [pc, #484]	@ (8003178 <menu+0x1e00>)
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	4b7c      	ldr	r3, [pc, #496]	@ (8003188 <menu+0x1e10>)
 8002f98:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002f9a:	4b77      	ldr	r3, [pc, #476]	@ (8003178 <menu+0x1e00>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d106      	bne.n	8002fb0 <menu+0x1c38>
				altLimit = 1;
 8002fa2:	4b7a      	ldr	r3, [pc, #488]	@ (800318c <menu+0x1e14>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002fa8:	4b78      	ldr	r3, [pc, #480]	@ (800318c <menu+0x1e14>)
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	4b76      	ldr	r3, [pc, #472]	@ (8003188 <menu+0x1e10>)
 8002fae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002fb0:	4b77      	ldr	r3, [pc, #476]	@ (8003190 <menu+0x1e18>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002fb6:	4b77      	ldr	r3, [pc, #476]	@ (8003194 <menu+0x1e1c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b16      	cmp	r3, #22
 8002fbc:	d164      	bne.n	8003088 <menu+0x1d10>
		lcd_print(1, 1, yukariValfSureText);
 8002fbe:	4a76      	ldr	r2, [pc, #472]	@ (8003198 <menu+0x1e20>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f005 fb3e 	bl	8008644 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002fc8:	4a74      	ldr	r2, [pc, #464]	@ (800319c <menu+0x1e24>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f005 fb39 	bl	8008644 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002fd2:	4b73      	ldr	r3, [pc, #460]	@ (80031a0 <menu+0x1e28>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	220a      	movs	r2, #10
 8002fd8:	4972      	ldr	r1, [pc, #456]	@ (80031a4 <menu+0x1e2c>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f009 fe88 	bl	800ccf0 <itoa>
		lcd_print(2,16,snum);
 8002fe0:	4a70      	ldr	r2, [pc, #448]	@ (80031a4 <menu+0x1e2c>)
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f005 fb2d 	bl	8008644 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fea:	2102      	movs	r1, #2
 8002fec:	4864      	ldr	r0, [pc, #400]	@ (8003180 <menu+0x1e08>)
 8002fee:	f006 fe53 	bl	8009c98 <HAL_GPIO_ReadPin>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d115      	bne.n	8003024 <menu+0x1cac>
 8002ff8:	4b62      	ldr	r3, [pc, #392]	@ (8003184 <menu+0x1e0c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	f083 0301 	eor.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00e      	beq.n	8003024 <menu+0x1cac>
			yukariValfTmr = yukariValfTmr + 1;
 8003006:	4b66      	ldr	r3, [pc, #408]	@ (80031a0 <menu+0x1e28>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b64      	ldr	r3, [pc, #400]	@ (80031a0 <menu+0x1e28>)
 8003010:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003012:	4b63      	ldr	r3, [pc, #396]	@ (80031a0 <menu+0x1e28>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b05      	cmp	r3, #5
 8003018:	d902      	bls.n	8003020 <menu+0x1ca8>
				yukariValfTmr = 0;
 800301a:	4b61      	ldr	r3, [pc, #388]	@ (80031a0 <menu+0x1e28>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003020:	f000 febe 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003024:	2104      	movs	r1, #4
 8003026:	4856      	ldr	r0, [pc, #344]	@ (8003180 <menu+0x1e08>)
 8003028:	f006 fe36 	bl	8009c98 <HAL_GPIO_ReadPin>
 800302c:	4603      	mov	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d115      	bne.n	800305e <menu+0x1ce6>
 8003032:	4b54      	ldr	r3, [pc, #336]	@ (8003184 <menu+0x1e0c>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	f083 0301 	eor.w	r3, r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00e      	beq.n	800305e <menu+0x1ce6>
			yukariValfTmr = yukariValfTmr - 1;
 8003040:	4b57      	ldr	r3, [pc, #348]	@ (80031a0 <menu+0x1e28>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	3b01      	subs	r3, #1
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b55      	ldr	r3, [pc, #340]	@ (80031a0 <menu+0x1e28>)
 800304a:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800304c:	4b54      	ldr	r3, [pc, #336]	@ (80031a0 <menu+0x1e28>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b06      	cmp	r3, #6
 8003052:	d902      	bls.n	800305a <menu+0x1ce2>
		   		yukariValfTmr = 5;
 8003054:	4b52      	ldr	r3, [pc, #328]	@ (80031a0 <menu+0x1e28>)
 8003056:	2205      	movs	r2, #5
 8003058:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800305a:	f000 fea1 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800305e:	2108      	movs	r1, #8
 8003060:	4847      	ldr	r0, [pc, #284]	@ (8003180 <menu+0x1e08>)
 8003062:	f006 fe19 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10d      	bne.n	8003088 <menu+0x1d10>
 800306c:	4b45      	ldr	r3, [pc, #276]	@ (8003184 <menu+0x1e0c>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <menu+0x1d10>
			eepromData[20] = yukariValfTmr;
 800307a:	4b49      	ldr	r3, [pc, #292]	@ (80031a0 <menu+0x1e28>)
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	4b42      	ldr	r3, [pc, #264]	@ (8003188 <menu+0x1e10>)
 8003080:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003082:	4b43      	ldr	r3, [pc, #268]	@ (8003190 <menu+0x1e18>)
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003088:	4b42      	ldr	r3, [pc, #264]	@ (8003194 <menu+0x1e1c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b17      	cmp	r3, #23
 800308e:	d164      	bne.n	800315a <menu+0x1de2>
		lcd_print(1, 1, asagiValfSureText);
 8003090:	4a45      	ldr	r2, [pc, #276]	@ (80031a8 <menu+0x1e30>)
 8003092:	2101      	movs	r1, #1
 8003094:	2001      	movs	r0, #1
 8003096:	f005 fad5 	bl	8008644 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800309a:	4a40      	ldr	r2, [pc, #256]	@ (800319c <menu+0x1e24>)
 800309c:	2101      	movs	r1, #1
 800309e:	2002      	movs	r0, #2
 80030a0:	f005 fad0 	bl	8008644 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80030a4:	4b41      	ldr	r3, [pc, #260]	@ (80031ac <menu+0x1e34>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	220a      	movs	r2, #10
 80030aa:	493e      	ldr	r1, [pc, #248]	@ (80031a4 <menu+0x1e2c>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f009 fe1f 	bl	800ccf0 <itoa>
		lcd_print(2,16,snum);
 80030b2:	4a3c      	ldr	r2, [pc, #240]	@ (80031a4 <menu+0x1e2c>)
 80030b4:	2110      	movs	r1, #16
 80030b6:	2002      	movs	r0, #2
 80030b8:	f005 fac4 	bl	8008644 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030bc:	2102      	movs	r1, #2
 80030be:	4830      	ldr	r0, [pc, #192]	@ (8003180 <menu+0x1e08>)
 80030c0:	f006 fdea 	bl	8009c98 <HAL_GPIO_ReadPin>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d115      	bne.n	80030f6 <menu+0x1d7e>
 80030ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003184 <menu+0x1e0c>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	f083 0301 	eor.w	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <menu+0x1d7e>
			asagiValfTmr = asagiValfTmr + 1;
 80030d8:	4b34      	ldr	r3, [pc, #208]	@ (80031ac <menu+0x1e34>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b32      	ldr	r3, [pc, #200]	@ (80031ac <menu+0x1e34>)
 80030e2:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80030e4:	4b31      	ldr	r3, [pc, #196]	@ (80031ac <menu+0x1e34>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b05      	cmp	r3, #5
 80030ea:	d902      	bls.n	80030f2 <menu+0x1d7a>
				asagiValfTmr = 0;
 80030ec:	4b2f      	ldr	r3, [pc, #188]	@ (80031ac <menu+0x1e34>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030f2:	f000 fe55 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f6:	2104      	movs	r1, #4
 80030f8:	4821      	ldr	r0, [pc, #132]	@ (8003180 <menu+0x1e08>)
 80030fa:	f006 fdcd 	bl	8009c98 <HAL_GPIO_ReadPin>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b01      	cmp	r3, #1
 8003102:	d115      	bne.n	8003130 <menu+0x1db8>
 8003104:	4b1f      	ldr	r3, [pc, #124]	@ (8003184 <menu+0x1e0c>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	f083 0301 	eor.w	r3, r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00e      	beq.n	8003130 <menu+0x1db8>
			asagiValfTmr = asagiValfTmr - 1;
 8003112:	4b26      	ldr	r3, [pc, #152]	@ (80031ac <menu+0x1e34>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	3b01      	subs	r3, #1
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b24      	ldr	r3, [pc, #144]	@ (80031ac <menu+0x1e34>)
 800311c:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800311e:	4b23      	ldr	r3, [pc, #140]	@ (80031ac <menu+0x1e34>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d902      	bls.n	800312c <menu+0x1db4>
		   		asagiValfTmr = 5;
 8003126:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <menu+0x1e34>)
 8003128:	2205      	movs	r2, #5
 800312a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800312c:	f000 fe38 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003130:	2108      	movs	r1, #8
 8003132:	4813      	ldr	r0, [pc, #76]	@ (8003180 <menu+0x1e08>)
 8003134:	f006 fdb0 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003138:	4603      	mov	r3, r0
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10d      	bne.n	800315a <menu+0x1de2>
 800313e:	4b11      	ldr	r3, [pc, #68]	@ (8003184 <menu+0x1e0c>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f083 0301 	eor.w	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <menu+0x1de2>
			eepromData[21] = asagiValfTmr;
 800314c:	4b17      	ldr	r3, [pc, #92]	@ (80031ac <menu+0x1e34>)
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <menu+0x1e10>)
 8003152:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003154:	4b0e      	ldr	r3, [pc, #56]	@ (8003190 <menu+0x1e18>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800315a:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <menu+0x1e1c>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b18      	cmp	r3, #24
 8003160:	f040 8093 	bne.w	800328a <menu+0x1f12>
		if(devirmeYuruyusSecim == 2) {
 8003164:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <menu+0x1e38>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d125      	bne.n	80031b8 <menu+0x1e40>
			lcd_print(1, 1, devirmeYukariValfSureText);
 800316c:	4a11      	ldr	r2, [pc, #68]	@ (80031b4 <menu+0x1e3c>)
 800316e:	2101      	movs	r1, #1
 8003170:	2001      	movs	r0, #1
 8003172:	f005 fa67 	bl	8008644 <lcd_print>
 8003176:	e028      	b.n	80031ca <menu+0x1e52>
 8003178:	20000f73 	.word	0x20000f73
 800317c:	200014f8 	.word	0x200014f8
 8003180:	40010800 	.word	0x40010800
 8003184:	20000f8f 	.word	0x20000f8f
 8003188:	20000e88 	.word	0x20000e88
 800318c:	20000f66 	.word	0x20000f66
 8003190:	20000f8c 	.word	0x20000f8c
 8003194:	20000f60 	.word	0x20000f60
 8003198:	20001520 	.word	0x20001520
 800319c:	20001368 	.word	0x20001368
 80031a0:	20000f74 	.word	0x20000f74
 80031a4:	20000ef8 	.word	0x20000ef8
 80031a8:	20001534 	.word	0x20001534
 80031ac:	20000f75 	.word	0x20000f75
 80031b0:	20000f6f 	.word	0x20000f6f
 80031b4:	20001548 	.word	0x20001548
		} else if(devirmeYuruyusSecim == 1) {
 80031b8:	4b8c      	ldr	r3, [pc, #560]	@ (80033ec <menu+0x2074>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d104      	bne.n	80031ca <menu+0x1e52>
			lcd_print(1, 1, ileriValfSureText);
 80031c0:	4a8b      	ldr	r2, [pc, #556]	@ (80033f0 <menu+0x2078>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2001      	movs	r0, #1
 80031c6:	f005 fa3d 	bl	8008644 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80031ca:	4a8a      	ldr	r2, [pc, #552]	@ (80033f4 <menu+0x207c>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	2002      	movs	r0, #2
 80031d0:	f005 fa38 	bl	8008644 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80031d4:	4b88      	ldr	r3, [pc, #544]	@ (80033f8 <menu+0x2080>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	220a      	movs	r2, #10
 80031da:	4988      	ldr	r1, [pc, #544]	@ (80033fc <menu+0x2084>)
 80031dc:	4618      	mov	r0, r3
 80031de:	f009 fd87 	bl	800ccf0 <itoa>
		lcd_print(2, 16, snum);
 80031e2:	4a86      	ldr	r2, [pc, #536]	@ (80033fc <menu+0x2084>)
 80031e4:	2110      	movs	r1, #16
 80031e6:	2002      	movs	r0, #2
 80031e8:	f005 fa2c 	bl	8008644 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ec:	2102      	movs	r1, #2
 80031ee:	4884      	ldr	r0, [pc, #528]	@ (8003400 <menu+0x2088>)
 80031f0:	f006 fd52 	bl	8009c98 <HAL_GPIO_ReadPin>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d115      	bne.n	8003226 <menu+0x1eae>
 80031fa:	4b82      	ldr	r3, [pc, #520]	@ (8003404 <menu+0x208c>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <menu+0x1eae>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003208:	4b7b      	ldr	r3, [pc, #492]	@ (80033f8 <menu+0x2080>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b79      	ldr	r3, [pc, #484]	@ (80033f8 <menu+0x2080>)
 8003212:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003214:	4b78      	ldr	r3, [pc, #480]	@ (80033f8 <menu+0x2080>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b05      	cmp	r3, #5
 800321a:	d902      	bls.n	8003222 <menu+0x1eaa>
				devirmeYukariIleriTmr = 0;
 800321c:	4b76      	ldr	r3, [pc, #472]	@ (80033f8 <menu+0x2080>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003222:	f000 fdbd 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003226:	2104      	movs	r1, #4
 8003228:	4875      	ldr	r0, [pc, #468]	@ (8003400 <menu+0x2088>)
 800322a:	f006 fd35 	bl	8009c98 <HAL_GPIO_ReadPin>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d115      	bne.n	8003260 <menu+0x1ee8>
 8003234:	4b73      	ldr	r3, [pc, #460]	@ (8003404 <menu+0x208c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f083 0301 	eor.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00e      	beq.n	8003260 <menu+0x1ee8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003242:	4b6d      	ldr	r3, [pc, #436]	@ (80033f8 <menu+0x2080>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	3b01      	subs	r3, #1
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4b6b      	ldr	r3, [pc, #428]	@ (80033f8 <menu+0x2080>)
 800324c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 800324e:	4b6a      	ldr	r3, [pc, #424]	@ (80033f8 <menu+0x2080>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d902      	bls.n	800325c <menu+0x1ee4>
		   		devirmeYukariIleriTmr = 5;
 8003256:	4b68      	ldr	r3, [pc, #416]	@ (80033f8 <menu+0x2080>)
 8003258:	2205      	movs	r2, #5
 800325a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800325c:	f000 fda0 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003260:	2108      	movs	r1, #8
 8003262:	4867      	ldr	r0, [pc, #412]	@ (8003400 <menu+0x2088>)
 8003264:	f006 fd18 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003268:	4603      	mov	r3, r0
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10d      	bne.n	800328a <menu+0x1f12>
 800326e:	4b65      	ldr	r3, [pc, #404]	@ (8003404 <menu+0x208c>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f083 0301 	eor.w	r3, r3, #1
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <menu+0x1f12>
			eepromData[22] = devirmeYukariIleriTmr;
 800327c:	4b5e      	ldr	r3, [pc, #376]	@ (80033f8 <menu+0x2080>)
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	4b61      	ldr	r3, [pc, #388]	@ (8003408 <menu+0x2090>)
 8003282:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003284:	4b61      	ldr	r3, [pc, #388]	@ (800340c <menu+0x2094>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800328a:	4b61      	ldr	r3, [pc, #388]	@ (8003410 <menu+0x2098>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b19      	cmp	r3, #25
 8003290:	d172      	bne.n	8003378 <menu+0x2000>
		if(devirmeYuruyusSecim == 2) {
 8003292:	4b56      	ldr	r3, [pc, #344]	@ (80033ec <menu+0x2074>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d105      	bne.n	80032a6 <menu+0x1f2e>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 800329a:	4a5e      	ldr	r2, [pc, #376]	@ (8003414 <menu+0x209c>)
 800329c:	2101      	movs	r1, #1
 800329e:	2001      	movs	r0, #1
 80032a0:	f005 f9d0 	bl	8008644 <lcd_print>
 80032a4:	e008      	b.n	80032b8 <menu+0x1f40>
		} else if(devirmeYuruyusSecim == 1) {
 80032a6:	4b51      	ldr	r3, [pc, #324]	@ (80033ec <menu+0x2074>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d104      	bne.n	80032b8 <menu+0x1f40>
			lcd_print(1, 1, geriValfSureText);
 80032ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003418 <menu+0x20a0>)
 80032b0:	2101      	movs	r1, #1
 80032b2:	2001      	movs	r0, #1
 80032b4:	f005 f9c6 	bl	8008644 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032b8:	4a4e      	ldr	r2, [pc, #312]	@ (80033f4 <menu+0x207c>)
 80032ba:	2101      	movs	r1, #1
 80032bc:	2002      	movs	r0, #2
 80032be:	f005 f9c1 	bl	8008644 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80032c2:	4b56      	ldr	r3, [pc, #344]	@ (800341c <menu+0x20a4>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	220a      	movs	r2, #10
 80032c8:	494c      	ldr	r1, [pc, #304]	@ (80033fc <menu+0x2084>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	f009 fd10 	bl	800ccf0 <itoa>
		lcd_print(2,16,snum);
 80032d0:	4a4a      	ldr	r2, [pc, #296]	@ (80033fc <menu+0x2084>)
 80032d2:	2110      	movs	r1, #16
 80032d4:	2002      	movs	r0, #2
 80032d6:	f005 f9b5 	bl	8008644 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032da:	2102      	movs	r1, #2
 80032dc:	4848      	ldr	r0, [pc, #288]	@ (8003400 <menu+0x2088>)
 80032de:	f006 fcdb 	bl	8009c98 <HAL_GPIO_ReadPin>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d115      	bne.n	8003314 <menu+0x1f9c>
 80032e8:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <menu+0x208c>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00e      	beq.n	8003314 <menu+0x1f9c>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80032f6:	4b49      	ldr	r3, [pc, #292]	@ (800341c <menu+0x20a4>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4b47      	ldr	r3, [pc, #284]	@ (800341c <menu+0x20a4>)
 8003300:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003302:	4b46      	ldr	r3, [pc, #280]	@ (800341c <menu+0x20a4>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d902      	bls.n	8003310 <menu+0x1f98>
				devirmeAsagiGeriTmr = 0;
 800330a:	4b44      	ldr	r3, [pc, #272]	@ (800341c <menu+0x20a4>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003310:	f000 fd46 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003314:	2104      	movs	r1, #4
 8003316:	483a      	ldr	r0, [pc, #232]	@ (8003400 <menu+0x2088>)
 8003318:	f006 fcbe 	bl	8009c98 <HAL_GPIO_ReadPin>
 800331c:	4603      	mov	r3, r0
 800331e:	2b01      	cmp	r3, #1
 8003320:	d115      	bne.n	800334e <menu+0x1fd6>
 8003322:	4b38      	ldr	r3, [pc, #224]	@ (8003404 <menu+0x208c>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	f083 0301 	eor.w	r3, r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00e      	beq.n	800334e <menu+0x1fd6>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003330:	4b3a      	ldr	r3, [pc, #232]	@ (800341c <menu+0x20a4>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	3b01      	subs	r3, #1
 8003336:	b2da      	uxtb	r2, r3
 8003338:	4b38      	ldr	r3, [pc, #224]	@ (800341c <menu+0x20a4>)
 800333a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800333c:	4b37      	ldr	r3, [pc, #220]	@ (800341c <menu+0x20a4>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b06      	cmp	r3, #6
 8003342:	d902      	bls.n	800334a <menu+0x1fd2>
		   		devirmeAsagiGeriTmr = 5;
 8003344:	4b35      	ldr	r3, [pc, #212]	@ (800341c <menu+0x20a4>)
 8003346:	2205      	movs	r2, #5
 8003348:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800334a:	f000 fd29 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800334e:	2108      	movs	r1, #8
 8003350:	482b      	ldr	r0, [pc, #172]	@ (8003400 <menu+0x2088>)
 8003352:	f006 fca1 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003356:	4603      	mov	r3, r0
 8003358:	2b01      	cmp	r3, #1
 800335a:	d10d      	bne.n	8003378 <menu+0x2000>
 800335c:	4b29      	ldr	r3, [pc, #164]	@ (8003404 <menu+0x208c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	f083 0301 	eor.w	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <menu+0x2000>
			eepromData[23] = devirmeAsagiGeriTmr;
 800336a:	4b2c      	ldr	r3, [pc, #176]	@ (800341c <menu+0x20a4>)
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	4b26      	ldr	r3, [pc, #152]	@ (8003408 <menu+0x2090>)
 8003370:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003372:	4b26      	ldr	r3, [pc, #152]	@ (800340c <menu+0x2094>)
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003378:	4b25      	ldr	r3, [pc, #148]	@ (8003410 <menu+0x2098>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b1a      	cmp	r3, #26
 800337e:	f040 80b7 	bne.w	80034f0 <menu+0x2178>
		lcd_print(1, 1, calismaSuresiText);
 8003382:	4a27      	ldr	r2, [pc, #156]	@ (8003420 <menu+0x20a8>)
 8003384:	2101      	movs	r1, #1
 8003386:	2001      	movs	r0, #1
 8003388:	f005 f95c 	bl	8008644 <lcd_print>

		if(makineCalismaTmr > 99) {
 800338c:	4b25      	ldr	r3, [pc, #148]	@ (8003424 <menu+0x20ac>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b63      	cmp	r3, #99	@ 0x63
 8003392:	d911      	bls.n	80033b8 <menu+0x2040>
			lcd_print(2, 1, kacSaniyeText);
 8003394:	4a17      	ldr	r2, [pc, #92]	@ (80033f4 <menu+0x207c>)
 8003396:	2101      	movs	r1, #1
 8003398:	2002      	movs	r0, #2
 800339a:	f005 f953 	bl	8008644 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800339e:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <menu+0x20ac>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	220a      	movs	r2, #10
 80033a4:	4915      	ldr	r1, [pc, #84]	@ (80033fc <menu+0x2084>)
 80033a6:	4618      	mov	r0, r3
 80033a8:	f009 fca2 	bl	800ccf0 <itoa>
			lcd_print(2,14,snum);
 80033ac:	4a13      	ldr	r2, [pc, #76]	@ (80033fc <menu+0x2084>)
 80033ae:	210e      	movs	r1, #14
 80033b0:	2002      	movs	r0, #2
 80033b2:	f005 f947 	bl	8008644 <lcd_print>
 80033b6:	e04c      	b.n	8003452 <menu+0x20da>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80033b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <menu+0x20ac>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b09      	cmp	r3, #9
 80033be:	d933      	bls.n	8003428 <menu+0x20b0>
 80033c0:	4b18      	ldr	r3, [pc, #96]	@ (8003424 <menu+0x20ac>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b63      	cmp	r3, #99	@ 0x63
 80033c6:	d82f      	bhi.n	8003428 <menu+0x20b0>
			lcd_print(2, 1, kacSaniyeText);
 80033c8:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <menu+0x207c>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f005 f939 	bl	8008644 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80033d2:	4b14      	ldr	r3, [pc, #80]	@ (8003424 <menu+0x20ac>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	220a      	movs	r2, #10
 80033d8:	4908      	ldr	r1, [pc, #32]	@ (80033fc <menu+0x2084>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f009 fc88 	bl	800ccf0 <itoa>
			lcd_print(2, 15, snum);
 80033e0:	4a06      	ldr	r2, [pc, #24]	@ (80033fc <menu+0x2084>)
 80033e2:	210f      	movs	r1, #15
 80033e4:	2002      	movs	r0, #2
 80033e6:	f005 f92d 	bl	8008644 <lcd_print>
 80033ea:	e032      	b.n	8003452 <menu+0x20da>
 80033ec:	20000f6f 	.word	0x20000f6f
 80033f0:	2000155c 	.word	0x2000155c
 80033f4:	20001368 	.word	0x20001368
 80033f8:	20000f76 	.word	0x20000f76
 80033fc:	20000ef8 	.word	0x20000ef8
 8003400:	40010800 	.word	0x40010800
 8003404:	20000f8f 	.word	0x20000f8f
 8003408:	20000e88 	.word	0x20000e88
 800340c:	20000f8c 	.word	0x20000f8c
 8003410:	20000f60 	.word	0x20000f60
 8003414:	20001570 	.word	0x20001570
 8003418:	20001584 	.word	0x20001584
 800341c:	20000f77 	.word	0x20000f77
 8003420:	20001598 	.word	0x20001598
 8003424:	20000f78 	.word	0x20000f78
		} else if(makineCalismaTmr <=  9) {
 8003428:	4b72      	ldr	r3, [pc, #456]	@ (80035f4 <menu+0x227c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b09      	cmp	r3, #9
 800342e:	d810      	bhi.n	8003452 <menu+0x20da>
			lcd_print(2, 1, kacSaniyeText);
 8003430:	4a71      	ldr	r2, [pc, #452]	@ (80035f8 <menu+0x2280>)
 8003432:	2101      	movs	r1, #1
 8003434:	2002      	movs	r0, #2
 8003436:	f005 f905 	bl	8008644 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800343a:	4b6e      	ldr	r3, [pc, #440]	@ (80035f4 <menu+0x227c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	220a      	movs	r2, #10
 8003440:	496e      	ldr	r1, [pc, #440]	@ (80035fc <menu+0x2284>)
 8003442:	4618      	mov	r0, r3
 8003444:	f009 fc54 	bl	800ccf0 <itoa>
			lcd_print(2, 16, snum);
 8003448:	4a6c      	ldr	r2, [pc, #432]	@ (80035fc <menu+0x2284>)
 800344a:	2110      	movs	r1, #16
 800344c:	2002      	movs	r0, #2
 800344e:	f005 f8f9 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003452:	2102      	movs	r1, #2
 8003454:	486a      	ldr	r0, [pc, #424]	@ (8003600 <menu+0x2288>)
 8003456:	f006 fc1f 	bl	8009c98 <HAL_GPIO_ReadPin>
 800345a:	4603      	mov	r3, r0
 800345c:	2b01      	cmp	r3, #1
 800345e:	d115      	bne.n	800348c <menu+0x2114>
 8003460:	4b68      	ldr	r3, [pc, #416]	@ (8003604 <menu+0x228c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	f083 0301 	eor.w	r3, r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00e      	beq.n	800348c <menu+0x2114>
			makineCalismaTmr = makineCalismaTmr + 1;
 800346e:	4b61      	ldr	r3, [pc, #388]	@ (80035f4 <menu+0x227c>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b5f      	ldr	r3, [pc, #380]	@ (80035f4 <menu+0x227c>)
 8003478:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800347a:	4b5e      	ldr	r3, [pc, #376]	@ (80035f4 <menu+0x227c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2bb4      	cmp	r3, #180	@ 0xb4
 8003480:	d902      	bls.n	8003488 <menu+0x2110>
				makineCalismaTmr = 0;
 8003482:	4b5c      	ldr	r3, [pc, #368]	@ (80035f4 <menu+0x227c>)
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003488:	f000 fc8a 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800348c:	2104      	movs	r1, #4
 800348e:	485c      	ldr	r0, [pc, #368]	@ (8003600 <menu+0x2288>)
 8003490:	f006 fc02 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d115      	bne.n	80034c6 <menu+0x214e>
 800349a:	4b5a      	ldr	r3, [pc, #360]	@ (8003604 <menu+0x228c>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	f083 0301 	eor.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00e      	beq.n	80034c6 <menu+0x214e>
			makineCalismaTmr = makineCalismaTmr - 1;
 80034a8:	4b52      	ldr	r3, [pc, #328]	@ (80035f4 <menu+0x227c>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	4b50      	ldr	r3, [pc, #320]	@ (80035f4 <menu+0x227c>)
 80034b2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80034b4:	4b4f      	ldr	r3, [pc, #316]	@ (80035f4 <menu+0x227c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2bb5      	cmp	r3, #181	@ 0xb5
 80034ba:	d902      	bls.n	80034c2 <menu+0x214a>
		   		makineCalismaTmr = 180;
 80034bc:	4b4d      	ldr	r3, [pc, #308]	@ (80035f4 <menu+0x227c>)
 80034be:	22b4      	movs	r2, #180	@ 0xb4
 80034c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034c2:	f000 fc6d 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034c6:	2108      	movs	r1, #8
 80034c8:	484d      	ldr	r0, [pc, #308]	@ (8003600 <menu+0x2288>)
 80034ca:	f006 fbe5 	bl	8009c98 <HAL_GPIO_ReadPin>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10d      	bne.n	80034f0 <menu+0x2178>
 80034d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003604 <menu+0x228c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	f083 0301 	eor.w	r3, r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <menu+0x2178>
			eepromData[24] = makineCalismaTmr;
 80034e2:	4b44      	ldr	r3, [pc, #272]	@ (80035f4 <menu+0x227c>)
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	4b48      	ldr	r3, [pc, #288]	@ (8003608 <menu+0x2290>)
 80034e8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80034ea:	4b48      	ldr	r3, [pc, #288]	@ (800360c <menu+0x2294>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80034f0:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <menu+0x2298>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b1b      	cmp	r3, #27
 80034f6:	d166      	bne.n	80035c6 <menu+0x224e>
		lcd_print(1, 1, buzzerTextGN);
 80034f8:	4a46      	ldr	r2, [pc, #280]	@ (8003614 <menu+0x229c>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	2001      	movs	r0, #1
 80034fe:	f005 f8a1 	bl	8008644 <lcd_print>

		if(buzzer == 0) {
 8003502:	4b45      	ldr	r3, [pc, #276]	@ (8003618 <menu+0x22a0>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <menu+0x219e>
			lcd_print(2, 1, pasifText);
 800350a:	4a44      	ldr	r2, [pc, #272]	@ (800361c <menu+0x22a4>)
 800350c:	2101      	movs	r1, #1
 800350e:	2002      	movs	r0, #2
 8003510:	f005 f898 	bl	8008644 <lcd_print>
 8003514:	e008      	b.n	8003528 <menu+0x21b0>
		} else if(buzzer == 1) {
 8003516:	4b40      	ldr	r3, [pc, #256]	@ (8003618 <menu+0x22a0>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d104      	bne.n	8003528 <menu+0x21b0>
			lcd_print(2, 1, aktifText);
 800351e:	4a40      	ldr	r2, [pc, #256]	@ (8003620 <menu+0x22a8>)
 8003520:	2101      	movs	r1, #1
 8003522:	2002      	movs	r0, #2
 8003524:	f005 f88e 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003528:	2102      	movs	r1, #2
 800352a:	4835      	ldr	r0, [pc, #212]	@ (8003600 <menu+0x2288>)
 800352c:	f006 fbb4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d115      	bne.n	8003562 <menu+0x21ea>
 8003536:	4b33      	ldr	r3, [pc, #204]	@ (8003604 <menu+0x228c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	f083 0301 	eor.w	r3, r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00e      	beq.n	8003562 <menu+0x21ea>
			buzzer = buzzer + 1;
 8003544:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <menu+0x22a0>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	4b32      	ldr	r3, [pc, #200]	@ (8003618 <menu+0x22a0>)
 800354e:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003550:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <menu+0x22a0>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d902      	bls.n	800355e <menu+0x21e6>
				buzzer = 0;
 8003558:	4b2f      	ldr	r3, [pc, #188]	@ (8003618 <menu+0x22a0>)
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800355e:	f000 fc1f 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003562:	2104      	movs	r1, #4
 8003564:	4826      	ldr	r0, [pc, #152]	@ (8003600 <menu+0x2288>)
 8003566:	f006 fb97 	bl	8009c98 <HAL_GPIO_ReadPin>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d115      	bne.n	800359c <menu+0x2224>
 8003570:	4b24      	ldr	r3, [pc, #144]	@ (8003604 <menu+0x228c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <menu+0x2224>
			buzzer = buzzer - 1;
 800357e:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <menu+0x22a0>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	3b01      	subs	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b24      	ldr	r3, [pc, #144]	@ (8003618 <menu+0x22a0>)
 8003588:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800358a:	4b23      	ldr	r3, [pc, #140]	@ (8003618 <menu+0x22a0>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <menu+0x2220>
		   		buzzer = 1;
 8003592:	4b21      	ldr	r3, [pc, #132]	@ (8003618 <menu+0x22a0>)
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003598:	f000 fc02 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800359c:	2108      	movs	r1, #8
 800359e:	4818      	ldr	r0, [pc, #96]	@ (8003600 <menu+0x2288>)
 80035a0:	f006 fb7a 	bl	8009c98 <HAL_GPIO_ReadPin>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10d      	bne.n	80035c6 <menu+0x224e>
 80035aa:	4b16      	ldr	r3, [pc, #88]	@ (8003604 <menu+0x228c>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	f083 0301 	eor.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <menu+0x224e>
			eepromData[25] = buzzer;
 80035b8:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <menu+0x22a0>)
 80035ba:	781a      	ldrb	r2, [r3, #0]
 80035bc:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <menu+0x2290>)
 80035be:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80035c0:	4b12      	ldr	r3, [pc, #72]	@ (800360c <menu+0x2294>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80035c6:	4b12      	ldr	r3, [pc, #72]	@ (8003610 <menu+0x2298>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b1c      	cmp	r3, #28
 80035cc:	f040 8088 	bne.w	80036e0 <menu+0x2368>
		calismaSayModu = 0;
 80035d0:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <menu+0x22ac>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80035d6:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <menu+0x22b0>)
 80035d8:	2101      	movs	r1, #1
 80035da:	2001      	movs	r0, #1
 80035dc:	f005 f832 	bl	8008644 <lcd_print>

		if(demoMode == 0) {
 80035e0:	4b12      	ldr	r3, [pc, #72]	@ (800362c <menu+0x22b4>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d123      	bne.n	8003630 <menu+0x22b8>
			lcd_print(2, 1, pasifText);
 80035e8:	4a0c      	ldr	r2, [pc, #48]	@ (800361c <menu+0x22a4>)
 80035ea:	2101      	movs	r1, #1
 80035ec:	2002      	movs	r0, #2
 80035ee:	f005 f829 	bl	8008644 <lcd_print>
 80035f2:	e026      	b.n	8003642 <menu+0x22ca>
 80035f4:	20000f78 	.word	0x20000f78
 80035f8:	20001368 	.word	0x20001368
 80035fc:	20000ef8 	.word	0x20000ef8
 8003600:	40010800 	.word	0x40010800
 8003604:	20000f8f 	.word	0x20000f8f
 8003608:	20000e88 	.word	0x20000e88
 800360c:	20000f8c 	.word	0x20000f8c
 8003610:	20000f60 	.word	0x20000f60
 8003614:	2000012c 	.word	0x2000012c
 8003618:	20000f7c 	.word	0x20000f7c
 800361c:	2000123c 	.word	0x2000123c
 8003620:	20001250 	.word	0x20001250
 8003624:	20000f80 	.word	0x20000f80
 8003628:	20000140 	.word	0x20000140
 800362c:	20000f7e 	.word	0x20000f7e
		} else if(demoMode == 1) {
 8003630:	4b61      	ldr	r3, [pc, #388]	@ (80037b8 <menu+0x2440>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d104      	bne.n	8003642 <menu+0x22ca>
			lcd_print(2, 1, aktifText);
 8003638:	4a60      	ldr	r2, [pc, #384]	@ (80037bc <menu+0x2444>)
 800363a:	2101      	movs	r1, #1
 800363c:	2002      	movs	r0, #2
 800363e:	f005 f801 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003642:	2102      	movs	r1, #2
 8003644:	485e      	ldr	r0, [pc, #376]	@ (80037c0 <menu+0x2448>)
 8003646:	f006 fb27 	bl	8009c98 <HAL_GPIO_ReadPin>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d115      	bne.n	800367c <menu+0x2304>
 8003650:	4b5c      	ldr	r3, [pc, #368]	@ (80037c4 <menu+0x244c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <menu+0x2304>
			demoMode = demoMode + 1;
 800365e:	4b56      	ldr	r3, [pc, #344]	@ (80037b8 <menu+0x2440>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b54      	ldr	r3, [pc, #336]	@ (80037b8 <menu+0x2440>)
 8003668:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800366a:	4b53      	ldr	r3, [pc, #332]	@ (80037b8 <menu+0x2440>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d902      	bls.n	8003678 <menu+0x2300>
				demoMode = 0;
 8003672:	4b51      	ldr	r3, [pc, #324]	@ (80037b8 <menu+0x2440>)
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003678:	f000 fb92 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800367c:	2104      	movs	r1, #4
 800367e:	4850      	ldr	r0, [pc, #320]	@ (80037c0 <menu+0x2448>)
 8003680:	f006 fb0a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003684:	4603      	mov	r3, r0
 8003686:	2b01      	cmp	r3, #1
 8003688:	d115      	bne.n	80036b6 <menu+0x233e>
 800368a:	4b4e      	ldr	r3, [pc, #312]	@ (80037c4 <menu+0x244c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <menu+0x233e>
			demoMode = demoMode - 1;
 8003698:	4b47      	ldr	r3, [pc, #284]	@ (80037b8 <menu+0x2440>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	3b01      	subs	r3, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4b45      	ldr	r3, [pc, #276]	@ (80037b8 <menu+0x2440>)
 80036a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80036a4:	4b44      	ldr	r3, [pc, #272]	@ (80037b8 <menu+0x2440>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <menu+0x233a>
		   		demoMode = 1;
 80036ac:	4b42      	ldr	r3, [pc, #264]	@ (80037b8 <menu+0x2440>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036b2:	f000 fb75 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b6:	2108      	movs	r1, #8
 80036b8:	4841      	ldr	r0, [pc, #260]	@ (80037c0 <menu+0x2448>)
 80036ba:	f006 faed 	bl	8009c98 <HAL_GPIO_ReadPin>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10d      	bne.n	80036e0 <menu+0x2368>
 80036c4:	4b3f      	ldr	r3, [pc, #252]	@ (80037c4 <menu+0x244c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f083 0301 	eor.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <menu+0x2368>
			eepromData[26] = demoMode;
 80036d2:	4b39      	ldr	r3, [pc, #228]	@ (80037b8 <menu+0x2440>)
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	4b3c      	ldr	r3, [pc, #240]	@ (80037c8 <menu+0x2450>)
 80036d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80036da:	4b3c      	ldr	r3, [pc, #240]	@ (80037cc <menu+0x2454>)
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80036e0:	4b3b      	ldr	r3, [pc, #236]	@ (80037d0 <menu+0x2458>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b1d      	cmp	r3, #29
 80036e6:	f040 810c 	bne.w	8003902 <menu+0x258a>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80036ea:	4b3a      	ldr	r3, [pc, #232]	@ (80037d4 <menu+0x245c>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <menu+0x23a2>
 80036f2:	4b39      	ldr	r3, [pc, #228]	@ (80037d8 <menu+0x2460>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <menu+0x23a2>
 80036fa:	4b38      	ldr	r3, [pc, #224]	@ (80037dc <menu+0x2464>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <menu+0x23a2>
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <menu+0x2468>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d107      	bne.n	800371a <menu+0x23a2>
 800370a:	4b36      	ldr	r3, [pc, #216]	@ (80037e4 <menu+0x246c>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <menu+0x23a2>
			calismaSayisiYar = 0;
 8003712:	4b35      	ldr	r3, [pc, #212]	@ (80037e8 <menu+0x2470>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e002      	b.n	8003720 <menu+0x23a8>
		} else {
			calismaSayisiYar = 1;
 800371a:	4b33      	ldr	r3, [pc, #204]	@ (80037e8 <menu+0x2470>)
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003720:	4b32      	ldr	r3, [pc, #200]	@ (80037ec <menu+0x2474>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d169      	bne.n	80037fc <menu+0x2484>
			lcd_print(1, 1, calismaSayisiText);
 8003728:	4a31      	ldr	r2, [pc, #196]	@ (80037f0 <menu+0x2478>)
 800372a:	2101      	movs	r1, #1
 800372c:	2001      	movs	r0, #1
 800372e:	f004 ff89 	bl	8008644 <lcd_print>

			itoa(calismaSayisi10000, snum, 10);
 8003732:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <menu+0x246c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	220a      	movs	r2, #10
 8003738:	492e      	ldr	r1, [pc, #184]	@ (80037f4 <menu+0x247c>)
 800373a:	4618      	mov	r0, r3
 800373c:	f009 fad8 	bl	800ccf0 <itoa>
			lcd_print(2, 12, snum);
 8003740:	4a2c      	ldr	r2, [pc, #176]	@ (80037f4 <menu+0x247c>)
 8003742:	210c      	movs	r1, #12
 8003744:	2002      	movs	r0, #2
 8003746:	f004 ff7d 	bl	8008644 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800374a:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <menu+0x2468>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	220a      	movs	r2, #10
 8003750:	4928      	ldr	r1, [pc, #160]	@ (80037f4 <menu+0x247c>)
 8003752:	4618      	mov	r0, r3
 8003754:	f009 facc 	bl	800ccf0 <itoa>
			lcd_print(2, 13, snum);
 8003758:	4a26      	ldr	r2, [pc, #152]	@ (80037f4 <menu+0x247c>)
 800375a:	210d      	movs	r1, #13
 800375c:	2002      	movs	r0, #2
 800375e:	f004 ff71 	bl	8008644 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8003762:	4b1e      	ldr	r3, [pc, #120]	@ (80037dc <menu+0x2464>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	220a      	movs	r2, #10
 8003768:	4922      	ldr	r1, [pc, #136]	@ (80037f4 <menu+0x247c>)
 800376a:	4618      	mov	r0, r3
 800376c:	f009 fac0 	bl	800ccf0 <itoa>
			lcd_print(2, 14, snum);
 8003770:	4a20      	ldr	r2, [pc, #128]	@ (80037f4 <menu+0x247c>)
 8003772:	210e      	movs	r1, #14
 8003774:	2002      	movs	r0, #2
 8003776:	f004 ff65 	bl	8008644 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800377a:	4b17      	ldr	r3, [pc, #92]	@ (80037d8 <menu+0x2460>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	220a      	movs	r2, #10
 8003780:	491c      	ldr	r1, [pc, #112]	@ (80037f4 <menu+0x247c>)
 8003782:	4618      	mov	r0, r3
 8003784:	f009 fab4 	bl	800ccf0 <itoa>
			lcd_print(2, 15, snum);
 8003788:	4a1a      	ldr	r2, [pc, #104]	@ (80037f4 <menu+0x247c>)
 800378a:	210f      	movs	r1, #15
 800378c:	2002      	movs	r0, #2
 800378e:	f004 ff59 	bl	8008644 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <menu+0x245c>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	220a      	movs	r2, #10
 8003798:	4916      	ldr	r1, [pc, #88]	@ (80037f4 <menu+0x247c>)
 800379a:	4618      	mov	r0, r3
 800379c:	f009 faa8 	bl	800ccf0 <itoa>
			lcd_print(2, 16, snum);
 80037a0:	4a14      	ldr	r2, [pc, #80]	@ (80037f4 <menu+0x247c>)
 80037a2:	2110      	movs	r1, #16
 80037a4:	2002      	movs	r0, #2
 80037a6:	f004 ff4d 	bl	8008644 <lcd_print>

			lcd_print(2, 1, "           ");
 80037aa:	4a13      	ldr	r2, [pc, #76]	@ (80037f8 <menu+0x2480>)
 80037ac:	2101      	movs	r1, #1
 80037ae:	2002      	movs	r0, #2
 80037b0:	f004 ff48 	bl	8008644 <lcd_print>
 80037b4:	e030      	b.n	8003818 <menu+0x24a0>
 80037b6:	bf00      	nop
 80037b8:	20000f7e 	.word	0x20000f7e
 80037bc:	20001250 	.word	0x20001250
 80037c0:	40010800 	.word	0x40010800
 80037c4:	20000f8f 	.word	0x20000f8f
 80037c8:	20000e88 	.word	0x20000e88
 80037cc:	20000f8c 	.word	0x20000f8c
 80037d0:	20000f60 	.word	0x20000f60
 80037d4:	20000f5d 	.word	0x20000f5d
 80037d8:	20000f5e 	.word	0x20000f5e
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000001 	.word	0x20000001
 80037e4:	20000f5f 	.word	0x20000f5f
 80037e8:	20000fa1 	.word	0x20000fa1
 80037ec:	20000f80 	.word	0x20000f80
 80037f0:	200015ac 	.word	0x200015ac
 80037f4:	20000ef8 	.word	0x20000ef8
 80037f8:	0800da30 	.word	0x0800da30
		} else if(calismaSayModu == 1) {
 80037fc:	4b7d      	ldr	r3, [pc, #500]	@ (80039f4 <menu+0x267c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d109      	bne.n	8003818 <menu+0x24a0>
			lcd_print(1, 1, calismaSayisiText);
 8003804:	4a7c      	ldr	r2, [pc, #496]	@ (80039f8 <menu+0x2680>)
 8003806:	2101      	movs	r1, #1
 8003808:	2001      	movs	r0, #1
 800380a:	f004 ff1b 	bl	8008644 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 800380e:	4a7b      	ldr	r2, [pc, #492]	@ (80039fc <menu+0x2684>)
 8003810:	2101      	movs	r1, #1
 8003812:	2002      	movs	r0, #2
 8003814:	f004 ff16 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003818:	2102      	movs	r1, #2
 800381a:	4879      	ldr	r0, [pc, #484]	@ (8003a00 <menu+0x2688>)
 800381c:	f006 fa3c 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	d119      	bne.n	800385a <menu+0x24e2>
 8003826:	4b77      	ldr	r3, [pc, #476]	@ (8003a04 <menu+0x268c>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	f083 0301 	eor.w	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d012      	beq.n	800385a <menu+0x24e2>
 8003834:	4b74      	ldr	r3, [pc, #464]	@ (8003a08 <menu+0x2690>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <menu+0x24e2>
			calismaSayModu = calismaSayModu + 1;
 800383c:	4b6d      	ldr	r3, [pc, #436]	@ (80039f4 <menu+0x267c>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	b2da      	uxtb	r2, r3
 8003844:	4b6b      	ldr	r3, [pc, #428]	@ (80039f4 <menu+0x267c>)
 8003846:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003848:	4b6a      	ldr	r3, [pc, #424]	@ (80039f4 <menu+0x267c>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d902      	bls.n	8003856 <menu+0x24de>
				calismaSayModu = 0;
 8003850:	4b68      	ldr	r3, [pc, #416]	@ (80039f4 <menu+0x267c>)
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003856:	f000 faa3 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800385a:	2104      	movs	r1, #4
 800385c:	4868      	ldr	r0, [pc, #416]	@ (8003a00 <menu+0x2688>)
 800385e:	f006 fa1b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003862:	4603      	mov	r3, r0
 8003864:	2b01      	cmp	r3, #1
 8003866:	d119      	bne.n	800389c <menu+0x2524>
 8003868:	4b66      	ldr	r3, [pc, #408]	@ (8003a04 <menu+0x268c>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	f083 0301 	eor.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <menu+0x2524>
 8003876:	4b64      	ldr	r3, [pc, #400]	@ (8003a08 <menu+0x2690>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00e      	beq.n	800389c <menu+0x2524>
			calismaSayModu = calismaSayModu - 1;
 800387e:	4b5d      	ldr	r3, [pc, #372]	@ (80039f4 <menu+0x267c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	3b01      	subs	r3, #1
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4b5b      	ldr	r3, [pc, #364]	@ (80039f4 <menu+0x267c>)
 8003888:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800388a:	4b5a      	ldr	r3, [pc, #360]	@ (80039f4 <menu+0x267c>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <menu+0x2520>
		   		calismaSayModu = 1;
 8003892:	4b58      	ldr	r3, [pc, #352]	@ (80039f4 <menu+0x267c>)
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003898:	f000 fa82 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800389c:	2108      	movs	r1, #8
 800389e:	4858      	ldr	r0, [pc, #352]	@ (8003a00 <menu+0x2688>)
 80038a0:	f006 f9fa 	bl	8009c98 <HAL_GPIO_ReadPin>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d12b      	bne.n	8003902 <menu+0x258a>
 80038aa:	4b56      	ldr	r3, [pc, #344]	@ (8003a04 <menu+0x268c>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d024      	beq.n	8003902 <menu+0x258a>
			eepromData[32] = 0;
 80038b8:	4b54      	ldr	r3, [pc, #336]	@ (8003a0c <menu+0x2694>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80038c0:	4b52      	ldr	r3, [pc, #328]	@ (8003a0c <menu+0x2694>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80038c6:	4b51      	ldr	r3, [pc, #324]	@ (8003a0c <menu+0x2694>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80038cc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a0c <menu+0x2694>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80038d2:	4b4e      	ldr	r3, [pc, #312]	@ (8003a0c <menu+0x2694>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80038d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a10 <menu+0x2698>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80038de:	4b4d      	ldr	r3, [pc, #308]	@ (8003a14 <menu+0x269c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80038e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003a18 <menu+0x26a0>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80038ea:	4b4c      	ldr	r3, [pc, #304]	@ (8003a1c <menu+0x26a4>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80038f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003a20 <menu+0x26a8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80038f6:	4b3f      	ldr	r3, [pc, #252]	@ (80039f4 <menu+0x267c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80038fc:	4b49      	ldr	r3, [pc, #292]	@ (8003a24 <menu+0x26ac>)
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003902:	4b49      	ldr	r3, [pc, #292]	@ (8003a28 <menu+0x26b0>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b1e      	cmp	r3, #30
 8003908:	d15c      	bne.n	80039c4 <menu+0x264c>
		calismaSayModu = 0;
 800390a:	4b3a      	ldr	r3, [pc, #232]	@ (80039f4 <menu+0x267c>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003910:	4a46      	ldr	r2, [pc, #280]	@ (8003a2c <menu+0x26b4>)
 8003912:	2101      	movs	r1, #1
 8003914:	2001      	movs	r0, #1
 8003916:	f004 fe95 	bl	8008644 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 800391a:	4a45      	ldr	r2, [pc, #276]	@ (8003a30 <menu+0x26b8>)
 800391c:	2101      	movs	r1, #1
 800391e:	2002      	movs	r0, #2
 8003920:	f004 fe90 	bl	8008644 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003924:	2102      	movs	r1, #2
 8003926:	4836      	ldr	r0, [pc, #216]	@ (8003a00 <menu+0x2688>)
 8003928:	f006 f9b6 	bl	8009c98 <HAL_GPIO_ReadPin>
 800392c:	4603      	mov	r3, r0
 800392e:	2b01      	cmp	r3, #1
 8003930:	d115      	bne.n	800395e <menu+0x25e6>
 8003932:	4b34      	ldr	r3, [pc, #208]	@ (8003a04 <menu+0x268c>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	f083 0301 	eor.w	r3, r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00e      	beq.n	800395e <menu+0x25e6>
			dilSecim = dilSecim + 1;
 8003940:	4b3c      	ldr	r3, [pc, #240]	@ (8003a34 <menu+0x26bc>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	4b3a      	ldr	r3, [pc, #232]	@ (8003a34 <menu+0x26bc>)
 800394a:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800394c:	4b39      	ldr	r3, [pc, #228]	@ (8003a34 <menu+0x26bc>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d902      	bls.n	800395a <menu+0x25e2>
				dilSecim = 0;
 8003954:	4b37      	ldr	r3, [pc, #220]	@ (8003a34 <menu+0x26bc>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800395a:	f000 fa21 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800395e:	2104      	movs	r1, #4
 8003960:	4827      	ldr	r0, [pc, #156]	@ (8003a00 <menu+0x2688>)
 8003962:	f006 f999 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003966:	4603      	mov	r3, r0
 8003968:	2b01      	cmp	r3, #1
 800396a:	d115      	bne.n	8003998 <menu+0x2620>
 800396c:	4b25      	ldr	r3, [pc, #148]	@ (8003a04 <menu+0x268c>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	f083 0301 	eor.w	r3, r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <menu+0x2620>
			dilSecim = dilSecim - 1;
 800397a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a34 <menu+0x26bc>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	3b01      	subs	r3, #1
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <menu+0x26bc>)
 8003984:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003986:	4b2b      	ldr	r3, [pc, #172]	@ (8003a34 <menu+0x26bc>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <menu+0x261c>
		   		dilSecim = 1;
 800398e:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <menu+0x26bc>)
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003994:	f000 fa04 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003998:	2108      	movs	r1, #8
 800399a:	4819      	ldr	r0, [pc, #100]	@ (8003a00 <menu+0x2688>)
 800399c:	f006 f97c 	bl	8009c98 <HAL_GPIO_ReadPin>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10e      	bne.n	80039c4 <menu+0x264c>
 80039a6:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <menu+0x268c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	f083 0301 	eor.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <menu+0x264c>
			eepromData[33] = dilSecim;
 80039b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a34 <menu+0x26bc>)
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <menu+0x2694>)
 80039ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80039be:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <menu+0x26ac>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80039c4:	4b18      	ldr	r3, [pc, #96]	@ (8003a28 <menu+0x26b0>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b1f      	cmp	r3, #31
 80039ca:	f040 8094 	bne.w	8003af6 <menu+0x277e>
		calismaSayModu = 0;
 80039ce:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <menu+0x267c>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 80039d4:	4a18      	ldr	r2, [pc, #96]	@ (8003a38 <menu+0x26c0>)
 80039d6:	2101      	movs	r1, #1
 80039d8:	2001      	movs	r0, #1
 80039da:	f004 fe33 	bl	8008644 <lcd_print>

		if(iotMode == 0) {
 80039de:	4b17      	ldr	r3, [pc, #92]	@ (8003a3c <menu+0x26c4>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d12e      	bne.n	8003a44 <menu+0x26cc>
			lcd_print(2, 1, pasifText);
 80039e6:	4a16      	ldr	r2, [pc, #88]	@ (8003a40 <menu+0x26c8>)
 80039e8:	2101      	movs	r1, #1
 80039ea:	2002      	movs	r0, #2
 80039ec:	f004 fe2a 	bl	8008644 <lcd_print>
 80039f0:	e031      	b.n	8003a56 <menu+0x26de>
 80039f2:	bf00      	nop
 80039f4:	20000f80 	.word	0x20000f80
 80039f8:	200015ac 	.word	0x200015ac
 80039fc:	200015c0 	.word	0x200015c0
 8003a00:	40010800 	.word	0x40010800
 8003a04:	20000f8f 	.word	0x20000f8f
 8003a08:	20000fa1 	.word	0x20000fa1
 8003a0c:	20000e88 	.word	0x20000e88
 8003a10:	20000f5f 	.word	0x20000f5f
 8003a14:	20000001 	.word	0x20000001
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	20000f5e 	.word	0x20000f5e
 8003a20:	20000f5d 	.word	0x20000f5d
 8003a24:	20000f8c 	.word	0x20000f8c
 8003a28:	20000f60 	.word	0x20000f60
 8003a2c:	200015d4 	.word	0x200015d4
 8003a30:	200015e8 	.word	0x200015e8
 8003a34:	20000f81 	.word	0x20000f81
 8003a38:	20000154 	.word	0x20000154
 8003a3c:	20000f7f 	.word	0x20000f7f
 8003a40:	2000123c 	.word	0x2000123c
		} else if(iotMode == 1) {
 8003a44:	4b9f      	ldr	r3, [pc, #636]	@ (8003cc4 <menu+0x294c>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d104      	bne.n	8003a56 <menu+0x26de>
			lcd_print(2, 1, aktifText);
 8003a4c:	4a9e      	ldr	r2, [pc, #632]	@ (8003cc8 <menu+0x2950>)
 8003a4e:	2101      	movs	r1, #1
 8003a50:	2002      	movs	r0, #2
 8003a52:	f004 fdf7 	bl	8008644 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a56:	2102      	movs	r1, #2
 8003a58:	489c      	ldr	r0, [pc, #624]	@ (8003ccc <menu+0x2954>)
 8003a5a:	f006 f91d 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d115      	bne.n	8003a90 <menu+0x2718>
 8003a64:	4b9a      	ldr	r3, [pc, #616]	@ (8003cd0 <menu+0x2958>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00e      	beq.n	8003a90 <menu+0x2718>
			iotMode = iotMode + 1;
 8003a72:	4b94      	ldr	r3, [pc, #592]	@ (8003cc4 <menu+0x294c>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	4b92      	ldr	r3, [pc, #584]	@ (8003cc4 <menu+0x294c>)
 8003a7c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003a7e:	4b91      	ldr	r3, [pc, #580]	@ (8003cc4 <menu+0x294c>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d902      	bls.n	8003a8c <menu+0x2714>
				iotMode = 0;
 8003a86:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc4 <menu+0x294c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003a8c:	f000 f988 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a90:	2104      	movs	r1, #4
 8003a92:	488e      	ldr	r0, [pc, #568]	@ (8003ccc <menu+0x2954>)
 8003a94:	f006 f900 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d115      	bne.n	8003aca <menu+0x2752>
 8003a9e:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd0 <menu+0x2958>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	f083 0301 	eor.w	r3, r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00e      	beq.n	8003aca <menu+0x2752>
			iotMode = iotMode - 1;
 8003aac:	4b85      	ldr	r3, [pc, #532]	@ (8003cc4 <menu+0x294c>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	4b83      	ldr	r3, [pc, #524]	@ (8003cc4 <menu+0x294c>)
 8003ab6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003ab8:	4b82      	ldr	r3, [pc, #520]	@ (8003cc4 <menu+0x294c>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <menu+0x274e>
		   		iotMode = 1;
 8003ac0:	4b80      	ldr	r3, [pc, #512]	@ (8003cc4 <menu+0x294c>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003ac6:	f000 f96b 	bl	8003da0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aca:	2108      	movs	r1, #8
 8003acc:	487f      	ldr	r0, [pc, #508]	@ (8003ccc <menu+0x2954>)
 8003ace:	f006 f8e3 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d10e      	bne.n	8003af6 <menu+0x277e>
 8003ad8:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd0 <menu+0x2958>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	f083 0301 	eor.w	r3, r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <menu+0x277e>
			eepromData[48] = iotMode;
 8003ae6:	4b77      	ldr	r3, [pc, #476]	@ (8003cc4 <menu+0x294c>)
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd4 <menu+0x295c>)
 8003aec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003af0:	4b79      	ldr	r3, [pc, #484]	@ (8003cd8 <menu+0x2960>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003af6:	4b79      	ldr	r3, [pc, #484]	@ (8003cdc <menu+0x2964>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d12b      	bne.n	8003b56 <menu+0x27de>
		calismaSayModu = 0;
 8003afe:	4b78      	ldr	r3, [pc, #480]	@ (8003ce0 <menu+0x2968>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003b04:	2001      	movs	r0, #1
 8003b06:	f7fc fe1b 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003b0a:	2032      	movs	r0, #50	@ 0x32
 8003b0c:	f005 faf4 	bl	80090f8 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003b10:	2001      	movs	r0, #1
 8003b12:	f7fd fb75 	bl	8001200 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b16:	2102      	movs	r1, #2
 8003b18:	486c      	ldr	r0, [pc, #432]	@ (8003ccc <menu+0x2954>)
 8003b1a:	f006 f8bd 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d118      	bne.n	8003b56 <menu+0x27de>
 8003b24:	2104      	movs	r1, #4
 8003b26:	4869      	ldr	r0, [pc, #420]	@ (8003ccc <menu+0x2954>)
 8003b28:	f006 f8b6 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d111      	bne.n	8003b56 <menu+0x27de>
 8003b32:	4b67      	ldr	r3, [pc, #412]	@ (8003cd0 <menu+0x2958>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	f083 0301 	eor.w	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <menu+0x27de>
			takeMachineID();
 8003b40:	f003 fdae 	bl	80076a0 <takeMachineID>

			convertArrays(1);
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7fc fdfb 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003b4a:	2032      	movs	r0, #50	@ 0x32
 8003b4c:	f005 fad4 	bl	80090f8 <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 8003b50:	2001      	movs	r0, #1
 8003b52:	f7fd fb55 	bl	8001200 <printCredentials>
		}
	}

	if (menuSayac == 33) {
 8003b56:	4b61      	ldr	r3, [pc, #388]	@ (8003cdc <menu+0x2964>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b21      	cmp	r3, #33	@ 0x21
 8003b5c:	d135      	bne.n	8003bca <menu+0x2852>
		calismaSayModu = 0;
 8003b5e:	4b60      	ldr	r3, [pc, #384]	@ (8003ce0 <menu+0x2968>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8003b64:	2001      	movs	r0, #1
 8003b66:	f004 fdb9 	bl	80086dc <lcd_backlight>

		convertArrays(2);
 8003b6a:	2002      	movs	r0, #2
 8003b6c:	f7fc fde8 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003b70:	2032      	movs	r0, #50	@ 0x32
 8003b72:	f005 fac1 	bl	80090f8 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003b76:	2002      	movs	r0, #2
 8003b78:	f7fd fb42 	bl	8001200 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	4853      	ldr	r0, [pc, #332]	@ (8003ccc <menu+0x2954>)
 8003b80:	f006 f88a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d10d      	bne.n	8003ba6 <menu+0x282e>
 8003b8a:	2104      	movs	r1, #4
 8003b8c:	484f      	ldr	r0, [pc, #316]	@ (8003ccc <menu+0x2954>)
 8003b8e:	f006 f883 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <menu+0x282e>
 8003b98:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd0 <menu+0x2958>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f083 0301 	eor.w	r3, r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <menu+0x2836>
 8003ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce4 <menu+0x296c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10d      	bne.n	8003bca <menu+0x2852>
			editMode = 0;
 8003bae:	4b4d      	ldr	r3, [pc, #308]	@ (8003ce4 <menu+0x296c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
			takeWifiSSID();
 8003bb4:	f003 fef6 	bl	80079a4 <takeWifiSSID>

			convertArrays(2);
 8003bb8:	2002      	movs	r0, #2
 8003bba:	f7fc fdc1 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003bbe:	2032      	movs	r0, #50	@ 0x32
 8003bc0:	f005 fa9a 	bl	80090f8 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003bc4:	2002      	movs	r0, #2
 8003bc6:	f7fd fb1b 	bl	8001200 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003bca:	4b44      	ldr	r3, [pc, #272]	@ (8003cdc <menu+0x2964>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b22      	cmp	r3, #34	@ 0x22
 8003bd0:	d135      	bne.n	8003c3e <menu+0x28c6>
		calismaSayModu = 0;
 8003bd2:	4b43      	ldr	r3, [pc, #268]	@ (8003ce0 <menu+0x2968>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f004 fd7f 	bl	80086dc <lcd_backlight>

		convertArrays(3);
 8003bde:	2003      	movs	r0, #3
 8003be0:	f7fc fdae 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003be4:	2032      	movs	r0, #50	@ 0x32
 8003be6:	f005 fa87 	bl	80090f8 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003bea:	2003      	movs	r0, #3
 8003bec:	f7fd fb08 	bl	8001200 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4836      	ldr	r0, [pc, #216]	@ (8003ccc <menu+0x2954>)
 8003bf4:	f006 f850 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10d      	bne.n	8003c1a <menu+0x28a2>
 8003bfe:	2104      	movs	r1, #4
 8003c00:	4832      	ldr	r0, [pc, #200]	@ (8003ccc <menu+0x2954>)
 8003c02:	f006 f849 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d106      	bne.n	8003c1a <menu+0x28a2>
 8003c0c:	4b30      	ldr	r3, [pc, #192]	@ (8003cd0 <menu+0x2958>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	f083 0301 	eor.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <menu+0x28aa>
 8003c1a:	4b32      	ldr	r3, [pc, #200]	@ (8003ce4 <menu+0x296c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10d      	bne.n	8003c3e <menu+0x28c6>
			editMode = 0;
 8003c22:	4b30      	ldr	r3, [pc, #192]	@ (8003ce4 <menu+0x296c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
			takeWifiPass();
 8003c28:	f004 f846 	bl	8007cb8 <takeWifiPass>

			convertArrays(3);
 8003c2c:	2003      	movs	r0, #3
 8003c2e:	f7fc fd87 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003c32:	2032      	movs	r0, #50	@ 0x32
 8003c34:	f005 fa60 	bl	80090f8 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f7fd fae1 	bl	8001200 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003c3e:	4b27      	ldr	r3, [pc, #156]	@ (8003cdc <menu+0x2964>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b23      	cmp	r3, #35	@ 0x23
 8003c44:	d13a      	bne.n	8003cbc <menu+0x2944>
		lcd_print(1, 1, menudenCikisText);
 8003c46:	4a28      	ldr	r2, [pc, #160]	@ (8003ce8 <menu+0x2970>)
 8003c48:	2101      	movs	r1, #1
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f004 fcfa 	bl	8008644 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003c50:	4a26      	ldr	r2, [pc, #152]	@ (8003cec <menu+0x2974>)
 8003c52:	2101      	movs	r1, #1
 8003c54:	2002      	movs	r0, #2
 8003c56:	f004 fcf5 	bl	8008644 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003c5a:	2108      	movs	r1, #8
 8003c5c:	481b      	ldr	r0, [pc, #108]	@ (8003ccc <menu+0x2954>)
 8003c5e:	f006 f81b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d129      	bne.n	8003cbc <menu+0x2944>
			menuGiris = 0;
 8003c68:	4b21      	ldr	r3, [pc, #132]	@ (8003cf0 <menu+0x2978>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003c6e:	bf00      	nop
 8003c70:	4820      	ldr	r0, [pc, #128]	@ (8003cf4 <menu+0x297c>)
 8003c72:	f006 fe3a 	bl	800a8ea <HAL_I2C_GetError>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d0f9      	beq.n	8003c70 <menu+0x28f8>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003c7c:	bf00      	nop
 8003c7e:	481d      	ldr	r0, [pc, #116]	@ (8003cf4 <menu+0x297c>)
 8003c80:	f006 fe26 	bl	800a8d0 <HAL_I2C_GetState>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d1f9      	bne.n	8003c7e <menu+0x2906>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003c8a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003c8e:	9302      	str	r3, [sp, #8]
 8003c90:	236e      	movs	r3, #110	@ 0x6e
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd4 <menu+0x295c>)
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	236e      	movs	r3, #110	@ 0x6e
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	21a0      	movs	r1, #160	@ 0xa0
 8003c9e:	4815      	ldr	r0, [pc, #84]	@ (8003cf4 <menu+0x297c>)
 8003ca0:	f006 fab4 	bl	800a20c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003ca4:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003ca8:	f005 fa26 	bl	80090f8 <HAL_Delay>

			lcd_clear();
 8003cac:	f004 fcf6 	bl	800869c <lcd_clear>
			HAL_Delay(500);
 8003cb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cb4:	f005 fa20 	bl	80090f8 <HAL_Delay>
			NVIC_SystemReset();
 8003cb8:	f7fd fb48 	bl	800134c <__NVIC_SystemReset>
		}
	}
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000f7f 	.word	0x20000f7f
 8003cc8:	20001250 	.word	0x20001250
 8003ccc:	40010800 	.word	0x40010800
 8003cd0:	20000f8f 	.word	0x20000f8f
 8003cd4:	20000e88 	.word	0x20000e88
 8003cd8:	20000f8c 	.word	0x20000f8c
 8003cdc:	20000f60 	.word	0x20000f60
 8003ce0:	20000f80 	.word	0x20000f80
 8003ce4:	20000f58 	.word	0x20000f58
 8003ce8:	200015fc 	.word	0x200015fc
 8003cec:	20001610 	.word	0x20001610
 8003cf0:	20000f7d 	.word	0x20000f7d
 8003cf4:	20001728 	.word	0x20001728

08003cf8 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"

void lcdUpdate(uint8_t y) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003d08:	4a22      	ldr	r2, [pc, #136]	@ (8003d94 <lcdUpdate+0x9c>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	f004 fc99 	bl	8008644 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003d12:	e03b      	b.n	8003d8c <lcdUpdate+0x94>
	} else if(y==2) {
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d105      	bne.n	8003d26 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d94 <lcdUpdate+0x9c>)
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	2002      	movs	r0, #2
 8003d20:	f004 fc90 	bl	8008644 <lcd_print>
}
 8003d24:	e032      	b.n	8003d8c <lcdUpdate+0x94>
	} else if(y==3) {
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d105      	bne.n	8003d38 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003d2c:	4a19      	ldr	r2, [pc, #100]	@ (8003d94 <lcdUpdate+0x9c>)
 8003d2e:	2103      	movs	r1, #3
 8003d30:	2002      	movs	r0, #2
 8003d32:	f004 fc87 	bl	8008644 <lcd_print>
}
 8003d36:	e029      	b.n	8003d8c <lcdUpdate+0x94>
	} else if(y==4) {
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d105      	bne.n	8003d4a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003d3e:	4a15      	ldr	r2, [pc, #84]	@ (8003d94 <lcdUpdate+0x9c>)
 8003d40:	2104      	movs	r1, #4
 8003d42:	2002      	movs	r0, #2
 8003d44:	f004 fc7e 	bl	8008644 <lcd_print>
}
 8003d48:	e020      	b.n	8003d8c <lcdUpdate+0x94>
	} else if(y==5) {
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d105      	bne.n	8003d5c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003d50:	4a10      	ldr	r2, [pc, #64]	@ (8003d94 <lcdUpdate+0x9c>)
 8003d52:	2105      	movs	r1, #5
 8003d54:	2002      	movs	r0, #2
 8003d56:	f004 fc75 	bl	8008644 <lcd_print>
}
 8003d5a:	e017      	b.n	8003d8c <lcdUpdate+0x94>
	} else if(y==6) {
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d105      	bne.n	8003d6e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003d62:	4a0c      	ldr	r2, [pc, #48]	@ (8003d94 <lcdUpdate+0x9c>)
 8003d64:	2106      	movs	r1, #6
 8003d66:	2002      	movs	r0, #2
 8003d68:	f004 fc6c 	bl	8008644 <lcd_print>
}
 8003d6c:	e00e      	b.n	8003d8c <lcdUpdate+0x94>
	} else if (y==7) {
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b07      	cmp	r3, #7
 8003d72:	d10b      	bne.n	8003d8c <lcdUpdate+0x94>
		lcd_clear();
 8003d74:	f004 fc92 	bl	800869c <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003d78:	4a07      	ldr	r2, [pc, #28]	@ (8003d98 <lcdUpdate+0xa0>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f004 fc61 	bl	8008644 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003d82:	4a06      	ldr	r2, [pc, #24]	@ (8003d9c <lcdUpdate+0xa4>)
 8003d84:	2101      	movs	r1, #1
 8003d86:	2002      	movs	r0, #2
 8003d88:	f004 fc5c 	bl	8008644 <lcd_print>
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	0800da3c 	.word	0x0800da3c
 8003d98:	200000c8 	.word	0x200000c8
 8003d9c:	200000dc 	.word	0x200000dc

08003da0 <bekle>:

void bekle() {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
	timer1=millis;
 8003da4:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <bekle+0x124>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a47      	ldr	r2, [pc, #284]	@ (8003ec8 <bekle+0x128>)
 8003daa:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dac:	e002      	b.n	8003db4 <bekle+0x14>
    	butonKontrol = 1;
 8003dae:	4b47      	ldr	r3, [pc, #284]	@ (8003ecc <bekle+0x12c>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003db4:	2101      	movs	r1, #1
 8003db6:	4846      	ldr	r0, [pc, #280]	@ (8003ed0 <bekle+0x130>)
 8003db8:	f005 ff6e 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d109      	bne.n	8003dd6 <bekle+0x36>
 8003dc2:	4b40      	ldr	r3, [pc, #256]	@ (8003ec4 <bekle+0x124>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b40      	ldr	r3, [pc, #256]	@ (8003ec8 <bekle+0x128>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d0ef      	beq.n	8003dae <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dce:	e002      	b.n	8003dd6 <bekle+0x36>
    	butonKontrol = 1;
 8003dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ecc <bekle+0x12c>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dd6:	2108      	movs	r1, #8
 8003dd8:	483e      	ldr	r0, [pc, #248]	@ (8003ed4 <bekle+0x134>)
 8003dda:	f005 ff5d 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d109      	bne.n	8003df8 <bekle+0x58>
 8003de4:	4b37      	ldr	r3, [pc, #220]	@ (8003ec4 <bekle+0x124>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b37      	ldr	r3, [pc, #220]	@ (8003ec8 <bekle+0x128>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0ef      	beq.n	8003dd0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003df0:	e002      	b.n	8003df8 <bekle+0x58>
    	butonKontrol = 1;
 8003df2:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <bekle+0x12c>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4835      	ldr	r0, [pc, #212]	@ (8003ed0 <bekle+0x130>)
 8003dfc:	f005 ff4c 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d109      	bne.n	8003e1a <bekle+0x7a>
 8003e06:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec4 <bekle+0x124>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec8 <bekle+0x128>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d0ef      	beq.n	8003df2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e12:	e002      	b.n	8003e1a <bekle+0x7a>
    	butonKontrol = 1;
 8003e14:	4b2d      	ldr	r3, [pc, #180]	@ (8003ecc <bekle+0x12c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e1a:	2104      	movs	r1, #4
 8003e1c:	482c      	ldr	r0, [pc, #176]	@ (8003ed0 <bekle+0x130>)
 8003e1e:	f005 ff3b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d109      	bne.n	8003e3c <bekle+0x9c>
 8003e28:	4b26      	ldr	r3, [pc, #152]	@ (8003ec4 <bekle+0x124>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <bekle+0x128>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d0ef      	beq.n	8003e14 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e34:	e002      	b.n	8003e3c <bekle+0x9c>
    	butonKontrol = 1;
 8003e36:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <bekle+0x12c>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003e3c:	2108      	movs	r1, #8
 8003e3e:	4824      	ldr	r0, [pc, #144]	@ (8003ed0 <bekle+0x130>)
 8003e40:	f005 ff2a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d109      	bne.n	8003e5e <bekle+0xbe>
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec4 <bekle+0x124>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec8 <bekle+0x128>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d0ef      	beq.n	8003e36 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e56:	e002      	b.n	8003e5e <bekle+0xbe>
    	butonKontrol = 1;
 8003e58:	4b1c      	ldr	r3, [pc, #112]	@ (8003ecc <bekle+0x12c>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e5e:	2180      	movs	r1, #128	@ 0x80
 8003e60:	481c      	ldr	r0, [pc, #112]	@ (8003ed4 <bekle+0x134>)
 8003e62:	f005 ff19 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <bekle+0xe0>
 8003e6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <bekle+0x124>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <bekle+0x128>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d0ef      	beq.n	8003e58 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e78:	e002      	b.n	8003e80 <bekle+0xe0>
    	butonKontrol = 1;
 8003e7a:	4b14      	ldr	r3, [pc, #80]	@ (8003ecc <bekle+0x12c>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e84:	4813      	ldr	r0, [pc, #76]	@ (8003ed4 <bekle+0x134>)
 8003e86:	f005 ff07 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <bekle+0x104>
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <bekle+0x124>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <bekle+0x128>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d0ee      	beq.n	8003e7a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e9c:	e002      	b.n	8003ea4 <bekle+0x104>
    	butonKontrol = 1;
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <bekle+0x12c>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ea4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ea8:	480a      	ldr	r0, [pc, #40]	@ (8003ed4 <bekle+0x134>)
 8003eaa:	f005 fef5 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <bekle+0x120>
 8003eb4:	4b03      	ldr	r3, [pc, #12]	@ (8003ec4 <bekle+0x124>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b03      	ldr	r3, [pc, #12]	@ (8003ec8 <bekle+0x128>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d0ee      	beq.n	8003e9e <bekle+0xfe>
    }

}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000f38 	.word	0x20000f38
 8003ec8:	20000f40 	.word	0x20000f40
 8003ecc:	20000f8f 	.word	0x20000f8f
 8003ed0:	40010800 	.word	0x40010800
 8003ed4:	40011000 	.word	0x40011000

08003ed8 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003edc:	2101      	movs	r1, #1
 8003ede:	4815      	ldr	r0, [pc, #84]	@ (8003f34 <buttonCheck+0x5c>)
 8003ee0:	f005 feda 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d01b      	beq.n	8003f22 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003eea:	2108      	movs	r1, #8
 8003eec:	4812      	ldr	r0, [pc, #72]	@ (8003f38 <buttonCheck+0x60>)
 8003eee:	f005 fed3 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d014      	beq.n	8003f22 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003ef8:	2102      	movs	r1, #2
 8003efa:	480e      	ldr	r0, [pc, #56]	@ (8003f34 <buttonCheck+0x5c>)
 8003efc:	f005 fecc 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d00d      	beq.n	8003f22 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003f06:	2104      	movs	r1, #4
 8003f08:	480a      	ldr	r0, [pc, #40]	@ (8003f34 <buttonCheck+0x5c>)
 8003f0a:	f005 fec5 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d006      	beq.n	8003f22 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003f14:	2108      	movs	r1, #8
 8003f16:	4807      	ldr	r0, [pc, #28]	@ (8003f34 <buttonCheck+0x5c>)
 8003f18:	f005 febe 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d104      	bne.n	8003f2c <buttonCheck+0x54>
		backLightTimer = 0;
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <buttonCheck+0x64>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
		return 1;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <buttonCheck+0x56>
	}
	return 0;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40010800 	.word	0x40010800
 8003f38:	40011000 	.word	0x40011000
 8003f3c:	20000f54 	.word	0x20000f54

08003f40 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003f44:	4b07      	ldr	r3, [pc, #28]	@ (8003f64 <checkLCDBacklight+0x24>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <checkLCDBacklight+0x28>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003f50:	d903      	bls.n	8003f5a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003f52:	2000      	movs	r0, #0
 8003f54:	f004 fbc2 	bl	80086dc <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003f58:	e002      	b.n	8003f60 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f004 fbbe 	bl	80086dc <lcd_backlight>
}
 8003f60:	bf00      	nop
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000f38 	.word	0x20000f38
 8003f68:	20000f54 	.word	0x20000f54

08003f6c <checkBasincSalteri>:

void checkBasincSalteri() {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003f70:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <checkBasincSalteri+0x54>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <checkBasincSalteri+0x12>
		basincVar=1;
 8003f78:	4b12      	ldr	r3, [pc, #72]	@ (8003fc4 <checkBasincSalteri+0x58>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003f7e:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <checkBasincSalteri+0x54>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d119      	bne.n	8003fba <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003f86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f8a:	480f      	ldr	r0, [pc, #60]	@ (8003fc8 <checkBasincSalteri+0x5c>)
 8003f8c:	f005 fe84 	bl	8009c98 <HAL_GPIO_ReadPin>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <checkBasincSalteri+0x60>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd0 <checkBasincSalteri+0x64>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d90a      	bls.n	8003fba <checkBasincSalteri+0x4e>
				basincVar=1;
 8003fa4:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <checkBasincSalteri+0x58>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003faa:	e006      	b.n	8003fba <checkBasincSalteri+0x4e>
			timer5=millis;
 8003fac:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <checkBasincSalteri+0x60>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a07      	ldr	r2, [pc, #28]	@ (8003fd0 <checkBasincSalteri+0x64>)
 8003fb2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	@ (8003fc4 <checkBasincSalteri+0x58>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000f67 	.word	0x20000f67
 8003fc4:	20000f63 	.word	0x20000f63
 8003fc8:	40011000 	.word	0x40011000
 8003fcc:	20000f38 	.word	0x20000f38
 8003fd0:	20000f50 	.word	0x20000f50

08003fd4 <checkBasGonder>:

void checkBasGonder() {
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <checkBasGonder+0x74>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10b      	bne.n	8003ff8 <checkBasGonder+0x24>
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <checkBasGonder+0x78>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <checkBasGonder+0x24>
 8003fe8:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <checkBasGonder+0x7c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003ff0:	4b18      	ldr	r3, [pc, #96]	@ (8004054 <checkBasGonder+0x80>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e009      	b.n	800400c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003ff8:	4b14      	ldr	r3, [pc, #80]	@ (800404c <checkBasGonder+0x78>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	f083 0301 	eor.w	r3, r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004006:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <checkBasGonder+0x80>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800400c:	4b0e      	ldr	r3, [pc, #56]	@ (8004048 <checkBasGonder+0x74>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10b      	bne.n	800402c <checkBasGonder+0x58>
 8004014:	4b10      	ldr	r3, [pc, #64]	@ (8004058 <checkBasGonder+0x84>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <checkBasGonder+0x58>
 800401c:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <checkBasGonder+0x7c>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004024:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <checkBasGonder+0x88>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800402a:	e009      	b.n	8004040 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800402c:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <checkBasGonder+0x84>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	f083 0301 	eor.w	r3, r3, #1
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800403a:	4b08      	ldr	r3, [pc, #32]	@ (800405c <checkBasGonder+0x88>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	20000f61 	.word	0x20000f61
 800404c:	20000f95 	.word	0x20000f95
 8004050:	20000f6f 	.word	0x20000f6f
 8004054:	20000f9c 	.word	0x20000f9c
 8004058:	20000f98 	.word	0x20000f98
 800405c:	20000f9d 	.word	0x20000f9d

08004060 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004064:	4b24      	ldr	r3, [pc, #144]	@ (80040f8 <checkKapiSecimleri+0x98>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800406c:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <checkKapiSecimleri+0x9c>)
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004072:	4b21      	ldr	r3, [pc, #132]	@ (80040f8 <checkKapiSecimleri+0x98>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d10e      	bne.n	8004098 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800407a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800407e:	4820      	ldr	r0, [pc, #128]	@ (8004100 <checkKapiSecimleri+0xa0>)
 8004080:	f005 fe0a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800408a:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <checkKapiSecimleri+0x9c>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e002      	b.n	8004098 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004092:	4b1a      	ldr	r3, [pc, #104]	@ (80040fc <checkKapiSecimleri+0x9c>)
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004098:	4b17      	ldr	r3, [pc, #92]	@ (80040f8 <checkKapiSecimleri+0x98>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d10e      	bne.n	80040be <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80040a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040a4:	4816      	ldr	r0, [pc, #88]	@ (8004100 <checkKapiSecimleri+0xa0>)
 80040a6:	f005 fdf7 	bl	8009c98 <HAL_GPIO_ReadPin>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80040b0:	4b12      	ldr	r3, [pc, #72]	@ (80040fc <checkKapiSecimleri+0x9c>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e002      	b.n	80040be <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80040b8:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <checkKapiSecimleri+0x9c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80040be:	4b0e      	ldr	r3, [pc, #56]	@ (80040f8 <checkKapiSecimleri+0x98>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d116      	bne.n	80040f4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80040c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040ca:	480d      	ldr	r0, [pc, #52]	@ (8004100 <checkKapiSecimleri+0xa0>)
 80040cc:	f005 fde4 	bl	8009c98 <HAL_GPIO_ReadPin>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <checkKapiSecimleri+0x8e>
 80040d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040da:	4809      	ldr	r0, [pc, #36]	@ (8004100 <checkKapiSecimleri+0xa0>)
 80040dc:	f005 fddc 	bl	8009c98 <HAL_GPIO_ReadPin>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80040e6:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <checkKapiSecimleri+0x9c>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80040ec:	e002      	b.n	80040f4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80040ee:	4b03      	ldr	r3, [pc, #12]	@ (80040fc <checkKapiSecimleri+0x9c>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000f68 	.word	0x20000f68
 80040fc:	20000fb3 	.word	0x20000fb3
 8004100:	40010800 	.word	0x40010800

08004104 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004108:	4b62      	ldr	r3, [pc, #392]	@ (8004294 <checkAktifCalisma+0x190>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f041 833e 	bne.w	800578e <checkAktifCalisma+0x168a>
 8004112:	4b61      	ldr	r3, [pc, #388]	@ (8004298 <checkAktifCalisma+0x194>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f041 8339 	bne.w	800578e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800411c:	4b5f      	ldr	r3, [pc, #380]	@ (800429c <checkAktifCalisma+0x198>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11a      	bne.n	800415a <checkAktifCalisma+0x56>
 8004124:	4b5e      	ldr	r3, [pc, #376]	@ (80042a0 <checkAktifCalisma+0x19c>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d116      	bne.n	800415a <checkAktifCalisma+0x56>
 800412c:	4b5d      	ldr	r3, [pc, #372]	@ (80042a4 <checkAktifCalisma+0x1a0>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <checkAktifCalisma+0x46>
 8004134:	4b5c      	ldr	r3, [pc, #368]	@ (80042a8 <checkAktifCalisma+0x1a4>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	f083 0301 	eor.w	r3, r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <checkAktifCalisma+0x46>
 8004142:	4b5a      	ldr	r3, [pc, #360]	@ (80042ac <checkAktifCalisma+0x1a8>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d007      	beq.n	800415a <checkAktifCalisma+0x56>
 800414a:	4b59      	ldr	r3, [pc, #356]	@ (80042b0 <checkAktifCalisma+0x1ac>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <checkAktifCalisma+0x80>
 8004152:	4b58      	ldr	r3, [pc, #352]	@ (80042b4 <checkAktifCalisma+0x1b0>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d114      	bne.n	8004184 <checkAktifCalisma+0x80>
 800415a:	4b57      	ldr	r3, [pc, #348]	@ (80042b8 <checkAktifCalisma+0x1b4>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <checkAktifCalisma+0x80>
 8004162:	4b56      	ldr	r3, [pc, #344]	@ (80042bc <checkAktifCalisma+0x1b8>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800416a:	2201      	movs	r2, #1
 800416c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004170:	4853      	ldr	r0, [pc, #332]	@ (80042c0 <checkAktifCalisma+0x1bc>)
 8004172:	f005 fda8 	bl	8009cc6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004176:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <checkAktifCalisma+0x1c0>)
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 800417c:	4b52      	ldr	r3, [pc, #328]	@ (80042c8 <checkAktifCalisma+0x1c4>)
 800417e:	2201      	movs	r2, #1
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e008      	b.n	8004196 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800418a:	484d      	ldr	r0, [pc, #308]	@ (80042c0 <checkAktifCalisma+0x1bc>)
 800418c:	f005 fd9b 	bl	8009cc6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004190:	4b4c      	ldr	r3, [pc, #304]	@ (80042c4 <checkAktifCalisma+0x1c0>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004196:	4b40      	ldr	r3, [pc, #256]	@ (8004298 <checkAktifCalisma+0x194>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d160      	bne.n	8004260 <checkAktifCalisma+0x15c>
 800419e:	4b46      	ldr	r3, [pc, #280]	@ (80042b8 <checkAktifCalisma+0x1b4>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d05c      	beq.n	8004260 <checkAktifCalisma+0x15c>
 80041a6:	4b45      	ldr	r3, [pc, #276]	@ (80042bc <checkAktifCalisma+0x1b8>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d058      	beq.n	8004260 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80041ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041b2:	4843      	ldr	r0, [pc, #268]	@ (80042c0 <checkAktifCalisma+0x1bc>)
 80041b4:	f005 fd70 	bl	8009c98 <HAL_GPIO_ReadPin>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <checkAktifCalisma+0xc2>
 80041be:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <checkAktifCalisma+0x1c8>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d04c      	beq.n	8004260 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80041c6:	2102      	movs	r1, #2
 80041c8:	4841      	ldr	r0, [pc, #260]	@ (80042d0 <checkAktifCalisma+0x1cc>)
 80041ca:	f005 fd65 	bl	8009c98 <HAL_GPIO_ReadPin>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d145      	bne.n	8004260 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80041d4:	4b3f      	ldr	r3, [pc, #252]	@ (80042d4 <checkAktifCalisma+0x1d0>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d041      	beq.n	8004260 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80041dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041e0:	4837      	ldr	r0, [pc, #220]	@ (80042c0 <checkAktifCalisma+0x1bc>)
 80041e2:	f005 fd59 	bl	8009c98 <HAL_GPIO_ReadPin>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d10e      	bne.n	800420a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80041ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041f0:	4833      	ldr	r0, [pc, #204]	@ (80042c0 <checkAktifCalisma+0x1bc>)
 80041f2:	f005 fd51 	bl	8009c98 <HAL_GPIO_ReadPin>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d106      	bne.n	800420a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80041fc:	2140      	movs	r1, #64	@ 0x40
 80041fe:	4834      	ldr	r0, [pc, #208]	@ (80042d0 <checkAktifCalisma+0x1cc>)
 8004200:	f005 fd4a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d003      	beq.n	8004212 <checkAktifCalisma+0x10e>
 800420a:	4b24      	ldr	r3, [pc, #144]	@ (800429c <checkAktifCalisma+0x198>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d026      	beq.n	8004260 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004212:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <checkAktifCalisma+0x1a0>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	f083 0301 	eor.w	r3, r3, #1
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01f      	beq.n	8004260 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004220:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <checkAktifCalisma+0x19c>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	f083 0301 	eor.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d018      	beq.n	8004260 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800422e:	4b20      	ldr	r3, [pc, #128]	@ (80042b0 <checkAktifCalisma+0x1ac>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	f083 0301 	eor.w	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800423c:	4b26      	ldr	r3, [pc, #152]	@ (80042d8 <checkAktifCalisma+0x1d4>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f083 0301 	eor.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <checkAktifCalisma+0x1d8>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f083 0301 	eor.w	r3, r3, #1
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004258:	4b10      	ldr	r3, [pc, #64]	@ (800429c <checkAktifCalisma+0x198>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e002      	b.n	8004266 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004260:	4b0e      	ldr	r3, [pc, #56]	@ (800429c <checkAktifCalisma+0x198>)
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <checkAktifCalisma+0x198>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d03a      	beq.n	80042e4 <checkAktifCalisma+0x1e0>
 800426e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004272:	4817      	ldr	r0, [pc, #92]	@ (80042d0 <checkAktifCalisma+0x1cc>)
 8004274:	f005 fd10 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d132      	bne.n	80042e4 <checkAktifCalisma+0x1e0>
 800427e:	4b18      	ldr	r3, [pc, #96]	@ (80042e0 <checkAktifCalisma+0x1dc>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d02e      	beq.n	80042e4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004286:	2201      	movs	r2, #1
 8004288:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800428c:	480c      	ldr	r0, [pc, #48]	@ (80042c0 <checkAktifCalisma+0x1bc>)
 800428e:	f005 fd1a 	bl	8009cc6 <HAL_GPIO_WritePin>
 8004292:	e02d      	b.n	80042f0 <checkAktifCalisma+0x1ec>
 8004294:	20000f7e 	.word	0x20000f7e
 8004298:	20000f7d 	.word	0x20000f7d
 800429c:	20000f95 	.word	0x20000f95
 80042a0:	20000f96 	.word	0x20000f96
 80042a4:	20000f98 	.word	0x20000f98
 80042a8:	20000f90 	.word	0x20000f90
 80042ac:	20000f73 	.word	0x20000f73
 80042b0:	20000f97 	.word	0x20000f97
 80042b4:	20000f72 	.word	0x20000f72
 80042b8:	20000fb2 	.word	0x20000fb2
 80042bc:	20000fb3 	.word	0x20000fb3
 80042c0:	40010c00 	.word	0x40010c00
 80042c4:	20000fb4 	.word	0x20000fb4
 80042c8:	20000f9f 	.word	0x20000f9f
 80042cc:	20000f9c 	.word	0x20000f9c
 80042d0:	40011000 	.word	0x40011000
 80042d4:	20000f63 	.word	0x20000f63
 80042d8:	20000f9a 	.word	0x20000f9a
 80042dc:	20000f9b 	.word	0x20000f9b
 80042e0:	20000f6e 	.word	0x20000f6e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80042e4:	2200      	movs	r2, #0
 80042e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042ea:	4860      	ldr	r0, [pc, #384]	@ (800446c <checkAktifCalisma+0x368>)
 80042ec:	f005 fceb 	bl	8009cc6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80042f0:	4b5f      	ldr	r3, [pc, #380]	@ (8004470 <checkAktifCalisma+0x36c>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <checkAktifCalisma+0x21c>
 80042f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004474 <checkAktifCalisma+0x370>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d007      	beq.n	8004310 <checkAktifCalisma+0x20c>
 8004300:	4b5c      	ldr	r3, [pc, #368]	@ (8004474 <checkAktifCalisma+0x370>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d003      	beq.n	8004310 <checkAktifCalisma+0x20c>
 8004308:	4b5b      	ldr	r3, [pc, #364]	@ (8004478 <checkAktifCalisma+0x374>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004310:	2201      	movs	r2, #1
 8004312:	2104      	movs	r1, #4
 8004314:	4855      	ldr	r0, [pc, #340]	@ (800446c <checkAktifCalisma+0x368>)
 8004316:	f005 fcd6 	bl	8009cc6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800431a:	4b58      	ldr	r3, [pc, #352]	@ (800447c <checkAktifCalisma+0x378>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004320:	4b56      	ldr	r3, [pc, #344]	@ (800447c <checkAktifCalisma+0x378>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02f      	beq.n	8004388 <checkAktifCalisma+0x284>
 8004328:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800432c:	484f      	ldr	r0, [pc, #316]	@ (800446c <checkAktifCalisma+0x368>)
 800432e:	f005 fcb3 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004332:	4603      	mov	r3, r0
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <checkAktifCalisma+0x242>
 8004338:	4b51      	ldr	r3, [pc, #324]	@ (8004480 <checkAktifCalisma+0x37c>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	f083 0301 	eor.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <checkAktifCalisma+0x250>
 8004346:	2102      	movs	r1, #2
 8004348:	484e      	ldr	r0, [pc, #312]	@ (8004484 <checkAktifCalisma+0x380>)
 800434a:	f005 fca5 	bl	8009c98 <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d119      	bne.n	8004388 <checkAktifCalisma+0x284>
 8004354:	4b4c      	ldr	r3, [pc, #304]	@ (8004488 <checkAktifCalisma+0x384>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <checkAktifCalisma+0x284>
 800435c:	4b4b      	ldr	r3, [pc, #300]	@ (800448c <checkAktifCalisma+0x388>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d011      	beq.n	8004388 <checkAktifCalisma+0x284>
 8004364:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <checkAktifCalisma+0x38c>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <checkAktifCalisma+0x284>
 800436c:	4b49      	ldr	r3, [pc, #292]	@ (8004494 <checkAktifCalisma+0x390>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f083 0301 	eor.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <checkAktifCalisma+0x284>
			timer2=millis;
 800437a:	4b47      	ldr	r3, [pc, #284]	@ (8004498 <checkAktifCalisma+0x394>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a47      	ldr	r2, [pc, #284]	@ (800449c <checkAktifCalisma+0x398>)
 8004380:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004382:	4b44      	ldr	r3, [pc, #272]	@ (8004494 <checkAktifCalisma+0x390>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004388:	4b43      	ldr	r3, [pc, #268]	@ (8004498 <checkAktifCalisma+0x394>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b43      	ldr	r3, [pc, #268]	@ (800449c <checkAktifCalisma+0x398>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	4a43      	ldr	r2, [pc, #268]	@ (80044a0 <checkAktifCalisma+0x39c>)
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	4293      	cmp	r3, r2
 8004398:	d303      	bcc.n	80043a2 <checkAktifCalisma+0x29e>
 800439a:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <checkAktifCalisma+0x390>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d111      	bne.n	80043c6 <checkAktifCalisma+0x2c2>
 80043a2:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <checkAktifCalisma+0x384>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	f083 0301 	eor.w	r3, r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <checkAktifCalisma+0x2c2>
 80043b0:	4b36      	ldr	r3, [pc, #216]	@ (800448c <checkAktifCalisma+0x388>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f083 0301 	eor.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <checkAktifCalisma+0x2c2>
 80043be:	4b34      	ldr	r3, [pc, #208]	@ (8004490 <checkAktifCalisma+0x38c>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2104      	movs	r1, #4
 80043ca:	4828      	ldr	r0, [pc, #160]	@ (800446c <checkAktifCalisma+0x368>)
 80043cc:	f005 fc7b 	bl	8009cc6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80043d0:	4b2a      	ldr	r3, [pc, #168]	@ (800447c <checkAktifCalisma+0x378>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80043d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004494 <checkAktifCalisma+0x390>)
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <checkAktifCalisma+0x3a0>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80043e4:	4b30      	ldr	r3, [pc, #192]	@ (80044a8 <checkAktifCalisma+0x3a4>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80043ea:	4b2e      	ldr	r3, [pc, #184]	@ (80044a4 <checkAktifCalisma+0x3a0>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d116      	bne.n	8004420 <checkAktifCalisma+0x31c>
 80043f2:	4b2e      	ldr	r3, [pc, #184]	@ (80044ac <checkAktifCalisma+0x3a8>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d112      	bne.n	8004420 <checkAktifCalisma+0x31c>
 80043fa:	2101      	movs	r1, #1
 80043fc:	4821      	ldr	r0, [pc, #132]	@ (8004484 <checkAktifCalisma+0x380>)
 80043fe:	f005 fc4b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <checkAktifCalisma+0x31c>
 8004408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800440c:	4817      	ldr	r0, [pc, #92]	@ (800446c <checkAktifCalisma+0x368>)
 800440e:	f005 fc43 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004418:	4b23      	ldr	r3, [pc, #140]	@ (80044a8 <checkAktifCalisma+0x3a4>)
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e011      	b.n	8004444 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004420:	4b20      	ldr	r3, [pc, #128]	@ (80044a4 <checkAktifCalisma+0x3a0>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d10d      	bne.n	8004444 <checkAktifCalisma+0x340>
 8004428:	2101      	movs	r1, #1
 800442a:	4816      	ldr	r0, [pc, #88]	@ (8004484 <checkAktifCalisma+0x380>)
 800442c:	f005 fc34 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d106      	bne.n	8004444 <checkAktifCalisma+0x340>
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <checkAktifCalisma+0x3a8>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800443e:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <checkAktifCalisma+0x3a4>)
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004444:	4b17      	ldr	r3, [pc, #92]	@ (80044a4 <checkAktifCalisma+0x3a0>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d134      	bne.n	80044b6 <checkAktifCalisma+0x3b2>
 800444c:	4b17      	ldr	r3, [pc, #92]	@ (80044ac <checkAktifCalisma+0x3a8>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d130      	bne.n	80044b6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004454:	2101      	movs	r1, #1
 8004456:	480b      	ldr	r0, [pc, #44]	@ (8004484 <checkAktifCalisma+0x380>)
 8004458:	f005 fc1e 	bl	8009c98 <HAL_GPIO_ReadPin>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d126      	bne.n	80044b0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004462:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <checkAktifCalisma+0x3a4>)
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e025      	b.n	80044b6 <checkAktifCalisma+0x3b2>
 800446a:	bf00      	nop
 800446c:	40010c00 	.word	0x40010c00
 8004470:	20000f95 	.word	0x20000f95
 8004474:	20000f6f 	.word	0x20000f6f
 8004478:	20000f73 	.word	0x20000f73
 800447c:	20000f99 	.word	0x20000f99
 8004480:	20000f9c 	.word	0x20000f9c
 8004484:	40011000 	.word	0x40011000
 8004488:	20000fb2 	.word	0x20000fb2
 800448c:	20000fb3 	.word	0x20000fb3
 8004490:	20000f63 	.word	0x20000f63
 8004494:	20000f91 	.word	0x20000f91
 8004498:	20000f38 	.word	0x20000f38
 800449c:	20000f44 	.word	0x20000f44
 80044a0:	20000f74 	.word	0x20000f74
 80044a4:	20000f64 	.word	0x20000f64
 80044a8:	20000fb7 	.word	0x20000fb7
 80044ac:	20000f61 	.word	0x20000f61
			} else {
				cerceveVar=0;
 80044b0:	4b7f      	ldr	r3, [pc, #508]	@ (80046b0 <checkAktifCalisma+0x5ac>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80044b6:	4b7f      	ldr	r3, [pc, #508]	@ (80046b4 <checkAktifCalisma+0x5b0>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d17c      	bne.n	80045b8 <checkAktifCalisma+0x4b4>
 80044be:	4b7e      	ldr	r3, [pc, #504]	@ (80046b8 <checkAktifCalisma+0x5b4>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d078      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
 80044c6:	4b7d      	ldr	r3, [pc, #500]	@ (80046bc <checkAktifCalisma+0x5b8>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d074      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80044ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044d2:	487b      	ldr	r0, [pc, #492]	@ (80046c0 <checkAktifCalisma+0x5bc>)
 80044d4:	f005 fbe0 	bl	8009c98 <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <checkAktifCalisma+0x3e2>
 80044de:	4b79      	ldr	r3, [pc, #484]	@ (80046c4 <checkAktifCalisma+0x5c0>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d068      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80044e6:	4b72      	ldr	r3, [pc, #456]	@ (80046b0 <checkAktifCalisma+0x5ac>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d064      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
 80044ee:	4b76      	ldr	r3, [pc, #472]	@ (80046c8 <checkAktifCalisma+0x5c4>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	f083 0301 	eor.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d05d      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80044fc:	2104      	movs	r1, #4
 80044fe:	4873      	ldr	r0, [pc, #460]	@ (80046cc <checkAktifCalisma+0x5c8>)
 8004500:	f005 fbca 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <checkAktifCalisma+0x40e>
 800450a:	4b71      	ldr	r3, [pc, #452]	@ (80046d0 <checkAktifCalisma+0x5cc>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d152      	bne.n	80045b8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004516:	486a      	ldr	r0, [pc, #424]	@ (80046c0 <checkAktifCalisma+0x5bc>)
 8004518:	f005 fbbe 	bl	8009c98 <HAL_GPIO_ReadPin>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d10e      	bne.n	8004540 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004522:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004526:	4866      	ldr	r0, [pc, #408]	@ (80046c0 <checkAktifCalisma+0x5bc>)
 8004528:	f005 fbb6 	bl	8009c98 <HAL_GPIO_ReadPin>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d106      	bne.n	8004540 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004532:	2140      	movs	r1, #64	@ 0x40
 8004534:	4865      	ldr	r0, [pc, #404]	@ (80046cc <checkAktifCalisma+0x5c8>)
 8004536:	f005 fbaf 	bl	8009c98 <HAL_GPIO_ReadPin>
 800453a:	4603      	mov	r3, r0
 800453c:	2b01      	cmp	r3, #1
 800453e:	d003      	beq.n	8004548 <checkAktifCalisma+0x444>
 8004540:	4b64      	ldr	r3, [pc, #400]	@ (80046d4 <checkAktifCalisma+0x5d0>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d037      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004548:	4b63      	ldr	r3, [pc, #396]	@ (80046d8 <checkAktifCalisma+0x5d4>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f083 0301 	eor.w	r3, r3, #1
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d030      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8004556:	4b61      	ldr	r3, [pc, #388]	@ (80046dc <checkAktifCalisma+0x5d8>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	f083 0301 	eor.w	r3, r3, #1
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d029      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8004564:	4b5e      	ldr	r3, [pc, #376]	@ (80046e0 <checkAktifCalisma+0x5dc>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f083 0301 	eor.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d022      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8004572:	4b5c      	ldr	r3, [pc, #368]	@ (80046e4 <checkAktifCalisma+0x5e0>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	f083 0301 	eor.w	r3, r3, #1
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8004580:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <checkAktifCalisma+0x5e4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	f083 0301 	eor.w	r3, r3, #1
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d014      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800458e:	4b57      	ldr	r3, [pc, #348]	@ (80046ec <checkAktifCalisma+0x5e8>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f083 0301 	eor.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800459c:	2201      	movs	r2, #1
 800459e:	2102      	movs	r1, #2
 80045a0:	4847      	ldr	r0, [pc, #284]	@ (80046c0 <checkAktifCalisma+0x5bc>)
 80045a2:	f005 fb90 	bl	8009cc6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80045a6:	4b4b      	ldr	r3, [pc, #300]	@ (80046d4 <checkAktifCalisma+0x5d0>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80045ac:	4b50      	ldr	r3, [pc, #320]	@ (80046f0 <checkAktifCalisma+0x5ec>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80045b2:	4b50      	ldr	r3, [pc, #320]	@ (80046f4 <checkAktifCalisma+0x5f0>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80045b8:	4b46      	ldr	r3, [pc, #280]	@ (80046d4 <checkAktifCalisma+0x5d0>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d033      	beq.n	8004628 <checkAktifCalisma+0x524>
 80045c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045c4:	483e      	ldr	r0, [pc, #248]	@ (80046c0 <checkAktifCalisma+0x5bc>)
 80045c6:	f005 fb67 	bl	8009c98 <HAL_GPIO_ReadPin>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d106      	bne.n	80045de <checkAktifCalisma+0x4da>
 80045d0:	4b3c      	ldr	r3, [pc, #240]	@ (80046c4 <checkAktifCalisma+0x5c0>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f083 0301 	eor.w	r3, r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <checkAktifCalisma+0x4f0>
 80045de:	2104      	movs	r1, #4
 80045e0:	483a      	ldr	r0, [pc, #232]	@ (80046cc <checkAktifCalisma+0x5c8>)
 80045e2:	f005 fb59 	bl	8009c98 <HAL_GPIO_ReadPin>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d11d      	bne.n	8004628 <checkAktifCalisma+0x524>
 80045ec:	4b38      	ldr	r3, [pc, #224]	@ (80046d0 <checkAktifCalisma+0x5cc>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d019      	beq.n	8004628 <checkAktifCalisma+0x524>
 80045f4:	4b30      	ldr	r3, [pc, #192]	@ (80046b8 <checkAktifCalisma+0x5b4>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <checkAktifCalisma+0x524>
 80045fc:	4b2f      	ldr	r3, [pc, #188]	@ (80046bc <checkAktifCalisma+0x5b8>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d011      	beq.n	8004628 <checkAktifCalisma+0x524>
 8004604:	4b2a      	ldr	r3, [pc, #168]	@ (80046b0 <checkAktifCalisma+0x5ac>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <checkAktifCalisma+0x524>
 800460c:	4b3a      	ldr	r3, [pc, #232]	@ (80046f8 <checkAktifCalisma+0x5f4>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f083 0301 	eor.w	r3, r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d006      	beq.n	8004628 <checkAktifCalisma+0x524>
			timer2=millis;
 800461a:	4b38      	ldr	r3, [pc, #224]	@ (80046fc <checkAktifCalisma+0x5f8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a38      	ldr	r2, [pc, #224]	@ (8004700 <checkAktifCalisma+0x5fc>)
 8004620:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8004622:	4b35      	ldr	r3, [pc, #212]	@ (80046f8 <checkAktifCalisma+0x5f4>)
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004628:	4b34      	ldr	r3, [pc, #208]	@ (80046fc <checkAktifCalisma+0x5f8>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4b34      	ldr	r3, [pc, #208]	@ (8004700 <checkAktifCalisma+0x5fc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	4a34      	ldr	r2, [pc, #208]	@ (8004704 <checkAktifCalisma+0x600>)
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	4293      	cmp	r3, r2
 8004638:	d303      	bcc.n	8004642 <checkAktifCalisma+0x53e>
 800463a:	4b2f      	ldr	r3, [pc, #188]	@ (80046f8 <checkAktifCalisma+0x5f4>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d114      	bne.n	800466c <checkAktifCalisma+0x568>
 8004642:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <checkAktifCalisma+0x5b4>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	f083 0301 	eor.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10d      	bne.n	800466c <checkAktifCalisma+0x568>
 8004650:	4b1a      	ldr	r3, [pc, #104]	@ (80046bc <checkAktifCalisma+0x5b8>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f083 0301 	eor.w	r3, r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <checkAktifCalisma+0x568>
 800465e:	4b14      	ldr	r3, [pc, #80]	@ (80046b0 <checkAktifCalisma+0x5ac>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f083 0301 	eor.w	r3, r3, #1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800466c:	2200      	movs	r2, #0
 800466e:	2102      	movs	r1, #2
 8004670:	4813      	ldr	r0, [pc, #76]	@ (80046c0 <checkAktifCalisma+0x5bc>)
 8004672:	f005 fb28 	bl	8009cc6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8004676:	4b17      	ldr	r3, [pc, #92]	@ (80046d4 <checkAktifCalisma+0x5d0>)
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800467c:	4b1e      	ldr	r3, [pc, #120]	@ (80046f8 <checkAktifCalisma+0x5f4>)
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004682:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <checkAktifCalisma+0x5d0>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d040      	beq.n	800470c <checkAktifCalisma+0x608>
 800468a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800468e:	480f      	ldr	r0, [pc, #60]	@ (80046cc <checkAktifCalisma+0x5c8>)
 8004690:	f005 fb02 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d138      	bne.n	800470c <checkAktifCalisma+0x608>
 800469a:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <checkAktifCalisma+0x604>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d034      	beq.n	800470c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80046a2:	2201      	movs	r2, #1
 80046a4:	2101      	movs	r1, #1
 80046a6:	4806      	ldr	r0, [pc, #24]	@ (80046c0 <checkAktifCalisma+0x5bc>)
 80046a8:	f005 fb0d 	bl	8009cc6 <HAL_GPIO_WritePin>
 80046ac:	e033      	b.n	8004716 <checkAktifCalisma+0x612>
 80046ae:	bf00      	nop
 80046b0:	20000fb7 	.word	0x20000fb7
 80046b4:	20000f7d 	.word	0x20000f7d
 80046b8:	20000fb2 	.word	0x20000fb2
 80046bc:	20000fb3 	.word	0x20000fb3
 80046c0:	40010c00 	.word	0x40010c00
 80046c4:	20000f9d 	.word	0x20000f9d
 80046c8:	20000fb1 	.word	0x20000fb1
 80046cc:	40011000 	.word	0x40011000
 80046d0:	20000f66 	.word	0x20000f66
 80046d4:	20000f98 	.word	0x20000f98
 80046d8:	20000f95 	.word	0x20000f95
 80046dc:	20000f99 	.word	0x20000f99
 80046e0:	20000f96 	.word	0x20000f96
 80046e4:	20000f97 	.word	0x20000f97
 80046e8:	20000f9a 	.word	0x20000f9a
 80046ec:	20000f9b 	.word	0x20000f9b
 80046f0:	20000fa0 	.word	0x20000fa0
 80046f4:	20000fc1 	.word	0x20000fc1
 80046f8:	20000f90 	.word	0x20000f90
 80046fc:	20000f38 	.word	0x20000f38
 8004700:	20000f44 	.word	0x20000f44
 8004704:	20000f75 	.word	0x20000f75
 8004708:	20000f65 	.word	0x20000f65
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800470c:	2200      	movs	r2, #0
 800470e:	2101      	movs	r1, #1
 8004710:	4836      	ldr	r0, [pc, #216]	@ (80047ec <checkAktifCalisma+0x6e8>)
 8004712:	f005 fad8 	bl	8009cc6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8004716:	4b36      	ldr	r3, [pc, #216]	@ (80047f0 <checkAktifCalisma+0x6ec>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	f040 8080 	bne.w	8004820 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004720:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <checkAktifCalisma+0x6f0>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d003      	beq.n	8004730 <checkAktifCalisma+0x62c>
 8004728:	4b32      	ldr	r3, [pc, #200]	@ (80047f4 <checkAktifCalisma+0x6f0>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d177      	bne.n	8004820 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8004730:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <checkAktifCalisma+0x6f4>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d073      	beq.n	8004820 <checkAktifCalisma+0x71c>
 8004738:	4b30      	ldr	r3, [pc, #192]	@ (80047fc <checkAktifCalisma+0x6f8>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d06f      	beq.n	8004820 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004744:	4829      	ldr	r0, [pc, #164]	@ (80047ec <checkAktifCalisma+0x6e8>)
 8004746:	f005 faa7 	bl	8009c98 <HAL_GPIO_ReadPin>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d167      	bne.n	8004820 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004750:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004754:	482a      	ldr	r0, [pc, #168]	@ (8004800 <checkAktifCalisma+0x6fc>)
 8004756:	f005 fa9f 	bl	8009c98 <HAL_GPIO_ReadPin>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <checkAktifCalisma+0x664>
 8004760:	4b28      	ldr	r3, [pc, #160]	@ (8004804 <checkAktifCalisma+0x700>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d15b      	bne.n	8004820 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004768:	2140      	movs	r1, #64	@ 0x40
 800476a:	4825      	ldr	r0, [pc, #148]	@ (8004800 <checkAktifCalisma+0x6fc>)
 800476c:	f005 fa94 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10f      	bne.n	8004796 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004776:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800477a:	481c      	ldr	r0, [pc, #112]	@ (80047ec <checkAktifCalisma+0x6e8>)
 800477c:	f005 fa8c 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004780:	4603      	mov	r3, r0
 8004782:	2b01      	cmp	r3, #1
 8004784:	d107      	bne.n	8004796 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004786:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800478a:	4818      	ldr	r0, [pc, #96]	@ (80047ec <checkAktifCalisma+0x6e8>)
 800478c:	f005 fa84 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004790:	4603      	mov	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d003      	beq.n	800479e <checkAktifCalisma+0x69a>
 8004796:	4b1c      	ldr	r3, [pc, #112]	@ (8004808 <checkAktifCalisma+0x704>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d040      	beq.n	8004820 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800479e:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <checkAktifCalisma+0x708>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f083 0301 	eor.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d039      	beq.n	8004820 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80047ac:	4b18      	ldr	r3, [pc, #96]	@ (8004810 <checkAktifCalisma+0x70c>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	f083 0301 	eor.w	r3, r3, #1
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d032      	beq.n	8004820 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80047ba:	4b16      	ldr	r3, [pc, #88]	@ (8004814 <checkAktifCalisma+0x710>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f083 0301 	eor.w	r3, r3, #1
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02b      	beq.n	8004820 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80047c8:	4b13      	ldr	r3, [pc, #76]	@ (8004818 <checkAktifCalisma+0x714>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d024      	beq.n	8004820 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80047d6:	4b11      	ldr	r3, [pc, #68]	@ (800481c <checkAktifCalisma+0x718>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f083 0301 	eor.w	r3, r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01d      	beq.n	8004820 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80047e4:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <checkAktifCalisma+0x704>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e01c      	b.n	8004826 <checkAktifCalisma+0x722>
 80047ec:	40010c00 	.word	0x40010c00
 80047f0:	20000f7d 	.word	0x20000f7d
 80047f4:	20000f6f 	.word	0x20000f6f
 80047f8:	20000fb2 	.word	0x20000fb2
 80047fc:	20000fb3 	.word	0x20000fb3
 8004800:	40011000 	.word	0x40011000
 8004804:	20000f70 	.word	0x20000f70
 8004808:	20000f96 	.word	0x20000f96
 800480c:	20000f95 	.word	0x20000f95
 8004810:	20000f99 	.word	0x20000f99
 8004814:	20000f98 	.word	0x20000f98
 8004818:	20000f97 	.word	0x20000f97
 800481c:	20000f9b 	.word	0x20000f9b
		} else {
			devmotoryukaricalisiyor=0;
 8004820:	4b64      	ldr	r3, [pc, #400]	@ (80049b4 <checkAktifCalisma+0x8b0>)
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8004826:	4b63      	ldr	r3, [pc, #396]	@ (80049b4 <checkAktifCalisma+0x8b0>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800482e:	2201      	movs	r2, #1
 8004830:	2120      	movs	r1, #32
 8004832:	4861      	ldr	r0, [pc, #388]	@ (80049b8 <checkAktifCalisma+0x8b4>)
 8004834:	f005 fa47 	bl	8009cc6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8004838:	4b60      	ldr	r3, [pc, #384]	@ (80049bc <checkAktifCalisma+0x8b8>)
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800483e:	4b5f      	ldr	r3, [pc, #380]	@ (80049bc <checkAktifCalisma+0x8b8>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d025      	beq.n	8004892 <checkAktifCalisma+0x78e>
 8004846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800484a:	485d      	ldr	r0, [pc, #372]	@ (80049c0 <checkAktifCalisma+0x8bc>)
 800484c:	f005 fa24 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004850:	4603      	mov	r3, r0
 8004852:	2b01      	cmp	r3, #1
 8004854:	d007      	beq.n	8004866 <checkAktifCalisma+0x762>
 8004856:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800485a:	4857      	ldr	r0, [pc, #348]	@ (80049b8 <checkAktifCalisma+0x8b4>)
 800485c:	f005 fa1c 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d115      	bne.n	8004892 <checkAktifCalisma+0x78e>
 8004866:	4b57      	ldr	r3, [pc, #348]	@ (80049c4 <checkAktifCalisma+0x8c0>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d011      	beq.n	8004892 <checkAktifCalisma+0x78e>
 800486e:	4b56      	ldr	r3, [pc, #344]	@ (80049c8 <checkAktifCalisma+0x8c4>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <checkAktifCalisma+0x78e>
 8004876:	4b55      	ldr	r3, [pc, #340]	@ (80049cc <checkAktifCalisma+0x8c8>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	f083 0301 	eor.w	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <checkAktifCalisma+0x78e>
			timer2=millis;
 8004884:	4b52      	ldr	r3, [pc, #328]	@ (80049d0 <checkAktifCalisma+0x8cc>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a52      	ldr	r2, [pc, #328]	@ (80049d4 <checkAktifCalisma+0x8d0>)
 800488a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800488c:	4b4f      	ldr	r3, [pc, #316]	@ (80049cc <checkAktifCalisma+0x8c8>)
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004892:	4b4f      	ldr	r3, [pc, #316]	@ (80049d0 <checkAktifCalisma+0x8cc>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b4f      	ldr	r3, [pc, #316]	@ (80049d4 <checkAktifCalisma+0x8d0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	4a4e      	ldr	r2, [pc, #312]	@ (80049d8 <checkAktifCalisma+0x8d4>)
 800489e:	7812      	ldrb	r2, [r2, #0]
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d303      	bcc.n	80048ac <checkAktifCalisma+0x7a8>
 80048a4:	4b49      	ldr	r3, [pc, #292]	@ (80049cc <checkAktifCalisma+0x8c8>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10d      	bne.n	80048c8 <checkAktifCalisma+0x7c4>
 80048ac:	4b45      	ldr	r3, [pc, #276]	@ (80049c4 <checkAktifCalisma+0x8c0>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	f083 0301 	eor.w	r3, r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <checkAktifCalisma+0x7c4>
 80048ba:	4b43      	ldr	r3, [pc, #268]	@ (80049c8 <checkAktifCalisma+0x8c4>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	f083 0301 	eor.w	r3, r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80048c8:	2200      	movs	r2, #0
 80048ca:	2120      	movs	r1, #32
 80048cc:	483a      	ldr	r0, [pc, #232]	@ (80049b8 <checkAktifCalisma+0x8b4>)
 80048ce:	f005 f9fa 	bl	8009cc6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80048d2:	4b3a      	ldr	r3, [pc, #232]	@ (80049bc <checkAktifCalisma+0x8b8>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80048d8:	4b3c      	ldr	r3, [pc, #240]	@ (80049cc <checkAktifCalisma+0x8c8>)
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80048de:	4b3f      	ldr	r3, [pc, #252]	@ (80049dc <checkAktifCalisma+0x8d8>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 8088 	bne.w	80049f8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80048e8:	4b3d      	ldr	r3, [pc, #244]	@ (80049e0 <checkAktifCalisma+0x8dc>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d003      	beq.n	80048f8 <checkAktifCalisma+0x7f4>
 80048f0:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <checkAktifCalisma+0x8dc>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d17f      	bne.n	80049f8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80048f8:	4b32      	ldr	r3, [pc, #200]	@ (80049c4 <checkAktifCalisma+0x8c0>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d07b      	beq.n	80049f8 <checkAktifCalisma+0x8f4>
 8004900:	4b31      	ldr	r3, [pc, #196]	@ (80049c8 <checkAktifCalisma+0x8c4>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d077      	beq.n	80049f8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004908:	2140      	movs	r1, #64	@ 0x40
 800490a:	482b      	ldr	r0, [pc, #172]	@ (80049b8 <checkAktifCalisma+0x8b4>)
 800490c:	f005 f9c4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d170      	bne.n	80049f8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004916:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800491a:	4827      	ldr	r0, [pc, #156]	@ (80049b8 <checkAktifCalisma+0x8b4>)
 800491c:	f005 f9bc 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <checkAktifCalisma+0x82a>
 8004926:	4b2f      	ldr	r3, [pc, #188]	@ (80049e4 <checkAktifCalisma+0x8e0>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d164      	bne.n	80049f8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800492e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004932:	4823      	ldr	r0, [pc, #140]	@ (80049c0 <checkAktifCalisma+0x8bc>)
 8004934:	f005 f9b0 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d10f      	bne.n	800495e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800493e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004942:	481f      	ldr	r0, [pc, #124]	@ (80049c0 <checkAktifCalisma+0x8bc>)
 8004944:	f005 f9a8 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d107      	bne.n	800495e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800494e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004952:	481b      	ldr	r0, [pc, #108]	@ (80049c0 <checkAktifCalisma+0x8bc>)
 8004954:	f005 f9a0 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004958:	4603      	mov	r3, r0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d003      	beq.n	8004966 <checkAktifCalisma+0x862>
 800495e:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <checkAktifCalisma+0x8e4>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d048      	beq.n	80049f8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8004966:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <checkAktifCalisma+0x8e8>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	f083 0301 	eor.w	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d041      	beq.n	80049f8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8004974:	4b1e      	ldr	r3, [pc, #120]	@ (80049f0 <checkAktifCalisma+0x8ec>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f083 0301 	eor.w	r3, r3, #1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d03a      	beq.n	80049f8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8004982:	4b1c      	ldr	r3, [pc, #112]	@ (80049f4 <checkAktifCalisma+0x8f0>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	f083 0301 	eor.w	r3, r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d033      	beq.n	80049f8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8004990:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <checkAktifCalisma+0x8b8>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	f083 0301 	eor.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d02c      	beq.n	80049f8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800499e:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <checkAktifCalisma+0x8b0>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f083 0301 	eor.w	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d025      	beq.n	80049f8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80049ac:	4b0e      	ldr	r3, [pc, #56]	@ (80049e8 <checkAktifCalisma+0x8e4>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e024      	b.n	80049fe <checkAktifCalisma+0x8fa>
 80049b4:	20000f96 	.word	0x20000f96
 80049b8:	40011000 	.word	0x40011000
 80049bc:	20000f9a 	.word	0x20000f9a
 80049c0:	40010c00 	.word	0x40010c00
 80049c4:	20000fb2 	.word	0x20000fb2
 80049c8:	20000fb3 	.word	0x20000fb3
 80049cc:	20000f92 	.word	0x20000f92
 80049d0:	20000f38 	.word	0x20000f38
 80049d4:	20000f44 	.word	0x20000f44
 80049d8:	20000f76 	.word	0x20000f76
 80049dc:	20000f7d 	.word	0x20000f7d
 80049e0:	20000f6f 	.word	0x20000f6f
 80049e4:	20000f71 	.word	0x20000f71
 80049e8:	20000f97 	.word	0x20000f97
 80049ec:	20000f95 	.word	0x20000f95
 80049f0:	20000f99 	.word	0x20000f99
 80049f4:	20000f98 	.word	0x20000f98
		} else {
			devmotorasagicalisiyor=0;
 80049f8:	4b96      	ldr	r3, [pc, #600]	@ (8004c54 <checkAktifCalisma+0xb50>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80049fe:	4b95      	ldr	r3, [pc, #596]	@ (8004c54 <checkAktifCalisma+0xb50>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004a06:	2201      	movs	r2, #1
 8004a08:	2110      	movs	r1, #16
 8004a0a:	4893      	ldr	r0, [pc, #588]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004a0c:	f005 f95b 	bl	8009cc6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8004a10:	4b92      	ldr	r3, [pc, #584]	@ (8004c5c <checkAktifCalisma+0xb58>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004a16:	4b91      	ldr	r3, [pc, #580]	@ (8004c5c <checkAktifCalisma+0xb58>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d024      	beq.n	8004a68 <checkAktifCalisma+0x964>
 8004a1e:	2140      	movs	r1, #64	@ 0x40
 8004a20:	488d      	ldr	r0, [pc, #564]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004a22:	f005 f939 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d007      	beq.n	8004a3c <checkAktifCalisma+0x938>
 8004a2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a30:	4889      	ldr	r0, [pc, #548]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004a32:	f005 f931 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d115      	bne.n	8004a68 <checkAktifCalisma+0x964>
 8004a3c:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <checkAktifCalisma+0xb5c>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d011      	beq.n	8004a68 <checkAktifCalisma+0x964>
 8004a44:	4b87      	ldr	r3, [pc, #540]	@ (8004c64 <checkAktifCalisma+0xb60>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <checkAktifCalisma+0x964>
 8004a4c:	4b86      	ldr	r3, [pc, #536]	@ (8004c68 <checkAktifCalisma+0xb64>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f083 0301 	eor.w	r3, r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d006      	beq.n	8004a68 <checkAktifCalisma+0x964>
			timer2=millis;
 8004a5a:	4b84      	ldr	r3, [pc, #528]	@ (8004c6c <checkAktifCalisma+0xb68>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a84      	ldr	r2, [pc, #528]	@ (8004c70 <checkAktifCalisma+0xb6c>)
 8004a60:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8004a62:	4b81      	ldr	r3, [pc, #516]	@ (8004c68 <checkAktifCalisma+0xb64>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004a68:	4b80      	ldr	r3, [pc, #512]	@ (8004c6c <checkAktifCalisma+0xb68>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b80      	ldr	r3, [pc, #512]	@ (8004c70 <checkAktifCalisma+0xb6c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	4a80      	ldr	r2, [pc, #512]	@ (8004c74 <checkAktifCalisma+0xb70>)
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d303      	bcc.n	8004a82 <checkAktifCalisma+0x97e>
 8004a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c68 <checkAktifCalisma+0xb64>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <checkAktifCalisma+0x99a>
 8004a82:	4b77      	ldr	r3, [pc, #476]	@ (8004c60 <checkAktifCalisma+0xb5c>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	f083 0301 	eor.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <checkAktifCalisma+0x99a>
 8004a90:	4b74      	ldr	r3, [pc, #464]	@ (8004c64 <checkAktifCalisma+0xb60>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f083 0301 	eor.w	r3, r3, #1
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2110      	movs	r1, #16
 8004aa2:	486d      	ldr	r0, [pc, #436]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004aa4:	f005 f90f 	bl	8009cc6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8004aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8004c5c <checkAktifCalisma+0xb58>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8004aae:	4b6e      	ldr	r3, [pc, #440]	@ (8004c68 <checkAktifCalisma+0xb64>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004ab4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ab8:	486f      	ldr	r0, [pc, #444]	@ (8004c78 <checkAktifCalisma+0xb74>)
 8004aba:	f005 f8ed 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d120      	bne.n	8004b06 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004ac4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ac8:	486b      	ldr	r0, [pc, #428]	@ (8004c78 <checkAktifCalisma+0xb74>)
 8004aca:	f005 f8e5 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d118      	bne.n	8004b06 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	4868      	ldr	r0, [pc, #416]	@ (8004c78 <checkAktifCalisma+0xb74>)
 8004ad8:	f005 f8de 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d111      	bne.n	8004b06 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	4864      	ldr	r0, [pc, #400]	@ (8004c78 <checkAktifCalisma+0xb74>)
 8004ae6:	f005 f8d7 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004af0:	2101      	movs	r1, #1
 8004af2:	4861      	ldr	r0, [pc, #388]	@ (8004c78 <checkAktifCalisma+0xb74>)
 8004af4:	f005 f8d0 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <checkAktifCalisma+0xa02>
			makineStop=1;
 8004afe:	4b5f      	ldr	r3, [pc, #380]	@ (8004c7c <checkAktifCalisma+0xb78>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e002      	b.n	8004b0c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8004b06:	4b5d      	ldr	r3, [pc, #372]	@ (8004c7c <checkAktifCalisma+0xb78>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8004c80 <checkAktifCalisma+0xb7c>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d144      	bne.n	8004b9e <checkAktifCalisma+0xa9a>
 8004b14:	4b5b      	ldr	r3, [pc, #364]	@ (8004c84 <checkAktifCalisma+0xb80>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d003      	beq.n	8004b24 <checkAktifCalisma+0xa20>
 8004b1c:	4b59      	ldr	r3, [pc, #356]	@ (8004c84 <checkAktifCalisma+0xb80>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d13c      	bne.n	8004b9e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b24:	2180      	movs	r1, #128	@ 0x80
 8004b26:	484c      	ldr	r0, [pc, #304]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004b28:	f005 f8b6 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <checkAktifCalisma+0xa36>
 8004b32:	4b55      	ldr	r3, [pc, #340]	@ (8004c88 <checkAktifCalisma+0xb84>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <checkAktifCalisma+0xa4e>
 8004b3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b3e:	484e      	ldr	r0, [pc, #312]	@ (8004c78 <checkAktifCalisma+0xb74>)
 8004b40:	f005 f8aa 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d129      	bne.n	8004b9e <checkAktifCalisma+0xa9a>
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c88 <checkAktifCalisma+0xb84>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d125      	bne.n	8004b9e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b52:	2104      	movs	r1, #4
 8004b54:	4840      	ldr	r0, [pc, #256]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004b56:	f005 f89f 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d003      	beq.n	8004b68 <checkAktifCalisma+0xa64>
 8004b60:	4b4a      	ldr	r3, [pc, #296]	@ (8004c8c <checkAktifCalisma+0xb88>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11a      	bne.n	8004b9e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b68:	2102      	movs	r1, #2
 8004b6a:	483b      	ldr	r0, [pc, #236]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004b6c:	f005 f894 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d113      	bne.n	8004b9e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8004b76:	4b46      	ldr	r3, [pc, #280]	@ (8004c90 <checkAktifCalisma+0xb8c>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	f083 0301 	eor.w	r3, r3, #1
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00c      	beq.n	8004b9e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8004b84:	4b3d      	ldr	r3, [pc, #244]	@ (8004c7c <checkAktifCalisma+0xb78>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8004b8c:	4b41      	ldr	r3, [pc, #260]	@ (8004c94 <checkAktifCalisma+0xb90>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004b92:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <checkAktifCalisma+0xb68>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a40      	ldr	r2, [pc, #256]	@ (8004c98 <checkAktifCalisma+0xb94>)
 8004b98:	6013      	str	r3, [r2, #0]
			bekle();
 8004b9a:	f7ff f901 	bl	8003da0 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004b9e:	4b33      	ldr	r3, [pc, #204]	@ (8004c6c <checkAktifCalisma+0xb68>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8004c98 <checkAktifCalisma+0xb94>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8004c9c <checkAktifCalisma+0xb98>)
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d211      	bcs.n	8004bd4 <checkAktifCalisma+0xad0>
 8004bb0:	2104      	movs	r1, #4
 8004bb2:	4829      	ldr	r0, [pc, #164]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004bb4:	f005 f870 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <checkAktifCalisma+0xad0>
 8004bbe:	4b33      	ldr	r3, [pc, #204]	@ (8004c8c <checkAktifCalisma+0xb88>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <checkAktifCalisma+0xad0>
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <checkAktifCalisma+0xb78>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	f083 0301 	eor.w	r3, r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8004bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c94 <checkAktifCalisma+0xb90>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004bda:	4b29      	ldr	r3, [pc, #164]	@ (8004c80 <checkAktifCalisma+0xb7c>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d160      	bne.n	8004ca4 <checkAktifCalisma+0xba0>
 8004be2:	4b28      	ldr	r3, [pc, #160]	@ (8004c84 <checkAktifCalisma+0xb80>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d003      	beq.n	8004bf2 <checkAktifCalisma+0xaee>
 8004bea:	4b26      	ldr	r3, [pc, #152]	@ (8004c84 <checkAktifCalisma+0xb80>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d158      	bne.n	8004ca4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004bf2:	2104      	movs	r1, #4
 8004bf4:	4818      	ldr	r0, [pc, #96]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004bf6:	f005 f84f 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d003      	beq.n	8004c08 <checkAktifCalisma+0xb04>
 8004c00:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <checkAktifCalisma+0xb88>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d14d      	bne.n	8004ca4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4813      	ldr	r0, [pc, #76]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004c0c:	f005 f844 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d146      	bne.n	8004ca4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c16:	2180      	movs	r1, #128	@ 0x80
 8004c18:	480f      	ldr	r0, [pc, #60]	@ (8004c58 <checkAktifCalisma+0xb54>)
 8004c1a:	f005 f83d 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <checkAktifCalisma+0xb28>
 8004c24:	4b18      	ldr	r3, [pc, #96]	@ (8004c88 <checkAktifCalisma+0xb84>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00b      	beq.n	8004c44 <checkAktifCalisma+0xb40>
 8004c2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c30:	4811      	ldr	r0, [pc, #68]	@ (8004c78 <checkAktifCalisma+0xb74>)
 8004c32:	f005 f831 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d133      	bne.n	8004ca4 <checkAktifCalisma+0xba0>
 8004c3c:	4b12      	ldr	r3, [pc, #72]	@ (8004c88 <checkAktifCalisma+0xb84>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d12f      	bne.n	8004ca4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8004c44:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <checkAktifCalisma+0xb78>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02b      	beq.n	8004ca4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8004c4c:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <checkAktifCalisma+0xb9c>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	e02a      	b.n	8004caa <checkAktifCalisma+0xba6>
 8004c54:	20000f97 	.word	0x20000f97
 8004c58:	40011000 	.word	0x40011000
 8004c5c:	20000f9b 	.word	0x20000f9b
 8004c60:	20000fb2 	.word	0x20000fb2
 8004c64:	20000fb3 	.word	0x20000fb3
 8004c68:	20000f93 	.word	0x20000f93
 8004c6c:	20000f38 	.word	0x20000f38
 8004c70:	20000f44 	.word	0x20000f44
 8004c74:	20000f76 	.word	0x20000f76
 8004c78:	40010c00 	.word	0x40010c00
 8004c7c:	20000fa2 	.word	0x20000fa2
 8004c80:	20000f69 	.word	0x20000f69
 8004c84:	20000f68 	.word	0x20000f68
 8004c88:	20000f6c 	.word	0x20000f6c
 8004c8c:	20000f66 	.word	0x20000f66
 8004c90:	20000f8f 	.word	0x20000f8f
 8004c94:	20000fa3 	.word	0x20000fa3
 8004c98:	20000f3c 	.word	0x20000f3c
 8004c9c:	20000f79 	.word	0x20000f79
 8004ca0:	20000fa4 	.word	0x20000fa4
		} else {
			kapi1butonkontrol=0;
 8004ca4:	4b8b      	ldr	r3, [pc, #556]	@ (8004ed4 <checkAktifCalisma+0xdd0>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004caa:	4b8b      	ldr	r3, [pc, #556]	@ (8004ed8 <checkAktifCalisma+0xdd4>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d121      	bne.n	8004cf6 <checkAktifCalisma+0xbf2>
 8004cb2:	4b8a      	ldr	r3, [pc, #552]	@ (8004edc <checkAktifCalisma+0xdd8>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d003      	beq.n	8004cc2 <checkAktifCalisma+0xbbe>
 8004cba:	4b88      	ldr	r3, [pc, #544]	@ (8004edc <checkAktifCalisma+0xdd8>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d119      	bne.n	8004cf6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004cc2:	2104      	movs	r1, #4
 8004cc4:	4886      	ldr	r0, [pc, #536]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004cc6:	f004 ffe7 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d003      	beq.n	8004cd8 <checkAktifCalisma+0xbd4>
 8004cd0:	4b84      	ldr	r3, [pc, #528]	@ (8004ee4 <checkAktifCalisma+0xde0>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10e      	bne.n	8004cf6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004cd8:	2102      	movs	r1, #2
 8004cda:	4881      	ldr	r0, [pc, #516]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004cdc:	f004 ffdc 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d107      	bne.n	8004cf6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8004ce6:	4b80      	ldr	r3, [pc, #512]	@ (8004ee8 <checkAktifCalisma+0xde4>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8004cee:	4b7f      	ldr	r3, [pc, #508]	@ (8004eec <checkAktifCalisma+0xde8>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e002      	b.n	8004cfc <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8004cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8004eec <checkAktifCalisma+0xde8>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004cfc:	4b75      	ldr	r3, [pc, #468]	@ (8004ed4 <checkAktifCalisma+0xdd0>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <checkAktifCalisma+0xc10>
 8004d04:	4b79      	ldr	r3, [pc, #484]	@ (8004eec <checkAktifCalisma+0xde8>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <checkAktifCalisma+0xc10>
 8004d0c:	4b78      	ldr	r3, [pc, #480]	@ (8004ef0 <checkAktifCalisma+0xdec>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004d14:	2201      	movs	r2, #1
 8004d16:	2180      	movs	r1, #128	@ 0x80
 8004d18:	4876      	ldr	r0, [pc, #472]	@ (8004ef4 <checkAktifCalisma+0xdf0>)
 8004d1a:	f004 ffd4 	bl	8009cc6 <HAL_GPIO_WritePin>
 8004d1e:	e004      	b.n	8004d2a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004d20:	2200      	movs	r2, #0
 8004d22:	2180      	movs	r1, #128	@ 0x80
 8004d24:	4873      	ldr	r0, [pc, #460]	@ (8004ef4 <checkAktifCalisma+0xdf0>)
 8004d26:	f004 ffce 	bl	8009cc6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d2a:	4b73      	ldr	r3, [pc, #460]	@ (8004ef8 <checkAktifCalisma+0xdf4>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d141      	bne.n	8004db6 <checkAktifCalisma+0xcb2>
 8004d32:	4b6a      	ldr	r3, [pc, #424]	@ (8004edc <checkAktifCalisma+0xdd8>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d003      	beq.n	8004d42 <checkAktifCalisma+0xc3e>
 8004d3a:	4b68      	ldr	r3, [pc, #416]	@ (8004edc <checkAktifCalisma+0xdd8>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d139      	bne.n	8004db6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d46:	4866      	ldr	r0, [pc, #408]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004d48:	f004 ffa6 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <checkAktifCalisma+0xc56>
 8004d52:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <checkAktifCalisma+0xdf8>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <checkAktifCalisma+0xc6e>
 8004d5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d5e:	4868      	ldr	r0, [pc, #416]	@ (8004f00 <checkAktifCalisma+0xdfc>)
 8004d60:	f004 ff9a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d125      	bne.n	8004db6 <checkAktifCalisma+0xcb2>
 8004d6a:	4b64      	ldr	r3, [pc, #400]	@ (8004efc <checkAktifCalisma+0xdf8>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d121      	bne.n	8004db6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d72:	2102      	movs	r1, #2
 8004d74:	485a      	ldr	r0, [pc, #360]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004d76:	f004 ff8f 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d11a      	bne.n	8004db6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004d80:	2104      	movs	r1, #4
 8004d82:	4857      	ldr	r0, [pc, #348]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004d84:	f004 ff88 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d113      	bne.n	8004db6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8004d8e:	4b56      	ldr	r3, [pc, #344]	@ (8004ee8 <checkAktifCalisma+0xde4>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00f      	beq.n	8004db6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8004d96:	4b5b      	ldr	r3, [pc, #364]	@ (8004f04 <checkAktifCalisma+0xe00>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f083 0301 	eor.w	r3, r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8004da4:	4b58      	ldr	r3, [pc, #352]	@ (8004f08 <checkAktifCalisma+0xe04>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004daa:	4b58      	ldr	r3, [pc, #352]	@ (8004f0c <checkAktifCalisma+0xe08>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a58      	ldr	r2, [pc, #352]	@ (8004f10 <checkAktifCalisma+0xe0c>)
 8004db0:	6013      	str	r3, [r2, #0]
			bekle();
 8004db2:	f7fe fff5 	bl	8003da0 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004db6:	4b55      	ldr	r3, [pc, #340]	@ (8004f0c <checkAktifCalisma+0xe08>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b55      	ldr	r3, [pc, #340]	@ (8004f10 <checkAktifCalisma+0xe0c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	4a54      	ldr	r2, [pc, #336]	@ (8004f14 <checkAktifCalisma+0xe10>)
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d20d      	bcs.n	8004de4 <checkAktifCalisma+0xce0>
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4845      	ldr	r0, [pc, #276]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004dcc:	f004 ff64 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <checkAktifCalisma+0xce0>
 8004dd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ee8 <checkAktifCalisma+0xde4>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	f083 0301 	eor.w	r3, r3, #1
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8004de4:	4b48      	ldr	r3, [pc, #288]	@ (8004f08 <checkAktifCalisma+0xe04>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004dea:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <checkAktifCalisma+0xdf4>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d135      	bne.n	8004e5e <checkAktifCalisma+0xd5a>
 8004df2:	4b3a      	ldr	r3, [pc, #232]	@ (8004edc <checkAktifCalisma+0xdd8>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d003      	beq.n	8004e02 <checkAktifCalisma+0xcfe>
 8004dfa:	4b38      	ldr	r3, [pc, #224]	@ (8004edc <checkAktifCalisma+0xdd8>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d12d      	bne.n	8004e5e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e06:	4836      	ldr	r0, [pc, #216]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004e08:	f004 ff46 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <checkAktifCalisma+0xd16>
 8004e12:	4b3a      	ldr	r3, [pc, #232]	@ (8004efc <checkAktifCalisma+0xdf8>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <checkAktifCalisma+0xd2e>
 8004e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e1e:	4838      	ldr	r0, [pc, #224]	@ (8004f00 <checkAktifCalisma+0xdfc>)
 8004e20:	f004 ff3a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d119      	bne.n	8004e5e <checkAktifCalisma+0xd5a>
 8004e2a:	4b34      	ldr	r3, [pc, #208]	@ (8004efc <checkAktifCalisma+0xdf8>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d115      	bne.n	8004e5e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004e32:	2102      	movs	r1, #2
 8004e34:	482a      	ldr	r0, [pc, #168]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004e36:	f004 ff2f 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10e      	bne.n	8004e5e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004e40:	2104      	movs	r1, #4
 8004e42:	4827      	ldr	r0, [pc, #156]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004e44:	f004 ff28 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d107      	bne.n	8004e5e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8004e4e:	4b26      	ldr	r3, [pc, #152]	@ (8004ee8 <checkAktifCalisma+0xde4>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8004e56:	4b30      	ldr	r3, [pc, #192]	@ (8004f18 <checkAktifCalisma+0xe14>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	e002      	b.n	8004e64 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8004e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f18 <checkAktifCalisma+0xe14>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e64:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <checkAktifCalisma+0xdf4>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d11d      	bne.n	8004ea8 <checkAktifCalisma+0xda4>
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <checkAktifCalisma+0xdd8>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d003      	beq.n	8004e7c <checkAktifCalisma+0xd78>
 8004e74:	4b19      	ldr	r3, [pc, #100]	@ (8004edc <checkAktifCalisma+0xdd8>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d115      	bne.n	8004ea8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4818      	ldr	r0, [pc, #96]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004e80:	f004 ff0a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10e      	bne.n	8004ea8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004e8a:	2104      	movs	r1, #4
 8004e8c:	4814      	ldr	r0, [pc, #80]	@ (8004ee0 <checkAktifCalisma+0xddc>)
 8004e8e:	f004 ff03 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8004e98:	4b13      	ldr	r3, [pc, #76]	@ (8004ee8 <checkAktifCalisma+0xde4>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f1c <checkAktifCalisma+0xe18>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	e002      	b.n	8004eae <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8004ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f1c <checkAktifCalisma+0xe18>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004eae:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <checkAktifCalisma+0xe14>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d107      	bne.n	8004ec6 <checkAktifCalisma+0xdc2>
 8004eb6:	4b19      	ldr	r3, [pc, #100]	@ (8004f1c <checkAktifCalisma+0xe18>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <checkAktifCalisma+0xdc2>
 8004ebe:	4b12      	ldr	r3, [pc, #72]	@ (8004f08 <checkAktifCalisma+0xe04>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d02c      	beq.n	8004f20 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	2140      	movs	r1, #64	@ 0x40
 8004eca:	480a      	ldr	r0, [pc, #40]	@ (8004ef4 <checkAktifCalisma+0xdf0>)
 8004ecc:	f004 fefb 	bl	8009cc6 <HAL_GPIO_WritePin>
 8004ed0:	e02b      	b.n	8004f2a <checkAktifCalisma+0xe26>
 8004ed2:	bf00      	nop
 8004ed4:	20000fa4 	.word	0x20000fa4
 8004ed8:	20000f69 	.word	0x20000f69
 8004edc:	20000f68 	.word	0x20000f68
 8004ee0:	40011000 	.word	0x40011000
 8004ee4:	20000f66 	.word	0x20000f66
 8004ee8:	20000fa2 	.word	0x20000fa2
 8004eec:	20000fa5 	.word	0x20000fa5
 8004ef0:	20000fa3 	.word	0x20000fa3
 8004ef4:	40010800 	.word	0x40010800
 8004ef8:	20000f6a 	.word	0x20000f6a
 8004efc:	20000f6c 	.word	0x20000f6c
 8004f00:	40010c00 	.word	0x40010c00
 8004f04:	20000f8f 	.word	0x20000f8f
 8004f08:	20000fa6 	.word	0x20000fa6
 8004f0c:	20000f38 	.word	0x20000f38
 8004f10:	20000f3c 	.word	0x20000f3c
 8004f14:	20000f7a 	.word	0x20000f7a
 8004f18:	20000fa7 	.word	0x20000fa7
 8004f1c:	20000fa8 	.word	0x20000fa8
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004f20:	2200      	movs	r2, #0
 8004f22:	2140      	movs	r1, #64	@ 0x40
 8004f24:	488d      	ldr	r0, [pc, #564]	@ (800515c <checkAktifCalisma+0x1058>)
 8004f26:	f004 fece 	bl	8009cc6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8004f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005160 <checkAktifCalisma+0x105c>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <checkAktifCalisma+0xe36>
 8004f32:	4b8b      	ldr	r3, [pc, #556]	@ (8005160 <checkAktifCalisma+0x105c>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d115      	bne.n	8004f66 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	4889      	ldr	r0, [pc, #548]	@ (8005164 <checkAktifCalisma+0x1060>)
 8004f3e:	f004 feab 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d003      	beq.n	8004f50 <checkAktifCalisma+0xe4c>
 8004f48:	4b87      	ldr	r3, [pc, #540]	@ (8005168 <checkAktifCalisma+0x1064>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004f50:	2102      	movs	r1, #2
 8004f52:	4884      	ldr	r0, [pc, #528]	@ (8005164 <checkAktifCalisma+0x1060>)
 8004f54:	f004 fea0 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8004f5e:	4b83      	ldr	r3, [pc, #524]	@ (800516c <checkAktifCalisma+0x1068>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	e002      	b.n	8004f6c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8004f66:	4b81      	ldr	r3, [pc, #516]	@ (800516c <checkAktifCalisma+0x1068>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004f6c:	4b7c      	ldr	r3, [pc, #496]	@ (8005160 <checkAktifCalisma+0x105c>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d003      	beq.n	8004f7c <checkAktifCalisma+0xe78>
 8004f74:	4b7a      	ldr	r3, [pc, #488]	@ (8005160 <checkAktifCalisma+0x105c>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d111      	bne.n	8004fa0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4879      	ldr	r0, [pc, #484]	@ (8005164 <checkAktifCalisma+0x1060>)
 8004f80:	f004 fe8a 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d10a      	bne.n	8004fa0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	4875      	ldr	r0, [pc, #468]	@ (8005164 <checkAktifCalisma+0x1060>)
 8004f8e:	f004 fe83 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d103      	bne.n	8004fa0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8004f98:	4b75      	ldr	r3, [pc, #468]	@ (8005170 <checkAktifCalisma+0x106c>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e002      	b.n	8004fa6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8004fa0:	4b73      	ldr	r3, [pc, #460]	@ (8005170 <checkAktifCalisma+0x106c>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8004fa6:	4b71      	ldr	r3, [pc, #452]	@ (800516c <checkAktifCalisma+0x1068>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00f      	beq.n	8004fce <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8004fae:	4b71      	ldr	r3, [pc, #452]	@ (8005174 <checkAktifCalisma+0x1070>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d10b      	bne.n	8004fce <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004fb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fba:	486f      	ldr	r0, [pc, #444]	@ (8005178 <checkAktifCalisma+0x1074>)
 8004fbc:	f004 fe6c 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8004fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800517c <checkAktifCalisma+0x1078>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e002      	b.n	8004fd4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8004fce:	4b6b      	ldr	r3, [pc, #428]	@ (800517c <checkAktifCalisma+0x1078>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8004fd4:	4b66      	ldr	r3, [pc, #408]	@ (8005170 <checkAktifCalisma+0x106c>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00f      	beq.n	8004ffc <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8004fdc:	4b65      	ldr	r3, [pc, #404]	@ (8005174 <checkAktifCalisma+0x1070>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d10b      	bne.n	8004ffc <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004fe4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fe8:	4863      	ldr	r0, [pc, #396]	@ (8005178 <checkAktifCalisma+0x1074>)
 8004fea:	f004 fe55 	bl	8009c98 <HAL_GPIO_ReadPin>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d103      	bne.n	8004ffc <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8004ff4:	4b62      	ldr	r3, [pc, #392]	@ (8005180 <checkAktifCalisma+0x107c>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e002      	b.n	8005002 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8004ffc:	4b60      	ldr	r3, [pc, #384]	@ (8005180 <checkAktifCalisma+0x107c>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005002:	4b60      	ldr	r3, [pc, #384]	@ (8005184 <checkAktifCalisma+0x1080>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d137      	bne.n	800507a <checkAktifCalisma+0xf76>
 800500a:	4b5f      	ldr	r3, [pc, #380]	@ (8005188 <checkAktifCalisma+0x1084>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d003      	beq.n	800501a <checkAktifCalisma+0xf16>
 8005012:	4b5d      	ldr	r3, [pc, #372]	@ (8005188 <checkAktifCalisma+0x1084>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d12f      	bne.n	800507a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800501a:	4b54      	ldr	r3, [pc, #336]	@ (800516c <checkAktifCalisma+0x1068>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <checkAktifCalisma+0xf26>
 8005022:	4b53      	ldr	r3, [pc, #332]	@ (8005170 <checkAktifCalisma+0x106c>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d027      	beq.n	800507a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800502a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800502e:	484d      	ldr	r0, [pc, #308]	@ (8005164 <checkAktifCalisma+0x1060>)
 8005030:	f004 fe32 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <checkAktifCalisma+0xf3e>
 800503a:	4b4e      	ldr	r3, [pc, #312]	@ (8005174 <checkAktifCalisma+0x1070>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005042:	4b4e      	ldr	r3, [pc, #312]	@ (800517c <checkAktifCalisma+0x1078>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <checkAktifCalisma+0xf4e>
 800504a:	4b4d      	ldr	r3, [pc, #308]	@ (8005180 <checkAktifCalisma+0x107c>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d013      	beq.n	800507a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005052:	4b4e      	ldr	r3, [pc, #312]	@ (800518c <checkAktifCalisma+0x1088>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00f      	beq.n	800507a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800505a:	4b4d      	ldr	r3, [pc, #308]	@ (8005190 <checkAktifCalisma+0x108c>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	f083 0301 	eor.w	r3, r3, #1
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005068:	4b4a      	ldr	r3, [pc, #296]	@ (8005194 <checkAktifCalisma+0x1090>)
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800506e:	4b4a      	ldr	r3, [pc, #296]	@ (8005198 <checkAktifCalisma+0x1094>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a4a      	ldr	r2, [pc, #296]	@ (800519c <checkAktifCalisma+0x1098>)
 8005074:	6013      	str	r3, [r2, #0]
			bekle();
 8005076:	f7fe fe93 	bl	8003da0 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800507a:	4b47      	ldr	r3, [pc, #284]	@ (8005198 <checkAktifCalisma+0x1094>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b47      	ldr	r3, [pc, #284]	@ (800519c <checkAktifCalisma+0x1098>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	4a46      	ldr	r2, [pc, #280]	@ (80051a0 <checkAktifCalisma+0x109c>)
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	4293      	cmp	r3, r2
 800508a:	d214      	bcs.n	80050b6 <checkAktifCalisma+0xfb2>
 800508c:	4b37      	ldr	r3, [pc, #220]	@ (800516c <checkAktifCalisma+0x1068>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f083 0301 	eor.w	r3, r3, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <checkAktifCalisma+0xfa4>
 800509a:	4b35      	ldr	r3, [pc, #212]	@ (8005170 <checkAktifCalisma+0x106c>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f083 0301 	eor.w	r3, r3, #1
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <checkAktifCalisma+0xfb2>
 80050a8:	4b38      	ldr	r3, [pc, #224]	@ (800518c <checkAktifCalisma+0x1088>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f083 0301 	eor.w	r3, r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80050b6:	4b37      	ldr	r3, [pc, #220]	@ (8005194 <checkAktifCalisma+0x1090>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80050bc:	4b31      	ldr	r3, [pc, #196]	@ (8005184 <checkAktifCalisma+0x1080>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d12b      	bne.n	800511c <checkAktifCalisma+0x1018>
 80050c4:	4b30      	ldr	r3, [pc, #192]	@ (8005188 <checkAktifCalisma+0x1084>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d003      	beq.n	80050d4 <checkAktifCalisma+0xfd0>
 80050cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005188 <checkAktifCalisma+0x1084>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d123      	bne.n	800511c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80050d4:	4b25      	ldr	r3, [pc, #148]	@ (800516c <checkAktifCalisma+0x1068>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d103      	bne.n	80050e4 <checkAktifCalisma+0xfe0>
 80050dc:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <checkAktifCalisma+0x106c>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01b      	beq.n	800511c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80050e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050e8:	481e      	ldr	r0, [pc, #120]	@ (8005164 <checkAktifCalisma+0x1060>)
 80050ea:	f004 fdd5 	bl	8009c98 <HAL_GPIO_ReadPin>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <checkAktifCalisma+0xff8>
 80050f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005174 <checkAktifCalisma+0x1070>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80050fc:	4b1f      	ldr	r3, [pc, #124]	@ (800517c <checkAktifCalisma+0x1078>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d103      	bne.n	800510c <checkAktifCalisma+0x1008>
 8005104:	4b1e      	ldr	r3, [pc, #120]	@ (8005180 <checkAktifCalisma+0x107c>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800510c:	4b1f      	ldr	r3, [pc, #124]	@ (800518c <checkAktifCalisma+0x1088>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005114:	4b23      	ldr	r3, [pc, #140]	@ (80051a4 <checkAktifCalisma+0x10a0>)
 8005116:	2201      	movs	r2, #1
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e002      	b.n	8005122 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800511c:	4b21      	ldr	r3, [pc, #132]	@ (80051a4 <checkAktifCalisma+0x10a0>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005122:	4b18      	ldr	r3, [pc, #96]	@ (8005184 <checkAktifCalisma+0x1080>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d140      	bne.n	80051ac <checkAktifCalisma+0x10a8>
 800512a:	4b17      	ldr	r3, [pc, #92]	@ (8005188 <checkAktifCalisma+0x1084>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d003      	beq.n	800513a <checkAktifCalisma+0x1036>
 8005132:	4b15      	ldr	r3, [pc, #84]	@ (8005188 <checkAktifCalisma+0x1084>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b03      	cmp	r3, #3
 8005138:	d138      	bne.n	80051ac <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800513a:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <checkAktifCalisma+0x1068>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <checkAktifCalisma+0x1046>
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <checkAktifCalisma+0x106c>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d030      	beq.n	80051ac <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800514a:	4b10      	ldr	r3, [pc, #64]	@ (800518c <checkAktifCalisma+0x1088>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d02c      	beq.n	80051ac <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005152:	4b15      	ldr	r3, [pc, #84]	@ (80051a8 <checkAktifCalisma+0x10a4>)
 8005154:	2201      	movs	r2, #1
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	e02b      	b.n	80051b2 <checkAktifCalisma+0x10ae>
 800515a:	bf00      	nop
 800515c:	40010800 	.word	0x40010800
 8005160:	20000f6d 	.word	0x20000f6d
 8005164:	40011000 	.word	0x40011000
 8005168:	20000f66 	.word	0x20000f66
 800516c:	20000fac 	.word	0x20000fac
 8005170:	20000fad 	.word	0x20000fad
 8005174:	20000f6c 	.word	0x20000f6c
 8005178:	40010c00 	.word	0x40010c00
 800517c:	20000fbc 	.word	0x20000fbc
 8005180:	20000fbd 	.word	0x20000fbd
 8005184:	20000f6b 	.word	0x20000f6b
 8005188:	20000f68 	.word	0x20000f68
 800518c:	20000fa2 	.word	0x20000fa2
 8005190:	20000f8f 	.word	0x20000f8f
 8005194:	20000fa9 	.word	0x20000fa9
 8005198:	20000f38 	.word	0x20000f38
 800519c:	20000f3c 	.word	0x20000f3c
 80051a0:	20000f7b 	.word	0x20000f7b
 80051a4:	20000faa 	.word	0x20000faa
 80051a8:	20000fab 	.word	0x20000fab
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80051ac:	4b8b      	ldr	r3, [pc, #556]	@ (80053dc <checkAktifCalisma+0x12d8>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80051b2:	4b8b      	ldr	r3, [pc, #556]	@ (80053e0 <checkAktifCalisma+0x12dc>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d107      	bne.n	80051ca <checkAktifCalisma+0x10c6>
 80051ba:	4b8a      	ldr	r3, [pc, #552]	@ (80053e4 <checkAktifCalisma+0x12e0>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <checkAktifCalisma+0x10c6>
 80051c2:	4b86      	ldr	r3, [pc, #536]	@ (80053dc <checkAktifCalisma+0x12d8>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80051ca:	2201      	movs	r2, #1
 80051cc:	2120      	movs	r1, #32
 80051ce:	4886      	ldr	r0, [pc, #536]	@ (80053e8 <checkAktifCalisma+0x12e4>)
 80051d0:	f004 fd79 	bl	8009cc6 <HAL_GPIO_WritePin>
 80051d4:	e004      	b.n	80051e0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80051d6:	2200      	movs	r2, #0
 80051d8:	2120      	movs	r1, #32
 80051da:	4883      	ldr	r0, [pc, #524]	@ (80053e8 <checkAktifCalisma+0x12e4>)
 80051dc:	f004 fd73 	bl	8009cc6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80051e0:	4b82      	ldr	r3, [pc, #520]	@ (80053ec <checkAktifCalisma+0x12e8>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00e      	beq.n	8005206 <checkAktifCalisma+0x1102>
 80051e8:	2102      	movs	r1, #2
 80051ea:	4881      	ldr	r0, [pc, #516]	@ (80053f0 <checkAktifCalisma+0x12ec>)
 80051ec:	f004 fd54 	bl	8009c98 <HAL_GPIO_ReadPin>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d107      	bne.n	8005206 <checkAktifCalisma+0x1102>
 80051f6:	4b7f      	ldr	r3, [pc, #508]	@ (80053f4 <checkAktifCalisma+0x12f0>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <checkAktifCalisma+0x1102>
 80051fe:	4b7e      	ldr	r3, [pc, #504]	@ (80053f8 <checkAktifCalisma+0x12f4>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d112      	bne.n	800522c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005206:	4b7d      	ldr	r3, [pc, #500]	@ (80053fc <checkAktifCalisma+0x12f8>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d066      	beq.n	80052dc <checkAktifCalisma+0x11d8>
 800520e:	2104      	movs	r1, #4
 8005210:	4877      	ldr	r0, [pc, #476]	@ (80053f0 <checkAktifCalisma+0x12ec>)
 8005212:	f004 fd41 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005216:	4603      	mov	r3, r0
 8005218:	2b01      	cmp	r3, #1
 800521a:	d15f      	bne.n	80052dc <checkAktifCalisma+0x11d8>
 800521c:	4b75      	ldr	r3, [pc, #468]	@ (80053f4 <checkAktifCalisma+0x12f0>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d05b      	beq.n	80052dc <checkAktifCalisma+0x11d8>
 8005224:	4b74      	ldr	r3, [pc, #464]	@ (80053f8 <checkAktifCalisma+0x12f4>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d057      	beq.n	80052dc <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800522c:	4b74      	ldr	r3, [pc, #464]	@ (8005400 <checkAktifCalisma+0x12fc>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	b2da      	uxtb	r2, r3
 8005234:	4b72      	ldr	r3, [pc, #456]	@ (8005400 <checkAktifCalisma+0x12fc>)
 8005236:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005238:	4b71      	ldr	r3, [pc, #452]	@ (8005400 <checkAktifCalisma+0x12fc>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b09      	cmp	r3, #9
 800523e:	d908      	bls.n	8005252 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005240:	4b6f      	ldr	r3, [pc, #444]	@ (8005400 <checkAktifCalisma+0x12fc>)
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005246:	4b6f      	ldr	r3, [pc, #444]	@ (8005404 <checkAktifCalisma+0x1300>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	4b6d      	ldr	r3, [pc, #436]	@ (8005404 <checkAktifCalisma+0x1300>)
 8005250:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005252:	4b6c      	ldr	r3, [pc, #432]	@ (8005404 <checkAktifCalisma+0x1300>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b09      	cmp	r3, #9
 8005258:	d908      	bls.n	800526c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800525a:	4b6a      	ldr	r3, [pc, #424]	@ (8005404 <checkAktifCalisma+0x1300>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005260:	4b69      	ldr	r3, [pc, #420]	@ (8005408 <checkAktifCalisma+0x1304>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	b2da      	uxtb	r2, r3
 8005268:	4b67      	ldr	r3, [pc, #412]	@ (8005408 <checkAktifCalisma+0x1304>)
 800526a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 800526c:	4b66      	ldr	r3, [pc, #408]	@ (8005408 <checkAktifCalisma+0x1304>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b09      	cmp	r3, #9
 8005272:	d908      	bls.n	8005286 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005274:	4b64      	ldr	r3, [pc, #400]	@ (8005408 <checkAktifCalisma+0x1304>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800527a:	4b64      	ldr	r3, [pc, #400]	@ (800540c <checkAktifCalisma+0x1308>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	3301      	adds	r3, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	4b62      	ldr	r3, [pc, #392]	@ (800540c <checkAktifCalisma+0x1308>)
 8005284:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005286:	4b61      	ldr	r3, [pc, #388]	@ (800540c <checkAktifCalisma+0x1308>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b09      	cmp	r3, #9
 800528c:	d908      	bls.n	80052a0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800528e:	4b5f      	ldr	r3, [pc, #380]	@ (800540c <checkAktifCalisma+0x1308>)
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005294:	4b5e      	ldr	r3, [pc, #376]	@ (8005410 <checkAktifCalisma+0x130c>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	3301      	adds	r3, #1
 800529a:	b2da      	uxtb	r2, r3
 800529c:	4b5c      	ldr	r3, [pc, #368]	@ (8005410 <checkAktifCalisma+0x130c>)
 800529e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80052a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005410 <checkAktifCalisma+0x130c>)
 80052a2:	781a      	ldrb	r2, [r3, #0]
 80052a4:	4b5b      	ldr	r3, [pc, #364]	@ (8005414 <checkAktifCalisma+0x1310>)
 80052a6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80052aa:	4b58      	ldr	r3, [pc, #352]	@ (800540c <checkAktifCalisma+0x1308>)
 80052ac:	781a      	ldrb	r2, [r3, #0]
 80052ae:	4b59      	ldr	r3, [pc, #356]	@ (8005414 <checkAktifCalisma+0x1310>)
 80052b0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80052b2:	4b55      	ldr	r3, [pc, #340]	@ (8005408 <checkAktifCalisma+0x1304>)
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	4b57      	ldr	r3, [pc, #348]	@ (8005414 <checkAktifCalisma+0x1310>)
 80052b8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80052ba:	4b52      	ldr	r3, [pc, #328]	@ (8005404 <checkAktifCalisma+0x1300>)
 80052bc:	781a      	ldrb	r2, [r3, #0]
 80052be:	4b55      	ldr	r3, [pc, #340]	@ (8005414 <checkAktifCalisma+0x1310>)
 80052c0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80052c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005400 <checkAktifCalisma+0x12fc>)
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <checkAktifCalisma+0x1310>)
 80052c8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80052ca:	4b53      	ldr	r3, [pc, #332]	@ (8005418 <checkAktifCalisma+0x1314>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80052d0:	4b46      	ldr	r3, [pc, #280]	@ (80053ec <checkAktifCalisma+0x12e8>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80052d6:	4b49      	ldr	r3, [pc, #292]	@ (80053fc <checkAktifCalisma+0x12f8>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80052dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052e0:	484e      	ldr	r0, [pc, #312]	@ (800541c <checkAktifCalisma+0x1318>)
 80052e2:	f004 fcd9 	bl	8009c98 <HAL_GPIO_ReadPin>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d016      	beq.n	800531a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80052ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052f0:	484a      	ldr	r0, [pc, #296]	@ (800541c <checkAktifCalisma+0x1318>)
 80052f2:	f004 fcd1 	bl	8009c98 <HAL_GPIO_ReadPin>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80052fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005300:	4846      	ldr	r0, [pc, #280]	@ (800541c <checkAktifCalisma+0x1318>)
 8005302:	f004 fcc9 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d006      	beq.n	800531a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800530c:	2140      	movs	r1, #64	@ 0x40
 800530e:	4838      	ldr	r0, [pc, #224]	@ (80053f0 <checkAktifCalisma+0x12ec>)
 8005310:	f004 fcc2 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <checkAktifCalisma+0x121e>
			startBasili=1;
 800531a:	4b41      	ldr	r3, [pc, #260]	@ (8005420 <checkAktifCalisma+0x131c>)
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e002      	b.n	8005328 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005322:	4b3f      	ldr	r3, [pc, #252]	@ (8005420 <checkAktifCalisma+0x131c>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005328:	4b3d      	ldr	r3, [pc, #244]	@ (8005420 <checkAktifCalisma+0x131c>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d016      	beq.n	800535e <checkAktifCalisma+0x125a>
 8005330:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005334:	4839      	ldr	r0, [pc, #228]	@ (800541c <checkAktifCalisma+0x1318>)
 8005336:	f004 fcaf 	bl	8009c98 <HAL_GPIO_ReadPin>
 800533a:	4603      	mov	r3, r0
 800533c:	2b01      	cmp	r3, #1
 800533e:	d10e      	bne.n	800535e <checkAktifCalisma+0x125a>
			hataVar=1;
 8005340:	4b38      	ldr	r3, [pc, #224]	@ (8005424 <checkAktifCalisma+0x1320>)
 8005342:	2201      	movs	r2, #1
 8005344:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005346:	2001      	movs	r0, #1
 8005348:	f7fb fb74 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(1);
 800534c:	2001      	movs	r0, #1
 800534e:	f7fb fb19 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005352:	f002 ff59 	bl	8008208 <convertAndSendData>
			acilstophatasi=1;
 8005356:	4b34      	ldr	r3, [pc, #208]	@ (8005428 <checkAktifCalisma+0x1324>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	e018      	b.n	8005390 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800535e:	4b32      	ldr	r3, [pc, #200]	@ (8005428 <checkAktifCalisma+0x1324>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d014      	beq.n	8005390 <checkAktifCalisma+0x128c>
 8005366:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800536a:	482c      	ldr	r0, [pc, #176]	@ (800541c <checkAktifCalisma+0x1318>)
 800536c:	f004 fc94 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10c      	bne.n	8005390 <checkAktifCalisma+0x128c>
 8005376:	4b2a      	ldr	r3, [pc, #168]	@ (8005420 <checkAktifCalisma+0x131c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	f083 0301 	eor.w	r3, r3, #1
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005384:	4b28      	ldr	r3, [pc, #160]	@ (8005428 <checkAktifCalisma+0x1324>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800538a:	2001      	movs	r0, #1
 800538c:	f7fe fcb4 	bl	8003cf8 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005390:	4b26      	ldr	r3, [pc, #152]	@ (800542c <checkAktifCalisma+0x1328>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f083 0301 	eor.w	r3, r3, #1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d04e      	beq.n	800543c <checkAktifCalisma+0x1338>
 800539e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80053a2:	481e      	ldr	r0, [pc, #120]	@ (800541c <checkAktifCalisma+0x1318>)
 80053a4:	f004 fc78 	bl	8009c98 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <checkAktifCalisma+0x12b2>
 80053ae:	4b20      	ldr	r3, [pc, #128]	@ (8005430 <checkAktifCalisma+0x132c>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d042      	beq.n	800543c <checkAktifCalisma+0x1338>
 80053b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005434 <checkAktifCalisma+0x1330>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d13e      	bne.n	800543c <checkAktifCalisma+0x1338>
			hataVar=1;
 80053be:	4b19      	ldr	r3, [pc, #100]	@ (8005424 <checkAktifCalisma+0x1320>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80053c4:	2002      	movs	r0, #2
 80053c6:	f7fb fb35 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80053ca:	2002      	movs	r0, #2
 80053cc:	f7fb fada 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80053d0:	f002 ff1a 	bl	8008208 <convertAndSendData>
			emniyetCercevesihatasi=1;
 80053d4:	4b18      	ldr	r3, [pc, #96]	@ (8005438 <checkAktifCalisma+0x1334>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e047      	b.n	800546c <checkAktifCalisma+0x1368>
 80053dc:	20000fab 	.word	0x20000fab
 80053e0:	20000faa 	.word	0x20000faa
 80053e4:	20000fa9 	.word	0x20000fa9
 80053e8:	40010800 	.word	0x40010800
 80053ec:	20000f9f 	.word	0x20000f9f
 80053f0:	40011000 	.word	0x40011000
 80053f4:	20000f66 	.word	0x20000f66
 80053f8:	20000fa2 	.word	0x20000fa2
 80053fc:	20000fa0 	.word	0x20000fa0
 8005400:	20000f5d 	.word	0x20000f5d
 8005404:	20000f5e 	.word	0x20000f5e
 8005408:	20000000 	.word	0x20000000
 800540c:	20000001 	.word	0x20000001
 8005410:	20000f5f 	.word	0x20000f5f
 8005414:	20000e88 	.word	0x20000e88
 8005418:	20000f8c 	.word	0x20000f8c
 800541c:	40010c00 	.word	0x40010c00
 8005420:	20000fae 	.word	0x20000fae
 8005424:	20000fb5 	.word	0x20000fb5
 8005428:	20000fb0 	.word	0x20000fb0
 800542c:	20000fb7 	.word	0x20000fb7
 8005430:	20000fc1 	.word	0x20000fc1
 8005434:	20000f64 	.word	0x20000f64
 8005438:	20000fb1 	.word	0x20000fb1
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800543c:	4b9b      	ldr	r3, [pc, #620]	@ (80056ac <checkAktifCalisma+0x15a8>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d013      	beq.n	800546c <checkAktifCalisma+0x1368>
 8005444:	4b9a      	ldr	r3, [pc, #616]	@ (80056b0 <checkAktifCalisma+0x15ac>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00f      	beq.n	800546c <checkAktifCalisma+0x1368>
 800544c:	4b99      	ldr	r3, [pc, #612]	@ (80056b4 <checkAktifCalisma+0x15b0>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	f083 0301 	eor.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800545a:	4b94      	ldr	r3, [pc, #592]	@ (80056ac <checkAktifCalisma+0x15a8>)
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005460:	4b95      	ldr	r3, [pc, #596]	@ (80056b8 <checkAktifCalisma+0x15b4>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005466:	2002      	movs	r0, #2
 8005468:	f7fe fc46 	bl	8003cf8 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800546c:	4b93      	ldr	r3, [pc, #588]	@ (80056bc <checkAktifCalisma+0x15b8>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d11e      	bne.n	80054b2 <checkAktifCalisma+0x13ae>
 8005474:	4b92      	ldr	r3, [pc, #584]	@ (80056c0 <checkAktifCalisma+0x15bc>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d11a      	bne.n	80054b2 <checkAktifCalisma+0x13ae>
 800547c:	4b91      	ldr	r3, [pc, #580]	@ (80056c4 <checkAktifCalisma+0x15c0>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d016      	beq.n	80054b2 <checkAktifCalisma+0x13ae>
 8005484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005488:	488f      	ldr	r0, [pc, #572]	@ (80056c8 <checkAktifCalisma+0x15c4>)
 800548a:	f004 fc05 	bl	8009c98 <HAL_GPIO_ReadPin>
 800548e:	4603      	mov	r3, r0
 8005490:	2b01      	cmp	r3, #1
 8005492:	d10e      	bne.n	80054b2 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005494:	4b8d      	ldr	r3, [pc, #564]	@ (80056cc <checkAktifCalisma+0x15c8>)
 8005496:	2201      	movs	r2, #1
 8005498:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800549a:	2003      	movs	r0, #3
 800549c:	f7fb faca 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80054a0:	2003      	movs	r0, #3
 80054a2:	f7fb fa6f 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80054a6:	f002 feaf 	bl	8008208 <convertAndSendData>
			basinchatasi=1;
 80054aa:	4b89      	ldr	r3, [pc, #548]	@ (80056d0 <checkAktifCalisma+0x15cc>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	e015      	b.n	80054de <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80054b2:	4b87      	ldr	r3, [pc, #540]	@ (80056d0 <checkAktifCalisma+0x15cc>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d011      	beq.n	80054de <checkAktifCalisma+0x13da>
 80054ba:	4b80      	ldr	r3, [pc, #512]	@ (80056bc <checkAktifCalisma+0x15b8>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10d      	bne.n	80054de <checkAktifCalisma+0x13da>
 80054c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054c6:	4883      	ldr	r0, [pc, #524]	@ (80056d4 <checkAktifCalisma+0x15d0>)
 80054c8:	f004 fbe6 	bl	8009c98 <HAL_GPIO_ReadPin>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d105      	bne.n	80054de <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80054d2:	4b7f      	ldr	r3, [pc, #508]	@ (80056d0 <checkAktifCalisma+0x15cc>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80054d8:	2003      	movs	r0, #3
 80054da:	f7fe fc0d 	bl	8003cf8 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80054de:	4b7e      	ldr	r3, [pc, #504]	@ (80056d8 <checkAktifCalisma+0x15d4>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <checkAktifCalisma+0x13ea>
 80054e6:	4b7d      	ldr	r3, [pc, #500]	@ (80056dc <checkAktifCalisma+0x15d8>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01e      	beq.n	800552c <checkAktifCalisma+0x1428>
 80054ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054f2:	487b      	ldr	r0, [pc, #492]	@ (80056e0 <checkAktifCalisma+0x15dc>)
 80054f4:	f004 fbd0 	bl	8009c98 <HAL_GPIO_ReadPin>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d116      	bne.n	800552c <checkAktifCalisma+0x1428>
 80054fe:	4b79      	ldr	r3, [pc, #484]	@ (80056e4 <checkAktifCalisma+0x15e0>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d003      	beq.n	800550e <checkAktifCalisma+0x140a>
 8005506:	4b77      	ldr	r3, [pc, #476]	@ (80056e4 <checkAktifCalisma+0x15e0>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d10e      	bne.n	800552c <checkAktifCalisma+0x1428>
			hataVar=1;
 800550e:	4b6f      	ldr	r3, [pc, #444]	@ (80056cc <checkAktifCalisma+0x15c8>)
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005514:	2004      	movs	r0, #4
 8005516:	f7fb fa8d 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800551a:	2004      	movs	r0, #4
 800551c:	f7fb fa32 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005520:	f002 fe72 	bl	8008208 <convertAndSendData>
			katkapisivicihatasi=1;
 8005524:	4b70      	ldr	r3, [pc, #448]	@ (80056e8 <checkAktifCalisma+0x15e4>)
 8005526:	2201      	movs	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e01f      	b.n	800556c <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800552c:	4b6e      	ldr	r3, [pc, #440]	@ (80056e8 <checkAktifCalisma+0x15e4>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <checkAktifCalisma+0x1468>
 8005534:	4b6d      	ldr	r3, [pc, #436]	@ (80056ec <checkAktifCalisma+0x15e8>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d017      	beq.n	800556c <checkAktifCalisma+0x1468>
 800553c:	4b66      	ldr	r3, [pc, #408]	@ (80056d8 <checkAktifCalisma+0x15d4>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f083 0301 	eor.w	r3, r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d010      	beq.n	800556c <checkAktifCalisma+0x1468>
 800554a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800554e:	4864      	ldr	r0, [pc, #400]	@ (80056e0 <checkAktifCalisma+0x15dc>)
 8005550:	f004 fba2 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800555a:	4b63      	ldr	r3, [pc, #396]	@ (80056e8 <checkAktifCalisma+0x15e4>)
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005560:	4b5e      	ldr	r3, [pc, #376]	@ (80056dc <checkAktifCalisma+0x15d8>)
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8005566:	2004      	movs	r0, #4
 8005568:	f7fe fbc6 	bl	8003cf8 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800556c:	4b5a      	ldr	r3, [pc, #360]	@ (80056d8 <checkAktifCalisma+0x15d4>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <checkAktifCalisma+0x1478>
 8005574:	4b5e      	ldr	r3, [pc, #376]	@ (80056f0 <checkAktifCalisma+0x15ec>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <checkAktifCalisma+0x14b6>
 800557c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005580:	4857      	ldr	r0, [pc, #348]	@ (80056e0 <checkAktifCalisma+0x15dc>)
 8005582:	f004 fb89 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005586:	4603      	mov	r3, r0
 8005588:	2b01      	cmp	r3, #1
 800558a:	d116      	bne.n	80055ba <checkAktifCalisma+0x14b6>
 800558c:	4b55      	ldr	r3, [pc, #340]	@ (80056e4 <checkAktifCalisma+0x15e0>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d003      	beq.n	800559c <checkAktifCalisma+0x1498>
 8005594:	4b53      	ldr	r3, [pc, #332]	@ (80056e4 <checkAktifCalisma+0x15e0>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d10e      	bne.n	80055ba <checkAktifCalisma+0x14b6>
			hataVar=1;
 800559c:	4b4b      	ldr	r3, [pc, #300]	@ (80056cc <checkAktifCalisma+0x15c8>)
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80055a2:	2005      	movs	r0, #5
 80055a4:	f7fb fa46 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80055a8:	2005      	movs	r0, #5
 80055aa:	f7fb f9eb 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80055ae:	f002 fe2b 	bl	8008208 <convertAndSendData>
			tablakapisivicihatasi=1;
 80055b2:	4b50      	ldr	r3, [pc, #320]	@ (80056f4 <checkAktifCalisma+0x15f0>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e023      	b.n	8005602 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80055ba:	4b4e      	ldr	r3, [pc, #312]	@ (80056f4 <checkAktifCalisma+0x15f0>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d01f      	beq.n	8005602 <checkAktifCalisma+0x14fe>
 80055c2:	4b4a      	ldr	r3, [pc, #296]	@ (80056ec <checkAktifCalisma+0x15e8>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01b      	beq.n	8005602 <checkAktifCalisma+0x14fe>
 80055ca:	4b43      	ldr	r3, [pc, #268]	@ (80056d8 <checkAktifCalisma+0x15d4>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f083 0301 	eor.w	r3, r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d014      	beq.n	8005602 <checkAktifCalisma+0x14fe>
 80055d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055dc:	4840      	ldr	r0, [pc, #256]	@ (80056e0 <checkAktifCalisma+0x15dc>)
 80055de:	f004 fb5b 	bl	8009c98 <HAL_GPIO_ReadPin>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10c      	bne.n	8005602 <checkAktifCalisma+0x14fe>
 80055e8:	4b40      	ldr	r3, [pc, #256]	@ (80056ec <checkAktifCalisma+0x15e8>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80055f0:	4b40      	ldr	r3, [pc, #256]	@ (80056f4 <checkAktifCalisma+0x15f0>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80055f6:	4b3e      	ldr	r3, [pc, #248]	@ (80056f0 <checkAktifCalisma+0x15ec>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80055fc:	2005      	movs	r0, #5
 80055fe:	f7fe fb7b 	bl	8003cf8 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8005602:	4b30      	ldr	r3, [pc, #192]	@ (80056c4 <checkAktifCalisma+0x15c0>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d107      	bne.n	800561a <checkAktifCalisma+0x1516>
 800560a:	4b2a      	ldr	r3, [pc, #168]	@ (80056b4 <checkAktifCalisma+0x15b0>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d103      	bne.n	800561a <checkAktifCalisma+0x1516>
 8005612:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <checkAktifCalisma+0x15f4>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800561a:	4b38      	ldr	r3, [pc, #224]	@ (80056fc <checkAktifCalisma+0x15f8>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b38      	ldr	r3, [pc, #224]	@ (8005700 <checkAktifCalisma+0x15fc>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	4a37      	ldr	r2, [pc, #220]	@ (8005704 <checkAktifCalisma+0x1600>)
 8005626:	7812      	ldrb	r2, [r2, #0]
 8005628:	4293      	cmp	r3, r2
 800562a:	d30d      	bcc.n	8005648 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 800562c:	4b27      	ldr	r3, [pc, #156]	@ (80056cc <checkAktifCalisma+0x15c8>)
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8005632:	2006      	movs	r0, #6
 8005634:	f7fb f9fe 	bl	8000a34 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8005638:	2006      	movs	r0, #6
 800563a:	f7fb f9a3 	bl	8000984 <hata2EEPROM>
			  	convertAndSendData();
 800563e:	f002 fde3 	bl	8008208 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8005642:	4b31      	ldr	r3, [pc, #196]	@ (8005708 <checkAktifCalisma+0x1604>)
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005648:	4b2f      	ldr	r3, [pc, #188]	@ (8005708 <checkAktifCalisma+0x1604>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d013      	beq.n	8005678 <checkAktifCalisma+0x1574>
 8005650:	2108      	movs	r1, #8
 8005652:	4823      	ldr	r0, [pc, #140]	@ (80056e0 <checkAktifCalisma+0x15dc>)
 8005654:	f004 fb20 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <checkAktifCalisma+0x1574>
 800565e:	4b1e      	ldr	r3, [pc, #120]	@ (80056d8 <checkAktifCalisma+0x15d4>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f083 0301 	eor.w	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 800566c:	4b26      	ldr	r3, [pc, #152]	@ (8005708 <checkAktifCalisma+0x1604>)
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8005672:	2006      	movs	r0, #6
 8005674:	f7fe fb40 	bl	8003cf8 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005678:	4b24      	ldr	r3, [pc, #144]	@ (800570c <checkAktifCalisma+0x1608>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <checkAktifCalisma+0x1594>
 8005680:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <checkAktifCalisma+0x15b0>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d107      	bne.n	8005698 <checkAktifCalisma+0x1594>
 8005688:	4b21      	ldr	r3, [pc, #132]	@ (8005710 <checkAktifCalisma+0x160c>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <checkAktifCalisma+0x1594>
 8005690:	4b19      	ldr	r3, [pc, #100]	@ (80056f8 <checkAktifCalisma+0x15f4>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d03f      	beq.n	8005718 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8005698:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <checkAktifCalisma+0x1610>)
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800569e:	4b0f      	ldr	r3, [pc, #60]	@ (80056dc <checkAktifCalisma+0x15d8>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80056a4:	4b12      	ldr	r3, [pc, #72]	@ (80056f0 <checkAktifCalisma+0x15ec>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e03c      	b.n	8005726 <checkAktifCalisma+0x1622>
 80056ac:	20000fb1 	.word	0x20000fb1
 80056b0:	20000fb7 	.word	0x20000fb7
 80056b4:	20000f98 	.word	0x20000f98
 80056b8:	20000fc1 	.word	0x20000fc1
 80056bc:	20000f63 	.word	0x20000f63
 80056c0:	20000f67 	.word	0x20000f67
 80056c4:	20000fb4 	.word	0x20000fb4
 80056c8:	40011000 	.word	0x40011000
 80056cc:	20000fb5 	.word	0x20000fb5
 80056d0:	20000fbe 	.word	0x20000fbe
 80056d4:	40010c00 	.word	0x40010c00
 80056d8:	20000fae 	.word	0x20000fae
 80056dc:	20000fc2 	.word	0x20000fc2
 80056e0:	40010800 	.word	0x40010800
 80056e4:	20000f68 	.word	0x20000f68
 80056e8:	20000fbf 	.word	0x20000fbf
 80056ec:	20000fa2 	.word	0x20000fa2
 80056f0:	20000fc3 	.word	0x20000fc3
 80056f4:	20000fc0 	.word	0x20000fc0
 80056f8:	20000f97 	.word	0x20000f97
 80056fc:	20000f38 	.word	0x20000f38
 8005700:	20000f4c 	.word	0x20000f4c
 8005704:	20000f78 	.word	0x20000f78
 8005708:	20000faf 	.word	0x20000faf
 800570c:	20000f95 	.word	0x20000f95
 8005710:	20000f96 	.word	0x20000f96
 8005714:	20000fb6 	.word	0x20000fb6
		} else {
			makineCalisiyor=1;
 8005718:	4b1e      	ldr	r3, [pc, #120]	@ (8005794 <checkAktifCalisma+0x1690>)
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800571e:	4b1e      	ldr	r3, [pc, #120]	@ (8005798 <checkAktifCalisma+0x1694>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1e      	ldr	r2, [pc, #120]	@ (800579c <checkAktifCalisma+0x1698>)
 8005724:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005726:	4b1e      	ldr	r3, [pc, #120]	@ (80057a0 <checkAktifCalisma+0x169c>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02f      	beq.n	800578e <checkAktifCalisma+0x168a>
 800572e:	4b1d      	ldr	r3, [pc, #116]	@ (80057a4 <checkAktifCalisma+0x16a0>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f083 0301 	eor.w	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d028      	beq.n	800578e <checkAktifCalisma+0x168a>
 800573c:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <checkAktifCalisma+0x16a4>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f083 0301 	eor.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d021      	beq.n	800578e <checkAktifCalisma+0x168a>
 800574a:	4b18      	ldr	r3, [pc, #96]	@ (80057ac <checkAktifCalisma+0x16a8>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	f083 0301 	eor.w	r3, r3, #1
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01a      	beq.n	800578e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005758:	4b15      	ldr	r3, [pc, #84]	@ (80057b0 <checkAktifCalisma+0x16ac>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f083 0301 	eor.w	r3, r3, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d013      	beq.n	800578e <checkAktifCalisma+0x168a>
 8005766:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <checkAktifCalisma+0x16b0>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	f083 0301 	eor.w	r3, r3, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00c      	beq.n	800578e <checkAktifCalisma+0x168a>
 8005774:	4b10      	ldr	r3, [pc, #64]	@ (80057b8 <checkAktifCalisma+0x16b4>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f083 0301 	eor.w	r3, r3, #1
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <checkAktifCalisma+0x168a>
			hataVar=0;
 8005782:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <checkAktifCalisma+0x169c>)
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8005788:	2007      	movs	r0, #7
 800578a:	f7fe fab5 	bl	8003cf8 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800578e:	bf00      	nop
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000fb6 	.word	0x20000fb6
 8005798:	20000f38 	.word	0x20000f38
 800579c:	20000f4c 	.word	0x20000f4c
 80057a0:	20000fb5 	.word	0x20000fb5
 80057a4:	20000fb0 	.word	0x20000fb0
 80057a8:	20000fb1 	.word	0x20000fb1
 80057ac:	20000fbe 	.word	0x20000fbe
 80057b0:	20000fbf 	.word	0x20000fbf
 80057b4:	20000fc0 	.word	0x20000fc0
 80057b8:	20000faf 	.word	0x20000faf

080057bc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80057c0:	4b8b      	ldr	r3, [pc, #556]	@ (80059f0 <checkDemoModCalisma+0x234>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	f040 8229 	bne.w	8005c1c <checkDemoModCalisma+0x460>
 80057ca:	4b8a      	ldr	r3, [pc, #552]	@ (80059f4 <checkDemoModCalisma+0x238>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8224 	beq.w	8005c1c <checkDemoModCalisma+0x460>
 80057d4:	4b88      	ldr	r3, [pc, #544]	@ (80059f8 <checkDemoModCalisma+0x23c>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 821f 	bne.w	8005c1c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057de:	2102      	movs	r1, #2
 80057e0:	4886      	ldr	r0, [pc, #536]	@ (80059fc <checkDemoModCalisma+0x240>)
 80057e2:	f004 fa59 	bl	8009c98 <HAL_GPIO_ReadPin>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d11d      	bne.n	8005828 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80057ec:	4b84      	ldr	r3, [pc, #528]	@ (8005a00 <checkDemoModCalisma+0x244>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f083 0301 	eor.w	r3, r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80057fa:	4b82      	ldr	r3, [pc, #520]	@ (8005a04 <checkDemoModCalisma+0x248>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	f083 0301 	eor.w	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00f      	beq.n	8005828 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8005808:	4b7f      	ldr	r3, [pc, #508]	@ (8005a08 <checkDemoModCalisma+0x24c>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d008      	beq.n	8005828 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005816:	2201      	movs	r2, #1
 8005818:	2104      	movs	r1, #4
 800581a:	487c      	ldr	r0, [pc, #496]	@ (8005a0c <checkDemoModCalisma+0x250>)
 800581c:	f004 fa53 	bl	8009cc6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8005820:	4b7b      	ldr	r3, [pc, #492]	@ (8005a10 <checkDemoModCalisma+0x254>)
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e00e      	b.n	8005846 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005828:	2102      	movs	r1, #2
 800582a:	4874      	ldr	r0, [pc, #464]	@ (80059fc <checkDemoModCalisma+0x240>)
 800582c:	f004 fa34 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005830:	4603      	mov	r3, r0
 8005832:	2b01      	cmp	r3, #1
 8005834:	d107      	bne.n	8005846 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005836:	2200      	movs	r2, #0
 8005838:	2104      	movs	r1, #4
 800583a:	4874      	ldr	r0, [pc, #464]	@ (8005a0c <checkDemoModCalisma+0x250>)
 800583c:	f004 fa43 	bl	8009cc6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8005840:	4b73      	ldr	r3, [pc, #460]	@ (8005a10 <checkDemoModCalisma+0x254>)
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005846:	4b72      	ldr	r3, [pc, #456]	@ (8005a10 <checkDemoModCalisma+0x254>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <checkDemoModCalisma+0xaa>
 800584e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a04 <checkDemoModCalisma+0x248>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d107      	bne.n	8005866 <checkDemoModCalisma+0xaa>
 8005856:	4b6c      	ldr	r3, [pc, #432]	@ (8005a08 <checkDemoModCalisma+0x24c>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <checkDemoModCalisma+0xaa>
 800585e:	4b68      	ldr	r3, [pc, #416]	@ (8005a00 <checkDemoModCalisma+0x244>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00c      	beq.n	8005880 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005866:	2201      	movs	r2, #1
 8005868:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800586c:	4867      	ldr	r0, [pc, #412]	@ (8005a0c <checkDemoModCalisma+0x250>)
 800586e:	f004 fa2a 	bl	8009cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005872:	2201      	movs	r2, #1
 8005874:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005878:	4864      	ldr	r0, [pc, #400]	@ (8005a0c <checkDemoModCalisma+0x250>)
 800587a:	f004 fa24 	bl	8009cc6 <HAL_GPIO_WritePin>
 800587e:	e00b      	b.n	8005898 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005886:	4861      	ldr	r0, [pc, #388]	@ (8005a0c <checkDemoModCalisma+0x250>)
 8005888:	f004 fa1d 	bl	8009cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800588c:	2200      	movs	r2, #0
 800588e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005892:	485e      	ldr	r0, [pc, #376]	@ (8005a0c <checkDemoModCalisma+0x250>)
 8005894:	f004 fa17 	bl	8009cc6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005898:	2102      	movs	r1, #2
 800589a:	4858      	ldr	r0, [pc, #352]	@ (80059fc <checkDemoModCalisma+0x240>)
 800589c:	f004 f9fc 	bl	8009c98 <HAL_GPIO_ReadPin>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d10d      	bne.n	80058c2 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80058a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058aa:	4854      	ldr	r0, [pc, #336]	@ (80059fc <checkDemoModCalisma+0x240>)
 80058ac:	f004 f9f4 	bl	8009c98 <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d105      	bne.n	80058c2 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80058b6:	4b56      	ldr	r3, [pc, #344]	@ (8005a10 <checkDemoModCalisma+0x254>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f083 0301 	eor.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058c2:	2102      	movs	r1, #2
 80058c4:	484d      	ldr	r0, [pc, #308]	@ (80059fc <checkDemoModCalisma+0x240>)
 80058c6:	f004 f9e7 	bl	8009c98 <HAL_GPIO_ReadPin>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d125      	bne.n	800591c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80058d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058d4:	4849      	ldr	r0, [pc, #292]	@ (80059fc <checkDemoModCalisma+0x240>)
 80058d6:	f004 f9df 	bl	8009c98 <HAL_GPIO_ReadPin>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d11d      	bne.n	800591c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80058e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005a10 <checkDemoModCalisma+0x254>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f083 0301 	eor.w	r3, r3, #1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d016      	beq.n	800591c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80058ee:	4b44      	ldr	r3, [pc, #272]	@ (8005a00 <checkDemoModCalisma+0x244>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f083 0301 	eor.w	r3, r3, #1
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00f      	beq.n	800591c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80058fc:	4b42      	ldr	r3, [pc, #264]	@ (8005a08 <checkDemoModCalisma+0x24c>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	f083 0301 	eor.w	r3, r3, #1
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800590a:	2201      	movs	r2, #1
 800590c:	2120      	movs	r1, #32
 800590e:	483b      	ldr	r0, [pc, #236]	@ (80059fc <checkDemoModCalisma+0x240>)
 8005910:	f004 f9d9 	bl	8009cc6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8005914:	4b3b      	ldr	r3, [pc, #236]	@ (8005a04 <checkDemoModCalisma+0x248>)
 8005916:	2201      	movs	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	e007      	b.n	800592c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800591c:	2200      	movs	r2, #0
 800591e:	2120      	movs	r1, #32
 8005920:	4836      	ldr	r0, [pc, #216]	@ (80059fc <checkDemoModCalisma+0x240>)
 8005922:	f004 f9d0 	bl	8009cc6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8005926:	4b37      	ldr	r3, [pc, #220]	@ (8005a04 <checkDemoModCalisma+0x248>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800592c:	2102      	movs	r1, #2
 800592e:	4833      	ldr	r0, [pc, #204]	@ (80059fc <checkDemoModCalisma+0x240>)
 8005930:	f004 f9b2 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005934:	4603      	mov	r3, r0
 8005936:	2b01      	cmp	r3, #1
 8005938:	d125      	bne.n	8005986 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800593a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800593e:	482f      	ldr	r0, [pc, #188]	@ (80059fc <checkDemoModCalisma+0x240>)
 8005940:	f004 f9aa 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11d      	bne.n	8005986 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800594a:	4b31      	ldr	r3, [pc, #196]	@ (8005a10 <checkDemoModCalisma+0x254>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f083 0301 	eor.w	r3, r3, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d016      	beq.n	8005986 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8005958:	4b2a      	ldr	r3, [pc, #168]	@ (8005a04 <checkDemoModCalisma+0x248>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f083 0301 	eor.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00f      	beq.n	8005986 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8005966:	4b26      	ldr	r3, [pc, #152]	@ (8005a00 <checkDemoModCalisma+0x244>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f083 0301 	eor.w	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005974:	2201      	movs	r2, #1
 8005976:	2110      	movs	r1, #16
 8005978:	4820      	ldr	r0, [pc, #128]	@ (80059fc <checkDemoModCalisma+0x240>)
 800597a:	f004 f9a4 	bl	8009cc6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800597e:	4b22      	ldr	r3, [pc, #136]	@ (8005a08 <checkDemoModCalisma+0x24c>)
 8005980:	2201      	movs	r2, #1
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e007      	b.n	8005996 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005986:	2200      	movs	r2, #0
 8005988:	2110      	movs	r1, #16
 800598a:	481c      	ldr	r0, [pc, #112]	@ (80059fc <checkDemoModCalisma+0x240>)
 800598c:	f004 f99b 	bl	8009cc6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8005990:	4b1d      	ldr	r3, [pc, #116]	@ (8005a08 <checkDemoModCalisma+0x24c>)
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005996:	2104      	movs	r1, #4
 8005998:	4818      	ldr	r0, [pc, #96]	@ (80059fc <checkDemoModCalisma+0x240>)
 800599a:	f004 f97d 	bl	8009c98 <HAL_GPIO_ReadPin>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d139      	bne.n	8005a18 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <checkDemoModCalisma+0x254>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f083 0301 	eor.w	r3, r3, #1
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d032      	beq.n	8005a18 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80059b2:	4b15      	ldr	r3, [pc, #84]	@ (8005a08 <checkDemoModCalisma+0x24c>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	f083 0301 	eor.w	r3, r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02b      	beq.n	8005a18 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80059c0:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <checkDemoModCalisma+0x248>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f083 0301 	eor.w	r3, r3, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d024      	beq.n	8005a18 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80059ce:	2201      	movs	r2, #1
 80059d0:	2102      	movs	r1, #2
 80059d2:	480e      	ldr	r0, [pc, #56]	@ (8005a0c <checkDemoModCalisma+0x250>)
 80059d4:	f004 f977 	bl	8009cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80059d8:	2201      	movs	r2, #1
 80059da:	2101      	movs	r1, #1
 80059dc:	480b      	ldr	r0, [pc, #44]	@ (8005a0c <checkDemoModCalisma+0x250>)
 80059de:	f004 f972 	bl	8009cc6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80059e2:	4b07      	ldr	r3, [pc, #28]	@ (8005a00 <checkDemoModCalisma+0x244>)
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a14 <checkDemoModCalisma+0x258>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e027      	b.n	8005a40 <checkDemoModCalisma+0x284>
 80059f0:	20000f7e 	.word	0x20000f7e
 80059f4:	20000fb2 	.word	0x20000fb2
 80059f8:	20000f7d 	.word	0x20000f7d
 80059fc:	40011000 	.word	0x40011000
 8005a00:	20000fb9 	.word	0x20000fb9
 8005a04:	20000fba 	.word	0x20000fba
 8005a08:	20000fbb 	.word	0x20000fbb
 8005a0c:	40010c00 	.word	0x40010c00
 8005a10:	20000fb8 	.word	0x20000fb8
 8005a14:	20000f9e 	.word	0x20000f9e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005a18:	2104      	movs	r1, #4
 8005a1a:	48a0      	ldr	r0, [pc, #640]	@ (8005c9c <checkDemoModCalisma+0x4e0>)
 8005a1c:	f004 f93c 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10c      	bne.n	8005a40 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005a26:	2200      	movs	r2, #0
 8005a28:	2102      	movs	r1, #2
 8005a2a:	489d      	ldr	r0, [pc, #628]	@ (8005ca0 <checkDemoModCalisma+0x4e4>)
 8005a2c:	f004 f94b 	bl	8009cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005a30:	2200      	movs	r2, #0
 8005a32:	2101      	movs	r1, #1
 8005a34:	489a      	ldr	r0, [pc, #616]	@ (8005ca0 <checkDemoModCalisma+0x4e4>)
 8005a36:	f004 f946 	bl	8009cc6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8005a3a:	4b9a      	ldr	r3, [pc, #616]	@ (8005ca4 <checkDemoModCalisma+0x4e8>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005a40:	2104      	movs	r1, #4
 8005a42:	4896      	ldr	r0, [pc, #600]	@ (8005c9c <checkDemoModCalisma+0x4e0>)
 8005a44:	f004 f928 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d10d      	bne.n	8005a6a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2180      	movs	r1, #128	@ 0x80
 8005a52:	4895      	ldr	r0, [pc, #596]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005a54:	f004 f937 	bl	8009cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005a58:	2201      	movs	r2, #1
 8005a5a:	2120      	movs	r1, #32
 8005a5c:	4892      	ldr	r0, [pc, #584]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005a5e:	f004 f932 	bl	8009cc6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8005a62:	4b92      	ldr	r3, [pc, #584]	@ (8005cac <checkDemoModCalisma+0x4f0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a92      	ldr	r2, [pc, #584]	@ (8005cb0 <checkDemoModCalisma+0x4f4>)
 8005a68:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005a6a:	4b90      	ldr	r3, [pc, #576]	@ (8005cac <checkDemoModCalisma+0x4f0>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b90      	ldr	r3, [pc, #576]	@ (8005cb0 <checkDemoModCalisma+0x4f4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d909      	bls.n	8005a8c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2180      	movs	r1, #128	@ 0x80
 8005a7c:	488a      	ldr	r0, [pc, #552]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005a7e:	f004 f922 	bl	8009cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005a82:	2200      	movs	r2, #0
 8005a84:	2120      	movs	r1, #32
 8005a86:	4888      	ldr	r0, [pc, #544]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005a88:	f004 f91d 	bl	8009cc6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005a8c:	2102      	movs	r1, #2
 8005a8e:	4883      	ldr	r0, [pc, #524]	@ (8005c9c <checkDemoModCalisma+0x4e0>)
 8005a90:	f004 f902 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d108      	bne.n	8005aac <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	2140      	movs	r1, #64	@ 0x40
 8005a9e:	4882      	ldr	r0, [pc, #520]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005aa0:	f004 f911 	bl	8009cc6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8005aa4:	4b81      	ldr	r3, [pc, #516]	@ (8005cac <checkDemoModCalisma+0x4f0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a81      	ldr	r2, [pc, #516]	@ (8005cb0 <checkDemoModCalisma+0x4f4>)
 8005aaa:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005aac:	4b7f      	ldr	r3, [pc, #508]	@ (8005cac <checkDemoModCalisma+0x4f0>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb0 <checkDemoModCalisma+0x4f4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d904      	bls.n	8005ac4 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005aba:	2200      	movs	r2, #0
 8005abc:	2140      	movs	r1, #64	@ 0x40
 8005abe:	487a      	ldr	r0, [pc, #488]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005ac0:	f004 f901 	bl	8009cc6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8005cb4 <checkDemoModCalisma+0x4f8>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d058      	beq.n	8005b7e <checkDemoModCalisma+0x3c2>
 8005acc:	4b7a      	ldr	r3, [pc, #488]	@ (8005cb8 <checkDemoModCalisma+0x4fc>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d054      	beq.n	8005b7e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8005ad4:	4b79      	ldr	r3, [pc, #484]	@ (8005cbc <checkDemoModCalisma+0x500>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	4b77      	ldr	r3, [pc, #476]	@ (8005cbc <checkDemoModCalisma+0x500>)
 8005ade:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8005ae0:	4b76      	ldr	r3, [pc, #472]	@ (8005cbc <checkDemoModCalisma+0x500>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b09      	cmp	r3, #9
 8005ae6:	d908      	bls.n	8005afa <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8005ae8:	4b74      	ldr	r3, [pc, #464]	@ (8005cbc <checkDemoModCalisma+0x500>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8005aee:	4b74      	ldr	r3, [pc, #464]	@ (8005cc0 <checkDemoModCalisma+0x504>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	4b72      	ldr	r3, [pc, #456]	@ (8005cc0 <checkDemoModCalisma+0x504>)
 8005af8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8005afa:	4b71      	ldr	r3, [pc, #452]	@ (8005cc0 <checkDemoModCalisma+0x504>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d908      	bls.n	8005b14 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8005b02:	4b6f      	ldr	r3, [pc, #444]	@ (8005cc0 <checkDemoModCalisma+0x504>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8005b08:	4b6e      	ldr	r3, [pc, #440]	@ (8005cc4 <checkDemoModCalisma+0x508>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc4 <checkDemoModCalisma+0x508>)
 8005b12:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8005b14:	4b6b      	ldr	r3, [pc, #428]	@ (8005cc4 <checkDemoModCalisma+0x508>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b09      	cmp	r3, #9
 8005b1a:	d908      	bls.n	8005b2e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8005b1c:	4b69      	ldr	r3, [pc, #420]	@ (8005cc4 <checkDemoModCalisma+0x508>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8005b22:	4b69      	ldr	r3, [pc, #420]	@ (8005cc8 <checkDemoModCalisma+0x50c>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	3301      	adds	r3, #1
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	4b67      	ldr	r3, [pc, #412]	@ (8005cc8 <checkDemoModCalisma+0x50c>)
 8005b2c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8005b2e:	4b66      	ldr	r3, [pc, #408]	@ (8005cc8 <checkDemoModCalisma+0x50c>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b09      	cmp	r3, #9
 8005b34:	d908      	bls.n	8005b48 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8005b36:	4b64      	ldr	r3, [pc, #400]	@ (8005cc8 <checkDemoModCalisma+0x50c>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8005b3c:	4b63      	ldr	r3, [pc, #396]	@ (8005ccc <checkDemoModCalisma+0x510>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	3301      	adds	r3, #1
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	4b61      	ldr	r3, [pc, #388]	@ (8005ccc <checkDemoModCalisma+0x510>)
 8005b46:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005b48:	4b60      	ldr	r3, [pc, #384]	@ (8005ccc <checkDemoModCalisma+0x510>)
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	4b60      	ldr	r3, [pc, #384]	@ (8005cd0 <checkDemoModCalisma+0x514>)
 8005b4e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005b52:	4b5d      	ldr	r3, [pc, #372]	@ (8005cc8 <checkDemoModCalisma+0x50c>)
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	4b5e      	ldr	r3, [pc, #376]	@ (8005cd0 <checkDemoModCalisma+0x514>)
 8005b58:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8005cc4 <checkDemoModCalisma+0x508>)
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8005cd0 <checkDemoModCalisma+0x514>)
 8005b60:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005b62:	4b57      	ldr	r3, [pc, #348]	@ (8005cc0 <checkDemoModCalisma+0x504>)
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	4b5a      	ldr	r3, [pc, #360]	@ (8005cd0 <checkDemoModCalisma+0x514>)
 8005b68:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005b6a:	4b54      	ldr	r3, [pc, #336]	@ (8005cbc <checkDemoModCalisma+0x500>)
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	4b58      	ldr	r3, [pc, #352]	@ (8005cd0 <checkDemoModCalisma+0x514>)
 8005b70:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8005b72:	4b58      	ldr	r3, [pc, #352]	@ (8005cd4 <checkDemoModCalisma+0x518>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8005b78:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb8 <checkDemoModCalisma+0x4fc>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8005b7e:	4b56      	ldr	r3, [pc, #344]	@ (8005cd8 <checkDemoModCalisma+0x51c>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f040 8087 	bne.w	8005c96 <checkDemoModCalisma+0x4da>
			lcd_print(1, 1, demoModTextGN);
 8005b88:	4a54      	ldr	r2, [pc, #336]	@ (8005cdc <checkDemoModCalisma+0x520>)
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f002 fd59 	bl	8008644 <lcd_print>
			lcd_print(2, 1, cycleTextGN);
 8005b92:	4a53      	ldr	r2, [pc, #332]	@ (8005ce0 <checkDemoModCalisma+0x524>)
 8005b94:	2101      	movs	r1, #1
 8005b96:	2002      	movs	r0, #2
 8005b98:	f002 fd54 	bl	8008644 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8005b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ccc <checkDemoModCalisma+0x510>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	220a      	movs	r2, #10
 8005ba2:	4950      	ldr	r1, [pc, #320]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f007 f8a3 	bl	800ccf0 <itoa>
			lcd_print(2,12,snum);
 8005baa:	4a4e      	ldr	r2, [pc, #312]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005bac:	210c      	movs	r1, #12
 8005bae:	2002      	movs	r0, #2
 8005bb0:	f002 fd48 	bl	8008644 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8005bb4:	4b44      	ldr	r3, [pc, #272]	@ (8005cc8 <checkDemoModCalisma+0x50c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	220a      	movs	r2, #10
 8005bba:	494a      	ldr	r1, [pc, #296]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f007 f897 	bl	800ccf0 <itoa>
			lcd_print(2,13,snum);
 8005bc2:	4a48      	ldr	r2, [pc, #288]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005bc4:	210d      	movs	r1, #13
 8005bc6:	2002      	movs	r0, #2
 8005bc8:	f002 fd3c 	bl	8008644 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8005bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc4 <checkDemoModCalisma+0x508>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	220a      	movs	r2, #10
 8005bd2:	4944      	ldr	r1, [pc, #272]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f007 f88b 	bl	800ccf0 <itoa>
			lcd_print(2,14,snum);
 8005bda:	4a42      	ldr	r2, [pc, #264]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005bdc:	210e      	movs	r1, #14
 8005bde:	2002      	movs	r0, #2
 8005be0:	f002 fd30 	bl	8008644 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8005be4:	4b36      	ldr	r3, [pc, #216]	@ (8005cc0 <checkDemoModCalisma+0x504>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	220a      	movs	r2, #10
 8005bea:	493e      	ldr	r1, [pc, #248]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005bec:	4618      	mov	r0, r3
 8005bee:	f007 f87f 	bl	800ccf0 <itoa>
			lcd_print(2,15,snum);
 8005bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005bf4:	210f      	movs	r1, #15
 8005bf6:	2002      	movs	r0, #2
 8005bf8:	f002 fd24 	bl	8008644 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <checkDemoModCalisma+0x500>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	220a      	movs	r2, #10
 8005c02:	4938      	ldr	r1, [pc, #224]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005c04:	4618      	mov	r0, r3
 8005c06:	f007 f873 	bl	800ccf0 <itoa>
			lcd_print(2,16,snum);
 8005c0a:	4a36      	ldr	r2, [pc, #216]	@ (8005ce4 <checkDemoModCalisma+0x528>)
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	2002      	movs	r0, #2
 8005c10:	f002 fd18 	bl	8008644 <lcd_print>
			mesajYazildi=1;
 8005c14:	4b34      	ldr	r3, [pc, #208]	@ (8005ce8 <checkDemoModCalisma+0x52c>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8005c1a:	e03c      	b.n	8005c96 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8005c1c:	4b33      	ldr	r3, [pc, #204]	@ (8005cec <checkDemoModCalisma+0x530>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d003      	beq.n	8005c2c <checkDemoModCalisma+0x470>
 8005c24:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd8 <checkDemoModCalisma+0x51c>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d134      	bne.n	8005c96 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c32:	481b      	ldr	r0, [pc, #108]	@ (8005ca0 <checkDemoModCalisma+0x4e4>)
 8005c34:	f004 f847 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c3e:	4818      	ldr	r0, [pc, #96]	@ (8005ca0 <checkDemoModCalisma+0x4e4>)
 8005c40:	f004 f841 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005c44:	2200      	movs	r2, #0
 8005c46:	2104      	movs	r1, #4
 8005c48:	4815      	ldr	r0, [pc, #84]	@ (8005ca0 <checkDemoModCalisma+0x4e4>)
 8005c4a:	f004 f83c 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2102      	movs	r1, #2
 8005c52:	4813      	ldr	r0, [pc, #76]	@ (8005ca0 <checkDemoModCalisma+0x4e4>)
 8005c54:	f004 f837 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	4810      	ldr	r0, [pc, #64]	@ (8005ca0 <checkDemoModCalisma+0x4e4>)
 8005c5e:	f004 f832 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005c62:	2200      	movs	r2, #0
 8005c64:	2120      	movs	r1, #32
 8005c66:	480d      	ldr	r0, [pc, #52]	@ (8005c9c <checkDemoModCalisma+0x4e0>)
 8005c68:	f004 f82d 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2110      	movs	r1, #16
 8005c70:	480a      	ldr	r0, [pc, #40]	@ (8005c9c <checkDemoModCalisma+0x4e0>)
 8005c72:	f004 f828 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005c76:	2200      	movs	r2, #0
 8005c78:	2180      	movs	r1, #128	@ 0x80
 8005c7a:	480b      	ldr	r0, [pc, #44]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005c7c:	f004 f823 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c80:	2200      	movs	r2, #0
 8005c82:	2140      	movs	r1, #64	@ 0x40
 8005c84:	4808      	ldr	r0, [pc, #32]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005c86:	f004 f81e 	bl	8009cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2120      	movs	r1, #32
 8005c8e:	4806      	ldr	r0, [pc, #24]	@ (8005ca8 <checkDemoModCalisma+0x4ec>)
 8005c90:	f004 f819 	bl	8009cc6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8005c94:	e7ff      	b.n	8005c96 <checkDemoModCalisma+0x4da>
 8005c96:	bf00      	nop
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40011000 	.word	0x40011000
 8005ca0:	40010c00 	.word	0x40010c00
 8005ca4:	20000fb9 	.word	0x20000fb9
 8005ca8:	40010800 	.word	0x40010800
 8005cac:	20000f38 	.word	0x20000f38
 8005cb0:	20000f48 	.word	0x20000f48
 8005cb4:	20000fb8 	.word	0x20000fb8
 8005cb8:	20000f9e 	.word	0x20000f9e
 8005cbc:	20000f5d 	.word	0x20000f5d
 8005cc0:	20000f5e 	.word	0x20000f5e
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	20000001 	.word	0x20000001
 8005ccc:	20000f5f 	.word	0x20000f5f
 8005cd0:	20000e88 	.word	0x20000e88
 8005cd4:	20000f8c 	.word	0x20000f8c
 8005cd8:	20000f7d 	.word	0x20000f7d
 8005cdc:	20000140 	.word	0x20000140
 8005ce0:	20000168 	.word	0x20000168
 8005ce4:	20000ef8 	.word	0x20000ef8
 8005ce8:	20000f94 	.word	0x20000f94
 8005cec:	20000f7e 	.word	0x20000f7e

08005cf0 <mainLoop>:

void mainLoop() {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8005cf6:	f7fe f923 	bl	8003f40 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	48a8      	ldr	r0, [pc, #672]	@ (8005fa0 <mainLoop+0x2b0>)
 8005cfe:	f003 ffcb 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d136      	bne.n	8005d76 <mainLoop+0x86>
 8005d08:	2108      	movs	r1, #8
 8005d0a:	48a6      	ldr	r0, [pc, #664]	@ (8005fa4 <mainLoop+0x2b4>)
 8005d0c:	f003 ffc4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d12f      	bne.n	8005d76 <mainLoop+0x86>
 8005d16:	2102      	movs	r1, #2
 8005d18:	48a1      	ldr	r0, [pc, #644]	@ (8005fa0 <mainLoop+0x2b0>)
 8005d1a:	f003 ffbd 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d128      	bne.n	8005d76 <mainLoop+0x86>
 8005d24:	2104      	movs	r1, #4
 8005d26:	489e      	ldr	r0, [pc, #632]	@ (8005fa0 <mainLoop+0x2b0>)
 8005d28:	f003 ffb6 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d121      	bne.n	8005d76 <mainLoop+0x86>
 8005d32:	2108      	movs	r1, #8
 8005d34:	489a      	ldr	r0, [pc, #616]	@ (8005fa0 <mainLoop+0x2b0>)
 8005d36:	f003 ffaf 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11a      	bne.n	8005d76 <mainLoop+0x86>
 8005d40:	2180      	movs	r1, #128	@ 0x80
 8005d42:	4898      	ldr	r0, [pc, #608]	@ (8005fa4 <mainLoop+0x2b4>)
 8005d44:	f003 ffa8 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d113      	bne.n	8005d76 <mainLoop+0x86>
 8005d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d52:	4894      	ldr	r0, [pc, #592]	@ (8005fa4 <mainLoop+0x2b4>)
 8005d54:	f003 ffa0 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d10b      	bne.n	8005d76 <mainLoop+0x86>
 8005d5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d62:	4890      	ldr	r0, [pc, #576]	@ (8005fa4 <mainLoop+0x2b4>)
 8005d64:	f003 ff98 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d103      	bne.n	8005d76 <mainLoop+0x86>
			butonKontrol=0;
 8005d6e:	4b8e      	ldr	r3, [pc, #568]	@ (8005fa8 <mainLoop+0x2b8>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e003      	b.n	8005d7e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8005d76:	4b8d      	ldr	r3, [pc, #564]	@ (8005fac <mainLoop+0x2bc>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a8d      	ldr	r2, [pc, #564]	@ (8005fb0 <mainLoop+0x2c0>)
 8005d7c:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8005d7e:	f7fe f8ab 	bl	8003ed8 <buttonCheck>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d003      	beq.n	8005d90 <mainLoop+0xa0>
			backLightTimer = millis;
 8005d88:	4b88      	ldr	r3, [pc, #544]	@ (8005fac <mainLoop+0x2bc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a88      	ldr	r2, [pc, #544]	@ (8005fb0 <mainLoop+0x2c0>)
 8005d8e:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005d90:	4b88      	ldr	r3, [pc, #544]	@ (8005fb4 <mainLoop+0x2c4>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d036      	beq.n	8005e06 <mainLoop+0x116>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005d98:	bf00      	nop
 8005d9a:	4887      	ldr	r0, [pc, #540]	@ (8005fb8 <mainLoop+0x2c8>)
 8005d9c:	f004 fda5 	bl	800a8ea <HAL_I2C_GetError>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d0f9      	beq.n	8005d9a <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005da6:	bf00      	nop
 8005da8:	4883      	ldr	r0, [pc, #524]	@ (8005fb8 <mainLoop+0x2c8>)
 8005daa:	f004 fd91 	bl	800a8d0 <HAL_I2C_GetState>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d1f9      	bne.n	8005da8 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005db4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005db8:	9302      	str	r3, [sp, #8]
 8005dba:	236e      	movs	r3, #110	@ 0x6e
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8005fbc <mainLoop+0x2cc>)
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	236e      	movs	r3, #110	@ 0x6e
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	21a0      	movs	r1, #160	@ 0xa0
 8005dc8:	487b      	ldr	r0, [pc, #492]	@ (8005fb8 <mainLoop+0x2c8>)
 8005dca:	f004 fa1f 	bl	800a20c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8005dce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005dd2:	f003 f991 	bl	80090f8 <HAL_Delay>

		  hafizaYaz=0;
 8005dd6:	4b77      	ldr	r3, [pc, #476]	@ (8005fb4 <mainLoop+0x2c4>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
		  if(dilSecim == 0) {
 8005ddc:	4b78      	ldr	r3, [pc, #480]	@ (8005fc0 <mainLoop+0x2d0>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 8005de4:	4a77      	ldr	r2, [pc, #476]	@ (8005fc4 <mainLoop+0x2d4>)
 8005de6:	2101      	movs	r1, #1
 8005de8:	2002      	movs	r0, #2
 8005dea:	f002 fc2b 	bl	8008644 <lcd_print>
 8005dee:	e004      	b.n	8005dfa <mainLoop+0x10a>
		  } else {
			  lcd_print(2,1,"Data Wrote      ");
 8005df0:	4a75      	ldr	r2, [pc, #468]	@ (8005fc8 <mainLoop+0x2d8>)
 8005df2:	2101      	movs	r1, #1
 8005df4:	2002      	movs	r0, #2
 8005df6:	f002 fc25 	bl	8008644 <lcd_print>
		  }

		  HAL_Delay(1000);
 8005dfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005dfe:	f003 f97b 	bl	80090f8 <HAL_Delay>
		  lcd_clear();
 8005e02:	f002 fc4b 	bl	800869c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005e06:	4b71      	ldr	r3, [pc, #452]	@ (8005fcc <mainLoop+0x2dc>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f083 0301 	eor.w	r3, r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d061      	beq.n	8005ed8 <mainLoop+0x1e8>
 8005e14:	4868      	ldr	r0, [pc, #416]	@ (8005fb8 <mainLoop+0x2c8>)
 8005e16:	f004 fd5b 	bl	800a8d0 <HAL_I2C_GetState>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d15b      	bne.n	8005ed8 <mainLoop+0x1e8>
		  if(ilkOkuma==0) {
 8005e20:	4b6b      	ldr	r3, [pc, #428]	@ (8005fd0 <mainLoop+0x2e0>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f083 0301 	eor.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d03c      	beq.n	8005ea8 <mainLoop+0x1b8>
			  lcd_print(1, 1, eepromTextGN);
 8005e2e:	4a69      	ldr	r2, [pc, #420]	@ (8005fd4 <mainLoop+0x2e4>)
 8005e30:	2101      	movs	r1, #1
 8005e32:	2001      	movs	r0, #1
 8005e34:	f002 fc06 	bl	8008644 <lcd_print>
			  if(dilSecim == 0) {
 8005e38:	4b61      	ldr	r3, [pc, #388]	@ (8005fc0 <mainLoop+0x2d0>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d105      	bne.n	8005e4c <mainLoop+0x15c>
				  lcd_print(2,1,"Data Okunuyor...");
 8005e40:	4a65      	ldr	r2, [pc, #404]	@ (8005fd8 <mainLoop+0x2e8>)
 8005e42:	2101      	movs	r1, #1
 8005e44:	2002      	movs	r0, #2
 8005e46:	f002 fbfd 	bl	8008644 <lcd_print>
 8005e4a:	e004      	b.n	8005e56 <mainLoop+0x166>
			  } else {
				  lcd_print(2,1,"Data Reading... ");
 8005e4c:	4a63      	ldr	r2, [pc, #396]	@ (8005fdc <mainLoop+0x2ec>)
 8005e4e:	2101      	movs	r1, #1
 8005e50:	2002      	movs	r0, #2
 8005e52:	f002 fbf7 	bl	8008644 <lcd_print>
			  }
			  HAL_Delay(1000);
 8005e56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e5a:	f003 f94d 	bl	80090f8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005e5e:	bf00      	nop
 8005e60:	4855      	ldr	r0, [pc, #340]	@ (8005fb8 <mainLoop+0x2c8>)
 8005e62:	f004 fd42 	bl	800a8ea <HAL_I2C_GetError>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d0f9      	beq.n	8005e60 <mainLoop+0x170>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005e6c:	e003      	b.n	8005e76 <mainLoop+0x186>
				  HAL_Delay(1000);
 8005e6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e72:	f003 f941 	bl	80090f8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005e76:	4850      	ldr	r0, [pc, #320]	@ (8005fb8 <mainLoop+0x2c8>)
 8005e78:	f004 fd2a 	bl	800a8d0 <HAL_I2C_GetState>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d1f5      	bne.n	8005e6e <mainLoop+0x17e>
			  }

			  if(dilSecim == 0) {
 8005e82:	4b4f      	ldr	r3, [pc, #316]	@ (8005fc0 <mainLoop+0x2d0>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <mainLoop+0x1a6>
				  lcd_print(2,1,"Data Okundu.    ");
 8005e8a:	4a55      	ldr	r2, [pc, #340]	@ (8005fe0 <mainLoop+0x2f0>)
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	2002      	movs	r0, #2
 8005e90:	f002 fbd8 	bl	8008644 <lcd_print>
 8005e94:	e004      	b.n	8005ea0 <mainLoop+0x1b0>
			  } else {
				  lcd_print(2,1,"Data Read.      ");
 8005e96:	4a53      	ldr	r2, [pc, #332]	@ (8005fe4 <mainLoop+0x2f4>)
 8005e98:	2101      	movs	r1, #1
 8005e9a:	2002      	movs	r0, #2
 8005e9c:	f002 fbd2 	bl	8008644 <lcd_print>
			  }

			  ilkOkuma=1;
 8005ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8005fd0 <mainLoop+0x2e0>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e010      	b.n	8005eca <mainLoop+0x1da>
		  } else {
			  if(dilSecim == 0) {
 8005ea8:	4b45      	ldr	r3, [pc, #276]	@ (8005fc0 <mainLoop+0x2d0>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <mainLoop+0x1cc>
				  lcd_print(2,1,"Deger Kaydedildi");
 8005eb0:	4a4d      	ldr	r2, [pc, #308]	@ (8005fe8 <mainLoop+0x2f8>)
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	2002      	movs	r0, #2
 8005eb6:	f002 fbc5 	bl	8008644 <lcd_print>
 8005eba:	e004      	b.n	8005ec6 <mainLoop+0x1d6>
			  } else {
				  lcd_print(2,1,"Value Saved     ");
 8005ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8005fec <mainLoop+0x2fc>)
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	2002      	movs	r0, #2
 8005ec2:	f002 fbbf 	bl	8008644 <lcd_print>
			  }
			  lcd_clear();
 8005ec6:	f002 fbe9 	bl	800869c <lcd_clear>
		  }

		  lcd_clear();
 8005eca:	f002 fbe7 	bl	800869c <lcd_clear>

		  eepromKontrol();
 8005ece:	f7fa f9b1 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fcc <mainLoop+0x2dc>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005ed8:	4b45      	ldr	r3, [pc, #276]	@ (8005ff0 <mainLoop+0x300>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d11c      	bne.n	8005f1a <mainLoop+0x22a>
 8005ee0:	4b44      	ldr	r3, [pc, #272]	@ (8005ff4 <mainLoop+0x304>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f083 0301 	eor.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d015      	beq.n	8005f1a <mainLoop+0x22a>
 8005eee:	4b42      	ldr	r3, [pc, #264]	@ (8005ff8 <mainLoop+0x308>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d111      	bne.n	8005f1a <mainLoop+0x22a>
			lcd_clear();
 8005ef6:	f002 fbd1 	bl	800869c <lcd_clear>
			HAL_Delay(10);
 8005efa:	200a      	movs	r0, #10
 8005efc:	f003 f8fc 	bl	80090f8 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005f00:	4a3e      	ldr	r2, [pc, #248]	@ (8005ffc <mainLoop+0x30c>)
 8005f02:	2101      	movs	r1, #1
 8005f04:	2001      	movs	r0, #1
 8005f06:	f002 fb9d 	bl	8008644 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8006000 <mainLoop+0x310>)
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	2002      	movs	r0, #2
 8005f10:	f002 fb98 	bl	8008644 <lcd_print>
			mesajYazildi=1;
 8005f14:	4b37      	ldr	r3, [pc, #220]	@ (8005ff4 <mainLoop+0x304>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005f1a:	4b35      	ldr	r3, [pc, #212]	@ (8005ff0 <mainLoop+0x300>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d112      	bne.n	8005f48 <mainLoop+0x258>
 8005f22:	2102      	movs	r1, #2
 8005f24:	481e      	ldr	r0, [pc, #120]	@ (8005fa0 <mainLoop+0x2b0>)
 8005f26:	f003 feb7 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d10b      	bne.n	8005f48 <mainLoop+0x258>
 8005f30:	2104      	movs	r1, #4
 8005f32:	481b      	ldr	r0, [pc, #108]	@ (8005fa0 <mainLoop+0x2b0>)
 8005f34:	f003 feb0 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d104      	bne.n	8005f48 <mainLoop+0x258>
			menuGiris=1;
 8005f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ff0 <mainLoop+0x300>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005f44:	f002 fbaa 	bl	800869c <lcd_clear>
		}

		if(menuGiris==1) {
 8005f48:	4b29      	ldr	r3, [pc, #164]	@ (8005ff0 <mainLoop+0x300>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <mainLoop+0x264>
			menu();
 8005f50:	f7fb fa12 	bl	8001378 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005f54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f58:	4812      	ldr	r0, [pc, #72]	@ (8005fa4 <mainLoop+0x2b4>)
 8005f5a:	f003 fecc 	bl	8009cf6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005f5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f62:	4828      	ldr	r0, [pc, #160]	@ (8006004 <mainLoop+0x314>)
 8005f64:	f003 fe98 	bl	8009c98 <HAL_GPIO_ReadPin>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <mainLoop+0x294>
 8005f6e:	4b26      	ldr	r3, [pc, #152]	@ (8006008 <mainLoop+0x318>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	f083 0301 	eor.w	r3, r3, #1
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <mainLoop+0x294>
			stopVar=1;
 8005f7c:	4b23      	ldr	r3, [pc, #140]	@ (800600c <mainLoop+0x31c>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e002      	b.n	8005f8a <mainLoop+0x29a>
		} else {
			stopVar=0;
 8005f84:	4b21      	ldr	r3, [pc, #132]	@ (800600c <mainLoop+0x31c>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005f8a:	f7fd ffef 	bl	8003f6c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005f8e:	f7fe f821 	bl	8003fd4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005f92:	f7fe f865 	bl	8004060 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005f96:	f7fe f8b5 	bl	8004104 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005f9a:	f7ff fc0f 	bl	80057bc <checkDemoModCalisma>
		checkLCDBacklight();
 8005f9e:	e6aa      	b.n	8005cf6 <mainLoop+0x6>
 8005fa0:	40010800 	.word	0x40010800
 8005fa4:	40011000 	.word	0x40011000
 8005fa8:	20000f8f 	.word	0x20000f8f
 8005fac:	20000f38 	.word	0x20000f38
 8005fb0:	20000f54 	.word	0x20000f54
 8005fb4:	20000f8c 	.word	0x20000f8c
 8005fb8:	20001728 	.word	0x20001728
 8005fbc:	20000e88 	.word	0x20000e88
 8005fc0:	20000f81 	.word	0x20000f81
 8005fc4:	0800da40 	.word	0x0800da40
 8005fc8:	0800da54 	.word	0x0800da54
 8005fcc:	20000f8d 	.word	0x20000f8d
 8005fd0:	20000f8e 	.word	0x20000f8e
 8005fd4:	2000017c 	.word	0x2000017c
 8005fd8:	0800da68 	.word	0x0800da68
 8005fdc:	0800da7c 	.word	0x0800da7c
 8005fe0:	0800da90 	.word	0x0800da90
 8005fe4:	0800daa4 	.word	0x0800daa4
 8005fe8:	0800dab8 	.word	0x0800dab8
 8005fec:	0800dacc 	.word	0x0800dacc
 8005ff0:	20000f7d 	.word	0x20000f7d
 8005ff4:	20000f94 	.word	0x20000f94
 8005ff8:	20000f7e 	.word	0x20000f7e
 8005ffc:	200000c8 	.word	0x200000c8
 8006000:	200000dc 	.word	0x200000dc
 8006004:	40010c00 	.word	0x40010c00
 8006008:	20000fb5 	.word	0x20000fb5
 800600c:	20000fb2 	.word	0x20000fb2

08006010 <loadMenuTexts>:
char ssidExceedErrorText[17];
char ssidExceedError2Text[17];
char passExceedErrorText[17];
char passExceedError2Text[17];

void loadMenuTexts(uint8_t dilSecim) {
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 84b5 	bne.w	800698c <loadMenuTexts+0x97c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8006022:	4ac7      	ldr	r2, [pc, #796]	@ (8006340 <loadMenuTexts+0x330>)
 8006024:	4bc7      	ldr	r3, [pc, #796]	@ (8006344 <loadMenuTexts+0x334>)
 8006026:	4614      	mov	r4, r2
 8006028:	461d      	mov	r5, r3
 800602a:	6828      	ldr	r0, [r5, #0]
 800602c:	6869      	ldr	r1, [r5, #4]
 800602e:	68aa      	ldr	r2, [r5, #8]
 8006030:	68eb      	ldr	r3, [r5, #12]
 8006032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006034:	7c2b      	ldrb	r3, [r5, #16]
 8006036:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006038:	4ac3      	ldr	r2, [pc, #780]	@ (8006348 <loadMenuTexts+0x338>)
 800603a:	4bc4      	ldr	r3, [pc, #784]	@ (800634c <loadMenuTexts+0x33c>)
 800603c:	4614      	mov	r4, r2
 800603e:	461d      	mov	r5, r3
 8006040:	6828      	ldr	r0, [r5, #0]
 8006042:	6869      	ldr	r1, [r5, #4]
 8006044:	68aa      	ldr	r2, [r5, #8]
 8006046:	68eb      	ldr	r3, [r5, #12]
 8006048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604a:	7c2b      	ldrb	r3, [r5, #16]
 800604c:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 800604e:	4ac0      	ldr	r2, [pc, #768]	@ (8006350 <loadMenuTexts+0x340>)
 8006050:	4bc0      	ldr	r3, [pc, #768]	@ (8006354 <loadMenuTexts+0x344>)
 8006052:	4614      	mov	r4, r2
 8006054:	461d      	mov	r5, r3
 8006056:	6828      	ldr	r0, [r5, #0]
 8006058:	6869      	ldr	r1, [r5, #4]
 800605a:	68aa      	ldr	r2, [r5, #8]
 800605c:	68eb      	ldr	r3, [r5, #12]
 800605e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006060:	7c2b      	ldrb	r3, [r5, #16]
 8006062:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006064:	4abc      	ldr	r2, [pc, #752]	@ (8006358 <loadMenuTexts+0x348>)
 8006066:	4bbd      	ldr	r3, [pc, #756]	@ (800635c <loadMenuTexts+0x34c>)
 8006068:	4614      	mov	r4, r2
 800606a:	461d      	mov	r5, r3
 800606c:	6828      	ldr	r0, [r5, #0]
 800606e:	6869      	ldr	r1, [r5, #4]
 8006070:	68aa      	ldr	r2, [r5, #8]
 8006072:	68eb      	ldr	r3, [r5, #12]
 8006074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006076:	7c2b      	ldrb	r3, [r5, #16]
 8006078:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 800607a:	4ab9      	ldr	r2, [pc, #740]	@ (8006360 <loadMenuTexts+0x350>)
 800607c:	4bb9      	ldr	r3, [pc, #740]	@ (8006364 <loadMenuTexts+0x354>)
 800607e:	4614      	mov	r4, r2
 8006080:	461d      	mov	r5, r3
 8006082:	6828      	ldr	r0, [r5, #0]
 8006084:	6869      	ldr	r1, [r5, #4]
 8006086:	68aa      	ldr	r2, [r5, #8]
 8006088:	68eb      	ldr	r3, [r5, #12]
 800608a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800608c:	7c2b      	ldrb	r3, [r5, #16]
 800608e:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8006090:	4ab5      	ldr	r2, [pc, #724]	@ (8006368 <loadMenuTexts+0x358>)
 8006092:	4bb6      	ldr	r3, [pc, #728]	@ (800636c <loadMenuTexts+0x35c>)
 8006094:	4614      	mov	r4, r2
 8006096:	461d      	mov	r5, r3
 8006098:	6828      	ldr	r0, [r5, #0]
 800609a:	6869      	ldr	r1, [r5, #4]
 800609c:	68aa      	ldr	r2, [r5, #8]
 800609e:	68eb      	ldr	r3, [r5, #12]
 80060a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a2:	7c2b      	ldrb	r3, [r5, #16]
 80060a4:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80060a6:	4ab2      	ldr	r2, [pc, #712]	@ (8006370 <loadMenuTexts+0x360>)
 80060a8:	4bb2      	ldr	r3, [pc, #712]	@ (8006374 <loadMenuTexts+0x364>)
 80060aa:	4614      	mov	r4, r2
 80060ac:	461d      	mov	r5, r3
 80060ae:	6828      	ldr	r0, [r5, #0]
 80060b0:	6869      	ldr	r1, [r5, #4]
 80060b2:	68aa      	ldr	r2, [r5, #8]
 80060b4:	68eb      	ldr	r3, [r5, #12]
 80060b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060b8:	7c2b      	ldrb	r3, [r5, #16]
 80060ba:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80060bc:	4aae      	ldr	r2, [pc, #696]	@ (8006378 <loadMenuTexts+0x368>)
 80060be:	4baf      	ldr	r3, [pc, #700]	@ (800637c <loadMenuTexts+0x36c>)
 80060c0:	4614      	mov	r4, r2
 80060c2:	461d      	mov	r5, r3
 80060c4:	6828      	ldr	r0, [r5, #0]
 80060c6:	6869      	ldr	r1, [r5, #4]
 80060c8:	68aa      	ldr	r2, [r5, #8]
 80060ca:	68eb      	ldr	r3, [r5, #12]
 80060cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ce:	7c2b      	ldrb	r3, [r5, #16]
 80060d0:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 80060d2:	4aab      	ldr	r2, [pc, #684]	@ (8006380 <loadMenuTexts+0x370>)
 80060d4:	4bab      	ldr	r3, [pc, #684]	@ (8006384 <loadMenuTexts+0x374>)
 80060d6:	4614      	mov	r4, r2
 80060d8:	461d      	mov	r5, r3
 80060da:	6828      	ldr	r0, [r5, #0]
 80060dc:	6869      	ldr	r1, [r5, #4]
 80060de:	68aa      	ldr	r2, [r5, #8]
 80060e0:	68eb      	ldr	r3, [r5, #12]
 80060e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e4:	7c2b      	ldrb	r3, [r5, #16]
 80060e6:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 80060e8:	4aa7      	ldr	r2, [pc, #668]	@ (8006388 <loadMenuTexts+0x378>)
 80060ea:	4ba8      	ldr	r3, [pc, #672]	@ (800638c <loadMenuTexts+0x37c>)
 80060ec:	4614      	mov	r4, r2
 80060ee:	461d      	mov	r5, r3
 80060f0:	6828      	ldr	r0, [r5, #0]
 80060f2:	6869      	ldr	r1, [r5, #4]
 80060f4:	68aa      	ldr	r2, [r5, #8]
 80060f6:	68eb      	ldr	r3, [r5, #12]
 80060f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060fa:	7c2b      	ldrb	r3, [r5, #16]
 80060fc:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 80060fe:	4aa4      	ldr	r2, [pc, #656]	@ (8006390 <loadMenuTexts+0x380>)
 8006100:	4ba4      	ldr	r3, [pc, #656]	@ (8006394 <loadMenuTexts+0x384>)
 8006102:	4614      	mov	r4, r2
 8006104:	461d      	mov	r5, r3
 8006106:	6828      	ldr	r0, [r5, #0]
 8006108:	6869      	ldr	r1, [r5, #4]
 800610a:	68aa      	ldr	r2, [r5, #8]
 800610c:	68eb      	ldr	r3, [r5, #12]
 800610e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006110:	7c2b      	ldrb	r3, [r5, #16]
 8006112:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006114:	4aa0      	ldr	r2, [pc, #640]	@ (8006398 <loadMenuTexts+0x388>)
 8006116:	4ba1      	ldr	r3, [pc, #644]	@ (800639c <loadMenuTexts+0x38c>)
 8006118:	4614      	mov	r4, r2
 800611a:	461d      	mov	r5, r3
 800611c:	6828      	ldr	r0, [r5, #0]
 800611e:	6869      	ldr	r1, [r5, #4]
 8006120:	68aa      	ldr	r2, [r5, #8]
 8006122:	68eb      	ldr	r3, [r5, #12]
 8006124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006126:	7c2b      	ldrb	r3, [r5, #16]
 8006128:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 800612a:	4a9d      	ldr	r2, [pc, #628]	@ (80063a0 <loadMenuTexts+0x390>)
 800612c:	4b9d      	ldr	r3, [pc, #628]	@ (80063a4 <loadMenuTexts+0x394>)
 800612e:	4614      	mov	r4, r2
 8006130:	461d      	mov	r5, r3
 8006132:	6828      	ldr	r0, [r5, #0]
 8006134:	6869      	ldr	r1, [r5, #4]
 8006136:	68aa      	ldr	r2, [r5, #8]
 8006138:	68eb      	ldr	r3, [r5, #12]
 800613a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800613c:	7c2b      	ldrb	r3, [r5, #16]
 800613e:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006140:	4a99      	ldr	r2, [pc, #612]	@ (80063a8 <loadMenuTexts+0x398>)
 8006142:	4b9a      	ldr	r3, [pc, #616]	@ (80063ac <loadMenuTexts+0x39c>)
 8006144:	4614      	mov	r4, r2
 8006146:	461d      	mov	r5, r3
 8006148:	6828      	ldr	r0, [r5, #0]
 800614a:	6869      	ldr	r1, [r5, #4]
 800614c:	68aa      	ldr	r2, [r5, #8]
 800614e:	68eb      	ldr	r3, [r5, #12]
 8006150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006152:	7c2b      	ldrb	r3, [r5, #16]
 8006154:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006156:	4a96      	ldr	r2, [pc, #600]	@ (80063b0 <loadMenuTexts+0x3a0>)
 8006158:	4b96      	ldr	r3, [pc, #600]	@ (80063b4 <loadMenuTexts+0x3a4>)
 800615a:	4614      	mov	r4, r2
 800615c:	461d      	mov	r5, r3
 800615e:	6828      	ldr	r0, [r5, #0]
 8006160:	6869      	ldr	r1, [r5, #4]
 8006162:	68aa      	ldr	r2, [r5, #8]
 8006164:	68eb      	ldr	r3, [r5, #12]
 8006166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006168:	7c2b      	ldrb	r3, [r5, #16]
 800616a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 800616c:	4a92      	ldr	r2, [pc, #584]	@ (80063b8 <loadMenuTexts+0x3a8>)
 800616e:	4b93      	ldr	r3, [pc, #588]	@ (80063bc <loadMenuTexts+0x3ac>)
 8006170:	4614      	mov	r4, r2
 8006172:	461d      	mov	r5, r3
 8006174:	6828      	ldr	r0, [r5, #0]
 8006176:	6869      	ldr	r1, [r5, #4]
 8006178:	68aa      	ldr	r2, [r5, #8]
 800617a:	68eb      	ldr	r3, [r5, #12]
 800617c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800617e:	7c2b      	ldrb	r3, [r5, #16]
 8006180:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006182:	4a8f      	ldr	r2, [pc, #572]	@ (80063c0 <loadMenuTexts+0x3b0>)
 8006184:	4b8f      	ldr	r3, [pc, #572]	@ (80063c4 <loadMenuTexts+0x3b4>)
 8006186:	4614      	mov	r4, r2
 8006188:	461d      	mov	r5, r3
 800618a:	6828      	ldr	r0, [r5, #0]
 800618c:	6869      	ldr	r1, [r5, #4]
 800618e:	68aa      	ldr	r2, [r5, #8]
 8006190:	68eb      	ldr	r3, [r5, #12]
 8006192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006194:	7c2b      	ldrb	r3, [r5, #16]
 8006196:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006198:	4a8b      	ldr	r2, [pc, #556]	@ (80063c8 <loadMenuTexts+0x3b8>)
 800619a:	4b8c      	ldr	r3, [pc, #560]	@ (80063cc <loadMenuTexts+0x3bc>)
 800619c:	4614      	mov	r4, r2
 800619e:	461d      	mov	r5, r3
 80061a0:	6828      	ldr	r0, [r5, #0]
 80061a2:	6869      	ldr	r1, [r5, #4]
 80061a4:	68aa      	ldr	r2, [r5, #8]
 80061a6:	68eb      	ldr	r3, [r5, #12]
 80061a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061aa:	7c2b      	ldrb	r3, [r5, #16]
 80061ac:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80061ae:	4a88      	ldr	r2, [pc, #544]	@ (80063d0 <loadMenuTexts+0x3c0>)
 80061b0:	4b88      	ldr	r3, [pc, #544]	@ (80063d4 <loadMenuTexts+0x3c4>)
 80061b2:	4614      	mov	r4, r2
 80061b4:	461d      	mov	r5, r3
 80061b6:	6828      	ldr	r0, [r5, #0]
 80061b8:	6869      	ldr	r1, [r5, #4]
 80061ba:	68aa      	ldr	r2, [r5, #8]
 80061bc:	68eb      	ldr	r3, [r5, #12]
 80061be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c0:	7c2b      	ldrb	r3, [r5, #16]
 80061c2:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80061c4:	4a84      	ldr	r2, [pc, #528]	@ (80063d8 <loadMenuTexts+0x3c8>)
 80061c6:	4b85      	ldr	r3, [pc, #532]	@ (80063dc <loadMenuTexts+0x3cc>)
 80061c8:	4614      	mov	r4, r2
 80061ca:	461d      	mov	r5, r3
 80061cc:	6828      	ldr	r0, [r5, #0]
 80061ce:	6869      	ldr	r1, [r5, #4]
 80061d0:	68aa      	ldr	r2, [r5, #8]
 80061d2:	68eb      	ldr	r3, [r5, #12]
 80061d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061d6:	7c2b      	ldrb	r3, [r5, #16]
 80061d8:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80061da:	4a81      	ldr	r2, [pc, #516]	@ (80063e0 <loadMenuTexts+0x3d0>)
 80061dc:	4b81      	ldr	r3, [pc, #516]	@ (80063e4 <loadMenuTexts+0x3d4>)
 80061de:	4614      	mov	r4, r2
 80061e0:	461d      	mov	r5, r3
 80061e2:	6828      	ldr	r0, [r5, #0]
 80061e4:	6869      	ldr	r1, [r5, #4]
 80061e6:	68aa      	ldr	r2, [r5, #8]
 80061e8:	68eb      	ldr	r3, [r5, #12]
 80061ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ec:	7c2b      	ldrb	r3, [r5, #16]
 80061ee:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80061f0:	4a7d      	ldr	r2, [pc, #500]	@ (80063e8 <loadMenuTexts+0x3d8>)
 80061f2:	4b7e      	ldr	r3, [pc, #504]	@ (80063ec <loadMenuTexts+0x3dc>)
 80061f4:	4614      	mov	r4, r2
 80061f6:	461d      	mov	r5, r3
 80061f8:	6828      	ldr	r0, [r5, #0]
 80061fa:	6869      	ldr	r1, [r5, #4]
 80061fc:	68aa      	ldr	r2, [r5, #8]
 80061fe:	68eb      	ldr	r3, [r5, #12]
 8006200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006202:	7c2b      	ldrb	r3, [r5, #16]
 8006204:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006206:	4a7a      	ldr	r2, [pc, #488]	@ (80063f0 <loadMenuTexts+0x3e0>)
 8006208:	4b7a      	ldr	r3, [pc, #488]	@ (80063f4 <loadMenuTexts+0x3e4>)
 800620a:	4614      	mov	r4, r2
 800620c:	461d      	mov	r5, r3
 800620e:	6828      	ldr	r0, [r5, #0]
 8006210:	6869      	ldr	r1, [r5, #4]
 8006212:	68aa      	ldr	r2, [r5, #8]
 8006214:	68eb      	ldr	r3, [r5, #12]
 8006216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006218:	7c2b      	ldrb	r3, [r5, #16]
 800621a:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 800621c:	4a76      	ldr	r2, [pc, #472]	@ (80063f8 <loadMenuTexts+0x3e8>)
 800621e:	4b77      	ldr	r3, [pc, #476]	@ (80063fc <loadMenuTexts+0x3ec>)
 8006220:	4614      	mov	r4, r2
 8006222:	461d      	mov	r5, r3
 8006224:	6828      	ldr	r0, [r5, #0]
 8006226:	6869      	ldr	r1, [r5, #4]
 8006228:	68aa      	ldr	r2, [r5, #8]
 800622a:	68eb      	ldr	r3, [r5, #12]
 800622c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800622e:	7c2b      	ldrb	r3, [r5, #16]
 8006230:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8006232:	4a73      	ldr	r2, [pc, #460]	@ (8006400 <loadMenuTexts+0x3f0>)
 8006234:	4b73      	ldr	r3, [pc, #460]	@ (8006404 <loadMenuTexts+0x3f4>)
 8006236:	4614      	mov	r4, r2
 8006238:	461d      	mov	r5, r3
 800623a:	6828      	ldr	r0, [r5, #0]
 800623c:	6869      	ldr	r1, [r5, #4]
 800623e:	68aa      	ldr	r2, [r5, #8]
 8006240:	68eb      	ldr	r3, [r5, #12]
 8006242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006244:	7c2b      	ldrb	r3, [r5, #16]
 8006246:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006248:	4a6f      	ldr	r2, [pc, #444]	@ (8006408 <loadMenuTexts+0x3f8>)
 800624a:	4b70      	ldr	r3, [pc, #448]	@ (800640c <loadMenuTexts+0x3fc>)
 800624c:	4614      	mov	r4, r2
 800624e:	461d      	mov	r5, r3
 8006250:	6828      	ldr	r0, [r5, #0]
 8006252:	6869      	ldr	r1, [r5, #4]
 8006254:	68aa      	ldr	r2, [r5, #8]
 8006256:	68eb      	ldr	r3, [r5, #12]
 8006258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800625a:	7c2b      	ldrb	r3, [r5, #16]
 800625c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800625e:	4a6c      	ldr	r2, [pc, #432]	@ (8006410 <loadMenuTexts+0x400>)
 8006260:	4b6c      	ldr	r3, [pc, #432]	@ (8006414 <loadMenuTexts+0x404>)
 8006262:	4614      	mov	r4, r2
 8006264:	461d      	mov	r5, r3
 8006266:	6828      	ldr	r0, [r5, #0]
 8006268:	6869      	ldr	r1, [r5, #4]
 800626a:	68aa      	ldr	r2, [r5, #8]
 800626c:	68eb      	ldr	r3, [r5, #12]
 800626e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006270:	7c2b      	ldrb	r3, [r5, #16]
 8006272:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006274:	4a68      	ldr	r2, [pc, #416]	@ (8006418 <loadMenuTexts+0x408>)
 8006276:	4b69      	ldr	r3, [pc, #420]	@ (800641c <loadMenuTexts+0x40c>)
 8006278:	4614      	mov	r4, r2
 800627a:	461d      	mov	r5, r3
 800627c:	6828      	ldr	r0, [r5, #0]
 800627e:	6869      	ldr	r1, [r5, #4]
 8006280:	68aa      	ldr	r2, [r5, #8]
 8006282:	68eb      	ldr	r3, [r5, #12]
 8006284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006286:	7c2b      	ldrb	r3, [r5, #16]
 8006288:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 800628a:	4a65      	ldr	r2, [pc, #404]	@ (8006420 <loadMenuTexts+0x410>)
 800628c:	4b65      	ldr	r3, [pc, #404]	@ (8006424 <loadMenuTexts+0x414>)
 800628e:	4614      	mov	r4, r2
 8006290:	461d      	mov	r5, r3
 8006292:	6828      	ldr	r0, [r5, #0]
 8006294:	6869      	ldr	r1, [r5, #4]
 8006296:	68aa      	ldr	r2, [r5, #8]
 8006298:	68eb      	ldr	r3, [r5, #12]
 800629a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800629c:	7c2b      	ldrb	r3, [r5, #16]
 800629e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80062a0:	4a61      	ldr	r2, [pc, #388]	@ (8006428 <loadMenuTexts+0x418>)
 80062a2:	4b62      	ldr	r3, [pc, #392]	@ (800642c <loadMenuTexts+0x41c>)
 80062a4:	4614      	mov	r4, r2
 80062a6:	461d      	mov	r5, r3
 80062a8:	6828      	ldr	r0, [r5, #0]
 80062aa:	6869      	ldr	r1, [r5, #4]
 80062ac:	68aa      	ldr	r2, [r5, #8]
 80062ae:	68eb      	ldr	r3, [r5, #12]
 80062b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b2:	7c2b      	ldrb	r3, [r5, #16]
 80062b4:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80062b6:	4a5e      	ldr	r2, [pc, #376]	@ (8006430 <loadMenuTexts+0x420>)
 80062b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006434 <loadMenuTexts+0x424>)
 80062ba:	4614      	mov	r4, r2
 80062bc:	461d      	mov	r5, r3
 80062be:	6828      	ldr	r0, [r5, #0]
 80062c0:	6869      	ldr	r1, [r5, #4]
 80062c2:	68aa      	ldr	r2, [r5, #8]
 80062c4:	68eb      	ldr	r3, [r5, #12]
 80062c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c8:	7c2b      	ldrb	r3, [r5, #16]
 80062ca:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80062cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006438 <loadMenuTexts+0x428>)
 80062ce:	4b5b      	ldr	r3, [pc, #364]	@ (800643c <loadMenuTexts+0x42c>)
 80062d0:	4614      	mov	r4, r2
 80062d2:	461d      	mov	r5, r3
 80062d4:	6828      	ldr	r0, [r5, #0]
 80062d6:	6869      	ldr	r1, [r5, #4]
 80062d8:	68aa      	ldr	r2, [r5, #8]
 80062da:	68eb      	ldr	r3, [r5, #12]
 80062dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062de:	7c2b      	ldrb	r3, [r5, #16]
 80062e0:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80062e2:	4a57      	ldr	r2, [pc, #348]	@ (8006440 <loadMenuTexts+0x430>)
 80062e4:	4b57      	ldr	r3, [pc, #348]	@ (8006444 <loadMenuTexts+0x434>)
 80062e6:	4614      	mov	r4, r2
 80062e8:	461d      	mov	r5, r3
 80062ea:	6828      	ldr	r0, [r5, #0]
 80062ec:	6869      	ldr	r1, [r5, #4]
 80062ee:	68aa      	ldr	r2, [r5, #8]
 80062f0:	68eb      	ldr	r3, [r5, #12]
 80062f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f4:	7c2b      	ldrb	r3, [r5, #16]
 80062f6:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80062f8:	4a53      	ldr	r2, [pc, #332]	@ (8006448 <loadMenuTexts+0x438>)
 80062fa:	4b54      	ldr	r3, [pc, #336]	@ (800644c <loadMenuTexts+0x43c>)
 80062fc:	4614      	mov	r4, r2
 80062fe:	461d      	mov	r5, r3
 8006300:	6828      	ldr	r0, [r5, #0]
 8006302:	6869      	ldr	r1, [r5, #4]
 8006304:	68aa      	ldr	r2, [r5, #8]
 8006306:	68eb      	ldr	r3, [r5, #12]
 8006308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800630a:	7c2b      	ldrb	r3, [r5, #16]
 800630c:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800630e:	4a50      	ldr	r2, [pc, #320]	@ (8006450 <loadMenuTexts+0x440>)
 8006310:	4b50      	ldr	r3, [pc, #320]	@ (8006454 <loadMenuTexts+0x444>)
 8006312:	4614      	mov	r4, r2
 8006314:	461d      	mov	r5, r3
 8006316:	6828      	ldr	r0, [r5, #0]
 8006318:	6869      	ldr	r1, [r5, #4]
 800631a:	68aa      	ldr	r2, [r5, #8]
 800631c:	68eb      	ldr	r3, [r5, #12]
 800631e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006320:	7c2b      	ldrb	r3, [r5, #16]
 8006322:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006324:	4a4c      	ldr	r2, [pc, #304]	@ (8006458 <loadMenuTexts+0x448>)
 8006326:	4b4d      	ldr	r3, [pc, #308]	@ (800645c <loadMenuTexts+0x44c>)
 8006328:	4614      	mov	r4, r2
 800632a:	461d      	mov	r5, r3
 800632c:	6828      	ldr	r0, [r5, #0]
 800632e:	6869      	ldr	r1, [r5, #4]
 8006330:	68aa      	ldr	r2, [r5, #8]
 8006332:	68eb      	ldr	r3, [r5, #12]
 8006334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006336:	7c2b      	ldrb	r3, [r5, #16]
 8006338:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 800633a:	4a49      	ldr	r2, [pc, #292]	@ (8006460 <loadMenuTexts+0x450>)
 800633c:	e092      	b.n	8006464 <loadMenuTexts+0x454>
 800633e:	bf00      	nop
 8006340:	200010c0 	.word	0x200010c0
 8006344:	20000190 	.word	0x20000190
 8006348:	200010d4 	.word	0x200010d4
 800634c:	200001a4 	.word	0x200001a4
 8006350:	200010e8 	.word	0x200010e8
 8006354:	200001b8 	.word	0x200001b8
 8006358:	200010fc 	.word	0x200010fc
 800635c:	200001cc 	.word	0x200001cc
 8006360:	20001110 	.word	0x20001110
 8006364:	200001e0 	.word	0x200001e0
 8006368:	20001124 	.word	0x20001124
 800636c:	200001f4 	.word	0x200001f4
 8006370:	20001138 	.word	0x20001138
 8006374:	20000208 	.word	0x20000208
 8006378:	2000114c 	.word	0x2000114c
 800637c:	2000021c 	.word	0x2000021c
 8006380:	20001160 	.word	0x20001160
 8006384:	20000230 	.word	0x20000230
 8006388:	20001174 	.word	0x20001174
 800638c:	20000244 	.word	0x20000244
 8006390:	20001188 	.word	0x20001188
 8006394:	20000258 	.word	0x20000258
 8006398:	2000119c 	.word	0x2000119c
 800639c:	2000026c 	.word	0x2000026c
 80063a0:	200011b0 	.word	0x200011b0
 80063a4:	20000280 	.word	0x20000280
 80063a8:	200011c4 	.word	0x200011c4
 80063ac:	20000294 	.word	0x20000294
 80063b0:	200011d8 	.word	0x200011d8
 80063b4:	200002a8 	.word	0x200002a8
 80063b8:	200011ec 	.word	0x200011ec
 80063bc:	200002bc 	.word	0x200002bc
 80063c0:	20001200 	.word	0x20001200
 80063c4:	200002d0 	.word	0x200002d0
 80063c8:	20001214 	.word	0x20001214
 80063cc:	200002e4 	.word	0x200002e4
 80063d0:	20001228 	.word	0x20001228
 80063d4:	200002f8 	.word	0x200002f8
 80063d8:	2000123c 	.word	0x2000123c
 80063dc:	2000030c 	.word	0x2000030c
 80063e0:	20001250 	.word	0x20001250
 80063e4:	20000320 	.word	0x20000320
 80063e8:	20001264 	.word	0x20001264
 80063ec:	20000334 	.word	0x20000334
 80063f0:	20001278 	.word	0x20001278
 80063f4:	20000348 	.word	0x20000348
 80063f8:	2000128c 	.word	0x2000128c
 80063fc:	2000035c 	.word	0x2000035c
 8006400:	200012a0 	.word	0x200012a0
 8006404:	20000370 	.word	0x20000370
 8006408:	200012b4 	.word	0x200012b4
 800640c:	20000384 	.word	0x20000384
 8006410:	200012c8 	.word	0x200012c8
 8006414:	20000398 	.word	0x20000398
 8006418:	200012dc 	.word	0x200012dc
 800641c:	200003ac 	.word	0x200003ac
 8006420:	200012f0 	.word	0x200012f0
 8006424:	200003c0 	.word	0x200003c0
 8006428:	20001304 	.word	0x20001304
 800642c:	200003d4 	.word	0x200003d4
 8006430:	20001318 	.word	0x20001318
 8006434:	200003e8 	.word	0x200003e8
 8006438:	2000132c 	.word	0x2000132c
 800643c:	200003fc 	.word	0x200003fc
 8006440:	20001340 	.word	0x20001340
 8006444:	20000410 	.word	0x20000410
 8006448:	20001354 	.word	0x20001354
 800644c:	20000424 	.word	0x20000424
 8006450:	20001368 	.word	0x20001368
 8006454:	20000438 	.word	0x20000438
 8006458:	2000137c 	.word	0x2000137c
 800645c:	2000044c 	.word	0x2000044c
 8006460:	20001390 	.word	0x20001390
 8006464:	4bc7      	ldr	r3, [pc, #796]	@ (8006784 <loadMenuTexts+0x774>)
 8006466:	4614      	mov	r4, r2
 8006468:	461d      	mov	r5, r3
 800646a:	6828      	ldr	r0, [r5, #0]
 800646c:	6869      	ldr	r1, [r5, #4]
 800646e:	68aa      	ldr	r2, [r5, #8]
 8006470:	68eb      	ldr	r3, [r5, #12]
 8006472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006474:	7c2b      	ldrb	r3, [r5, #16]
 8006476:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006478:	4ac3      	ldr	r2, [pc, #780]	@ (8006788 <loadMenuTexts+0x778>)
 800647a:	4bc4      	ldr	r3, [pc, #784]	@ (800678c <loadMenuTexts+0x77c>)
 800647c:	4614      	mov	r4, r2
 800647e:	461d      	mov	r5, r3
 8006480:	6828      	ldr	r0, [r5, #0]
 8006482:	6869      	ldr	r1, [r5, #4]
 8006484:	68aa      	ldr	r2, [r5, #8]
 8006486:	68eb      	ldr	r3, [r5, #12]
 8006488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648a:	7c2b      	ldrb	r3, [r5, #16]
 800648c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 800648e:	4ac0      	ldr	r2, [pc, #768]	@ (8006790 <loadMenuTexts+0x780>)
 8006490:	4bc0      	ldr	r3, [pc, #768]	@ (8006794 <loadMenuTexts+0x784>)
 8006492:	4614      	mov	r4, r2
 8006494:	461d      	mov	r5, r3
 8006496:	6828      	ldr	r0, [r5, #0]
 8006498:	6869      	ldr	r1, [r5, #4]
 800649a:	68aa      	ldr	r2, [r5, #8]
 800649c:	68eb      	ldr	r3, [r5, #12]
 800649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a0:	7c2b      	ldrb	r3, [r5, #16]
 80064a2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80064a4:	4abc      	ldr	r2, [pc, #752]	@ (8006798 <loadMenuTexts+0x788>)
 80064a6:	4bbd      	ldr	r3, [pc, #756]	@ (800679c <loadMenuTexts+0x78c>)
 80064a8:	4614      	mov	r4, r2
 80064aa:	461d      	mov	r5, r3
 80064ac:	6828      	ldr	r0, [r5, #0]
 80064ae:	6869      	ldr	r1, [r5, #4]
 80064b0:	68aa      	ldr	r2, [r5, #8]
 80064b2:	68eb      	ldr	r3, [r5, #12]
 80064b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b6:	7c2b      	ldrb	r3, [r5, #16]
 80064b8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80064ba:	4ab9      	ldr	r2, [pc, #740]	@ (80067a0 <loadMenuTexts+0x790>)
 80064bc:	4bb9      	ldr	r3, [pc, #740]	@ (80067a4 <loadMenuTexts+0x794>)
 80064be:	4614      	mov	r4, r2
 80064c0:	461d      	mov	r5, r3
 80064c2:	6828      	ldr	r0, [r5, #0]
 80064c4:	6869      	ldr	r1, [r5, #4]
 80064c6:	68aa      	ldr	r2, [r5, #8]
 80064c8:	68eb      	ldr	r3, [r5, #12]
 80064ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064cc:	7c2b      	ldrb	r3, [r5, #16]
 80064ce:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80064d0:	4ab5      	ldr	r2, [pc, #724]	@ (80067a8 <loadMenuTexts+0x798>)
 80064d2:	4bb6      	ldr	r3, [pc, #728]	@ (80067ac <loadMenuTexts+0x79c>)
 80064d4:	4614      	mov	r4, r2
 80064d6:	461d      	mov	r5, r3
 80064d8:	6828      	ldr	r0, [r5, #0]
 80064da:	6869      	ldr	r1, [r5, #4]
 80064dc:	68aa      	ldr	r2, [r5, #8]
 80064de:	68eb      	ldr	r3, [r5, #12]
 80064e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e2:	7c2b      	ldrb	r3, [r5, #16]
 80064e4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80064e6:	4ab2      	ldr	r2, [pc, #712]	@ (80067b0 <loadMenuTexts+0x7a0>)
 80064e8:	4bb2      	ldr	r3, [pc, #712]	@ (80067b4 <loadMenuTexts+0x7a4>)
 80064ea:	4614      	mov	r4, r2
 80064ec:	461d      	mov	r5, r3
 80064ee:	6828      	ldr	r0, [r5, #0]
 80064f0:	6869      	ldr	r1, [r5, #4]
 80064f2:	68aa      	ldr	r2, [r5, #8]
 80064f4:	68eb      	ldr	r3, [r5, #12]
 80064f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f8:	7c2b      	ldrb	r3, [r5, #16]
 80064fa:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80064fc:	4aae      	ldr	r2, [pc, #696]	@ (80067b8 <loadMenuTexts+0x7a8>)
 80064fe:	4baf      	ldr	r3, [pc, #700]	@ (80067bc <loadMenuTexts+0x7ac>)
 8006500:	4614      	mov	r4, r2
 8006502:	461d      	mov	r5, r3
 8006504:	6828      	ldr	r0, [r5, #0]
 8006506:	6869      	ldr	r1, [r5, #4]
 8006508:	68aa      	ldr	r2, [r5, #8]
 800650a:	68eb      	ldr	r3, [r5, #12]
 800650c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800650e:	7c2b      	ldrb	r3, [r5, #16]
 8006510:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8006512:	4aab      	ldr	r2, [pc, #684]	@ (80067c0 <loadMenuTexts+0x7b0>)
 8006514:	4bab      	ldr	r3, [pc, #684]	@ (80067c4 <loadMenuTexts+0x7b4>)
 8006516:	4614      	mov	r4, r2
 8006518:	461d      	mov	r5, r3
 800651a:	6828      	ldr	r0, [r5, #0]
 800651c:	6869      	ldr	r1, [r5, #4]
 800651e:	68aa      	ldr	r2, [r5, #8]
 8006520:	68eb      	ldr	r3, [r5, #12]
 8006522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006524:	7c2b      	ldrb	r3, [r5, #16]
 8006526:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006528:	4aa7      	ldr	r2, [pc, #668]	@ (80067c8 <loadMenuTexts+0x7b8>)
 800652a:	4ba8      	ldr	r3, [pc, #672]	@ (80067cc <loadMenuTexts+0x7bc>)
 800652c:	4614      	mov	r4, r2
 800652e:	461d      	mov	r5, r3
 8006530:	6828      	ldr	r0, [r5, #0]
 8006532:	6869      	ldr	r1, [r5, #4]
 8006534:	68aa      	ldr	r2, [r5, #8]
 8006536:	68eb      	ldr	r3, [r5, #12]
 8006538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653a:	7c2b      	ldrb	r3, [r5, #16]
 800653c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800653e:	4aa4      	ldr	r2, [pc, #656]	@ (80067d0 <loadMenuTexts+0x7c0>)
 8006540:	4ba4      	ldr	r3, [pc, #656]	@ (80067d4 <loadMenuTexts+0x7c4>)
 8006542:	4614      	mov	r4, r2
 8006544:	461d      	mov	r5, r3
 8006546:	6828      	ldr	r0, [r5, #0]
 8006548:	6869      	ldr	r1, [r5, #4]
 800654a:	68aa      	ldr	r2, [r5, #8]
 800654c:	68eb      	ldr	r3, [r5, #12]
 800654e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006550:	7c2b      	ldrb	r3, [r5, #16]
 8006552:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006554:	4aa0      	ldr	r2, [pc, #640]	@ (80067d8 <loadMenuTexts+0x7c8>)
 8006556:	4ba1      	ldr	r3, [pc, #644]	@ (80067dc <loadMenuTexts+0x7cc>)
 8006558:	4614      	mov	r4, r2
 800655a:	461d      	mov	r5, r3
 800655c:	6828      	ldr	r0, [r5, #0]
 800655e:	6869      	ldr	r1, [r5, #4]
 8006560:	68aa      	ldr	r2, [r5, #8]
 8006562:	68eb      	ldr	r3, [r5, #12]
 8006564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006566:	7c2b      	ldrb	r3, [r5, #16]
 8006568:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800656a:	4a9d      	ldr	r2, [pc, #628]	@ (80067e0 <loadMenuTexts+0x7d0>)
 800656c:	4b9d      	ldr	r3, [pc, #628]	@ (80067e4 <loadMenuTexts+0x7d4>)
 800656e:	4614      	mov	r4, r2
 8006570:	461d      	mov	r5, r3
 8006572:	6828      	ldr	r0, [r5, #0]
 8006574:	6869      	ldr	r1, [r5, #4]
 8006576:	68aa      	ldr	r2, [r5, #8]
 8006578:	68eb      	ldr	r3, [r5, #12]
 800657a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800657c:	7c2b      	ldrb	r3, [r5, #16]
 800657e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006580:	4a99      	ldr	r2, [pc, #612]	@ (80067e8 <loadMenuTexts+0x7d8>)
 8006582:	4b9a      	ldr	r3, [pc, #616]	@ (80067ec <loadMenuTexts+0x7dc>)
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	6828      	ldr	r0, [r5, #0]
 800658a:	6869      	ldr	r1, [r5, #4]
 800658c:	68aa      	ldr	r2, [r5, #8]
 800658e:	68eb      	ldr	r3, [r5, #12]
 8006590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006592:	7c2b      	ldrb	r3, [r5, #16]
 8006594:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 8006596:	4a96      	ldr	r2, [pc, #600]	@ (80067f0 <loadMenuTexts+0x7e0>)
 8006598:	4b96      	ldr	r3, [pc, #600]	@ (80067f4 <loadMenuTexts+0x7e4>)
 800659a:	4614      	mov	r4, r2
 800659c:	461d      	mov	r5, r3
 800659e:	6828      	ldr	r0, [r5, #0]
 80065a0:	6869      	ldr	r1, [r5, #4]
 80065a2:	68aa      	ldr	r2, [r5, #8]
 80065a4:	68eb      	ldr	r3, [r5, #12]
 80065a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a8:	7c2b      	ldrb	r3, [r5, #16]
 80065aa:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80065ac:	4a92      	ldr	r2, [pc, #584]	@ (80067f8 <loadMenuTexts+0x7e8>)
 80065ae:	4b93      	ldr	r3, [pc, #588]	@ (80067fc <loadMenuTexts+0x7ec>)
 80065b0:	4614      	mov	r4, r2
 80065b2:	461d      	mov	r5, r3
 80065b4:	6828      	ldr	r0, [r5, #0]
 80065b6:	6869      	ldr	r1, [r5, #4]
 80065b8:	68aa      	ldr	r2, [r5, #8]
 80065ba:	68eb      	ldr	r3, [r5, #12]
 80065bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065be:	7c2b      	ldrb	r3, [r5, #16]
 80065c0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80065c2:	4a8f      	ldr	r2, [pc, #572]	@ (8006800 <loadMenuTexts+0x7f0>)
 80065c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006804 <loadMenuTexts+0x7f4>)
 80065c6:	4614      	mov	r4, r2
 80065c8:	461d      	mov	r5, r3
 80065ca:	6828      	ldr	r0, [r5, #0]
 80065cc:	6869      	ldr	r1, [r5, #4]
 80065ce:	68aa      	ldr	r2, [r5, #8]
 80065d0:	68eb      	ldr	r3, [r5, #12]
 80065d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d4:	7c2b      	ldrb	r3, [r5, #16]
 80065d6:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80065d8:	4a8b      	ldr	r2, [pc, #556]	@ (8006808 <loadMenuTexts+0x7f8>)
 80065da:	4b8c      	ldr	r3, [pc, #560]	@ (800680c <loadMenuTexts+0x7fc>)
 80065dc:	4614      	mov	r4, r2
 80065de:	461d      	mov	r5, r3
 80065e0:	6828      	ldr	r0, [r5, #0]
 80065e2:	6869      	ldr	r1, [r5, #4]
 80065e4:	68aa      	ldr	r2, [r5, #8]
 80065e6:	68eb      	ldr	r3, [r5, #12]
 80065e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ea:	7c2b      	ldrb	r3, [r5, #16]
 80065ec:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80065ee:	4a88      	ldr	r2, [pc, #544]	@ (8006810 <loadMenuTexts+0x800>)
 80065f0:	4b88      	ldr	r3, [pc, #544]	@ (8006814 <loadMenuTexts+0x804>)
 80065f2:	4614      	mov	r4, r2
 80065f4:	461d      	mov	r5, r3
 80065f6:	6828      	ldr	r0, [r5, #0]
 80065f8:	6869      	ldr	r1, [r5, #4]
 80065fa:	68aa      	ldr	r2, [r5, #8]
 80065fc:	68eb      	ldr	r3, [r5, #12]
 80065fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006600:	7c2b      	ldrb	r3, [r5, #16]
 8006602:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006604:	4a84      	ldr	r2, [pc, #528]	@ (8006818 <loadMenuTexts+0x808>)
 8006606:	4b85      	ldr	r3, [pc, #532]	@ (800681c <loadMenuTexts+0x80c>)
 8006608:	4614      	mov	r4, r2
 800660a:	461d      	mov	r5, r3
 800660c:	6828      	ldr	r0, [r5, #0]
 800660e:	6869      	ldr	r1, [r5, #4]
 8006610:	68aa      	ldr	r2, [r5, #8]
 8006612:	68eb      	ldr	r3, [r5, #12]
 8006614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006616:	7c2b      	ldrb	r3, [r5, #16]
 8006618:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 800661a:	4a81      	ldr	r2, [pc, #516]	@ (8006820 <loadMenuTexts+0x810>)
 800661c:	4b81      	ldr	r3, [pc, #516]	@ (8006824 <loadMenuTexts+0x814>)
 800661e:	4614      	mov	r4, r2
 8006620:	461d      	mov	r5, r3
 8006622:	6828      	ldr	r0, [r5, #0]
 8006624:	6869      	ldr	r1, [r5, #4]
 8006626:	68aa      	ldr	r2, [r5, #8]
 8006628:	68eb      	ldr	r3, [r5, #12]
 800662a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800662c:	7c2b      	ldrb	r3, [r5, #16]
 800662e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006630:	4a7d      	ldr	r2, [pc, #500]	@ (8006828 <loadMenuTexts+0x818>)
 8006632:	4b7e      	ldr	r3, [pc, #504]	@ (800682c <loadMenuTexts+0x81c>)
 8006634:	4614      	mov	r4, r2
 8006636:	461d      	mov	r5, r3
 8006638:	6828      	ldr	r0, [r5, #0]
 800663a:	6869      	ldr	r1, [r5, #4]
 800663c:	68aa      	ldr	r2, [r5, #8]
 800663e:	68eb      	ldr	r3, [r5, #12]
 8006640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006642:	7c2b      	ldrb	r3, [r5, #16]
 8006644:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8006646:	4a7a      	ldr	r2, [pc, #488]	@ (8006830 <loadMenuTexts+0x820>)
 8006648:	4b7a      	ldr	r3, [pc, #488]	@ (8006834 <loadMenuTexts+0x824>)
 800664a:	4614      	mov	r4, r2
 800664c:	461d      	mov	r5, r3
 800664e:	6828      	ldr	r0, [r5, #0]
 8006650:	6869      	ldr	r1, [r5, #4]
 8006652:	68aa      	ldr	r2, [r5, #8]
 8006654:	68eb      	ldr	r3, [r5, #12]
 8006656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006658:	7c2b      	ldrb	r3, [r5, #16]
 800665a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 800665c:	4a76      	ldr	r2, [pc, #472]	@ (8006838 <loadMenuTexts+0x828>)
 800665e:	4b77      	ldr	r3, [pc, #476]	@ (800683c <loadMenuTexts+0x82c>)
 8006660:	4614      	mov	r4, r2
 8006662:	461d      	mov	r5, r3
 8006664:	6828      	ldr	r0, [r5, #0]
 8006666:	6869      	ldr	r1, [r5, #4]
 8006668:	68aa      	ldr	r2, [r5, #8]
 800666a:	68eb      	ldr	r3, [r5, #12]
 800666c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800666e:	7c2b      	ldrb	r3, [r5, #16]
 8006670:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8006672:	4a73      	ldr	r2, [pc, #460]	@ (8006840 <loadMenuTexts+0x830>)
 8006674:	4b73      	ldr	r3, [pc, #460]	@ (8006844 <loadMenuTexts+0x834>)
 8006676:	4614      	mov	r4, r2
 8006678:	461d      	mov	r5, r3
 800667a:	6828      	ldr	r0, [r5, #0]
 800667c:	6869      	ldr	r1, [r5, #4]
 800667e:	68aa      	ldr	r2, [r5, #8]
 8006680:	68eb      	ldr	r3, [r5, #12]
 8006682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006684:	7c2b      	ldrb	r3, [r5, #16]
 8006686:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8006688:	4a6f      	ldr	r2, [pc, #444]	@ (8006848 <loadMenuTexts+0x838>)
 800668a:	4b70      	ldr	r3, [pc, #448]	@ (800684c <loadMenuTexts+0x83c>)
 800668c:	4614      	mov	r4, r2
 800668e:	461d      	mov	r5, r3
 8006690:	6828      	ldr	r0, [r5, #0]
 8006692:	6869      	ldr	r1, [r5, #4]
 8006694:	68aa      	ldr	r2, [r5, #8]
 8006696:	68eb      	ldr	r3, [r5, #12]
 8006698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800669a:	7c2b      	ldrb	r3, [r5, #16]
 800669c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 800669e:	4a6c      	ldr	r2, [pc, #432]	@ (8006850 <loadMenuTexts+0x840>)
 80066a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006854 <loadMenuTexts+0x844>)
 80066a2:	4614      	mov	r4, r2
 80066a4:	461d      	mov	r5, r3
 80066a6:	6828      	ldr	r0, [r5, #0]
 80066a8:	6869      	ldr	r1, [r5, #4]
 80066aa:	68aa      	ldr	r2, [r5, #8]
 80066ac:	68eb      	ldr	r3, [r5, #12]
 80066ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066b0:	7c2b      	ldrb	r3, [r5, #16]
 80066b2:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80066b4:	4a68      	ldr	r2, [pc, #416]	@ (8006858 <loadMenuTexts+0x848>)
 80066b6:	4b69      	ldr	r3, [pc, #420]	@ (800685c <loadMenuTexts+0x84c>)
 80066b8:	4614      	mov	r4, r2
 80066ba:	461d      	mov	r5, r3
 80066bc:	6828      	ldr	r0, [r5, #0]
 80066be:	6869      	ldr	r1, [r5, #4]
 80066c0:	68aa      	ldr	r2, [r5, #8]
 80066c2:	68eb      	ldr	r3, [r5, #12]
 80066c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066c6:	7c2b      	ldrb	r3, [r5, #16]
 80066c8:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80066ca:	4a65      	ldr	r2, [pc, #404]	@ (8006860 <loadMenuTexts+0x850>)
 80066cc:	4b65      	ldr	r3, [pc, #404]	@ (8006864 <loadMenuTexts+0x854>)
 80066ce:	4614      	mov	r4, r2
 80066d0:	461d      	mov	r5, r3
 80066d2:	6828      	ldr	r0, [r5, #0]
 80066d4:	6869      	ldr	r1, [r5, #4]
 80066d6:	68aa      	ldr	r2, [r5, #8]
 80066d8:	68eb      	ldr	r3, [r5, #12]
 80066da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066dc:	7c2b      	ldrb	r3, [r5, #16]
 80066de:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80066e0:	4a61      	ldr	r2, [pc, #388]	@ (8006868 <loadMenuTexts+0x858>)
 80066e2:	4b62      	ldr	r3, [pc, #392]	@ (800686c <loadMenuTexts+0x85c>)
 80066e4:	4614      	mov	r4, r2
 80066e6:	461d      	mov	r5, r3
 80066e8:	6828      	ldr	r0, [r5, #0]
 80066ea:	6869      	ldr	r1, [r5, #4]
 80066ec:	68aa      	ldr	r2, [r5, #8]
 80066ee:	68eb      	ldr	r3, [r5, #12]
 80066f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f2:	7c2b      	ldrb	r3, [r5, #16]
 80066f4:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80066f6:	4a5e      	ldr	r2, [pc, #376]	@ (8006870 <loadMenuTexts+0x860>)
 80066f8:	4b5e      	ldr	r3, [pc, #376]	@ (8006874 <loadMenuTexts+0x864>)
 80066fa:	4614      	mov	r4, r2
 80066fc:	461d      	mov	r5, r3
 80066fe:	6828      	ldr	r0, [r5, #0]
 8006700:	6869      	ldr	r1, [r5, #4]
 8006702:	68aa      	ldr	r2, [r5, #8]
 8006704:	68eb      	ldr	r3, [r5, #12]
 8006706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006708:	7c2b      	ldrb	r3, [r5, #16]
 800670a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 800670c:	4a5a      	ldr	r2, [pc, #360]	@ (8006878 <loadMenuTexts+0x868>)
 800670e:	4b5b      	ldr	r3, [pc, #364]	@ (800687c <loadMenuTexts+0x86c>)
 8006710:	4614      	mov	r4, r2
 8006712:	461d      	mov	r5, r3
 8006714:	6828      	ldr	r0, [r5, #0]
 8006716:	6869      	ldr	r1, [r5, #4]
 8006718:	68aa      	ldr	r2, [r5, #8]
 800671a:	68eb      	ldr	r3, [r5, #12]
 800671c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800671e:	7c2b      	ldrb	r3, [r5, #16]
 8006720:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8006722:	4a57      	ldr	r2, [pc, #348]	@ (8006880 <loadMenuTexts+0x870>)
 8006724:	4b57      	ldr	r3, [pc, #348]	@ (8006884 <loadMenuTexts+0x874>)
 8006726:	4614      	mov	r4, r2
 8006728:	461d      	mov	r5, r3
 800672a:	6828      	ldr	r0, [r5, #0]
 800672c:	6869      	ldr	r1, [r5, #4]
 800672e:	68aa      	ldr	r2, [r5, #8]
 8006730:	68eb      	ldr	r3, [r5, #12]
 8006732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006734:	7c2b      	ldrb	r3, [r5, #16]
 8006736:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006738:	4a53      	ldr	r2, [pc, #332]	@ (8006888 <loadMenuTexts+0x878>)
 800673a:	4b54      	ldr	r3, [pc, #336]	@ (800688c <loadMenuTexts+0x87c>)
 800673c:	4614      	mov	r4, r2
 800673e:	461d      	mov	r5, r3
 8006740:	6828      	ldr	r0, [r5, #0]
 8006742:	6869      	ldr	r1, [r5, #4]
 8006744:	68aa      	ldr	r2, [r5, #8]
 8006746:	68eb      	ldr	r3, [r5, #12]
 8006748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800674a:	7c2b      	ldrb	r3, [r5, #16]
 800674c:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 800674e:	4a50      	ldr	r2, [pc, #320]	@ (8006890 <loadMenuTexts+0x880>)
 8006750:	4b50      	ldr	r3, [pc, #320]	@ (8006894 <loadMenuTexts+0x884>)
 8006752:	4614      	mov	r4, r2
 8006754:	461d      	mov	r5, r3
 8006756:	6828      	ldr	r0, [r5, #0]
 8006758:	6869      	ldr	r1, [r5, #4]
 800675a:	68aa      	ldr	r2, [r5, #8]
 800675c:	68eb      	ldr	r3, [r5, #12]
 800675e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006760:	7c2b      	ldrb	r3, [r5, #16]
 8006762:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006764:	4a4c      	ldr	r2, [pc, #304]	@ (8006898 <loadMenuTexts+0x888>)
 8006766:	4b4d      	ldr	r3, [pc, #308]	@ (800689c <loadMenuTexts+0x88c>)
 8006768:	4614      	mov	r4, r2
 800676a:	461d      	mov	r5, r3
 800676c:	6828      	ldr	r0, [r5, #0]
 800676e:	6869      	ldr	r1, [r5, #4]
 8006770:	68aa      	ldr	r2, [r5, #8]
 8006772:	68eb      	ldr	r3, [r5, #12]
 8006774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006776:	7c2b      	ldrb	r3, [r5, #16]
 8006778:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 800677a:	4a49      	ldr	r2, [pc, #292]	@ (80068a0 <loadMenuTexts+0x890>)
 800677c:	4b49      	ldr	r3, [pc, #292]	@ (80068a4 <loadMenuTexts+0x894>)
 800677e:	4614      	mov	r4, r2
 8006780:	461d      	mov	r5, r3
 8006782:	e091      	b.n	80068a8 <loadMenuTexts+0x898>
 8006784:	20000460 	.word	0x20000460
 8006788:	200013a4 	.word	0x200013a4
 800678c:	20000474 	.word	0x20000474
 8006790:	200013b8 	.word	0x200013b8
 8006794:	20000488 	.word	0x20000488
 8006798:	200013cc 	.word	0x200013cc
 800679c:	2000049c 	.word	0x2000049c
 80067a0:	200013e0 	.word	0x200013e0
 80067a4:	200004b0 	.word	0x200004b0
 80067a8:	200013f4 	.word	0x200013f4
 80067ac:	200004c4 	.word	0x200004c4
 80067b0:	20001408 	.word	0x20001408
 80067b4:	200004d8 	.word	0x200004d8
 80067b8:	2000141c 	.word	0x2000141c
 80067bc:	200004ec 	.word	0x200004ec
 80067c0:	20001430 	.word	0x20001430
 80067c4:	20000500 	.word	0x20000500
 80067c8:	20001444 	.word	0x20001444
 80067cc:	20000514 	.word	0x20000514
 80067d0:	20001458 	.word	0x20001458
 80067d4:	20000528 	.word	0x20000528
 80067d8:	2000146c 	.word	0x2000146c
 80067dc:	2000053c 	.word	0x2000053c
 80067e0:	20001480 	.word	0x20001480
 80067e4:	20000550 	.word	0x20000550
 80067e8:	20001494 	.word	0x20001494
 80067ec:	20000564 	.word	0x20000564
 80067f0:	200014a8 	.word	0x200014a8
 80067f4:	20000578 	.word	0x20000578
 80067f8:	200014bc 	.word	0x200014bc
 80067fc:	2000058c 	.word	0x2000058c
 8006800:	200014d0 	.word	0x200014d0
 8006804:	200005a0 	.word	0x200005a0
 8006808:	200014e4 	.word	0x200014e4
 800680c:	200005b4 	.word	0x200005b4
 8006810:	200014f8 	.word	0x200014f8
 8006814:	200005c8 	.word	0x200005c8
 8006818:	2000150c 	.word	0x2000150c
 800681c:	200005dc 	.word	0x200005dc
 8006820:	20001520 	.word	0x20001520
 8006824:	200005f0 	.word	0x200005f0
 8006828:	20001534 	.word	0x20001534
 800682c:	20000604 	.word	0x20000604
 8006830:	20001548 	.word	0x20001548
 8006834:	20000618 	.word	0x20000618
 8006838:	2000155c 	.word	0x2000155c
 800683c:	2000062c 	.word	0x2000062c
 8006840:	20001570 	.word	0x20001570
 8006844:	20000640 	.word	0x20000640
 8006848:	20001584 	.word	0x20001584
 800684c:	20000654 	.word	0x20000654
 8006850:	20001598 	.word	0x20001598
 8006854:	20000668 	.word	0x20000668
 8006858:	200015ac 	.word	0x200015ac
 800685c:	2000067c 	.word	0x2000067c
 8006860:	200015c0 	.word	0x200015c0
 8006864:	20000690 	.word	0x20000690
 8006868:	200015d4 	.word	0x200015d4
 800686c:	200006a4 	.word	0x200006a4
 8006870:	200015e8 	.word	0x200015e8
 8006874:	200006b8 	.word	0x200006b8
 8006878:	200015fc 	.word	0x200015fc
 800687c:	200006cc 	.word	0x200006cc
 8006880:	20001610 	.word	0x20001610
 8006884:	200006e0 	.word	0x200006e0
 8006888:	20001624 	.word	0x20001624
 800688c:	200006f4 	.word	0x200006f4
 8006890:	20001638 	.word	0x20001638
 8006894:	20000c80 	.word	0x20000c80
 8006898:	2000164c 	.word	0x2000164c
 800689c:	20000c94 	.word	0x20000c94
 80068a0:	20001660 	.word	0x20001660
 80068a4:	20000ca8 	.word	0x20000ca8
 80068a8:	6828      	ldr	r0, [r5, #0]
 80068aa:	6869      	ldr	r1, [r5, #4]
 80068ac:	68aa      	ldr	r2, [r5, #8]
 80068ae:	68eb      	ldr	r3, [r5, #12]
 80068b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b2:	7c2b      	ldrb	r3, [r5, #16]
 80068b4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80068b6:	4a27      	ldr	r2, [pc, #156]	@ (8006954 <loadMenuTexts+0x944>)
 80068b8:	4b27      	ldr	r3, [pc, #156]	@ (8006958 <loadMenuTexts+0x948>)
 80068ba:	4614      	mov	r4, r2
 80068bc:	461d      	mov	r5, r3
 80068be:	6828      	ldr	r0, [r5, #0]
 80068c0:	6869      	ldr	r1, [r5, #4]
 80068c2:	68aa      	ldr	r2, [r5, #8]
 80068c4:	68eb      	ldr	r3, [r5, #12]
 80068c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068c8:	7c2b      	ldrb	r3, [r5, #16]
 80068ca:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80068cc:	4a23      	ldr	r2, [pc, #140]	@ (800695c <loadMenuTexts+0x94c>)
 80068ce:	4b24      	ldr	r3, [pc, #144]	@ (8006960 <loadMenuTexts+0x950>)
 80068d0:	4614      	mov	r4, r2
 80068d2:	461d      	mov	r5, r3
 80068d4:	6828      	ldr	r0, [r5, #0]
 80068d6:	6869      	ldr	r1, [r5, #4]
 80068d8:	68aa      	ldr	r2, [r5, #8]
 80068da:	68eb      	ldr	r3, [r5, #12]
 80068dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068de:	7c2b      	ldrb	r3, [r5, #16]
 80068e0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80068e2:	4a20      	ldr	r2, [pc, #128]	@ (8006964 <loadMenuTexts+0x954>)
 80068e4:	4b20      	ldr	r3, [pc, #128]	@ (8006968 <loadMenuTexts+0x958>)
 80068e6:	4614      	mov	r4, r2
 80068e8:	461d      	mov	r5, r3
 80068ea:	6828      	ldr	r0, [r5, #0]
 80068ec:	6869      	ldr	r1, [r5, #4]
 80068ee:	68aa      	ldr	r2, [r5, #8]
 80068f0:	68eb      	ldr	r3, [r5, #12]
 80068f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f4:	7c2b      	ldrb	r3, [r5, #16]
 80068f6:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80068f8:	4a1c      	ldr	r2, [pc, #112]	@ (800696c <loadMenuTexts+0x95c>)
 80068fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006970 <loadMenuTexts+0x960>)
 80068fc:	4614      	mov	r4, r2
 80068fe:	461d      	mov	r5, r3
 8006900:	6828      	ldr	r0, [r5, #0]
 8006902:	6869      	ldr	r1, [r5, #4]
 8006904:	68aa      	ldr	r2, [r5, #8]
 8006906:	68eb      	ldr	r3, [r5, #12]
 8006908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800690a:	7c2b      	ldrb	r3, [r5, #16]
 800690c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 800690e:	4a19      	ldr	r2, [pc, #100]	@ (8006974 <loadMenuTexts+0x964>)
 8006910:	4b19      	ldr	r3, [pc, #100]	@ (8006978 <loadMenuTexts+0x968>)
 8006912:	4614      	mov	r4, r2
 8006914:	461d      	mov	r5, r3
 8006916:	6828      	ldr	r0, [r5, #0]
 8006918:	6869      	ldr	r1, [r5, #4]
 800691a:	68aa      	ldr	r2, [r5, #8]
 800691c:	68eb      	ldr	r3, [r5, #12]
 800691e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006920:	7c2b      	ldrb	r3, [r5, #16]
 8006922:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006924:	4a15      	ldr	r2, [pc, #84]	@ (800697c <loadMenuTexts+0x96c>)
 8006926:	4b16      	ldr	r3, [pc, #88]	@ (8006980 <loadMenuTexts+0x970>)
 8006928:	4614      	mov	r4, r2
 800692a:	461d      	mov	r5, r3
 800692c:	6828      	ldr	r0, [r5, #0]
 800692e:	6869      	ldr	r1, [r5, #4]
 8006930:	68aa      	ldr	r2, [r5, #8]
 8006932:	68eb      	ldr	r3, [r5, #12]
 8006934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006936:	7c2b      	ldrb	r3, [r5, #16]
 8006938:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 800693a:	4a12      	ldr	r2, [pc, #72]	@ (8006984 <loadMenuTexts+0x974>)
 800693c:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <loadMenuTexts+0x978>)
 800693e:	4614      	mov	r4, r2
 8006940:	461d      	mov	r5, r3
 8006942:	6828      	ldr	r0, [r5, #0]
 8006944:	6869      	ldr	r1, [r5, #4]
 8006946:	68aa      	ldr	r2, [r5, #8]
 8006948:	68eb      	ldr	r3, [r5, #12]
 800694a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800694c:	7c2b      	ldrb	r3, [r5, #16]
 800694e:	7023      	strb	r3, [r4, #0]
 8006950:	f000 bcb2 	b.w	80072b8 <loadMenuTexts+0x12a8>
 8006954:	20001674 	.word	0x20001674
 8006958:	20000cbc 	.word	0x20000cbc
 800695c:	20001688 	.word	0x20001688
 8006960:	20000d20 	.word	0x20000d20
 8006964:	2000169c 	.word	0x2000169c
 8006968:	20000d34 	.word	0x20000d34
 800696c:	200016b0 	.word	0x200016b0
 8006970:	20000d70 	.word	0x20000d70
 8006974:	200016c4 	.word	0x200016c4
 8006978:	20000d84 	.word	0x20000d84
 800697c:	200016d8 	.word	0x200016d8
 8006980:	20000dc0 	.word	0x20000dc0
 8006984:	200016ec 	.word	0x200016ec
 8006988:	20000dd4 	.word	0x20000dd4
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 800698c:	4ac6      	ldr	r2, [pc, #792]	@ (8006ca8 <loadMenuTexts+0xc98>)
 800698e:	4bc7      	ldr	r3, [pc, #796]	@ (8006cac <loadMenuTexts+0xc9c>)
 8006990:	4614      	mov	r4, r2
 8006992:	461d      	mov	r5, r3
 8006994:	6828      	ldr	r0, [r5, #0]
 8006996:	6869      	ldr	r1, [r5, #4]
 8006998:	68aa      	ldr	r2, [r5, #8]
 800699a:	68eb      	ldr	r3, [r5, #12]
 800699c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800699e:	7c2b      	ldrb	r3, [r5, #16]
 80069a0:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 80069a2:	4ac3      	ldr	r2, [pc, #780]	@ (8006cb0 <loadMenuTexts+0xca0>)
 80069a4:	4bc3      	ldr	r3, [pc, #780]	@ (8006cb4 <loadMenuTexts+0xca4>)
 80069a6:	4614      	mov	r4, r2
 80069a8:	461d      	mov	r5, r3
 80069aa:	6828      	ldr	r0, [r5, #0]
 80069ac:	6869      	ldr	r1, [r5, #4]
 80069ae:	68aa      	ldr	r2, [r5, #8]
 80069b0:	68eb      	ldr	r3, [r5, #12]
 80069b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b4:	7c2b      	ldrb	r3, [r5, #16]
 80069b6:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 80069b8:	4abf      	ldr	r2, [pc, #764]	@ (8006cb8 <loadMenuTexts+0xca8>)
 80069ba:	4bc0      	ldr	r3, [pc, #768]	@ (8006cbc <loadMenuTexts+0xcac>)
 80069bc:	4614      	mov	r4, r2
 80069be:	461d      	mov	r5, r3
 80069c0:	6828      	ldr	r0, [r5, #0]
 80069c2:	6869      	ldr	r1, [r5, #4]
 80069c4:	68aa      	ldr	r2, [r5, #8]
 80069c6:	68eb      	ldr	r3, [r5, #12]
 80069c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ca:	7c2b      	ldrb	r3, [r5, #16]
 80069cc:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 80069ce:	4abc      	ldr	r2, [pc, #752]	@ (8006cc0 <loadMenuTexts+0xcb0>)
 80069d0:	4bbc      	ldr	r3, [pc, #752]	@ (8006cc4 <loadMenuTexts+0xcb4>)
 80069d2:	4614      	mov	r4, r2
 80069d4:	461d      	mov	r5, r3
 80069d6:	6828      	ldr	r0, [r5, #0]
 80069d8:	6869      	ldr	r1, [r5, #4]
 80069da:	68aa      	ldr	r2, [r5, #8]
 80069dc:	68eb      	ldr	r3, [r5, #12]
 80069de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e0:	7c2b      	ldrb	r3, [r5, #16]
 80069e2:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80069e4:	4ab8      	ldr	r2, [pc, #736]	@ (8006cc8 <loadMenuTexts+0xcb8>)
 80069e6:	4bb9      	ldr	r3, [pc, #740]	@ (8006ccc <loadMenuTexts+0xcbc>)
 80069e8:	4614      	mov	r4, r2
 80069ea:	461d      	mov	r5, r3
 80069ec:	6828      	ldr	r0, [r5, #0]
 80069ee:	6869      	ldr	r1, [r5, #4]
 80069f0:	68aa      	ldr	r2, [r5, #8]
 80069f2:	68eb      	ldr	r3, [r5, #12]
 80069f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f6:	7c2b      	ldrb	r3, [r5, #16]
 80069f8:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80069fa:	4ab5      	ldr	r2, [pc, #724]	@ (8006cd0 <loadMenuTexts+0xcc0>)
 80069fc:	4bb5      	ldr	r3, [pc, #724]	@ (8006cd4 <loadMenuTexts+0xcc4>)
 80069fe:	4614      	mov	r4, r2
 8006a00:	461d      	mov	r5, r3
 8006a02:	6828      	ldr	r0, [r5, #0]
 8006a04:	6869      	ldr	r1, [r5, #4]
 8006a06:	68aa      	ldr	r2, [r5, #8]
 8006a08:	68eb      	ldr	r3, [r5, #12]
 8006a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a0c:	7c2b      	ldrb	r3, [r5, #16]
 8006a0e:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006a10:	4ab1      	ldr	r2, [pc, #708]	@ (8006cd8 <loadMenuTexts+0xcc8>)
 8006a12:	4bb2      	ldr	r3, [pc, #712]	@ (8006cdc <loadMenuTexts+0xccc>)
 8006a14:	4614      	mov	r4, r2
 8006a16:	461d      	mov	r5, r3
 8006a18:	6828      	ldr	r0, [r5, #0]
 8006a1a:	6869      	ldr	r1, [r5, #4]
 8006a1c:	68aa      	ldr	r2, [r5, #8]
 8006a1e:	68eb      	ldr	r3, [r5, #12]
 8006a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a22:	7c2b      	ldrb	r3, [r5, #16]
 8006a24:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006a26:	4aae      	ldr	r2, [pc, #696]	@ (8006ce0 <loadMenuTexts+0xcd0>)
 8006a28:	4bae      	ldr	r3, [pc, #696]	@ (8006ce4 <loadMenuTexts+0xcd4>)
 8006a2a:	4614      	mov	r4, r2
 8006a2c:	461d      	mov	r5, r3
 8006a2e:	6828      	ldr	r0, [r5, #0]
 8006a30:	6869      	ldr	r1, [r5, #4]
 8006a32:	68aa      	ldr	r2, [r5, #8]
 8006a34:	68eb      	ldr	r3, [r5, #12]
 8006a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a38:	7c2b      	ldrb	r3, [r5, #16]
 8006a3a:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006a3c:	4aaa      	ldr	r2, [pc, #680]	@ (8006ce8 <loadMenuTexts+0xcd8>)
 8006a3e:	4bab      	ldr	r3, [pc, #684]	@ (8006cec <loadMenuTexts+0xcdc>)
 8006a40:	4614      	mov	r4, r2
 8006a42:	461d      	mov	r5, r3
 8006a44:	6828      	ldr	r0, [r5, #0]
 8006a46:	6869      	ldr	r1, [r5, #4]
 8006a48:	68aa      	ldr	r2, [r5, #8]
 8006a4a:	68eb      	ldr	r3, [r5, #12]
 8006a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4e:	7c2b      	ldrb	r3, [r5, #16]
 8006a50:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006a52:	4aa7      	ldr	r2, [pc, #668]	@ (8006cf0 <loadMenuTexts+0xce0>)
 8006a54:	4ba7      	ldr	r3, [pc, #668]	@ (8006cf4 <loadMenuTexts+0xce4>)
 8006a56:	4614      	mov	r4, r2
 8006a58:	461d      	mov	r5, r3
 8006a5a:	6828      	ldr	r0, [r5, #0]
 8006a5c:	6869      	ldr	r1, [r5, #4]
 8006a5e:	68aa      	ldr	r2, [r5, #8]
 8006a60:	68eb      	ldr	r3, [r5, #12]
 8006a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a64:	7c2b      	ldrb	r3, [r5, #16]
 8006a66:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006a68:	4aa3      	ldr	r2, [pc, #652]	@ (8006cf8 <loadMenuTexts+0xce8>)
 8006a6a:	4ba4      	ldr	r3, [pc, #656]	@ (8006cfc <loadMenuTexts+0xcec>)
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	6828      	ldr	r0, [r5, #0]
 8006a72:	6869      	ldr	r1, [r5, #4]
 8006a74:	68aa      	ldr	r2, [r5, #8]
 8006a76:	68eb      	ldr	r3, [r5, #12]
 8006a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a7a:	7c2b      	ldrb	r3, [r5, #16]
 8006a7c:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006a7e:	4aa0      	ldr	r2, [pc, #640]	@ (8006d00 <loadMenuTexts+0xcf0>)
 8006a80:	4ba0      	ldr	r3, [pc, #640]	@ (8006d04 <loadMenuTexts+0xcf4>)
 8006a82:	4614      	mov	r4, r2
 8006a84:	461d      	mov	r5, r3
 8006a86:	6828      	ldr	r0, [r5, #0]
 8006a88:	6869      	ldr	r1, [r5, #4]
 8006a8a:	68aa      	ldr	r2, [r5, #8]
 8006a8c:	68eb      	ldr	r3, [r5, #12]
 8006a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a90:	7c2b      	ldrb	r3, [r5, #16]
 8006a92:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006a94:	4a9c      	ldr	r2, [pc, #624]	@ (8006d08 <loadMenuTexts+0xcf8>)
 8006a96:	4b9d      	ldr	r3, [pc, #628]	@ (8006d0c <loadMenuTexts+0xcfc>)
 8006a98:	4614      	mov	r4, r2
 8006a9a:	461d      	mov	r5, r3
 8006a9c:	6828      	ldr	r0, [r5, #0]
 8006a9e:	6869      	ldr	r1, [r5, #4]
 8006aa0:	68aa      	ldr	r2, [r5, #8]
 8006aa2:	68eb      	ldr	r3, [r5, #12]
 8006aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa6:	7c2b      	ldrb	r3, [r5, #16]
 8006aa8:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006aaa:	4a99      	ldr	r2, [pc, #612]	@ (8006d10 <loadMenuTexts+0xd00>)
 8006aac:	4b99      	ldr	r3, [pc, #612]	@ (8006d14 <loadMenuTexts+0xd04>)
 8006aae:	4614      	mov	r4, r2
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	6828      	ldr	r0, [r5, #0]
 8006ab4:	6869      	ldr	r1, [r5, #4]
 8006ab6:	68aa      	ldr	r2, [r5, #8]
 8006ab8:	68eb      	ldr	r3, [r5, #12]
 8006aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006abc:	7c2b      	ldrb	r3, [r5, #16]
 8006abe:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006ac0:	4a95      	ldr	r2, [pc, #596]	@ (8006d18 <loadMenuTexts+0xd08>)
 8006ac2:	4b96      	ldr	r3, [pc, #600]	@ (8006d1c <loadMenuTexts+0xd0c>)
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	6828      	ldr	r0, [r5, #0]
 8006aca:	6869      	ldr	r1, [r5, #4]
 8006acc:	68aa      	ldr	r2, [r5, #8]
 8006ace:	68eb      	ldr	r3, [r5, #12]
 8006ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ad2:	7c2b      	ldrb	r3, [r5, #16]
 8006ad4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006ad6:	4a92      	ldr	r2, [pc, #584]	@ (8006d20 <loadMenuTexts+0xd10>)
 8006ad8:	4b92      	ldr	r3, [pc, #584]	@ (8006d24 <loadMenuTexts+0xd14>)
 8006ada:	4614      	mov	r4, r2
 8006adc:	461d      	mov	r5, r3
 8006ade:	6828      	ldr	r0, [r5, #0]
 8006ae0:	6869      	ldr	r1, [r5, #4]
 8006ae2:	68aa      	ldr	r2, [r5, #8]
 8006ae4:	68eb      	ldr	r3, [r5, #12]
 8006ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae8:	7c2b      	ldrb	r3, [r5, #16]
 8006aea:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006aec:	4a8e      	ldr	r2, [pc, #568]	@ (8006d28 <loadMenuTexts+0xd18>)
 8006aee:	4b8f      	ldr	r3, [pc, #572]	@ (8006d2c <loadMenuTexts+0xd1c>)
 8006af0:	4614      	mov	r4, r2
 8006af2:	461d      	mov	r5, r3
 8006af4:	6828      	ldr	r0, [r5, #0]
 8006af6:	6869      	ldr	r1, [r5, #4]
 8006af8:	68aa      	ldr	r2, [r5, #8]
 8006afa:	68eb      	ldr	r3, [r5, #12]
 8006afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afe:	7c2b      	ldrb	r3, [r5, #16]
 8006b00:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006b02:	4a8b      	ldr	r2, [pc, #556]	@ (8006d30 <loadMenuTexts+0xd20>)
 8006b04:	4b8b      	ldr	r3, [pc, #556]	@ (8006d34 <loadMenuTexts+0xd24>)
 8006b06:	4614      	mov	r4, r2
 8006b08:	461d      	mov	r5, r3
 8006b0a:	6828      	ldr	r0, [r5, #0]
 8006b0c:	6869      	ldr	r1, [r5, #4]
 8006b0e:	68aa      	ldr	r2, [r5, #8]
 8006b10:	68eb      	ldr	r3, [r5, #12]
 8006b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b14:	7c2b      	ldrb	r3, [r5, #16]
 8006b16:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006b18:	4a87      	ldr	r2, [pc, #540]	@ (8006d38 <loadMenuTexts+0xd28>)
 8006b1a:	4b88      	ldr	r3, [pc, #544]	@ (8006d3c <loadMenuTexts+0xd2c>)
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	6828      	ldr	r0, [r5, #0]
 8006b22:	6869      	ldr	r1, [r5, #4]
 8006b24:	68aa      	ldr	r2, [r5, #8]
 8006b26:	68eb      	ldr	r3, [r5, #12]
 8006b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b2a:	7c2b      	ldrb	r3, [r5, #16]
 8006b2c:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006b2e:	4a84      	ldr	r2, [pc, #528]	@ (8006d40 <loadMenuTexts+0xd30>)
 8006b30:	4b84      	ldr	r3, [pc, #528]	@ (8006d44 <loadMenuTexts+0xd34>)
 8006b32:	4614      	mov	r4, r2
 8006b34:	461d      	mov	r5, r3
 8006b36:	6828      	ldr	r0, [r5, #0]
 8006b38:	6869      	ldr	r1, [r5, #4]
 8006b3a:	68aa      	ldr	r2, [r5, #8]
 8006b3c:	68eb      	ldr	r3, [r5, #12]
 8006b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b40:	7c2b      	ldrb	r3, [r5, #16]
 8006b42:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006b44:	4a80      	ldr	r2, [pc, #512]	@ (8006d48 <loadMenuTexts+0xd38>)
 8006b46:	4b81      	ldr	r3, [pc, #516]	@ (8006d4c <loadMenuTexts+0xd3c>)
 8006b48:	4614      	mov	r4, r2
 8006b4a:	461d      	mov	r5, r3
 8006b4c:	6828      	ldr	r0, [r5, #0]
 8006b4e:	6869      	ldr	r1, [r5, #4]
 8006b50:	68aa      	ldr	r2, [r5, #8]
 8006b52:	68eb      	ldr	r3, [r5, #12]
 8006b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b56:	7c2b      	ldrb	r3, [r5, #16]
 8006b58:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006b5a:	4a7d      	ldr	r2, [pc, #500]	@ (8006d50 <loadMenuTexts+0xd40>)
 8006b5c:	4b7d      	ldr	r3, [pc, #500]	@ (8006d54 <loadMenuTexts+0xd44>)
 8006b5e:	4614      	mov	r4, r2
 8006b60:	461d      	mov	r5, r3
 8006b62:	6828      	ldr	r0, [r5, #0]
 8006b64:	6869      	ldr	r1, [r5, #4]
 8006b66:	68aa      	ldr	r2, [r5, #8]
 8006b68:	68eb      	ldr	r3, [r5, #12]
 8006b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b6c:	7c2b      	ldrb	r3, [r5, #16]
 8006b6e:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006b70:	4a79      	ldr	r2, [pc, #484]	@ (8006d58 <loadMenuTexts+0xd48>)
 8006b72:	4b7a      	ldr	r3, [pc, #488]	@ (8006d5c <loadMenuTexts+0xd4c>)
 8006b74:	4614      	mov	r4, r2
 8006b76:	461d      	mov	r5, r3
 8006b78:	6828      	ldr	r0, [r5, #0]
 8006b7a:	6869      	ldr	r1, [r5, #4]
 8006b7c:	68aa      	ldr	r2, [r5, #8]
 8006b7e:	68eb      	ldr	r3, [r5, #12]
 8006b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b82:	7c2b      	ldrb	r3, [r5, #16]
 8006b84:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006b86:	4a76      	ldr	r2, [pc, #472]	@ (8006d60 <loadMenuTexts+0xd50>)
 8006b88:	4b76      	ldr	r3, [pc, #472]	@ (8006d64 <loadMenuTexts+0xd54>)
 8006b8a:	4614      	mov	r4, r2
 8006b8c:	461d      	mov	r5, r3
 8006b8e:	6828      	ldr	r0, [r5, #0]
 8006b90:	6869      	ldr	r1, [r5, #4]
 8006b92:	68aa      	ldr	r2, [r5, #8]
 8006b94:	68eb      	ldr	r3, [r5, #12]
 8006b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b98:	7c2b      	ldrb	r3, [r5, #16]
 8006b9a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006b9c:	4a72      	ldr	r2, [pc, #456]	@ (8006d68 <loadMenuTexts+0xd58>)
 8006b9e:	4b73      	ldr	r3, [pc, #460]	@ (8006d6c <loadMenuTexts+0xd5c>)
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	6828      	ldr	r0, [r5, #0]
 8006ba6:	6869      	ldr	r1, [r5, #4]
 8006ba8:	68aa      	ldr	r2, [r5, #8]
 8006baa:	68eb      	ldr	r3, [r5, #12]
 8006bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bae:	7c2b      	ldrb	r3, [r5, #16]
 8006bb0:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8006d70 <loadMenuTexts+0xd60>)
 8006bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8006d74 <loadMenuTexts+0xd64>)
 8006bb6:	4614      	mov	r4, r2
 8006bb8:	461d      	mov	r5, r3
 8006bba:	6828      	ldr	r0, [r5, #0]
 8006bbc:	6869      	ldr	r1, [r5, #4]
 8006bbe:	68aa      	ldr	r2, [r5, #8]
 8006bc0:	68eb      	ldr	r3, [r5, #12]
 8006bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc4:	7c2b      	ldrb	r3, [r5, #16]
 8006bc6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006bc8:	4a6b      	ldr	r2, [pc, #428]	@ (8006d78 <loadMenuTexts+0xd68>)
 8006bca:	4b6c      	ldr	r3, [pc, #432]	@ (8006d7c <loadMenuTexts+0xd6c>)
 8006bcc:	4614      	mov	r4, r2
 8006bce:	461d      	mov	r5, r3
 8006bd0:	6828      	ldr	r0, [r5, #0]
 8006bd2:	6869      	ldr	r1, [r5, #4]
 8006bd4:	68aa      	ldr	r2, [r5, #8]
 8006bd6:	68eb      	ldr	r3, [r5, #12]
 8006bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bda:	7c2b      	ldrb	r3, [r5, #16]
 8006bdc:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006bde:	4a68      	ldr	r2, [pc, #416]	@ (8006d80 <loadMenuTexts+0xd70>)
 8006be0:	4b68      	ldr	r3, [pc, #416]	@ (8006d84 <loadMenuTexts+0xd74>)
 8006be2:	4614      	mov	r4, r2
 8006be4:	461d      	mov	r5, r3
 8006be6:	6828      	ldr	r0, [r5, #0]
 8006be8:	6869      	ldr	r1, [r5, #4]
 8006bea:	68aa      	ldr	r2, [r5, #8]
 8006bec:	68eb      	ldr	r3, [r5, #12]
 8006bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bf0:	7c2b      	ldrb	r3, [r5, #16]
 8006bf2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006bf4:	4a64      	ldr	r2, [pc, #400]	@ (8006d88 <loadMenuTexts+0xd78>)
 8006bf6:	4b65      	ldr	r3, [pc, #404]	@ (8006d8c <loadMenuTexts+0xd7c>)
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	461d      	mov	r5, r3
 8006bfc:	6828      	ldr	r0, [r5, #0]
 8006bfe:	6869      	ldr	r1, [r5, #4]
 8006c00:	68aa      	ldr	r2, [r5, #8]
 8006c02:	68eb      	ldr	r3, [r5, #12]
 8006c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c06:	7c2b      	ldrb	r3, [r5, #16]
 8006c08:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006c0a:	4a61      	ldr	r2, [pc, #388]	@ (8006d90 <loadMenuTexts+0xd80>)
 8006c0c:	4b61      	ldr	r3, [pc, #388]	@ (8006d94 <loadMenuTexts+0xd84>)
 8006c0e:	4614      	mov	r4, r2
 8006c10:	461d      	mov	r5, r3
 8006c12:	6828      	ldr	r0, [r5, #0]
 8006c14:	6869      	ldr	r1, [r5, #4]
 8006c16:	68aa      	ldr	r2, [r5, #8]
 8006c18:	68eb      	ldr	r3, [r5, #12]
 8006c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1c:	7c2b      	ldrb	r3, [r5, #16]
 8006c1e:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006c20:	4a5d      	ldr	r2, [pc, #372]	@ (8006d98 <loadMenuTexts+0xd88>)
 8006c22:	4b5e      	ldr	r3, [pc, #376]	@ (8006d9c <loadMenuTexts+0xd8c>)
 8006c24:	4614      	mov	r4, r2
 8006c26:	461d      	mov	r5, r3
 8006c28:	6828      	ldr	r0, [r5, #0]
 8006c2a:	6869      	ldr	r1, [r5, #4]
 8006c2c:	68aa      	ldr	r2, [r5, #8]
 8006c2e:	68eb      	ldr	r3, [r5, #12]
 8006c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c32:	7c2b      	ldrb	r3, [r5, #16]
 8006c34:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006c36:	4a5a      	ldr	r2, [pc, #360]	@ (8006da0 <loadMenuTexts+0xd90>)
 8006c38:	4b5a      	ldr	r3, [pc, #360]	@ (8006da4 <loadMenuTexts+0xd94>)
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	6828      	ldr	r0, [r5, #0]
 8006c40:	6869      	ldr	r1, [r5, #4]
 8006c42:	68aa      	ldr	r2, [r5, #8]
 8006c44:	68eb      	ldr	r3, [r5, #12]
 8006c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c48:	7c2b      	ldrb	r3, [r5, #16]
 8006c4a:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006c4c:	4a56      	ldr	r2, [pc, #344]	@ (8006da8 <loadMenuTexts+0xd98>)
 8006c4e:	4b57      	ldr	r3, [pc, #348]	@ (8006dac <loadMenuTexts+0xd9c>)
 8006c50:	4614      	mov	r4, r2
 8006c52:	461d      	mov	r5, r3
 8006c54:	6828      	ldr	r0, [r5, #0]
 8006c56:	6869      	ldr	r1, [r5, #4]
 8006c58:	68aa      	ldr	r2, [r5, #8]
 8006c5a:	68eb      	ldr	r3, [r5, #12]
 8006c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c5e:	7c2b      	ldrb	r3, [r5, #16]
 8006c60:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006c62:	4a53      	ldr	r2, [pc, #332]	@ (8006db0 <loadMenuTexts+0xda0>)
 8006c64:	4b53      	ldr	r3, [pc, #332]	@ (8006db4 <loadMenuTexts+0xda4>)
 8006c66:	4614      	mov	r4, r2
 8006c68:	461d      	mov	r5, r3
 8006c6a:	6828      	ldr	r0, [r5, #0]
 8006c6c:	6869      	ldr	r1, [r5, #4]
 8006c6e:	68aa      	ldr	r2, [r5, #8]
 8006c70:	68eb      	ldr	r3, [r5, #12]
 8006c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c74:	7c2b      	ldrb	r3, [r5, #16]
 8006c76:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006c78:	4a4f      	ldr	r2, [pc, #316]	@ (8006db8 <loadMenuTexts+0xda8>)
 8006c7a:	4b50      	ldr	r3, [pc, #320]	@ (8006dbc <loadMenuTexts+0xdac>)
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	461d      	mov	r5, r3
 8006c80:	6828      	ldr	r0, [r5, #0]
 8006c82:	6869      	ldr	r1, [r5, #4]
 8006c84:	68aa      	ldr	r2, [r5, #8]
 8006c86:	68eb      	ldr	r3, [r5, #12]
 8006c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c8a:	7c2b      	ldrb	r3, [r5, #16]
 8006c8c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006c8e:	4a4c      	ldr	r2, [pc, #304]	@ (8006dc0 <loadMenuTexts+0xdb0>)
 8006c90:	4b4c      	ldr	r3, [pc, #304]	@ (8006dc4 <loadMenuTexts+0xdb4>)
 8006c92:	4614      	mov	r4, r2
 8006c94:	461d      	mov	r5, r3
 8006c96:	6828      	ldr	r0, [r5, #0]
 8006c98:	6869      	ldr	r1, [r5, #4]
 8006c9a:	68aa      	ldr	r2, [r5, #8]
 8006c9c:	68eb      	ldr	r3, [r5, #12]
 8006c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca0:	7c2b      	ldrb	r3, [r5, #16]
 8006ca2:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006ca4:	4a48      	ldr	r2, [pc, #288]	@ (8006dc8 <loadMenuTexts+0xdb8>)
 8006ca6:	e091      	b.n	8006dcc <loadMenuTexts+0xdbc>
 8006ca8:	200010c0 	.word	0x200010c0
 8006cac:	20000708 	.word	0x20000708
 8006cb0:	200010d4 	.word	0x200010d4
 8006cb4:	2000071c 	.word	0x2000071c
 8006cb8:	200010e8 	.word	0x200010e8
 8006cbc:	20000730 	.word	0x20000730
 8006cc0:	200010fc 	.word	0x200010fc
 8006cc4:	20000744 	.word	0x20000744
 8006cc8:	20001110 	.word	0x20001110
 8006ccc:	20000758 	.word	0x20000758
 8006cd0:	20001124 	.word	0x20001124
 8006cd4:	2000076c 	.word	0x2000076c
 8006cd8:	20001138 	.word	0x20001138
 8006cdc:	20000780 	.word	0x20000780
 8006ce0:	2000114c 	.word	0x2000114c
 8006ce4:	20000794 	.word	0x20000794
 8006ce8:	20001160 	.word	0x20001160
 8006cec:	200007a8 	.word	0x200007a8
 8006cf0:	20001174 	.word	0x20001174
 8006cf4:	200007bc 	.word	0x200007bc
 8006cf8:	20001188 	.word	0x20001188
 8006cfc:	200007d0 	.word	0x200007d0
 8006d00:	2000119c 	.word	0x2000119c
 8006d04:	200007e4 	.word	0x200007e4
 8006d08:	200011b0 	.word	0x200011b0
 8006d0c:	200007f8 	.word	0x200007f8
 8006d10:	200011c4 	.word	0x200011c4
 8006d14:	2000080c 	.word	0x2000080c
 8006d18:	200011d8 	.word	0x200011d8
 8006d1c:	20000820 	.word	0x20000820
 8006d20:	200011ec 	.word	0x200011ec
 8006d24:	20000834 	.word	0x20000834
 8006d28:	20001200 	.word	0x20001200
 8006d2c:	20000848 	.word	0x20000848
 8006d30:	20001214 	.word	0x20001214
 8006d34:	2000085c 	.word	0x2000085c
 8006d38:	20001228 	.word	0x20001228
 8006d3c:	20000870 	.word	0x20000870
 8006d40:	2000123c 	.word	0x2000123c
 8006d44:	20000884 	.word	0x20000884
 8006d48:	20001250 	.word	0x20001250
 8006d4c:	20000898 	.word	0x20000898
 8006d50:	20001264 	.word	0x20001264
 8006d54:	200008ac 	.word	0x200008ac
 8006d58:	20001278 	.word	0x20001278
 8006d5c:	200008c0 	.word	0x200008c0
 8006d60:	2000128c 	.word	0x2000128c
 8006d64:	200008d4 	.word	0x200008d4
 8006d68:	200012a0 	.word	0x200012a0
 8006d6c:	200008e8 	.word	0x200008e8
 8006d70:	200012b4 	.word	0x200012b4
 8006d74:	200008fc 	.word	0x200008fc
 8006d78:	200012c8 	.word	0x200012c8
 8006d7c:	20000910 	.word	0x20000910
 8006d80:	200012dc 	.word	0x200012dc
 8006d84:	20000924 	.word	0x20000924
 8006d88:	200012f0 	.word	0x200012f0
 8006d8c:	20000938 	.word	0x20000938
 8006d90:	20001304 	.word	0x20001304
 8006d94:	2000094c 	.word	0x2000094c
 8006d98:	20001318 	.word	0x20001318
 8006d9c:	20000960 	.word	0x20000960
 8006da0:	2000132c 	.word	0x2000132c
 8006da4:	20000974 	.word	0x20000974
 8006da8:	20001340 	.word	0x20001340
 8006dac:	20000988 	.word	0x20000988
 8006db0:	20001354 	.word	0x20001354
 8006db4:	2000099c 	.word	0x2000099c
 8006db8:	20001368 	.word	0x20001368
 8006dbc:	200009b0 	.word	0x200009b0
 8006dc0:	2000137c 	.word	0x2000137c
 8006dc4:	200009c4 	.word	0x200009c4
 8006dc8:	20001390 	.word	0x20001390
 8006dcc:	4bc7      	ldr	r3, [pc, #796]	@ (80070ec <loadMenuTexts+0x10dc>)
 8006dce:	4614      	mov	r4, r2
 8006dd0:	461d      	mov	r5, r3
 8006dd2:	6828      	ldr	r0, [r5, #0]
 8006dd4:	6869      	ldr	r1, [r5, #4]
 8006dd6:	68aa      	ldr	r2, [r5, #8]
 8006dd8:	68eb      	ldr	r3, [r5, #12]
 8006dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ddc:	7c2b      	ldrb	r3, [r5, #16]
 8006dde:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006de0:	4ac3      	ldr	r2, [pc, #780]	@ (80070f0 <loadMenuTexts+0x10e0>)
 8006de2:	4bc4      	ldr	r3, [pc, #784]	@ (80070f4 <loadMenuTexts+0x10e4>)
 8006de4:	4614      	mov	r4, r2
 8006de6:	461d      	mov	r5, r3
 8006de8:	6828      	ldr	r0, [r5, #0]
 8006dea:	6869      	ldr	r1, [r5, #4]
 8006dec:	68aa      	ldr	r2, [r5, #8]
 8006dee:	68eb      	ldr	r3, [r5, #12]
 8006df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006df2:	7c2b      	ldrb	r3, [r5, #16]
 8006df4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006df6:	4ac0      	ldr	r2, [pc, #768]	@ (80070f8 <loadMenuTexts+0x10e8>)
 8006df8:	4bc0      	ldr	r3, [pc, #768]	@ (80070fc <loadMenuTexts+0x10ec>)
 8006dfa:	4614      	mov	r4, r2
 8006dfc:	461d      	mov	r5, r3
 8006dfe:	6828      	ldr	r0, [r5, #0]
 8006e00:	6869      	ldr	r1, [r5, #4]
 8006e02:	68aa      	ldr	r2, [r5, #8]
 8006e04:	68eb      	ldr	r3, [r5, #12]
 8006e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e08:	7c2b      	ldrb	r3, [r5, #16]
 8006e0a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006e0c:	4abc      	ldr	r2, [pc, #752]	@ (8007100 <loadMenuTexts+0x10f0>)
 8006e0e:	4bbd      	ldr	r3, [pc, #756]	@ (8007104 <loadMenuTexts+0x10f4>)
 8006e10:	4614      	mov	r4, r2
 8006e12:	461d      	mov	r5, r3
 8006e14:	6828      	ldr	r0, [r5, #0]
 8006e16:	6869      	ldr	r1, [r5, #4]
 8006e18:	68aa      	ldr	r2, [r5, #8]
 8006e1a:	68eb      	ldr	r3, [r5, #12]
 8006e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e1e:	7c2b      	ldrb	r3, [r5, #16]
 8006e20:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006e22:	4ab9      	ldr	r2, [pc, #740]	@ (8007108 <loadMenuTexts+0x10f8>)
 8006e24:	4bb9      	ldr	r3, [pc, #740]	@ (800710c <loadMenuTexts+0x10fc>)
 8006e26:	4614      	mov	r4, r2
 8006e28:	461d      	mov	r5, r3
 8006e2a:	6828      	ldr	r0, [r5, #0]
 8006e2c:	6869      	ldr	r1, [r5, #4]
 8006e2e:	68aa      	ldr	r2, [r5, #8]
 8006e30:	68eb      	ldr	r3, [r5, #12]
 8006e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e34:	7c2b      	ldrb	r3, [r5, #16]
 8006e36:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006e38:	4ab5      	ldr	r2, [pc, #724]	@ (8007110 <loadMenuTexts+0x1100>)
 8006e3a:	4bb6      	ldr	r3, [pc, #728]	@ (8007114 <loadMenuTexts+0x1104>)
 8006e3c:	4614      	mov	r4, r2
 8006e3e:	461d      	mov	r5, r3
 8006e40:	6828      	ldr	r0, [r5, #0]
 8006e42:	6869      	ldr	r1, [r5, #4]
 8006e44:	68aa      	ldr	r2, [r5, #8]
 8006e46:	68eb      	ldr	r3, [r5, #12]
 8006e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e4a:	7c2b      	ldrb	r3, [r5, #16]
 8006e4c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006e4e:	4ab2      	ldr	r2, [pc, #712]	@ (8007118 <loadMenuTexts+0x1108>)
 8006e50:	4bb2      	ldr	r3, [pc, #712]	@ (800711c <loadMenuTexts+0x110c>)
 8006e52:	4614      	mov	r4, r2
 8006e54:	461d      	mov	r5, r3
 8006e56:	6828      	ldr	r0, [r5, #0]
 8006e58:	6869      	ldr	r1, [r5, #4]
 8006e5a:	68aa      	ldr	r2, [r5, #8]
 8006e5c:	68eb      	ldr	r3, [r5, #12]
 8006e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e60:	7c2b      	ldrb	r3, [r5, #16]
 8006e62:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006e64:	4aae      	ldr	r2, [pc, #696]	@ (8007120 <loadMenuTexts+0x1110>)
 8006e66:	4baf      	ldr	r3, [pc, #700]	@ (8007124 <loadMenuTexts+0x1114>)
 8006e68:	4614      	mov	r4, r2
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	6828      	ldr	r0, [r5, #0]
 8006e6e:	6869      	ldr	r1, [r5, #4]
 8006e70:	68aa      	ldr	r2, [r5, #8]
 8006e72:	68eb      	ldr	r3, [r5, #12]
 8006e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e76:	7c2b      	ldrb	r3, [r5, #16]
 8006e78:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006e7a:	4aab      	ldr	r2, [pc, #684]	@ (8007128 <loadMenuTexts+0x1118>)
 8006e7c:	4bab      	ldr	r3, [pc, #684]	@ (800712c <loadMenuTexts+0x111c>)
 8006e7e:	4614      	mov	r4, r2
 8006e80:	461d      	mov	r5, r3
 8006e82:	6828      	ldr	r0, [r5, #0]
 8006e84:	6869      	ldr	r1, [r5, #4]
 8006e86:	68aa      	ldr	r2, [r5, #8]
 8006e88:	68eb      	ldr	r3, [r5, #12]
 8006e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e8c:	7c2b      	ldrb	r3, [r5, #16]
 8006e8e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006e90:	4aa7      	ldr	r2, [pc, #668]	@ (8007130 <loadMenuTexts+0x1120>)
 8006e92:	4ba8      	ldr	r3, [pc, #672]	@ (8007134 <loadMenuTexts+0x1124>)
 8006e94:	4614      	mov	r4, r2
 8006e96:	461d      	mov	r5, r3
 8006e98:	6828      	ldr	r0, [r5, #0]
 8006e9a:	6869      	ldr	r1, [r5, #4]
 8006e9c:	68aa      	ldr	r2, [r5, #8]
 8006e9e:	68eb      	ldr	r3, [r5, #12]
 8006ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea2:	7c2b      	ldrb	r3, [r5, #16]
 8006ea4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006ea6:	4aa4      	ldr	r2, [pc, #656]	@ (8007138 <loadMenuTexts+0x1128>)
 8006ea8:	4ba4      	ldr	r3, [pc, #656]	@ (800713c <loadMenuTexts+0x112c>)
 8006eaa:	4614      	mov	r4, r2
 8006eac:	461d      	mov	r5, r3
 8006eae:	6828      	ldr	r0, [r5, #0]
 8006eb0:	6869      	ldr	r1, [r5, #4]
 8006eb2:	68aa      	ldr	r2, [r5, #8]
 8006eb4:	68eb      	ldr	r3, [r5, #12]
 8006eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb8:	7c2b      	ldrb	r3, [r5, #16]
 8006eba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006ebc:	4aa0      	ldr	r2, [pc, #640]	@ (8007140 <loadMenuTexts+0x1130>)
 8006ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8007144 <loadMenuTexts+0x1134>)
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	461d      	mov	r5, r3
 8006ec4:	6828      	ldr	r0, [r5, #0]
 8006ec6:	6869      	ldr	r1, [r5, #4]
 8006ec8:	68aa      	ldr	r2, [r5, #8]
 8006eca:	68eb      	ldr	r3, [r5, #12]
 8006ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ece:	7c2b      	ldrb	r3, [r5, #16]
 8006ed0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006ed2:	4a9d      	ldr	r2, [pc, #628]	@ (8007148 <loadMenuTexts+0x1138>)
 8006ed4:	4b9d      	ldr	r3, [pc, #628]	@ (800714c <loadMenuTexts+0x113c>)
 8006ed6:	4614      	mov	r4, r2
 8006ed8:	461d      	mov	r5, r3
 8006eda:	6828      	ldr	r0, [r5, #0]
 8006edc:	6869      	ldr	r1, [r5, #4]
 8006ede:	68aa      	ldr	r2, [r5, #8]
 8006ee0:	68eb      	ldr	r3, [r5, #12]
 8006ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee4:	7c2b      	ldrb	r3, [r5, #16]
 8006ee6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006ee8:	4a99      	ldr	r2, [pc, #612]	@ (8007150 <loadMenuTexts+0x1140>)
 8006eea:	4b9a      	ldr	r3, [pc, #616]	@ (8007154 <loadMenuTexts+0x1144>)
 8006eec:	4614      	mov	r4, r2
 8006eee:	461d      	mov	r5, r3
 8006ef0:	6828      	ldr	r0, [r5, #0]
 8006ef2:	6869      	ldr	r1, [r5, #4]
 8006ef4:	68aa      	ldr	r2, [r5, #8]
 8006ef6:	68eb      	ldr	r3, [r5, #12]
 8006ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006efa:	7c2b      	ldrb	r3, [r5, #16]
 8006efc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006efe:	4a96      	ldr	r2, [pc, #600]	@ (8007158 <loadMenuTexts+0x1148>)
 8006f00:	4b96      	ldr	r3, [pc, #600]	@ (800715c <loadMenuTexts+0x114c>)
 8006f02:	4614      	mov	r4, r2
 8006f04:	461d      	mov	r5, r3
 8006f06:	6828      	ldr	r0, [r5, #0]
 8006f08:	6869      	ldr	r1, [r5, #4]
 8006f0a:	68aa      	ldr	r2, [r5, #8]
 8006f0c:	68eb      	ldr	r3, [r5, #12]
 8006f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f10:	7c2b      	ldrb	r3, [r5, #16]
 8006f12:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006f14:	4a92      	ldr	r2, [pc, #584]	@ (8007160 <loadMenuTexts+0x1150>)
 8006f16:	4b93      	ldr	r3, [pc, #588]	@ (8007164 <loadMenuTexts+0x1154>)
 8006f18:	4614      	mov	r4, r2
 8006f1a:	461d      	mov	r5, r3
 8006f1c:	6828      	ldr	r0, [r5, #0]
 8006f1e:	6869      	ldr	r1, [r5, #4]
 8006f20:	68aa      	ldr	r2, [r5, #8]
 8006f22:	68eb      	ldr	r3, [r5, #12]
 8006f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f26:	7c2b      	ldrb	r3, [r5, #16]
 8006f28:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006f2a:	4a8f      	ldr	r2, [pc, #572]	@ (8007168 <loadMenuTexts+0x1158>)
 8006f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800716c <loadMenuTexts+0x115c>)
 8006f2e:	4614      	mov	r4, r2
 8006f30:	461d      	mov	r5, r3
 8006f32:	6828      	ldr	r0, [r5, #0]
 8006f34:	6869      	ldr	r1, [r5, #4]
 8006f36:	68aa      	ldr	r2, [r5, #8]
 8006f38:	68eb      	ldr	r3, [r5, #12]
 8006f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f3c:	7c2b      	ldrb	r3, [r5, #16]
 8006f3e:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006f40:	4a8b      	ldr	r2, [pc, #556]	@ (8007170 <loadMenuTexts+0x1160>)
 8006f42:	4b8c      	ldr	r3, [pc, #560]	@ (8007174 <loadMenuTexts+0x1164>)
 8006f44:	4614      	mov	r4, r2
 8006f46:	461d      	mov	r5, r3
 8006f48:	6828      	ldr	r0, [r5, #0]
 8006f4a:	6869      	ldr	r1, [r5, #4]
 8006f4c:	68aa      	ldr	r2, [r5, #8]
 8006f4e:	68eb      	ldr	r3, [r5, #12]
 8006f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f52:	7c2b      	ldrb	r3, [r5, #16]
 8006f54:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006f56:	4a88      	ldr	r2, [pc, #544]	@ (8007178 <loadMenuTexts+0x1168>)
 8006f58:	4b88      	ldr	r3, [pc, #544]	@ (800717c <loadMenuTexts+0x116c>)
 8006f5a:	4614      	mov	r4, r2
 8006f5c:	461d      	mov	r5, r3
 8006f5e:	6828      	ldr	r0, [r5, #0]
 8006f60:	6869      	ldr	r1, [r5, #4]
 8006f62:	68aa      	ldr	r2, [r5, #8]
 8006f64:	68eb      	ldr	r3, [r5, #12]
 8006f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f68:	7c2b      	ldrb	r3, [r5, #16]
 8006f6a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006f6c:	4a84      	ldr	r2, [pc, #528]	@ (8007180 <loadMenuTexts+0x1170>)
 8006f6e:	4b85      	ldr	r3, [pc, #532]	@ (8007184 <loadMenuTexts+0x1174>)
 8006f70:	4614      	mov	r4, r2
 8006f72:	461d      	mov	r5, r3
 8006f74:	6828      	ldr	r0, [r5, #0]
 8006f76:	6869      	ldr	r1, [r5, #4]
 8006f78:	68aa      	ldr	r2, [r5, #8]
 8006f7a:	68eb      	ldr	r3, [r5, #12]
 8006f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f7e:	7c2b      	ldrb	r3, [r5, #16]
 8006f80:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006f82:	4a81      	ldr	r2, [pc, #516]	@ (8007188 <loadMenuTexts+0x1178>)
 8006f84:	4b81      	ldr	r3, [pc, #516]	@ (800718c <loadMenuTexts+0x117c>)
 8006f86:	4614      	mov	r4, r2
 8006f88:	461d      	mov	r5, r3
 8006f8a:	6828      	ldr	r0, [r5, #0]
 8006f8c:	6869      	ldr	r1, [r5, #4]
 8006f8e:	68aa      	ldr	r2, [r5, #8]
 8006f90:	68eb      	ldr	r3, [r5, #12]
 8006f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f94:	7c2b      	ldrb	r3, [r5, #16]
 8006f96:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8006f98:	4a7d      	ldr	r2, [pc, #500]	@ (8007190 <loadMenuTexts+0x1180>)
 8006f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8007194 <loadMenuTexts+0x1184>)
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	461d      	mov	r5, r3
 8006fa0:	6828      	ldr	r0, [r5, #0]
 8006fa2:	6869      	ldr	r1, [r5, #4]
 8006fa4:	68aa      	ldr	r2, [r5, #8]
 8006fa6:	68eb      	ldr	r3, [r5, #12]
 8006fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006faa:	7c2b      	ldrb	r3, [r5, #16]
 8006fac:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8006fae:	4a7a      	ldr	r2, [pc, #488]	@ (8007198 <loadMenuTexts+0x1188>)
 8006fb0:	4b7a      	ldr	r3, [pc, #488]	@ (800719c <loadMenuTexts+0x118c>)
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	461d      	mov	r5, r3
 8006fb6:	6828      	ldr	r0, [r5, #0]
 8006fb8:	6869      	ldr	r1, [r5, #4]
 8006fba:	68aa      	ldr	r2, [r5, #8]
 8006fbc:	68eb      	ldr	r3, [r5, #12]
 8006fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc0:	7c2b      	ldrb	r3, [r5, #16]
 8006fc2:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8006fc4:	4a76      	ldr	r2, [pc, #472]	@ (80071a0 <loadMenuTexts+0x1190>)
 8006fc6:	4b77      	ldr	r3, [pc, #476]	@ (80071a4 <loadMenuTexts+0x1194>)
 8006fc8:	4614      	mov	r4, r2
 8006fca:	461d      	mov	r5, r3
 8006fcc:	6828      	ldr	r0, [r5, #0]
 8006fce:	6869      	ldr	r1, [r5, #4]
 8006fd0:	68aa      	ldr	r2, [r5, #8]
 8006fd2:	68eb      	ldr	r3, [r5, #12]
 8006fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd6:	7c2b      	ldrb	r3, [r5, #16]
 8006fd8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8006fda:	4a73      	ldr	r2, [pc, #460]	@ (80071a8 <loadMenuTexts+0x1198>)
 8006fdc:	4b73      	ldr	r3, [pc, #460]	@ (80071ac <loadMenuTexts+0x119c>)
 8006fde:	4614      	mov	r4, r2
 8006fe0:	461d      	mov	r5, r3
 8006fe2:	6828      	ldr	r0, [r5, #0]
 8006fe4:	6869      	ldr	r1, [r5, #4]
 8006fe6:	68aa      	ldr	r2, [r5, #8]
 8006fe8:	68eb      	ldr	r3, [r5, #12]
 8006fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fec:	7c2b      	ldrb	r3, [r5, #16]
 8006fee:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8006ff0:	4a6f      	ldr	r2, [pc, #444]	@ (80071b0 <loadMenuTexts+0x11a0>)
 8006ff2:	4b70      	ldr	r3, [pc, #448]	@ (80071b4 <loadMenuTexts+0x11a4>)
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	461d      	mov	r5, r3
 8006ff8:	6828      	ldr	r0, [r5, #0]
 8006ffa:	6869      	ldr	r1, [r5, #4]
 8006ffc:	68aa      	ldr	r2, [r5, #8]
 8006ffe:	68eb      	ldr	r3, [r5, #12]
 8007000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007002:	7c2b      	ldrb	r3, [r5, #16]
 8007004:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007006:	4a6c      	ldr	r2, [pc, #432]	@ (80071b8 <loadMenuTexts+0x11a8>)
 8007008:	4b6c      	ldr	r3, [pc, #432]	@ (80071bc <loadMenuTexts+0x11ac>)
 800700a:	4614      	mov	r4, r2
 800700c:	461d      	mov	r5, r3
 800700e:	6828      	ldr	r0, [r5, #0]
 8007010:	6869      	ldr	r1, [r5, #4]
 8007012:	68aa      	ldr	r2, [r5, #8]
 8007014:	68eb      	ldr	r3, [r5, #12]
 8007016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007018:	7c2b      	ldrb	r3, [r5, #16]
 800701a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 800701c:	4a68      	ldr	r2, [pc, #416]	@ (80071c0 <loadMenuTexts+0x11b0>)
 800701e:	4b69      	ldr	r3, [pc, #420]	@ (80071c4 <loadMenuTexts+0x11b4>)
 8007020:	4614      	mov	r4, r2
 8007022:	461d      	mov	r5, r3
 8007024:	6828      	ldr	r0, [r5, #0]
 8007026:	6869      	ldr	r1, [r5, #4]
 8007028:	68aa      	ldr	r2, [r5, #8]
 800702a:	68eb      	ldr	r3, [r5, #12]
 800702c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702e:	7c2b      	ldrb	r3, [r5, #16]
 8007030:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8007032:	4a65      	ldr	r2, [pc, #404]	@ (80071c8 <loadMenuTexts+0x11b8>)
 8007034:	4b65      	ldr	r3, [pc, #404]	@ (80071cc <loadMenuTexts+0x11bc>)
 8007036:	4614      	mov	r4, r2
 8007038:	461d      	mov	r5, r3
 800703a:	6828      	ldr	r0, [r5, #0]
 800703c:	6869      	ldr	r1, [r5, #4]
 800703e:	68aa      	ldr	r2, [r5, #8]
 8007040:	68eb      	ldr	r3, [r5, #12]
 8007042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007044:	7c2b      	ldrb	r3, [r5, #16]
 8007046:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007048:	4a61      	ldr	r2, [pc, #388]	@ (80071d0 <loadMenuTexts+0x11c0>)
 800704a:	4b62      	ldr	r3, [pc, #392]	@ (80071d4 <loadMenuTexts+0x11c4>)
 800704c:	4614      	mov	r4, r2
 800704e:	461d      	mov	r5, r3
 8007050:	6828      	ldr	r0, [r5, #0]
 8007052:	6869      	ldr	r1, [r5, #4]
 8007054:	68aa      	ldr	r2, [r5, #8]
 8007056:	68eb      	ldr	r3, [r5, #12]
 8007058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800705a:	7c2b      	ldrb	r3, [r5, #16]
 800705c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 800705e:	4a5e      	ldr	r2, [pc, #376]	@ (80071d8 <loadMenuTexts+0x11c8>)
 8007060:	4b5e      	ldr	r3, [pc, #376]	@ (80071dc <loadMenuTexts+0x11cc>)
 8007062:	4614      	mov	r4, r2
 8007064:	461d      	mov	r5, r3
 8007066:	6828      	ldr	r0, [r5, #0]
 8007068:	6869      	ldr	r1, [r5, #4]
 800706a:	68aa      	ldr	r2, [r5, #8]
 800706c:	68eb      	ldr	r3, [r5, #12]
 800706e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007070:	7c2b      	ldrb	r3, [r5, #16]
 8007072:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007074:	4a5a      	ldr	r2, [pc, #360]	@ (80071e0 <loadMenuTexts+0x11d0>)
 8007076:	4b5b      	ldr	r3, [pc, #364]	@ (80071e4 <loadMenuTexts+0x11d4>)
 8007078:	4614      	mov	r4, r2
 800707a:	461d      	mov	r5, r3
 800707c:	6828      	ldr	r0, [r5, #0]
 800707e:	6869      	ldr	r1, [r5, #4]
 8007080:	68aa      	ldr	r2, [r5, #8]
 8007082:	68eb      	ldr	r3, [r5, #12]
 8007084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007086:	7c2b      	ldrb	r3, [r5, #16]
 8007088:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 800708a:	4a57      	ldr	r2, [pc, #348]	@ (80071e8 <loadMenuTexts+0x11d8>)
 800708c:	4b57      	ldr	r3, [pc, #348]	@ (80071ec <loadMenuTexts+0x11dc>)
 800708e:	4614      	mov	r4, r2
 8007090:	461d      	mov	r5, r3
 8007092:	6828      	ldr	r0, [r5, #0]
 8007094:	6869      	ldr	r1, [r5, #4]
 8007096:	68aa      	ldr	r2, [r5, #8]
 8007098:	68eb      	ldr	r3, [r5, #12]
 800709a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709c:	7c2b      	ldrb	r3, [r5, #16]
 800709e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80070a0:	4a53      	ldr	r2, [pc, #332]	@ (80071f0 <loadMenuTexts+0x11e0>)
 80070a2:	4b54      	ldr	r3, [pc, #336]	@ (80071f4 <loadMenuTexts+0x11e4>)
 80070a4:	4614      	mov	r4, r2
 80070a6:	461d      	mov	r5, r3
 80070a8:	6828      	ldr	r0, [r5, #0]
 80070aa:	6869      	ldr	r1, [r5, #4]
 80070ac:	68aa      	ldr	r2, [r5, #8]
 80070ae:	68eb      	ldr	r3, [r5, #12]
 80070b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b2:	7c2b      	ldrb	r3, [r5, #16]
 80070b4:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80070b6:	4a50      	ldr	r2, [pc, #320]	@ (80071f8 <loadMenuTexts+0x11e8>)
 80070b8:	4b50      	ldr	r3, [pc, #320]	@ (80071fc <loadMenuTexts+0x11ec>)
 80070ba:	4614      	mov	r4, r2
 80070bc:	461d      	mov	r5, r3
 80070be:	6828      	ldr	r0, [r5, #0]
 80070c0:	6869      	ldr	r1, [r5, #4]
 80070c2:	68aa      	ldr	r2, [r5, #8]
 80070c4:	68eb      	ldr	r3, [r5, #12]
 80070c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c8:	7c2b      	ldrb	r3, [r5, #16]
 80070ca:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80070cc:	4a4c      	ldr	r2, [pc, #304]	@ (8007200 <loadMenuTexts+0x11f0>)
 80070ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007204 <loadMenuTexts+0x11f4>)
 80070d0:	4614      	mov	r4, r2
 80070d2:	461d      	mov	r5, r3
 80070d4:	6828      	ldr	r0, [r5, #0]
 80070d6:	6869      	ldr	r1, [r5, #4]
 80070d8:	68aa      	ldr	r2, [r5, #8]
 80070da:	68eb      	ldr	r3, [r5, #12]
 80070dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070de:	7c2b      	ldrb	r3, [r5, #16]
 80070e0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80070e2:	4a49      	ldr	r2, [pc, #292]	@ (8007208 <loadMenuTexts+0x11f8>)
 80070e4:	4b49      	ldr	r3, [pc, #292]	@ (800720c <loadMenuTexts+0x11fc>)
 80070e6:	4614      	mov	r4, r2
 80070e8:	461d      	mov	r5, r3
 80070ea:	e091      	b.n	8007210 <loadMenuTexts+0x1200>
 80070ec:	200009d8 	.word	0x200009d8
 80070f0:	200013a4 	.word	0x200013a4
 80070f4:	200009ec 	.word	0x200009ec
 80070f8:	200013b8 	.word	0x200013b8
 80070fc:	20000a00 	.word	0x20000a00
 8007100:	200013cc 	.word	0x200013cc
 8007104:	20000a14 	.word	0x20000a14
 8007108:	200013e0 	.word	0x200013e0
 800710c:	20000a28 	.word	0x20000a28
 8007110:	200013f4 	.word	0x200013f4
 8007114:	20000a3c 	.word	0x20000a3c
 8007118:	20001408 	.word	0x20001408
 800711c:	20000a50 	.word	0x20000a50
 8007120:	2000141c 	.word	0x2000141c
 8007124:	20000a64 	.word	0x20000a64
 8007128:	20001430 	.word	0x20001430
 800712c:	20000a78 	.word	0x20000a78
 8007130:	20001444 	.word	0x20001444
 8007134:	20000a8c 	.word	0x20000a8c
 8007138:	20001458 	.word	0x20001458
 800713c:	20000aa0 	.word	0x20000aa0
 8007140:	2000146c 	.word	0x2000146c
 8007144:	20000ab4 	.word	0x20000ab4
 8007148:	20001480 	.word	0x20001480
 800714c:	20000ac8 	.word	0x20000ac8
 8007150:	20001494 	.word	0x20001494
 8007154:	20000adc 	.word	0x20000adc
 8007158:	200014a8 	.word	0x200014a8
 800715c:	20000af0 	.word	0x20000af0
 8007160:	200014bc 	.word	0x200014bc
 8007164:	20000b04 	.word	0x20000b04
 8007168:	200014d0 	.word	0x200014d0
 800716c:	20000b18 	.word	0x20000b18
 8007170:	200014e4 	.word	0x200014e4
 8007174:	20000b2c 	.word	0x20000b2c
 8007178:	200014f8 	.word	0x200014f8
 800717c:	20000b40 	.word	0x20000b40
 8007180:	2000150c 	.word	0x2000150c
 8007184:	20000b54 	.word	0x20000b54
 8007188:	20001520 	.word	0x20001520
 800718c:	20000b68 	.word	0x20000b68
 8007190:	20001534 	.word	0x20001534
 8007194:	20000b7c 	.word	0x20000b7c
 8007198:	20001548 	.word	0x20001548
 800719c:	20000b90 	.word	0x20000b90
 80071a0:	2000155c 	.word	0x2000155c
 80071a4:	20000ba4 	.word	0x20000ba4
 80071a8:	20001570 	.word	0x20001570
 80071ac:	20000bb8 	.word	0x20000bb8
 80071b0:	20001584 	.word	0x20001584
 80071b4:	20000bcc 	.word	0x20000bcc
 80071b8:	20001598 	.word	0x20001598
 80071bc:	20000be0 	.word	0x20000be0
 80071c0:	200015ac 	.word	0x200015ac
 80071c4:	20000bf4 	.word	0x20000bf4
 80071c8:	200015c0 	.word	0x200015c0
 80071cc:	20000c08 	.word	0x20000c08
 80071d0:	200015d4 	.word	0x200015d4
 80071d4:	20000c1c 	.word	0x20000c1c
 80071d8:	200015e8 	.word	0x200015e8
 80071dc:	20000c30 	.word	0x20000c30
 80071e0:	200015fc 	.word	0x200015fc
 80071e4:	20000c44 	.word	0x20000c44
 80071e8:	20001610 	.word	0x20001610
 80071ec:	20000c58 	.word	0x20000c58
 80071f0:	20001624 	.word	0x20001624
 80071f4:	20000c6c 	.word	0x20000c6c
 80071f8:	20001638 	.word	0x20001638
 80071fc:	20000cf8 	.word	0x20000cf8
 8007200:	2000164c 	.word	0x2000164c
 8007204:	20000d0c 	.word	0x20000d0c
 8007208:	20001660 	.word	0x20001660
 800720c:	20000cd0 	.word	0x20000cd0
 8007210:	6828      	ldr	r0, [r5, #0]
 8007212:	6869      	ldr	r1, [r5, #4]
 8007214:	68aa      	ldr	r2, [r5, #8]
 8007216:	68eb      	ldr	r3, [r5, #12]
 8007218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800721a:	7c2b      	ldrb	r3, [r5, #16]
 800721c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800721e:	4a29      	ldr	r2, [pc, #164]	@ (80072c4 <loadMenuTexts+0x12b4>)
 8007220:	4b29      	ldr	r3, [pc, #164]	@ (80072c8 <loadMenuTexts+0x12b8>)
 8007222:	4614      	mov	r4, r2
 8007224:	461d      	mov	r5, r3
 8007226:	6828      	ldr	r0, [r5, #0]
 8007228:	6869      	ldr	r1, [r5, #4]
 800722a:	68aa      	ldr	r2, [r5, #8]
 800722c:	68eb      	ldr	r3, [r5, #12]
 800722e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007230:	7c2b      	ldrb	r3, [r5, #16]
 8007232:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007234:	4a25      	ldr	r2, [pc, #148]	@ (80072cc <loadMenuTexts+0x12bc>)
 8007236:	4b26      	ldr	r3, [pc, #152]	@ (80072d0 <loadMenuTexts+0x12c0>)
 8007238:	4614      	mov	r4, r2
 800723a:	461d      	mov	r5, r3
 800723c:	6828      	ldr	r0, [r5, #0]
 800723e:	6869      	ldr	r1, [r5, #4]
 8007240:	68aa      	ldr	r2, [r5, #8]
 8007242:	68eb      	ldr	r3, [r5, #12]
 8007244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007246:	7c2b      	ldrb	r3, [r5, #16]
 8007248:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 800724a:	4a22      	ldr	r2, [pc, #136]	@ (80072d4 <loadMenuTexts+0x12c4>)
 800724c:	4b22      	ldr	r3, [pc, #136]	@ (80072d8 <loadMenuTexts+0x12c8>)
 800724e:	4614      	mov	r4, r2
 8007250:	461d      	mov	r5, r3
 8007252:	6828      	ldr	r0, [r5, #0]
 8007254:	6869      	ldr	r1, [r5, #4]
 8007256:	68aa      	ldr	r2, [r5, #8]
 8007258:	68eb      	ldr	r3, [r5, #12]
 800725a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800725c:	7c2b      	ldrb	r3, [r5, #16]
 800725e:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007260:	4a1e      	ldr	r2, [pc, #120]	@ (80072dc <loadMenuTexts+0x12cc>)
 8007262:	4b1f      	ldr	r3, [pc, #124]	@ (80072e0 <loadMenuTexts+0x12d0>)
 8007264:	4614      	mov	r4, r2
 8007266:	461d      	mov	r5, r3
 8007268:	6828      	ldr	r0, [r5, #0]
 800726a:	6869      	ldr	r1, [r5, #4]
 800726c:	68aa      	ldr	r2, [r5, #8]
 800726e:	68eb      	ldr	r3, [r5, #12]
 8007270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007272:	7c2b      	ldrb	r3, [r5, #16]
 8007274:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 8007276:	4a1b      	ldr	r2, [pc, #108]	@ (80072e4 <loadMenuTexts+0x12d4>)
 8007278:	4b1b      	ldr	r3, [pc, #108]	@ (80072e8 <loadMenuTexts+0x12d8>)
 800727a:	4614      	mov	r4, r2
 800727c:	461d      	mov	r5, r3
 800727e:	6828      	ldr	r0, [r5, #0]
 8007280:	6869      	ldr	r1, [r5, #4]
 8007282:	68aa      	ldr	r2, [r5, #8]
 8007284:	68eb      	ldr	r3, [r5, #12]
 8007286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007288:	7c2b      	ldrb	r3, [r5, #16]
 800728a:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 800728c:	4a17      	ldr	r2, [pc, #92]	@ (80072ec <loadMenuTexts+0x12dc>)
 800728e:	4b18      	ldr	r3, [pc, #96]	@ (80072f0 <loadMenuTexts+0x12e0>)
 8007290:	4614      	mov	r4, r2
 8007292:	461d      	mov	r5, r3
 8007294:	6828      	ldr	r0, [r5, #0]
 8007296:	6869      	ldr	r1, [r5, #4]
 8007298:	68aa      	ldr	r2, [r5, #8]
 800729a:	68eb      	ldr	r3, [r5, #12]
 800729c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800729e:	7c2b      	ldrb	r3, [r5, #16]
 80072a0:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80072a2:	4a14      	ldr	r2, [pc, #80]	@ (80072f4 <loadMenuTexts+0x12e4>)
 80072a4:	4b14      	ldr	r3, [pc, #80]	@ (80072f8 <loadMenuTexts+0x12e8>)
 80072a6:	4614      	mov	r4, r2
 80072a8:	461d      	mov	r5, r3
 80072aa:	6828      	ldr	r0, [r5, #0]
 80072ac:	6869      	ldr	r1, [r5, #4]
 80072ae:	68aa      	ldr	r2, [r5, #8]
 80072b0:	68eb      	ldr	r3, [r5, #12]
 80072b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b4:	7c2b      	ldrb	r3, [r5, #16]
 80072b6:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80072b8:	f000 f820 	bl	80072fc <menuVariableFinisher>
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bdb0      	pop	{r4, r5, r7, pc}
 80072c4:	20001674 	.word	0x20001674
 80072c8:	20000ce4 	.word	0x20000ce4
 80072cc:	20001688 	.word	0x20001688
 80072d0:	20000d48 	.word	0x20000d48
 80072d4:	2000169c 	.word	0x2000169c
 80072d8:	20000d5c 	.word	0x20000d5c
 80072dc:	200016b0 	.word	0x200016b0
 80072e0:	20000d98 	.word	0x20000d98
 80072e4:	200016c4 	.word	0x200016c4
 80072e8:	20000dac 	.word	0x20000dac
 80072ec:	200016d8 	.word	0x200016d8
 80072f0:	20000de8 	.word	0x20000de8
 80072f4:	200016ec 	.word	0x200016ec
 80072f8:	20000dfc 	.word	0x20000dfc

080072fc <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007300:	4b8b      	ldr	r3, [pc, #556]	@ (8007530 <menuVariableFinisher+0x234>)
 8007302:	2200      	movs	r2, #0
 8007304:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007306:	4b8b      	ldr	r3, [pc, #556]	@ (8007534 <menuVariableFinisher+0x238>)
 8007308:	2200      	movs	r2, #0
 800730a:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 800730c:	4b8a      	ldr	r3, [pc, #552]	@ (8007538 <menuVariableFinisher+0x23c>)
 800730e:	2200      	movs	r2, #0
 8007310:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8007312:	4b8a      	ldr	r3, [pc, #552]	@ (800753c <menuVariableFinisher+0x240>)
 8007314:	2200      	movs	r2, #0
 8007316:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007318:	4b89      	ldr	r3, [pc, #548]	@ (8007540 <menuVariableFinisher+0x244>)
 800731a:	2200      	movs	r2, #0
 800731c:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800731e:	4b89      	ldr	r3, [pc, #548]	@ (8007544 <menuVariableFinisher+0x248>)
 8007320:	2200      	movs	r2, #0
 8007322:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007324:	4b88      	ldr	r3, [pc, #544]	@ (8007548 <menuVariableFinisher+0x24c>)
 8007326:	2200      	movs	r2, #0
 8007328:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 800732a:	4b88      	ldr	r3, [pc, #544]	@ (800754c <menuVariableFinisher+0x250>)
 800732c:	2200      	movs	r2, #0
 800732e:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007330:	4b87      	ldr	r3, [pc, #540]	@ (8007550 <menuVariableFinisher+0x254>)
 8007332:	2200      	movs	r2, #0
 8007334:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007336:	4b87      	ldr	r3, [pc, #540]	@ (8007554 <menuVariableFinisher+0x258>)
 8007338:	2200      	movs	r2, #0
 800733a:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 800733c:	4b86      	ldr	r3, [pc, #536]	@ (8007558 <menuVariableFinisher+0x25c>)
 800733e:	2200      	movs	r2, #0
 8007340:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007342:	4b86      	ldr	r3, [pc, #536]	@ (800755c <menuVariableFinisher+0x260>)
 8007344:	2200      	movs	r2, #0
 8007346:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007348:	4b85      	ldr	r3, [pc, #532]	@ (8007560 <menuVariableFinisher+0x264>)
 800734a:	2200      	movs	r2, #0
 800734c:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 800734e:	4b85      	ldr	r3, [pc, #532]	@ (8007564 <menuVariableFinisher+0x268>)
 8007350:	2200      	movs	r2, #0
 8007352:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007354:	4b84      	ldr	r3, [pc, #528]	@ (8007568 <menuVariableFinisher+0x26c>)
 8007356:	2200      	movs	r2, #0
 8007358:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 800735a:	4b84      	ldr	r3, [pc, #528]	@ (800756c <menuVariableFinisher+0x270>)
 800735c:	2200      	movs	r2, #0
 800735e:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007360:	4b83      	ldr	r3, [pc, #524]	@ (8007570 <menuVariableFinisher+0x274>)
 8007362:	2200      	movs	r2, #0
 8007364:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8007366:	4b83      	ldr	r3, [pc, #524]	@ (8007574 <menuVariableFinisher+0x278>)
 8007368:	2200      	movs	r2, #0
 800736a:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 800736c:	4b82      	ldr	r3, [pc, #520]	@ (8007578 <menuVariableFinisher+0x27c>)
 800736e:	2200      	movs	r2, #0
 8007370:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007372:	4b82      	ldr	r3, [pc, #520]	@ (800757c <menuVariableFinisher+0x280>)
 8007374:	2200      	movs	r2, #0
 8007376:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007378:	4b81      	ldr	r3, [pc, #516]	@ (8007580 <menuVariableFinisher+0x284>)
 800737a:	2200      	movs	r2, #0
 800737c:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 800737e:	4b81      	ldr	r3, [pc, #516]	@ (8007584 <menuVariableFinisher+0x288>)
 8007380:	2200      	movs	r2, #0
 8007382:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007384:	4b80      	ldr	r3, [pc, #512]	@ (8007588 <menuVariableFinisher+0x28c>)
 8007386:	2200      	movs	r2, #0
 8007388:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800738a:	4b80      	ldr	r3, [pc, #512]	@ (800758c <menuVariableFinisher+0x290>)
 800738c:	2200      	movs	r2, #0
 800738e:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007390:	4b7f      	ldr	r3, [pc, #508]	@ (8007590 <menuVariableFinisher+0x294>)
 8007392:	2200      	movs	r2, #0
 8007394:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8007396:	4b7f      	ldr	r3, [pc, #508]	@ (8007594 <menuVariableFinisher+0x298>)
 8007398:	2200      	movs	r2, #0
 800739a:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 800739c:	4b7e      	ldr	r3, [pc, #504]	@ (8007598 <menuVariableFinisher+0x29c>)
 800739e:	2200      	movs	r2, #0
 80073a0:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80073a2:	4b7e      	ldr	r3, [pc, #504]	@ (800759c <menuVariableFinisher+0x2a0>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80073a8:	4b7d      	ldr	r3, [pc, #500]	@ (80075a0 <menuVariableFinisher+0x2a4>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80073ae:	4b7d      	ldr	r3, [pc, #500]	@ (80075a4 <menuVariableFinisher+0x2a8>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80073b4:	4b7c      	ldr	r3, [pc, #496]	@ (80075a8 <menuVariableFinisher+0x2ac>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80073ba:	4b7c      	ldr	r3, [pc, #496]	@ (80075ac <menuVariableFinisher+0x2b0>)
 80073bc:	2200      	movs	r2, #0
 80073be:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80073c0:	4b7b      	ldr	r3, [pc, #492]	@ (80075b0 <menuVariableFinisher+0x2b4>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80073c6:	4b7b      	ldr	r3, [pc, #492]	@ (80075b4 <menuVariableFinisher+0x2b8>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80073cc:	4b7a      	ldr	r3, [pc, #488]	@ (80075b8 <menuVariableFinisher+0x2bc>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80073d2:	4b7a      	ldr	r3, [pc, #488]	@ (80075bc <menuVariableFinisher+0x2c0>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80073d8:	4b79      	ldr	r3, [pc, #484]	@ (80075c0 <menuVariableFinisher+0x2c4>)
 80073da:	2200      	movs	r2, #0
 80073dc:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80073de:	4b79      	ldr	r3, [pc, #484]	@ (80075c4 <menuVariableFinisher+0x2c8>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80073e4:	4b78      	ldr	r3, [pc, #480]	@ (80075c8 <menuVariableFinisher+0x2cc>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80073ea:	4b78      	ldr	r3, [pc, #480]	@ (80075cc <menuVariableFinisher+0x2d0>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80073f0:	4b77      	ldr	r3, [pc, #476]	@ (80075d0 <menuVariableFinisher+0x2d4>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80073f6:	4b77      	ldr	r3, [pc, #476]	@ (80075d4 <menuVariableFinisher+0x2d8>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80073fc:	4b76      	ldr	r3, [pc, #472]	@ (80075d8 <menuVariableFinisher+0x2dc>)
 80073fe:	2200      	movs	r2, #0
 8007400:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8007402:	4b76      	ldr	r3, [pc, #472]	@ (80075dc <menuVariableFinisher+0x2e0>)
 8007404:	2200      	movs	r2, #0
 8007406:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007408:	4b75      	ldr	r3, [pc, #468]	@ (80075e0 <menuVariableFinisher+0x2e4>)
 800740a:	2200      	movs	r2, #0
 800740c:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800740e:	4b75      	ldr	r3, [pc, #468]	@ (80075e4 <menuVariableFinisher+0x2e8>)
 8007410:	2200      	movs	r2, #0
 8007412:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007414:	4b74      	ldr	r3, [pc, #464]	@ (80075e8 <menuVariableFinisher+0x2ec>)
 8007416:	2200      	movs	r2, #0
 8007418:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 800741a:	4b74      	ldr	r3, [pc, #464]	@ (80075ec <menuVariableFinisher+0x2f0>)
 800741c:	2200      	movs	r2, #0
 800741e:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007420:	4b73      	ldr	r3, [pc, #460]	@ (80075f0 <menuVariableFinisher+0x2f4>)
 8007422:	2200      	movs	r2, #0
 8007424:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007426:	4b73      	ldr	r3, [pc, #460]	@ (80075f4 <menuVariableFinisher+0x2f8>)
 8007428:	2200      	movs	r2, #0
 800742a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 800742c:	4b72      	ldr	r3, [pc, #456]	@ (80075f8 <menuVariableFinisher+0x2fc>)
 800742e:	2200      	movs	r2, #0
 8007430:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8007432:	4b72      	ldr	r3, [pc, #456]	@ (80075fc <menuVariableFinisher+0x300>)
 8007434:	2200      	movs	r2, #0
 8007436:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007438:	4b71      	ldr	r3, [pc, #452]	@ (8007600 <menuVariableFinisher+0x304>)
 800743a:	2200      	movs	r2, #0
 800743c:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800743e:	4b71      	ldr	r3, [pc, #452]	@ (8007604 <menuVariableFinisher+0x308>)
 8007440:	2200      	movs	r2, #0
 8007442:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007444:	4b70      	ldr	r3, [pc, #448]	@ (8007608 <menuVariableFinisher+0x30c>)
 8007446:	2200      	movs	r2, #0
 8007448:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 800744a:	4b70      	ldr	r3, [pc, #448]	@ (800760c <menuVariableFinisher+0x310>)
 800744c:	2200      	movs	r2, #0
 800744e:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007450:	4b6f      	ldr	r3, [pc, #444]	@ (8007610 <menuVariableFinisher+0x314>)
 8007452:	2200      	movs	r2, #0
 8007454:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8007456:	4b6f      	ldr	r3, [pc, #444]	@ (8007614 <menuVariableFinisher+0x318>)
 8007458:	2200      	movs	r2, #0
 800745a:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 800745c:	4b6e      	ldr	r3, [pc, #440]	@ (8007618 <menuVariableFinisher+0x31c>)
 800745e:	2200      	movs	r2, #0
 8007460:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007462:	4b6e      	ldr	r3, [pc, #440]	@ (800761c <menuVariableFinisher+0x320>)
 8007464:	2200      	movs	r2, #0
 8007466:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007468:	4b6d      	ldr	r3, [pc, #436]	@ (8007620 <menuVariableFinisher+0x324>)
 800746a:	2200      	movs	r2, #0
 800746c:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 800746e:	4b6d      	ldr	r3, [pc, #436]	@ (8007624 <menuVariableFinisher+0x328>)
 8007470:	2200      	movs	r2, #0
 8007472:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007474:	4b6c      	ldr	r3, [pc, #432]	@ (8007628 <menuVariableFinisher+0x32c>)
 8007476:	2200      	movs	r2, #0
 8007478:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 800747a:	4b6c      	ldr	r3, [pc, #432]	@ (800762c <menuVariableFinisher+0x330>)
 800747c:	2200      	movs	r2, #0
 800747e:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007480:	4b6b      	ldr	r3, [pc, #428]	@ (8007630 <menuVariableFinisher+0x334>)
 8007482:	2200      	movs	r2, #0
 8007484:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8007486:	4b6b      	ldr	r3, [pc, #428]	@ (8007634 <menuVariableFinisher+0x338>)
 8007488:	2200      	movs	r2, #0
 800748a:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 800748c:	4b6a      	ldr	r3, [pc, #424]	@ (8007638 <menuVariableFinisher+0x33c>)
 800748e:	2200      	movs	r2, #0
 8007490:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007492:	4b6a      	ldr	r3, [pc, #424]	@ (800763c <menuVariableFinisher+0x340>)
 8007494:	2200      	movs	r2, #0
 8007496:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007498:	4b69      	ldr	r3, [pc, #420]	@ (8007640 <menuVariableFinisher+0x344>)
 800749a:	2200      	movs	r2, #0
 800749c:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 800749e:	4b69      	ldr	r3, [pc, #420]	@ (8007644 <menuVariableFinisher+0x348>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80074a4:	4b68      	ldr	r3, [pc, #416]	@ (8007648 <menuVariableFinisher+0x34c>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80074aa:	4b68      	ldr	r3, [pc, #416]	@ (800764c <menuVariableFinisher+0x350>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80074b0:	4b67      	ldr	r3, [pc, #412]	@ (8007650 <menuVariableFinisher+0x354>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80074b6:	4b67      	ldr	r3, [pc, #412]	@ (8007654 <menuVariableFinisher+0x358>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80074bc:	4b66      	ldr	r3, [pc, #408]	@ (8007658 <menuVariableFinisher+0x35c>)
 80074be:	2200      	movs	r2, #0
 80074c0:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80074c2:	4b66      	ldr	r3, [pc, #408]	@ (800765c <menuVariableFinisher+0x360>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80074c8:	4b65      	ldr	r3, [pc, #404]	@ (8007660 <menuVariableFinisher+0x364>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80074ce:	4b65      	ldr	r3, [pc, #404]	@ (8007664 <menuVariableFinisher+0x368>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80074d4:	4b64      	ldr	r3, [pc, #400]	@ (8007668 <menuVariableFinisher+0x36c>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80074da:	4b64      	ldr	r3, [pc, #400]	@ (800766c <menuVariableFinisher+0x370>)
 80074dc:	2200      	movs	r2, #0
 80074de:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80074e0:	4b63      	ldr	r3, [pc, #396]	@ (8007670 <menuVariableFinisher+0x374>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80074e6:	4b63      	ldr	r3, [pc, #396]	@ (8007674 <menuVariableFinisher+0x378>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80074ec:	4b62      	ldr	r3, [pc, #392]	@ (8007678 <menuVariableFinisher+0x37c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80074f2:	4b62      	ldr	r3, [pc, #392]	@ (800767c <menuVariableFinisher+0x380>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 80074f8:	4b61      	ldr	r3, [pc, #388]	@ (8007680 <menuVariableFinisher+0x384>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80074fe:	4b61      	ldr	r3, [pc, #388]	@ (8007684 <menuVariableFinisher+0x388>)
 8007500:	2200      	movs	r2, #0
 8007502:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007504:	4b60      	ldr	r3, [pc, #384]	@ (8007688 <menuVariableFinisher+0x38c>)
 8007506:	2200      	movs	r2, #0
 8007508:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 800750a:	4b60      	ldr	r3, [pc, #384]	@ (800768c <menuVariableFinisher+0x390>)
 800750c:	2200      	movs	r2, #0
 800750e:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007510:	4b5f      	ldr	r3, [pc, #380]	@ (8007690 <menuVariableFinisher+0x394>)
 8007512:	2200      	movs	r2, #0
 8007514:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007516:	4b5f      	ldr	r3, [pc, #380]	@ (8007694 <menuVariableFinisher+0x398>)
 8007518:	2200      	movs	r2, #0
 800751a:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 800751c:	4b5e      	ldr	r3, [pc, #376]	@ (8007698 <menuVariableFinisher+0x39c>)
 800751e:	2200      	movs	r2, #0
 8007520:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8007522:	4b5e      	ldr	r3, [pc, #376]	@ (800769c <menuVariableFinisher+0x3a0>)
 8007524:	2200      	movs	r2, #0
 8007526:	741a      	strb	r2, [r3, #16]
}
 8007528:	bf00      	nop
 800752a:	46bd      	mov	sp, r7
 800752c:	bc80      	pop	{r7}
 800752e:	4770      	bx	lr
 8007530:	200000a0 	.word	0x200000a0
 8007534:	200000b4 	.word	0x200000b4
 8007538:	200000c8 	.word	0x200000c8
 800753c:	200000dc 	.word	0x200000dc
 8007540:	200000f0 	.word	0x200000f0
 8007544:	20000104 	.word	0x20000104
 8007548:	20000118 	.word	0x20000118
 800754c:	2000012c 	.word	0x2000012c
 8007550:	20000140 	.word	0x20000140
 8007554:	20000154 	.word	0x20000154
 8007558:	20000168 	.word	0x20000168
 800755c:	2000017c 	.word	0x2000017c
 8007560:	200010c0 	.word	0x200010c0
 8007564:	200010d4 	.word	0x200010d4
 8007568:	200010e8 	.word	0x200010e8
 800756c:	200010fc 	.word	0x200010fc
 8007570:	20001110 	.word	0x20001110
 8007574:	20001124 	.word	0x20001124
 8007578:	20001138 	.word	0x20001138
 800757c:	2000114c 	.word	0x2000114c
 8007580:	20001160 	.word	0x20001160
 8007584:	20001174 	.word	0x20001174
 8007588:	20001188 	.word	0x20001188
 800758c:	2000119c 	.word	0x2000119c
 8007590:	200011b0 	.word	0x200011b0
 8007594:	200011c4 	.word	0x200011c4
 8007598:	200011d8 	.word	0x200011d8
 800759c:	200011ec 	.word	0x200011ec
 80075a0:	20001200 	.word	0x20001200
 80075a4:	20001214 	.word	0x20001214
 80075a8:	20001228 	.word	0x20001228
 80075ac:	2000123c 	.word	0x2000123c
 80075b0:	20001250 	.word	0x20001250
 80075b4:	20001264 	.word	0x20001264
 80075b8:	20001278 	.word	0x20001278
 80075bc:	2000128c 	.word	0x2000128c
 80075c0:	200012a0 	.word	0x200012a0
 80075c4:	200012b4 	.word	0x200012b4
 80075c8:	200012c8 	.word	0x200012c8
 80075cc:	200012dc 	.word	0x200012dc
 80075d0:	200012f0 	.word	0x200012f0
 80075d4:	20001304 	.word	0x20001304
 80075d8:	20001318 	.word	0x20001318
 80075dc:	2000132c 	.word	0x2000132c
 80075e0:	20001340 	.word	0x20001340
 80075e4:	20001354 	.word	0x20001354
 80075e8:	20001368 	.word	0x20001368
 80075ec:	2000137c 	.word	0x2000137c
 80075f0:	20001390 	.word	0x20001390
 80075f4:	200013a4 	.word	0x200013a4
 80075f8:	200013b8 	.word	0x200013b8
 80075fc:	200013cc 	.word	0x200013cc
 8007600:	200013e0 	.word	0x200013e0
 8007604:	200013f4 	.word	0x200013f4
 8007608:	20001408 	.word	0x20001408
 800760c:	2000141c 	.word	0x2000141c
 8007610:	20001430 	.word	0x20001430
 8007614:	20001444 	.word	0x20001444
 8007618:	20001458 	.word	0x20001458
 800761c:	2000146c 	.word	0x2000146c
 8007620:	20001480 	.word	0x20001480
 8007624:	20001494 	.word	0x20001494
 8007628:	200014a8 	.word	0x200014a8
 800762c:	200014bc 	.word	0x200014bc
 8007630:	200014d0 	.word	0x200014d0
 8007634:	200014e4 	.word	0x200014e4
 8007638:	200014f8 	.word	0x200014f8
 800763c:	2000150c 	.word	0x2000150c
 8007640:	20001520 	.word	0x20001520
 8007644:	20001534 	.word	0x20001534
 8007648:	20001548 	.word	0x20001548
 800764c:	2000155c 	.word	0x2000155c
 8007650:	20001570 	.word	0x20001570
 8007654:	20001584 	.word	0x20001584
 8007658:	20001598 	.word	0x20001598
 800765c:	200015ac 	.word	0x200015ac
 8007660:	200015c0 	.word	0x200015c0
 8007664:	200015d4 	.word	0x200015d4
 8007668:	200015e8 	.word	0x200015e8
 800766c:	200015fc 	.word	0x200015fc
 8007670:	20001610 	.word	0x20001610
 8007674:	20001624 	.word	0x20001624
 8007678:	20001638 	.word	0x20001638
 800767c:	2000164c 	.word	0x2000164c
 8007680:	20001660 	.word	0x20001660
 8007684:	20001674 	.word	0x20001674
 8007688:	20001688 	.word	0x20001688
 800768c:	2000169c 	.word	0x2000169c
 8007690:	200016b0 	.word	0x200016b0
 8007694:	200016c4 	.word	0x200016c4
 8007698:	200016d8 	.word	0x200016d8
 800769c:	200016ec 	.word	0x200016ec

080076a0 <takeMachineID>:
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void takeMachineID() {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 80076a6:	2001      	movs	r0, #1
 80076a8:	f001 f82a 	bl	8008700 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 80076ac:	220c      	movs	r2, #12
 80076ae:	2100      	movs	r1, #0
 80076b0:	48a2      	ldr	r0, [pc, #648]	@ (800793c <takeMachineID+0x29c>)
 80076b2:	f005 fc59 	bl	800cf68 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 80076b6:	2305      	movs	r3, #5
 80076b8:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 80076ba:	2303      	movs	r3, #3
 80076bc:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80076be:	2300      	movs	r3, #0
 80076c0:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80076c2:	4b9f      	ldr	r3, [pc, #636]	@ (8007940 <takeMachineID+0x2a0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 80076c8:	2100      	movs	r1, #0
 80076ca:	2001      	movs	r0, #1
 80076cc:	f7f9 fb64 	bl	8000d98 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80076d0:	2108      	movs	r1, #8
 80076d2:	489c      	ldr	r0, [pc, #624]	@ (8007944 <takeMachineID+0x2a4>)
 80076d4:	f002 fae0 	bl	8009c98 <HAL_GPIO_ReadPin>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d128      	bne.n	8007730 <takeMachineID+0x90>
        	lcd_cursor(0);
 80076de:	2000      	movs	r0, #0
 80076e0:	f001 f80e 	bl	8008700 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 80076e4:	f000 fdf0 	bl	80082c8 <checkEEPROM4ID>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d00e      	beq.n	800770c <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 80076ee:	4a96      	ldr	r2, [pc, #600]	@ (8007948 <takeMachineID+0x2a8>)
 80076f0:	2101      	movs	r1, #1
 80076f2:	2001      	movs	r0, #1
 80076f4:	f000 ffa6 	bl	8008644 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 80076f8:	4a94      	ldr	r2, [pc, #592]	@ (800794c <takeMachineID+0x2ac>)
 80076fa:	2101      	movs	r1, #1
 80076fc:	2002      	movs	r0, #2
 80076fe:	f000 ffa1 	bl	8008644 <lcd_print>
        		HAL_Delay(1250);
 8007702:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007706:	f001 fcf7 	bl	80090f8 <HAL_Delay>

        		goto mainSection;
 800770a:	e7cc      	b.n	80076a6 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800770c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	236e      	movs	r3, #110	@ 0x6e
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	4b8e      	ldr	r3, [pc, #568]	@ (8007950 <takeMachineID+0x2b0>)
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	236e      	movs	r3, #110	@ 0x6e
 800771c:	2200      	movs	r2, #0
 800771e:	21a0      	movs	r1, #160	@ 0xa0
 8007720:	488c      	ldr	r0, [pc, #560]	@ (8007954 <takeMachineID+0x2b4>)
 8007722:	f002 fd73 	bl	800a20c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800772a:	f001 fce5 	bl	80090f8 <HAL_Delay>

            	break;
 800772e:	e132      	b.n	8007996 <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007730:	2101      	movs	r1, #1
 8007732:	4884      	ldr	r0, [pc, #528]	@ (8007944 <takeMachineID+0x2a4>)
 8007734:	f002 fab0 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007738:	4603      	mov	r3, r0
 800773a:	2b01      	cmp	r3, #1
 800773c:	d111      	bne.n	8007762 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b07      	cmp	r3, #7
 8007742:	d102      	bne.n	800774a <takeMachineID+0xaa>
        		cursorPosition = 10;
 8007744:	230a      	movs	r3, #10
 8007746:	60bb      	str	r3, [r7, #8]
 8007748:	e008      	b.n	800775c <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b0e      	cmp	r3, #14
 800774e:	d102      	bne.n	8007756 <takeMachineID+0xb6>
                cursorPosition = 3;
 8007750:	2303      	movs	r3, #3
 8007752:	60bb      	str	r3, [r7, #8]
 8007754:	e002      	b.n	800775c <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3301      	adds	r3, #1
 800775a:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 800775c:	2096      	movs	r0, #150	@ 0x96
 800775e:	f001 fccb 	bl	80090f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007762:	2108      	movs	r1, #8
 8007764:	487c      	ldr	r0, [pc, #496]	@ (8007958 <takeMachineID+0x2b8>)
 8007766:	f002 fa97 	bl	8009c98 <HAL_GPIO_ReadPin>
 800776a:	4603      	mov	r3, r0
 800776c:	2b01      	cmp	r3, #1
 800776e:	d111      	bne.n	8007794 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b03      	cmp	r3, #3
 8007774:	d102      	bne.n	800777c <takeMachineID+0xdc>
                cursorPosition = 14;
 8007776:	230e      	movs	r3, #14
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	e008      	b.n	800778e <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b0a      	cmp	r3, #10
 8007780:	d102      	bne.n	8007788 <takeMachineID+0xe8>
            	cursorPosition = 7;
 8007782:	2307      	movs	r3, #7
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	e002      	b.n	800778e <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	3b01      	subs	r3, #1
 800778c:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 800778e:	20fa      	movs	r0, #250	@ 0xfa
 8007790:	f001 fcb2 	bl	80090f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007794:	2102      	movs	r1, #2
 8007796:	486b      	ldr	r0, [pc, #428]	@ (8007944 <takeMachineID+0x2a4>)
 8007798:	f002 fa7e 	bl	8009c98 <HAL_GPIO_ReadPin>
 800779c:	4603      	mov	r3, r0
 800779e:	2b01      	cmp	r3, #1
 80077a0:	f040 80a1 	bne.w	80078e6 <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d10a      	bne.n	80077c0 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 80077aa:	4a64      	ldr	r2, [pc, #400]	@ (800793c <takeMachineID+0x29c>)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4413      	add	r3, r2
 80077b0:	2230      	movs	r2, #48	@ 0x30
 80077b2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 80077b4:	4a66      	ldr	r2, [pc, #408]	@ (8007950 <takeMachineID+0x2b0>)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	4413      	add	r3, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e07c      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d10a      	bne.n	80077dc <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 80077c6:	4a5d      	ldr	r2, [pc, #372]	@ (800793c <takeMachineID+0x29c>)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	2231      	movs	r2, #49	@ 0x31
 80077ce:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 80077d0:	4a5f      	ldr	r2, [pc, #380]	@ (8007950 <takeMachineID+0x2b0>)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	4413      	add	r3, r2
 80077d6:	2201      	movs	r2, #1
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	e06e      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d10a      	bne.n	80077f8 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 80077e2:	4a56      	ldr	r2, [pc, #344]	@ (800793c <takeMachineID+0x29c>)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4413      	add	r3, r2
 80077e8:	2232      	movs	r2, #50	@ 0x32
 80077ea:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 80077ec:	4a58      	ldr	r2, [pc, #352]	@ (8007950 <takeMachineID+0x2b0>)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	4413      	add	r3, r2
 80077f2:	2202      	movs	r2, #2
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e060      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b06      	cmp	r3, #6
 80077fc:	d10a      	bne.n	8007814 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 80077fe:	4a4f      	ldr	r2, [pc, #316]	@ (800793c <takeMachineID+0x29c>)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	2233      	movs	r2, #51	@ 0x33
 8007806:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007808:	4a51      	ldr	r2, [pc, #324]	@ (8007950 <takeMachineID+0x2b0>)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	4413      	add	r3, r2
 800780e:	2203      	movs	r2, #3
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e052      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b07      	cmp	r3, #7
 8007818:	d10a      	bne.n	8007830 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 800781a:	4a48      	ldr	r2, [pc, #288]	@ (800793c <takeMachineID+0x29c>)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	2234      	movs	r2, #52	@ 0x34
 8007822:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007824:	4a4a      	ldr	r2, [pc, #296]	@ (8007950 <takeMachineID+0x2b0>)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	4413      	add	r3, r2
 800782a:	2204      	movs	r2, #4
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	e044      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b0a      	cmp	r3, #10
 8007834:	d10a      	bne.n	800784c <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8007836:	4a41      	ldr	r2, [pc, #260]	@ (800793c <takeMachineID+0x29c>)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	2235      	movs	r2, #53	@ 0x35
 800783e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007840:	4a43      	ldr	r2, [pc, #268]	@ (8007950 <takeMachineID+0x2b0>)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	4413      	add	r3, r2
 8007846:	2205      	movs	r2, #5
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	e036      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b0b      	cmp	r3, #11
 8007850:	d10a      	bne.n	8007868 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8007852:	4a3a      	ldr	r2, [pc, #232]	@ (800793c <takeMachineID+0x29c>)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	2236      	movs	r2, #54	@ 0x36
 800785a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 800785c:	4a3c      	ldr	r2, [pc, #240]	@ (8007950 <takeMachineID+0x2b0>)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	4413      	add	r3, r2
 8007862:	2206      	movs	r2, #6
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	e028      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b0c      	cmp	r3, #12
 800786c:	d10a      	bne.n	8007884 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 800786e:	4a33      	ldr	r2, [pc, #204]	@ (800793c <takeMachineID+0x29c>)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	2237      	movs	r2, #55	@ 0x37
 8007876:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007878:	4a35      	ldr	r2, [pc, #212]	@ (8007950 <takeMachineID+0x2b0>)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	4413      	add	r3, r2
 800787e:	2207      	movs	r2, #7
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e01a      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b0d      	cmp	r3, #13
 8007888:	d10a      	bne.n	80078a0 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 800788a:	4a2c      	ldr	r2, [pc, #176]	@ (800793c <takeMachineID+0x29c>)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4413      	add	r3, r2
 8007890:	2238      	movs	r2, #56	@ 0x38
 8007892:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007894:	4a2e      	ldr	r2, [pc, #184]	@ (8007950 <takeMachineID+0x2b0>)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	4413      	add	r3, r2
 800789a:	2208      	movs	r2, #8
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	e00c      	b.n	80078ba <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b0e      	cmp	r3, #14
 80078a4:	d109      	bne.n	80078ba <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 80078a6:	4a25      	ldr	r2, [pc, #148]	@ (800793c <takeMachineID+0x29c>)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4413      	add	r3, r2
 80078ac:	2239      	movs	r2, #57	@ 0x39
 80078ae:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 80078b0:	4a27      	ldr	r2, [pc, #156]	@ (8007950 <takeMachineID+0x2b0>)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	2209      	movs	r2, #9
 80078b8:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	b2d9      	uxtb	r1, r3
 80078be:	4a1f      	ldr	r2, [pc, #124]	@ (800793c <takeMachineID+0x29c>)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4413      	add	r3, r2
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	2001      	movs	r0, #1
 80078ca:	f000 fed0 	bl	800866e <lcd_print_char>

        	writeLoc++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3301      	adds	r3, #1
 80078d8:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 80078e0:	2096      	movs	r0, #150	@ 0x96
 80078e2:	f001 fc09 	bl	80090f8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80078e6:	2104      	movs	r1, #4
 80078e8:	4816      	ldr	r0, [pc, #88]	@ (8007944 <takeMachineID+0x2a4>)
 80078ea:	f002 f9d5 	bl	8009c98 <HAL_GPIO_ReadPin>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d149      	bne.n	8007988 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 80078f4:	4b11      	ldr	r3, [pc, #68]	@ (800793c <takeMachineID+0x29c>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d042      	beq.n	8007982 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 80078fc:	4a0f      	ldr	r2, [pc, #60]	@ (800793c <takeMachineID+0x29c>)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007906:	4a12      	ldr	r2, [pc, #72]	@ (8007950 <takeMachineID+0x2b0>)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	4413      	add	r3, r2
 800790c:	2200      	movs	r2, #0
 800790e:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b05      	cmp	r3, #5
 8007914:	dd03      	ble.n	800791e <takeMachineID+0x27e>
                	writeLoc--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3b01      	subs	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e004      	b.n	8007928 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b04      	cmp	r3, #4
 8007922:	dc01      	bgt.n	8007928 <takeMachineID+0x288>
                	writeLoc = 5;
 8007924:	2305      	movs	r3, #5
 8007926:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dd16      	ble.n	800795c <takeMachineID+0x2bc>
                	arrayPos--;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3b01      	subs	r3, #1
 8007932:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	3b01      	subs	r3, #1
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	e017      	b.n	800796c <takeMachineID+0x2cc>
 800793c:	20000f00 	.word	0x20000f00
 8007940:	20000004 	.word	0x20000004
 8007944:	40010800 	.word	0x40010800
 8007948:	20001688 	.word	0x20001688
 800794c:	2000169c 	.word	0x2000169c
 8007950:	20000e88 	.word	0x20000e88
 8007954:	20001728 	.word	0x20001728
 8007958:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	da04      	bge.n	800796c <takeMachineID+0x2cc>
                	arrayPos = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007966:	4b0e      	ldr	r3, [pc, #56]	@ (80079a0 <takeMachineID+0x300>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	3305      	adds	r3, #5
 8007972:	b2db      	uxtb	r3, r3
 8007974:	4619      	mov	r1, r3
 8007976:	2001      	movs	r0, #1
 8007978:	f000 fe9a 	bl	80086b0 <lcd_delete_char>
                HAL_Delay(50);
 800797c:	2032      	movs	r0, #50	@ 0x32
 800797e:	f001 fbbb 	bl	80090f8 <HAL_Delay>
            }

            HAL_Delay(150);
 8007982:	2096      	movs	r0, #150	@ 0x96
 8007984:	f001 fbb8 	bl	80090f8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	4619      	mov	r1, r3
 800798e:	2002      	movs	r0, #2
 8007990:	f000 fe39 	bl	8008606 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007994:	e69c      	b.n	80076d0 <takeMachineID+0x30>
    }
}
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000004 	.word	0x20000004

080079a4 <takeWifiSSID>:

void takeWifiSSID() {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	@ 0x28
 80079a8:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 80079aa:	2001      	movs	r0, #1
 80079ac:	f000 fea8 	bl	8008700 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80079b0:	2214      	movs	r2, #20
 80079b2:	2100      	movs	r1, #0
 80079b4:	48a5      	ldr	r0, [pc, #660]	@ (8007c4c <takeWifiSSID+0x2a8>)
 80079b6:	f005 fad7 	bl	800cf68 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80079ba:	2301      	movs	r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80079be:	2307      	movs	r3, #7
 80079c0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80079c2:	2301      	movs	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80079c6:	2300      	movs	r3, #0
 80079c8:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80079ca:	4ba1      	ldr	r3, [pc, #644]	@ (8007c50 <takeWifiSSID+0x2ac>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80079d0:	2101      	movs	r1, #1
 80079d2:	2002      	movs	r0, #2
 80079d4:	f7f9 f9e0 	bl	8000d98 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80079d8:	2108      	movs	r1, #8
 80079da:	489e      	ldr	r0, [pc, #632]	@ (8007c54 <takeWifiSSID+0x2b0>)
 80079dc:	f002 f95c 	bl	8009c98 <HAL_GPIO_ReadPin>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d129      	bne.n	8007a3a <takeWifiSSID+0x96>
            lcd_cursor(0);
 80079e6:	2000      	movs	r0, #0
 80079e8:	f000 fe8a 	bl	8008700 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80079ec:	4897      	ldr	r0, [pc, #604]	@ (8007c4c <takeWifiSSID+0x2a8>)
 80079ee:	f7f8 fc19 	bl	8000224 <strlen>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b14      	cmp	r3, #20
 80079f6:	d90e      	bls.n	8007a16 <takeWifiSSID+0x72>
            	lcd_print(1, 1, ssidExceedErrorText);
 80079f8:	4a97      	ldr	r2, [pc, #604]	@ (8007c58 <takeWifiSSID+0x2b4>)
 80079fa:	2101      	movs	r1, #1
 80079fc:	2001      	movs	r0, #1
 80079fe:	f000 fe21 	bl	8008644 <lcd_print>
            	lcd_print(2, 1, ssidExceedError2Text);
 8007a02:	4a96      	ldr	r2, [pc, #600]	@ (8007c5c <takeWifiSSID+0x2b8>)
 8007a04:	2101      	movs	r1, #1
 8007a06:	2002      	movs	r0, #2
 8007a08:	f000 fe1c 	bl	8008644 <lcd_print>
                HAL_Delay(1250);
 8007a0c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007a10:	f001 fb72 	bl	80090f8 <HAL_Delay>

                goto mainSSIDSection;
 8007a14:	e7c9      	b.n	80079aa <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007a16:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007a1a:	9302      	str	r3, [sp, #8]
 8007a1c:	236e      	movs	r3, #110	@ 0x6e
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	4b8f      	ldr	r3, [pc, #572]	@ (8007c60 <takeWifiSSID+0x2bc>)
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	236e      	movs	r3, #110	@ 0x6e
 8007a26:	2200      	movs	r2, #0
 8007a28:	21a0      	movs	r1, #160	@ 0xa0
 8007a2a:	488e      	ldr	r0, [pc, #568]	@ (8007c64 <takeWifiSSID+0x2c0>)
 8007a2c:	f002 fbee 	bl	800a20c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007a30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007a34:	f001 fb60 	bl	80090f8 <HAL_Delay>

            	break;
 8007a38:	e137      	b.n	8007caa <takeWifiSSID+0x306>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	4885      	ldr	r0, [pc, #532]	@ (8007c54 <takeWifiSSID+0x2b0>)
 8007a3e:	f002 f92b 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d14d      	bne.n	8007ae4 <takeWifiSSID+0x140>
        	if(cursorPosition > 80) {
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b50      	cmp	r3, #80	@ 0x50
 8007a4c:	dd01      	ble.n	8007a52 <takeWifiSSID+0xae>
        		cursorPosition = 1;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d13f      	bne.n	8007ad8 <takeWifiSSID+0x134>
            	if(page == 1) {
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d109      	bne.n	8007a72 <takeWifiSSID+0xce>
            		cursorPosition = 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
            		page++;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	3301      	adds	r3, #1
 8007a66:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007a68:	2102      	movs	r1, #2
 8007a6a:	2002      	movs	r0, #2
 8007a6c:	f7f9 f994 	bl	8000d98 <printTemplate>
 8007a70:	e035      	b.n	8007ade <takeWifiSSID+0x13a>
            	} else if(page == 2) {
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d109      	bne.n	8007a8c <takeWifiSSID+0xe8>
            		cursorPosition = 1;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
            		page++;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007a82:	2103      	movs	r1, #3
 8007a84:	2002      	movs	r0, #2
 8007a86:	f7f9 f987 	bl	8000d98 <printTemplate>
 8007a8a:	e028      	b.n	8007ade <takeWifiSSID+0x13a>
            	} else if(page == 3) {
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d109      	bne.n	8007aa6 <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8007a92:	2301      	movs	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
            		page++;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007a9c:	2104      	movs	r1, #4
 8007a9e:	2002      	movs	r0, #2
 8007aa0:	f7f9 f97a 	bl	8000d98 <printTemplate>
 8007aa4:	e01b      	b.n	8007ade <takeWifiSSID+0x13a>
            	} else if(page == 4) {
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d109      	bne.n	8007ac0 <takeWifiSSID+0x11c>
            		cursorPosition = 1;
 8007aac:	2301      	movs	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
            		page++;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007ab6:	2105      	movs	r1, #5
 8007ab8:	2002      	movs	r0, #2
 8007aba:	f7f9 f96d 	bl	8000d98 <printTemplate>
 8007abe:	e00e      	b.n	8007ade <takeWifiSSID+0x13a>
            	} else if(page == 5) {
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b05      	cmp	r3, #5
 8007ac4:	d10b      	bne.n	8007ade <takeWifiSSID+0x13a>
            		cursorPosition = 1;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007ace:	2101      	movs	r1, #1
 8007ad0:	2002      	movs	r0, #2
 8007ad2:	f7f9 f961 	bl	8000d98 <printTemplate>
 8007ad6:	e002      	b.n	8007ade <takeWifiSSID+0x13a>
            	}
            } else {
            	cursorPosition++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007ade:	2096      	movs	r0, #150	@ 0x96
 8007ae0:	f001 fb0a 	bl	80090f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007ae4:	2108      	movs	r1, #8
 8007ae6:	4860      	ldr	r0, [pc, #384]	@ (8007c68 <takeWifiSSID+0x2c4>)
 8007ae8:	f002 f8d6 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d149      	bne.n	8007b86 <takeWifiSSID+0x1e2>
        	if(cursorPosition < 1) {
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dc01      	bgt.n	8007afc <takeWifiSSID+0x158>
        		cursorPosition = 80;
 8007af8:	2350      	movs	r3, #80	@ 0x50
 8007afa:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d13b      	bne.n	8007b7a <takeWifiSSID+0x1d6>
            	if(page == 1) {
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d108      	bne.n	8007b1a <takeWifiSSID+0x176>
            		cursorPosition = 16;
 8007b08:	2310      	movs	r3, #16
 8007b0a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007b0c:	2305      	movs	r3, #5
 8007b0e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007b10:	2105      	movs	r1, #5
 8007b12:	2002      	movs	r0, #2
 8007b14:	f7f9 f940 	bl	8000d98 <printTemplate>
 8007b18:	e032      	b.n	8007b80 <takeWifiSSID+0x1dc>
            	} else if(page == 2) {
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d108      	bne.n	8007b32 <takeWifiSSID+0x18e>
            		cursorPosition = 16;
 8007b20:	2310      	movs	r3, #16
 8007b22:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007b24:	2301      	movs	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007b28:	2101      	movs	r1, #1
 8007b2a:	2002      	movs	r0, #2
 8007b2c:	f7f9 f934 	bl	8000d98 <printTemplate>
 8007b30:	e026      	b.n	8007b80 <takeWifiSSID+0x1dc>
            	} else if(page == 3) {
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d108      	bne.n	8007b4a <takeWifiSSID+0x1a6>
            		cursorPosition = 16;
 8007b38:	2310      	movs	r3, #16
 8007b3a:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007b40:	2102      	movs	r1, #2
 8007b42:	2002      	movs	r0, #2
 8007b44:	f7f9 f928 	bl	8000d98 <printTemplate>
 8007b48:	e01a      	b.n	8007b80 <takeWifiSSID+0x1dc>
            	} else if(page == 4) {
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d108      	bne.n	8007b62 <takeWifiSSID+0x1be>
            		cursorPosition = 16;
 8007b50:	2310      	movs	r3, #16
 8007b52:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007b54:	2303      	movs	r3, #3
 8007b56:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007b58:	2103      	movs	r1, #3
 8007b5a:	2002      	movs	r0, #2
 8007b5c:	f7f9 f91c 	bl	8000d98 <printTemplate>
 8007b60:	e00e      	b.n	8007b80 <takeWifiSSID+0x1dc>
            	} else if(page == 5) {
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b05      	cmp	r3, #5
 8007b66:	d10b      	bne.n	8007b80 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 8007b68:	2310      	movs	r3, #16
 8007b6a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007b70:	2104      	movs	r1, #4
 8007b72:	2002      	movs	r0, #2
 8007b74:	f7f9 f910 	bl	8000d98 <printTemplate>
 8007b78:	e002      	b.n	8007b80 <takeWifiSSID+0x1dc>
            	}
            } else {
            	cursorPosition--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007b80:	2096      	movs	r0, #150	@ 0x96
 8007b82:	f001 fab9 	bl	80090f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007b86:	2102      	movs	r1, #2
 8007b88:	4832      	ldr	r0, [pc, #200]	@ (8007c54 <takeWifiSSID+0x2b0>)
 8007b8a:	f002 f885 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d12f      	bne.n	8007bf4 <takeWifiSSID+0x250>
            eepromData[eepromVal] = cursorPosition;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	b2d9      	uxtb	r1, r3
 8007b98:	4a31      	ldr	r2, [pc, #196]	@ (8007c60 <takeWifiSSID+0x2bc>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	460a      	mov	r2, r1
 8007ba0:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8007ba2:	4a32      	ldr	r2, [pc, #200]	@ (8007c6c <takeWifiSSID+0x2c8>)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	7819      	ldrb	r1, [r3, #0]
 8007baa:	4a28      	ldr	r2, [pc, #160]	@ (8007c4c <takeWifiSSID+0x2a8>)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4413      	add	r3, r2
 8007bb0:	460a      	mov	r2, r1
 8007bb2:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	b2d9      	uxtb	r1, r3
 8007bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8007c6c <takeWifiSSID+0x2c8>)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	f000 fd53 	bl	800866e <lcd_print_char>

            writeLoc++;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007bda:	4a21      	ldr	r2, [pc, #132]	@ (8007c60 <takeWifiSSID+0x2bc>)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4413      	add	r3, r2
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8007be4:	4a19      	ldr	r2, [pc, #100]	@ (8007c4c <takeWifiSSID+0x2a8>)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	4413      	add	r3, r2
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007bee:	2096      	movs	r0, #150	@ 0x96
 8007bf0:	f001 fa82 	bl	80090f8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007bf4:	2104      	movs	r1, #4
 8007bf6:	4817      	ldr	r0, [pc, #92]	@ (8007c54 <takeWifiSSID+0x2b0>)
 8007bf8:	f002 f84e 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d14c      	bne.n	8007c9c <takeWifiSSID+0x2f8>
        	if(strlen(wifiSSID) >= 1) {
 8007c02:	4b12      	ldr	r3, [pc, #72]	@ (8007c4c <takeWifiSSID+0x2a8>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d045      	beq.n	8007c96 <takeWifiSSID+0x2f2>
        		eepromData[eepromVal] = '\0';
 8007c0a:	4a15      	ldr	r2, [pc, #84]	@ (8007c60 <takeWifiSSID+0x2bc>)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4413      	add	r3, r2
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8007c14:	4a0d      	ldr	r2, [pc, #52]	@ (8007c4c <takeWifiSSID+0x2a8>)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4413      	add	r3, r2
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b07      	cmp	r3, #7
 8007c22:	dd03      	ble.n	8007c2c <takeWifiSSID+0x288>
        			writeLoc--;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	e004      	b.n	8007c36 <takeWifiSSID+0x292>
        		} else if(writeLoc < 7) {
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b06      	cmp	r3, #6
 8007c30:	dc01      	bgt.n	8007c36 <takeWifiSSID+0x292>
        			writeLoc = 7;
 8007c32:	2307      	movs	r3, #7
 8007c34:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dd19      	ble.n	8007c70 <takeWifiSSID+0x2cc>
        			arrayPosition--;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	607b      	str	r3, [r7, #4]
 8007c48:	e01a      	b.n	8007c80 <takeWifiSSID+0x2dc>
 8007c4a:	bf00      	nop
 8007c4c:	20000f0c 	.word	0x20000f0c
 8007c50:	20000008 	.word	0x20000008
 8007c54:	40010800 	.word	0x40010800
 8007c58:	200016b0 	.word	0x200016b0
 8007c5c:	200016c4 	.word	0x200016c4
 8007c60:	20000e88 	.word	0x20000e88
 8007c64:	20001728 	.word	0x20001728
 8007c68:	40011000 	.word	0x40011000
 8007c6c:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da04      	bge.n	8007c80 <takeWifiSSID+0x2dc>
        			arrayPosition = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb4 <takeWifiSSID+0x310>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	3307      	adds	r3, #7
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	4619      	mov	r1, r3
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	f000 fd10 	bl	80086b0 <lcd_delete_char>
        		HAL_Delay(50);
 8007c90:	2032      	movs	r0, #50	@ 0x32
 8007c92:	f001 fa31 	bl	80090f8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007c96:	2096      	movs	r0, #150	@ 0x96
 8007c98:	f001 fa2e 	bl	80090f8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	2002      	movs	r0, #2
 8007ca4:	f000 fcaf 	bl	8008606 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007ca8:	e696      	b.n	80079d8 <takeWifiSSID+0x34>
    }
}
 8007caa:	bf00      	nop
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000008 	.word	0x20000008

08007cb8 <takeWifiPass>:

void takeWifiPass() {
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	@ 0x28
 8007cbc:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f000 fd1e 	bl	8008700 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8007cc4:	2214      	movs	r2, #20
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	48a5      	ldr	r0, [pc, #660]	@ (8007f60 <takeWifiPass+0x2a8>)
 8007cca:	f005 f94d 	bl	800cf68 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007cce:	2301      	movs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007cd2:	2307      	movs	r3, #7
 8007cd4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007cde:	4ba1      	ldr	r3, [pc, #644]	@ (8007f64 <takeWifiPass+0x2ac>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	2003      	movs	r0, #3
 8007ce8:	f7f9 f856 	bl	8000d98 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007cec:	2108      	movs	r1, #8
 8007cee:	489e      	ldr	r0, [pc, #632]	@ (8007f68 <takeWifiPass+0x2b0>)
 8007cf0:	f001 ffd2 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d129      	bne.n	8007d4e <takeWifiPass+0x96>
            lcd_cursor(0);
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f000 fd00 	bl	8008700 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007d00:	4897      	ldr	r0, [pc, #604]	@ (8007f60 <takeWifiPass+0x2a8>)
 8007d02:	f7f8 fa8f 	bl	8000224 <strlen>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b14      	cmp	r3, #20
 8007d0a:	d90e      	bls.n	8007d2a <takeWifiPass+0x72>
            	lcd_print(1, 1, passExceedErrorText);
 8007d0c:	4a97      	ldr	r2, [pc, #604]	@ (8007f6c <takeWifiPass+0x2b4>)
 8007d0e:	2101      	movs	r1, #1
 8007d10:	2001      	movs	r0, #1
 8007d12:	f000 fc97 	bl	8008644 <lcd_print>
            	lcd_print(2, 1, passExceedError2Text);
 8007d16:	4a96      	ldr	r2, [pc, #600]	@ (8007f70 <takeWifiPass+0x2b8>)
 8007d18:	2101      	movs	r1, #1
 8007d1a:	2002      	movs	r0, #2
 8007d1c:	f000 fc92 	bl	8008644 <lcd_print>
                HAL_Delay(1250);
 8007d20:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007d24:	f001 f9e8 	bl	80090f8 <HAL_Delay>

                goto mainPassSection;
 8007d28:	e7c9      	b.n	8007cbe <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007d2a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007d2e:	9302      	str	r3, [sp, #8]
 8007d30:	236e      	movs	r3, #110	@ 0x6e
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	4b8f      	ldr	r3, [pc, #572]	@ (8007f74 <takeWifiPass+0x2bc>)
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	236e      	movs	r3, #110	@ 0x6e
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	21a0      	movs	r1, #160	@ 0xa0
 8007d3e:	488e      	ldr	r0, [pc, #568]	@ (8007f78 <takeWifiPass+0x2c0>)
 8007d40:	f002 fa64 	bl	800a20c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007d44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007d48:	f001 f9d6 	bl	80090f8 <HAL_Delay>

            	break;
 8007d4c:	e137      	b.n	8007fbe <takeWifiPass+0x306>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007d4e:	2101      	movs	r1, #1
 8007d50:	4885      	ldr	r0, [pc, #532]	@ (8007f68 <takeWifiPass+0x2b0>)
 8007d52:	f001 ffa1 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d14d      	bne.n	8007df8 <takeWifiPass+0x140>
        	if(cursorPosition > 80) {
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b50      	cmp	r3, #80	@ 0x50
 8007d60:	dd01      	ble.n	8007d66 <takeWifiPass+0xae>
        		cursorPosition = 1;
 8007d62:	2301      	movs	r3, #1
 8007d64:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d13f      	bne.n	8007dec <takeWifiPass+0x134>
            	if(page == 1) {
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d109      	bne.n	8007d86 <takeWifiPass+0xce>
            		cursorPosition = 1;
 8007d72:	2301      	movs	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	2003      	movs	r0, #3
 8007d80:	f7f9 f80a 	bl	8000d98 <printTemplate>
 8007d84:	e035      	b.n	8007df2 <takeWifiPass+0x13a>
            	} else if(page == 2) {
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d109      	bne.n	8007da0 <takeWifiPass+0xe8>
            		cursorPosition = 1;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	3301      	adds	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007d96:	2103      	movs	r1, #3
 8007d98:	2003      	movs	r0, #3
 8007d9a:	f7f8 fffd 	bl	8000d98 <printTemplate>
 8007d9e:	e028      	b.n	8007df2 <takeWifiPass+0x13a>
            	} else if(page == 3) {
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d109      	bne.n	8007dba <takeWifiPass+0x102>
            		cursorPosition = 1;
 8007da6:	2301      	movs	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
            		page++;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	3301      	adds	r3, #1
 8007dae:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007db0:	2104      	movs	r1, #4
 8007db2:	2003      	movs	r0, #3
 8007db4:	f7f8 fff0 	bl	8000d98 <printTemplate>
 8007db8:	e01b      	b.n	8007df2 <takeWifiPass+0x13a>
            	} else if(page == 4) {
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d109      	bne.n	8007dd4 <takeWifiPass+0x11c>
            		cursorPosition = 1;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]
            		page++;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007dca:	2105      	movs	r1, #5
 8007dcc:	2003      	movs	r0, #3
 8007dce:	f7f8 ffe3 	bl	8000d98 <printTemplate>
 8007dd2:	e00e      	b.n	8007df2 <takeWifiPass+0x13a>
            	} else if(page == 5) {
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2b05      	cmp	r3, #5
 8007dd8:	d10b      	bne.n	8007df2 <takeWifiPass+0x13a>
            		cursorPosition = 1;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007dde:	2301      	movs	r3, #1
 8007de0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007de2:	2101      	movs	r1, #1
 8007de4:	2003      	movs	r0, #3
 8007de6:	f7f8 ffd7 	bl	8000d98 <printTemplate>
 8007dea:	e002      	b.n	8007df2 <takeWifiPass+0x13a>
            	}
            } else {
            	cursorPosition++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007df2:	2096      	movs	r0, #150	@ 0x96
 8007df4:	f001 f980 	bl	80090f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007df8:	2108      	movs	r1, #8
 8007dfa:	4860      	ldr	r0, [pc, #384]	@ (8007f7c <takeWifiPass+0x2c4>)
 8007dfc:	f001 ff4c 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d149      	bne.n	8007e9a <takeWifiPass+0x1e2>
        	if(cursorPosition < 1) {
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc01      	bgt.n	8007e10 <takeWifiPass+0x158>
        		cursorPosition = 80;
 8007e0c:	2350      	movs	r3, #80	@ 0x50
 8007e0e:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d13b      	bne.n	8007e8e <takeWifiPass+0x1d6>
            	if(page == 1) {
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d108      	bne.n	8007e2e <takeWifiPass+0x176>
            		cursorPosition = 16;
 8007e1c:	2310      	movs	r3, #16
 8007e1e:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007e20:	2305      	movs	r3, #5
 8007e22:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007e24:	2105      	movs	r1, #5
 8007e26:	2003      	movs	r0, #3
 8007e28:	f7f8 ffb6 	bl	8000d98 <printTemplate>
 8007e2c:	e032      	b.n	8007e94 <takeWifiPass+0x1dc>
            	} else if(page == 2) {
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d108      	bne.n	8007e46 <takeWifiPass+0x18e>
            		cursorPosition = 16;
 8007e34:	2310      	movs	r3, #16
 8007e36:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	2003      	movs	r0, #3
 8007e40:	f7f8 ffaa 	bl	8000d98 <printTemplate>
 8007e44:	e026      	b.n	8007e94 <takeWifiPass+0x1dc>
            	} else if(page == 3) {
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d108      	bne.n	8007e5e <takeWifiPass+0x1a6>
            		cursorPosition = 16;
 8007e4c:	2310      	movs	r3, #16
 8007e4e:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007e50:	2302      	movs	r3, #2
 8007e52:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007e54:	2102      	movs	r1, #2
 8007e56:	2003      	movs	r0, #3
 8007e58:	f7f8 ff9e 	bl	8000d98 <printTemplate>
 8007e5c:	e01a      	b.n	8007e94 <takeWifiPass+0x1dc>
            	} else if(page == 4) {
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d108      	bne.n	8007e76 <takeWifiPass+0x1be>
            		cursorPosition = 16;
 8007e64:	2310      	movs	r3, #16
 8007e66:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007e6c:	2103      	movs	r1, #3
 8007e6e:	2003      	movs	r0, #3
 8007e70:	f7f8 ff92 	bl	8000d98 <printTemplate>
 8007e74:	e00e      	b.n	8007e94 <takeWifiPass+0x1dc>
            	} else if(page == 5) {
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b05      	cmp	r3, #5
 8007e7a:	d10b      	bne.n	8007e94 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 8007e7c:	2310      	movs	r3, #16
 8007e7e:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007e80:	2304      	movs	r3, #4
 8007e82:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007e84:	2104      	movs	r1, #4
 8007e86:	2003      	movs	r0, #3
 8007e88:	f7f8 ff86 	bl	8000d98 <printTemplate>
 8007e8c:	e002      	b.n	8007e94 <takeWifiPass+0x1dc>
            	}
            } else {
            	cursorPosition--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007e94:	2096      	movs	r0, #150	@ 0x96
 8007e96:	f001 f92f 	bl	80090f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	4832      	ldr	r0, [pc, #200]	@ (8007f68 <takeWifiPass+0x2b0>)
 8007e9e:	f001 fefb 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d12f      	bne.n	8007f08 <takeWifiPass+0x250>
            eepromData[eepromVal] = cursorPosition;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	b2d9      	uxtb	r1, r3
 8007eac:	4a31      	ldr	r2, [pc, #196]	@ (8007f74 <takeWifiPass+0x2bc>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	460a      	mov	r2, r1
 8007eb4:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8007eb6:	4a32      	ldr	r2, [pc, #200]	@ (8007f80 <takeWifiPass+0x2c8>)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	7819      	ldrb	r1, [r3, #0]
 8007ebe:	4a28      	ldr	r2, [pc, #160]	@ (8007f60 <takeWifiPass+0x2a8>)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	460a      	mov	r2, r1
 8007ec6:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	b2d9      	uxtb	r1, r3
 8007ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8007f80 <takeWifiPass+0x2c8>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f000 fbc9 	bl	800866e <lcd_print_char>

            writeLoc++;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3301      	adds	r3, #1
 8007eec:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007eee:	4a21      	ldr	r2, [pc, #132]	@ (8007f74 <takeWifiPass+0x2bc>)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8007ef8:	4a19      	ldr	r2, [pc, #100]	@ (8007f60 <takeWifiPass+0x2a8>)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4413      	add	r3, r2
 8007efe:	2200      	movs	r2, #0
 8007f00:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007f02:	2096      	movs	r0, #150	@ 0x96
 8007f04:	f001 f8f8 	bl	80090f8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007f08:	2104      	movs	r1, #4
 8007f0a:	4817      	ldr	r0, [pc, #92]	@ (8007f68 <takeWifiPass+0x2b0>)
 8007f0c:	f001 fec4 	bl	8009c98 <HAL_GPIO_ReadPin>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d14c      	bne.n	8007fb0 <takeWifiPass+0x2f8>
        	if(strlen(wifiPass) >= 1) {
 8007f16:	4b12      	ldr	r3, [pc, #72]	@ (8007f60 <takeWifiPass+0x2a8>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d045      	beq.n	8007faa <takeWifiPass+0x2f2>
        		eepromData[eepromVal] = '\0';
 8007f1e:	4a15      	ldr	r2, [pc, #84]	@ (8007f74 <takeWifiPass+0x2bc>)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4413      	add	r3, r2
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8007f28:	4a0d      	ldr	r2, [pc, #52]	@ (8007f60 <takeWifiPass+0x2a8>)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	2200      	movs	r2, #0
 8007f30:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b07      	cmp	r3, #7
 8007f36:	dd03      	ble.n	8007f40 <takeWifiPass+0x288>
        			writeLoc--;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	e004      	b.n	8007f4a <takeWifiPass+0x292>
        		} else if(writeLoc < 7) {
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b06      	cmp	r3, #6
 8007f44:	dc01      	bgt.n	8007f4a <takeWifiPass+0x292>
        			writeLoc = 7;
 8007f46:	2307      	movs	r3, #7
 8007f48:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dd19      	ble.n	8007f84 <takeWifiPass+0x2cc>
        			arrayPosition--;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	607b      	str	r3, [r7, #4]
 8007f5c:	e01a      	b.n	8007f94 <takeWifiPass+0x2dc>
 8007f5e:	bf00      	nop
 8007f60:	20000f20 	.word	0x20000f20
 8007f64:	2000000c 	.word	0x2000000c
 8007f68:	40010800 	.word	0x40010800
 8007f6c:	200016d8 	.word	0x200016d8
 8007f70:	200016ec 	.word	0x200016ec
 8007f74:	20000e88 	.word	0x20000e88
 8007f78:	20001728 	.word	0x20001728
 8007f7c:	40011000 	.word	0x40011000
 8007f80:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da04      	bge.n	8007f94 <takeWifiPass+0x2dc>
        			arrayPosition = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc8 <takeWifiPass+0x310>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	3307      	adds	r3, #7
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	f000 fb86 	bl	80086b0 <lcd_delete_char>
        		HAL_Delay(50);
 8007fa4:	2032      	movs	r0, #50	@ 0x32
 8007fa6:	f001 f8a7 	bl	80090f8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007faa:	2096      	movs	r0, #150	@ 0x96
 8007fac:	f001 f8a4 	bl	80090f8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	2002      	movs	r0, #2
 8007fb8:	f000 fb25 	bl	8008606 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007fbc:	e696      	b.n	8007cec <takeWifiPass+0x34>
    }
}
 8007fbe:	bf00      	nop
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	2000000c 	.word	0x2000000c

08007fcc <mergeData>:

char* mergeData() {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b09c      	sub	sp, #112	@ 0x70
 8007fd0:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fd6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007fda:	2229      	movs	r2, #41	@ 0x29
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f004 ffc2 	bl	800cf68 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007fe4:	4b65      	ldr	r3, [pc, #404]	@ (800817c <mergeData+0x1b0>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	703b      	strb	r3, [r7, #0]
 8007fea:	4b65      	ldr	r3, [pc, #404]	@ (8008180 <mergeData+0x1b4>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	707b      	strb	r3, [r7, #1]
 8007ff0:	4b64      	ldr	r3, [pc, #400]	@ (8008184 <mergeData+0x1b8>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	70bb      	strb	r3, [r7, #2]
 8007ff6:	4b64      	ldr	r3, [pc, #400]	@ (8008188 <mergeData+0x1bc>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	4b63      	ldr	r3, [pc, #396]	@ (800818c <mergeData+0x1c0>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	713b      	strb	r3, [r7, #4]
 8008002:	4b63      	ldr	r3, [pc, #396]	@ (8008190 <mergeData+0x1c4>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	717b      	strb	r3, [r7, #5]
 8008008:	4b62      	ldr	r3, [pc, #392]	@ (8008194 <mergeData+0x1c8>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	71bb      	strb	r3, [r7, #6]
 800800e:	4b62      	ldr	r3, [pc, #392]	@ (8008198 <mergeData+0x1cc>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
 8008014:	4b61      	ldr	r3, [pc, #388]	@ (800819c <mergeData+0x1d0>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	723b      	strb	r3, [r7, #8]
 800801a:	4b61      	ldr	r3, [pc, #388]	@ (80081a0 <mergeData+0x1d4>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	727b      	strb	r3, [r7, #9]
 8008020:	4b60      	ldr	r3, [pc, #384]	@ (80081a4 <mergeData+0x1d8>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	72bb      	strb	r3, [r7, #10]
 8008026:	4b60      	ldr	r3, [pc, #384]	@ (80081a8 <mergeData+0x1dc>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	72fb      	strb	r3, [r7, #11]
 800802c:	4b5f      	ldr	r3, [pc, #380]	@ (80081ac <mergeData+0x1e0>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	733b      	strb	r3, [r7, #12]
 8008032:	4b5f      	ldr	r3, [pc, #380]	@ (80081b0 <mergeData+0x1e4>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	737b      	strb	r3, [r7, #13]
 8008038:	4b5e      	ldr	r3, [pc, #376]	@ (80081b4 <mergeData+0x1e8>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	73bb      	strb	r3, [r7, #14]
 800803e:	4b5e      	ldr	r3, [pc, #376]	@ (80081b8 <mergeData+0x1ec>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	73fb      	strb	r3, [r7, #15]
 8008044:	4b5d      	ldr	r3, [pc, #372]	@ (80081bc <mergeData+0x1f0>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	743b      	strb	r3, [r7, #16]
 800804a:	4b5d      	ldr	r3, [pc, #372]	@ (80081c0 <mergeData+0x1f4>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	747b      	strb	r3, [r7, #17]
 8008050:	4b5c      	ldr	r3, [pc, #368]	@ (80081c4 <mergeData+0x1f8>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	74bb      	strb	r3, [r7, #18]
 8008056:	4b5c      	ldr	r3, [pc, #368]	@ (80081c8 <mergeData+0x1fc>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	74fb      	strb	r3, [r7, #19]
 800805c:	4b5b      	ldr	r3, [pc, #364]	@ (80081cc <mergeData+0x200>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	753b      	strb	r3, [r7, #20]
 8008062:	4b5b      	ldr	r3, [pc, #364]	@ (80081d0 <mergeData+0x204>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	757b      	strb	r3, [r7, #21]
 8008068:	4b5a      	ldr	r3, [pc, #360]	@ (80081d4 <mergeData+0x208>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	75bb      	strb	r3, [r7, #22]
 800806e:	4b5a      	ldr	r3, [pc, #360]	@ (80081d8 <mergeData+0x20c>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	75fb      	strb	r3, [r7, #23]
 8008074:	4b59      	ldr	r3, [pc, #356]	@ (80081dc <mergeData+0x210>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	763b      	strb	r3, [r7, #24]
 800807a:	4b59      	ldr	r3, [pc, #356]	@ (80081e0 <mergeData+0x214>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	767b      	strb	r3, [r7, #25]
 8008080:	4b58      	ldr	r3, [pc, #352]	@ (80081e4 <mergeData+0x218>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	76bb      	strb	r3, [r7, #26]
 8008086:	4b58      	ldr	r3, [pc, #352]	@ (80081e8 <mergeData+0x21c>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	76fb      	strb	r3, [r7, #27]
 800808c:	4b57      	ldr	r3, [pc, #348]	@ (80081ec <mergeData+0x220>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	773b      	strb	r3, [r7, #28]
 8008092:	4b57      	ldr	r3, [pc, #348]	@ (80081f0 <mergeData+0x224>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	777b      	strb	r3, [r7, #29]
 8008098:	4b56      	ldr	r3, [pc, #344]	@ (80081f4 <mergeData+0x228>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	77bb      	strb	r3, [r7, #30]
 800809e:	4b56      	ldr	r3, [pc, #344]	@ (80081f8 <mergeData+0x22c>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	77fb      	strb	r3, [r7, #31]
 80080a4:	4b55      	ldr	r3, [pc, #340]	@ (80081fc <mergeData+0x230>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80080ac:	4b54      	ldr	r3, [pc, #336]	@ (8008200 <mergeData+0x234>)
 80080ae:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 80080b2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[39],
 80080b6:	4b52      	ldr	r3, [pc, #328]	@ (8008200 <mergeData+0x234>)
 80080b8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 80080bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[40],
 80080c0:	4b4f      	ldr	r3, [pc, #316]	@ (8008200 <mergeData+0x234>)
 80080c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 80080c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[41],
 80080ca:	4b4d      	ldr	r3, [pc, #308]	@ (8008200 <mergeData+0x234>)
 80080cc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 80080d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[42],
 80080d4:	4b4a      	ldr	r3, [pc, #296]	@ (8008200 <mergeData+0x234>)
 80080d6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 80080da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[43],
 80080de:	4b48      	ldr	r3, [pc, #288]	@ (8008200 <mergeData+0x234>)
 80080e0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 80080e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[44],
 80080e8:	4b45      	ldr	r3, [pc, #276]	@ (8008200 <mergeData+0x234>)
 80080ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 80080ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			eepromData[45],
 80080f2:	4b43      	ldr	r3, [pc, #268]	@ (8008200 <mergeData+0x234>)
 80080f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 80080f8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			eepromData[46],
 80080fc:	4b40      	ldr	r3, [pc, #256]	@ (8008200 <mergeData+0x234>)
 80080fe:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008102:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			eepromData[47],
 8008106:	4b3e      	ldr	r3, [pc, #248]	@ (8008200 <mergeData+0x234>)
 8008108:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 800810c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008110:	2306      	movs	r3, #6
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008116:	2300      	movs	r3, #0
 8008118:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800811a:	e015      	b.n	8008148 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 800811c:	463a      	mov	r2, r7
 800811e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008120:	4413      	add	r3, r2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800812a:	4936      	ldr	r1, [pc, #216]	@ (8008204 <mergeData+0x238>)
 800812c:	4618      	mov	r0, r3
 800812e:	f004 fe97 	bl	800ce60 <siprintf>
	    strcat(combinedString, temp);
 8008132:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008136:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f004 fef1 	bl	800cf24 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008144:	3301      	adds	r3, #1
 8008146:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800814a:	2b2b      	cmp	r3, #43	@ 0x2b
 800814c:	d9e6      	bls.n	800811c <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800814e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008152:	4618      	mov	r0, r3
 8008154:	f7f8 f866 	bl	8000224 <strlen>
 8008158:	4603      	mov	r3, r0
 800815a:	3301      	adds	r3, #1
 800815c:	4618      	mov	r0, r3
 800815e:	f004 fdc9 	bl	800ccf4 <malloc>
 8008162:	4603      	mov	r3, r0
 8008164:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008166:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800816a:	4619      	mov	r1, r3
 800816c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800816e:	f004 ff3f 	bl	800cff0 <strcpy>
	return result;
 8008172:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008174:	4618      	mov	r0, r3
 8008176:	3770      	adds	r7, #112	@ 0x70
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000f6f 	.word	0x20000f6f
 8008180:	20000f61 	.word	0x20000f61
 8008184:	20000f64 	.word	0x20000f64
 8008188:	20000f65 	.word	0x20000f65
 800818c:	20000f66 	.word	0x20000f66
 8008190:	20000f6d 	.word	0x20000f6d
 8008194:	20000f67 	.word	0x20000f67
 8008198:	20000f68 	.word	0x20000f68
 800819c:	20000f6c 	.word	0x20000f6c
 80081a0:	20000f69 	.word	0x20000f69
 80081a4:	20000f79 	.word	0x20000f79
 80081a8:	20000f6a 	.word	0x20000f6a
 80081ac:	20000f7a 	.word	0x20000f7a
 80081b0:	20000f6b 	.word	0x20000f6b
 80081b4:	20000f7b 	.word	0x20000f7b
 80081b8:	20000f6e 	.word	0x20000f6e
 80081bc:	20000f70 	.word	0x20000f70
 80081c0:	20000f71 	.word	0x20000f71
 80081c4:	20000f72 	.word	0x20000f72
 80081c8:	20000f73 	.word	0x20000f73
 80081cc:	20000f74 	.word	0x20000f74
 80081d0:	20000f75 	.word	0x20000f75
 80081d4:	20000f76 	.word	0x20000f76
 80081d8:	20000f77 	.word	0x20000f77
 80081dc:	20000f78 	.word	0x20000f78
 80081e0:	20000f7c 	.word	0x20000f7c
 80081e4:	20000f7e 	.word	0x20000f7e
 80081e8:	20000f5d 	.word	0x20000f5d
 80081ec:	20000f5e 	.word	0x20000f5e
 80081f0:	20000000 	.word	0x20000000
 80081f4:	20000001 	.word	0x20000001
 80081f8:	20000f5f 	.word	0x20000f5f
 80081fc:	20000f81 	.word	0x20000f81
 8008200:	20000e88 	.word	0x20000e88
 8008204:	0800dae0 	.word	0x0800dae0

08008208 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 800820e:	4a13      	ldr	r2, [pc, #76]	@ (800825c <convertAndSendData+0x54>)
 8008210:	2101      	movs	r1, #1
 8008212:	2001      	movs	r0, #1
 8008214:	f000 fa16 	bl	8008644 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008218:	4a11      	ldr	r2, [pc, #68]	@ (8008260 <convertAndSendData+0x58>)
 800821a:	2101      	movs	r1, #1
 800821c:	2002      	movs	r0, #2
 800821e:	f000 fa11 	bl	8008644 <lcd_print>

	for(int i=0; i<2; i++) {
 8008222:	2300      	movs	r3, #0
 8008224:	607b      	str	r3, [r7, #4]
 8008226:	e00c      	b.n	8008242 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008228:	f7ff fed0 	bl	8007fcc <mergeData>
 800822c:	4603      	mov	r3, r0
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	4b0c      	ldr	r3, [pc, #48]	@ (8008264 <convertAndSendData+0x5c>)
 8008232:	4a0d      	ldr	r2, [pc, #52]	@ (8008268 <convertAndSendData+0x60>)
 8008234:	490d      	ldr	r1, [pc, #52]	@ (800826c <convertAndSendData+0x64>)
 8008236:	480e      	ldr	r0, [pc, #56]	@ (8008270 <convertAndSendData+0x68>)
 8008238:	f7f8 fb04 	bl	8000844 <sendMachineData>
	for(int i=0; i<2; i++) {
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3301      	adds	r3, #1
 8008240:	607b      	str	r3, [r7, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b01      	cmp	r3, #1
 8008246:	ddef      	ble.n	8008228 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008248:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800824c:	f000 ff54 	bl	80090f8 <HAL_Delay>
	lcd_clear();
 8008250:	f000 fa24 	bl	800869c <lcd_clear>
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20001638 	.word	0x20001638
 8008260:	2000164c 	.word	0x2000164c
 8008264:	20000f20 	.word	0x20000f20
 8008268:	20000f0c 	.word	0x20000f0c
 800826c:	20000f00 	.word	0x20000f00
 8008270:	200017c4 	.word	0x200017c4

08008274 <iotSetup>:

void iotSetup() {
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008278:	4b10      	ldr	r3, [pc, #64]	@ (80082bc <iotSetup+0x48>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d016      	beq.n	80082ae <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 8008280:	f000 f822 	bl	80082c8 <checkEEPROM4ID>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d001      	beq.n	800828e <iotSetup+0x1a>
			takeMachineID();
 800828a:	f7ff fa09 	bl	80076a0 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 800828e:	480c      	ldr	r0, [pc, #48]	@ (80082c0 <iotSetup+0x4c>)
 8008290:	f7f7 ffc8 	bl	8000224 <strlen>
 8008294:	4603      	mov	r3, r0
 8008296:	2b01      	cmp	r3, #1
 8008298:	d801      	bhi.n	800829e <iotSetup+0x2a>
			takeWifiSSID();
 800829a:	f7ff fb83 	bl	80079a4 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 800829e:	4809      	ldr	r0, [pc, #36]	@ (80082c4 <iotSetup+0x50>)
 80082a0:	f7f7 ffc0 	bl	8000224 <strlen>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d801      	bhi.n	80082ae <iotSetup+0x3a>
			takeWifiPass();
 80082aa:	f7ff fd05 	bl	8007cb8 <takeWifiPass>
			//goto takeIDSection;
		//}
	//}

	//ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
	HAL_Delay(500);
 80082ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80082b2:	f000 ff21 	bl	80090f8 <HAL_Delay>
	//convertAndSendData();
}
 80082b6:	bf00      	nop
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20000f7f 	.word	0x20000f7f
 80082c0:	20000f0c 	.word	0x20000f0c
 80082c4:	20000f20 	.word	0x20000f20

080082c8 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 80082ce:	4b0f      	ldr	r3, [pc, #60]	@ (800830c <checkEEPROM4ID+0x44>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 80082d4:	2301      	movs	r3, #1
 80082d6:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 80082d8:	2300      	movs	r3, #0
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	e00d      	b.n	80082fa <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 80082de:	4a0c      	ldr	r2, [pc, #48]	@ (8008310 <checkEEPROM4ID+0x48>)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4413      	add	r3, r2
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <checkEEPROM4ID+0x26>
			returnVal = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3301      	adds	r3, #1
 80082f8:	607b      	str	r3, [r7, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b0b      	cmp	r3, #11
 80082fe:	ddee      	ble.n	80082de <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008300:	68bb      	ldr	r3, [r7, #8]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	bc80      	pop	{r7}
 800830a:	4770      	bx	lr
 800830c:	20000004 	.word	0x20000004
 8008310:	20000e88 	.word	0x20000e88

08008314 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af02      	add	r7, sp, #8
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	f023 030f 	bic.w	r3, r3, #15
 8008324:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800832c:	7b7b      	ldrb	r3, [r7, #13]
 800832e:	f043 030c 	orr.w	r3, r3, #12
 8008332:	b2db      	uxtb	r3, r3
 8008334:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008336:	7b7b      	ldrb	r3, [r7, #13]
 8008338:	f043 0308 	orr.w	r3, r3, #8
 800833c:	b2db      	uxtb	r3, r3
 800833e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008340:	7b3b      	ldrb	r3, [r7, #12]
 8008342:	f043 030c 	orr.w	r3, r3, #12
 8008346:	b2db      	uxtb	r3, r3
 8008348:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800834a:	7b3b      	ldrb	r3, [r7, #12]
 800834c:	f043 0308 	orr.w	r3, r3, #8
 8008350:	b2db      	uxtb	r3, r3
 8008352:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008354:	bf00      	nop
 8008356:	4825      	ldr	r0, [pc, #148]	@ (80083ec <lcd_send_cmd+0xd8>)
 8008358:	f002 fac7 	bl	800a8ea <HAL_I2C_GetError>
 800835c:	4603      	mov	r3, r0
 800835e:	2b04      	cmp	r3, #4
 8008360:	d0f9      	beq.n	8008356 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008362:	bf00      	nop
 8008364:	4821      	ldr	r0, [pc, #132]	@ (80083ec <lcd_send_cmd+0xd8>)
 8008366:	f002 fab3 	bl	800a8d0 <HAL_I2C_GetState>
 800836a:	4603      	mov	r3, r0
 800836c:	2b20      	cmp	r3, #32
 800836e:	d1f9      	bne.n	8008364 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008370:	4b1f      	ldr	r3, [pc, #124]	@ (80083f0 <lcd_send_cmd+0xdc>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d116      	bne.n	80083a6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
 800837c:	e00f      	b.n	800839e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	3310      	adds	r3, #16
 8008382:	443b      	add	r3, r7
 8008384:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	f022 0208 	bic.w	r2, r2, #8
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	3310      	adds	r3, #16
 8008392:	443b      	add	r3, r7
 8008394:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	3301      	adds	r3, #1
 800839c:	73fb      	strb	r3, [r7, #15]
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d9ec      	bls.n	800837e <lcd_send_cmd+0x6a>
 80083a4:	e015      	b.n	80083d2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80083a6:	2300      	movs	r3, #0
 80083a8:	73bb      	strb	r3, [r7, #14]
 80083aa:	e00f      	b.n	80083cc <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	3310      	adds	r3, #16
 80083b0:	443b      	add	r3, r7
 80083b2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	f042 0208 	orr.w	r2, r2, #8
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	3310      	adds	r3, #16
 80083c0:	443b      	add	r3, r7
 80083c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	3301      	adds	r3, #1
 80083ca:	73bb      	strb	r3, [r7, #14]
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d9ec      	bls.n	80083ac <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80083d2:	f107 0208 	add.w	r2, r7, #8
 80083d6:	2364      	movs	r3, #100	@ 0x64
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	2304      	movs	r3, #4
 80083dc:	214e      	movs	r1, #78	@ 0x4e
 80083de:	4803      	ldr	r0, [pc, #12]	@ (80083ec <lcd_send_cmd+0xd8>)
 80083e0:	f001 fe16 	bl	800a010 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80083e4:	bf00      	nop
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20001728 	.word	0x20001728
 80083f0:	200016fd 	.word	0x200016fd

080083f4 <lcd_send_data>:

void lcd_send_data (char data) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	4603      	mov	r3, r0
 80083fc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	f023 030f 	bic.w	r3, r3, #15
 8008404:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800840c:	7b7b      	ldrb	r3, [r7, #13]
 800840e:	f043 030d 	orr.w	r3, r3, #13
 8008412:	b2db      	uxtb	r3, r3
 8008414:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008416:	7b7b      	ldrb	r3, [r7, #13]
 8008418:	f043 0309 	orr.w	r3, r3, #9
 800841c:	b2db      	uxtb	r3, r3
 800841e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008420:	7b3b      	ldrb	r3, [r7, #12]
 8008422:	f043 030d 	orr.w	r3, r3, #13
 8008426:	b2db      	uxtb	r3, r3
 8008428:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800842a:	7b3b      	ldrb	r3, [r7, #12]
 800842c:	f043 0309 	orr.w	r3, r3, #9
 8008430:	b2db      	uxtb	r3, r3
 8008432:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008434:	bf00      	nop
 8008436:	4825      	ldr	r0, [pc, #148]	@ (80084cc <lcd_send_data+0xd8>)
 8008438:	f002 fa57 	bl	800a8ea <HAL_I2C_GetError>
 800843c:	4603      	mov	r3, r0
 800843e:	2b04      	cmp	r3, #4
 8008440:	d0f9      	beq.n	8008436 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008442:	bf00      	nop
 8008444:	4821      	ldr	r0, [pc, #132]	@ (80084cc <lcd_send_data+0xd8>)
 8008446:	f002 fa43 	bl	800a8d0 <HAL_I2C_GetState>
 800844a:	4603      	mov	r3, r0
 800844c:	2b20      	cmp	r3, #32
 800844e:	d1f9      	bne.n	8008444 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008450:	4b1f      	ldr	r3, [pc, #124]	@ (80084d0 <lcd_send_data+0xdc>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d116      	bne.n	8008486 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
 800845c:	e00f      	b.n	800847e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	3310      	adds	r3, #16
 8008462:	443b      	add	r3, r7
 8008464:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	f022 0208 	bic.w	r2, r2, #8
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	3310      	adds	r3, #16
 8008472:	443b      	add	r3, r7
 8008474:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	3301      	adds	r3, #1
 800847c:	73fb      	strb	r3, [r7, #15]
 800847e:	7bfb      	ldrb	r3, [r7, #15]
 8008480:	2b03      	cmp	r3, #3
 8008482:	d9ec      	bls.n	800845e <lcd_send_data+0x6a>
 8008484:	e015      	b.n	80084b2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008486:	2300      	movs	r3, #0
 8008488:	73bb      	strb	r3, [r7, #14]
 800848a:	e00f      	b.n	80084ac <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	3310      	adds	r3, #16
 8008490:	443b      	add	r3, r7
 8008492:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	f042 0208 	orr.w	r2, r2, #8
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	3310      	adds	r3, #16
 80084a0:	443b      	add	r3, r7
 80084a2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	3301      	adds	r3, #1
 80084aa:	73bb      	strb	r3, [r7, #14]
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d9ec      	bls.n	800848c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80084b2:	f107 0208 	add.w	r2, r7, #8
 80084b6:	2364      	movs	r3, #100	@ 0x64
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	2304      	movs	r3, #4
 80084bc:	214e      	movs	r1, #78	@ 0x4e
 80084be:	4803      	ldr	r0, [pc, #12]	@ (80084cc <lcd_send_data+0xd8>)
 80084c0:	f001 fda6 	bl	800a010 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20001728 	.word	0x20001728
 80084d0:	200016fd 	.word	0x200016fd

080084d4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	while (*str) {
 80084dc:	e006      	b.n	80084ec <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff ff84 	bl	80083f4 <lcd_send_data>
	while (*str) {
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1f4      	bne.n	80084de <lcd_send_string+0xa>
	}
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af02      	add	r7, sp, #8
 8008506:	4603      	mov	r3, r0
 8008508:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	f023 030f 	bic.w	r3, r3, #15
 8008510:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008518:	7b7b      	ldrb	r3, [r7, #13]
 800851a:	f043 030d 	orr.w	r3, r3, #13
 800851e:	b2db      	uxtb	r3, r3
 8008520:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008522:	7b7b      	ldrb	r3, [r7, #13]
 8008524:	f043 0309 	orr.w	r3, r3, #9
 8008528:	b2db      	uxtb	r3, r3
 800852a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800852c:	7b3b      	ldrb	r3, [r7, #12]
 800852e:	f043 030d 	orr.w	r3, r3, #13
 8008532:	b2db      	uxtb	r3, r3
 8008534:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008536:	7b3b      	ldrb	r3, [r7, #12]
 8008538:	f043 0309 	orr.w	r3, r3, #9
 800853c:	b2db      	uxtb	r3, r3
 800853e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008540:	bf00      	nop
 8008542:	4825      	ldr	r0, [pc, #148]	@ (80085d8 <lcd_send_char+0xd8>)
 8008544:	f002 f9d1 	bl	800a8ea <HAL_I2C_GetError>
 8008548:	4603      	mov	r3, r0
 800854a:	2b04      	cmp	r3, #4
 800854c:	d0f9      	beq.n	8008542 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800854e:	bf00      	nop
 8008550:	4821      	ldr	r0, [pc, #132]	@ (80085d8 <lcd_send_char+0xd8>)
 8008552:	f002 f9bd 	bl	800a8d0 <HAL_I2C_GetState>
 8008556:	4603      	mov	r3, r0
 8008558:	2b20      	cmp	r3, #32
 800855a:	d1f9      	bne.n	8008550 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800855c:	4b1f      	ldr	r3, [pc, #124]	@ (80085dc <lcd_send_char+0xdc>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d116      	bne.n	8008592 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	e00f      	b.n	800858a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	3310      	adds	r3, #16
 800856e:	443b      	add	r3, r7
 8008570:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	f022 0208 	bic.w	r2, r2, #8
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	3310      	adds	r3, #16
 800857e:	443b      	add	r3, r7
 8008580:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	3301      	adds	r3, #1
 8008588:	73fb      	strb	r3, [r7, #15]
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	2b03      	cmp	r3, #3
 800858e:	d9ec      	bls.n	800856a <lcd_send_char+0x6a>
 8008590:	e015      	b.n	80085be <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008592:	2300      	movs	r3, #0
 8008594:	73bb      	strb	r3, [r7, #14]
 8008596:	e00f      	b.n	80085b8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	3310      	adds	r3, #16
 800859c:	443b      	add	r3, r7
 800859e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	f042 0208 	orr.w	r2, r2, #8
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	3310      	adds	r3, #16
 80085ac:	443b      	add	r3, r7
 80085ae:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	3301      	adds	r3, #1
 80085b6:	73bb      	strb	r3, [r7, #14]
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d9ec      	bls.n	8008598 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80085be:	f107 0208 	add.w	r2, r7, #8
 80085c2:	2364      	movs	r3, #100	@ 0x64
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	2304      	movs	r3, #4
 80085c8:	214e      	movs	r1, #78	@ 0x4e
 80085ca:	4803      	ldr	r0, [pc, #12]	@ (80085d8 <lcd_send_char+0xd8>)
 80085cc:	f001 fd20 	bl	800a010 <HAL_I2C_Master_Transmit>
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20001728 	.word	0x20001728
 80085dc:	200016fd 	.word	0x200016fd

080085e0 <lcd_init>:

void lcd_init (void) {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80085e4:	2002      	movs	r0, #2
 80085e6:	f7ff fe95 	bl	8008314 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80085ea:	2028      	movs	r0, #40	@ 0x28
 80085ec:	f7ff fe92 	bl	8008314 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80085f0:	200c      	movs	r0, #12
 80085f2:	f7ff fe8f 	bl	8008314 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80085f6:	2080      	movs	r0, #128	@ 0x80
 80085f8:	f7ff fe8c 	bl	8008314 <lcd_send_cmd>
	lcd_backlight(1);
 80085fc:	2001      	movs	r0, #1
 80085fe:	f000 f86d 	bl	80086dc <lcd_backlight>
}
 8008602:	bf00      	nop
 8008604:	bd80      	pop	{r7, pc}

08008606 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	4603      	mov	r3, r0
 800860e:	460a      	mov	r2, r1
 8008610:	71fb      	strb	r3, [r7, #7]
 8008612:	4613      	mov	r3, r2
 8008614:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d106      	bne.n	800862a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800861c:	79bb      	ldrb	r3, [r7, #6]
 800861e:	337f      	adds	r3, #127	@ 0x7f
 8008620:	b2db      	uxtb	r3, r3
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fe76 	bl	8008314 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008628:	e008      	b.n	800863c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d105      	bne.n	800863c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008630:	79bb      	ldrb	r3, [r7, #6]
 8008632:	3b41      	subs	r3, #65	@ 0x41
 8008634:	b2db      	uxtb	r3, r3
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff fe6c 	bl	8008314 <lcd_send_cmd>
}
 800863c:	bf00      	nop
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	603a      	str	r2, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
 8008650:	460b      	mov	r3, r1
 8008652:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008654:	79ba      	ldrb	r2, [r7, #6]
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff ffd3 	bl	8008606 <lcd_gotoxy>
	lcd_send_string(str);
 8008660:	6838      	ldr	r0, [r7, #0]
 8008662:	f7ff ff37 	bl	80084d4 <lcd_send_string>
}
 8008666:	bf00      	nop
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	4603      	mov	r3, r0
 8008676:	71fb      	strb	r3, [r7, #7]
 8008678:	460b      	mov	r3, r1
 800867a:	71bb      	strb	r3, [r7, #6]
 800867c:	4613      	mov	r3, r2
 800867e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008680:	79ba      	ldrb	r2, [r7, #6]
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff ffbd 	bl	8008606 <lcd_gotoxy>
    lcd_send_char(ch);
 800868c:	797b      	ldrb	r3, [r7, #5]
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff ff36 	bl	8008500 <lcd_send_char>
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <lcd_clear>:

void lcd_clear(void) {
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80086a0:	2001      	movs	r0, #1
 80086a2:	f7ff fe37 	bl	8008314 <lcd_send_cmd>
    HAL_Delay(2);
 80086a6:	2002      	movs	r0, #2
 80086a8:	f000 fd26 	bl	80090f8 <HAL_Delay>
}
 80086ac:	bf00      	nop
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	460a      	mov	r2, r1
 80086ba:	71fb      	strb	r3, [r7, #7]
 80086bc:	4613      	mov	r3, r2
 80086be:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80086c0:	79ba      	ldrb	r2, [r7, #6]
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff ff9d 	bl	8008606 <lcd_gotoxy>

    lcd_send_char(' ');
 80086cc:	2020      	movs	r0, #32
 80086ce:	f7ff ff17 	bl	8008500 <lcd_send_char>
}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80086e6:	4a05      	ldr	r2, [pc, #20]	@ (80086fc <lcd_backlight+0x20>)
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80086ec:	2000      	movs	r0, #0
 80086ee:	f7ff fe11 	bl	8008314 <lcd_send_cmd>
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	200016fd 	.word	0x200016fd

08008700 <lcd_cursor>:

void lcd_cursor(int state) {
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d106      	bne.n	800871c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800870e:	200e      	movs	r0, #14
 8008710:	f7ff fe00 	bl	8008314 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008714:	200f      	movs	r0, #15
 8008716:	f7ff fdfd 	bl	8008314 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800871a:	e002      	b.n	8008722 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800871c:	200c      	movs	r0, #12
 800871e:	f7ff fdf9 	bl	8008314 <lcd_send_cmd>
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008734:	4b04      	ldr	r3, [pc, #16]	@ (8008748 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3301      	adds	r3, #1
 800873a:	4a03      	ldr	r2, [pc, #12]	@ (8008748 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800873c:	6013      	str	r3, [r2, #0]
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr
 8008748:	20000f38 	.word	0x20000f38

0800874c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008750:	f000 fc70 	bl	8009034 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008754:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008758:	f000 fcce 	bl	80090f8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800875c:	f000 f89c 	bl	8008898 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008760:	f000 f9be 	bl	8008ae0 <MX_GPIO_Init>
  MX_CAN_Init();
 8008764:	f000 f8de 	bl	8008924 <MX_CAN_Init>
  MX_I2C1_Init();
 8008768:	f000 f910 	bl	800898c <MX_I2C1_Init>
  MX_TIM1_Init();
 800876c:	f000 f93c 	bl	80089e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008770:	f000 f98c 	bl	8008a8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008774:	2201      	movs	r2, #1
 8008776:	2140      	movs	r1, #64	@ 0x40
 8008778:	483e      	ldr	r0, [pc, #248]	@ (8008874 <main+0x128>)
 800877a:	f001 faa4 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800877e:	2201      	movs	r2, #1
 8008780:	2180      	movs	r1, #128	@ 0x80
 8008782:	483c      	ldr	r0, [pc, #240]	@ (8008874 <main+0x128>)
 8008784:	f001 fa9f 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008788:	200a      	movs	r0, #10
 800878a:	f000 fcb5 	bl	80090f8 <HAL_Delay>
  lcd_init();
 800878e:	f7ff ff27 	bl	80085e0 <lcd_init>
  HAL_Delay(10);
 8008792:	200a      	movs	r0, #10
 8008794:	f000 fcb0 	bl	80090f8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008798:	4837      	ldr	r0, [pc, #220]	@ (8008878 <main+0x12c>)
 800879a:	f003 f947 	bl	800ba2c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800879e:	bf00      	nop
 80087a0:	4836      	ldr	r0, [pc, #216]	@ (800887c <main+0x130>)
 80087a2:	f002 f8a2 	bl	800a8ea <HAL_I2C_GetError>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d0f9      	beq.n	80087a0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80087ac:	bf00      	nop
 80087ae:	4833      	ldr	r0, [pc, #204]	@ (800887c <main+0x130>)
 80087b0:	f002 f88e 	bl	800a8d0 <HAL_I2C_GetState>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d1f9      	bne.n	80087ae <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80087ba:	2200      	movs	r2, #0
 80087bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80087c0:	482c      	ldr	r0, [pc, #176]	@ (8008874 <main+0x128>)
 80087c2:	f001 fa80 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80087c6:	2200      	movs	r2, #0
 80087c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80087cc:	4829      	ldr	r0, [pc, #164]	@ (8008874 <main+0x128>)
 80087ce:	f001 fa7a 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80087d2:	2200      	movs	r2, #0
 80087d4:	2104      	movs	r1, #4
 80087d6:	4827      	ldr	r0, [pc, #156]	@ (8008874 <main+0x128>)
 80087d8:	f001 fa75 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80087dc:	2200      	movs	r2, #0
 80087de:	2102      	movs	r1, #2
 80087e0:	4824      	ldr	r0, [pc, #144]	@ (8008874 <main+0x128>)
 80087e2:	f001 fa70 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80087e6:	2200      	movs	r2, #0
 80087e8:	2101      	movs	r1, #1
 80087ea:	4822      	ldr	r0, [pc, #136]	@ (8008874 <main+0x128>)
 80087ec:	f001 fa6b 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80087f0:	2200      	movs	r2, #0
 80087f2:	2120      	movs	r1, #32
 80087f4:	4822      	ldr	r0, [pc, #136]	@ (8008880 <main+0x134>)
 80087f6:	f001 fa66 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80087fa:	2200      	movs	r2, #0
 80087fc:	2110      	movs	r1, #16
 80087fe:	4820      	ldr	r0, [pc, #128]	@ (8008880 <main+0x134>)
 8008800:	f001 fa61 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008804:	2200      	movs	r2, #0
 8008806:	2180      	movs	r1, #128	@ 0x80
 8008808:	481e      	ldr	r0, [pc, #120]	@ (8008884 <main+0x138>)
 800880a:	f001 fa5c 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800880e:	2200      	movs	r2, #0
 8008810:	2140      	movs	r1, #64	@ 0x40
 8008812:	481c      	ldr	r0, [pc, #112]	@ (8008884 <main+0x138>)
 8008814:	f001 fa57 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008818:	2200      	movs	r2, #0
 800881a:	2120      	movs	r1, #32
 800881c:	4819      	ldr	r0, [pc, #100]	@ (8008884 <main+0x138>)
 800881e:	f001 fa52 	bl	8009cc6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008822:	2200      	movs	r2, #0
 8008824:	2110      	movs	r1, #16
 8008826:	4817      	ldr	r0, [pc, #92]	@ (8008884 <main+0x138>)
 8008828:	f001 fa4d 	bl	8009cc6 <HAL_GPIO_WritePin>

  i2cTest();
 800882c:	f7f8 fa06 	bl	8000c3c <i2cTest>
  HAL_Delay(100);
 8008830:	2064      	movs	r0, #100	@ 0x64
 8008832:	f000 fc61 	bl	80090f8 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008836:	4a14      	ldr	r2, [pc, #80]	@ (8008888 <main+0x13c>)
 8008838:	2101      	movs	r1, #1
 800883a:	2001      	movs	r0, #1
 800883c:	f7ff ff02 	bl	8008644 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008840:	4a12      	ldr	r2, [pc, #72]	@ (800888c <main+0x140>)
 8008842:	2101      	movs	r1, #1
 8008844:	2002      	movs	r0, #2
 8008846:	f7ff fefd 	bl	8008644 <lcd_print>
  HAL_Delay(1000);
 800884a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800884e:	f000 fc53 	bl	80090f8 <HAL_Delay>
  lcd_clear();
 8008852:	f7ff ff23 	bl	800869c <lcd_clear>

  eepromKontrol();
 8008856:	f7f7 fced 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800885a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800885e:	f000 fc4b 	bl	80090f8 <HAL_Delay>

  backLightTimer = millis;
 8008862:	4b0b      	ldr	r3, [pc, #44]	@ (8008890 <main+0x144>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a0b      	ldr	r2, [pc, #44]	@ (8008894 <main+0x148>)
 8008868:	6013      	str	r3, [r2, #0]

  iotSetup();
 800886a:	f7ff fd03 	bl	8008274 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800886e:	f7fd fa3f 	bl	8005cf0 <mainLoop>
 8008872:	e7fc      	b.n	800886e <main+0x122>
 8008874:	40010c00 	.word	0x40010c00
 8008878:	2000177c 	.word	0x2000177c
 800887c:	20001728 	.word	0x20001728
 8008880:	40011000 	.word	0x40011000
 8008884:	40010800 	.word	0x40010800
 8008888:	200000a0 	.word	0x200000a0
 800888c:	200000b4 	.word	0x200000b4
 8008890:	20000f38 	.word	0x20000f38
 8008894:	20000f54 	.word	0x20000f54

08008898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b090      	sub	sp, #64	@ 0x40
 800889c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800889e:	f107 0318 	add.w	r3, r7, #24
 80088a2:	2228      	movs	r2, #40	@ 0x28
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f004 fb5e 	bl	800cf68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80088ac:	1d3b      	adds	r3, r7, #4
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	605a      	str	r2, [r3, #4]
 80088b4:	609a      	str	r2, [r3, #8]
 80088b6:	60da      	str	r2, [r3, #12]
 80088b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80088ba:	2301      	movs	r3, #1
 80088bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80088be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80088c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80088c4:	2300      	movs	r3, #0
 80088c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80088c8:	2301      	movs	r3, #1
 80088ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088cc:	2302      	movs	r3, #2
 80088ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80088d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80088d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088dc:	f107 0318 	add.w	r3, r7, #24
 80088e0:	4618      	mov	r0, r3
 80088e2:	f002 fc43 	bl	800b16c <HAL_RCC_OscConfig>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80088ec:	f000 f9a2 	bl	8008c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088f0:	230f      	movs	r3, #15
 80088f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088f4:	2302      	movs	r3, #2
 80088f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80088fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008902:	2300      	movs	r3, #0
 8008904:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	2102      	movs	r1, #2
 800890a:	4618      	mov	r0, r3
 800890c:	f002 feb0 	bl	800b670 <HAL_RCC_ClockConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008916:	f000 f98d 	bl	8008c34 <Error_Handler>
  }
}
 800891a:	bf00      	nop
 800891c:	3740      	adds	r7, #64	@ 0x40
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008928:	4b16      	ldr	r3, [pc, #88]	@ (8008984 <MX_CAN_Init+0x60>)
 800892a:	4a17      	ldr	r2, [pc, #92]	@ (8008988 <MX_CAN_Init+0x64>)
 800892c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800892e:	4b15      	ldr	r3, [pc, #84]	@ (8008984 <MX_CAN_Init+0x60>)
 8008930:	2210      	movs	r2, #16
 8008932:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008934:	4b13      	ldr	r3, [pc, #76]	@ (8008984 <MX_CAN_Init+0x60>)
 8008936:	2200      	movs	r2, #0
 8008938:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800893a:	4b12      	ldr	r3, [pc, #72]	@ (8008984 <MX_CAN_Init+0x60>)
 800893c:	2200      	movs	r2, #0
 800893e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008940:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <MX_CAN_Init+0x60>)
 8008942:	2200      	movs	r2, #0
 8008944:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008946:	4b0f      	ldr	r3, [pc, #60]	@ (8008984 <MX_CAN_Init+0x60>)
 8008948:	2200      	movs	r2, #0
 800894a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800894c:	4b0d      	ldr	r3, [pc, #52]	@ (8008984 <MX_CAN_Init+0x60>)
 800894e:	2200      	movs	r2, #0
 8008950:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008952:	4b0c      	ldr	r3, [pc, #48]	@ (8008984 <MX_CAN_Init+0x60>)
 8008954:	2200      	movs	r2, #0
 8008956:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008958:	4b0a      	ldr	r3, [pc, #40]	@ (8008984 <MX_CAN_Init+0x60>)
 800895a:	2200      	movs	r2, #0
 800895c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800895e:	4b09      	ldr	r3, [pc, #36]	@ (8008984 <MX_CAN_Init+0x60>)
 8008960:	2200      	movs	r2, #0
 8008962:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008964:	4b07      	ldr	r3, [pc, #28]	@ (8008984 <MX_CAN_Init+0x60>)
 8008966:	2200      	movs	r2, #0
 8008968:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800896a:	4b06      	ldr	r3, [pc, #24]	@ (8008984 <MX_CAN_Init+0x60>)
 800896c:	2200      	movs	r2, #0
 800896e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008970:	4804      	ldr	r0, [pc, #16]	@ (8008984 <MX_CAN_Init+0x60>)
 8008972:	f000 fbe5 	bl	8009140 <HAL_CAN_Init>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800897c:	f000 f95a 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008980:	bf00      	nop
 8008982:	bd80      	pop	{r7, pc}
 8008984:	20001700 	.word	0x20001700
 8008988:	40006400 	.word	0x40006400

0800898c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008990:	4b12      	ldr	r3, [pc, #72]	@ (80089dc <MX_I2C1_Init+0x50>)
 8008992:	4a13      	ldr	r2, [pc, #76]	@ (80089e0 <MX_I2C1_Init+0x54>)
 8008994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008996:	4b11      	ldr	r3, [pc, #68]	@ (80089dc <MX_I2C1_Init+0x50>)
 8008998:	4a12      	ldr	r2, [pc, #72]	@ (80089e4 <MX_I2C1_Init+0x58>)
 800899a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800899c:	4b0f      	ldr	r3, [pc, #60]	@ (80089dc <MX_I2C1_Init+0x50>)
 800899e:	2200      	movs	r2, #0
 80089a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80089a2:	4b0e      	ldr	r3, [pc, #56]	@ (80089dc <MX_I2C1_Init+0x50>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80089a8:	4b0c      	ldr	r3, [pc, #48]	@ (80089dc <MX_I2C1_Init+0x50>)
 80089aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80089ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80089b0:	4b0a      	ldr	r3, [pc, #40]	@ (80089dc <MX_I2C1_Init+0x50>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80089b6:	4b09      	ldr	r3, [pc, #36]	@ (80089dc <MX_I2C1_Init+0x50>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80089bc:	4b07      	ldr	r3, [pc, #28]	@ (80089dc <MX_I2C1_Init+0x50>)
 80089be:	2200      	movs	r2, #0
 80089c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80089c2:	4b06      	ldr	r3, [pc, #24]	@ (80089dc <MX_I2C1_Init+0x50>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80089c8:	4804      	ldr	r0, [pc, #16]	@ (80089dc <MX_I2C1_Init+0x50>)
 80089ca:	f001 f9ad 	bl	8009d28 <HAL_I2C_Init>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80089d4:	f000 f92e 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80089d8:	bf00      	nop
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20001728 	.word	0x20001728
 80089e0:	40005400 	.word	0x40005400
 80089e4:	00061a80 	.word	0x00061a80

080089e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089ee:	f107 0308 	add.w	r3, r7, #8
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	605a      	str	r2, [r3, #4]
 80089f8:	609a      	str	r2, [r3, #8]
 80089fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089fc:	463b      	mov	r3, r7
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008a04:	4b1f      	ldr	r3, [pc, #124]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a06:	4a20      	ldr	r2, [pc, #128]	@ (8008a88 <MX_TIM1_Init+0xa0>)
 8008a08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a0c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008a10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a12:	4b1c      	ldr	r3, [pc, #112]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008a18:	4b1a      	ldr	r3, [pc, #104]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a1a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a20:	4b18      	ldr	r3, [pc, #96]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008a26:	4b17      	ldr	r3, [pc, #92]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a2c:	4b15      	ldr	r3, [pc, #84]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008a32:	4814      	ldr	r0, [pc, #80]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a34:	f002 ffaa 	bl	800b98c <HAL_TIM_Base_Init>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008a3e:	f000 f8f9 	bl	8008c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	480d      	ldr	r0, [pc, #52]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a50:	f003 f954 	bl	800bcfc <HAL_TIM_ConfigClockSource>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008a5a:	f000 f8eb 	bl	8008c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a62:	2300      	movs	r3, #0
 8008a64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a66:	463b      	mov	r3, r7
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4806      	ldr	r0, [pc, #24]	@ (8008a84 <MX_TIM1_Init+0x9c>)
 8008a6c:	f003 fb42 	bl	800c0f4 <HAL_TIMEx_MasterConfigSynchronization>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a76:	f000 f8dd 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008a7a:	bf00      	nop
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	2000177c 	.word	0x2000177c
 8008a88:	40012c00 	.word	0x40012c00

08008a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a90:	4b11      	ldr	r3, [pc, #68]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008a92:	4a12      	ldr	r2, [pc, #72]	@ (8008adc <MX_USART1_UART_Init+0x50>)
 8008a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a96:	4b10      	ldr	r3, [pc, #64]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008ab0:	4b09      	ldr	r3, [pc, #36]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008ab2:	220c      	movs	r2, #12
 8008ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ab6:	4b08      	ldr	r3, [pc, #32]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008abc:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008ac2:	4805      	ldr	r0, [pc, #20]	@ (8008ad8 <MX_USART1_UART_Init+0x4c>)
 8008ac4:	f003 fb94 	bl	800c1f0 <HAL_UART_Init>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008ace:	f000 f8b1 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008ad2:	bf00      	nop
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	200017c4 	.word	0x200017c4
 8008adc:	40013800 	.word	0x40013800

08008ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ae6:	f107 0310 	add.w	r3, r7, #16
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	605a      	str	r2, [r3, #4]
 8008af0:	609a      	str	r2, [r3, #8]
 8008af2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008af4:	4b4b      	ldr	r3, [pc, #300]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	4a4a      	ldr	r2, [pc, #296]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008afa:	f043 0310 	orr.w	r3, r3, #16
 8008afe:	6193      	str	r3, [r2, #24]
 8008b00:	4b48      	ldr	r3, [pc, #288]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b0c:	4b45      	ldr	r3, [pc, #276]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	4a44      	ldr	r2, [pc, #272]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b12:	f043 0320 	orr.w	r3, r3, #32
 8008b16:	6193      	str	r3, [r2, #24]
 8008b18:	4b42      	ldr	r3, [pc, #264]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f003 0320 	and.w	r3, r3, #32
 8008b20:	60bb      	str	r3, [r7, #8]
 8008b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b24:	4b3f      	ldr	r3, [pc, #252]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	4a3e      	ldr	r2, [pc, #248]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b2a:	f043 0304 	orr.w	r3, r3, #4
 8008b2e:	6193      	str	r3, [r2, #24]
 8008b30:	4b3c      	ldr	r3, [pc, #240]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	607b      	str	r3, [r7, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b3c:	4b39      	ldr	r3, [pc, #228]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	4a38      	ldr	r2, [pc, #224]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b42:	f043 0308 	orr.w	r3, r3, #8
 8008b46:	6193      	str	r3, [r2, #24]
 8008b48:	4b36      	ldr	r3, [pc, #216]	@ (8008c24 <MX_GPIO_Init+0x144>)
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	603b      	str	r3, [r7, #0]
 8008b52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008b54:	2200      	movs	r2, #0
 8008b56:	21f0      	movs	r1, #240	@ 0xf0
 8008b58:	4833      	ldr	r0, [pc, #204]	@ (8008c28 <MX_GPIO_Init+0x148>)
 8008b5a:	f001 f8b4 	bl	8009cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008b64:	4831      	ldr	r0, [pc, #196]	@ (8008c2c <MX_GPIO_Init+0x14c>)
 8008b66:	f001 f8ae 	bl	8009cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008b70:	482f      	ldr	r0, [pc, #188]	@ (8008c30 <MX_GPIO_Init+0x150>)
 8008b72:	f001 f8a8 	bl	8009cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008b76:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008b7a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b84:	f107 0310 	add.w	r3, r7, #16
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4828      	ldr	r0, [pc, #160]	@ (8008c2c <MX_GPIO_Init+0x14c>)
 8008b8c:	f000 fe24 	bl	80097d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008b90:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008b94:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b96:	2300      	movs	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b9e:	f107 0310 	add.w	r3, r7, #16
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4820      	ldr	r0, [pc, #128]	@ (8008c28 <MX_GPIO_Init+0x148>)
 8008ba6:	f000 fe17 	bl	80097d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008baa:	23f0      	movs	r3, #240	@ 0xf0
 8008bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bba:	f107 0310 	add.w	r3, r7, #16
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4819      	ldr	r0, [pc, #100]	@ (8008c28 <MX_GPIO_Init+0x148>)
 8008bc2:	f000 fe09 	bl	80097d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008bc6:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bd8:	f107 0310 	add.w	r3, r7, #16
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4813      	ldr	r0, [pc, #76]	@ (8008c2c <MX_GPIO_Init+0x14c>)
 8008be0:	f000 fdfa 	bl	80097d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008be4:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008be8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bea:	2301      	movs	r3, #1
 8008bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bf6:	f107 0310 	add.w	r3, r7, #16
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	480c      	ldr	r0, [pc, #48]	@ (8008c30 <MX_GPIO_Init+0x150>)
 8008bfe:	f000 fdeb 	bl	80097d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008c02:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c10:	f107 0310 	add.w	r3, r7, #16
 8008c14:	4619      	mov	r1, r3
 8008c16:	4806      	ldr	r0, [pc, #24]	@ (8008c30 <MX_GPIO_Init+0x150>)
 8008c18:	f000 fdde 	bl	80097d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008c1c:	bf00      	nop
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40021000 	.word	0x40021000
 8008c28:	40010800 	.word	0x40010800
 8008c2c:	40011000 	.word	0x40011000
 8008c30:	40010c00 	.word	0x40010c00

08008c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008c38:	bf00      	nop
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bc80      	pop	{r7}
 8008c3e:	4770      	bx	lr

08008c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c46:	4b15      	ldr	r3, [pc, #84]	@ (8008c9c <HAL_MspInit+0x5c>)
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	4a14      	ldr	r2, [pc, #80]	@ (8008c9c <HAL_MspInit+0x5c>)
 8008c4c:	f043 0301 	orr.w	r3, r3, #1
 8008c50:	6193      	str	r3, [r2, #24]
 8008c52:	4b12      	ldr	r3, [pc, #72]	@ (8008c9c <HAL_MspInit+0x5c>)
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	60bb      	str	r3, [r7, #8]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c9c <HAL_MspInit+0x5c>)
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	4a0e      	ldr	r2, [pc, #56]	@ (8008c9c <HAL_MspInit+0x5c>)
 8008c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c68:	61d3      	str	r3, [r2, #28]
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c9c <HAL_MspInit+0x5c>)
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c76:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca0 <HAL_MspInit+0x60>)
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	4a04      	ldr	r2, [pc, #16]	@ (8008ca0 <HAL_MspInit+0x60>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	40021000 	.word	0x40021000
 8008ca0:	40010000 	.word	0x40010000

08008ca4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cac:	f107 0310 	add.w	r3, r7, #16
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8008d30 <HAL_CAN_MspInit+0x8c>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d131      	bne.n	8008d28 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d34 <HAL_CAN_MspInit+0x90>)
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8008d34 <HAL_CAN_MspInit+0x90>)
 8008cca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008cce:	61d3      	str	r3, [r2, #28]
 8008cd0:	4b18      	ldr	r3, [pc, #96]	@ (8008d34 <HAL_CAN_MspInit+0x90>)
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cdc:	4b15      	ldr	r3, [pc, #84]	@ (8008d34 <HAL_CAN_MspInit+0x90>)
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	4a14      	ldr	r2, [pc, #80]	@ (8008d34 <HAL_CAN_MspInit+0x90>)
 8008ce2:	f043 0304 	orr.w	r3, r3, #4
 8008ce6:	6193      	str	r3, [r2, #24]
 8008ce8:	4b12      	ldr	r3, [pc, #72]	@ (8008d34 <HAL_CAN_MspInit+0x90>)
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	f003 0304 	and.w	r3, r3, #4
 8008cf0:	60bb      	str	r3, [r7, #8]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008cf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d02:	f107 0310 	add.w	r3, r7, #16
 8008d06:	4619      	mov	r1, r3
 8008d08:	480b      	ldr	r0, [pc, #44]	@ (8008d38 <HAL_CAN_MspInit+0x94>)
 8008d0a:	f000 fd65 	bl	80097d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d14:	2302      	movs	r3, #2
 8008d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d1c:	f107 0310 	add.w	r3, r7, #16
 8008d20:	4619      	mov	r1, r3
 8008d22:	4805      	ldr	r0, [pc, #20]	@ (8008d38 <HAL_CAN_MspInit+0x94>)
 8008d24:	f000 fd58 	bl	80097d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008d28:	bf00      	nop
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	40006400 	.word	0x40006400
 8008d34:	40021000 	.word	0x40021000
 8008d38:	40010800 	.word	0x40010800

08008d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d44:	f107 0310 	add.w	r3, r7, #16
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	605a      	str	r2, [r3, #4]
 8008d4e:	609a      	str	r2, [r3, #8]
 8008d50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a15      	ldr	r2, [pc, #84]	@ (8008dac <HAL_I2C_MspInit+0x70>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d123      	bne.n	8008da4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d5c:	4b14      	ldr	r3, [pc, #80]	@ (8008db0 <HAL_I2C_MspInit+0x74>)
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	4a13      	ldr	r2, [pc, #76]	@ (8008db0 <HAL_I2C_MspInit+0x74>)
 8008d62:	f043 0308 	orr.w	r3, r3, #8
 8008d66:	6193      	str	r3, [r2, #24]
 8008d68:	4b11      	ldr	r3, [pc, #68]	@ (8008db0 <HAL_I2C_MspInit+0x74>)
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d74:	23c0      	movs	r3, #192	@ 0xc0
 8008d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d78:	2312      	movs	r3, #18
 8008d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d80:	f107 0310 	add.w	r3, r7, #16
 8008d84:	4619      	mov	r1, r3
 8008d86:	480b      	ldr	r0, [pc, #44]	@ (8008db4 <HAL_I2C_MspInit+0x78>)
 8008d88:	f000 fd26 	bl	80097d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d8c:	4b08      	ldr	r3, [pc, #32]	@ (8008db0 <HAL_I2C_MspInit+0x74>)
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	4a07      	ldr	r2, [pc, #28]	@ (8008db0 <HAL_I2C_MspInit+0x74>)
 8008d92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d96:	61d3      	str	r3, [r2, #28]
 8008d98:	4b05      	ldr	r3, [pc, #20]	@ (8008db0 <HAL_I2C_MspInit+0x74>)
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008da4:	bf00      	nop
 8008da6:	3720      	adds	r7, #32
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	40005400 	.word	0x40005400
 8008db0:	40021000 	.word	0x40021000
 8008db4:	40010c00 	.word	0x40010c00

08008db8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8008df0 <HAL_I2C_MspDeInit+0x38>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d10d      	bne.n	8008de6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008dca:	4b0a      	ldr	r3, [pc, #40]	@ (8008df4 <HAL_I2C_MspDeInit+0x3c>)
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	4a09      	ldr	r2, [pc, #36]	@ (8008df4 <HAL_I2C_MspDeInit+0x3c>)
 8008dd0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008dd4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008dd6:	2140      	movs	r1, #64	@ 0x40
 8008dd8:	4807      	ldr	r0, [pc, #28]	@ (8008df8 <HAL_I2C_MspDeInit+0x40>)
 8008dda:	f000 fe91 	bl	8009b00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008dde:	2180      	movs	r1, #128	@ 0x80
 8008de0:	4805      	ldr	r0, [pc, #20]	@ (8008df8 <HAL_I2C_MspDeInit+0x40>)
 8008de2:	f000 fe8d 	bl	8009b00 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	40005400 	.word	0x40005400
 8008df4:	40021000 	.word	0x40021000
 8008df8:	40010c00 	.word	0x40010c00

08008dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a0d      	ldr	r2, [pc, #52]	@ (8008e40 <HAL_TIM_Base_MspInit+0x44>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d113      	bne.n	8008e36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <HAL_TIM_Base_MspInit+0x48>)
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	4a0c      	ldr	r2, [pc, #48]	@ (8008e44 <HAL_TIM_Base_MspInit+0x48>)
 8008e14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e18:	6193      	str	r3, [r2, #24]
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e44 <HAL_TIM_Base_MspInit+0x48>)
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008e26:	2200      	movs	r2, #0
 8008e28:	2100      	movs	r1, #0
 8008e2a:	2019      	movs	r0, #25
 8008e2c:	f000 fb5b 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008e30:	2019      	movs	r0, #25
 8008e32:	f000 fb74 	bl	800951e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	40012c00 	.word	0x40012c00
 8008e44:	40021000 	.word	0x40021000

08008e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e50:	f107 0310 	add.w	r3, r7, #16
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	605a      	str	r2, [r3, #4]
 8008e5a:	609a      	str	r2, [r3, #8]
 8008e5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a20      	ldr	r2, [pc, #128]	@ (8008ee4 <HAL_UART_MspInit+0x9c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d139      	bne.n	8008edc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e68:	4b1f      	ldr	r3, [pc, #124]	@ (8008ee8 <HAL_UART_MspInit+0xa0>)
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8008ee8 <HAL_UART_MspInit+0xa0>)
 8008e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e72:	6193      	str	r3, [r2, #24]
 8008e74:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee8 <HAL_UART_MspInit+0xa0>)
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e80:	4b19      	ldr	r3, [pc, #100]	@ (8008ee8 <HAL_UART_MspInit+0xa0>)
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	4a18      	ldr	r2, [pc, #96]	@ (8008ee8 <HAL_UART_MspInit+0xa0>)
 8008e86:	f043 0304 	orr.w	r3, r3, #4
 8008e8a:	6193      	str	r3, [r2, #24]
 8008e8c:	4b16      	ldr	r3, [pc, #88]	@ (8008ee8 <HAL_UART_MspInit+0xa0>)
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea6:	f107 0310 	add.w	r3, r7, #16
 8008eaa:	4619      	mov	r1, r3
 8008eac:	480f      	ldr	r0, [pc, #60]	@ (8008eec <HAL_UART_MspInit+0xa4>)
 8008eae:	f000 fc93 	bl	80097d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ec0:	f107 0310 	add.w	r3, r7, #16
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4809      	ldr	r0, [pc, #36]	@ (8008eec <HAL_UART_MspInit+0xa4>)
 8008ec8:	f000 fc86 	bl	80097d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2100      	movs	r1, #0
 8008ed0:	2025      	movs	r0, #37	@ 0x25
 8008ed2:	f000 fb08 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008ed6:	2025      	movs	r0, #37	@ 0x25
 8008ed8:	f000 fb21 	bl	800951e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008edc:	bf00      	nop
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40013800 	.word	0x40013800
 8008ee8:	40021000 	.word	0x40021000
 8008eec:	40010800 	.word	0x40010800

08008ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008ef4:	bf00      	nop
 8008ef6:	e7fd      	b.n	8008ef4 <NMI_Handler+0x4>

08008ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008efc:	bf00      	nop
 8008efe:	e7fd      	b.n	8008efc <HardFault_Handler+0x4>

08008f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <MemManage_Handler+0x4>

08008f08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f0c:	bf00      	nop
 8008f0e:	e7fd      	b.n	8008f0c <BusFault_Handler+0x4>

08008f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f10:	b480      	push	{r7}
 8008f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f14:	bf00      	nop
 8008f16:	e7fd      	b.n	8008f14 <UsageFault_Handler+0x4>

08008f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f1c:	bf00      	nop
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bc80      	pop	{r7}
 8008f22:	4770      	bx	lr

08008f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f28:	bf00      	nop
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr

08008f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f34:	bf00      	nop
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bc80      	pop	{r7}
 8008f3a:	4770      	bx	lr

08008f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f40:	f000 f8be 	bl	80090c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f44:	bf00      	nop
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008f4c:	4802      	ldr	r0, [pc, #8]	@ (8008f58 <TIM1_UP_IRQHandler+0x10>)
 8008f4e:	f002 fdcd 	bl	800baec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008f52:	bf00      	nop
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	2000177c 	.word	0x2000177c

08008f5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008f60:	4802      	ldr	r0, [pc, #8]	@ (8008f6c <USART1_IRQHandler+0x10>)
 8008f62:	f003 f9cb 	bl	800c2fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008f66:	bf00      	nop
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	200017c4 	.word	0x200017c4

08008f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f78:	4a14      	ldr	r2, [pc, #80]	@ (8008fcc <_sbrk+0x5c>)
 8008f7a:	4b15      	ldr	r3, [pc, #84]	@ (8008fd0 <_sbrk+0x60>)
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f84:	4b13      	ldr	r3, [pc, #76]	@ (8008fd4 <_sbrk+0x64>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d102      	bne.n	8008f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f8c:	4b11      	ldr	r3, [pc, #68]	@ (8008fd4 <_sbrk+0x64>)
 8008f8e:	4a12      	ldr	r2, [pc, #72]	@ (8008fd8 <_sbrk+0x68>)
 8008f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f92:	4b10      	ldr	r3, [pc, #64]	@ (8008fd4 <_sbrk+0x64>)
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4413      	add	r3, r2
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d207      	bcs.n	8008fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008fa0:	f003 fffa 	bl	800cf98 <__errno>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	220c      	movs	r2, #12
 8008fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fae:	e009      	b.n	8008fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008fb0:	4b08      	ldr	r3, [pc, #32]	@ (8008fd4 <_sbrk+0x64>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008fb6:	4b07      	ldr	r3, [pc, #28]	@ (8008fd4 <_sbrk+0x64>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	4a05      	ldr	r2, [pc, #20]	@ (8008fd4 <_sbrk+0x64>)
 8008fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	2000c000 	.word	0x2000c000
 8008fd0:	00000400 	.word	0x00000400
 8008fd4:	2000180c 	.word	0x2000180c
 8008fd8:	20001960 	.word	0x20001960

08008fdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008fe0:	bf00      	nop
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fe8:	480c      	ldr	r0, [pc, #48]	@ (800901c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008fea:	490d      	ldr	r1, [pc, #52]	@ (8009020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008fec:	4a0d      	ldr	r2, [pc, #52]	@ (8009024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ff0:	e002      	b.n	8008ff8 <LoopCopyDataInit>

08008ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ff6:	3304      	adds	r3, #4

08008ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ffc:	d3f9      	bcc.n	8008ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8009028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009000:	4c0a      	ldr	r4, [pc, #40]	@ (800902c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009004:	e001      	b.n	800900a <LoopFillZerobss>

08009006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009008:	3204      	adds	r2, #4

0800900a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800900a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800900c:	d3fb      	bcc.n	8009006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800900e:	f7ff ffe5 	bl	8008fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009012:	f003 ffc7 	bl	800cfa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009016:	f7ff fb99 	bl	800874c <main>
  bx lr
 800901a:	4770      	bx	lr
  ldr r0, =_sdata
 800901c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009020:	20000e6c 	.word	0x20000e6c
  ldr r2, =_sidata
 8009024:	0800db78 	.word	0x0800db78
  ldr r2, =_sbss
 8009028:	20000e6c 	.word	0x20000e6c
  ldr r4, =_ebss
 800902c:	2000195c 	.word	0x2000195c

08009030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009030:	e7fe      	b.n	8009030 <ADC1_2_IRQHandler>
	...

08009034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009038:	4b08      	ldr	r3, [pc, #32]	@ (800905c <HAL_Init+0x28>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a07      	ldr	r2, [pc, #28]	@ (800905c <HAL_Init+0x28>)
 800903e:	f043 0310 	orr.w	r3, r3, #16
 8009042:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009044:	2003      	movs	r0, #3
 8009046:	f000 fa43 	bl	80094d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800904a:	200f      	movs	r0, #15
 800904c:	f000 f808 	bl	8009060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009050:	f7ff fdf6 	bl	8008c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40022000 	.word	0x40022000

08009060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009068:	4b12      	ldr	r3, [pc, #72]	@ (80090b4 <HAL_InitTick+0x54>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	4b12      	ldr	r3, [pc, #72]	@ (80090b8 <HAL_InitTick+0x58>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	4619      	mov	r1, r3
 8009072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009076:	fbb3 f3f1 	udiv	r3, r3, r1
 800907a:	fbb2 f3f3 	udiv	r3, r2, r3
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fa5b 	bl	800953a <HAL_SYSTICK_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e00e      	b.n	80090ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b0f      	cmp	r3, #15
 8009092:	d80a      	bhi.n	80090aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009094:	2200      	movs	r2, #0
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800909c:	f000 fa23 	bl	80094e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80090a0:	4a06      	ldr	r2, [pc, #24]	@ (80090bc <HAL_InitTick+0x5c>)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	e000      	b.n	80090ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000e10 	.word	0x20000e10
 80090b8:	20000e18 	.word	0x20000e18
 80090bc:	20000e14 	.word	0x20000e14

080090c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80090c4:	4b05      	ldr	r3, [pc, #20]	@ (80090dc <HAL_IncTick+0x1c>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b05      	ldr	r3, [pc, #20]	@ (80090e0 <HAL_IncTick+0x20>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4413      	add	r3, r2
 80090d0:	4a03      	ldr	r2, [pc, #12]	@ (80090e0 <HAL_IncTick+0x20>)
 80090d2:	6013      	str	r3, [r2, #0]
}
 80090d4:	bf00      	nop
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc80      	pop	{r7}
 80090da:	4770      	bx	lr
 80090dc:	20000e18 	.word	0x20000e18
 80090e0:	20001810 	.word	0x20001810

080090e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
  return uwTick;
 80090e8:	4b02      	ldr	r3, [pc, #8]	@ (80090f4 <HAL_GetTick+0x10>)
 80090ea:	681b      	ldr	r3, [r3, #0]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr
 80090f4:	20001810 	.word	0x20001810

080090f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009100:	f7ff fff0 	bl	80090e4 <HAL_GetTick>
 8009104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009110:	d005      	beq.n	800911e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009112:	4b0a      	ldr	r3, [pc, #40]	@ (800913c <HAL_Delay+0x44>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800911e:	bf00      	nop
 8009120:	f7ff ffe0 	bl	80090e4 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	429a      	cmp	r2, r3
 800912e:	d8f7      	bhi.n	8009120 <HAL_Delay+0x28>
  {
  }
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000e18 	.word	0x20000e18

08009140 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e0ed      	b.n	800932e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d102      	bne.n	8009164 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff fda0 	bl	8008ca4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009174:	f7ff ffb6 	bl	80090e4 <HAL_GetTick>
 8009178:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800917a:	e012      	b.n	80091a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800917c:	f7ff ffb2 	bl	80090e4 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b0a      	cmp	r3, #10
 8009188:	d90b      	bls.n	80091a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2205      	movs	r2, #5
 800919a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e0c5      	b.n	800932e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0e5      	beq.n	800917c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0202 	bic.w	r2, r2, #2
 80091be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091c0:	f7ff ff90 	bl	80090e4 <HAL_GetTick>
 80091c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091c6:	e012      	b.n	80091ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80091c8:	f7ff ff8c 	bl	80090e4 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b0a      	cmp	r3, #10
 80091d4:	d90b      	bls.n	80091ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2205      	movs	r2, #5
 80091e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e09f      	b.n	800932e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e5      	bne.n	80091c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7e1b      	ldrb	r3, [r3, #24]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d108      	bne.n	8009216 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	e007      	b.n	8009226 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009224:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	7e5b      	ldrb	r3, [r3, #25]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d108      	bne.n	8009240 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	e007      	b.n	8009250 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800924e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7e9b      	ldrb	r3, [r3, #26]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d108      	bne.n	800926a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0220 	orr.w	r2, r2, #32
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	e007      	b.n	800927a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f022 0220 	bic.w	r2, r2, #32
 8009278:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7edb      	ldrb	r3, [r3, #27]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d108      	bne.n	8009294 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0210 	bic.w	r2, r2, #16
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e007      	b.n	80092a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0210 	orr.w	r2, r2, #16
 80092a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7f1b      	ldrb	r3, [r3, #28]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d108      	bne.n	80092be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0208 	orr.w	r2, r2, #8
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	e007      	b.n	80092ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0208 	bic.w	r2, r2, #8
 80092cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7f5b      	ldrb	r3, [r3, #29]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d108      	bne.n	80092e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f042 0204 	orr.w	r2, r2, #4
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	e007      	b.n	80092f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0204 	bic.w	r2, r2, #4
 80092f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	431a      	orrs	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	431a      	orrs	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	ea42 0103 	orr.w	r1, r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	1e5a      	subs	r2, r3, #1
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <__NVIC_SetPriorityGrouping>:
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009348:	4b0c      	ldr	r3, [pc, #48]	@ (800937c <__NVIC_SetPriorityGrouping+0x44>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009354:	4013      	ands	r3, r2
 8009356:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800936a:	4a04      	ldr	r2, [pc, #16]	@ (800937c <__NVIC_SetPriorityGrouping+0x44>)
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	60d3      	str	r3, [r2, #12]
}
 8009370:	bf00      	nop
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	bc80      	pop	{r7}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	e000ed00 	.word	0xe000ed00

08009380 <__NVIC_GetPriorityGrouping>:
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009384:	4b04      	ldr	r3, [pc, #16]	@ (8009398 <__NVIC_GetPriorityGrouping+0x18>)
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	0a1b      	lsrs	r3, r3, #8
 800938a:	f003 0307 	and.w	r3, r3, #7
}
 800938e:	4618      	mov	r0, r3
 8009390:	46bd      	mov	sp, r7
 8009392:	bc80      	pop	{r7}
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	e000ed00 	.word	0xe000ed00

0800939c <__NVIC_EnableIRQ>:
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	db0b      	blt.n	80093c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	f003 021f 	and.w	r2, r3, #31
 80093b4:	4906      	ldr	r1, [pc, #24]	@ (80093d0 <__NVIC_EnableIRQ+0x34>)
 80093b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ba:	095b      	lsrs	r3, r3, #5
 80093bc:	2001      	movs	r0, #1
 80093be:	fa00 f202 	lsl.w	r2, r0, r2
 80093c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr
 80093d0:	e000e100 	.word	0xe000e100

080093d4 <__NVIC_SetPriority>:
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	db0a      	blt.n	80093fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	490c      	ldr	r1, [pc, #48]	@ (8009420 <__NVIC_SetPriority+0x4c>)
 80093ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093f2:	0112      	lsls	r2, r2, #4
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	440b      	add	r3, r1
 80093f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80093fc:	e00a      	b.n	8009414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	b2da      	uxtb	r2, r3
 8009402:	4908      	ldr	r1, [pc, #32]	@ (8009424 <__NVIC_SetPriority+0x50>)
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	3b04      	subs	r3, #4
 800940c:	0112      	lsls	r2, r2, #4
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	440b      	add	r3, r1
 8009412:	761a      	strb	r2, [r3, #24]
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	bc80      	pop	{r7}
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	e000e100 	.word	0xe000e100
 8009424:	e000ed00 	.word	0xe000ed00

08009428 <NVIC_EncodePriority>:
{
 8009428:	b480      	push	{r7}
 800942a:	b089      	sub	sp, #36	@ 0x24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	f1c3 0307 	rsb	r3, r3, #7
 8009442:	2b04      	cmp	r3, #4
 8009444:	bf28      	it	cs
 8009446:	2304      	movcs	r3, #4
 8009448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	3304      	adds	r3, #4
 800944e:	2b06      	cmp	r3, #6
 8009450:	d902      	bls.n	8009458 <NVIC_EncodePriority+0x30>
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	3b03      	subs	r3, #3
 8009456:	e000      	b.n	800945a <NVIC_EncodePriority+0x32>
 8009458:	2300      	movs	r3, #0
 800945a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800945c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	fa02 f303 	lsl.w	r3, r2, r3
 8009466:	43da      	mvns	r2, r3
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	401a      	ands	r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009470:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	fa01 f303 	lsl.w	r3, r1, r3
 800947a:	43d9      	mvns	r1, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009480:	4313      	orrs	r3, r2
}
 8009482:	4618      	mov	r0, r3
 8009484:	3724      	adds	r7, #36	@ 0x24
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr

0800948c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	3b01      	subs	r3, #1
 8009498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800949c:	d301      	bcc.n	80094a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800949e:	2301      	movs	r3, #1
 80094a0:	e00f      	b.n	80094c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80094a2:	4a0a      	ldr	r2, [pc, #40]	@ (80094cc <SysTick_Config+0x40>)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80094aa:	210f      	movs	r1, #15
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094b0:	f7ff ff90 	bl	80093d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80094b4:	4b05      	ldr	r3, [pc, #20]	@ (80094cc <SysTick_Config+0x40>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80094ba:	4b04      	ldr	r3, [pc, #16]	@ (80094cc <SysTick_Config+0x40>)
 80094bc:	2207      	movs	r2, #7
 80094be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	e000e010 	.word	0xe000e010

080094d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ff2d 	bl	8009338 <__NVIC_SetPriorityGrouping>
}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b086      	sub	sp, #24
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	4603      	mov	r3, r0
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80094f8:	f7ff ff42 	bl	8009380 <__NVIC_GetPriorityGrouping>
 80094fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	68b9      	ldr	r1, [r7, #8]
 8009502:	6978      	ldr	r0, [r7, #20]
 8009504:	f7ff ff90 	bl	8009428 <NVIC_EncodePriority>
 8009508:	4602      	mov	r2, r0
 800950a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800950e:	4611      	mov	r1, r2
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff ff5f 	bl	80093d4 <__NVIC_SetPriority>
}
 8009516:	bf00      	nop
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	4603      	mov	r3, r0
 8009526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff ff35 	bl	800939c <__NVIC_EnableIRQ>
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff ffa2 	bl	800948c <SysTick_Config>
 8009548:	4603      	mov	r3, r0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009552:	b480      	push	{r7}
 8009554:	b085      	sub	sp, #20
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d008      	beq.n	800957c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2204      	movs	r2, #4
 800956e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e020      	b.n	80095be <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 020e 	bic.w	r2, r2, #14
 800958a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0201 	bic.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a4:	2101      	movs	r1, #1
 80095a6:	fa01 f202 	lsl.w	r2, r1, r2
 80095aa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr

080095c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d005      	beq.n	80095ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2204      	movs	r2, #4
 80095e4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	73fb      	strb	r3, [r7, #15]
 80095ea:	e0d6      	b.n	800979a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 020e 	bic.w	r2, r2, #14
 80095fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 0201 	bic.w	r2, r2, #1
 800960a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	4b64      	ldr	r3, [pc, #400]	@ (80097a4 <HAL_DMA_Abort_IT+0x1dc>)
 8009614:	429a      	cmp	r2, r3
 8009616:	d958      	bls.n	80096ca <HAL_DMA_Abort_IT+0x102>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a62      	ldr	r2, [pc, #392]	@ (80097a8 <HAL_DMA_Abort_IT+0x1e0>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d04f      	beq.n	80096c2 <HAL_DMA_Abort_IT+0xfa>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a61      	ldr	r2, [pc, #388]	@ (80097ac <HAL_DMA_Abort_IT+0x1e4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d048      	beq.n	80096be <HAL_DMA_Abort_IT+0xf6>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a5f      	ldr	r2, [pc, #380]	@ (80097b0 <HAL_DMA_Abort_IT+0x1e8>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d040      	beq.n	80096b8 <HAL_DMA_Abort_IT+0xf0>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a5e      	ldr	r2, [pc, #376]	@ (80097b4 <HAL_DMA_Abort_IT+0x1ec>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d038      	beq.n	80096b2 <HAL_DMA_Abort_IT+0xea>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a5c      	ldr	r2, [pc, #368]	@ (80097b8 <HAL_DMA_Abort_IT+0x1f0>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d030      	beq.n	80096ac <HAL_DMA_Abort_IT+0xe4>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a5b      	ldr	r2, [pc, #364]	@ (80097bc <HAL_DMA_Abort_IT+0x1f4>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d028      	beq.n	80096a6 <HAL_DMA_Abort_IT+0xde>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a52      	ldr	r2, [pc, #328]	@ (80097a4 <HAL_DMA_Abort_IT+0x1dc>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d020      	beq.n	80096a0 <HAL_DMA_Abort_IT+0xd8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a57      	ldr	r2, [pc, #348]	@ (80097c0 <HAL_DMA_Abort_IT+0x1f8>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d019      	beq.n	800969c <HAL_DMA_Abort_IT+0xd4>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a55      	ldr	r2, [pc, #340]	@ (80097c4 <HAL_DMA_Abort_IT+0x1fc>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d012      	beq.n	8009698 <HAL_DMA_Abort_IT+0xd0>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a54      	ldr	r2, [pc, #336]	@ (80097c8 <HAL_DMA_Abort_IT+0x200>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d00a      	beq.n	8009692 <HAL_DMA_Abort_IT+0xca>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a52      	ldr	r2, [pc, #328]	@ (80097cc <HAL_DMA_Abort_IT+0x204>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d102      	bne.n	800968c <HAL_DMA_Abort_IT+0xc4>
 8009686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800968a:	e01b      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 800968c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009690:	e018      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 8009692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009696:	e015      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 8009698:	2310      	movs	r3, #16
 800969a:	e013      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 800969c:	2301      	movs	r3, #1
 800969e:	e011      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 80096a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096a4:	e00e      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 80096a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80096aa:	e00b      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 80096ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80096b0:	e008      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 80096b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096b6:	e005      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 80096b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096bc:	e002      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 80096be:	2310      	movs	r3, #16
 80096c0:	e000      	b.n	80096c4 <HAL_DMA_Abort_IT+0xfc>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4a42      	ldr	r2, [pc, #264]	@ (80097d0 <HAL_DMA_Abort_IT+0x208>)
 80096c6:	6053      	str	r3, [r2, #4]
 80096c8:	e057      	b.n	800977a <HAL_DMA_Abort_IT+0x1b2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a36      	ldr	r2, [pc, #216]	@ (80097a8 <HAL_DMA_Abort_IT+0x1e0>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d04f      	beq.n	8009774 <HAL_DMA_Abort_IT+0x1ac>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a34      	ldr	r2, [pc, #208]	@ (80097ac <HAL_DMA_Abort_IT+0x1e4>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d048      	beq.n	8009770 <HAL_DMA_Abort_IT+0x1a8>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a33      	ldr	r2, [pc, #204]	@ (80097b0 <HAL_DMA_Abort_IT+0x1e8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d040      	beq.n	800976a <HAL_DMA_Abort_IT+0x1a2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a31      	ldr	r2, [pc, #196]	@ (80097b4 <HAL_DMA_Abort_IT+0x1ec>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d038      	beq.n	8009764 <HAL_DMA_Abort_IT+0x19c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a30      	ldr	r2, [pc, #192]	@ (80097b8 <HAL_DMA_Abort_IT+0x1f0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d030      	beq.n	800975e <HAL_DMA_Abort_IT+0x196>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a2e      	ldr	r2, [pc, #184]	@ (80097bc <HAL_DMA_Abort_IT+0x1f4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d028      	beq.n	8009758 <HAL_DMA_Abort_IT+0x190>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a26      	ldr	r2, [pc, #152]	@ (80097a4 <HAL_DMA_Abort_IT+0x1dc>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d020      	beq.n	8009752 <HAL_DMA_Abort_IT+0x18a>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a2a      	ldr	r2, [pc, #168]	@ (80097c0 <HAL_DMA_Abort_IT+0x1f8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d019      	beq.n	800974e <HAL_DMA_Abort_IT+0x186>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a29      	ldr	r2, [pc, #164]	@ (80097c4 <HAL_DMA_Abort_IT+0x1fc>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d012      	beq.n	800974a <HAL_DMA_Abort_IT+0x182>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a27      	ldr	r2, [pc, #156]	@ (80097c8 <HAL_DMA_Abort_IT+0x200>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d00a      	beq.n	8009744 <HAL_DMA_Abort_IT+0x17c>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a26      	ldr	r2, [pc, #152]	@ (80097cc <HAL_DMA_Abort_IT+0x204>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d102      	bne.n	800973e <HAL_DMA_Abort_IT+0x176>
 8009738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800973c:	e01b      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 800973e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009742:	e018      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 8009744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009748:	e015      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 800974a:	2310      	movs	r3, #16
 800974c:	e013      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 800974e:	2301      	movs	r3, #1
 8009750:	e011      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 8009752:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009756:	e00e      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 8009758:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800975c:	e00b      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 800975e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009762:	e008      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 8009764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009768:	e005      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 800976a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800976e:	e002      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 8009770:	2310      	movs	r3, #16
 8009772:	e000      	b.n	8009776 <HAL_DMA_Abort_IT+0x1ae>
 8009774:	2301      	movs	r3, #1
 8009776:	4a17      	ldr	r2, [pc, #92]	@ (80097d4 <HAL_DMA_Abort_IT+0x20c>)
 8009778:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
    } 
  }
  return status;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	40020080 	.word	0x40020080
 80097a8:	40020008 	.word	0x40020008
 80097ac:	4002001c 	.word	0x4002001c
 80097b0:	40020030 	.word	0x40020030
 80097b4:	40020044 	.word	0x40020044
 80097b8:	40020058 	.word	0x40020058
 80097bc:	4002006c 	.word	0x4002006c
 80097c0:	40020408 	.word	0x40020408
 80097c4:	4002041c 	.word	0x4002041c
 80097c8:	40020430 	.word	0x40020430
 80097cc:	40020444 	.word	0x40020444
 80097d0:	40020400 	.word	0x40020400
 80097d4:	40020000 	.word	0x40020000

080097d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097d8:	b480      	push	{r7}
 80097da:	b08b      	sub	sp, #44	@ 0x2c
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80097e2:	2300      	movs	r3, #0
 80097e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80097e6:	2300      	movs	r3, #0
 80097e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097ea:	e179      	b.n	8009ae0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80097ec:	2201      	movs	r2, #1
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	fa02 f303 	lsl.w	r3, r2, r3
 80097f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	69fa      	ldr	r2, [r7, #28]
 80097fc:	4013      	ands	r3, r2
 80097fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	429a      	cmp	r2, r3
 8009806:	f040 8168 	bne.w	8009ada <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	4a96      	ldr	r2, [pc, #600]	@ (8009a68 <HAL_GPIO_Init+0x290>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d05e      	beq.n	80098d2 <HAL_GPIO_Init+0xfa>
 8009814:	4a94      	ldr	r2, [pc, #592]	@ (8009a68 <HAL_GPIO_Init+0x290>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d875      	bhi.n	8009906 <HAL_GPIO_Init+0x12e>
 800981a:	4a94      	ldr	r2, [pc, #592]	@ (8009a6c <HAL_GPIO_Init+0x294>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d058      	beq.n	80098d2 <HAL_GPIO_Init+0xfa>
 8009820:	4a92      	ldr	r2, [pc, #584]	@ (8009a6c <HAL_GPIO_Init+0x294>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d86f      	bhi.n	8009906 <HAL_GPIO_Init+0x12e>
 8009826:	4a92      	ldr	r2, [pc, #584]	@ (8009a70 <HAL_GPIO_Init+0x298>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d052      	beq.n	80098d2 <HAL_GPIO_Init+0xfa>
 800982c:	4a90      	ldr	r2, [pc, #576]	@ (8009a70 <HAL_GPIO_Init+0x298>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d869      	bhi.n	8009906 <HAL_GPIO_Init+0x12e>
 8009832:	4a90      	ldr	r2, [pc, #576]	@ (8009a74 <HAL_GPIO_Init+0x29c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d04c      	beq.n	80098d2 <HAL_GPIO_Init+0xfa>
 8009838:	4a8e      	ldr	r2, [pc, #568]	@ (8009a74 <HAL_GPIO_Init+0x29c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d863      	bhi.n	8009906 <HAL_GPIO_Init+0x12e>
 800983e:	4a8e      	ldr	r2, [pc, #568]	@ (8009a78 <HAL_GPIO_Init+0x2a0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d046      	beq.n	80098d2 <HAL_GPIO_Init+0xfa>
 8009844:	4a8c      	ldr	r2, [pc, #560]	@ (8009a78 <HAL_GPIO_Init+0x2a0>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d85d      	bhi.n	8009906 <HAL_GPIO_Init+0x12e>
 800984a:	2b12      	cmp	r3, #18
 800984c:	d82a      	bhi.n	80098a4 <HAL_GPIO_Init+0xcc>
 800984e:	2b12      	cmp	r3, #18
 8009850:	d859      	bhi.n	8009906 <HAL_GPIO_Init+0x12e>
 8009852:	a201      	add	r2, pc, #4	@ (adr r2, 8009858 <HAL_GPIO_Init+0x80>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	080098d3 	.word	0x080098d3
 800985c:	080098ad 	.word	0x080098ad
 8009860:	080098bf 	.word	0x080098bf
 8009864:	08009901 	.word	0x08009901
 8009868:	08009907 	.word	0x08009907
 800986c:	08009907 	.word	0x08009907
 8009870:	08009907 	.word	0x08009907
 8009874:	08009907 	.word	0x08009907
 8009878:	08009907 	.word	0x08009907
 800987c:	08009907 	.word	0x08009907
 8009880:	08009907 	.word	0x08009907
 8009884:	08009907 	.word	0x08009907
 8009888:	08009907 	.word	0x08009907
 800988c:	08009907 	.word	0x08009907
 8009890:	08009907 	.word	0x08009907
 8009894:	08009907 	.word	0x08009907
 8009898:	08009907 	.word	0x08009907
 800989c:	080098b5 	.word	0x080098b5
 80098a0:	080098c9 	.word	0x080098c9
 80098a4:	4a75      	ldr	r2, [pc, #468]	@ (8009a7c <HAL_GPIO_Init+0x2a4>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d013      	beq.n	80098d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80098aa:	e02c      	b.n	8009906 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	623b      	str	r3, [r7, #32]
          break;
 80098b2:	e029      	b.n	8009908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	3304      	adds	r3, #4
 80098ba:	623b      	str	r3, [r7, #32]
          break;
 80098bc:	e024      	b.n	8009908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	3308      	adds	r3, #8
 80098c4:	623b      	str	r3, [r7, #32]
          break;
 80098c6:	e01f      	b.n	8009908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	330c      	adds	r3, #12
 80098ce:	623b      	str	r3, [r7, #32]
          break;
 80098d0:	e01a      	b.n	8009908 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80098da:	2304      	movs	r3, #4
 80098dc:	623b      	str	r3, [r7, #32]
          break;
 80098de:	e013      	b.n	8009908 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d105      	bne.n	80098f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098e8:	2308      	movs	r3, #8
 80098ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	611a      	str	r2, [r3, #16]
          break;
 80098f2:	e009      	b.n	8009908 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098f4:	2308      	movs	r3, #8
 80098f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	69fa      	ldr	r2, [r7, #28]
 80098fc:	615a      	str	r2, [r3, #20]
          break;
 80098fe:	e003      	b.n	8009908 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009900:	2300      	movs	r3, #0
 8009902:	623b      	str	r3, [r7, #32]
          break;
 8009904:	e000      	b.n	8009908 <HAL_GPIO_Init+0x130>
          break;
 8009906:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	2bff      	cmp	r3, #255	@ 0xff
 800990c:	d801      	bhi.n	8009912 <HAL_GPIO_Init+0x13a>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	e001      	b.n	8009916 <HAL_GPIO_Init+0x13e>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3304      	adds	r3, #4
 8009916:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	2bff      	cmp	r3, #255	@ 0xff
 800991c:	d802      	bhi.n	8009924 <HAL_GPIO_Init+0x14c>
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	e002      	b.n	800992a <HAL_GPIO_Init+0x152>
 8009924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009926:	3b08      	subs	r3, #8
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	210f      	movs	r1, #15
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	fa01 f303 	lsl.w	r3, r1, r3
 8009938:	43db      	mvns	r3, r3
 800993a:	401a      	ands	r2, r3
 800993c:	6a39      	ldr	r1, [r7, #32]
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	fa01 f303 	lsl.w	r3, r1, r3
 8009944:	431a      	orrs	r2, r3
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 80c1 	beq.w	8009ada <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009958:	4b49      	ldr	r3, [pc, #292]	@ (8009a80 <HAL_GPIO_Init+0x2a8>)
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	4a48      	ldr	r2, [pc, #288]	@ (8009a80 <HAL_GPIO_Init+0x2a8>)
 800995e:	f043 0301 	orr.w	r3, r3, #1
 8009962:	6193      	str	r3, [r2, #24]
 8009964:	4b46      	ldr	r3, [pc, #280]	@ (8009a80 <HAL_GPIO_Init+0x2a8>)
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	60bb      	str	r3, [r7, #8]
 800996e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009970:	4a44      	ldr	r2, [pc, #272]	@ (8009a84 <HAL_GPIO_Init+0x2ac>)
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	089b      	lsrs	r3, r3, #2
 8009976:	3302      	adds	r3, #2
 8009978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800997c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009980:	f003 0303 	and.w	r3, r3, #3
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	220f      	movs	r2, #15
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	43db      	mvns	r3, r3
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4013      	ands	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a3c      	ldr	r2, [pc, #240]	@ (8009a88 <HAL_GPIO_Init+0x2b0>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d01f      	beq.n	80099dc <HAL_GPIO_Init+0x204>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a3b      	ldr	r2, [pc, #236]	@ (8009a8c <HAL_GPIO_Init+0x2b4>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d019      	beq.n	80099d8 <HAL_GPIO_Init+0x200>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a3a      	ldr	r2, [pc, #232]	@ (8009a90 <HAL_GPIO_Init+0x2b8>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d013      	beq.n	80099d4 <HAL_GPIO_Init+0x1fc>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a39      	ldr	r2, [pc, #228]	@ (8009a94 <HAL_GPIO_Init+0x2bc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d00d      	beq.n	80099d0 <HAL_GPIO_Init+0x1f8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a38      	ldr	r2, [pc, #224]	@ (8009a98 <HAL_GPIO_Init+0x2c0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d007      	beq.n	80099cc <HAL_GPIO_Init+0x1f4>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a37      	ldr	r2, [pc, #220]	@ (8009a9c <HAL_GPIO_Init+0x2c4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d101      	bne.n	80099c8 <HAL_GPIO_Init+0x1f0>
 80099c4:	2305      	movs	r3, #5
 80099c6:	e00a      	b.n	80099de <HAL_GPIO_Init+0x206>
 80099c8:	2306      	movs	r3, #6
 80099ca:	e008      	b.n	80099de <HAL_GPIO_Init+0x206>
 80099cc:	2304      	movs	r3, #4
 80099ce:	e006      	b.n	80099de <HAL_GPIO_Init+0x206>
 80099d0:	2303      	movs	r3, #3
 80099d2:	e004      	b.n	80099de <HAL_GPIO_Init+0x206>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e002      	b.n	80099de <HAL_GPIO_Init+0x206>
 80099d8:	2301      	movs	r3, #1
 80099da:	e000      	b.n	80099de <HAL_GPIO_Init+0x206>
 80099dc:	2300      	movs	r3, #0
 80099de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099e0:	f002 0203 	and.w	r2, r2, #3
 80099e4:	0092      	lsls	r2, r2, #2
 80099e6:	4093      	lsls	r3, r2
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80099ee:	4925      	ldr	r1, [pc, #148]	@ (8009a84 <HAL_GPIO_Init+0x2ac>)
 80099f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f2:	089b      	lsrs	r3, r3, #2
 80099f4:	3302      	adds	r3, #2
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d006      	beq.n	8009a16 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009a08:	4b25      	ldr	r3, [pc, #148]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	4924      	ldr	r1, [pc, #144]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	608b      	str	r3, [r1, #8]
 8009a14:	e006      	b.n	8009a24 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009a16:	4b22      	ldr	r3, [pc, #136]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	43db      	mvns	r3, r3
 8009a1e:	4920      	ldr	r1, [pc, #128]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a20:	4013      	ands	r3, r2
 8009a22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d006      	beq.n	8009a3e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009a30:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	491a      	ldr	r1, [pc, #104]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60cb      	str	r3, [r1, #12]
 8009a3c:	e006      	b.n	8009a4c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009a3e:	4b18      	ldr	r3, [pc, #96]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	43db      	mvns	r3, r3
 8009a46:	4916      	ldr	r1, [pc, #88]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a48:	4013      	ands	r3, r2
 8009a4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d025      	beq.n	8009aa4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009a58:	4b11      	ldr	r3, [pc, #68]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	4910      	ldr	r1, [pc, #64]	@ (8009aa0 <HAL_GPIO_Init+0x2c8>)
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	604b      	str	r3, [r1, #4]
 8009a64:	e025      	b.n	8009ab2 <HAL_GPIO_Init+0x2da>
 8009a66:	bf00      	nop
 8009a68:	10320000 	.word	0x10320000
 8009a6c:	10310000 	.word	0x10310000
 8009a70:	10220000 	.word	0x10220000
 8009a74:	10210000 	.word	0x10210000
 8009a78:	10120000 	.word	0x10120000
 8009a7c:	10110000 	.word	0x10110000
 8009a80:	40021000 	.word	0x40021000
 8009a84:	40010000 	.word	0x40010000
 8009a88:	40010800 	.word	0x40010800
 8009a8c:	40010c00 	.word	0x40010c00
 8009a90:	40011000 	.word	0x40011000
 8009a94:	40011400 	.word	0x40011400
 8009a98:	40011800 	.word	0x40011800
 8009a9c:	40011c00 	.word	0x40011c00
 8009aa0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009aa4:	4b15      	ldr	r3, [pc, #84]	@ (8009afc <HAL_GPIO_Init+0x324>)
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	43db      	mvns	r3, r3
 8009aac:	4913      	ldr	r1, [pc, #76]	@ (8009afc <HAL_GPIO_Init+0x324>)
 8009aae:	4013      	ands	r3, r2
 8009ab0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d006      	beq.n	8009acc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009abe:	4b0f      	ldr	r3, [pc, #60]	@ (8009afc <HAL_GPIO_Init+0x324>)
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	490e      	ldr	r1, [pc, #56]	@ (8009afc <HAL_GPIO_Init+0x324>)
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	600b      	str	r3, [r1, #0]
 8009aca:	e006      	b.n	8009ada <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009acc:	4b0b      	ldr	r3, [pc, #44]	@ (8009afc <HAL_GPIO_Init+0x324>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	43db      	mvns	r3, r3
 8009ad4:	4909      	ldr	r1, [pc, #36]	@ (8009afc <HAL_GPIO_Init+0x324>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	3301      	adds	r3, #1
 8009ade:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f47f ae7e 	bne.w	80097ec <HAL_GPIO_Init+0x14>
  }
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	372c      	adds	r7, #44	@ 0x2c
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr
 8009afc:	40010400 	.word	0x40010400

08009b00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b089      	sub	sp, #36	@ 0x24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009b0e:	e0a6      	b.n	8009c5e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009b10:	2201      	movs	r2, #1
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	fa02 f303 	lsl.w	r3, r2, r3
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 8099 	beq.w	8009c58 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009b26:	4a54      	ldr	r2, [pc, #336]	@ (8009c78 <HAL_GPIO_DeInit+0x178>)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	3302      	adds	r3, #2
 8009b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b32:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	220f      	movs	r2, #15
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	4013      	ands	r3, r2
 8009b46:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a4c      	ldr	r2, [pc, #304]	@ (8009c7c <HAL_GPIO_DeInit+0x17c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d01f      	beq.n	8009b90 <HAL_GPIO_DeInit+0x90>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a4b      	ldr	r2, [pc, #300]	@ (8009c80 <HAL_GPIO_DeInit+0x180>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d019      	beq.n	8009b8c <HAL_GPIO_DeInit+0x8c>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8009c84 <HAL_GPIO_DeInit+0x184>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d013      	beq.n	8009b88 <HAL_GPIO_DeInit+0x88>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a49      	ldr	r2, [pc, #292]	@ (8009c88 <HAL_GPIO_DeInit+0x188>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00d      	beq.n	8009b84 <HAL_GPIO_DeInit+0x84>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a48      	ldr	r2, [pc, #288]	@ (8009c8c <HAL_GPIO_DeInit+0x18c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d007      	beq.n	8009b80 <HAL_GPIO_DeInit+0x80>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a47      	ldr	r2, [pc, #284]	@ (8009c90 <HAL_GPIO_DeInit+0x190>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d101      	bne.n	8009b7c <HAL_GPIO_DeInit+0x7c>
 8009b78:	2305      	movs	r3, #5
 8009b7a:	e00a      	b.n	8009b92 <HAL_GPIO_DeInit+0x92>
 8009b7c:	2306      	movs	r3, #6
 8009b7e:	e008      	b.n	8009b92 <HAL_GPIO_DeInit+0x92>
 8009b80:	2304      	movs	r3, #4
 8009b82:	e006      	b.n	8009b92 <HAL_GPIO_DeInit+0x92>
 8009b84:	2303      	movs	r3, #3
 8009b86:	e004      	b.n	8009b92 <HAL_GPIO_DeInit+0x92>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e002      	b.n	8009b92 <HAL_GPIO_DeInit+0x92>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e000      	b.n	8009b92 <HAL_GPIO_DeInit+0x92>
 8009b90:	2300      	movs	r3, #0
 8009b92:	69fa      	ldr	r2, [r7, #28]
 8009b94:	f002 0203 	and.w	r2, r2, #3
 8009b98:	0092      	lsls	r2, r2, #2
 8009b9a:	4093      	lsls	r3, r2
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d132      	bne.n	8009c08 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8009c94 <HAL_GPIO_DeInit+0x194>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	493a      	ldr	r1, [pc, #232]	@ (8009c94 <HAL_GPIO_DeInit+0x194>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009bb0:	4b38      	ldr	r3, [pc, #224]	@ (8009c94 <HAL_GPIO_DeInit+0x194>)
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	43db      	mvns	r3, r3
 8009bb8:	4936      	ldr	r1, [pc, #216]	@ (8009c94 <HAL_GPIO_DeInit+0x194>)
 8009bba:	4013      	ands	r3, r2
 8009bbc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009bbe:	4b35      	ldr	r3, [pc, #212]	@ (8009c94 <HAL_GPIO_DeInit+0x194>)
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	43db      	mvns	r3, r3
 8009bc6:	4933      	ldr	r1, [pc, #204]	@ (8009c94 <HAL_GPIO_DeInit+0x194>)
 8009bc8:	4013      	ands	r3, r2
 8009bca:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009bcc:	4b31      	ldr	r3, [pc, #196]	@ (8009c94 <HAL_GPIO_DeInit+0x194>)
 8009bce:	689a      	ldr	r2, [r3, #8]
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	43db      	mvns	r3, r3
 8009bd4:	492f      	ldr	r1, [pc, #188]	@ (8009c94 <HAL_GPIO_DeInit+0x194>)
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	f003 0303 	and.w	r3, r3, #3
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	220f      	movs	r2, #15
 8009be4:	fa02 f303 	lsl.w	r3, r2, r3
 8009be8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009bea:	4a23      	ldr	r2, [pc, #140]	@ (8009c78 <HAL_GPIO_DeInit+0x178>)
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	089b      	lsrs	r3, r3, #2
 8009bf0:	3302      	adds	r3, #2
 8009bf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	43da      	mvns	r2, r3
 8009bfa:	481f      	ldr	r0, [pc, #124]	@ (8009c78 <HAL_GPIO_DeInit+0x178>)
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	089b      	lsrs	r3, r3, #2
 8009c00:	400a      	ands	r2, r1
 8009c02:	3302      	adds	r3, #2
 8009c04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2bff      	cmp	r3, #255	@ 0xff
 8009c0c:	d801      	bhi.n	8009c12 <HAL_GPIO_DeInit+0x112>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	e001      	b.n	8009c16 <HAL_GPIO_DeInit+0x116>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3304      	adds	r3, #4
 8009c16:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2bff      	cmp	r3, #255	@ 0xff
 8009c1c:	d802      	bhi.n	8009c24 <HAL_GPIO_DeInit+0x124>
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	e002      	b.n	8009c2a <HAL_GPIO_DeInit+0x12a>
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	3b08      	subs	r3, #8
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	210f      	movs	r1, #15
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	fa01 f303 	lsl.w	r3, r1, r3
 8009c38:	43db      	mvns	r3, r3
 8009c3a:	401a      	ands	r2, r3
 8009c3c:	2104      	movs	r1, #4
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	fa01 f303 	lsl.w	r3, r1, r3
 8009c44:	431a      	orrs	r2, r3
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	43db      	mvns	r3, r3
 8009c52:	401a      	ands	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	fa22 f303 	lsr.w	r3, r2, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f47f af52 	bne.w	8009b10 <HAL_GPIO_DeInit+0x10>
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	bf00      	nop
 8009c70:	3724      	adds	r7, #36	@ 0x24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bc80      	pop	{r7}
 8009c76:	4770      	bx	lr
 8009c78:	40010000 	.word	0x40010000
 8009c7c:	40010800 	.word	0x40010800
 8009c80:	40010c00 	.word	0x40010c00
 8009c84:	40011000 	.word	0x40011000
 8009c88:	40011400 	.word	0x40011400
 8009c8c:	40011800 	.word	0x40011800
 8009c90:	40011c00 	.word	0x40011c00
 8009c94:	40010400 	.word	0x40010400

08009c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	887b      	ldrh	r3, [r7, #2]
 8009caa:	4013      	ands	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	73fb      	strb	r3, [r7, #15]
 8009cb4:	e001      	b.n	8009cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bc80      	pop	{r7}
 8009cc4:	4770      	bx	lr

08009cc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	807b      	strh	r3, [r7, #2]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009cd6:	787b      	ldrb	r3, [r7, #1]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cdc:	887a      	ldrh	r2, [r7, #2]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009ce2:	e003      	b.n	8009cec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009ce4:	887b      	ldrh	r3, [r7, #2]
 8009ce6:	041a      	lsls	r2, r3, #16
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	611a      	str	r2, [r3, #16]
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bc80      	pop	{r7}
 8009cf4:	4770      	bx	lr

08009cf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d08:	887a      	ldrh	r2, [r7, #2]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	041a      	lsls	r2, r3, #16
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	43d9      	mvns	r1, r3
 8009d14:	887b      	ldrh	r3, [r7, #2]
 8009d16:	400b      	ands	r3, r1
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	611a      	str	r2, [r3, #16]
}
 8009d1e:	bf00      	nop
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bc80      	pop	{r7}
 8009d26:	4770      	bx	lr

08009d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e12b      	b.n	8009f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fe fff4 	bl	8008d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2224      	movs	r2, #36	@ 0x24
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f022 0201 	bic.w	r2, r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d8c:	f001 fdb8 	bl	800b900 <HAL_RCC_GetPCLK1Freq>
 8009d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	4a81      	ldr	r2, [pc, #516]	@ (8009f9c <HAL_I2C_Init+0x274>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d807      	bhi.n	8009dac <HAL_I2C_Init+0x84>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4a80      	ldr	r2, [pc, #512]	@ (8009fa0 <HAL_I2C_Init+0x278>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	bf94      	ite	ls
 8009da4:	2301      	movls	r3, #1
 8009da6:	2300      	movhi	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	e006      	b.n	8009dba <HAL_I2C_Init+0x92>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4a7d      	ldr	r2, [pc, #500]	@ (8009fa4 <HAL_I2C_Init+0x27c>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	bf94      	ite	ls
 8009db4:	2301      	movls	r3, #1
 8009db6:	2300      	movhi	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e0e7      	b.n	8009f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	4a78      	ldr	r2, [pc, #480]	@ (8009fa8 <HAL_I2C_Init+0x280>)
 8009dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dca:	0c9b      	lsrs	r3, r3, #18
 8009dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6a1b      	ldr	r3, [r3, #32]
 8009de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	4a6a      	ldr	r2, [pc, #424]	@ (8009f9c <HAL_I2C_Init+0x274>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d802      	bhi.n	8009dfc <HAL_I2C_Init+0xd4>
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	e009      	b.n	8009e10 <HAL_I2C_Init+0xe8>
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009e02:	fb02 f303 	mul.w	r3, r2, r3
 8009e06:	4a69      	ldr	r2, [pc, #420]	@ (8009fac <HAL_I2C_Init+0x284>)
 8009e08:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0c:	099b      	lsrs	r3, r3, #6
 8009e0e:	3301      	adds	r3, #1
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6812      	ldr	r2, [r2, #0]
 8009e14:	430b      	orrs	r3, r1
 8009e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	69db      	ldr	r3, [r3, #28]
 8009e1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009e22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	495c      	ldr	r1, [pc, #368]	@ (8009f9c <HAL_I2C_Init+0x274>)
 8009e2c:	428b      	cmp	r3, r1
 8009e2e:	d819      	bhi.n	8009e64 <HAL_I2C_Init+0x13c>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	1e59      	subs	r1, r3, #1
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e3e:	1c59      	adds	r1, r3, #1
 8009e40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009e44:	400b      	ands	r3, r1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <HAL_I2C_Init+0x138>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	1e59      	subs	r1, r3, #1
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e58:	3301      	adds	r3, #1
 8009e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e5e:	e051      	b.n	8009f04 <HAL_I2C_Init+0x1dc>
 8009e60:	2304      	movs	r3, #4
 8009e62:	e04f      	b.n	8009f04 <HAL_I2C_Init+0x1dc>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d111      	bne.n	8009e90 <HAL_I2C_Init+0x168>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	1e58      	subs	r0, r3, #1
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6859      	ldr	r1, [r3, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	440b      	add	r3, r1
 8009e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e7e:	3301      	adds	r3, #1
 8009e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	bf0c      	ite	eq
 8009e88:	2301      	moveq	r3, #1
 8009e8a:	2300      	movne	r3, #0
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	e012      	b.n	8009eb6 <HAL_I2C_Init+0x18e>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	1e58      	subs	r0, r3, #1
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6859      	ldr	r1, [r3, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	0099      	lsls	r1, r3, #2
 8009ea0:	440b      	add	r3, r1
 8009ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	bf0c      	ite	eq
 8009eb0:	2301      	moveq	r3, #1
 8009eb2:	2300      	movne	r3, #0
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <HAL_I2C_Init+0x196>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e022      	b.n	8009f04 <HAL_I2C_Init+0x1dc>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10e      	bne.n	8009ee4 <HAL_I2C_Init+0x1bc>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	1e58      	subs	r0, r3, #1
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6859      	ldr	r1, [r3, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	440b      	add	r3, r1
 8009ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ed8:	3301      	adds	r3, #1
 8009eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ee2:	e00f      	b.n	8009f04 <HAL_I2C_Init+0x1dc>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	1e58      	subs	r0, r3, #1
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6859      	ldr	r1, [r3, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	0099      	lsls	r1, r3, #2
 8009ef4:	440b      	add	r3, r1
 8009ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009efa:	3301      	adds	r3, #1
 8009efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	6809      	ldr	r1, [r1, #0]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69da      	ldr	r2, [r3, #28]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009f32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6911      	ldr	r1, [r2, #16]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	68d2      	ldr	r2, [r2, #12]
 8009f3e:	4311      	orrs	r1, r2
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	6812      	ldr	r2, [r2, #0]
 8009f44:	430b      	orrs	r3, r1
 8009f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	695a      	ldr	r2, [r3, #20]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f042 0201 	orr.w	r2, r2, #1
 8009f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	000186a0 	.word	0x000186a0
 8009fa0:	001e847f 	.word	0x001e847f
 8009fa4:	003d08ff 	.word	0x003d08ff
 8009fa8:	431bde83 	.word	0x431bde83
 8009fac:	10624dd3 	.word	0x10624dd3

08009fb0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e021      	b.n	800a006 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2224      	movs	r2, #36	@ 0x24
 8009fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 0201 	bic.w	r2, r2, #1
 8009fd8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7fe feec 	bl	8008db8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b088      	sub	sp, #32
 800a014:	af02      	add	r7, sp, #8
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	461a      	mov	r2, r3
 800a01c:	460b      	mov	r3, r1
 800a01e:	817b      	strh	r3, [r7, #10]
 800a020:	4613      	mov	r3, r2
 800a022:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a024:	f7ff f85e 	bl	80090e4 <HAL_GetTick>
 800a028:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b20      	cmp	r3, #32
 800a034:	f040 80e0 	bne.w	800a1f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	2319      	movs	r3, #25
 800a03e:	2201      	movs	r2, #1
 800a040:	4970      	ldr	r1, [pc, #448]	@ (800a204 <HAL_I2C_Master_Transmit+0x1f4>)
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fe5c 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a04e:	2302      	movs	r3, #2
 800a050:	e0d3      	b.n	800a1fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d101      	bne.n	800a060 <HAL_I2C_Master_Transmit+0x50>
 800a05c:	2302      	movs	r3, #2
 800a05e:	e0cc      	b.n	800a1fa <HAL_I2C_Master_Transmit+0x1ea>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b01      	cmp	r3, #1
 800a074:	d007      	beq.n	800a086 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f042 0201 	orr.w	r2, r2, #1
 800a084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a094:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2221      	movs	r2, #33	@ 0x21
 800a09a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2210      	movs	r2, #16
 800a0a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	893a      	ldrh	r2, [r7, #8]
 800a0b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4a50      	ldr	r2, [pc, #320]	@ (800a208 <HAL_I2C_Master_Transmit+0x1f8>)
 800a0c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a0c8:	8979      	ldrh	r1, [r7, #10]
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	6a3a      	ldr	r2, [r7, #32]
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 fc16 	bl	800a900 <I2C_MasterRequestWrite>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e08d      	b.n	800a1fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0de:	2300      	movs	r3, #0
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	613b      	str	r3, [r7, #16]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a0f4:	e066      	b.n	800a1c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	6a39      	ldr	r1, [r7, #32]
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 ff1a 	bl	800af34 <I2C_WaitOnTXEFlagUntilTimeout>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00d      	beq.n	800a122 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d107      	bne.n	800a11e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a11c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e06b      	b.n	800a1fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a126:	781a      	ldrb	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a132:	1c5a      	adds	r2, r3, #1
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	b29a      	uxth	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a14a:	3b01      	subs	r3, #1
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	f003 0304 	and.w	r3, r3, #4
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	d11b      	bne.n	800a198 <HAL_I2C_Master_Transmit+0x188>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a164:	2b00      	cmp	r3, #0
 800a166:	d017      	beq.n	800a198 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a190:	3b01      	subs	r3, #1
 800a192:	b29a      	uxth	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	6a39      	ldr	r1, [r7, #32]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 ff11 	bl	800afc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00d      	beq.n	800a1c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d107      	bne.n	800a1c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e01a      	b.n	800a1fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d194      	bne.n	800a0f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e000      	b.n	800a1fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a1f8:	2302      	movs	r3, #2
  }
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	00100002 	.word	0x00100002
 800a208:	ffff0000 	.word	0xffff0000

0800a20c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af02      	add	r7, sp, #8
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	4608      	mov	r0, r1
 800a216:	4611      	mov	r1, r2
 800a218:	461a      	mov	r2, r3
 800a21a:	4603      	mov	r3, r0
 800a21c:	817b      	strh	r3, [r7, #10]
 800a21e:	460b      	mov	r3, r1
 800a220:	813b      	strh	r3, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a226:	f7fe ff5d 	bl	80090e4 <HAL_GetTick>
 800a22a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b20      	cmp	r3, #32
 800a236:	f040 80d9 	bne.w	800a3ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	2319      	movs	r3, #25
 800a240:	2201      	movs	r2, #1
 800a242:	496d      	ldr	r1, [pc, #436]	@ (800a3f8 <HAL_I2C_Mem_Write+0x1ec>)
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 fd5b 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a250:	2302      	movs	r3, #2
 800a252:	e0cc      	b.n	800a3ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <HAL_I2C_Mem_Write+0x56>
 800a25e:	2302      	movs	r3, #2
 800a260:	e0c5      	b.n	800a3ee <HAL_I2C_Mem_Write+0x1e2>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b01      	cmp	r3, #1
 800a276:	d007      	beq.n	800a288 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f042 0201 	orr.w	r2, r2, #1
 800a286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2221      	movs	r2, #33	@ 0x21
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2240      	movs	r2, #64	@ 0x40
 800a2a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6a3a      	ldr	r2, [r7, #32]
 800a2b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a2b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4a4d      	ldr	r2, [pc, #308]	@ (800a3fc <HAL_I2C_Mem_Write+0x1f0>)
 800a2c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a2ca:	88f8      	ldrh	r0, [r7, #6]
 800a2cc:	893a      	ldrh	r2, [r7, #8]
 800a2ce:	8979      	ldrh	r1, [r7, #10]
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	9301      	str	r3, [sp, #4]
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	4603      	mov	r3, r0
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 fb92 	bl	800aa04 <I2C_RequestMemoryWrite>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d052      	beq.n	800a38c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e081      	b.n	800a3ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2ea:	697a      	ldr	r2, [r7, #20]
 800a2ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fe20 	bl	800af34 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00d      	beq.n	800a316 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d107      	bne.n	800a312 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e06b      	b.n	800a3ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31a:	781a      	ldrb	r2, [r3, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a330:	3b01      	subs	r3, #1
 800a332:	b29a      	uxth	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	3b01      	subs	r3, #1
 800a340:	b29a      	uxth	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b04      	cmp	r3, #4
 800a352:	d11b      	bne.n	800a38c <HAL_I2C_Mem_Write+0x180>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d017      	beq.n	800a38c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a376:	3b01      	subs	r3, #1
 800a378:	b29a      	uxth	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a382:	b29b      	uxth	r3, r3
 800a384:	3b01      	subs	r3, #1
 800a386:	b29a      	uxth	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1aa      	bne.n	800a2ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 fe13 	bl	800afc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00d      	beq.n	800a3c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d107      	bne.n	800a3bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e016      	b.n	800a3ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e000      	b.n	800a3ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a3ec:	2302      	movs	r3, #2
  }
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	00100002 	.word	0x00100002
 800a3fc:	ffff0000 	.word	0xffff0000

0800a400 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08c      	sub	sp, #48	@ 0x30
 800a404:	af02      	add	r7, sp, #8
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	4608      	mov	r0, r1
 800a40a:	4611      	mov	r1, r2
 800a40c:	461a      	mov	r2, r3
 800a40e:	4603      	mov	r3, r0
 800a410:	817b      	strh	r3, [r7, #10]
 800a412:	460b      	mov	r3, r1
 800a414:	813b      	strh	r3, [r7, #8]
 800a416:	4613      	mov	r3, r2
 800a418:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a41e:	f7fe fe61 	bl	80090e4 <HAL_GetTick>
 800a422:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b20      	cmp	r3, #32
 800a42e:	f040 8244 	bne.w	800a8ba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	2319      	movs	r3, #25
 800a438:	2201      	movs	r2, #1
 800a43a:	4982      	ldr	r1, [pc, #520]	@ (800a644 <HAL_I2C_Mem_Read+0x244>)
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 fc5f 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a448:	2302      	movs	r3, #2
 800a44a:	e237      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a452:	2b01      	cmp	r3, #1
 800a454:	d101      	bne.n	800a45a <HAL_I2C_Mem_Read+0x5a>
 800a456:	2302      	movs	r3, #2
 800a458:	e230      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d007      	beq.n	800a480 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f042 0201 	orr.w	r2, r2, #1
 800a47e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a48e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2222      	movs	r2, #34	@ 0x22
 800a494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2240      	movs	r2, #64	@ 0x40
 800a49c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a4b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4a62      	ldr	r2, [pc, #392]	@ (800a648 <HAL_I2C_Mem_Read+0x248>)
 800a4c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4c2:	88f8      	ldrh	r0, [r7, #6]
 800a4c4:	893a      	ldrh	r2, [r7, #8]
 800a4c6:	8979      	ldrh	r1, [r7, #10]
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fb2c 	bl	800ab30 <I2C_RequestMemoryRead>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e1ec      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d113      	bne.n	800a512 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	61fb      	str	r3, [r7, #28]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	61fb      	str	r3, [r7, #28]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	61fb      	str	r3, [r7, #28]
 800a4fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	e1c0      	b.n	800a894 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a516:	2b01      	cmp	r3, #1
 800a518:	d11e      	bne.n	800a558 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a528:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a52a:	b672      	cpsid	i
}
 800a52c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a52e:	2300      	movs	r3, #0
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	61bb      	str	r3, [r7, #24]
 800a542:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a552:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a554:	b662      	cpsie	i
}
 800a556:	e035      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d11e      	bne.n	800a59e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a56e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a570:	b672      	cpsid	i
}
 800a572:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a574:	2300      	movs	r3, #0
 800a576:	617b      	str	r3, [r7, #20]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a598:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a59a:	b662      	cpsie	i
}
 800a59c:	e012      	b.n	800a5c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a5ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	613b      	str	r3, [r7, #16]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	613b      	str	r3, [r7, #16]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	613b      	str	r3, [r7, #16]
 800a5c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a5c4:	e166      	b.n	800a894 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	f200 811f 	bhi.w	800a80e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d123      	bne.n	800a620 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f000 fd39 	bl	800b054 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e167      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	691a      	ldr	r2, [r3, #16]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f6:	b2d2      	uxtb	r2, r2
 800a5f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a608:	3b01      	subs	r3, #1
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a614:	b29b      	uxth	r3, r3
 800a616:	3b01      	subs	r3, #1
 800a618:	b29a      	uxth	r2, r3
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a61e:	e139      	b.n	800a894 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a624:	2b02      	cmp	r3, #2
 800a626:	d152      	bne.n	800a6ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	2200      	movs	r2, #0
 800a630:	4906      	ldr	r1, [pc, #24]	@ (800a64c <HAL_I2C_Mem_Read+0x24c>)
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 fb64 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d008      	beq.n	800a650 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e13c      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
 800a642:	bf00      	nop
 800a644:	00100002 	.word	0x00100002
 800a648:	ffff0000 	.word	0xffff0000
 800a64c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a650:	b672      	cpsid	i
}
 800a652:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	691a      	ldr	r2, [r3, #16]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a66e:	b2d2      	uxtb	r2, r2
 800a670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a680:	3b01      	subs	r3, #1
 800a682:	b29a      	uxth	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	3b01      	subs	r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a696:	b662      	cpsie	i
}
 800a698:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691a      	ldr	r2, [r3, #16]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a4:	b2d2      	uxtb	r2, r2
 800a6a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a6cc:	e0e2      	b.n	800a894 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	497b      	ldr	r1, [pc, #492]	@ (800a8c4 <HAL_I2C_Mem_Read+0x4c4>)
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fb11 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e0e9      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6f8:	b672      	cpsid	i
}
 800a6fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	691a      	ldr	r2, [r3, #16]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a706:	b2d2      	uxtb	r2, r2
 800a708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a718:	3b01      	subs	r3, #1
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a724:	b29b      	uxth	r3, r3
 800a726:	3b01      	subs	r3, #1
 800a728:	b29a      	uxth	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a72e:	4b66      	ldr	r3, [pc, #408]	@ (800a8c8 <HAL_I2C_Mem_Read+0x4c8>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	08db      	lsrs	r3, r3, #3
 800a734:	4a65      	ldr	r2, [pc, #404]	@ (800a8cc <HAL_I2C_Mem_Read+0x4cc>)
 800a736:	fba2 2303 	umull	r2, r3, r2, r3
 800a73a:	0a1a      	lsrs	r2, r3, #8
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	00da      	lsls	r2, r3, #3
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d118      	bne.n	800a786 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a76e:	f043 0220 	orr.w	r2, r3, #32
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a776:	b662      	cpsie	i
}
 800a778:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e09a      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b04      	cmp	r3, #4
 800a792:	d1d9      	bne.n	800a748 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	691a      	ldr	r2, [r3, #16]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ae:	b2d2      	uxtb	r2, r2
 800a7b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a7d6:	b662      	cpsie	i
}
 800a7d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	691a      	ldr	r2, [r3, #16]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e4:	b2d2      	uxtb	r2, r2
 800a7e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a802:	b29b      	uxth	r3, r3
 800a804:	3b01      	subs	r3, #1
 800a806:	b29a      	uxth	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a80c:	e042      	b.n	800a894 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a80e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a810:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f000 fc1e 	bl	800b054 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e04c      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	691a      	ldr	r2, [r3, #16]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82c:	b2d2      	uxtb	r2, r2
 800a82e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a83e:	3b01      	subs	r3, #1
 800a840:	b29a      	uxth	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	3b01      	subs	r3, #1
 800a84e:	b29a      	uxth	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	f003 0304 	and.w	r3, r3, #4
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d118      	bne.n	800a894 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	691a      	ldr	r2, [r3, #16]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86c:	b2d2      	uxtb	r2, r2
 800a86e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b29a      	uxth	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f47f ae94 	bne.w	800a5c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e000      	b.n	800a8bc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a8ba:	2302      	movs	r3, #2
  }
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3728      	adds	r7, #40	@ 0x28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	00010004 	.word	0x00010004
 800a8c8:	20000e10 	.word	0x20000e10
 800a8cc:	14f8b589 	.word	0x14f8b589

0800a8d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8de:	b2db      	uxtb	r3, r3
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bc80      	pop	{r7}
 800a8e8:	4770      	bx	lr

0800a8ea <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af02      	add	r7, sp, #8
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	460b      	mov	r3, r1
 800a90e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a914:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d006      	beq.n	800a92a <I2C_MasterRequestWrite+0x2a>
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d003      	beq.n	800a92a <I2C_MasterRequestWrite+0x2a>
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a928:	d108      	bne.n	800a93c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e00b      	b.n	800a954 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a940:	2b12      	cmp	r3, #18
 800a942:	d107      	bne.n	800a954 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 f9cd 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00d      	beq.n	800a988 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a97a:	d103      	bne.n	800a984 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a982:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a984:	2303      	movs	r3, #3
 800a986:	e035      	b.n	800a9f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a990:	d108      	bne.n	800a9a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a992:	897b      	ldrh	r3, [r7, #10]
 800a994:	b2db      	uxtb	r3, r3
 800a996:	461a      	mov	r2, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a9a0:	611a      	str	r2, [r3, #16]
 800a9a2:	e01b      	b.n	800a9dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a9a4:	897b      	ldrh	r3, [r7, #10]
 800a9a6:	11db      	asrs	r3, r3, #7
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	f003 0306 	and.w	r3, r3, #6
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	f063 030f 	orn	r3, r3, #15
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	490e      	ldr	r1, [pc, #56]	@ (800a9fc <I2C_MasterRequestWrite+0xfc>)
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f000 fa16 	bl	800adf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e010      	b.n	800a9f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a9d2:	897b      	ldrh	r3, [r7, #10]
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	4907      	ldr	r1, [pc, #28]	@ (800aa00 <I2C_MasterRequestWrite+0x100>)
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 fa06 	bl	800adf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e000      	b.n	800a9f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3718      	adds	r7, #24
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	00010008 	.word	0x00010008
 800aa00:	00010002 	.word	0x00010002

0800aa04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	4611      	mov	r1, r2
 800aa10:	461a      	mov	r2, r3
 800aa12:	4603      	mov	r3, r0
 800aa14:	817b      	strh	r3, [r7, #10]
 800aa16:	460b      	mov	r3, r1
 800aa18:	813b      	strh	r3, [r7, #8]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 f960 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00d      	beq.n	800aa62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa54:	d103      	bne.n	800aa5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e05f      	b.n	800ab22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa62:	897b      	ldrh	r3, [r7, #10]
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	461a      	mov	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800aa70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	6a3a      	ldr	r2, [r7, #32]
 800aa76:	492d      	ldr	r1, [pc, #180]	@ (800ab2c <I2C_RequestMemoryWrite+0x128>)
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f9bb 	bl	800adf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e04c      	b.n	800ab22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa88:	2300      	movs	r3, #0
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	617b      	str	r3, [r7, #20]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaa0:	6a39      	ldr	r1, [r7, #32]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 fa46 	bl	800af34 <I2C_WaitOnTXEFlagUntilTimeout>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00d      	beq.n	800aaca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab2:	2b04      	cmp	r3, #4
 800aab4:	d107      	bne.n	800aac6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aac4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e02b      	b.n	800ab22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aaca:	88fb      	ldrh	r3, [r7, #6]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d105      	bne.n	800aadc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aad0:	893b      	ldrh	r3, [r7, #8]
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	611a      	str	r2, [r3, #16]
 800aada:	e021      	b.n	800ab20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aadc:	893b      	ldrh	r3, [r7, #8]
 800aade:	0a1b      	lsrs	r3, r3, #8
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaec:	6a39      	ldr	r1, [r7, #32]
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 fa20 	bl	800af34 <I2C_WaitOnTXEFlagUntilTimeout>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00d      	beq.n	800ab16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	d107      	bne.n	800ab12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e005      	b.n	800ab22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab16:	893b      	ldrh	r3, [r7, #8]
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	00010002 	.word	0x00010002

0800ab30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	4608      	mov	r0, r1
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4603      	mov	r3, r0
 800ab40:	817b      	strh	r3, [r7, #10]
 800ab42:	460b      	mov	r3, r1
 800ab44:	813b      	strh	r3, [r7, #8]
 800ab46:	4613      	mov	r3, r2
 800ab48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f8c2 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00d      	beq.n	800ab9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab90:	d103      	bne.n	800ab9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e0aa      	b.n	800acf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab9e:	897b      	ldrh	r3, [r7, #10]
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	461a      	mov	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800abac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800abae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb0:	6a3a      	ldr	r2, [r7, #32]
 800abb2:	4952      	ldr	r1, [pc, #328]	@ (800acfc <I2C_RequestMemoryRead+0x1cc>)
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f000 f91d 	bl	800adf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e097      	b.n	800acf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abc4:	2300      	movs	r3, #0
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abdc:	6a39      	ldr	r1, [r7, #32]
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 f9a8 	bl	800af34 <I2C_WaitOnTXEFlagUntilTimeout>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00d      	beq.n	800ac06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abee:	2b04      	cmp	r3, #4
 800abf0:	d107      	bne.n	800ac02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e076      	b.n	800acf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac06:	88fb      	ldrh	r3, [r7, #6]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d105      	bne.n	800ac18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac0c:	893b      	ldrh	r3, [r7, #8]
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	611a      	str	r2, [r3, #16]
 800ac16:	e021      	b.n	800ac5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ac18:	893b      	ldrh	r3, [r7, #8]
 800ac1a:	0a1b      	lsrs	r3, r3, #8
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac28:	6a39      	ldr	r1, [r7, #32]
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 f982 	bl	800af34 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00d      	beq.n	800ac52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3a:	2b04      	cmp	r3, #4
 800ac3c:	d107      	bne.n	800ac4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e050      	b.n	800acf4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac52:	893b      	ldrh	r3, [r7, #8]
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac5e:	6a39      	ldr	r1, [r7, #32]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 f967 	bl	800af34 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00d      	beq.n	800ac88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac70:	2b04      	cmp	r3, #4
 800ac72:	d107      	bne.n	800ac84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e035      	b.n	800acf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 f82b 	bl	800ad00 <I2C_WaitOnFlagUntilTimeout>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00d      	beq.n	800accc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acbe:	d103      	bne.n	800acc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e013      	b.n	800acf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800accc:	897b      	ldrh	r3, [r7, #10]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	f043 0301 	orr.w	r3, r3, #1
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acde:	6a3a      	ldr	r2, [r7, #32]
 800ace0:	4906      	ldr	r1, [pc, #24]	@ (800acfc <I2C_RequestMemoryRead+0x1cc>)
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 f886 	bl	800adf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	00010002 	.word	0x00010002

0800ad00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad10:	e048      	b.n	800ada4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad18:	d044      	beq.n	800ada4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad1a:	f7fe f9e3 	bl	80090e4 <HAL_GetTick>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d302      	bcc.n	800ad30 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d139      	bne.n	800ada4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	0c1b      	lsrs	r3, r3, #16
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d10d      	bne.n	800ad56 <I2C_WaitOnFlagUntilTimeout+0x56>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	43da      	mvns	r2, r3
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	4013      	ands	r3, r2
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bf0c      	ite	eq
 800ad4c:	2301      	moveq	r3, #1
 800ad4e:	2300      	movne	r3, #0
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	461a      	mov	r2, r3
 800ad54:	e00c      	b.n	800ad70 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	43da      	mvns	r2, r3
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	4013      	ands	r3, r2
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	bf0c      	ite	eq
 800ad68:	2301      	moveq	r3, #1
 800ad6a:	2300      	movne	r3, #0
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	461a      	mov	r2, r3
 800ad70:	79fb      	ldrb	r3, [r7, #7]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d116      	bne.n	800ada4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2220      	movs	r2, #32
 800ad80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad90:	f043 0220 	orr.w	r2, r3, #32
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e023      	b.n	800adec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	0c1b      	lsrs	r3, r3, #16
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d10d      	bne.n	800adca <I2C_WaitOnFlagUntilTimeout+0xca>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	43da      	mvns	r2, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	4013      	ands	r3, r2
 800adba:	b29b      	uxth	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	bf0c      	ite	eq
 800adc0:	2301      	moveq	r3, #1
 800adc2:	2300      	movne	r3, #0
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	461a      	mov	r2, r3
 800adc8:	e00c      	b.n	800ade4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	43da      	mvns	r2, r3
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	4013      	ands	r3, r2
 800add6:	b29b      	uxth	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	bf0c      	ite	eq
 800addc:	2301      	moveq	r3, #1
 800adde:	2300      	movne	r3, #0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	461a      	mov	r2, r3
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d093      	beq.n	800ad12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ae02:	e071      	b.n	800aee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae12:	d123      	bne.n	800ae5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ae2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2220      	movs	r2, #32
 800ae38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae48:	f043 0204 	orr.w	r2, r3, #4
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e067      	b.n	800af2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae62:	d041      	beq.n	800aee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae64:	f7fe f93e 	bl	80090e4 <HAL_GetTick>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d302      	bcc.n	800ae7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d136      	bne.n	800aee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	0c1b      	lsrs	r3, r3, #16
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d10c      	bne.n	800ae9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	43da      	mvns	r2, r3
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bf14      	ite	ne
 800ae96:	2301      	movne	r3, #1
 800ae98:	2300      	moveq	r3, #0
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	e00b      	b.n	800aeb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	43da      	mvns	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	4013      	ands	r3, r2
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bf14      	ite	ne
 800aeb0:	2301      	movne	r3, #1
 800aeb2:	2300      	moveq	r3, #0
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d016      	beq.n	800aee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2220      	movs	r2, #32
 800aec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed4:	f043 0220 	orr.w	r2, r3, #32
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e021      	b.n	800af2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	0c1b      	lsrs	r3, r3, #16
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d10c      	bne.n	800af0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	43da      	mvns	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4013      	ands	r3, r2
 800aefe:	b29b      	uxth	r3, r3
 800af00:	2b00      	cmp	r3, #0
 800af02:	bf14      	ite	ne
 800af04:	2301      	movne	r3, #1
 800af06:	2300      	moveq	r3, #0
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	e00b      	b.n	800af24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	43da      	mvns	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4013      	ands	r3, r2
 800af18:	b29b      	uxth	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	bf14      	ite	ne
 800af1e:	2301      	movne	r3, #1
 800af20:	2300      	moveq	r3, #0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b00      	cmp	r3, #0
 800af26:	f47f af6d 	bne.w	800ae04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af40:	e034      	b.n	800afac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 f8e3 	bl	800b10e <I2C_IsAcknowledgeFailed>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e034      	b.n	800afbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af58:	d028      	beq.n	800afac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af5a:	f7fe f8c3 	bl	80090e4 <HAL_GetTick>
 800af5e:	4602      	mov	r2, r0
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	429a      	cmp	r2, r3
 800af68:	d302      	bcc.n	800af70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d11d      	bne.n	800afac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af7a:	2b80      	cmp	r3, #128	@ 0x80
 800af7c:	d016      	beq.n	800afac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2220      	movs	r2, #32
 800af88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af98:	f043 0220 	orr.w	r2, r3, #32
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e007      	b.n	800afbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afb6:	2b80      	cmp	r3, #128	@ 0x80
 800afb8:	d1c3      	bne.n	800af42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800afd0:	e034      	b.n	800b03c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 f89b 	bl	800b10e <I2C_IsAcknowledgeFailed>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e034      	b.n	800b04c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afe8:	d028      	beq.n	800b03c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afea:	f7fe f87b 	bl	80090e4 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d302      	bcc.n	800b000 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d11d      	bne.n	800b03c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	f003 0304 	and.w	r3, r3, #4
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	d016      	beq.n	800b03c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2220      	movs	r2, #32
 800b018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b028:	f043 0220 	orr.w	r2, r3, #32
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e007      	b.n	800b04c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	f003 0304 	and.w	r3, r3, #4
 800b046:	2b04      	cmp	r3, #4
 800b048:	d1c3      	bne.n	800afd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b060:	e049      	b.n	800b0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	2b10      	cmp	r3, #16
 800b06e:	d119      	bne.n	800b0a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f06f 0210 	mvn.w	r2, #16
 800b078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2220      	movs	r2, #32
 800b084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e030      	b.n	800b106 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a4:	f7fe f81e 	bl	80090e4 <HAL_GetTick>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d302      	bcc.n	800b0ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d11d      	bne.n	800b0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c4:	2b40      	cmp	r3, #64	@ 0x40
 800b0c6:	d016      	beq.n	800b0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e2:	f043 0220 	orr.w	r2, r3, #32
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e007      	b.n	800b106 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b100:	2b40      	cmp	r3, #64	@ 0x40
 800b102:	d1ae      	bne.n	800b062 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b10e:	b480      	push	{r7}
 800b110:	b083      	sub	sp, #12
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b124:	d11b      	bne.n	800b15e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b12e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2220      	movs	r2, #32
 800b13a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b14a:	f043 0204 	orr.w	r2, r3, #4
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e000      	b.n	800b160 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	bc80      	pop	{r7}
 800b168:	4770      	bx	lr
	...

0800b16c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e272      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 8087 	beq.w	800b29a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b18c:	4b92      	ldr	r3, [pc, #584]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	f003 030c 	and.w	r3, r3, #12
 800b194:	2b04      	cmp	r3, #4
 800b196:	d00c      	beq.n	800b1b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b198:	4b8f      	ldr	r3, [pc, #572]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	f003 030c 	and.w	r3, r3, #12
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d112      	bne.n	800b1ca <HAL_RCC_OscConfig+0x5e>
 800b1a4:	4b8c      	ldr	r3, [pc, #560]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1b0:	d10b      	bne.n	800b1ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1b2:	4b89      	ldr	r3, [pc, #548]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d06c      	beq.n	800b298 <HAL_RCC_OscConfig+0x12c>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d168      	bne.n	800b298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e24c      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1d2:	d106      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x76>
 800b1d4:	4b80      	ldr	r3, [pc, #512]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a7f      	ldr	r2, [pc, #508]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b1da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	e02e      	b.n	800b240 <HAL_RCC_OscConfig+0xd4>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10c      	bne.n	800b204 <HAL_RCC_OscConfig+0x98>
 800b1ea:	4b7b      	ldr	r3, [pc, #492]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a7a      	ldr	r2, [pc, #488]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b1f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	4b78      	ldr	r3, [pc, #480]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a77      	ldr	r2, [pc, #476]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b1fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	e01d      	b.n	800b240 <HAL_RCC_OscConfig+0xd4>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b20c:	d10c      	bne.n	800b228 <HAL_RCC_OscConfig+0xbc>
 800b20e:	4b72      	ldr	r3, [pc, #456]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a71      	ldr	r2, [pc, #452]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b218:	6013      	str	r3, [r2, #0]
 800b21a:	4b6f      	ldr	r3, [pc, #444]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a6e      	ldr	r2, [pc, #440]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	e00b      	b.n	800b240 <HAL_RCC_OscConfig+0xd4>
 800b228:	4b6b      	ldr	r3, [pc, #428]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a6a      	ldr	r2, [pc, #424]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b22e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	4b68      	ldr	r3, [pc, #416]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a67      	ldr	r2, [pc, #412]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b23a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b23e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d013      	beq.n	800b270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b248:	f7fd ff4c 	bl	80090e4 <HAL_GetTick>
 800b24c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b24e:	e008      	b.n	800b262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b250:	f7fd ff48 	bl	80090e4 <HAL_GetTick>
 800b254:	4602      	mov	r2, r0
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	2b64      	cmp	r3, #100	@ 0x64
 800b25c:	d901      	bls.n	800b262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e200      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b262:	4b5d      	ldr	r3, [pc, #372]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0f0      	beq.n	800b250 <HAL_RCC_OscConfig+0xe4>
 800b26e:	e014      	b.n	800b29a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b270:	f7fd ff38 	bl	80090e4 <HAL_GetTick>
 800b274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b276:	e008      	b.n	800b28a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b278:	f7fd ff34 	bl	80090e4 <HAL_GetTick>
 800b27c:	4602      	mov	r2, r0
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	2b64      	cmp	r3, #100	@ 0x64
 800b284:	d901      	bls.n	800b28a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b286:	2303      	movs	r3, #3
 800b288:	e1ec      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b28a:	4b53      	ldr	r3, [pc, #332]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1f0      	bne.n	800b278 <HAL_RCC_OscConfig+0x10c>
 800b296:	e000      	b.n	800b29a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d063      	beq.n	800b36e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b2a6:	4b4c      	ldr	r3, [pc, #304]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f003 030c 	and.w	r3, r3, #12
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00b      	beq.n	800b2ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b2b2:	4b49      	ldr	r3, [pc, #292]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f003 030c 	and.w	r3, r3, #12
 800b2ba:	2b08      	cmp	r3, #8
 800b2bc:	d11c      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x18c>
 800b2be:	4b46      	ldr	r3, [pc, #280]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d116      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2ca:	4b43      	ldr	r3, [pc, #268]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d005      	beq.n	800b2e2 <HAL_RCC_OscConfig+0x176>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d001      	beq.n	800b2e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e1c0      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2e2:	4b3d      	ldr	r3, [pc, #244]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	00db      	lsls	r3, r3, #3
 800b2f0:	4939      	ldr	r1, [pc, #228]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2f6:	e03a      	b.n	800b36e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d020      	beq.n	800b342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b300:	4b36      	ldr	r3, [pc, #216]	@ (800b3dc <HAL_RCC_OscConfig+0x270>)
 800b302:	2201      	movs	r2, #1
 800b304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b306:	f7fd feed 	bl	80090e4 <HAL_GetTick>
 800b30a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b30c:	e008      	b.n	800b320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b30e:	f7fd fee9 	bl	80090e4 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d901      	bls.n	800b320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e1a1      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b320:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0302 	and.w	r3, r3, #2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d0f0      	beq.n	800b30e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b32c:	4b2a      	ldr	r3, [pc, #168]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	695b      	ldr	r3, [r3, #20]
 800b338:	00db      	lsls	r3, r3, #3
 800b33a:	4927      	ldr	r1, [pc, #156]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	600b      	str	r3, [r1, #0]
 800b340:	e015      	b.n	800b36e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b342:	4b26      	ldr	r3, [pc, #152]	@ (800b3dc <HAL_RCC_OscConfig+0x270>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b348:	f7fd fecc 	bl	80090e4 <HAL_GetTick>
 800b34c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b34e:	e008      	b.n	800b362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b350:	f7fd fec8 	bl	80090e4 <HAL_GetTick>
 800b354:	4602      	mov	r2, r0
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d901      	bls.n	800b362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	e180      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b362:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0302 	and.w	r3, r3, #2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1f0      	bne.n	800b350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0308 	and.w	r3, r3, #8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d03a      	beq.n	800b3f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d019      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b382:	4b17      	ldr	r3, [pc, #92]	@ (800b3e0 <HAL_RCC_OscConfig+0x274>)
 800b384:	2201      	movs	r2, #1
 800b386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b388:	f7fd feac 	bl	80090e4 <HAL_GetTick>
 800b38c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b38e:	e008      	b.n	800b3a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b390:	f7fd fea8 	bl	80090e4 <HAL_GetTick>
 800b394:	4602      	mov	r2, r0
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d901      	bls.n	800b3a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e160      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d8 <HAL_RCC_OscConfig+0x26c>)
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a6:	f003 0302 	and.w	r3, r3, #2
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d0f0      	beq.n	800b390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	f000 face 	bl	800b950 <RCC_Delay>
 800b3b4:	e01c      	b.n	800b3f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e0 <HAL_RCC_OscConfig+0x274>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b3bc:	f7fd fe92 	bl	80090e4 <HAL_GetTick>
 800b3c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b3c2:	e00f      	b.n	800b3e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3c4:	f7fd fe8e 	bl	80090e4 <HAL_GetTick>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d908      	bls.n	800b3e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e146      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
 800b3d6:	bf00      	nop
 800b3d8:	40021000 	.word	0x40021000
 800b3dc:	42420000 	.word	0x42420000
 800b3e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b3e4:	4b92      	ldr	r3, [pc, #584]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e8:	f003 0302 	and.w	r3, r3, #2
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e9      	bne.n	800b3c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0304 	and.w	r3, r3, #4
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 80a6 	beq.w	800b54a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3fe:	2300      	movs	r3, #0
 800b400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b402:	4b8b      	ldr	r3, [pc, #556]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10d      	bne.n	800b42a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b40e:	4b88      	ldr	r3, [pc, #544]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b410:	69db      	ldr	r3, [r3, #28]
 800b412:	4a87      	ldr	r2, [pc, #540]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b418:	61d3      	str	r3, [r2, #28]
 800b41a:	4b85      	ldr	r3, [pc, #532]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b41c:	69db      	ldr	r3, [r3, #28]
 800b41e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b422:	60bb      	str	r3, [r7, #8]
 800b424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b426:	2301      	movs	r3, #1
 800b428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b42a:	4b82      	ldr	r3, [pc, #520]	@ (800b634 <HAL_RCC_OscConfig+0x4c8>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b432:	2b00      	cmp	r3, #0
 800b434:	d118      	bne.n	800b468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b436:	4b7f      	ldr	r3, [pc, #508]	@ (800b634 <HAL_RCC_OscConfig+0x4c8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a7e      	ldr	r2, [pc, #504]	@ (800b634 <HAL_RCC_OscConfig+0x4c8>)
 800b43c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b442:	f7fd fe4f 	bl	80090e4 <HAL_GetTick>
 800b446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b448:	e008      	b.n	800b45c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b44a:	f7fd fe4b 	bl	80090e4 <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	2b64      	cmp	r3, #100	@ 0x64
 800b456:	d901      	bls.n	800b45c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	e103      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b45c:	4b75      	ldr	r3, [pc, #468]	@ (800b634 <HAL_RCC_OscConfig+0x4c8>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0f0      	beq.n	800b44a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d106      	bne.n	800b47e <HAL_RCC_OscConfig+0x312>
 800b470:	4b6f      	ldr	r3, [pc, #444]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	4a6e      	ldr	r2, [pc, #440]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b476:	f043 0301 	orr.w	r3, r3, #1
 800b47a:	6213      	str	r3, [r2, #32]
 800b47c:	e02d      	b.n	800b4da <HAL_RCC_OscConfig+0x36e>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10c      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x334>
 800b486:	4b6a      	ldr	r3, [pc, #424]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	4a69      	ldr	r2, [pc, #420]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	6213      	str	r3, [r2, #32]
 800b492:	4b67      	ldr	r3, [pc, #412]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	4a66      	ldr	r2, [pc, #408]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b498:	f023 0304 	bic.w	r3, r3, #4
 800b49c:	6213      	str	r3, [r2, #32]
 800b49e:	e01c      	b.n	800b4da <HAL_RCC_OscConfig+0x36e>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	2b05      	cmp	r3, #5
 800b4a6:	d10c      	bne.n	800b4c2 <HAL_RCC_OscConfig+0x356>
 800b4a8:	4b61      	ldr	r3, [pc, #388]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
 800b4ac:	4a60      	ldr	r2, [pc, #384]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b4ae:	f043 0304 	orr.w	r3, r3, #4
 800b4b2:	6213      	str	r3, [r2, #32]
 800b4b4:	4b5e      	ldr	r3, [pc, #376]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b4b6:	6a1b      	ldr	r3, [r3, #32]
 800b4b8:	4a5d      	ldr	r2, [pc, #372]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b4ba:	f043 0301 	orr.w	r3, r3, #1
 800b4be:	6213      	str	r3, [r2, #32]
 800b4c0:	e00b      	b.n	800b4da <HAL_RCC_OscConfig+0x36e>
 800b4c2:	4b5b      	ldr	r3, [pc, #364]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	4a5a      	ldr	r2, [pc, #360]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b4c8:	f023 0301 	bic.w	r3, r3, #1
 800b4cc:	6213      	str	r3, [r2, #32]
 800b4ce:	4b58      	ldr	r3, [pc, #352]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	4a57      	ldr	r2, [pc, #348]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b4d4:	f023 0304 	bic.w	r3, r3, #4
 800b4d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d015      	beq.n	800b50e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4e2:	f7fd fdff 	bl	80090e4 <HAL_GetTick>
 800b4e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4e8:	e00a      	b.n	800b500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4ea:	f7fd fdfb 	bl	80090e4 <HAL_GetTick>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d901      	bls.n	800b500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e0b1      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b500:	4b4b      	ldr	r3, [pc, #300]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b502:	6a1b      	ldr	r3, [r3, #32]
 800b504:	f003 0302 	and.w	r3, r3, #2
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0ee      	beq.n	800b4ea <HAL_RCC_OscConfig+0x37e>
 800b50c:	e014      	b.n	800b538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b50e:	f7fd fde9 	bl	80090e4 <HAL_GetTick>
 800b512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b514:	e00a      	b.n	800b52c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b516:	f7fd fde5 	bl	80090e4 <HAL_GetTick>
 800b51a:	4602      	mov	r2, r0
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b524:	4293      	cmp	r3, r2
 800b526:	d901      	bls.n	800b52c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b528:	2303      	movs	r3, #3
 800b52a:	e09b      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b52c:	4b40      	ldr	r3, [pc, #256]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b52e:	6a1b      	ldr	r3, [r3, #32]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1ee      	bne.n	800b516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d105      	bne.n	800b54a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b53e:	4b3c      	ldr	r3, [pc, #240]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	4a3b      	ldr	r2, [pc, #236]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 8087 	beq.w	800b662 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b554:	4b36      	ldr	r3, [pc, #216]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f003 030c 	and.w	r3, r3, #12
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d061      	beq.n	800b624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	69db      	ldr	r3, [r3, #28]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d146      	bne.n	800b5f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b568:	4b33      	ldr	r3, [pc, #204]	@ (800b638 <HAL_RCC_OscConfig+0x4cc>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b56e:	f7fd fdb9 	bl	80090e4 <HAL_GetTick>
 800b572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b574:	e008      	b.n	800b588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b576:	f7fd fdb5 	bl	80090e4 <HAL_GetTick>
 800b57a:	4602      	mov	r2, r0
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	2b02      	cmp	r3, #2
 800b582:	d901      	bls.n	800b588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e06d      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b588:	4b29      	ldr	r3, [pc, #164]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1f0      	bne.n	800b576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a1b      	ldr	r3, [r3, #32]
 800b598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b59c:	d108      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b59e:	4b24      	ldr	r3, [pc, #144]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	4921      	ldr	r1, [pc, #132]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b5b0:	4b1f      	ldr	r3, [pc, #124]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a19      	ldr	r1, [r3, #32]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c0:	430b      	orrs	r3, r1
 800b5c2:	491b      	ldr	r1, [pc, #108]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b638 <HAL_RCC_OscConfig+0x4cc>)
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5ce:	f7fd fd89 	bl	80090e4 <HAL_GetTick>
 800b5d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5d4:	e008      	b.n	800b5e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5d6:	f7fd fd85 	bl	80090e4 <HAL_GetTick>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d901      	bls.n	800b5e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e03d      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5e8:	4b11      	ldr	r3, [pc, #68]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0f0      	beq.n	800b5d6 <HAL_RCC_OscConfig+0x46a>
 800b5f4:	e035      	b.n	800b662 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5f6:	4b10      	ldr	r3, [pc, #64]	@ (800b638 <HAL_RCC_OscConfig+0x4cc>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5fc:	f7fd fd72 	bl	80090e4 <HAL_GetTick>
 800b600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b602:	e008      	b.n	800b616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b604:	f7fd fd6e 	bl	80090e4 <HAL_GetTick>
 800b608:	4602      	mov	r2, r0
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d901      	bls.n	800b616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e026      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b616:	4b06      	ldr	r3, [pc, #24]	@ (800b630 <HAL_RCC_OscConfig+0x4c4>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1f0      	bne.n	800b604 <HAL_RCC_OscConfig+0x498>
 800b622:	e01e      	b.n	800b662 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	69db      	ldr	r3, [r3, #28]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d107      	bne.n	800b63c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e019      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
 800b630:	40021000 	.word	0x40021000
 800b634:	40007000 	.word	0x40007000
 800b638:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b63c:	4b0b      	ldr	r3, [pc, #44]	@ (800b66c <HAL_RCC_OscConfig+0x500>)
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d106      	bne.n	800b65e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d001      	beq.n	800b662 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e000      	b.n	800b664 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3718      	adds	r7, #24
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	40021000 	.word	0x40021000

0800b670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e0d0      	b.n	800b826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b684:	4b6a      	ldr	r3, [pc, #424]	@ (800b830 <HAL_RCC_ClockConfig+0x1c0>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d910      	bls.n	800b6b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b692:	4b67      	ldr	r3, [pc, #412]	@ (800b830 <HAL_RCC_ClockConfig+0x1c0>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f023 0207 	bic.w	r2, r3, #7
 800b69a:	4965      	ldr	r1, [pc, #404]	@ (800b830 <HAL_RCC_ClockConfig+0x1c0>)
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6a2:	4b63      	ldr	r3, [pc, #396]	@ (800b830 <HAL_RCC_ClockConfig+0x1c0>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d001      	beq.n	800b6b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e0b8      	b.n	800b826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0302 	and.w	r3, r3, #2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d020      	beq.n	800b702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d005      	beq.n	800b6d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b6cc:	4b59      	ldr	r3, [pc, #356]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	4a58      	ldr	r2, [pc, #352]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b6d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b6d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0308 	and.w	r3, r3, #8
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d005      	beq.n	800b6f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6e4:	4b53      	ldr	r3, [pc, #332]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4a52      	ldr	r2, [pc, #328]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b6ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6f0:	4b50      	ldr	r3, [pc, #320]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	494d      	ldr	r1, [pc, #308]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b6fe:	4313      	orrs	r3, r2
 800b700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d040      	beq.n	800b790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d107      	bne.n	800b726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b716:	4b47      	ldr	r3, [pc, #284]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d115      	bne.n	800b74e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e07f      	b.n	800b826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d107      	bne.n	800b73e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b72e:	4b41      	ldr	r3, [pc, #260]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e073      	b.n	800b826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b73e:	4b3d      	ldr	r3, [pc, #244]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f003 0302 	and.w	r3, r3, #2
 800b746:	2b00      	cmp	r3, #0
 800b748:	d101      	bne.n	800b74e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e06b      	b.n	800b826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b74e:	4b39      	ldr	r3, [pc, #228]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f023 0203 	bic.w	r2, r3, #3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	4936      	ldr	r1, [pc, #216]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b760:	f7fd fcc0 	bl	80090e4 <HAL_GetTick>
 800b764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b766:	e00a      	b.n	800b77e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b768:	f7fd fcbc 	bl	80090e4 <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b776:	4293      	cmp	r3, r2
 800b778:	d901      	bls.n	800b77e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e053      	b.n	800b826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b77e:	4b2d      	ldr	r3, [pc, #180]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f003 020c 	and.w	r2, r3, #12
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d1eb      	bne.n	800b768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b790:	4b27      	ldr	r3, [pc, #156]	@ (800b830 <HAL_RCC_ClockConfig+0x1c0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 0307 	and.w	r3, r3, #7
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d210      	bcs.n	800b7c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b79e:	4b24      	ldr	r3, [pc, #144]	@ (800b830 <HAL_RCC_ClockConfig+0x1c0>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f023 0207 	bic.w	r2, r3, #7
 800b7a6:	4922      	ldr	r1, [pc, #136]	@ (800b830 <HAL_RCC_ClockConfig+0x1c0>)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7ae:	4b20      	ldr	r3, [pc, #128]	@ (800b830 <HAL_RCC_ClockConfig+0x1c0>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 0307 	and.w	r3, r3, #7
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d001      	beq.n	800b7c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e032      	b.n	800b826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 0304 	and.w	r3, r3, #4
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d008      	beq.n	800b7de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7cc:	4b19      	ldr	r3, [pc, #100]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	4916      	ldr	r1, [pc, #88]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 0308 	and.w	r3, r3, #8
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d009      	beq.n	800b7fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b7ea:	4b12      	ldr	r3, [pc, #72]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	00db      	lsls	r3, r3, #3
 800b7f8:	490e      	ldr	r1, [pc, #56]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7fe:	f000 f821 	bl	800b844 <HAL_RCC_GetSysClockFreq>
 800b802:	4602      	mov	r2, r0
 800b804:	4b0b      	ldr	r3, [pc, #44]	@ (800b834 <HAL_RCC_ClockConfig+0x1c4>)
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	091b      	lsrs	r3, r3, #4
 800b80a:	f003 030f 	and.w	r3, r3, #15
 800b80e:	490a      	ldr	r1, [pc, #40]	@ (800b838 <HAL_RCC_ClockConfig+0x1c8>)
 800b810:	5ccb      	ldrb	r3, [r1, r3]
 800b812:	fa22 f303 	lsr.w	r3, r2, r3
 800b816:	4a09      	ldr	r2, [pc, #36]	@ (800b83c <HAL_RCC_ClockConfig+0x1cc>)
 800b818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b81a:	4b09      	ldr	r3, [pc, #36]	@ (800b840 <HAL_RCC_ClockConfig+0x1d0>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd fc1e 	bl	8009060 <HAL_InitTick>

  return HAL_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	40022000 	.word	0x40022000
 800b834:	40021000 	.word	0x40021000
 800b838:	0800dae4 	.word	0x0800dae4
 800b83c:	20000e10 	.word	0x20000e10
 800b840:	20000e14 	.word	0x20000e14

0800b844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b844:	b480      	push	{r7}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b84a:	2300      	movs	r3, #0
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	2300      	movs	r3, #0
 800b850:	60bb      	str	r3, [r7, #8]
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	2300      	movs	r3, #0
 800b858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b85e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f003 030c 	and.w	r3, r3, #12
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	d002      	beq.n	800b874 <HAL_RCC_GetSysClockFreq+0x30>
 800b86e:	2b08      	cmp	r3, #8
 800b870:	d003      	beq.n	800b87a <HAL_RCC_GetSysClockFreq+0x36>
 800b872:	e027      	b.n	800b8c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b874:	4b19      	ldr	r3, [pc, #100]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0x98>)
 800b876:	613b      	str	r3, [r7, #16]
      break;
 800b878:	e027      	b.n	800b8ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	0c9b      	lsrs	r3, r3, #18
 800b87e:	f003 030f 	and.w	r3, r3, #15
 800b882:	4a17      	ldr	r2, [pc, #92]	@ (800b8e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b884:	5cd3      	ldrb	r3, [r2, r3]
 800b886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d010      	beq.n	800b8b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b892:	4b11      	ldr	r3, [pc, #68]	@ (800b8d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	0c5b      	lsrs	r3, r3, #17
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	4a11      	ldr	r2, [pc, #68]	@ (800b8e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b89e:	5cd3      	ldrb	r3, [r2, r3]
 800b8a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a0d      	ldr	r2, [pc, #52]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0x98>)
 800b8a6:	fb03 f202 	mul.w	r2, r3, r2
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b0:	617b      	str	r3, [r7, #20]
 800b8b2:	e004      	b.n	800b8be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b8e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b8b8:	fb02 f303 	mul.w	r3, r2, r3
 800b8bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	613b      	str	r3, [r7, #16]
      break;
 800b8c2:	e002      	b.n	800b8ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b8c4:	4b05      	ldr	r3, [pc, #20]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0x98>)
 800b8c6:	613b      	str	r3, [r7, #16]
      break;
 800b8c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b8ca:	693b      	ldr	r3, [r7, #16]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	371c      	adds	r7, #28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bc80      	pop	{r7}
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	40021000 	.word	0x40021000
 800b8dc:	007a1200 	.word	0x007a1200
 800b8e0:	0800dafc 	.word	0x0800dafc
 800b8e4:	0800db0c 	.word	0x0800db0c
 800b8e8:	003d0900 	.word	0x003d0900

0800b8ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8f0:	4b02      	ldr	r3, [pc, #8]	@ (800b8fc <HAL_RCC_GetHCLKFreq+0x10>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bc80      	pop	{r7}
 800b8fa:	4770      	bx	lr
 800b8fc:	20000e10 	.word	0x20000e10

0800b900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b904:	f7ff fff2 	bl	800b8ec <HAL_RCC_GetHCLKFreq>
 800b908:	4602      	mov	r2, r0
 800b90a:	4b05      	ldr	r3, [pc, #20]	@ (800b920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	4903      	ldr	r1, [pc, #12]	@ (800b924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b916:	5ccb      	ldrb	r3, [r1, r3]
 800b918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	40021000 	.word	0x40021000
 800b924:	0800daf4 	.word	0x0800daf4

0800b928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b92c:	f7ff ffde 	bl	800b8ec <HAL_RCC_GetHCLKFreq>
 800b930:	4602      	mov	r2, r0
 800b932:	4b05      	ldr	r3, [pc, #20]	@ (800b948 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	0adb      	lsrs	r3, r3, #11
 800b938:	f003 0307 	and.w	r3, r3, #7
 800b93c:	4903      	ldr	r1, [pc, #12]	@ (800b94c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b93e:	5ccb      	ldrb	r3, [r1, r3]
 800b940:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b944:	4618      	mov	r0, r3
 800b946:	bd80      	pop	{r7, pc}
 800b948:	40021000 	.word	0x40021000
 800b94c:	0800daf4 	.word	0x0800daf4

0800b950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b958:	4b0a      	ldr	r3, [pc, #40]	@ (800b984 <RCC_Delay+0x34>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a0a      	ldr	r2, [pc, #40]	@ (800b988 <RCC_Delay+0x38>)
 800b95e:	fba2 2303 	umull	r2, r3, r2, r3
 800b962:	0a5b      	lsrs	r3, r3, #9
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	fb02 f303 	mul.w	r3, r2, r3
 800b96a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b96c:	bf00      	nop
  }
  while (Delay --);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	1e5a      	subs	r2, r3, #1
 800b972:	60fa      	str	r2, [r7, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1f9      	bne.n	800b96c <RCC_Delay+0x1c>
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	bc80      	pop	{r7}
 800b982:	4770      	bx	lr
 800b984:	20000e10 	.word	0x20000e10
 800b988:	10624dd3 	.word	0x10624dd3

0800b98c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e041      	b.n	800ba22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d106      	bne.n	800b9b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7fd fa22 	bl	8008dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	f000 fa82 	bl	800bed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d001      	beq.n	800ba44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e044      	b.n	800bace <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2202      	movs	r2, #2
 800ba48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68da      	ldr	r2, [r3, #12]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f042 0201 	orr.w	r2, r2, #1
 800ba5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a1d      	ldr	r2, [pc, #116]	@ (800bad8 <HAL_TIM_Base_Start_IT+0xac>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d018      	beq.n	800ba98 <HAL_TIM_Base_Start_IT+0x6c>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a1c      	ldr	r2, [pc, #112]	@ (800badc <HAL_TIM_Base_Start_IT+0xb0>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d013      	beq.n	800ba98 <HAL_TIM_Base_Start_IT+0x6c>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba78:	d00e      	beq.n	800ba98 <HAL_TIM_Base_Start_IT+0x6c>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a18      	ldr	r2, [pc, #96]	@ (800bae0 <HAL_TIM_Base_Start_IT+0xb4>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d009      	beq.n	800ba98 <HAL_TIM_Base_Start_IT+0x6c>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a16      	ldr	r2, [pc, #88]	@ (800bae4 <HAL_TIM_Base_Start_IT+0xb8>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d004      	beq.n	800ba98 <HAL_TIM_Base_Start_IT+0x6c>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a15      	ldr	r2, [pc, #84]	@ (800bae8 <HAL_TIM_Base_Start_IT+0xbc>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d111      	bne.n	800babc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	f003 0307 	and.w	r3, r3, #7
 800baa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b06      	cmp	r3, #6
 800baa8:	d010      	beq.n	800bacc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f042 0201 	orr.w	r2, r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baba:	e007      	b.n	800bacc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bc80      	pop	{r7}
 800bad6:	4770      	bx	lr
 800bad8:	40012c00 	.word	0x40012c00
 800badc:	40013400 	.word	0x40013400
 800bae0:	40000400 	.word	0x40000400
 800bae4:	40000800 	.word	0x40000800
 800bae8:	40000c00 	.word	0x40000c00

0800baec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	f003 0302 	and.w	r3, r3, #2
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d122      	bne.n	800bb48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f003 0302 	and.w	r3, r3, #2
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d11b      	bne.n	800bb48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f06f 0202 	mvn.w	r2, #2
 800bb18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	699b      	ldr	r3, [r3, #24]
 800bb26:	f003 0303 	and.w	r3, r3, #3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f9b4 	bl	800be9c <HAL_TIM_IC_CaptureCallback>
 800bb34:	e005      	b.n	800bb42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f9a7 	bl	800be8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f9b6 	bl	800beae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	f003 0304 	and.w	r3, r3, #4
 800bb52:	2b04      	cmp	r3, #4
 800bb54:	d122      	bne.n	800bb9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b04      	cmp	r3, #4
 800bb62:	d11b      	bne.n	800bb9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f06f 0204 	mvn.w	r2, #4
 800bb6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2202      	movs	r2, #2
 800bb72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	699b      	ldr	r3, [r3, #24]
 800bb7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d003      	beq.n	800bb8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f98a 	bl	800be9c <HAL_TIM_IC_CaptureCallback>
 800bb88:	e005      	b.n	800bb96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f97d 	bl	800be8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f98c 	bl	800beae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b08      	cmp	r3, #8
 800bba8:	d122      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	f003 0308 	and.w	r3, r3, #8
 800bbb4:	2b08      	cmp	r3, #8
 800bbb6:	d11b      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f06f 0208 	mvn.w	r2, #8
 800bbc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2204      	movs	r2, #4
 800bbc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	f003 0303 	and.w	r3, r3, #3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f960 	bl	800be9c <HAL_TIM_IC_CaptureCallback>
 800bbdc:	e005      	b.n	800bbea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f953 	bl	800be8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f962 	bl	800beae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	f003 0310 	and.w	r3, r3, #16
 800bbfa:	2b10      	cmp	r3, #16
 800bbfc:	d122      	bne.n	800bc44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f003 0310 	and.w	r3, r3, #16
 800bc08:	2b10      	cmp	r3, #16
 800bc0a:	d11b      	bne.n	800bc44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f06f 0210 	mvn.w	r2, #16
 800bc14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2208      	movs	r2, #8
 800bc1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	69db      	ldr	r3, [r3, #28]
 800bc22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f936 	bl	800be9c <HAL_TIM_IC_CaptureCallback>
 800bc30:	e005      	b.n	800bc3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f929 	bl	800be8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f938 	bl	800beae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d10e      	bne.n	800bc70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d107      	bne.n	800bc70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f06f 0201 	mvn.w	r2, #1
 800bc68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7fc fd5e 	bl	800872c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc7a:	2b80      	cmp	r3, #128	@ 0x80
 800bc7c:	d10e      	bne.n	800bc9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc88:	2b80      	cmp	r3, #128	@ 0x80
 800bc8a:	d107      	bne.n	800bc9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bc94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 faa1 	bl	800c1de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca6:	2b40      	cmp	r3, #64	@ 0x40
 800bca8:	d10e      	bne.n	800bcc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcb4:	2b40      	cmp	r3, #64	@ 0x40
 800bcb6:	d107      	bne.n	800bcc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bcc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f8fc 	bl	800bec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	f003 0320 	and.w	r3, r3, #32
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	d10e      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f003 0320 	and.w	r3, r3, #32
 800bce0:	2b20      	cmp	r3, #32
 800bce2:	d107      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f06f 0220 	mvn.w	r2, #32
 800bcec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fa6c 	bl	800c1cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcf4:	bf00      	nop
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d101      	bne.n	800bd18 <HAL_TIM_ConfigClockSource+0x1c>
 800bd14:	2302      	movs	r3, #2
 800bd16:	e0b4      	b.n	800be82 <HAL_TIM_ConfigClockSource+0x186>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2202      	movs	r2, #2
 800bd24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bd36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd50:	d03e      	beq.n	800bdd0 <HAL_TIM_ConfigClockSource+0xd4>
 800bd52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd56:	f200 8087 	bhi.w	800be68 <HAL_TIM_ConfigClockSource+0x16c>
 800bd5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd5e:	f000 8086 	beq.w	800be6e <HAL_TIM_ConfigClockSource+0x172>
 800bd62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd66:	d87f      	bhi.n	800be68 <HAL_TIM_ConfigClockSource+0x16c>
 800bd68:	2b70      	cmp	r3, #112	@ 0x70
 800bd6a:	d01a      	beq.n	800bda2 <HAL_TIM_ConfigClockSource+0xa6>
 800bd6c:	2b70      	cmp	r3, #112	@ 0x70
 800bd6e:	d87b      	bhi.n	800be68 <HAL_TIM_ConfigClockSource+0x16c>
 800bd70:	2b60      	cmp	r3, #96	@ 0x60
 800bd72:	d050      	beq.n	800be16 <HAL_TIM_ConfigClockSource+0x11a>
 800bd74:	2b60      	cmp	r3, #96	@ 0x60
 800bd76:	d877      	bhi.n	800be68 <HAL_TIM_ConfigClockSource+0x16c>
 800bd78:	2b50      	cmp	r3, #80	@ 0x50
 800bd7a:	d03c      	beq.n	800bdf6 <HAL_TIM_ConfigClockSource+0xfa>
 800bd7c:	2b50      	cmp	r3, #80	@ 0x50
 800bd7e:	d873      	bhi.n	800be68 <HAL_TIM_ConfigClockSource+0x16c>
 800bd80:	2b40      	cmp	r3, #64	@ 0x40
 800bd82:	d058      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0x13a>
 800bd84:	2b40      	cmp	r3, #64	@ 0x40
 800bd86:	d86f      	bhi.n	800be68 <HAL_TIM_ConfigClockSource+0x16c>
 800bd88:	2b30      	cmp	r3, #48	@ 0x30
 800bd8a:	d064      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x15a>
 800bd8c:	2b30      	cmp	r3, #48	@ 0x30
 800bd8e:	d86b      	bhi.n	800be68 <HAL_TIM_ConfigClockSource+0x16c>
 800bd90:	2b20      	cmp	r3, #32
 800bd92:	d060      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x15a>
 800bd94:	2b20      	cmp	r3, #32
 800bd96:	d867      	bhi.n	800be68 <HAL_TIM_ConfigClockSource+0x16c>
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d05c      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x15a>
 800bd9c:	2b10      	cmp	r3, #16
 800bd9e:	d05a      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x15a>
 800bda0:	e062      	b.n	800be68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bdb2:	f000 f980 	bl	800c0b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bdc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	609a      	str	r2, [r3, #8]
      break;
 800bdce:	e04f      	b.n	800be70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bde0:	f000 f969 	bl	800c0b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	689a      	ldr	r2, [r3, #8]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bdf2:	609a      	str	r2, [r3, #8]
      break;
 800bdf4:	e03c      	b.n	800be70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be02:	461a      	mov	r2, r3
 800be04:	f000 f8e0 	bl	800bfc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2150      	movs	r1, #80	@ 0x50
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 f937 	bl	800c082 <TIM_ITRx_SetConfig>
      break;
 800be14:	e02c      	b.n	800be70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be22:	461a      	mov	r2, r3
 800be24:	f000 f8fe 	bl	800c024 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2160      	movs	r1, #96	@ 0x60
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 f927 	bl	800c082 <TIM_ITRx_SetConfig>
      break;
 800be34:	e01c      	b.n	800be70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be42:	461a      	mov	r2, r3
 800be44:	f000 f8c0 	bl	800bfc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2140      	movs	r1, #64	@ 0x40
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 f917 	bl	800c082 <TIM_ITRx_SetConfig>
      break;
 800be54:	e00c      	b.n	800be70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4619      	mov	r1, r3
 800be60:	4610      	mov	r0, r2
 800be62:	f000 f90e 	bl	800c082 <TIM_ITRx_SetConfig>
      break;
 800be66:	e003      	b.n	800be70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	73fb      	strb	r3, [r7, #15]
      break;
 800be6c:	e000      	b.n	800be70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b083      	sub	sp, #12
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be92:	bf00      	nop
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	bc80      	pop	{r7}
 800be9a:	4770      	bx	lr

0800be9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bc80      	pop	{r7}
 800beac:	4770      	bx	lr

0800beae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800beae:	b480      	push	{r7}
 800beb0:	b083      	sub	sp, #12
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	bc80      	pop	{r7}
 800bebe:	4770      	bx	lr

0800bec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	bc80      	pop	{r7}
 800bed0:	4770      	bx	lr
	...

0800bed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a33      	ldr	r2, [pc, #204]	@ (800bfb4 <TIM_Base_SetConfig+0xe0>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d013      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a32      	ldr	r2, [pc, #200]	@ (800bfb8 <TIM_Base_SetConfig+0xe4>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d00f      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800befa:	d00b      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a2f      	ldr	r2, [pc, #188]	@ (800bfbc <TIM_Base_SetConfig+0xe8>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d007      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a2e      	ldr	r2, [pc, #184]	@ (800bfc0 <TIM_Base_SetConfig+0xec>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d003      	beq.n	800bf14 <TIM_Base_SetConfig+0x40>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a2d      	ldr	r2, [pc, #180]	@ (800bfc4 <TIM_Base_SetConfig+0xf0>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d108      	bne.n	800bf26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a22      	ldr	r2, [pc, #136]	@ (800bfb4 <TIM_Base_SetConfig+0xe0>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d013      	beq.n	800bf56 <TIM_Base_SetConfig+0x82>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a21      	ldr	r2, [pc, #132]	@ (800bfb8 <TIM_Base_SetConfig+0xe4>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d00f      	beq.n	800bf56 <TIM_Base_SetConfig+0x82>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf3c:	d00b      	beq.n	800bf56 <TIM_Base_SetConfig+0x82>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a1e      	ldr	r2, [pc, #120]	@ (800bfbc <TIM_Base_SetConfig+0xe8>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d007      	beq.n	800bf56 <TIM_Base_SetConfig+0x82>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a1d      	ldr	r2, [pc, #116]	@ (800bfc0 <TIM_Base_SetConfig+0xec>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d003      	beq.n	800bf56 <TIM_Base_SetConfig+0x82>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a1c      	ldr	r2, [pc, #112]	@ (800bfc4 <TIM_Base_SetConfig+0xf0>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d108      	bne.n	800bf68 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	689a      	ldr	r2, [r3, #8]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a09      	ldr	r2, [pc, #36]	@ (800bfb4 <TIM_Base_SetConfig+0xe0>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d003      	beq.n	800bf9c <TIM_Base_SetConfig+0xc8>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a08      	ldr	r2, [pc, #32]	@ (800bfb8 <TIM_Base_SetConfig+0xe4>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d103      	bne.n	800bfa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	691a      	ldr	r2, [r3, #16]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	615a      	str	r2, [r3, #20]
}
 800bfaa:	bf00      	nop
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bc80      	pop	{r7}
 800bfb2:	4770      	bx	lr
 800bfb4:	40012c00 	.word	0x40012c00
 800bfb8:	40013400 	.word	0x40013400
 800bfbc:	40000400 	.word	0x40000400
 800bfc0:	40000800 	.word	0x40000800
 800bfc4:	40000c00 	.word	0x40000c00

0800bfc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	f023 0201 	bic.w	r2, r3, #1
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	011b      	lsls	r3, r3, #4
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	f023 030a 	bic.w	r3, r3, #10
 800c004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	621a      	str	r2, [r3, #32]
}
 800c01a:	bf00      	nop
 800c01c:	371c      	adds	r7, #28
 800c01e:	46bd      	mov	sp, r7
 800c020:	bc80      	pop	{r7}
 800c022:	4770      	bx	lr

0800c024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c024:	b480      	push	{r7}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6a1b      	ldr	r3, [r3, #32]
 800c03a:	f023 0210 	bic.w	r2, r3, #16
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c04e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	031b      	lsls	r3, r3, #12
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	4313      	orrs	r3, r2
 800c058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c060:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	011b      	lsls	r3, r3, #4
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	621a      	str	r2, [r3, #32]
}
 800c078:	bf00      	nop
 800c07a:	371c      	adds	r7, #28
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bc80      	pop	{r7}
 800c080:	4770      	bx	lr

0800c082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c082:	b480      	push	{r7}
 800c084:	b085      	sub	sp, #20
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	f043 0307 	orr.w	r3, r3, #7
 800c0a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	609a      	str	r2, [r3, #8]
}
 800c0ac:	bf00      	nop
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bc80      	pop	{r7}
 800c0b4:	4770      	bx	lr

0800c0b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b087      	sub	sp, #28
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	60f8      	str	r0, [r7, #12]
 800c0be:	60b9      	str	r1, [r7, #8]
 800c0c0:	607a      	str	r2, [r7, #4]
 800c0c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c0d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	021a      	lsls	r2, r3, #8
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	431a      	orrs	r2, r3
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	609a      	str	r2, [r3, #8]
}
 800c0ea:	bf00      	nop
 800c0ec:	371c      	adds	r7, #28
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bc80      	pop	{r7}
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c104:	2b01      	cmp	r3, #1
 800c106:	d101      	bne.n	800c10c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c108:	2302      	movs	r3, #2
 800c10a:	e050      	b.n	800c1ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2202      	movs	r2, #2
 800c118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a1b      	ldr	r2, [pc, #108]	@ (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d018      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a19      	ldr	r2, [pc, #100]	@ (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d013      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c162:	d00e      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a15      	ldr	r2, [pc, #84]	@ (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d009      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a14      	ldr	r2, [pc, #80]	@ (800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d004      	beq.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a12      	ldr	r2, [pc, #72]	@ (800c1c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d10c      	bne.n	800c19c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	4313      	orrs	r3, r2
 800c192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3714      	adds	r7, #20
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bc80      	pop	{r7}
 800c1b6:	4770      	bx	lr
 800c1b8:	40012c00 	.word	0x40012c00
 800c1bc:	40013400 	.word	0x40013400
 800c1c0:	40000400 	.word	0x40000400
 800c1c4:	40000800 	.word	0x40000800
 800c1c8:	40000c00 	.word	0x40000c00

0800c1cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bc80      	pop	{r7}
 800c1dc:	4770      	bx	lr

0800c1de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bc80      	pop	{r7}
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e042      	b.n	800c288 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d106      	bne.n	800c21c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7fc fe16 	bl	8008e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2224      	movs	r2, #36	@ 0x24
 800c220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68da      	ldr	r2, [r3, #12]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fcb5 	bl	800cba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	691a      	ldr	r2, [r3, #16]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	695a      	ldr	r2, [r3, #20]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68da      	ldr	r2, [r3, #12]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2220      	movs	r2, #32
 800c274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2220      	movs	r2, #32
 800c27c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	4613      	mov	r3, r2
 800c29c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b20      	cmp	r3, #32
 800c2a8:	d121      	bne.n	800c2ee <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <HAL_UART_Transmit_IT+0x26>
 800c2b0:	88fb      	ldrh	r3, [r7, #6]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e01a      	b.n	800c2f0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	88fa      	ldrh	r2, [r7, #6]
 800c2c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	88fa      	ldrh	r2, [r7, #6]
 800c2ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2221      	movs	r2, #33	@ 0x21
 800c2d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68da      	ldr	r2, [r3, #12]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c2e8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e000      	b.n	800c2f0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c2ee:	2302      	movs	r3, #2
  }
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bc80      	pop	{r7}
 800c2f8:	4770      	bx	lr
	...

0800c2fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b0ba      	sub	sp, #232	@ 0xe8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c322:	2300      	movs	r3, #0
 800c324:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c328:	2300      	movs	r3, #0
 800c32a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c332:	f003 030f 	and.w	r3, r3, #15
 800c336:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c33a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10f      	bne.n	800c362 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c346:	f003 0320 	and.w	r3, r3, #32
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d009      	beq.n	800c362 <HAL_UART_IRQHandler+0x66>
 800c34e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c352:	f003 0320 	and.w	r3, r3, #32
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fb63 	bl	800ca26 <UART_Receive_IT>
      return;
 800c360:	e25b      	b.n	800c81a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c366:	2b00      	cmp	r3, #0
 800c368:	f000 80de 	beq.w	800c528 <HAL_UART_IRQHandler+0x22c>
 800c36c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c370:	f003 0301 	and.w	r3, r3, #1
 800c374:	2b00      	cmp	r3, #0
 800c376:	d106      	bne.n	800c386 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c37c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c380:	2b00      	cmp	r3, #0
 800c382:	f000 80d1 	beq.w	800c528 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00b      	beq.n	800c3aa <HAL_UART_IRQHandler+0xae>
 800c392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3a2:	f043 0201 	orr.w	r2, r3, #1
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3ae:	f003 0304 	and.w	r3, r3, #4
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00b      	beq.n	800c3ce <HAL_UART_IRQHandler+0xd2>
 800c3b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d005      	beq.n	800c3ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3c6:	f043 0202 	orr.w	r2, r3, #2
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00b      	beq.n	800c3f2 <HAL_UART_IRQHandler+0xf6>
 800c3da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d005      	beq.n	800c3f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ea:	f043 0204 	orr.w	r2, r3, #4
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3f6:	f003 0308 	and.w	r3, r3, #8
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d011      	beq.n	800c422 <HAL_UART_IRQHandler+0x126>
 800c3fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c402:	f003 0320 	and.w	r3, r3, #32
 800c406:	2b00      	cmp	r3, #0
 800c408:	d105      	bne.n	800c416 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c40a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d005      	beq.n	800c422 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c41a:	f043 0208 	orr.w	r2, r3, #8
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 81f2 	beq.w	800c810 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c430:	f003 0320 	and.w	r3, r3, #32
 800c434:	2b00      	cmp	r3, #0
 800c436:	d008      	beq.n	800c44a <HAL_UART_IRQHandler+0x14e>
 800c438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c43c:	f003 0320 	and.w	r3, r3, #32
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 faee 	bl	800ca26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c454:	2b00      	cmp	r3, #0
 800c456:	bf14      	ite	ne
 800c458:	2301      	movne	r3, #1
 800c45a:	2300      	moveq	r3, #0
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c466:	f003 0308 	and.w	r3, r3, #8
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d103      	bne.n	800c476 <HAL_UART_IRQHandler+0x17a>
 800c46e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c472:	2b00      	cmp	r3, #0
 800c474:	d04f      	beq.n	800c516 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f9f8 	bl	800c86c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	695b      	ldr	r3, [r3, #20]
 800c482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c486:	2b00      	cmp	r3, #0
 800c488:	d041      	beq.n	800c50e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3314      	adds	r3, #20
 800c490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c498:	e853 3f00 	ldrex	r3, [r3]
 800c49c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c4a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	3314      	adds	r3, #20
 800c4b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c4b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c4ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c4c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c4c6:	e841 2300 	strex	r3, r2, [r1]
 800c4ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c4ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1d9      	bne.n	800c48a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d013      	beq.n	800c506 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4e2:	4a7e      	ldr	r2, [pc, #504]	@ (800c6dc <HAL_UART_IRQHandler+0x3e0>)
 800c4e4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fd f86c 	bl	80095c8 <HAL_DMA_Abort_IT>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d016      	beq.n	800c524 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c500:	4610      	mov	r0, r2
 800c502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c504:	e00e      	b.n	800c524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f99c 	bl	800c844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c50c:	e00a      	b.n	800c524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f998 	bl	800c844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c514:	e006      	b.n	800c524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f994 	bl	800c844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c522:	e175      	b.n	800c810 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c524:	bf00      	nop
    return;
 800c526:	e173      	b.n	800c810 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	f040 814f 	bne.w	800c7d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c536:	f003 0310 	and.w	r3, r3, #16
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 8148 	beq.w	800c7d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c544:	f003 0310 	and.w	r3, r3, #16
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 8141 	beq.w	800c7d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c54e:	2300      	movs	r3, #0
 800c550:	60bb      	str	r3, [r7, #8]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	60bb      	str	r3, [r7, #8]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	60bb      	str	r3, [r7, #8]
 800c562:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	695b      	ldr	r3, [r3, #20]
 800c56a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 80b6 	beq.w	800c6e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c580:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 8145 	beq.w	800c814 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c58e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c592:	429a      	cmp	r2, r3
 800c594:	f080 813e 	bcs.w	800c814 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c59e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	2b20      	cmp	r3, #32
 800c5a8:	f000 8088 	beq.w	800c6bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	330c      	adds	r3, #12
 800c5b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5ba:	e853 3f00 	ldrex	r3, [r3]
 800c5be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c5c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	330c      	adds	r3, #12
 800c5d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c5d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c5dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c5e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c5e8:	e841 2300 	strex	r3, r2, [r1]
 800c5ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c5f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1d9      	bne.n	800c5ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3314      	adds	r3, #20
 800c5fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c600:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c602:	e853 3f00 	ldrex	r3, [r3]
 800c606:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c608:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c60a:	f023 0301 	bic.w	r3, r3, #1
 800c60e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	3314      	adds	r3, #20
 800c618:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c61c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c620:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c622:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c624:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c62e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e1      	bne.n	800c5f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	3314      	adds	r3, #20
 800c63a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c63e:	e853 3f00 	ldrex	r3, [r3]
 800c642:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c64a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	3314      	adds	r3, #20
 800c654:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c658:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c65a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c65e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c660:	e841 2300 	strex	r3, r2, [r1]
 800c664:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1e3      	bne.n	800c634 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2220      	movs	r2, #32
 800c670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	330c      	adds	r3, #12
 800c680:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c684:	e853 3f00 	ldrex	r3, [r3]
 800c688:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c68a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c68c:	f023 0310 	bic.w	r3, r3, #16
 800c690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	330c      	adds	r3, #12
 800c69a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c69e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c6a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c6a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6a6:	e841 2300 	strex	r3, r2, [r1]
 800c6aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c6ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1e3      	bne.n	800c67a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fc ff4b 	bl	8009552 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f8bf 	bl	800c856 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c6d8:	e09c      	b.n	800c814 <HAL_UART_IRQHandler+0x518>
 800c6da:	bf00      	nop
 800c6dc:	0800c931 	.word	0x0800c931
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 808e 	beq.w	800c818 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c6fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 8089 	beq.w	800c818 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	330c      	adds	r3, #12
 800c70c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c710:	e853 3f00 	ldrex	r3, [r3]
 800c714:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c71c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	330c      	adds	r3, #12
 800c726:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c72a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c72c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c732:	e841 2300 	strex	r3, r2, [r1]
 800c736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1e3      	bne.n	800c706 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	3314      	adds	r3, #20
 800c744:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c748:	e853 3f00 	ldrex	r3, [r3]
 800c74c:	623b      	str	r3, [r7, #32]
   return(result);
 800c74e:	6a3b      	ldr	r3, [r7, #32]
 800c750:	f023 0301 	bic.w	r3, r3, #1
 800c754:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3314      	adds	r3, #20
 800c75e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c762:	633a      	str	r2, [r7, #48]	@ 0x30
 800c764:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c76a:	e841 2300 	strex	r3, r2, [r1]
 800c76e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1e3      	bne.n	800c73e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2220      	movs	r2, #32
 800c77a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	330c      	adds	r3, #12
 800c78a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	e853 3f00 	ldrex	r3, [r3]
 800c792:	60fb      	str	r3, [r7, #12]
   return(result);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f023 0310 	bic.w	r3, r3, #16
 800c79a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	330c      	adds	r3, #12
 800c7a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c7a8:	61fa      	str	r2, [r7, #28]
 800c7aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ac:	69b9      	ldr	r1, [r7, #24]
 800c7ae:	69fa      	ldr	r2, [r7, #28]
 800c7b0:	e841 2300 	strex	r3, r2, [r1]
 800c7b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e3      	bne.n	800c784 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f844 	bl	800c856 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7ce:	e023      	b.n	800c818 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d009      	beq.n	800c7f0 <HAL_UART_IRQHandler+0x4f4>
 800c7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d003      	beq.n	800c7f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f8b5 	bl	800c958 <UART_Transmit_IT>
    return;
 800c7ee:	e014      	b.n	800c81a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00e      	beq.n	800c81a <HAL_UART_IRQHandler+0x51e>
 800c7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c804:	2b00      	cmp	r3, #0
 800c806:	d008      	beq.n	800c81a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f8f4 	bl	800c9f6 <UART_EndTransmit_IT>
    return;
 800c80e:	e004      	b.n	800c81a <HAL_UART_IRQHandler+0x51e>
    return;
 800c810:	bf00      	nop
 800c812:	e002      	b.n	800c81a <HAL_UART_IRQHandler+0x51e>
      return;
 800c814:	bf00      	nop
 800c816:	e000      	b.n	800c81a <HAL_UART_IRQHandler+0x51e>
      return;
 800c818:	bf00      	nop
  }
}
 800c81a:	37e8      	adds	r7, #232	@ 0xe8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bc80      	pop	{r7}
 800c830:	4770      	bx	lr

0800c832 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c832:	b480      	push	{r7}
 800c834:	b083      	sub	sp, #12
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c83a:	bf00      	nop
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr

0800c844 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	bc80      	pop	{r7}
 800c854:	4770      	bx	lr

0800c856 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c856:	b480      	push	{r7}
 800c858:	b083      	sub	sp, #12
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	460b      	mov	r3, r1
 800c860:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c862:	bf00      	nop
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	bc80      	pop	{r7}
 800c86a:	4770      	bx	lr

0800c86c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b095      	sub	sp, #84	@ 0x54
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	330c      	adds	r3, #12
 800c87a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c87e:	e853 3f00 	ldrex	r3, [r3]
 800c882:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c886:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	330c      	adds	r3, #12
 800c892:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c894:	643a      	str	r2, [r7, #64]	@ 0x40
 800c896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c898:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c89a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c89c:	e841 2300 	strex	r3, r2, [r1]
 800c8a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1e5      	bne.n	800c874 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3314      	adds	r3, #20
 800c8ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	e853 3f00 	ldrex	r3, [r3]
 800c8b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	f023 0301 	bic.w	r3, r3, #1
 800c8be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	3314      	adds	r3, #20
 800c8c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8d0:	e841 2300 	strex	r3, r2, [r1]
 800c8d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1e5      	bne.n	800c8a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d119      	bne.n	800c918 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	330c      	adds	r3, #12
 800c8ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	e853 3f00 	ldrex	r3, [r3]
 800c8f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f023 0310 	bic.w	r3, r3, #16
 800c8fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	330c      	adds	r3, #12
 800c902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c904:	61ba      	str	r2, [r7, #24]
 800c906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c908:	6979      	ldr	r1, [r7, #20]
 800c90a:	69ba      	ldr	r2, [r7, #24]
 800c90c:	e841 2300 	strex	r3, r2, [r1]
 800c910:	613b      	str	r3, [r7, #16]
   return(result);
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e5      	bne.n	800c8e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2220      	movs	r2, #32
 800c91c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c926:	bf00      	nop
 800c928:	3754      	adds	r7, #84	@ 0x54
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bc80      	pop	{r7}
 800c92e:	4770      	bx	lr

0800c930 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c93c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f7ff ff7a 	bl	800c844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c950:	bf00      	nop
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b21      	cmp	r3, #33	@ 0x21
 800c96a:	d13e      	bne.n	800c9ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c974:	d114      	bne.n	800c9a0 <UART_Transmit_IT+0x48>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d110      	bne.n	800c9a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c992:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	1c9a      	adds	r2, r3, #2
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	621a      	str	r2, [r3, #32]
 800c99e:	e008      	b.n	800c9b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6a1b      	ldr	r3, [r3, #32]
 800c9a4:	1c59      	adds	r1, r3, #1
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	6211      	str	r1, [r2, #32]
 800c9aa:	781a      	ldrb	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10f      	bne.n	800c9e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68da      	ldr	r2, [r3, #12]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c9d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68da      	ldr	r2, [r3, #12]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e000      	b.n	800c9ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9ea:	2302      	movs	r3, #2
  }
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bc80      	pop	{r7}
 800c9f4:	4770      	bx	lr

0800c9f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b082      	sub	sp, #8
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68da      	ldr	r2, [r3, #12]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2220      	movs	r2, #32
 800ca12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff ff02 	bl	800c820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b08c      	sub	sp, #48	@ 0x30
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b22      	cmp	r3, #34	@ 0x22
 800ca38:	f040 80ae 	bne.w	800cb98 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca44:	d117      	bne.n	800ca76 <UART_Receive_IT+0x50>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d113      	bne.n	800ca76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6e:	1c9a      	adds	r2, r3, #2
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	629a      	str	r2, [r3, #40]	@ 0x28
 800ca74:	e026      	b.n	800cac4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca88:	d007      	beq.n	800ca9a <UART_Receive_IT+0x74>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10a      	bne.n	800caa8 <UART_Receive_IT+0x82>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d106      	bne.n	800caa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa4:	701a      	strb	r2, [r3, #0]
 800caa6:	e008      	b.n	800caba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cac8:	b29b      	uxth	r3, r3
 800caca:	3b01      	subs	r3, #1
 800cacc:	b29b      	uxth	r3, r3
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	4619      	mov	r1, r3
 800cad2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d15d      	bne.n	800cb94 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68da      	ldr	r2, [r3, #12]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f022 0220 	bic.w	r2, r2, #32
 800cae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68da      	ldr	r2, [r3, #12]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800caf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	695a      	ldr	r2, [r3, #20]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f022 0201 	bic.w	r2, r2, #1
 800cb06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2220      	movs	r2, #32
 800cb0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d135      	bne.n	800cb8a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	330c      	adds	r3, #12
 800cb2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	e853 3f00 	ldrex	r3, [r3]
 800cb32:	613b      	str	r3, [r7, #16]
   return(result);
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	f023 0310 	bic.w	r3, r3, #16
 800cb3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	330c      	adds	r3, #12
 800cb42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb44:	623a      	str	r2, [r7, #32]
 800cb46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb48:	69f9      	ldr	r1, [r7, #28]
 800cb4a:	6a3a      	ldr	r2, [r7, #32]
 800cb4c:	e841 2300 	strex	r3, r2, [r1]
 800cb50:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1e5      	bne.n	800cb24 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f003 0310 	and.w	r3, r3, #16
 800cb62:	2b10      	cmp	r3, #16
 800cb64:	d10a      	bne.n	800cb7c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb66:	2300      	movs	r3, #0
 800cb68:	60fb      	str	r3, [r7, #12]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	60fb      	str	r3, [r7, #12]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff fe67 	bl	800c856 <HAL_UARTEx_RxEventCallback>
 800cb88:	e002      	b.n	800cb90 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fe51 	bl	800c832 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	e002      	b.n	800cb9a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	e000      	b.n	800cb9a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb98:	2302      	movs	r3, #2
  }
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3730      	adds	r7, #48	@ 0x30
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
	...

0800cba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68da      	ldr	r2, [r3, #12]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	689a      	ldr	r2, [r3, #8]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800cbde:	f023 030c 	bic.w	r3, r3, #12
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	6812      	ldr	r2, [r2, #0]
 800cbe6:	68b9      	ldr	r1, [r7, #8]
 800cbe8:	430b      	orrs	r3, r1
 800cbea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	699a      	ldr	r2, [r3, #24]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	430a      	orrs	r2, r1
 800cc00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a2c      	ldr	r2, [pc, #176]	@ (800ccb8 <UART_SetConfig+0x114>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d103      	bne.n	800cc14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cc0c:	f7fe fe8c 	bl	800b928 <HAL_RCC_GetPCLK2Freq>
 800cc10:	60f8      	str	r0, [r7, #12]
 800cc12:	e002      	b.n	800cc1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cc14:	f7fe fe74 	bl	800b900 <HAL_RCC_GetPCLK1Freq>
 800cc18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	009a      	lsls	r2, r3, #2
 800cc24:	441a      	add	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc30:	4a22      	ldr	r2, [pc, #136]	@ (800ccbc <UART_SetConfig+0x118>)
 800cc32:	fba2 2303 	umull	r2, r3, r2, r3
 800cc36:	095b      	lsrs	r3, r3, #5
 800cc38:	0119      	lsls	r1, r3, #4
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	4413      	add	r3, r2
 800cc42:	009a      	lsls	r2, r3, #2
 800cc44:	441a      	add	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc50:	4b1a      	ldr	r3, [pc, #104]	@ (800ccbc <UART_SetConfig+0x118>)
 800cc52:	fba3 0302 	umull	r0, r3, r3, r2
 800cc56:	095b      	lsrs	r3, r3, #5
 800cc58:	2064      	movs	r0, #100	@ 0x64
 800cc5a:	fb00 f303 	mul.w	r3, r0, r3
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	011b      	lsls	r3, r3, #4
 800cc62:	3332      	adds	r3, #50	@ 0x32
 800cc64:	4a15      	ldr	r2, [pc, #84]	@ (800ccbc <UART_SetConfig+0x118>)
 800cc66:	fba2 2303 	umull	r2, r3, r2, r3
 800cc6a:	095b      	lsrs	r3, r3, #5
 800cc6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc70:	4419      	add	r1, r3
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	009a      	lsls	r2, r3, #2
 800cc7c:	441a      	add	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc88:	4b0c      	ldr	r3, [pc, #48]	@ (800ccbc <UART_SetConfig+0x118>)
 800cc8a:	fba3 0302 	umull	r0, r3, r3, r2
 800cc8e:	095b      	lsrs	r3, r3, #5
 800cc90:	2064      	movs	r0, #100	@ 0x64
 800cc92:	fb00 f303 	mul.w	r3, r0, r3
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	011b      	lsls	r3, r3, #4
 800cc9a:	3332      	adds	r3, #50	@ 0x32
 800cc9c:	4a07      	ldr	r2, [pc, #28]	@ (800ccbc <UART_SetConfig+0x118>)
 800cc9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cca2:	095b      	lsrs	r3, r3, #5
 800cca4:	f003 020f 	and.w	r2, r3, #15
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	440a      	add	r2, r1
 800ccae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ccb0:	bf00      	nop
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	40013800 	.word	0x40013800
 800ccbc:	51eb851f 	.word	0x51eb851f

0800ccc0 <__itoa>:
 800ccc0:	1e93      	subs	r3, r2, #2
 800ccc2:	2b22      	cmp	r3, #34	@ 0x22
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	d904      	bls.n	800ccd4 <__itoa+0x14>
 800ccca:	2300      	movs	r3, #0
 800cccc:	461c      	mov	r4, r3
 800ccce:	700b      	strb	r3, [r1, #0]
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	bd10      	pop	{r4, pc}
 800ccd4:	2a0a      	cmp	r2, #10
 800ccd6:	d109      	bne.n	800ccec <__itoa+0x2c>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	da07      	bge.n	800ccec <__itoa+0x2c>
 800ccdc:	232d      	movs	r3, #45	@ 0x2d
 800ccde:	700b      	strb	r3, [r1, #0]
 800cce0:	2101      	movs	r1, #1
 800cce2:	4240      	negs	r0, r0
 800cce4:	4421      	add	r1, r4
 800cce6:	f000 f8db 	bl	800cea0 <__utoa>
 800ccea:	e7f1      	b.n	800ccd0 <__itoa+0x10>
 800ccec:	2100      	movs	r1, #0
 800ccee:	e7f9      	b.n	800cce4 <__itoa+0x24>

0800ccf0 <itoa>:
 800ccf0:	f7ff bfe6 	b.w	800ccc0 <__itoa>

0800ccf4 <malloc>:
 800ccf4:	4b02      	ldr	r3, [pc, #8]	@ (800cd00 <malloc+0xc>)
 800ccf6:	4601      	mov	r1, r0
 800ccf8:	6818      	ldr	r0, [r3, #0]
 800ccfa:	f000 b825 	b.w	800cd48 <_malloc_r>
 800ccfe:	bf00      	nop
 800cd00:	20000e1c 	.word	0x20000e1c

0800cd04 <sbrk_aligned>:
 800cd04:	b570      	push	{r4, r5, r6, lr}
 800cd06:	4e0f      	ldr	r6, [pc, #60]	@ (800cd44 <sbrk_aligned+0x40>)
 800cd08:	460c      	mov	r4, r1
 800cd0a:	6831      	ldr	r1, [r6, #0]
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	b911      	cbnz	r1, 800cd16 <sbrk_aligned+0x12>
 800cd10:	f000 f932 	bl	800cf78 <_sbrk_r>
 800cd14:	6030      	str	r0, [r6, #0]
 800cd16:	4621      	mov	r1, r4
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f000 f92d 	bl	800cf78 <_sbrk_r>
 800cd1e:	1c43      	adds	r3, r0, #1
 800cd20:	d103      	bne.n	800cd2a <sbrk_aligned+0x26>
 800cd22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cd26:	4620      	mov	r0, r4
 800cd28:	bd70      	pop	{r4, r5, r6, pc}
 800cd2a:	1cc4      	adds	r4, r0, #3
 800cd2c:	f024 0403 	bic.w	r4, r4, #3
 800cd30:	42a0      	cmp	r0, r4
 800cd32:	d0f8      	beq.n	800cd26 <sbrk_aligned+0x22>
 800cd34:	1a21      	subs	r1, r4, r0
 800cd36:	4628      	mov	r0, r5
 800cd38:	f000 f91e 	bl	800cf78 <_sbrk_r>
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d1f2      	bne.n	800cd26 <sbrk_aligned+0x22>
 800cd40:	e7ef      	b.n	800cd22 <sbrk_aligned+0x1e>
 800cd42:	bf00      	nop
 800cd44:	20001814 	.word	0x20001814

0800cd48 <_malloc_r>:
 800cd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd4c:	1ccd      	adds	r5, r1, #3
 800cd4e:	f025 0503 	bic.w	r5, r5, #3
 800cd52:	3508      	adds	r5, #8
 800cd54:	2d0c      	cmp	r5, #12
 800cd56:	bf38      	it	cc
 800cd58:	250c      	movcc	r5, #12
 800cd5a:	2d00      	cmp	r5, #0
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	db01      	blt.n	800cd64 <_malloc_r+0x1c>
 800cd60:	42a9      	cmp	r1, r5
 800cd62:	d904      	bls.n	800cd6e <_malloc_r+0x26>
 800cd64:	230c      	movs	r3, #12
 800cd66:	6033      	str	r3, [r6, #0]
 800cd68:	2000      	movs	r0, #0
 800cd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce44 <_malloc_r+0xfc>
 800cd72:	f000 f869 	bl	800ce48 <__malloc_lock>
 800cd76:	f8d8 3000 	ldr.w	r3, [r8]
 800cd7a:	461c      	mov	r4, r3
 800cd7c:	bb44      	cbnz	r4, 800cdd0 <_malloc_r+0x88>
 800cd7e:	4629      	mov	r1, r5
 800cd80:	4630      	mov	r0, r6
 800cd82:	f7ff ffbf 	bl	800cd04 <sbrk_aligned>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	4604      	mov	r4, r0
 800cd8a:	d158      	bne.n	800ce3e <_malloc_r+0xf6>
 800cd8c:	f8d8 4000 	ldr.w	r4, [r8]
 800cd90:	4627      	mov	r7, r4
 800cd92:	2f00      	cmp	r7, #0
 800cd94:	d143      	bne.n	800ce1e <_malloc_r+0xd6>
 800cd96:	2c00      	cmp	r4, #0
 800cd98:	d04b      	beq.n	800ce32 <_malloc_r+0xea>
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	4639      	mov	r1, r7
 800cd9e:	4630      	mov	r0, r6
 800cda0:	eb04 0903 	add.w	r9, r4, r3
 800cda4:	f000 f8e8 	bl	800cf78 <_sbrk_r>
 800cda8:	4581      	cmp	r9, r0
 800cdaa:	d142      	bne.n	800ce32 <_malloc_r+0xea>
 800cdac:	6821      	ldr	r1, [r4, #0]
 800cdae:	4630      	mov	r0, r6
 800cdb0:	1a6d      	subs	r5, r5, r1
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	f7ff ffa6 	bl	800cd04 <sbrk_aligned>
 800cdb8:	3001      	adds	r0, #1
 800cdba:	d03a      	beq.n	800ce32 <_malloc_r+0xea>
 800cdbc:	6823      	ldr	r3, [r4, #0]
 800cdbe:	442b      	add	r3, r5
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	f8d8 3000 	ldr.w	r3, [r8]
 800cdc6:	685a      	ldr	r2, [r3, #4]
 800cdc8:	bb62      	cbnz	r2, 800ce24 <_malloc_r+0xdc>
 800cdca:	f8c8 7000 	str.w	r7, [r8]
 800cdce:	e00f      	b.n	800cdf0 <_malloc_r+0xa8>
 800cdd0:	6822      	ldr	r2, [r4, #0]
 800cdd2:	1b52      	subs	r2, r2, r5
 800cdd4:	d420      	bmi.n	800ce18 <_malloc_r+0xd0>
 800cdd6:	2a0b      	cmp	r2, #11
 800cdd8:	d917      	bls.n	800ce0a <_malloc_r+0xc2>
 800cdda:	1961      	adds	r1, r4, r5
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	6025      	str	r5, [r4, #0]
 800cde0:	bf18      	it	ne
 800cde2:	6059      	strne	r1, [r3, #4]
 800cde4:	6863      	ldr	r3, [r4, #4]
 800cde6:	bf08      	it	eq
 800cde8:	f8c8 1000 	streq.w	r1, [r8]
 800cdec:	5162      	str	r2, [r4, r5]
 800cdee:	604b      	str	r3, [r1, #4]
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	f000 f82f 	bl	800ce54 <__malloc_unlock>
 800cdf6:	f104 000b 	add.w	r0, r4, #11
 800cdfa:	1d23      	adds	r3, r4, #4
 800cdfc:	f020 0007 	bic.w	r0, r0, #7
 800ce00:	1ac2      	subs	r2, r0, r3
 800ce02:	bf1c      	itt	ne
 800ce04:	1a1b      	subne	r3, r3, r0
 800ce06:	50a3      	strne	r3, [r4, r2]
 800ce08:	e7af      	b.n	800cd6a <_malloc_r+0x22>
 800ce0a:	6862      	ldr	r2, [r4, #4]
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	bf0c      	ite	eq
 800ce10:	f8c8 2000 	streq.w	r2, [r8]
 800ce14:	605a      	strne	r2, [r3, #4]
 800ce16:	e7eb      	b.n	800cdf0 <_malloc_r+0xa8>
 800ce18:	4623      	mov	r3, r4
 800ce1a:	6864      	ldr	r4, [r4, #4]
 800ce1c:	e7ae      	b.n	800cd7c <_malloc_r+0x34>
 800ce1e:	463c      	mov	r4, r7
 800ce20:	687f      	ldr	r7, [r7, #4]
 800ce22:	e7b6      	b.n	800cd92 <_malloc_r+0x4a>
 800ce24:	461a      	mov	r2, r3
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	42a3      	cmp	r3, r4
 800ce2a:	d1fb      	bne.n	800ce24 <_malloc_r+0xdc>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	6053      	str	r3, [r2, #4]
 800ce30:	e7de      	b.n	800cdf0 <_malloc_r+0xa8>
 800ce32:	230c      	movs	r3, #12
 800ce34:	4630      	mov	r0, r6
 800ce36:	6033      	str	r3, [r6, #0]
 800ce38:	f000 f80c 	bl	800ce54 <__malloc_unlock>
 800ce3c:	e794      	b.n	800cd68 <_malloc_r+0x20>
 800ce3e:	6005      	str	r5, [r0, #0]
 800ce40:	e7d6      	b.n	800cdf0 <_malloc_r+0xa8>
 800ce42:	bf00      	nop
 800ce44:	20001818 	.word	0x20001818

0800ce48 <__malloc_lock>:
 800ce48:	4801      	ldr	r0, [pc, #4]	@ (800ce50 <__malloc_lock+0x8>)
 800ce4a:	f000 b8cf 	b.w	800cfec <__retarget_lock_acquire_recursive>
 800ce4e:	bf00      	nop
 800ce50:	20001954 	.word	0x20001954

0800ce54 <__malloc_unlock>:
 800ce54:	4801      	ldr	r0, [pc, #4]	@ (800ce5c <__malloc_unlock+0x8>)
 800ce56:	f000 b8ca 	b.w	800cfee <__retarget_lock_release_recursive>
 800ce5a:	bf00      	nop
 800ce5c:	20001954 	.word	0x20001954

0800ce60 <siprintf>:
 800ce60:	b40e      	push	{r1, r2, r3}
 800ce62:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce66:	b500      	push	{lr}
 800ce68:	b09c      	sub	sp, #112	@ 0x70
 800ce6a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ce6c:	9002      	str	r0, [sp, #8]
 800ce6e:	9006      	str	r0, [sp, #24]
 800ce70:	9107      	str	r1, [sp, #28]
 800ce72:	9104      	str	r1, [sp, #16]
 800ce74:	4808      	ldr	r0, [pc, #32]	@ (800ce98 <siprintf+0x38>)
 800ce76:	4909      	ldr	r1, [pc, #36]	@ (800ce9c <siprintf+0x3c>)
 800ce78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce7c:	9105      	str	r1, [sp, #20]
 800ce7e:	6800      	ldr	r0, [r0, #0]
 800ce80:	a902      	add	r1, sp, #8
 800ce82:	9301      	str	r3, [sp, #4]
 800ce84:	f000 f960 	bl	800d148 <_svfiprintf_r>
 800ce88:	2200      	movs	r2, #0
 800ce8a:	9b02      	ldr	r3, [sp, #8]
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	b01c      	add	sp, #112	@ 0x70
 800ce90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce94:	b003      	add	sp, #12
 800ce96:	4770      	bx	lr
 800ce98:	20000e1c 	.word	0x20000e1c
 800ce9c:	ffff0208 	.word	0xffff0208

0800cea0 <__utoa>:
 800cea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cea2:	b08b      	sub	sp, #44	@ 0x2c
 800cea4:	4605      	mov	r5, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	466e      	mov	r6, sp
 800ceaa:	4c1d      	ldr	r4, [pc, #116]	@ (800cf20 <__utoa+0x80>)
 800ceac:	f104 0c20 	add.w	ip, r4, #32
 800ceb0:	4637      	mov	r7, r6
 800ceb2:	6820      	ldr	r0, [r4, #0]
 800ceb4:	6861      	ldr	r1, [r4, #4]
 800ceb6:	3408      	adds	r4, #8
 800ceb8:	c703      	stmia	r7!, {r0, r1}
 800ceba:	4564      	cmp	r4, ip
 800cebc:	463e      	mov	r6, r7
 800cebe:	d1f7      	bne.n	800ceb0 <__utoa+0x10>
 800cec0:	7921      	ldrb	r1, [r4, #4]
 800cec2:	6820      	ldr	r0, [r4, #0]
 800cec4:	7139      	strb	r1, [r7, #4]
 800cec6:	1e91      	subs	r1, r2, #2
 800cec8:	2922      	cmp	r1, #34	@ 0x22
 800ceca:	6038      	str	r0, [r7, #0]
 800cecc:	f04f 0100 	mov.w	r1, #0
 800ced0:	d904      	bls.n	800cedc <__utoa+0x3c>
 800ced2:	7019      	strb	r1, [r3, #0]
 800ced4:	460b      	mov	r3, r1
 800ced6:	4618      	mov	r0, r3
 800ced8:	b00b      	add	sp, #44	@ 0x2c
 800ceda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cedc:	1e58      	subs	r0, r3, #1
 800cede:	4684      	mov	ip, r0
 800cee0:	fbb5 f7f2 	udiv	r7, r5, r2
 800cee4:	fb02 5617 	mls	r6, r2, r7, r5
 800cee8:	3628      	adds	r6, #40	@ 0x28
 800ceea:	446e      	add	r6, sp
 800ceec:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cef0:	460c      	mov	r4, r1
 800cef2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cef6:	462e      	mov	r6, r5
 800cef8:	42b2      	cmp	r2, r6
 800cefa:	463d      	mov	r5, r7
 800cefc:	f101 0101 	add.w	r1, r1, #1
 800cf00:	d9ee      	bls.n	800cee0 <__utoa+0x40>
 800cf02:	2200      	movs	r2, #0
 800cf04:	545a      	strb	r2, [r3, r1]
 800cf06:	1919      	adds	r1, r3, r4
 800cf08:	1aa5      	subs	r5, r4, r2
 800cf0a:	42aa      	cmp	r2, r5
 800cf0c:	dae3      	bge.n	800ced6 <__utoa+0x36>
 800cf0e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cf12:	780e      	ldrb	r6, [r1, #0]
 800cf14:	3201      	adds	r2, #1
 800cf16:	7006      	strb	r6, [r0, #0]
 800cf18:	f801 5901 	strb.w	r5, [r1], #-1
 800cf1c:	e7f4      	b.n	800cf08 <__utoa+0x68>
 800cf1e:	bf00      	nop
 800cf20:	0800db0e 	.word	0x0800db0e

0800cf24 <strcat>:
 800cf24:	4602      	mov	r2, r0
 800cf26:	b510      	push	{r4, lr}
 800cf28:	7814      	ldrb	r4, [r2, #0]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	3201      	adds	r2, #1
 800cf2e:	2c00      	cmp	r4, #0
 800cf30:	d1fa      	bne.n	800cf28 <strcat+0x4>
 800cf32:	3b01      	subs	r3, #1
 800cf34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf38:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	d1f9      	bne.n	800cf34 <strcat+0x10>
 800cf40:	bd10      	pop	{r4, pc}

0800cf42 <strncpy>:
 800cf42:	4603      	mov	r3, r0
 800cf44:	b510      	push	{r4, lr}
 800cf46:	3901      	subs	r1, #1
 800cf48:	b132      	cbz	r2, 800cf58 <strncpy+0x16>
 800cf4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf4e:	3a01      	subs	r2, #1
 800cf50:	f803 4b01 	strb.w	r4, [r3], #1
 800cf54:	2c00      	cmp	r4, #0
 800cf56:	d1f7      	bne.n	800cf48 <strncpy+0x6>
 800cf58:	2100      	movs	r1, #0
 800cf5a:	441a      	add	r2, r3
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d100      	bne.n	800cf62 <strncpy+0x20>
 800cf60:	bd10      	pop	{r4, pc}
 800cf62:	f803 1b01 	strb.w	r1, [r3], #1
 800cf66:	e7f9      	b.n	800cf5c <strncpy+0x1a>

0800cf68 <memset>:
 800cf68:	4603      	mov	r3, r0
 800cf6a:	4402      	add	r2, r0
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d100      	bne.n	800cf72 <memset+0xa>
 800cf70:	4770      	bx	lr
 800cf72:	f803 1b01 	strb.w	r1, [r3], #1
 800cf76:	e7f9      	b.n	800cf6c <memset+0x4>

0800cf78 <_sbrk_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	4d05      	ldr	r5, [pc, #20]	@ (800cf94 <_sbrk_r+0x1c>)
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	602b      	str	r3, [r5, #0]
 800cf84:	f7fb fff4 	bl	8008f70 <_sbrk>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d102      	bne.n	800cf92 <_sbrk_r+0x1a>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	b103      	cbz	r3, 800cf92 <_sbrk_r+0x1a>
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	20001958 	.word	0x20001958

0800cf98 <__errno>:
 800cf98:	4b01      	ldr	r3, [pc, #4]	@ (800cfa0 <__errno+0x8>)
 800cf9a:	6818      	ldr	r0, [r3, #0]
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	20000e1c 	.word	0x20000e1c

0800cfa4 <__libc_init_array>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	2600      	movs	r6, #0
 800cfa8:	4d0c      	ldr	r5, [pc, #48]	@ (800cfdc <__libc_init_array+0x38>)
 800cfaa:	4c0d      	ldr	r4, [pc, #52]	@ (800cfe0 <__libc_init_array+0x3c>)
 800cfac:	1b64      	subs	r4, r4, r5
 800cfae:	10a4      	asrs	r4, r4, #2
 800cfb0:	42a6      	cmp	r6, r4
 800cfb2:	d109      	bne.n	800cfc8 <__libc_init_array+0x24>
 800cfb4:	f000 fbc2 	bl	800d73c <_init>
 800cfb8:	2600      	movs	r6, #0
 800cfba:	4d0a      	ldr	r5, [pc, #40]	@ (800cfe4 <__libc_init_array+0x40>)
 800cfbc:	4c0a      	ldr	r4, [pc, #40]	@ (800cfe8 <__libc_init_array+0x44>)
 800cfbe:	1b64      	subs	r4, r4, r5
 800cfc0:	10a4      	asrs	r4, r4, #2
 800cfc2:	42a6      	cmp	r6, r4
 800cfc4:	d105      	bne.n	800cfd2 <__libc_init_array+0x2e>
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfcc:	4798      	blx	r3
 800cfce:	3601      	adds	r6, #1
 800cfd0:	e7ee      	b.n	800cfb0 <__libc_init_array+0xc>
 800cfd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfd6:	4798      	blx	r3
 800cfd8:	3601      	adds	r6, #1
 800cfda:	e7f2      	b.n	800cfc2 <__libc_init_array+0x1e>
 800cfdc:	0800db70 	.word	0x0800db70
 800cfe0:	0800db70 	.word	0x0800db70
 800cfe4:	0800db70 	.word	0x0800db70
 800cfe8:	0800db74 	.word	0x0800db74

0800cfec <__retarget_lock_acquire_recursive>:
 800cfec:	4770      	bx	lr

0800cfee <__retarget_lock_release_recursive>:
 800cfee:	4770      	bx	lr

0800cff0 <strcpy>:
 800cff0:	4603      	mov	r3, r0
 800cff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cff6:	f803 2b01 	strb.w	r2, [r3], #1
 800cffa:	2a00      	cmp	r2, #0
 800cffc:	d1f9      	bne.n	800cff2 <strcpy+0x2>
 800cffe:	4770      	bx	lr

0800d000 <_free_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	4605      	mov	r5, r0
 800d004:	2900      	cmp	r1, #0
 800d006:	d040      	beq.n	800d08a <_free_r+0x8a>
 800d008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d00c:	1f0c      	subs	r4, r1, #4
 800d00e:	2b00      	cmp	r3, #0
 800d010:	bfb8      	it	lt
 800d012:	18e4      	addlt	r4, r4, r3
 800d014:	f7ff ff18 	bl	800ce48 <__malloc_lock>
 800d018:	4a1c      	ldr	r2, [pc, #112]	@ (800d08c <_free_r+0x8c>)
 800d01a:	6813      	ldr	r3, [r2, #0]
 800d01c:	b933      	cbnz	r3, 800d02c <_free_r+0x2c>
 800d01e:	6063      	str	r3, [r4, #4]
 800d020:	6014      	str	r4, [r2, #0]
 800d022:	4628      	mov	r0, r5
 800d024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d028:	f7ff bf14 	b.w	800ce54 <__malloc_unlock>
 800d02c:	42a3      	cmp	r3, r4
 800d02e:	d908      	bls.n	800d042 <_free_r+0x42>
 800d030:	6820      	ldr	r0, [r4, #0]
 800d032:	1821      	adds	r1, r4, r0
 800d034:	428b      	cmp	r3, r1
 800d036:	bf01      	itttt	eq
 800d038:	6819      	ldreq	r1, [r3, #0]
 800d03a:	685b      	ldreq	r3, [r3, #4]
 800d03c:	1809      	addeq	r1, r1, r0
 800d03e:	6021      	streq	r1, [r4, #0]
 800d040:	e7ed      	b.n	800d01e <_free_r+0x1e>
 800d042:	461a      	mov	r2, r3
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	b10b      	cbz	r3, 800d04c <_free_r+0x4c>
 800d048:	42a3      	cmp	r3, r4
 800d04a:	d9fa      	bls.n	800d042 <_free_r+0x42>
 800d04c:	6811      	ldr	r1, [r2, #0]
 800d04e:	1850      	adds	r0, r2, r1
 800d050:	42a0      	cmp	r0, r4
 800d052:	d10b      	bne.n	800d06c <_free_r+0x6c>
 800d054:	6820      	ldr	r0, [r4, #0]
 800d056:	4401      	add	r1, r0
 800d058:	1850      	adds	r0, r2, r1
 800d05a:	4283      	cmp	r3, r0
 800d05c:	6011      	str	r1, [r2, #0]
 800d05e:	d1e0      	bne.n	800d022 <_free_r+0x22>
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	4408      	add	r0, r1
 800d066:	6010      	str	r0, [r2, #0]
 800d068:	6053      	str	r3, [r2, #4]
 800d06a:	e7da      	b.n	800d022 <_free_r+0x22>
 800d06c:	d902      	bls.n	800d074 <_free_r+0x74>
 800d06e:	230c      	movs	r3, #12
 800d070:	602b      	str	r3, [r5, #0]
 800d072:	e7d6      	b.n	800d022 <_free_r+0x22>
 800d074:	6820      	ldr	r0, [r4, #0]
 800d076:	1821      	adds	r1, r4, r0
 800d078:	428b      	cmp	r3, r1
 800d07a:	bf01      	itttt	eq
 800d07c:	6819      	ldreq	r1, [r3, #0]
 800d07e:	685b      	ldreq	r3, [r3, #4]
 800d080:	1809      	addeq	r1, r1, r0
 800d082:	6021      	streq	r1, [r4, #0]
 800d084:	6063      	str	r3, [r4, #4]
 800d086:	6054      	str	r4, [r2, #4]
 800d088:	e7cb      	b.n	800d022 <_free_r+0x22>
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	20001818 	.word	0x20001818

0800d090 <__ssputs_r>:
 800d090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	461f      	mov	r7, r3
 800d096:	688e      	ldr	r6, [r1, #8]
 800d098:	4682      	mov	sl, r0
 800d09a:	42be      	cmp	r6, r7
 800d09c:	460c      	mov	r4, r1
 800d09e:	4690      	mov	r8, r2
 800d0a0:	680b      	ldr	r3, [r1, #0]
 800d0a2:	d82d      	bhi.n	800d100 <__ssputs_r+0x70>
 800d0a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d0ac:	d026      	beq.n	800d0fc <__ssputs_r+0x6c>
 800d0ae:	6965      	ldr	r5, [r4, #20]
 800d0b0:	6909      	ldr	r1, [r1, #16]
 800d0b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0b6:	eba3 0901 	sub.w	r9, r3, r1
 800d0ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0be:	1c7b      	adds	r3, r7, #1
 800d0c0:	444b      	add	r3, r9
 800d0c2:	106d      	asrs	r5, r5, #1
 800d0c4:	429d      	cmp	r5, r3
 800d0c6:	bf38      	it	cc
 800d0c8:	461d      	movcc	r5, r3
 800d0ca:	0553      	lsls	r3, r2, #21
 800d0cc:	d527      	bpl.n	800d11e <__ssputs_r+0x8e>
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f7ff fe3a 	bl	800cd48 <_malloc_r>
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	b360      	cbz	r0, 800d132 <__ssputs_r+0xa2>
 800d0d8:	464a      	mov	r2, r9
 800d0da:	6921      	ldr	r1, [r4, #16]
 800d0dc:	f000 fb18 	bl	800d710 <memcpy>
 800d0e0:	89a3      	ldrh	r3, [r4, #12]
 800d0e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0ea:	81a3      	strh	r3, [r4, #12]
 800d0ec:	6126      	str	r6, [r4, #16]
 800d0ee:	444e      	add	r6, r9
 800d0f0:	6026      	str	r6, [r4, #0]
 800d0f2:	463e      	mov	r6, r7
 800d0f4:	6165      	str	r5, [r4, #20]
 800d0f6:	eba5 0509 	sub.w	r5, r5, r9
 800d0fa:	60a5      	str	r5, [r4, #8]
 800d0fc:	42be      	cmp	r6, r7
 800d0fe:	d900      	bls.n	800d102 <__ssputs_r+0x72>
 800d100:	463e      	mov	r6, r7
 800d102:	4632      	mov	r2, r6
 800d104:	4641      	mov	r1, r8
 800d106:	6820      	ldr	r0, [r4, #0]
 800d108:	f000 fada 	bl	800d6c0 <memmove>
 800d10c:	2000      	movs	r0, #0
 800d10e:	68a3      	ldr	r3, [r4, #8]
 800d110:	1b9b      	subs	r3, r3, r6
 800d112:	60a3      	str	r3, [r4, #8]
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	4433      	add	r3, r6
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11e:	462a      	mov	r2, r5
 800d120:	f000 faa0 	bl	800d664 <_realloc_r>
 800d124:	4606      	mov	r6, r0
 800d126:	2800      	cmp	r0, #0
 800d128:	d1e0      	bne.n	800d0ec <__ssputs_r+0x5c>
 800d12a:	4650      	mov	r0, sl
 800d12c:	6921      	ldr	r1, [r4, #16]
 800d12e:	f7ff ff67 	bl	800d000 <_free_r>
 800d132:	230c      	movs	r3, #12
 800d134:	f8ca 3000 	str.w	r3, [sl]
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d13e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	e7e9      	b.n	800d11a <__ssputs_r+0x8a>
	...

0800d148 <_svfiprintf_r>:
 800d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	4698      	mov	r8, r3
 800d14e:	898b      	ldrh	r3, [r1, #12]
 800d150:	4607      	mov	r7, r0
 800d152:	061b      	lsls	r3, r3, #24
 800d154:	460d      	mov	r5, r1
 800d156:	4614      	mov	r4, r2
 800d158:	b09d      	sub	sp, #116	@ 0x74
 800d15a:	d510      	bpl.n	800d17e <_svfiprintf_r+0x36>
 800d15c:	690b      	ldr	r3, [r1, #16]
 800d15e:	b973      	cbnz	r3, 800d17e <_svfiprintf_r+0x36>
 800d160:	2140      	movs	r1, #64	@ 0x40
 800d162:	f7ff fdf1 	bl	800cd48 <_malloc_r>
 800d166:	6028      	str	r0, [r5, #0]
 800d168:	6128      	str	r0, [r5, #16]
 800d16a:	b930      	cbnz	r0, 800d17a <_svfiprintf_r+0x32>
 800d16c:	230c      	movs	r3, #12
 800d16e:	603b      	str	r3, [r7, #0]
 800d170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d174:	b01d      	add	sp, #116	@ 0x74
 800d176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17a:	2340      	movs	r3, #64	@ 0x40
 800d17c:	616b      	str	r3, [r5, #20]
 800d17e:	2300      	movs	r3, #0
 800d180:	9309      	str	r3, [sp, #36]	@ 0x24
 800d182:	2320      	movs	r3, #32
 800d184:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d188:	2330      	movs	r3, #48	@ 0x30
 800d18a:	f04f 0901 	mov.w	r9, #1
 800d18e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d192:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d32c <_svfiprintf_r+0x1e4>
 800d196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d19a:	4623      	mov	r3, r4
 800d19c:	469a      	mov	sl, r3
 800d19e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1a2:	b10a      	cbz	r2, 800d1a8 <_svfiprintf_r+0x60>
 800d1a4:	2a25      	cmp	r2, #37	@ 0x25
 800d1a6:	d1f9      	bne.n	800d19c <_svfiprintf_r+0x54>
 800d1a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ac:	d00b      	beq.n	800d1c6 <_svfiprintf_r+0x7e>
 800d1ae:	465b      	mov	r3, fp
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	f7ff ff6b 	bl	800d090 <__ssputs_r>
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	f000 80a7 	beq.w	800d30e <_svfiprintf_r+0x1c6>
 800d1c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1c2:	445a      	add	r2, fp
 800d1c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f000 809f 	beq.w	800d30e <_svfiprintf_r+0x1c6>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1da:	f10a 0a01 	add.w	sl, sl, #1
 800d1de:	9304      	str	r3, [sp, #16]
 800d1e0:	9307      	str	r3, [sp, #28]
 800d1e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1e8:	4654      	mov	r4, sl
 800d1ea:	2205      	movs	r2, #5
 800d1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f0:	484e      	ldr	r0, [pc, #312]	@ (800d32c <_svfiprintf_r+0x1e4>)
 800d1f2:	f000 fa7f 	bl	800d6f4 <memchr>
 800d1f6:	9a04      	ldr	r2, [sp, #16]
 800d1f8:	b9d8      	cbnz	r0, 800d232 <_svfiprintf_r+0xea>
 800d1fa:	06d0      	lsls	r0, r2, #27
 800d1fc:	bf44      	itt	mi
 800d1fe:	2320      	movmi	r3, #32
 800d200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d204:	0711      	lsls	r1, r2, #28
 800d206:	bf44      	itt	mi
 800d208:	232b      	movmi	r3, #43	@ 0x2b
 800d20a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d20e:	f89a 3000 	ldrb.w	r3, [sl]
 800d212:	2b2a      	cmp	r3, #42	@ 0x2a
 800d214:	d015      	beq.n	800d242 <_svfiprintf_r+0xfa>
 800d216:	4654      	mov	r4, sl
 800d218:	2000      	movs	r0, #0
 800d21a:	f04f 0c0a 	mov.w	ip, #10
 800d21e:	9a07      	ldr	r2, [sp, #28]
 800d220:	4621      	mov	r1, r4
 800d222:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d226:	3b30      	subs	r3, #48	@ 0x30
 800d228:	2b09      	cmp	r3, #9
 800d22a:	d94b      	bls.n	800d2c4 <_svfiprintf_r+0x17c>
 800d22c:	b1b0      	cbz	r0, 800d25c <_svfiprintf_r+0x114>
 800d22e:	9207      	str	r2, [sp, #28]
 800d230:	e014      	b.n	800d25c <_svfiprintf_r+0x114>
 800d232:	eba0 0308 	sub.w	r3, r0, r8
 800d236:	fa09 f303 	lsl.w	r3, r9, r3
 800d23a:	4313      	orrs	r3, r2
 800d23c:	46a2      	mov	sl, r4
 800d23e:	9304      	str	r3, [sp, #16]
 800d240:	e7d2      	b.n	800d1e8 <_svfiprintf_r+0xa0>
 800d242:	9b03      	ldr	r3, [sp, #12]
 800d244:	1d19      	adds	r1, r3, #4
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	9103      	str	r1, [sp, #12]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	bfbb      	ittet	lt
 800d24e:	425b      	neglt	r3, r3
 800d250:	f042 0202 	orrlt.w	r2, r2, #2
 800d254:	9307      	strge	r3, [sp, #28]
 800d256:	9307      	strlt	r3, [sp, #28]
 800d258:	bfb8      	it	lt
 800d25a:	9204      	strlt	r2, [sp, #16]
 800d25c:	7823      	ldrb	r3, [r4, #0]
 800d25e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d260:	d10a      	bne.n	800d278 <_svfiprintf_r+0x130>
 800d262:	7863      	ldrb	r3, [r4, #1]
 800d264:	2b2a      	cmp	r3, #42	@ 0x2a
 800d266:	d132      	bne.n	800d2ce <_svfiprintf_r+0x186>
 800d268:	9b03      	ldr	r3, [sp, #12]
 800d26a:	3402      	adds	r4, #2
 800d26c:	1d1a      	adds	r2, r3, #4
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	9203      	str	r2, [sp, #12]
 800d272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d276:	9305      	str	r3, [sp, #20]
 800d278:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d330 <_svfiprintf_r+0x1e8>
 800d27c:	2203      	movs	r2, #3
 800d27e:	4650      	mov	r0, sl
 800d280:	7821      	ldrb	r1, [r4, #0]
 800d282:	f000 fa37 	bl	800d6f4 <memchr>
 800d286:	b138      	cbz	r0, 800d298 <_svfiprintf_r+0x150>
 800d288:	2240      	movs	r2, #64	@ 0x40
 800d28a:	9b04      	ldr	r3, [sp, #16]
 800d28c:	eba0 000a 	sub.w	r0, r0, sl
 800d290:	4082      	lsls	r2, r0
 800d292:	4313      	orrs	r3, r2
 800d294:	3401      	adds	r4, #1
 800d296:	9304      	str	r3, [sp, #16]
 800d298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d29c:	2206      	movs	r2, #6
 800d29e:	4825      	ldr	r0, [pc, #148]	@ (800d334 <_svfiprintf_r+0x1ec>)
 800d2a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2a4:	f000 fa26 	bl	800d6f4 <memchr>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d036      	beq.n	800d31a <_svfiprintf_r+0x1d2>
 800d2ac:	4b22      	ldr	r3, [pc, #136]	@ (800d338 <_svfiprintf_r+0x1f0>)
 800d2ae:	bb1b      	cbnz	r3, 800d2f8 <_svfiprintf_r+0x1b0>
 800d2b0:	9b03      	ldr	r3, [sp, #12]
 800d2b2:	3307      	adds	r3, #7
 800d2b4:	f023 0307 	bic.w	r3, r3, #7
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	9303      	str	r3, [sp, #12]
 800d2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2be:	4433      	add	r3, r6
 800d2c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c2:	e76a      	b.n	800d19a <_svfiprintf_r+0x52>
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	2001      	movs	r0, #1
 800d2c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2cc:	e7a8      	b.n	800d220 <_svfiprintf_r+0xd8>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f04f 0c0a 	mov.w	ip, #10
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	3401      	adds	r4, #1
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2e0:	3a30      	subs	r2, #48	@ 0x30
 800d2e2:	2a09      	cmp	r2, #9
 800d2e4:	d903      	bls.n	800d2ee <_svfiprintf_r+0x1a6>
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d0c6      	beq.n	800d278 <_svfiprintf_r+0x130>
 800d2ea:	9105      	str	r1, [sp, #20]
 800d2ec:	e7c4      	b.n	800d278 <_svfiprintf_r+0x130>
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2f6:	e7f0      	b.n	800d2da <_svfiprintf_r+0x192>
 800d2f8:	ab03      	add	r3, sp, #12
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	462a      	mov	r2, r5
 800d2fe:	4638      	mov	r0, r7
 800d300:	4b0e      	ldr	r3, [pc, #56]	@ (800d33c <_svfiprintf_r+0x1f4>)
 800d302:	a904      	add	r1, sp, #16
 800d304:	f3af 8000 	nop.w
 800d308:	1c42      	adds	r2, r0, #1
 800d30a:	4606      	mov	r6, r0
 800d30c:	d1d6      	bne.n	800d2bc <_svfiprintf_r+0x174>
 800d30e:	89ab      	ldrh	r3, [r5, #12]
 800d310:	065b      	lsls	r3, r3, #25
 800d312:	f53f af2d 	bmi.w	800d170 <_svfiprintf_r+0x28>
 800d316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d318:	e72c      	b.n	800d174 <_svfiprintf_r+0x2c>
 800d31a:	ab03      	add	r3, sp, #12
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	462a      	mov	r2, r5
 800d320:	4638      	mov	r0, r7
 800d322:	4b06      	ldr	r3, [pc, #24]	@ (800d33c <_svfiprintf_r+0x1f4>)
 800d324:	a904      	add	r1, sp, #16
 800d326:	f000 f87d 	bl	800d424 <_printf_i>
 800d32a:	e7ed      	b.n	800d308 <_svfiprintf_r+0x1c0>
 800d32c:	0800db33 	.word	0x0800db33
 800d330:	0800db39 	.word	0x0800db39
 800d334:	0800db3d 	.word	0x0800db3d
 800d338:	00000000 	.word	0x00000000
 800d33c:	0800d091 	.word	0x0800d091

0800d340 <_printf_common>:
 800d340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d344:	4616      	mov	r6, r2
 800d346:	4698      	mov	r8, r3
 800d348:	688a      	ldr	r2, [r1, #8]
 800d34a:	690b      	ldr	r3, [r1, #16]
 800d34c:	4607      	mov	r7, r0
 800d34e:	4293      	cmp	r3, r2
 800d350:	bfb8      	it	lt
 800d352:	4613      	movlt	r3, r2
 800d354:	6033      	str	r3, [r6, #0]
 800d356:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d35a:	460c      	mov	r4, r1
 800d35c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d360:	b10a      	cbz	r2, 800d366 <_printf_common+0x26>
 800d362:	3301      	adds	r3, #1
 800d364:	6033      	str	r3, [r6, #0]
 800d366:	6823      	ldr	r3, [r4, #0]
 800d368:	0699      	lsls	r1, r3, #26
 800d36a:	bf42      	ittt	mi
 800d36c:	6833      	ldrmi	r3, [r6, #0]
 800d36e:	3302      	addmi	r3, #2
 800d370:	6033      	strmi	r3, [r6, #0]
 800d372:	6825      	ldr	r5, [r4, #0]
 800d374:	f015 0506 	ands.w	r5, r5, #6
 800d378:	d106      	bne.n	800d388 <_printf_common+0x48>
 800d37a:	f104 0a19 	add.w	sl, r4, #25
 800d37e:	68e3      	ldr	r3, [r4, #12]
 800d380:	6832      	ldr	r2, [r6, #0]
 800d382:	1a9b      	subs	r3, r3, r2
 800d384:	42ab      	cmp	r3, r5
 800d386:	dc2b      	bgt.n	800d3e0 <_printf_common+0xa0>
 800d388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d38c:	6822      	ldr	r2, [r4, #0]
 800d38e:	3b00      	subs	r3, #0
 800d390:	bf18      	it	ne
 800d392:	2301      	movne	r3, #1
 800d394:	0692      	lsls	r2, r2, #26
 800d396:	d430      	bmi.n	800d3fa <_printf_common+0xba>
 800d398:	4641      	mov	r1, r8
 800d39a:	4638      	mov	r0, r7
 800d39c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d3a0:	47c8      	blx	r9
 800d3a2:	3001      	adds	r0, #1
 800d3a4:	d023      	beq.n	800d3ee <_printf_common+0xae>
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	6922      	ldr	r2, [r4, #16]
 800d3aa:	f003 0306 	and.w	r3, r3, #6
 800d3ae:	2b04      	cmp	r3, #4
 800d3b0:	bf14      	ite	ne
 800d3b2:	2500      	movne	r5, #0
 800d3b4:	6833      	ldreq	r3, [r6, #0]
 800d3b6:	f04f 0600 	mov.w	r6, #0
 800d3ba:	bf08      	it	eq
 800d3bc:	68e5      	ldreq	r5, [r4, #12]
 800d3be:	f104 041a 	add.w	r4, r4, #26
 800d3c2:	bf08      	it	eq
 800d3c4:	1aed      	subeq	r5, r5, r3
 800d3c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d3ca:	bf08      	it	eq
 800d3cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	bfc4      	itt	gt
 800d3d4:	1a9b      	subgt	r3, r3, r2
 800d3d6:	18ed      	addgt	r5, r5, r3
 800d3d8:	42b5      	cmp	r5, r6
 800d3da:	d11a      	bne.n	800d412 <_printf_common+0xd2>
 800d3dc:	2000      	movs	r0, #0
 800d3de:	e008      	b.n	800d3f2 <_printf_common+0xb2>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	4652      	mov	r2, sl
 800d3e4:	4641      	mov	r1, r8
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	47c8      	blx	r9
 800d3ea:	3001      	adds	r0, #1
 800d3ec:	d103      	bne.n	800d3f6 <_printf_common+0xb6>
 800d3ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f6:	3501      	adds	r5, #1
 800d3f8:	e7c1      	b.n	800d37e <_printf_common+0x3e>
 800d3fa:	2030      	movs	r0, #48	@ 0x30
 800d3fc:	18e1      	adds	r1, r4, r3
 800d3fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d408:	4422      	add	r2, r4
 800d40a:	3302      	adds	r3, #2
 800d40c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d410:	e7c2      	b.n	800d398 <_printf_common+0x58>
 800d412:	2301      	movs	r3, #1
 800d414:	4622      	mov	r2, r4
 800d416:	4641      	mov	r1, r8
 800d418:	4638      	mov	r0, r7
 800d41a:	47c8      	blx	r9
 800d41c:	3001      	adds	r0, #1
 800d41e:	d0e6      	beq.n	800d3ee <_printf_common+0xae>
 800d420:	3601      	adds	r6, #1
 800d422:	e7d9      	b.n	800d3d8 <_printf_common+0x98>

0800d424 <_printf_i>:
 800d424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d428:	7e0f      	ldrb	r7, [r1, #24]
 800d42a:	4691      	mov	r9, r2
 800d42c:	2f78      	cmp	r7, #120	@ 0x78
 800d42e:	4680      	mov	r8, r0
 800d430:	460c      	mov	r4, r1
 800d432:	469a      	mov	sl, r3
 800d434:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d436:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d43a:	d807      	bhi.n	800d44c <_printf_i+0x28>
 800d43c:	2f62      	cmp	r7, #98	@ 0x62
 800d43e:	d80a      	bhi.n	800d456 <_printf_i+0x32>
 800d440:	2f00      	cmp	r7, #0
 800d442:	f000 80d3 	beq.w	800d5ec <_printf_i+0x1c8>
 800d446:	2f58      	cmp	r7, #88	@ 0x58
 800d448:	f000 80ba 	beq.w	800d5c0 <_printf_i+0x19c>
 800d44c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d450:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d454:	e03a      	b.n	800d4cc <_printf_i+0xa8>
 800d456:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d45a:	2b15      	cmp	r3, #21
 800d45c:	d8f6      	bhi.n	800d44c <_printf_i+0x28>
 800d45e:	a101      	add	r1, pc, #4	@ (adr r1, 800d464 <_printf_i+0x40>)
 800d460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d464:	0800d4bd 	.word	0x0800d4bd
 800d468:	0800d4d1 	.word	0x0800d4d1
 800d46c:	0800d44d 	.word	0x0800d44d
 800d470:	0800d44d 	.word	0x0800d44d
 800d474:	0800d44d 	.word	0x0800d44d
 800d478:	0800d44d 	.word	0x0800d44d
 800d47c:	0800d4d1 	.word	0x0800d4d1
 800d480:	0800d44d 	.word	0x0800d44d
 800d484:	0800d44d 	.word	0x0800d44d
 800d488:	0800d44d 	.word	0x0800d44d
 800d48c:	0800d44d 	.word	0x0800d44d
 800d490:	0800d5d3 	.word	0x0800d5d3
 800d494:	0800d4fb 	.word	0x0800d4fb
 800d498:	0800d58d 	.word	0x0800d58d
 800d49c:	0800d44d 	.word	0x0800d44d
 800d4a0:	0800d44d 	.word	0x0800d44d
 800d4a4:	0800d5f5 	.word	0x0800d5f5
 800d4a8:	0800d44d 	.word	0x0800d44d
 800d4ac:	0800d4fb 	.word	0x0800d4fb
 800d4b0:	0800d44d 	.word	0x0800d44d
 800d4b4:	0800d44d 	.word	0x0800d44d
 800d4b8:	0800d595 	.word	0x0800d595
 800d4bc:	6833      	ldr	r3, [r6, #0]
 800d4be:	1d1a      	adds	r2, r3, #4
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6032      	str	r2, [r6, #0]
 800d4c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e09e      	b.n	800d60e <_printf_i+0x1ea>
 800d4d0:	6833      	ldr	r3, [r6, #0]
 800d4d2:	6820      	ldr	r0, [r4, #0]
 800d4d4:	1d19      	adds	r1, r3, #4
 800d4d6:	6031      	str	r1, [r6, #0]
 800d4d8:	0606      	lsls	r6, r0, #24
 800d4da:	d501      	bpl.n	800d4e0 <_printf_i+0xbc>
 800d4dc:	681d      	ldr	r5, [r3, #0]
 800d4de:	e003      	b.n	800d4e8 <_printf_i+0xc4>
 800d4e0:	0645      	lsls	r5, r0, #25
 800d4e2:	d5fb      	bpl.n	800d4dc <_printf_i+0xb8>
 800d4e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d4e8:	2d00      	cmp	r5, #0
 800d4ea:	da03      	bge.n	800d4f4 <_printf_i+0xd0>
 800d4ec:	232d      	movs	r3, #45	@ 0x2d
 800d4ee:	426d      	negs	r5, r5
 800d4f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4f4:	230a      	movs	r3, #10
 800d4f6:	4859      	ldr	r0, [pc, #356]	@ (800d65c <_printf_i+0x238>)
 800d4f8:	e011      	b.n	800d51e <_printf_i+0xfa>
 800d4fa:	6821      	ldr	r1, [r4, #0]
 800d4fc:	6833      	ldr	r3, [r6, #0]
 800d4fe:	0608      	lsls	r0, r1, #24
 800d500:	f853 5b04 	ldr.w	r5, [r3], #4
 800d504:	d402      	bmi.n	800d50c <_printf_i+0xe8>
 800d506:	0649      	lsls	r1, r1, #25
 800d508:	bf48      	it	mi
 800d50a:	b2ad      	uxthmi	r5, r5
 800d50c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d50e:	6033      	str	r3, [r6, #0]
 800d510:	bf14      	ite	ne
 800d512:	230a      	movne	r3, #10
 800d514:	2308      	moveq	r3, #8
 800d516:	4851      	ldr	r0, [pc, #324]	@ (800d65c <_printf_i+0x238>)
 800d518:	2100      	movs	r1, #0
 800d51a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d51e:	6866      	ldr	r6, [r4, #4]
 800d520:	2e00      	cmp	r6, #0
 800d522:	bfa8      	it	ge
 800d524:	6821      	ldrge	r1, [r4, #0]
 800d526:	60a6      	str	r6, [r4, #8]
 800d528:	bfa4      	itt	ge
 800d52a:	f021 0104 	bicge.w	r1, r1, #4
 800d52e:	6021      	strge	r1, [r4, #0]
 800d530:	b90d      	cbnz	r5, 800d536 <_printf_i+0x112>
 800d532:	2e00      	cmp	r6, #0
 800d534:	d04b      	beq.n	800d5ce <_printf_i+0x1aa>
 800d536:	4616      	mov	r6, r2
 800d538:	fbb5 f1f3 	udiv	r1, r5, r3
 800d53c:	fb03 5711 	mls	r7, r3, r1, r5
 800d540:	5dc7      	ldrb	r7, [r0, r7]
 800d542:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d546:	462f      	mov	r7, r5
 800d548:	42bb      	cmp	r3, r7
 800d54a:	460d      	mov	r5, r1
 800d54c:	d9f4      	bls.n	800d538 <_printf_i+0x114>
 800d54e:	2b08      	cmp	r3, #8
 800d550:	d10b      	bne.n	800d56a <_printf_i+0x146>
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	07df      	lsls	r7, r3, #31
 800d556:	d508      	bpl.n	800d56a <_printf_i+0x146>
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	6861      	ldr	r1, [r4, #4]
 800d55c:	4299      	cmp	r1, r3
 800d55e:	bfde      	ittt	le
 800d560:	2330      	movle	r3, #48	@ 0x30
 800d562:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d566:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d56a:	1b92      	subs	r2, r2, r6
 800d56c:	6122      	str	r2, [r4, #16]
 800d56e:	464b      	mov	r3, r9
 800d570:	4621      	mov	r1, r4
 800d572:	4640      	mov	r0, r8
 800d574:	f8cd a000 	str.w	sl, [sp]
 800d578:	aa03      	add	r2, sp, #12
 800d57a:	f7ff fee1 	bl	800d340 <_printf_common>
 800d57e:	3001      	adds	r0, #1
 800d580:	d14a      	bne.n	800d618 <_printf_i+0x1f4>
 800d582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d586:	b004      	add	sp, #16
 800d588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	f043 0320 	orr.w	r3, r3, #32
 800d592:	6023      	str	r3, [r4, #0]
 800d594:	2778      	movs	r7, #120	@ 0x78
 800d596:	4832      	ldr	r0, [pc, #200]	@ (800d660 <_printf_i+0x23c>)
 800d598:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	6831      	ldr	r1, [r6, #0]
 800d5a0:	061f      	lsls	r7, r3, #24
 800d5a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5a6:	d402      	bmi.n	800d5ae <_printf_i+0x18a>
 800d5a8:	065f      	lsls	r7, r3, #25
 800d5aa:	bf48      	it	mi
 800d5ac:	b2ad      	uxthmi	r5, r5
 800d5ae:	6031      	str	r1, [r6, #0]
 800d5b0:	07d9      	lsls	r1, r3, #31
 800d5b2:	bf44      	itt	mi
 800d5b4:	f043 0320 	orrmi.w	r3, r3, #32
 800d5b8:	6023      	strmi	r3, [r4, #0]
 800d5ba:	b11d      	cbz	r5, 800d5c4 <_printf_i+0x1a0>
 800d5bc:	2310      	movs	r3, #16
 800d5be:	e7ab      	b.n	800d518 <_printf_i+0xf4>
 800d5c0:	4826      	ldr	r0, [pc, #152]	@ (800d65c <_printf_i+0x238>)
 800d5c2:	e7e9      	b.n	800d598 <_printf_i+0x174>
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	f023 0320 	bic.w	r3, r3, #32
 800d5ca:	6023      	str	r3, [r4, #0]
 800d5cc:	e7f6      	b.n	800d5bc <_printf_i+0x198>
 800d5ce:	4616      	mov	r6, r2
 800d5d0:	e7bd      	b.n	800d54e <_printf_i+0x12a>
 800d5d2:	6833      	ldr	r3, [r6, #0]
 800d5d4:	6825      	ldr	r5, [r4, #0]
 800d5d6:	1d18      	adds	r0, r3, #4
 800d5d8:	6961      	ldr	r1, [r4, #20]
 800d5da:	6030      	str	r0, [r6, #0]
 800d5dc:	062e      	lsls	r6, r5, #24
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	d501      	bpl.n	800d5e6 <_printf_i+0x1c2>
 800d5e2:	6019      	str	r1, [r3, #0]
 800d5e4:	e002      	b.n	800d5ec <_printf_i+0x1c8>
 800d5e6:	0668      	lsls	r0, r5, #25
 800d5e8:	d5fb      	bpl.n	800d5e2 <_printf_i+0x1be>
 800d5ea:	8019      	strh	r1, [r3, #0]
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	4616      	mov	r6, r2
 800d5f0:	6123      	str	r3, [r4, #16]
 800d5f2:	e7bc      	b.n	800d56e <_printf_i+0x14a>
 800d5f4:	6833      	ldr	r3, [r6, #0]
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	1d1a      	adds	r2, r3, #4
 800d5fa:	6032      	str	r2, [r6, #0]
 800d5fc:	681e      	ldr	r6, [r3, #0]
 800d5fe:	6862      	ldr	r2, [r4, #4]
 800d600:	4630      	mov	r0, r6
 800d602:	f000 f877 	bl	800d6f4 <memchr>
 800d606:	b108      	cbz	r0, 800d60c <_printf_i+0x1e8>
 800d608:	1b80      	subs	r0, r0, r6
 800d60a:	6060      	str	r0, [r4, #4]
 800d60c:	6863      	ldr	r3, [r4, #4]
 800d60e:	6123      	str	r3, [r4, #16]
 800d610:	2300      	movs	r3, #0
 800d612:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d616:	e7aa      	b.n	800d56e <_printf_i+0x14a>
 800d618:	4632      	mov	r2, r6
 800d61a:	4649      	mov	r1, r9
 800d61c:	4640      	mov	r0, r8
 800d61e:	6923      	ldr	r3, [r4, #16]
 800d620:	47d0      	blx	sl
 800d622:	3001      	adds	r0, #1
 800d624:	d0ad      	beq.n	800d582 <_printf_i+0x15e>
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	079b      	lsls	r3, r3, #30
 800d62a:	d413      	bmi.n	800d654 <_printf_i+0x230>
 800d62c:	68e0      	ldr	r0, [r4, #12]
 800d62e:	9b03      	ldr	r3, [sp, #12]
 800d630:	4298      	cmp	r0, r3
 800d632:	bfb8      	it	lt
 800d634:	4618      	movlt	r0, r3
 800d636:	e7a6      	b.n	800d586 <_printf_i+0x162>
 800d638:	2301      	movs	r3, #1
 800d63a:	4632      	mov	r2, r6
 800d63c:	4649      	mov	r1, r9
 800d63e:	4640      	mov	r0, r8
 800d640:	47d0      	blx	sl
 800d642:	3001      	adds	r0, #1
 800d644:	d09d      	beq.n	800d582 <_printf_i+0x15e>
 800d646:	3501      	adds	r5, #1
 800d648:	68e3      	ldr	r3, [r4, #12]
 800d64a:	9903      	ldr	r1, [sp, #12]
 800d64c:	1a5b      	subs	r3, r3, r1
 800d64e:	42ab      	cmp	r3, r5
 800d650:	dcf2      	bgt.n	800d638 <_printf_i+0x214>
 800d652:	e7eb      	b.n	800d62c <_printf_i+0x208>
 800d654:	2500      	movs	r5, #0
 800d656:	f104 0619 	add.w	r6, r4, #25
 800d65a:	e7f5      	b.n	800d648 <_printf_i+0x224>
 800d65c:	0800db44 	.word	0x0800db44
 800d660:	0800db55 	.word	0x0800db55

0800d664 <_realloc_r>:
 800d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d668:	4680      	mov	r8, r0
 800d66a:	4615      	mov	r5, r2
 800d66c:	460c      	mov	r4, r1
 800d66e:	b921      	cbnz	r1, 800d67a <_realloc_r+0x16>
 800d670:	4611      	mov	r1, r2
 800d672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d676:	f7ff bb67 	b.w	800cd48 <_malloc_r>
 800d67a:	b92a      	cbnz	r2, 800d688 <_realloc_r+0x24>
 800d67c:	f7ff fcc0 	bl	800d000 <_free_r>
 800d680:	2400      	movs	r4, #0
 800d682:	4620      	mov	r0, r4
 800d684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d688:	f000 f850 	bl	800d72c <_malloc_usable_size_r>
 800d68c:	4285      	cmp	r5, r0
 800d68e:	4606      	mov	r6, r0
 800d690:	d802      	bhi.n	800d698 <_realloc_r+0x34>
 800d692:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d696:	d8f4      	bhi.n	800d682 <_realloc_r+0x1e>
 800d698:	4629      	mov	r1, r5
 800d69a:	4640      	mov	r0, r8
 800d69c:	f7ff fb54 	bl	800cd48 <_malloc_r>
 800d6a0:	4607      	mov	r7, r0
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d0ec      	beq.n	800d680 <_realloc_r+0x1c>
 800d6a6:	42b5      	cmp	r5, r6
 800d6a8:	462a      	mov	r2, r5
 800d6aa:	4621      	mov	r1, r4
 800d6ac:	bf28      	it	cs
 800d6ae:	4632      	movcs	r2, r6
 800d6b0:	f000 f82e 	bl	800d710 <memcpy>
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	4640      	mov	r0, r8
 800d6b8:	f7ff fca2 	bl	800d000 <_free_r>
 800d6bc:	463c      	mov	r4, r7
 800d6be:	e7e0      	b.n	800d682 <_realloc_r+0x1e>

0800d6c0 <memmove>:
 800d6c0:	4288      	cmp	r0, r1
 800d6c2:	b510      	push	{r4, lr}
 800d6c4:	eb01 0402 	add.w	r4, r1, r2
 800d6c8:	d902      	bls.n	800d6d0 <memmove+0x10>
 800d6ca:	4284      	cmp	r4, r0
 800d6cc:	4623      	mov	r3, r4
 800d6ce:	d807      	bhi.n	800d6e0 <memmove+0x20>
 800d6d0:	1e43      	subs	r3, r0, #1
 800d6d2:	42a1      	cmp	r1, r4
 800d6d4:	d008      	beq.n	800d6e8 <memmove+0x28>
 800d6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6de:	e7f8      	b.n	800d6d2 <memmove+0x12>
 800d6e0:	4601      	mov	r1, r0
 800d6e2:	4402      	add	r2, r0
 800d6e4:	428a      	cmp	r2, r1
 800d6e6:	d100      	bne.n	800d6ea <memmove+0x2a>
 800d6e8:	bd10      	pop	{r4, pc}
 800d6ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6f2:	e7f7      	b.n	800d6e4 <memmove+0x24>

0800d6f4 <memchr>:
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	b510      	push	{r4, lr}
 800d6f8:	b2c9      	uxtb	r1, r1
 800d6fa:	4402      	add	r2, r0
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	4618      	mov	r0, r3
 800d700:	d101      	bne.n	800d706 <memchr+0x12>
 800d702:	2000      	movs	r0, #0
 800d704:	e003      	b.n	800d70e <memchr+0x1a>
 800d706:	7804      	ldrb	r4, [r0, #0]
 800d708:	3301      	adds	r3, #1
 800d70a:	428c      	cmp	r4, r1
 800d70c:	d1f6      	bne.n	800d6fc <memchr+0x8>
 800d70e:	bd10      	pop	{r4, pc}

0800d710 <memcpy>:
 800d710:	440a      	add	r2, r1
 800d712:	4291      	cmp	r1, r2
 800d714:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d718:	d100      	bne.n	800d71c <memcpy+0xc>
 800d71a:	4770      	bx	lr
 800d71c:	b510      	push	{r4, lr}
 800d71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d722:	4291      	cmp	r1, r2
 800d724:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d728:	d1f9      	bne.n	800d71e <memcpy+0xe>
 800d72a:	bd10      	pop	{r4, pc}

0800d72c <_malloc_usable_size_r>:
 800d72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d730:	1f18      	subs	r0, r3, #4
 800d732:	2b00      	cmp	r3, #0
 800d734:	bfbc      	itt	lt
 800d736:	580b      	ldrlt	r3, [r1, r0]
 800d738:	18c0      	addlt	r0, r0, r3
 800d73a:	4770      	bx	lr

0800d73c <_init>:
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	bf00      	nop
 800d740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d742:	bc08      	pop	{r3}
 800d744:	469e      	mov	lr, r3
 800d746:	4770      	bx	lr

0800d748 <_fini>:
 800d748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74a:	bf00      	nop
 800d74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d74e:	bc08      	pop	{r3}
 800d750:	469e      	mov	lr, r3
 800d752:	4770      	bx	lr
