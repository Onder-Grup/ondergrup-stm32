
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7b8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f34  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8dc  0800e8dc  000209a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e8dc  0800e8dc  000209a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e8dc  0800e8dc  000209a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8dc  0800e8dc  0001e8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8e0  0800e8e0  0001e8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a4  20000000  0800e8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  200009a4  0800f288  000209a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dc4  0800f288  00021dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209cd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001990a  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003262  00000000  00000000  0003a31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001131  00000000  00000000  0003eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c125  00000000  00000000  0003fc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2a8  00000000  00000000  0005bdb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7a16  00000000  00000000  0007805e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062b4  00000000  00000000  0011fa74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00125d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200009a4 	.word	0x200009a4
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d990 	.word	0x0800d990

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200009a8 	.word	0x200009a8
 800022c:	0800d990 	.word	0x0800d990

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	200009c0 	.word	0x200009c0
 800026c:	20000a14 	.word	0x20000a14

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7b7b      	ldrb	r3, [r7, #13]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7b7b      	ldrb	r3, [r7, #13]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7b3b      	ldrb	r3, [r7, #12]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7b3b      	ldrb	r3, [r7, #12]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80002b0:	bf00      	nop
 80002b2:	4825      	ldr	r0, [pc, #148]	; (8000348 <lcd_send_cmd+0xd8>)
 80002b4:	f009 f909 	bl	80094ca <HAL_I2C_GetError>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	d0f9      	beq.n	80002b2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80002be:	bf00      	nop
 80002c0:	4821      	ldr	r0, [pc, #132]	; (8000348 <lcd_send_cmd+0xd8>)
 80002c2:	f009 f8f5 	bl	80094b0 <HAL_I2C_GetState>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d1f9      	bne.n	80002c0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80002cc:	4b1f      	ldr	r3, [pc, #124]	; (800034c <lcd_send_cmd+0xdc>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d116      	bne.n	8000302 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	73fb      	strb	r3, [r7, #15]
 80002d8:	e00f      	b.n	80002fa <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	3310      	adds	r3, #16
 80002de:	443b      	add	r3, r7
 80002e0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	f022 0208 	bic.w	r2, r2, #8
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	3310      	adds	r3, #16
 80002ee:	443b      	add	r3, r7
 80002f0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d9ec      	bls.n	80002da <lcd_send_cmd+0x6a>
 8000300:	e015      	b.n	800032e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	73bb      	strb	r3, [r7, #14]
 8000306:	e00f      	b.n	8000328 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	3310      	adds	r3, #16
 800030c:	443b      	add	r3, r7
 800030e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	f042 0208 	orr.w	r2, r2, #8
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	3310      	adds	r3, #16
 800031c:	443b      	add	r3, r7
 800031e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000322:	7bbb      	ldrb	r3, [r7, #14]
 8000324:	3301      	adds	r3, #1
 8000326:	73bb      	strb	r3, [r7, #14]
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	2b03      	cmp	r3, #3
 800032c:	d9ec      	bls.n	8000308 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800032e:	f107 0208 	add.w	r2, r7, #8
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	2304      	movs	r3, #4
 8000338:	214e      	movs	r1, #78	; 0x4e
 800033a:	4803      	ldr	r0, [pc, #12]	; (8000348 <lcd_send_cmd+0xd8>)
 800033c:	f008 fc58 	bl	8008bf0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000e40 	.word	0x20000e40
 800034c:	20000c14 	.word	0x20000c14

08000350 <lcd_send_data>:

void lcd_send_data (char data) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af02      	add	r7, sp, #8
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f023 030f 	bic.w	r3, r3, #15
 8000360:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000368:	7b7b      	ldrb	r3, [r7, #13]
 800036a:	f043 030d 	orr.w	r3, r3, #13
 800036e:	b2db      	uxtb	r3, r3
 8000370:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000372:	7b7b      	ldrb	r3, [r7, #13]
 8000374:	f043 0309 	orr.w	r3, r3, #9
 8000378:	b2db      	uxtb	r3, r3
 800037a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800037c:	7b3b      	ldrb	r3, [r7, #12]
 800037e:	f043 030d 	orr.w	r3, r3, #13
 8000382:	b2db      	uxtb	r3, r3
 8000384:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000386:	7b3b      	ldrb	r3, [r7, #12]
 8000388:	f043 0309 	orr.w	r3, r3, #9
 800038c:	b2db      	uxtb	r3, r3
 800038e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000390:	bf00      	nop
 8000392:	4825      	ldr	r0, [pc, #148]	; (8000428 <lcd_send_data+0xd8>)
 8000394:	f009 f899 	bl	80094ca <HAL_I2C_GetError>
 8000398:	4603      	mov	r3, r0
 800039a:	2b04      	cmp	r3, #4
 800039c:	d0f9      	beq.n	8000392 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800039e:	bf00      	nop
 80003a0:	4821      	ldr	r0, [pc, #132]	; (8000428 <lcd_send_data+0xd8>)
 80003a2:	f009 f885 	bl	80094b0 <HAL_I2C_GetState>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b20      	cmp	r3, #32
 80003aa:	d1f9      	bne.n	80003a0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <lcd_send_data+0xdc>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d116      	bne.n	80003e2 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	e00f      	b.n	80003da <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	3310      	adds	r3, #16
 80003be:	443b      	add	r3, r7
 80003c0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	f022 0208 	bic.w	r2, r2, #8
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	3310      	adds	r3, #16
 80003ce:	443b      	add	r3, r7
 80003d0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	3301      	adds	r3, #1
 80003d8:	73fb      	strb	r3, [r7, #15]
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d9ec      	bls.n	80003ba <lcd_send_data+0x6a>
 80003e0:	e015      	b.n	800040e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	73bb      	strb	r3, [r7, #14]
 80003e6:	e00f      	b.n	8000408 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	3310      	adds	r3, #16
 80003ec:	443b      	add	r3, r7
 80003ee:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	f042 0208 	orr.w	r2, r2, #8
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	3310      	adds	r3, #16
 80003fc:	443b      	add	r3, r7
 80003fe:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	3301      	adds	r3, #1
 8000406:	73bb      	strb	r3, [r7, #14]
 8000408:	7bbb      	ldrb	r3, [r7, #14]
 800040a:	2b03      	cmp	r3, #3
 800040c:	d9ec      	bls.n	80003e8 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800040e:	f107 0208 	add.w	r2, r7, #8
 8000412:	2364      	movs	r3, #100	; 0x64
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2304      	movs	r3, #4
 8000418:	214e      	movs	r1, #78	; 0x4e
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <lcd_send_data+0xd8>)
 800041c:	f008 fbe8 	bl	8008bf0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000e40 	.word	0x20000e40
 800042c:	20000c14 	.word	0x20000c14

08000430 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000438:	e006      	b.n	8000448 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff84 	bl	8000350 <lcd_send_data>
	while (*str) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f4      	bne.n	800043a <lcd_send_string+0xa>
	}
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <lcd_init>:

void lcd_init (void) {
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff ff06 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000464:	2028      	movs	r0, #40	; 0x28
 8000466:	f7ff ff03 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800046a:	200c      	movs	r0, #12
 800046c:	f7ff ff00 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000470:	2080      	movs	r0, #128	; 0x80
 8000472:	f7ff fefd 	bl	8000270 <lcd_send_cmd>
	lcd_backlight(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f000 f840 	bl	80004fc <lcd_backlight>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	460a      	mov	r2, r1
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	4613      	mov	r3, r2
 800048e:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d106      	bne.n	80004a4 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	337f      	adds	r3, #127	; 0x7f
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fee7 	bl	8000270 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80004a2:	e008      	b.n	80004b6 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d105      	bne.n	80004b6 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	3b41      	subs	r3, #65	; 0x41
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fedd 	bl	8000270 <lcd_send_cmd>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	4603      	mov	r3, r0
 80004c6:	603a      	str	r2, [r7, #0]
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	460b      	mov	r3, r1
 80004cc:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80004ce:	79ba      	ldrb	r2, [r7, #6]
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ffd3 	bl	8000480 <lcd_gotoxy>
	lcd_send_string(str);
 80004da:	6838      	ldr	r0, [r7, #0]
 80004dc:	f7ff ffa8 	bl	8000430 <lcd_send_string>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <lcd_clear>:

void lcd_clear(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff febf 	bl	8000270 <lcd_send_cmd>
    HAL_Delay(2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f007 fbf0 	bl	8007cd8 <HAL_Delay>

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <lcd_backlight+0x20>)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff feaf 	bl	8000270 <lcd_send_cmd>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000c14 	.word	0x20000c14

08000520 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000524:	f3bf 8f4f 	dsb	sy
}
 8000528:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <__NVIC_SystemReset+0x24>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000532:	4904      	ldr	r1, [pc, #16]	; (8000544 <__NVIC_SystemReset+0x24>)
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <__NVIC_SystemReset+0x28>)
 8000536:	4313      	orrs	r3, r2
 8000538:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800053a:	f3bf 8f4f 	dsb	sy
}
 800053e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <__NVIC_SystemReset+0x20>
 8000544:	e000ed00 	.word	0xe000ed00
 8000548:	05fa0004 	.word	0x05fa0004

0800054c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fe6b 	bl	8000230 <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	3301      	adds	r3, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f00c fd00 	bl	800cf64 <malloc>
 8000564:	4603      	mov	r3, r0
 8000566:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <copyText+0x2a>
        strcpy(result, text);
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f00c fe63 	bl	800d23c <strcpy>
    }
    return result;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <menu>:
        }
    }
    return result;
}

void menu(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000584:	2101      	movs	r1, #1
 8000586:	488f      	ldr	r0, [pc, #572]	; (80007c4 <menu+0x244>)
 8000588:	f008 f976 	bl	8008878 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	f040 808e 	bne.w	80006b0 <menu+0x130>
 8000594:	4b8c      	ldr	r3, [pc, #560]	; (80007c8 <menu+0x248>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	f000 8086 	beq.w	80006b0 <menu+0x130>
		menuSayac = menuSayac+1;
 80005a4:	4b89      	ldr	r3, [pc, #548]	; (80007cc <menu+0x24c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b87      	ldr	r3, [pc, #540]	; (80007cc <menu+0x24c>)
 80005ae:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80005b0:	4b86      	ldr	r3, [pc, #536]	; (80007cc <menu+0x24c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b20      	cmp	r3, #32
 80005b6:	d102      	bne.n	80005be <menu+0x3e>
			menuSayac = 1;
 80005b8:	4b84      	ldr	r3, [pc, #528]	; (80007cc <menu+0x24c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80005be:	4b83      	ldr	r3, [pc, #524]	; (80007cc <menu+0x24c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b12      	cmp	r3, #18
 80005c4:	d106      	bne.n	80005d4 <menu+0x54>
 80005c6:	4b82      	ldr	r3, [pc, #520]	; (80007d0 <menu+0x250>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <menu+0x54>
			menuSayac = 21;
 80005ce:	4b7f      	ldr	r3, [pc, #508]	; (80007cc <menu+0x24c>)
 80005d0:	2215      	movs	r2, #21
 80005d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80005d4:	4b7d      	ldr	r3, [pc, #500]	; (80007cc <menu+0x24c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d106      	bne.n	80005ea <menu+0x6a>
 80005dc:	4b7d      	ldr	r3, [pc, #500]	; (80007d4 <menu+0x254>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <menu+0x6a>
			menuSayac = 16;
 80005e4:	4b79      	ldr	r3, [pc, #484]	; (80007cc <menu+0x24c>)
 80005e6:	2210      	movs	r2, #16
 80005e8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80005ea:	4b78      	ldr	r3, [pc, #480]	; (80007cc <menu+0x24c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b0d      	cmp	r3, #13
 80005f0:	d106      	bne.n	8000600 <menu+0x80>
 80005f2:	4b78      	ldr	r3, [pc, #480]	; (80007d4 <menu+0x254>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d102      	bne.n	8000600 <menu+0x80>
			menuSayac = 16;
 80005fa:	4b74      	ldr	r3, [pc, #464]	; (80007cc <menu+0x24c>)
 80005fc:	2210      	movs	r2, #16
 80005fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000600:	4b72      	ldr	r3, [pc, #456]	; (80007cc <menu+0x24c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b09      	cmp	r3, #9
 8000606:	d106      	bne.n	8000616 <menu+0x96>
 8000608:	4b72      	ldr	r3, [pc, #456]	; (80007d4 <menu+0x254>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d102      	bne.n	8000616 <menu+0x96>
			menuSayac = 13;
 8000610:	4b6e      	ldr	r3, [pc, #440]	; (80007cc <menu+0x24c>)
 8000612:	220d      	movs	r2, #13
 8000614:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000616:	4b6d      	ldr	r3, [pc, #436]	; (80007cc <menu+0x24c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d10a      	bne.n	8000634 <menu+0xb4>
 800061e:	4b6e      	ldr	r3, [pc, #440]	; (80007d8 <menu+0x258>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d003      	beq.n	800062e <menu+0xae>
 8000626:	4b6c      	ldr	r3, [pc, #432]	; (80007d8 <menu+0x258>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d102      	bne.n	8000634 <menu+0xb4>
			menuSayac = 11;
 800062e:	4b67      	ldr	r3, [pc, #412]	; (80007cc <menu+0x24c>)
 8000630:	220b      	movs	r2, #11
 8000632:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000634:	4b65      	ldr	r3, [pc, #404]	; (80007cc <menu+0x24c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b0c      	cmp	r3, #12
 800063a:	d10e      	bne.n	800065a <menu+0xda>
 800063c:	4b67      	ldr	r3, [pc, #412]	; (80007dc <menu+0x25c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d003      	beq.n	800064c <menu+0xcc>
 8000644:	4b65      	ldr	r3, [pc, #404]	; (80007dc <menu+0x25c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d106      	bne.n	800065a <menu+0xda>
 800064c:	4b61      	ldr	r3, [pc, #388]	; (80007d4 <menu+0x254>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d102      	bne.n	800065a <menu+0xda>
			menuSayac = 16;
 8000654:	4b5d      	ldr	r3, [pc, #372]	; (80007cc <menu+0x24c>)
 8000656:	2210      	movs	r2, #16
 8000658:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800065a:	4b5c      	ldr	r3, [pc, #368]	; (80007cc <menu+0x24c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b0c      	cmp	r3, #12
 8000660:	d10e      	bne.n	8000680 <menu+0x100>
 8000662:	4b5e      	ldr	r3, [pc, #376]	; (80007dc <menu+0x25c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d003      	beq.n	8000672 <menu+0xf2>
 800066a:	4b5c      	ldr	r3, [pc, #368]	; (80007dc <menu+0x25c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d106      	bne.n	8000680 <menu+0x100>
 8000672:	4b58      	ldr	r3, [pc, #352]	; (80007d4 <menu+0x254>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d102      	bne.n	8000680 <menu+0x100>
			menuSayac = 13;
 800067a:	4b54      	ldr	r3, [pc, #336]	; (80007cc <menu+0x24c>)
 800067c:	220d      	movs	r2, #13
 800067e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000680:	4b52      	ldr	r3, [pc, #328]	; (80007cc <menu+0x24c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d106      	bne.n	8000696 <menu+0x116>
 8000688:	4b55      	ldr	r3, [pc, #340]	; (80007e0 <menu+0x260>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d102      	bne.n	8000696 <menu+0x116>
			menuSayac = 16;
 8000690:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <menu+0x24c>)
 8000692:	2210      	movs	r2, #16
 8000694:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000696:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <menu+0x24c>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b18      	cmp	r3, #24
 800069c:	d106      	bne.n	80006ac <menu+0x12c>
 800069e:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <menu+0x250>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d102      	bne.n	80006ac <menu+0x12c>
			menuSayac = 26;
 80006a6:	4b49      	ldr	r3, [pc, #292]	; (80007cc <menu+0x24c>)
 80006a8:	221a      	movs	r2, #26
 80006aa:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80006ac:	f004 fadc 	bl	8004c68 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80006b0:	2108      	movs	r1, #8
 80006b2:	484c      	ldr	r0, [pc, #304]	; (80007e4 <menu+0x264>)
 80006b4:	f008 f8e0 	bl	8008878 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d175      	bne.n	80007aa <menu+0x22a>
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <menu+0x248>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f083 0301 	eor.w	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d06e      	beq.n	80007aa <menu+0x22a>
		if (menuSayac <= 1) {
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <menu+0x24c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d802      	bhi.n	80006da <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <menu+0x24c>)
 80006d6:	2220      	movs	r2, #32
 80006d8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80006da:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <menu+0x24c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <menu+0x24c>)
 80006e4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <menu+0x24c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b14      	cmp	r3, #20
 80006ec:	d106      	bne.n	80006fc <menu+0x17c>
 80006ee:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <menu+0x250>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <menu+0x17c>
			menuSayac = 17;
 80006f6:	4b35      	ldr	r3, [pc, #212]	; (80007cc <menu+0x24c>)
 80006f8:	2211      	movs	r2, #17
 80006fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80006fc:	4b33      	ldr	r3, [pc, #204]	; (80007cc <menu+0x24c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d106      	bne.n	8000712 <menu+0x192>
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <menu+0x254>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <menu+0x192>
			menuSayac = 7;
 800070c:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <menu+0x24c>)
 800070e:	2207      	movs	r2, #7
 8000710:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <menu+0x24c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b0f      	cmp	r3, #15
 8000718:	d106      	bne.n	8000728 <menu+0x1a8>
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <menu+0x254>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d102      	bne.n	8000728 <menu+0x1a8>
			menuSayac = 12;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <menu+0x24c>)
 8000724:	220c      	movs	r2, #12
 8000726:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <menu+0x24c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b0c      	cmp	r3, #12
 800072e:	d106      	bne.n	800073e <menu+0x1be>
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <menu+0x254>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d102      	bne.n	800073e <menu+0x1be>
			menuSayac = 8;
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <menu+0x24c>)
 800073a:	2208      	movs	r2, #8
 800073c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <menu+0x24c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b0a      	cmp	r3, #10
 8000744:	d10a      	bne.n	800075c <menu+0x1dc>
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <menu+0x258>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d003      	beq.n	8000756 <menu+0x1d6>
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <menu+0x258>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d102      	bne.n	800075c <menu+0x1dc>
			menuSayac = 9;
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <menu+0x24c>)
 8000758:	2209      	movs	r2, #9
 800075a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <menu+0x24c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b0c      	cmp	r3, #12
 8000762:	d10a      	bne.n	800077a <menu+0x1fa>
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <menu+0x25c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d003      	beq.n	8000774 <menu+0x1f4>
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <menu+0x25c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d102      	bne.n	800077a <menu+0x1fa>
			menuSayac = 11;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <menu+0x24c>)
 8000776:	220b      	movs	r2, #11
 8000778:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <menu+0x24c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b0f      	cmp	r3, #15
 8000780:	d106      	bne.n	8000790 <menu+0x210>
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <menu+0x260>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d102      	bne.n	8000790 <menu+0x210>
			menuSayac = 14;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <menu+0x24c>)
 800078c:	220e      	movs	r2, #14
 800078e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <menu+0x24c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b19      	cmp	r3, #25
 8000796:	d106      	bne.n	80007a6 <menu+0x226>
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <menu+0x250>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <menu+0x226>
			menuSayac = 23;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <menu+0x24c>)
 80007a2:	2217      	movs	r2, #23
 80007a4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80007a6:	f004 fa5f 	bl	8004c68 <bekle>
	}

	if (menuSayac == 0) {
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <menu+0x24c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d134      	bne.n	800081c <menu+0x29c>
		if(dilSecim == 0) {
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <menu+0x268>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d122      	bne.n	8000800 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <menu+0x26c>)
 80007bc:	2101      	movs	r1, #1
 80007be:	2001      	movs	r0, #1
 80007c0:	e016      	b.n	80007f0 <menu+0x270>
 80007c2:	bf00      	nop
 80007c4:	40010800 	.word	0x40010800
 80007c8:	20000cb2 	.word	0x20000cb2
 80007cc:	20000c84 	.word	0x20000c84
 80007d0:	20000c93 	.word	0x20000c93
 80007d4:	20000c8c 	.word	0x20000c8c
 80007d8:	20000c8d 	.word	0x20000c8d
 80007dc:	20000c8e 	.word	0x20000c8e
 80007e0:	20000c8f 	.word	0x20000c8f
 80007e4:	40011000 	.word	0x40011000
 80007e8:	20000ca4 	.word	0x20000ca4
 80007ec:	0800d9a8 	.word	0x0800d9a8
 80007f0:	f7ff fe65 	bl	80004be <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80007f4:	4a94      	ldr	r2, [pc, #592]	; (8000a48 <menu+0x4c8>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff fe60 	bl	80004be <lcd_print>
 80007fe:	e00d      	b.n	800081c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000800:	4b92      	ldr	r3, [pc, #584]	; (8000a4c <menu+0x4cc>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d109      	bne.n	800081c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000808:	4a91      	ldr	r2, [pc, #580]	; (8000a50 <menu+0x4d0>)
 800080a:	2101      	movs	r1, #1
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fe56 	bl	80004be <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000812:	4a90      	ldr	r2, [pc, #576]	; (8000a54 <menu+0x4d4>)
 8000814:	2101      	movs	r1, #1
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff fe51 	bl	80004be <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800081c:	4b8e      	ldr	r3, [pc, #568]	; (8000a58 <menu+0x4d8>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	f040 82b5 	bne.w	8000d90 <menu+0x810>
		if(dilSecim == 0) {
 8000826:	4b89      	ldr	r3, [pc, #548]	; (8000a4c <menu+0x4cc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d105      	bne.n	800083a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800082e:	4a8b      	ldr	r2, [pc, #556]	; (8000a5c <menu+0x4dc>)
 8000830:	2101      	movs	r1, #1
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fe43 	bl	80004be <lcd_print>
 8000838:	e008      	b.n	800084c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800083a:	4b84      	ldr	r3, [pc, #528]	; (8000a4c <menu+0x4cc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d104      	bne.n	800084c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000842:	4a87      	ldr	r2, [pc, #540]	; (8000a60 <menu+0x4e0>)
 8000844:	2101      	movs	r1, #1
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fe39 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800084c:	4b85      	ldr	r3, [pc, #532]	; (8000a64 <menu+0x4e4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d123      	bne.n	800089c <menu+0x31c>
			if(dilSecim == 0) {
 8000854:	4b7d      	ldr	r3, [pc, #500]	; (8000a4c <menu+0x4cc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d105      	bne.n	8000868 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800085c:	4a82      	ldr	r2, [pc, #520]	; (8000a68 <menu+0x4e8>)
 800085e:	2101      	movs	r1, #1
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fe2c 	bl	80004be <lcd_print>
 8000866:	e008      	b.n	800087a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000868:	4b78      	ldr	r3, [pc, #480]	; (8000a4c <menu+0x4cc>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d104      	bne.n	800087a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000870:	4a7e      	ldr	r2, [pc, #504]	; (8000a6c <menu+0x4ec>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fe22 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800087a:	4a7d      	ldr	r2, [pc, #500]	; (8000a70 <menu+0x4f0>)
 800087c:	210f      	movs	r1, #15
 800087e:	2002      	movs	r0, #2
 8000880:	f7ff fe1d 	bl	80004be <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000884:	4b7b      	ldr	r3, [pc, #492]	; (8000a74 <menu+0x4f4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	220a      	movs	r2, #10
 800088a:	497b      	ldr	r1, [pc, #492]	; (8000a78 <menu+0x4f8>)
 800088c:	4618      	mov	r0, r3
 800088e:	f00c fb67 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 8000892:	4a79      	ldr	r2, [pc, #484]	; (8000a78 <menu+0x4f8>)
 8000894:	210e      	movs	r1, #14
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff fe11 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800089c:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <menu+0x4e4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d123      	bne.n	80008ec <menu+0x36c>
			if(dilSecim == 0) {
 80008a4:	4b69      	ldr	r3, [pc, #420]	; (8000a4c <menu+0x4cc>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d105      	bne.n	80008b8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80008ac:	4a73      	ldr	r2, [pc, #460]	; (8000a7c <menu+0x4fc>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fe04 	bl	80004be <lcd_print>
 80008b6:	e008      	b.n	80008ca <menu+0x34a>
			} else if(dilSecim == 1) {
 80008b8:	4b64      	ldr	r3, [pc, #400]	; (8000a4c <menu+0x4cc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d104      	bne.n	80008ca <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80008c0:	4a6f      	ldr	r2, [pc, #444]	; (8000a80 <menu+0x500>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fdfa 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80008ca:	4a6e      	ldr	r2, [pc, #440]	; (8000a84 <menu+0x504>)
 80008cc:	210f      	movs	r1, #15
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff fdf5 	bl	80004be <lcd_print>
			itoa(hataKayit2, snum, 10);
 80008d4:	4b6c      	ldr	r3, [pc, #432]	; (8000a88 <menu+0x508>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	220a      	movs	r2, #10
 80008da:	4967      	ldr	r1, [pc, #412]	; (8000a78 <menu+0x4f8>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f00c fb3f 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 80008e2:	4a65      	ldr	r2, [pc, #404]	; (8000a78 <menu+0x4f8>)
 80008e4:	210e      	movs	r1, #14
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fde9 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 80008ec:	4b5d      	ldr	r3, [pc, #372]	; (8000a64 <menu+0x4e4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d123      	bne.n	800093c <menu+0x3bc>
			if(dilSecim == 0) {
 80008f4:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <menu+0x4cc>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d105      	bne.n	8000908 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80008fc:	4a63      	ldr	r2, [pc, #396]	; (8000a8c <menu+0x50c>)
 80008fe:	2101      	movs	r1, #1
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fddc 	bl	80004be <lcd_print>
 8000906:	e008      	b.n	800091a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000908:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <menu+0x4cc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000910:	4a5f      	ldr	r2, [pc, #380]	; (8000a90 <menu+0x510>)
 8000912:	2101      	movs	r1, #1
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fdd2 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800091a:	4a5a      	ldr	r2, [pc, #360]	; (8000a84 <menu+0x504>)
 800091c:	210f      	movs	r1, #15
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fdcd 	bl	80004be <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000924:	4b5b      	ldr	r3, [pc, #364]	; (8000a94 <menu+0x514>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	220a      	movs	r2, #10
 800092a:	4953      	ldr	r1, [pc, #332]	; (8000a78 <menu+0x4f8>)
 800092c:	4618      	mov	r0, r3
 800092e:	f00c fb17 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 8000932:	4a51      	ldr	r2, [pc, #324]	; (8000a78 <menu+0x4f8>)
 8000934:	210e      	movs	r1, #14
 8000936:	2002      	movs	r0, #2
 8000938:	f7ff fdc1 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800093c:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <menu+0x4e4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d123      	bne.n	800098c <menu+0x40c>
			if(dilSecim == 0) {
 8000944:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <menu+0x4cc>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d105      	bne.n	8000958 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800094c:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <menu+0x518>)
 800094e:	2101      	movs	r1, #1
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fdb4 	bl	80004be <lcd_print>
 8000956:	e008      	b.n	800096a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000958:	4b3c      	ldr	r3, [pc, #240]	; (8000a4c <menu+0x4cc>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d104      	bne.n	800096a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000960:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <menu+0x51c>)
 8000962:	2101      	movs	r1, #1
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fdaa 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <menu+0x504>)
 800096c:	210f      	movs	r1, #15
 800096e:	2002      	movs	r0, #2
 8000970:	f7ff fda5 	bl	80004be <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <menu+0x520>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	220a      	movs	r2, #10
 800097a:	493f      	ldr	r1, [pc, #252]	; (8000a78 <menu+0x4f8>)
 800097c:	4618      	mov	r0, r3
 800097e:	f00c faef 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 8000982:	4a3d      	ldr	r2, [pc, #244]	; (8000a78 <menu+0x4f8>)
 8000984:	210e      	movs	r1, #14
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fd99 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800098c:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <menu+0x4e4>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d123      	bne.n	80009dc <menu+0x45c>
			if(dilSecim == 0) {
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <menu+0x4cc>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d105      	bne.n	80009a8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800099c:	4a41      	ldr	r2, [pc, #260]	; (8000aa4 <menu+0x524>)
 800099e:	2101      	movs	r1, #1
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff fd8c 	bl	80004be <lcd_print>
 80009a6:	e008      	b.n	80009ba <menu+0x43a>
			} else if(dilSecim == 1) {
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <menu+0x4cc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d104      	bne.n	80009ba <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80009b0:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <menu+0x528>)
 80009b2:	2101      	movs	r1, #1
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff fd82 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80009ba:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <menu+0x504>)
 80009bc:	210f      	movs	r1, #15
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff fd7d 	bl	80004be <lcd_print>
			itoa(hataKayit5, snum, 10);
 80009c4:	4b39      	ldr	r3, [pc, #228]	; (8000aac <menu+0x52c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	220a      	movs	r2, #10
 80009ca:	492b      	ldr	r1, [pc, #172]	; (8000a78 <menu+0x4f8>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f00c fac7 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <menu+0x4f8>)
 80009d4:	210e      	movs	r1, #14
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff fd71 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <menu+0x4e4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	d123      	bne.n	8000a2c <menu+0x4ac>
			if(dilSecim == 0) {
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <menu+0x4cc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d105      	bne.n	80009f8 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80009ec:	4a30      	ldr	r2, [pc, #192]	; (8000ab0 <menu+0x530>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	2002      	movs	r0, #2
 80009f2:	f7ff fd64 	bl	80004be <lcd_print>
 80009f6:	e008      	b.n	8000a0a <menu+0x48a>
			} else if(dilSecim == 1) {
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <menu+0x4cc>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d104      	bne.n	8000a0a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000a00:	4a2c      	ldr	r2, [pc, #176]	; (8000ab4 <menu+0x534>)
 8000a02:	2101      	movs	r1, #1
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff fd5a 	bl	80004be <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <menu+0x504>)
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fd55 	bl	80004be <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <menu+0x538>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	220a      	movs	r2, #10
 8000a1a:	4917      	ldr	r1, [pc, #92]	; (8000a78 <menu+0x4f8>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00c fa9f 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <menu+0x4f8>)
 8000a24:	210e      	movs	r1, #14
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff fd49 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <menu+0x4e4>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b06      	cmp	r3, #6
 8000a32:	d15f      	bne.n	8000af4 <menu+0x574>
			if(dilSecim == 0) {
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <menu+0x4cc>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d141      	bne.n	8000ac0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <menu+0x53c>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff fd3c 	bl	80004be <lcd_print>
 8000a46:	e044      	b.n	8000ad2 <menu+0x552>
 8000a48:	0800d9bc 	.word	0x0800d9bc
 8000a4c:	20000ca4 	.word	0x20000ca4
 8000a50:	0800d9d0 	.word	0x0800d9d0
 8000a54:	0800d9e4 	.word	0x0800d9e4
 8000a58:	20000c84 	.word	0x20000c84
 8000a5c:	0800d9f8 	.word	0x0800d9f8
 8000a60:	0800da0c 	.word	0x0800da0c
 8000a64:	20000c86 	.word	0x20000c86
 8000a68:	0800da20 	.word	0x0800da20
 8000a6c:	0800da30 	.word	0x0800da30
 8000a70:	0800da40 	.word	0x0800da40
 8000a74:	20000ca5 	.word	0x20000ca5
 8000a78:	20000c58 	.word	0x20000c58
 8000a7c:	0800da44 	.word	0x0800da44
 8000a80:	0800da54 	.word	0x0800da54
 8000a84:	0800da64 	.word	0x0800da64
 8000a88:	20000ca6 	.word	0x20000ca6
 8000a8c:	0800da68 	.word	0x0800da68
 8000a90:	0800da78 	.word	0x0800da78
 8000a94:	20000ca7 	.word	0x20000ca7
 8000a98:	0800da88 	.word	0x0800da88
 8000a9c:	0800da98 	.word	0x0800da98
 8000aa0:	20000ca8 	.word	0x20000ca8
 8000aa4:	0800daa8 	.word	0x0800daa8
 8000aa8:	0800dab8 	.word	0x0800dab8
 8000aac:	20000ca9 	.word	0x20000ca9
 8000ab0:	0800dac8 	.word	0x0800dac8
 8000ab4:	0800dad8 	.word	0x0800dad8
 8000ab8:	20000caa 	.word	0x20000caa
 8000abc:	0800dae8 	.word	0x0800dae8
			} else if(dilSecim == 1) {
 8000ac0:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <menu+0x680>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d104      	bne.n	8000ad2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000ac8:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <menu+0x684>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff fcf6 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ad2:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <menu+0x688>)
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fcf1 	bl	80004be <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000adc:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <menu+0x68c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	494b      	ldr	r1, [pc, #300]	; (8000c10 <menu+0x690>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00c fa3b 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 8000aea:	4a49      	ldr	r2, [pc, #292]	; (8000c10 <menu+0x690>)
 8000aec:	210e      	movs	r1, #14
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fce5 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000af4:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <menu+0x694>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	d123      	bne.n	8000b44 <menu+0x5c4>
			if(dilSecim == 0) {
 8000afc:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <menu+0x680>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d105      	bne.n	8000b10 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000b04:	4a44      	ldr	r2, [pc, #272]	; (8000c18 <menu+0x698>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff fcd8 	bl	80004be <lcd_print>
 8000b0e:	e008      	b.n	8000b22 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000b10:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <menu+0x680>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d104      	bne.n	8000b22 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000b18:	4a40      	ldr	r2, [pc, #256]	; (8000c1c <menu+0x69c>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fcce 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b22:	4a39      	ldr	r2, [pc, #228]	; (8000c08 <menu+0x688>)
 8000b24:	210f      	movs	r1, #15
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff fcc9 	bl	80004be <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000b2c:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <menu+0x6a0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	220a      	movs	r2, #10
 8000b32:	4937      	ldr	r1, [pc, #220]	; (8000c10 <menu+0x690>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f00c fa13 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <menu+0x690>)
 8000b3c:	210e      	movs	r1, #14
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff fcbd 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <menu+0x694>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d123      	bne.n	8000b94 <menu+0x614>
			if(dilSecim == 0) {
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <menu+0x680>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d105      	bne.n	8000b60 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000b54:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <menu+0x6a4>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fcb0 	bl	80004be <lcd_print>
 8000b5e:	e008      	b.n	8000b72 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <menu+0x680>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d104      	bne.n	8000b72 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000b68:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <menu+0x6a8>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fca6 	bl	80004be <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b72:	4a25      	ldr	r2, [pc, #148]	; (8000c08 <menu+0x688>)
 8000b74:	210f      	movs	r1, #15
 8000b76:	2002      	movs	r0, #2
 8000b78:	f7ff fca1 	bl	80004be <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <menu+0x6ac>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	220a      	movs	r2, #10
 8000b82:	4923      	ldr	r1, [pc, #140]	; (8000c10 <menu+0x690>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00c f9eb 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 8000b8a:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <menu+0x690>)
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f7ff fc95 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <menu+0x694>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	d123      	bne.n	8000be4 <menu+0x664>
			if(dilSecim == 0) {
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <menu+0x680>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d105      	bne.n	8000bb0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000ba4:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <menu+0x6b0>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f7ff fc88 	bl	80004be <lcd_print>
 8000bae:	e008      	b.n	8000bc2 <menu+0x642>
			} else if(dilSecim == 1) {
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <menu+0x680>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d104      	bne.n	8000bc2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000bb8:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <menu+0x6b4>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff fc7e 	bl	80004be <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <menu+0x6b8>)
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fc79 	bl	80004be <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <menu+0x6bc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	490f      	ldr	r1, [pc, #60]	; (8000c10 <menu+0x690>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00c f9c3 	bl	800cf60 <itoa>
			lcd_print(2, 15, snum);
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <menu+0x690>)
 8000bdc:	210f      	movs	r1, #15
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff fc6d 	bl	80004be <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <menu+0x694>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b0a      	cmp	r3, #10
 8000bea:	d134      	bne.n	8000c56 <menu+0x6d6>
			if(dilSecim == 0) {
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <menu+0x680>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d127      	bne.n	8000c44 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <menu+0x6c0>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fc60 	bl	80004be <lcd_print>
 8000bfe:	e02a      	b.n	8000c56 <menu+0x6d6>
 8000c00:	20000ca4 	.word	0x20000ca4
 8000c04:	0800daf8 	.word	0x0800daf8
 8000c08:	0800da64 	.word	0x0800da64
 8000c0c:	20000cab 	.word	0x20000cab
 8000c10:	20000c58 	.word	0x20000c58
 8000c14:	20000c86 	.word	0x20000c86
 8000c18:	0800db08 	.word	0x0800db08
 8000c1c:	0800db18 	.word	0x0800db18
 8000c20:	20000cac 	.word	0x20000cac
 8000c24:	0800db28 	.word	0x0800db28
 8000c28:	0800db38 	.word	0x0800db38
 8000c2c:	20000cad 	.word	0x20000cad
 8000c30:	0800db48 	.word	0x0800db48
 8000c34:	0800db58 	.word	0x0800db58
 8000c38:	0800db68 	.word	0x0800db68
 8000c3c:	20000cae 	.word	0x20000cae
 8000c40:	0800db6c 	.word	0x0800db6c
			} else if(dilSecim == 1) {
 8000c44:	4b82      	ldr	r3, [pc, #520]	; (8000e50 <menu+0x8d0>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d104      	bne.n	8000c56 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000c4c:	4a81      	ldr	r2, [pc, #516]	; (8000e54 <menu+0x8d4>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2002      	movs	r0, #2
 8000c52:	f7ff fc34 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000c56:	2102      	movs	r1, #2
 8000c58:	487f      	ldr	r0, [pc, #508]	; (8000e58 <menu+0x8d8>)
 8000c5a:	f007 fe0d 	bl	8008878 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d119      	bne.n	8000c98 <menu+0x718>
 8000c64:	4b7d      	ldr	r3, [pc, #500]	; (8000e5c <menu+0x8dc>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f083 0301 	eor.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d012      	beq.n	8000c98 <menu+0x718>
 8000c72:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <menu+0x8e0>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10e      	bne.n	8000c98 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000c7a:	4b7a      	ldr	r3, [pc, #488]	; (8000e64 <menu+0x8e4>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b78      	ldr	r3, [pc, #480]	; (8000e64 <menu+0x8e4>)
 8000c84:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000c86:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <menu+0x8e4>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b0a      	cmp	r3, #10
 8000c8c:	d902      	bls.n	8000c94 <menu+0x714>
				hataGostermeSirasi = 0;
 8000c8e:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <menu+0x8e4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000c94:	f003 ffe8 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000c98:	2104      	movs	r1, #4
 8000c9a:	486f      	ldr	r0, [pc, #444]	; (8000e58 <menu+0x8d8>)
 8000c9c:	f007 fdec 	bl	8008878 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d119      	bne.n	8000cda <menu+0x75a>
 8000ca6:	4b6d      	ldr	r3, [pc, #436]	; (8000e5c <menu+0x8dc>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f083 0301 	eor.w	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d012      	beq.n	8000cda <menu+0x75a>
 8000cb4:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <menu+0x8e0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10e      	bne.n	8000cda <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000cbc:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <menu+0x8e4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <menu+0x8e4>)
 8000cc6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000cc8:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <menu+0x8e4>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b0b      	cmp	r3, #11
 8000cce:	d902      	bls.n	8000cd6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000cd0:	4b64      	ldr	r3, [pc, #400]	; (8000e64 <menu+0x8e4>)
 8000cd2:	220a      	movs	r2, #10
 8000cd4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000cd6:	f003 ffc7 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000cda:	2108      	movs	r1, #8
 8000cdc:	485e      	ldr	r0, [pc, #376]	; (8000e58 <menu+0x8d8>)
 8000cde:	f007 fdcb 	bl	8008878 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d153      	bne.n	8000d90 <menu+0x810>
 8000ce8:	4b5c      	ldr	r3, [pc, #368]	; (8000e5c <menu+0x8dc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d04c      	beq.n	8000d90 <menu+0x810>
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <menu+0x8e4>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	d148      	bne.n	8000d90 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <menu+0x8e8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	4b59      	ldr	r3, [pc, #356]	; (8000e6c <menu+0x8ec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000d0c:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <menu+0x8f0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <menu+0x8ec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000d1a:	4b56      	ldr	r3, [pc, #344]	; (8000e74 <menu+0x8f4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	4b52      	ldr	r3, [pc, #328]	; (8000e6c <menu+0x8ec>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000d28:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <menu+0x8f8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <menu+0x8ec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <menu+0x8fc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	; (8000e6c <menu+0x8ec>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000d44:	4b4e      	ldr	r3, [pc, #312]	; (8000e80 <menu+0x900>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <menu+0x8ec>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000d52:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <menu+0x904>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <menu+0x8ec>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000d60:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <menu+0x908>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <menu+0x8ec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <menu+0x90c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <menu+0x8ec>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <menu+0x910>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <menu+0x8ec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000d8a:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <menu+0x914>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000d90:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <menu+0x918>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	f040 80fc 	bne.w	8000f92 <menu+0xa12>
		if(dilSecim == 0) {
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <menu+0x8d0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d105      	bne.n	8000dae <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000da2:	4a3e      	ldr	r2, [pc, #248]	; (8000e9c <menu+0x91c>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fb89 	bl	80004be <lcd_print>
 8000dac:	e008      	b.n	8000dc0 <menu+0x840>
		} else if(dilSecim == 1) {
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <menu+0x8d0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d104      	bne.n	8000dc0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000db6:	4a3a      	ldr	r2, [pc, #232]	; (8000ea0 <menu+0x920>)
 8000db8:	2101      	movs	r1, #1
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fb7f 	bl	80004be <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <menu+0x8e0>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d003      	beq.n	8000dd0 <menu+0x850>
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <menu+0x8e0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d112      	bne.n	8000df6 <menu+0x876>
			if(dilSecim == 0) {
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <menu+0x8d0>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000dd8:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <menu+0x924>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff fb6e 	bl	80004be <lcd_print>
 8000de2:	e008      	b.n	8000df6 <menu+0x876>
			} else if(dilSecim == 1) {
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <menu+0x8d0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d104      	bne.n	8000df6 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000dec:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <menu+0x928>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff fb64 	bl	80004be <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <menu+0x92c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d116      	bne.n	8000e2c <menu+0x8ac>
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <menu+0x8e0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d112      	bne.n	8000e2c <menu+0x8ac>
			if(dilSecim == 0) {
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <menu+0x8d0>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000e0e:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <menu+0x930>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fb53 	bl	80004be <lcd_print>
 8000e18:	e008      	b.n	8000e2c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <menu+0x8d0>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d104      	bne.n	8000e2c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8000e22:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <menu+0x934>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff fb49 	bl	80004be <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <menu+0x92c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d14c      	bne.n	8000ece <menu+0x94e>
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <menu+0x8e0>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d148      	bne.n	8000ece <menu+0x94e>
			if(dilSecim == 0) {
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <menu+0x8d0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d13b      	bne.n	8000ebc <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <menu+0x938>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff fb38 	bl	80004be <lcd_print>
 8000e4e:	e03e      	b.n	8000ece <menu+0x94e>
 8000e50:	20000ca4 	.word	0x20000ca4
 8000e54:	0800db80 	.word	0x0800db80
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	20000cb2 	.word	0x20000cb2
 8000e60:	20000c93 	.word	0x20000c93
 8000e64:	20000c86 	.word	0x20000c86
 8000e68:	20000ca5 	.word	0x20000ca5
 8000e6c:	20000c18 	.word	0x20000c18
 8000e70:	20000ca6 	.word	0x20000ca6
 8000e74:	20000ca7 	.word	0x20000ca7
 8000e78:	20000ca8 	.word	0x20000ca8
 8000e7c:	20000ca9 	.word	0x20000ca9
 8000e80:	20000caa 	.word	0x20000caa
 8000e84:	20000cab 	.word	0x20000cab
 8000e88:	20000cac 	.word	0x20000cac
 8000e8c:	20000cad 	.word	0x20000cad
 8000e90:	20000cae 	.word	0x20000cae
 8000e94:	20000caf 	.word	0x20000caf
 8000e98:	20000c84 	.word	0x20000c84
 8000e9c:	0800db94 	.word	0x0800db94
 8000ea0:	0800dba8 	.word	0x0800dba8
 8000ea4:	0800dbbc 	.word	0x0800dbbc
 8000ea8:	0800dbd0 	.word	0x0800dbd0
 8000eac:	20000c85 	.word	0x20000c85
 8000eb0:	0800dbe4 	.word	0x0800dbe4
 8000eb4:	0800dbf4 	.word	0x0800dbf4
 8000eb8:	0800dc04 	.word	0x0800dc04
			} else if(dilSecim == 1) {
 8000ebc:	4b98      	ldr	r3, [pc, #608]	; (8001120 <menu+0xba0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d104      	bne.n	8000ece <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8000ec4:	4a97      	ldr	r2, [pc, #604]	; (8001124 <menu+0xba4>)
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f7ff faf8 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4895      	ldr	r0, [pc, #596]	; (8001128 <menu+0xba8>)
 8000ed2:	f007 fcd1 	bl	8008878 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d119      	bne.n	8000f10 <menu+0x990>
 8000edc:	4b93      	ldr	r3, [pc, #588]	; (800112c <menu+0xbac>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f083 0301 	eor.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d012      	beq.n	8000f10 <menu+0x990>
 8000eea:	4b91      	ldr	r3, [pc, #580]	; (8001130 <menu+0xbb0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10e      	bne.n	8000f10 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8000ef2:	4b90      	ldr	r3, [pc, #576]	; (8001134 <menu+0xbb4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b8e      	ldr	r3, [pc, #568]	; (8001134 <menu+0xbb4>)
 8000efc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <menu+0xbb4>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d902      	bls.n	8000f0c <menu+0x98c>
				calismaSekli = 0;
 8000f06:	4b8b      	ldr	r3, [pc, #556]	; (8001134 <menu+0xbb4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000f0c:	f003 feac 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000f10:	2104      	movs	r1, #4
 8000f12:	4885      	ldr	r0, [pc, #532]	; (8001128 <menu+0xba8>)
 8000f14:	f007 fcb0 	bl	8008878 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d119      	bne.n	8000f52 <menu+0x9d2>
 8000f1e:	4b83      	ldr	r3, [pc, #524]	; (800112c <menu+0xbac>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	f083 0301 	eor.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d012      	beq.n	8000f52 <menu+0x9d2>
 8000f2c:	4b80      	ldr	r3, [pc, #512]	; (8001130 <menu+0xbb0>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10e      	bne.n	8000f52 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8000f34:	4b7f      	ldr	r3, [pc, #508]	; (8001134 <menu+0xbb4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b7d      	ldr	r3, [pc, #500]	; (8001134 <menu+0xbb4>)
 8000f3e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8000f40:	4b7c      	ldr	r3, [pc, #496]	; (8001134 <menu+0xbb4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <menu+0x9ce>
	    		calismaSekli = 1;
 8000f48:	4b7a      	ldr	r3, [pc, #488]	; (8001134 <menu+0xbb4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000f4e:	f003 fe8b 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f52:	2108      	movs	r1, #8
 8000f54:	4874      	ldr	r0, [pc, #464]	; (8001128 <menu+0xba8>)
 8000f56:	f007 fc8f 	bl	8008878 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d118      	bne.n	8000f92 <menu+0xa12>
 8000f60:	4b72      	ldr	r3, [pc, #456]	; (800112c <menu+0xbac>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	f083 0301 	eor.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d011      	beq.n	8000f92 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <menu+0xbb4>)
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	4b71      	ldr	r3, [pc, #452]	; (8001138 <menu+0xbb8>)
 8000f74:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8000f76:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <menu+0xbb4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d106      	bne.n	8000f8c <menu+0xa0c>
				altLimit = 1;
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	; (800113c <menu+0xbbc>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8000f84:	4b6d      	ldr	r3, [pc, #436]	; (800113c <menu+0xbbc>)
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <menu+0xbb8>)
 8000f8a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8000f8c:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <menu+0xbc0>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8000f92:	4b6c      	ldr	r3, [pc, #432]	; (8001144 <menu+0xbc4>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	f040 8083 	bne.w	80010a2 <menu+0xb22>
		if(dilSecim == 0) {
 8000f9c:	4b60      	ldr	r3, [pc, #384]	; (8001120 <menu+0xba0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8000fa4:	4a68      	ldr	r2, [pc, #416]	; (8001148 <menu+0xbc8>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fa88 	bl	80004be <lcd_print>
 8000fae:	e008      	b.n	8000fc2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8000fb0:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <menu+0xba0>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d104      	bne.n	8000fc2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8000fb8:	4a64      	ldr	r2, [pc, #400]	; (800114c <menu+0xbcc>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff fa7e 	bl	80004be <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8000fc2:	4b63      	ldr	r3, [pc, #396]	; (8001150 <menu+0xbd0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d113      	bne.n	8000ff2 <menu+0xa72>
			if(dilSecim == 0) {
 8000fca:	4b55      	ldr	r3, [pc, #340]	; (8001120 <menu+0xba0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d105      	bne.n	8000fde <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8000fd2:	4a60      	ldr	r2, [pc, #384]	; (8001154 <menu+0xbd4>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff fa71 	bl	80004be <lcd_print>
 8000fdc:	e012      	b.n	8001004 <menu+0xa84>
			} else if(dilSecim == 1) {
 8000fde:	4b50      	ldr	r3, [pc, #320]	; (8001120 <menu+0xba0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10e      	bne.n	8001004 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <menu+0xbd8>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	2002      	movs	r0, #2
 8000fec:	f7ff fa67 	bl	80004be <lcd_print>
 8000ff0:	e008      	b.n	8001004 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <menu+0xbd0>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d104      	bne.n	8001004 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <menu+0xbdc>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff fa5d 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001004:	2102      	movs	r1, #2
 8001006:	4848      	ldr	r0, [pc, #288]	; (8001128 <menu+0xba8>)
 8001008:	f007 fc36 	bl	8008878 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d115      	bne.n	800103e <menu+0xabe>
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <menu+0xbac>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00e      	beq.n	800103e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001020:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <menu+0xbd0>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <menu+0xbd0>)
 800102a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <menu+0xbd0>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d902      	bls.n	800103a <menu+0xaba>
				emniyetCercevesi = 0;
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <menu+0xbd0>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800103a:	f003 fe15 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800103e:	2104      	movs	r1, #4
 8001040:	4839      	ldr	r0, [pc, #228]	; (8001128 <menu+0xba8>)
 8001042:	f007 fc19 	bl	8008878 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d115      	bne.n	8001078 <menu+0xaf8>
 800104c:	4b37      	ldr	r3, [pc, #220]	; (800112c <menu+0xbac>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f083 0301 	eor.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00e      	beq.n	8001078 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <menu+0xbd0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <menu+0xbd0>)
 8001064:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <menu+0xbd0>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <menu+0xbd0>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001074:	f003 fdf8 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001078:	2108      	movs	r1, #8
 800107a:	482b      	ldr	r0, [pc, #172]	; (8001128 <menu+0xba8>)
 800107c:	f007 fbfc 	bl	8008878 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10d      	bne.n	80010a2 <menu+0xb22>
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <menu+0xbac>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f083 0301 	eor.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <menu+0xbd0>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <menu+0xbb8>)
 800109a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <menu+0xbc0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <menu+0xbc4>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	f040 80ba 	bne.w	8001220 <menu+0xca0>
		if(dilSecim == 0) {
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <menu+0xba0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80010b4:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <menu+0xbe0>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff fa00 	bl	80004be <lcd_print>
 80010be:	e008      	b.n	80010d2 <menu+0xb52>
		} else if(dilSecim == 1) {
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <menu+0xba0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d104      	bne.n	80010d2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <menu+0xbe4>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff f9f6 	bl	80004be <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <menu+0xbe8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d113      	bne.n	8001102 <menu+0xb82>
			if(dilSecim == 0) {
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <menu+0xba0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <menu+0xbd4>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	2002      	movs	r0, #2
 80010e8:	f7ff f9e9 	bl	80004be <lcd_print>
 80010ec:	e049      	b.n	8001182 <menu+0xc02>
			} else if(dilSecim == 1) {
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <menu+0xba0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d145      	bne.n	8001182 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <menu+0xbd8>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff f9df 	bl	80004be <lcd_print>
 8001100:	e03f      	b.n	8001182 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <menu+0xbe8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d13b      	bne.n	8001182 <menu+0xc02>
			if(dilSecim == 0) {
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <menu+0xba0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d12e      	bne.n	8001170 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <menu+0xbec>)
 8001114:	2101      	movs	r1, #1
 8001116:	2002      	movs	r0, #2
 8001118:	f7ff f9d1 	bl	80004be <lcd_print>
 800111c:	e031      	b.n	8001182 <menu+0xc02>
 800111e:	bf00      	nop
 8001120:	20000ca4 	.word	0x20000ca4
 8001124:	0800dc14 	.word	0x0800dc14
 8001128:	40010800 	.word	0x40010800
 800112c:	20000cb2 	.word	0x20000cb2
 8001130:	20000c93 	.word	0x20000c93
 8001134:	20000c85 	.word	0x20000c85
 8001138:	20000c18 	.word	0x20000c18
 800113c:	20000c8a 	.word	0x20000c8a
 8001140:	20000caf 	.word	0x20000caf
 8001144:	20000c84 	.word	0x20000c84
 8001148:	0800dc24 	.word	0x0800dc24
 800114c:	0800dc38 	.word	0x0800dc38
 8001150:	20000c88 	.word	0x20000c88
 8001154:	0800dc4c 	.word	0x0800dc4c
 8001158:	0800dc60 	.word	0x0800dc60
 800115c:	0800dc74 	.word	0x0800dc74
 8001160:	0800dc84 	.word	0x0800dc84
 8001164:	0800dc98 	.word	0x0800dc98
 8001168:	20000c89 	.word	0x20000c89
 800116c:	0800dcac 	.word	0x0800dcac
			} else if(dilSecim == 1) {
 8001170:	4b92      	ldr	r3, [pc, #584]	; (80013bc <menu+0xe3c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d104      	bne.n	8001182 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001178:	4a91      	ldr	r2, [pc, #580]	; (80013c0 <menu+0xe40>)
 800117a:	2101      	movs	r1, #1
 800117c:	2002      	movs	r0, #2
 800117e:	f7ff f99e 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001182:	2102      	movs	r1, #2
 8001184:	488f      	ldr	r0, [pc, #572]	; (80013c4 <menu+0xe44>)
 8001186:	f007 fb77 	bl	8008878 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d115      	bne.n	80011bc <menu+0xc3c>
 8001190:	4b8d      	ldr	r3, [pc, #564]	; (80013c8 <menu+0xe48>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00e      	beq.n	80011bc <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 800119e:	4b8b      	ldr	r3, [pc, #556]	; (80013cc <menu+0xe4c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <menu+0xe4c>)
 80011a8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80011aa:	4b88      	ldr	r3, [pc, #544]	; (80013cc <menu+0xe4c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d902      	bls.n	80011b8 <menu+0xc38>
				yavaslamaLimit = 0;
 80011b2:	4b86      	ldr	r3, [pc, #536]	; (80013cc <menu+0xe4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80011b8:	f003 fd56 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80011bc:	2104      	movs	r1, #4
 80011be:	4881      	ldr	r0, [pc, #516]	; (80013c4 <menu+0xe44>)
 80011c0:	f007 fb5a 	bl	8008878 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d115      	bne.n	80011f6 <menu+0xc76>
 80011ca:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <menu+0xe48>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00e      	beq.n	80011f6 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80011d8:	4b7c      	ldr	r3, [pc, #496]	; (80013cc <menu+0xe4c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b7a      	ldr	r3, [pc, #488]	; (80013cc <menu+0xe4c>)
 80011e2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <menu+0xe4c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80011ec:	4b77      	ldr	r3, [pc, #476]	; (80013cc <menu+0xe4c>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80011f2:	f003 fd39 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80011f6:	2108      	movs	r1, #8
 80011f8:	4872      	ldr	r0, [pc, #456]	; (80013c4 <menu+0xe44>)
 80011fa:	f007 fb3d 	bl	8008878 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b01      	cmp	r3, #1
 8001202:	d10d      	bne.n	8001220 <menu+0xca0>
 8001204:	4b70      	ldr	r3, [pc, #448]	; (80013c8 <menu+0xe48>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f083 0301 	eor.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001212:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <menu+0xe4c>)
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <menu+0xe50>)
 8001218:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800121a:	4b6e      	ldr	r3, [pc, #440]	; (80013d4 <menu+0xe54>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <menu+0xe58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b05      	cmp	r3, #5
 8001226:	f040 80b9 	bne.w	800139c <menu+0xe1c>
		if(dilSecim == 0) {
 800122a:	4b64      	ldr	r3, [pc, #400]	; (80013bc <menu+0xe3c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001232:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <menu+0xe5c>)
 8001234:	2101      	movs	r1, #1
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff f941 	bl	80004be <lcd_print>
 800123c:	e008      	b.n	8001250 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <menu+0xe3c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d104      	bne.n	8001250 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001246:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <menu+0xe60>)
 8001248:	2101      	movs	r1, #1
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff f937 	bl	80004be <lcd_print>
		}

		if(altLimit == 0) {
 8001250:	4b64      	ldr	r3, [pc, #400]	; (80013e4 <menu+0xe64>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d113      	bne.n	8001280 <menu+0xd00>
			if(dilSecim == 0) {
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <menu+0xe3c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001260:	4a61      	ldr	r2, [pc, #388]	; (80013e8 <menu+0xe68>)
 8001262:	2101      	movs	r1, #1
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff f92a 	bl	80004be <lcd_print>
 800126a:	e020      	b.n	80012ae <menu+0xd2e>
			} else if(dilSecim == 1) {
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <menu+0xe3c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d11c      	bne.n	80012ae <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001274:	4a5d      	ldr	r2, [pc, #372]	; (80013ec <menu+0xe6c>)
 8001276:	2101      	movs	r1, #1
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff f920 	bl	80004be <lcd_print>
 800127e:	e016      	b.n	80012ae <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001280:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <menu+0xe64>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d112      	bne.n	80012ae <menu+0xd2e>
			if(dilSecim == 0){
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <menu+0xe3c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001290:	4a57      	ldr	r2, [pc, #348]	; (80013f0 <menu+0xe70>)
 8001292:	2101      	movs	r1, #1
 8001294:	2002      	movs	r0, #2
 8001296:	f7ff f912 	bl	80004be <lcd_print>
 800129a:	e008      	b.n	80012ae <menu+0xd2e>
			} else if(dilSecim == 1){
 800129c:	4b47      	ldr	r3, [pc, #284]	; (80013bc <menu+0xe3c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80012a4:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <menu+0xe40>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff f908 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80012ae:	2102      	movs	r1, #2
 80012b0:	4844      	ldr	r0, [pc, #272]	; (80013c4 <menu+0xe44>)
 80012b2:	f007 fae1 	bl	8008878 <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d119      	bne.n	80012f0 <menu+0xd70>
 80012bc:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <menu+0xe48>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f083 0301 	eor.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d012      	beq.n	80012f0 <menu+0xd70>
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <menu+0xe74>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10e      	bne.n	80012f0 <menu+0xd70>
			altLimit = altLimit + 1;
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <menu+0xe64>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <menu+0xe64>)
 80012dc:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <menu+0xe64>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d902      	bls.n	80012ec <menu+0xd6c>
				altLimit = 0;
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <menu+0xe64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80012ec:	f003 fcbc 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80012f0:	2104      	movs	r1, #4
 80012f2:	4834      	ldr	r0, [pc, #208]	; (80013c4 <menu+0xe44>)
 80012f4:	f007 fac0 	bl	8008878 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d119      	bne.n	8001332 <menu+0xdb2>
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <menu+0xe48>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f083 0301 	eor.w	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d012      	beq.n	8001332 <menu+0xdb2>
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <menu+0xe74>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10e      	bne.n	8001332 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <menu+0xe64>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <menu+0xe64>)
 800131e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <menu+0xe64>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <menu+0xdae>
		   		altLimit = 1;
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <menu+0xe64>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800132e:	f003 fc9b 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001332:	2108      	movs	r1, #8
 8001334:	4823      	ldr	r0, [pc, #140]	; (80013c4 <menu+0xe44>)
 8001336:	f007 fa9f 	bl	8008878 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d12d      	bne.n	800139c <menu+0xe1c>
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <menu+0xe48>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d026      	beq.n	800139c <menu+0xe1c>
			eepromData[5] = altLimit;
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <menu+0xe64>)
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <menu+0xe50>)
 8001354:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <menu+0xe64>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d110      	bne.n	8001380 <menu+0xe00>
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <menu+0xe78>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <menu+0xdee>
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <menu+0xe78>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d108      	bne.n	8001380 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <menu+0xe78>)
 8001370:	2203      	movs	r2, #3
 8001372:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <menu+0xe78>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <menu+0xe50>)
 800137a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800137e:	e00a      	b.n	8001396 <menu+0xe16>
			} else if(altLimit == 0) {
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <menu+0xe64>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <menu+0xe16>
				platformSilindirTipi = 0;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <menu+0xe7c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <menu+0xe7c>)
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <menu+0xe50>)
 8001394:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <menu+0xe54>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <menu+0xe58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	f040 80b6 	bne.w	8001512 <menu+0xf92>
		if(dilSecim == 0) {
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <menu+0xe3c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d12a      	bne.n	8001404 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <menu+0xe80>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff f883 	bl	80004be <lcd_print>
 80013b8:	e02d      	b.n	8001416 <menu+0xe96>
 80013ba:	bf00      	nop
 80013bc:	20000ca4 	.word	0x20000ca4
 80013c0:	0800dcc0 	.word	0x0800dcc0
 80013c4:	40010800 	.word	0x40010800
 80013c8:	20000cb2 	.word	0x20000cb2
 80013cc:	20000c89 	.word	0x20000c89
 80013d0:	20000c18 	.word	0x20000c18
 80013d4:	20000caf 	.word	0x20000caf
 80013d8:	20000c84 	.word	0x20000c84
 80013dc:	0800dcd4 	.word	0x0800dcd4
 80013e0:	0800dce8 	.word	0x0800dce8
 80013e4:	20000c8a 	.word	0x20000c8a
 80013e8:	0800dc4c 	.word	0x0800dc4c
 80013ec:	0800dc60 	.word	0x0800dc60
 80013f0:	0800dcac 	.word	0x0800dcac
 80013f4:	20000c85 	.word	0x20000c85
 80013f8:	20000c91 	.word	0x20000c91
 80013fc:	20000c97 	.word	0x20000c97
 8001400:	0800dcfc 	.word	0x0800dcfc
		} else if(dilSecim == 1){
 8001404:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <menu+0x1070>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d104      	bne.n	8001416 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800140c:	4a79      	ldr	r2, [pc, #484]	; (80015f4 <menu+0x1074>)
 800140e:	2101      	movs	r1, #1
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff f854 	bl	80004be <lcd_print>
		}
		if(basincSalteri == 0){
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <menu+0x1078>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d113      	bne.n	8001446 <menu+0xec6>
			if(dilSecim == 0) {
 800141e:	4b74      	ldr	r3, [pc, #464]	; (80015f0 <menu+0x1070>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001426:	4a75      	ldr	r2, [pc, #468]	; (80015fc <menu+0x107c>)
 8001428:	2101      	movs	r1, #1
 800142a:	2002      	movs	r0, #2
 800142c:	f7ff f847 	bl	80004be <lcd_print>
 8001430:	e020      	b.n	8001474 <menu+0xef4>
			} else if(dilSecim == 1){
 8001432:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <menu+0x1070>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d11c      	bne.n	8001474 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800143a:	4a71      	ldr	r2, [pc, #452]	; (8001600 <menu+0x1080>)
 800143c:	2101      	movs	r1, #1
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff f83d 	bl	80004be <lcd_print>
 8001444:	e016      	b.n	8001474 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001446:	4b6c      	ldr	r3, [pc, #432]	; (80015f8 <menu+0x1078>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d112      	bne.n	8001474 <menu+0xef4>
			if(dilSecim == 0) {
 800144e:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <menu+0x1070>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d105      	bne.n	8001462 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001456:	4a6b      	ldr	r2, [pc, #428]	; (8001604 <menu+0x1084>)
 8001458:	2101      	movs	r1, #1
 800145a:	2002      	movs	r0, #2
 800145c:	f7ff f82f 	bl	80004be <lcd_print>
 8001460:	e008      	b.n	8001474 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <menu+0x1070>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d104      	bne.n	8001474 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800146a:	4a67      	ldr	r2, [pc, #412]	; (8001608 <menu+0x1088>)
 800146c:	2101      	movs	r1, #1
 800146e:	2002      	movs	r0, #2
 8001470:	f7ff f825 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001474:	2102      	movs	r1, #2
 8001476:	4865      	ldr	r0, [pc, #404]	; (800160c <menu+0x108c>)
 8001478:	f007 f9fe 	bl	8008878 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d115      	bne.n	80014ae <menu+0xf2e>
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <menu+0x1090>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00e      	beq.n	80014ae <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <menu+0x1078>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <menu+0x1078>)
 800149a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800149c:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <menu+0x1078>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d902      	bls.n	80014aa <menu+0xf2a>
				basincSalteri = 0;
 80014a4:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <menu+0x1078>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80014aa:	f003 fbdd 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80014ae:	2104      	movs	r1, #4
 80014b0:	4856      	ldr	r0, [pc, #344]	; (800160c <menu+0x108c>)
 80014b2:	f007 f9e1 	bl	8008878 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d115      	bne.n	80014e8 <menu+0xf68>
 80014bc:	4b54      	ldr	r3, [pc, #336]	; (8001610 <menu+0x1090>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f083 0301 	eor.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00e      	beq.n	80014e8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <menu+0x1078>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <menu+0x1078>)
 80014d4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <menu+0x1078>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <menu+0xf64>
		   		basincSalteri = 1;
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <menu+0x1078>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80014e4:	f003 fbc0 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80014e8:	2108      	movs	r1, #8
 80014ea:	4848      	ldr	r0, [pc, #288]	; (800160c <menu+0x108c>)
 80014ec:	f007 f9c4 	bl	8008878 <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10d      	bne.n	8001512 <menu+0xf92>
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <menu+0x1090>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <menu+0x1078>)
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <menu+0x1094>)
 800150a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <menu+0x1098>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <menu+0x109c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b07      	cmp	r3, #7
 8001518:	f040 80f5 	bne.w	8001706 <menu+0x1186>
		if(dilSecim == 0) {
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <menu+0x1070>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8001524:	4a3e      	ldr	r2, [pc, #248]	; (8001620 <menu+0x10a0>)
 8001526:	2101      	movs	r1, #1
 8001528:	2001      	movs	r0, #1
 800152a:	f7fe ffc8 	bl	80004be <lcd_print>
 800152e:	e008      	b.n	8001542 <menu+0xfc2>
		} else if(dilSecim == 1){
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <menu+0x1070>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d104      	bne.n	8001542 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001538:	4a3a      	ldr	r2, [pc, #232]	; (8001624 <menu+0x10a4>)
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	f7fe ffbe 	bl	80004be <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <menu+0x10a8>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d113      	bne.n	8001572 <menu+0xff2>
			if(dilSecim == 0) {
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <menu+0x1070>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8001552:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <menu+0x107c>)
 8001554:	2101      	movs	r1, #1
 8001556:	2002      	movs	r0, #2
 8001558:	f7fe ffb1 	bl	80004be <lcd_print>
 800155c:	e079      	b.n	8001652 <menu+0x10d2>
			} else if(dilSecim == 1){
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <menu+0x1070>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d175      	bne.n	8001652 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8001566:	4a26      	ldr	r2, [pc, #152]	; (8001600 <menu+0x1080>)
 8001568:	2101      	movs	r1, #1
 800156a:	2002      	movs	r0, #2
 800156c:	f7fe ffa7 	bl	80004be <lcd_print>
 8001570:	e06f      	b.n	8001652 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <menu+0x10a8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d113      	bne.n	80015a2 <menu+0x1022>
			if(dilSecim == 0) {
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <menu+0x1070>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d105      	bne.n	800158e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001582:	4a2a      	ldr	r2, [pc, #168]	; (800162c <menu+0x10ac>)
 8001584:	2101      	movs	r1, #1
 8001586:	2002      	movs	r0, #2
 8001588:	f7fe ff99 	bl	80004be <lcd_print>
 800158c:	e061      	b.n	8001652 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <menu+0x1070>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d15d      	bne.n	8001652 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8001596:	4a26      	ldr	r2, [pc, #152]	; (8001630 <menu+0x10b0>)
 8001598:	2101      	movs	r1, #1
 800159a:	2002      	movs	r0, #2
 800159c:	f7fe ff8f 	bl	80004be <lcd_print>
 80015a0:	e057      	b.n	8001652 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <menu+0x10a8>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d113      	bne.n	80015d2 <menu+0x1052>
			if(dilSecim == 0) {
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <menu+0x1070>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <menu+0x10b4>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7fe ff81 	bl	80004be <lcd_print>
 80015bc:	e049      	b.n	8001652 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <menu+0x1070>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d145      	bne.n	8001652 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <menu+0x10b8>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	2002      	movs	r0, #2
 80015cc:	f7fe ff77 	bl	80004be <lcd_print>
 80015d0:	e03f      	b.n	8001652 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <menu+0x10a8>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d13b      	bne.n	8001652 <menu+0x10d2>
			if(dilSecim == 0) {
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <menu+0x1070>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d12e      	bne.n	8001640 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <menu+0x10bc>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7fe ff69 	bl	80004be <lcd_print>
 80015ec:	e031      	b.n	8001652 <menu+0x10d2>
 80015ee:	bf00      	nop
 80015f0:	20000ca4 	.word	0x20000ca4
 80015f4:	0800dd0c 	.word	0x0800dd0c
 80015f8:	20000c8b 	.word	0x20000c8b
 80015fc:	0800dc4c 	.word	0x0800dc4c
 8001600:	0800dc60 	.word	0x0800dc60
 8001604:	0800dcac 	.word	0x0800dcac
 8001608:	0800dcc0 	.word	0x0800dcc0
 800160c:	40010800 	.word	0x40010800
 8001610:	20000cb2 	.word	0x20000cb2
 8001614:	20000c18 	.word	0x20000c18
 8001618:	20000caf 	.word	0x20000caf
 800161c:	20000c84 	.word	0x20000c84
 8001620:	0800dd1c 	.word	0x0800dd1c
 8001624:	0800dd30 	.word	0x0800dd30
 8001628:	20000c8c 	.word	0x20000c8c
 800162c:	0800dd44 	.word	0x0800dd44
 8001630:	0800dd58 	.word	0x0800dd58
 8001634:	0800dd6c 	.word	0x0800dd6c
 8001638:	0800dd80 	.word	0x0800dd80
 800163c:	0800dd94 	.word	0x0800dd94
			} else if(dilSecim == 1){
 8001640:	4b99      	ldr	r3, [pc, #612]	; (80018a8 <menu+0x1328>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d104      	bne.n	8001652 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001648:	4a98      	ldr	r2, [pc, #608]	; (80018ac <menu+0x132c>)
 800164a:	2101      	movs	r1, #1
 800164c:	2002      	movs	r0, #2
 800164e:	f7fe ff36 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001652:	2102      	movs	r1, #2
 8001654:	4896      	ldr	r0, [pc, #600]	; (80018b0 <menu+0x1330>)
 8001656:	f007 f90f 	bl	8008878 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	d115      	bne.n	800168c <menu+0x110c>
 8001660:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <menu+0x1334>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	f083 0301 	eor.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00e      	beq.n	800168c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <menu+0x1338>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b90      	ldr	r3, [pc, #576]	; (80018b8 <menu+0x1338>)
 8001678:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800167a:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <menu+0x1338>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d902      	bls.n	8001688 <menu+0x1108>
				kapiSecimleri = 0;
 8001682:	4b8d      	ldr	r3, [pc, #564]	; (80018b8 <menu+0x1338>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001688:	f003 faee 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800168c:	2104      	movs	r1, #4
 800168e:	4888      	ldr	r0, [pc, #544]	; (80018b0 <menu+0x1330>)
 8001690:	f007 f8f2 	bl	8008878 <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	2b01      	cmp	r3, #1
 8001698:	d115      	bne.n	80016c6 <menu+0x1146>
 800169a:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <menu+0x1334>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f083 0301 	eor.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00e      	beq.n	80016c6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80016a8:	4b83      	ldr	r3, [pc, #524]	; (80018b8 <menu+0x1338>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <menu+0x1338>)
 80016b2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80016b4:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <menu+0x1338>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d902      	bls.n	80016c2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80016bc:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <menu+0x1338>)
 80016be:	2203      	movs	r2, #3
 80016c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80016c2:	f003 fad1 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80016c6:	2108      	movs	r1, #8
 80016c8:	4879      	ldr	r0, [pc, #484]	; (80018b0 <menu+0x1330>)
 80016ca:	f007 f8d5 	bl	8008878 <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d118      	bne.n	8001706 <menu+0x1186>
 80016d4:	4b77      	ldr	r3, [pc, #476]	; (80018b4 <menu+0x1334>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d011      	beq.n	8001706 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80016e2:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <menu+0x1338>)
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	4b75      	ldr	r3, [pc, #468]	; (80018bc <menu+0x133c>)
 80016e8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <menu+0x1338>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <menu+0x1180>
				altLimit = 1;
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <menu+0x1340>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80016f8:	4b71      	ldr	r3, [pc, #452]	; (80018c0 <menu+0x1340>)
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <menu+0x133c>)
 80016fe:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <menu+0x1344>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001706:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <menu+0x1348>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b08      	cmp	r3, #8
 800170c:	f040 8092 	bne.w	8001834 <menu+0x12b4>
		if(dilSecim == 0) {
 8001710:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <menu+0x1328>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001718:	4a6c      	ldr	r2, [pc, #432]	; (80018cc <menu+0x134c>)
 800171a:	2101      	movs	r1, #1
 800171c:	2001      	movs	r0, #1
 800171e:	f7fe fece 	bl	80004be <lcd_print>
 8001722:	e008      	b.n	8001736 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001724:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <menu+0x1328>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d104      	bne.n	8001736 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800172c:	4a68      	ldr	r2, [pc, #416]	; (80018d0 <menu+0x1350>)
 800172e:	2101      	movs	r1, #1
 8001730:	2001      	movs	r0, #1
 8001732:	f7fe fec4 	bl	80004be <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <menu+0x1354>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d113      	bne.n	8001766 <menu+0x11e6>
			if(dilSecim == 0) {
 800173e:	4b5a      	ldr	r3, [pc, #360]	; (80018a8 <menu+0x1328>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d105      	bne.n	8001752 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001746:	4a64      	ldr	r2, [pc, #400]	; (80018d8 <menu+0x1358>)
 8001748:	2101      	movs	r1, #1
 800174a:	2002      	movs	r0, #2
 800174c:	f7fe feb7 	bl	80004be <lcd_print>
 8001750:	e020      	b.n	8001794 <menu+0x1214>
			} else if(dilSecim == 1) {
 8001752:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <menu+0x1328>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d11c      	bne.n	8001794 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800175a:	4a60      	ldr	r2, [pc, #384]	; (80018dc <menu+0x135c>)
 800175c:	2101      	movs	r1, #1
 800175e:	2002      	movs	r0, #2
 8001760:	f7fe fead 	bl	80004be <lcd_print>
 8001764:	e016      	b.n	8001794 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <menu+0x1354>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d112      	bne.n	8001794 <menu+0x1214>
			if(dilSecim == 0){
 800176e:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <menu+0x1328>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <menu+0x1360>)
 8001778:	2101      	movs	r1, #1
 800177a:	2002      	movs	r0, #2
 800177c:	f7fe fe9f 	bl	80004be <lcd_print>
 8001780:	e008      	b.n	8001794 <menu+0x1214>
			} else if(dilSecim == 1){
 8001782:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <menu+0x1328>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d104      	bne.n	8001794 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800178a:	4a56      	ldr	r2, [pc, #344]	; (80018e4 <menu+0x1364>)
 800178c:	2101      	movs	r1, #1
 800178e:	2002      	movs	r0, #2
 8001790:	f7fe fe95 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001794:	2102      	movs	r1, #2
 8001796:	4846      	ldr	r0, [pc, #280]	; (80018b0 <menu+0x1330>)
 8001798:	f007 f86e 	bl	8008878 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d115      	bne.n	80017ce <menu+0x124e>
 80017a2:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <menu+0x1334>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f083 0301 	eor.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00e      	beq.n	80017ce <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80017b0:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <menu+0x1354>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <menu+0x1354>)
 80017ba:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80017bc:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <menu+0x1354>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d902      	bls.n	80017ca <menu+0x124a>
				kapiAcTipi = 0;
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <menu+0x1354>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017ca:	f003 fa4d 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80017ce:	2104      	movs	r1, #4
 80017d0:	4837      	ldr	r0, [pc, #220]	; (80018b0 <menu+0x1330>)
 80017d2:	f007 f851 	bl	8008878 <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d115      	bne.n	8001808 <menu+0x1288>
 80017dc:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <menu+0x1334>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00e      	beq.n	8001808 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <menu+0x1354>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <menu+0x1354>)
 80017f4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <menu+0x1354>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <menu+0x1284>
		   		kapiAcTipi = 1;
 80017fe:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <menu+0x1354>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001804:	f003 fa30 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001808:	2108      	movs	r1, #8
 800180a:	4829      	ldr	r0, [pc, #164]	; (80018b0 <menu+0x1330>)
 800180c:	f007 f834 	bl	8008878 <HAL_GPIO_ReadPin>
 8001810:	4603      	mov	r3, r0
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10e      	bne.n	8001834 <menu+0x12b4>
 8001816:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <menu+0x1334>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	f083 0301 	eor.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <menu+0x1354>)
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <menu+0x133c>)
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <menu+0x1344>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <menu+0x1348>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b09      	cmp	r3, #9
 800183a:	f040 80b9 	bne.w	80019b0 <menu+0x1430>
		if(dilSecim == 0){
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <menu+0x1328>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001846:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <menu+0x1368>)
 8001848:	2101      	movs	r1, #1
 800184a:	2001      	movs	r0, #1
 800184c:	f7fe fe37 	bl	80004be <lcd_print>
 8001850:	e008      	b.n	8001864 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <menu+0x1328>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d104      	bne.n	8001864 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800185a:	4a24      	ldr	r2, [pc, #144]	; (80018ec <menu+0x136c>)
 800185c:	2101      	movs	r1, #1
 800185e:	2001      	movs	r0, #1
 8001860:	f7fe fe2d 	bl	80004be <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <menu+0x1370>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <menu+0x1374>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f7fe fe24 	bl	80004be <lcd_print>
 8001876:	e04c      	b.n	8001912 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <menu+0x1370>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d13f      	bne.n	8001900 <menu+0x1380>
			if(dilSecim == 0){
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <menu+0x1328>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <menu+0x1378>)
 800188a:	2101      	movs	r1, #1
 800188c:	2002      	movs	r0, #2
 800188e:	f7fe fe16 	bl	80004be <lcd_print>
 8001892:	e03e      	b.n	8001912 <menu+0x1392>
			} else if(dilSecim == 1) {
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <menu+0x1328>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d13a      	bne.n	8001912 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800189c:	4a17      	ldr	r2, [pc, #92]	; (80018fc <menu+0x137c>)
 800189e:	2101      	movs	r1, #1
 80018a0:	2002      	movs	r0, #2
 80018a2:	f7fe fe0c 	bl	80004be <lcd_print>
 80018a6:	e034      	b.n	8001912 <menu+0x1392>
 80018a8:	20000ca4 	.word	0x20000ca4
 80018ac:	0800dda8 	.word	0x0800dda8
 80018b0:	40010800 	.word	0x40010800
 80018b4:	20000cb2 	.word	0x20000cb2
 80018b8:	20000c8c 	.word	0x20000c8c
 80018bc:	20000c18 	.word	0x20000c18
 80018c0:	20000c8a 	.word	0x20000c8a
 80018c4:	20000caf 	.word	0x20000caf
 80018c8:	20000c84 	.word	0x20000c84
 80018cc:	0800ddbc 	.word	0x0800ddbc
 80018d0:	0800ddd0 	.word	0x0800ddd0
 80018d4:	20000c90 	.word	0x20000c90
 80018d8:	0800dde4 	.word	0x0800dde4
 80018dc:	0800ddf4 	.word	0x0800ddf4
 80018e0:	0800de04 	.word	0x0800de04
 80018e4:	0800de18 	.word	0x0800de18
 80018e8:	0800de2c 	.word	0x0800de2c
 80018ec:	0800de40 	.word	0x0800de40
 80018f0:	20000c8d 	.word	0x20000c8d
 80018f4:	0800de54 	.word	0x0800de54
 80018f8:	0800de68 	.word	0x0800de68
 80018fc:	0800de78 	.word	0x0800de78
			}
		} else if(kapi1Tip == 2) {
 8001900:	4b8a      	ldr	r3, [pc, #552]	; (8001b2c <menu+0x15ac>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d104      	bne.n	8001912 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001908:	4a89      	ldr	r2, [pc, #548]	; (8001b30 <menu+0x15b0>)
 800190a:	2101      	movs	r1, #1
 800190c:	2002      	movs	r0, #2
 800190e:	f7fe fdd6 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001912:	2102      	movs	r1, #2
 8001914:	4887      	ldr	r0, [pc, #540]	; (8001b34 <menu+0x15b4>)
 8001916:	f006 ffaf 	bl	8008878 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d115      	bne.n	800194c <menu+0x13cc>
 8001920:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <menu+0x15b8>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f083 0301 	eor.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00e      	beq.n	800194c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800192e:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <menu+0x15ac>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <menu+0x15ac>)
 8001938:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800193a:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <menu+0x15ac>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d902      	bls.n	8001948 <menu+0x13c8>
				kapi1Tip = 0;
 8001942:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <menu+0x15ac>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001948:	f003 f98e 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800194c:	2104      	movs	r1, #4
 800194e:	4879      	ldr	r0, [pc, #484]	; (8001b34 <menu+0x15b4>)
 8001950:	f006 ff92 	bl	8008878 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d115      	bne.n	8001986 <menu+0x1406>
 800195a:	4b77      	ldr	r3, [pc, #476]	; (8001b38 <menu+0x15b8>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f083 0301 	eor.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001968:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <menu+0x15ac>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <menu+0x15ac>)
 8001972:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001974:	4b6d      	ldr	r3, [pc, #436]	; (8001b2c <menu+0x15ac>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d902      	bls.n	8001982 <menu+0x1402>
		   		kapi1Tip = 2;
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <menu+0x15ac>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001982:	f003 f971 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001986:	2108      	movs	r1, #8
 8001988:	486a      	ldr	r0, [pc, #424]	; (8001b34 <menu+0x15b4>)
 800198a:	f006 ff75 	bl	8008878 <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10d      	bne.n	80019b0 <menu+0x1430>
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <menu+0x15b8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80019a2:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <menu+0x15ac>)
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <menu+0x15bc>)
 80019a8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80019aa:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <menu+0x15c0>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80019b0:	4b64      	ldr	r3, [pc, #400]	; (8001b44 <menu+0x15c4>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d17f      	bne.n	8001ab8 <menu+0x1538>
		if(dilSecim == 0) {
 80019b8:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <menu+0x15c8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10a      	bne.n	80019d6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80019c0:	4a62      	ldr	r2, [pc, #392]	; (8001b4c <menu+0x15cc>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7fe fd7a 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80019ca:	4a61      	ldr	r2, [pc, #388]	; (8001b50 <menu+0x15d0>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	2002      	movs	r0, #2
 80019d0:	f7fe fd75 	bl	80004be <lcd_print>
 80019d4:	e00d      	b.n	80019f2 <menu+0x1472>
		} else if(dilSecim == 1) {
 80019d6:	4b5c      	ldr	r3, [pc, #368]	; (8001b48 <menu+0x15c8>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d109      	bne.n	80019f2 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80019de:	4a5d      	ldr	r2, [pc, #372]	; (8001b54 <menu+0x15d4>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7fe fd6b 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80019e8:	4a5b      	ldr	r2, [pc, #364]	; (8001b58 <menu+0x15d8>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f7fe fd66 	bl	80004be <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80019f2:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <menu+0x15dc>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	220a      	movs	r2, #10
 80019f8:	4959      	ldr	r1, [pc, #356]	; (8001b60 <menu+0x15e0>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00b fab0 	bl	800cf60 <itoa>
		lcd_print(2,16,snum);
 8001a00:	4a57      	ldr	r2, [pc, #348]	; (8001b60 <menu+0x15e0>)
 8001a02:	2110      	movs	r1, #16
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7fe fd5a 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4849      	ldr	r0, [pc, #292]	; (8001b34 <menu+0x15b4>)
 8001a0e:	f006 ff33 	bl	8008878 <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d119      	bne.n	8001a4c <menu+0x14cc>
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <menu+0x15b8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <menu+0x14cc>
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <menu+0x15ac>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <menu+0x15dc>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <menu+0x15dc>)
 8001a38:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001a3a:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <menu+0x15dc>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d902      	bls.n	8001a48 <menu+0x14c8>
				kapi1AcSure = 0;
 8001a42:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <menu+0x15dc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a48:	f003 f90e 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	4839      	ldr	r0, [pc, #228]	; (8001b34 <menu+0x15b4>)
 8001a50:	f006 ff12 	bl	8008878 <HAL_GPIO_ReadPin>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d119      	bne.n	8001a8e <menu+0x150e>
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <menu+0x15b8>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	f083 0301 	eor.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d012      	beq.n	8001a8e <menu+0x150e>
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <menu+0x15ac>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10e      	bne.n	8001a8e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001a70:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <menu+0x15dc>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <menu+0x15dc>)
 8001a7a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <menu+0x15dc>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b06      	cmp	r3, #6
 8001a82:	d902      	bls.n	8001a8a <menu+0x150a>
		   		kapi1AcSure = 5;
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <menu+0x15dc>)
 8001a86:	2205      	movs	r2, #5
 8001a88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a8a:	f003 f8ed 	bl	8004c68 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4828      	ldr	r0, [pc, #160]	; (8001b34 <menu+0x15b4>)
 8001a92:	f006 fef1 	bl	8008878 <HAL_GPIO_ReadPin>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10d      	bne.n	8001ab8 <menu+0x1538>
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <menu+0x15b8>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <menu+0x15dc>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <menu+0x15bc>)
 8001ab0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <menu+0x15c0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <menu+0x15c4>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b0b      	cmp	r3, #11
 8001abe:	f040 80b5 	bne.w	8001c2c <menu+0x16ac>
		if(dilSecim == 0) {
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <menu+0x15c8>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d105      	bne.n	8001ad6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001aca:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <menu+0x15e4>)
 8001acc:	2101      	movs	r1, #1
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7fe fcf5 	bl	80004be <lcd_print>
 8001ad4:	e008      	b.n	8001ae8 <menu+0x1568>
		} else if(dilSecim == 1) {
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <menu+0x15c8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d104      	bne.n	8001ae8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001ade:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <menu+0x15e8>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7fe fceb 	bl	80004be <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <menu+0x15ec>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <menu+0x15f0>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	2002      	movs	r0, #2
 8001af6:	f7fe fce2 	bl	80004be <lcd_print>
 8001afa:	e048      	b.n	8001b8e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <menu+0x15ec>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d13b      	bne.n	8001b7c <menu+0x15fc>
			if(dilSecim == 0) {
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <menu+0x15c8>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <menu+0x15f4>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7fe fcd4 	bl	80004be <lcd_print>
 8001b16:	e03a      	b.n	8001b8e <menu+0x160e>
			} else if(dilSecim == 1) {
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <menu+0x15c8>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d136      	bne.n	8001b8e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <menu+0x15f8>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7fe fcca 	bl	80004be <lcd_print>
 8001b2a:	e030      	b.n	8001b8e <menu+0x160e>
 8001b2c:	20000c8d 	.word	0x20000c8d
 8001b30:	0800de8c 	.word	0x0800de8c
 8001b34:	40010800 	.word	0x40010800
 8001b38:	20000cb2 	.word	0x20000cb2
 8001b3c:	20000c18 	.word	0x20000c18
 8001b40:	20000caf 	.word	0x20000caf
 8001b44:	20000c84 	.word	0x20000c84
 8001b48:	20000ca4 	.word	0x20000ca4
 8001b4c:	0800de9c 	.word	0x0800de9c
 8001b50:	0800deb0 	.word	0x0800deb0
 8001b54:	0800dec0 	.word	0x0800dec0
 8001b58:	0800ded4 	.word	0x0800ded4
 8001b5c:	20000c9d 	.word	0x20000c9d
 8001b60:	20000c58 	.word	0x20000c58
 8001b64:	0800dee4 	.word	0x0800dee4
 8001b68:	0800def8 	.word	0x0800def8
 8001b6c:	20000c8e 	.word	0x20000c8e
 8001b70:	0800de54 	.word	0x0800de54
 8001b74:	0800de68 	.word	0x0800de68
 8001b78:	0800de78 	.word	0x0800de78
			}
		} else if(kapi2Tip == 2) {
 8001b7c:	4b8a      	ldr	r3, [pc, #552]	; (8001da8 <menu+0x1828>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d104      	bne.n	8001b8e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001b84:	4a89      	ldr	r2, [pc, #548]	; (8001dac <menu+0x182c>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7fe fc98 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4887      	ldr	r0, [pc, #540]	; (8001db0 <menu+0x1830>)
 8001b92:	f006 fe71 	bl	8008878 <HAL_GPIO_ReadPin>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d115      	bne.n	8001bc8 <menu+0x1648>
 8001b9c:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <menu+0x1834>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f083 0301 	eor.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00e      	beq.n	8001bc8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001baa:	4b7f      	ldr	r3, [pc, #508]	; (8001da8 <menu+0x1828>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <menu+0x1828>)
 8001bb4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001bb6:	4b7c      	ldr	r3, [pc, #496]	; (8001da8 <menu+0x1828>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d902      	bls.n	8001bc4 <menu+0x1644>
				kapi2Tip = 0;
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <menu+0x1828>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bc4:	f003 f850 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4879      	ldr	r0, [pc, #484]	; (8001db0 <menu+0x1830>)
 8001bcc:	f006 fe54 	bl	8008878 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d115      	bne.n	8001c02 <menu+0x1682>
 8001bd6:	4b77      	ldr	r3, [pc, #476]	; (8001db4 <menu+0x1834>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	f083 0301 	eor.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00e      	beq.n	8001c02 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001be4:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <menu+0x1828>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b6e      	ldr	r3, [pc, #440]	; (8001da8 <menu+0x1828>)
 8001bee:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001bf0:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <menu+0x1828>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d902      	bls.n	8001bfe <menu+0x167e>
		   		kapi2Tip = 2;
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <menu+0x1828>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bfe:	f003 f833 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c02:	2108      	movs	r1, #8
 8001c04:	486a      	ldr	r0, [pc, #424]	; (8001db0 <menu+0x1830>)
 8001c06:	f006 fe37 	bl	8008878 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10d      	bne.n	8001c2c <menu+0x16ac>
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <menu+0x1834>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	f083 0301 	eor.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001c1e:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <menu+0x1828>)
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <menu+0x1838>)
 8001c24:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001c26:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <menu+0x183c>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001c2c:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <menu+0x1840>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d17f      	bne.n	8001d34 <menu+0x17b4>
		if(dilSecim == 0) {
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <menu+0x1844>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001c3c:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <menu+0x1848>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7fe fc3c 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001c46:	4a61      	ldr	r2, [pc, #388]	; (8001dcc <menu+0x184c>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7fe fc37 	bl	80004be <lcd_print>
 8001c50:	e00d      	b.n	8001c6e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001c52:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <menu+0x1844>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d109      	bne.n	8001c6e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001c5a:	4a5d      	ldr	r2, [pc, #372]	; (8001dd0 <menu+0x1850>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7fe fc2d 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001c64:	4a5b      	ldr	r2, [pc, #364]	; (8001dd4 <menu+0x1854>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f7fe fc28 	bl	80004be <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <menu+0x1858>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	220a      	movs	r2, #10
 8001c74:	4959      	ldr	r1, [pc, #356]	; (8001ddc <menu+0x185c>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00b f972 	bl	800cf60 <itoa>
		lcd_print(2,16,snum);
 8001c7c:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <menu+0x185c>)
 8001c7e:	2110      	movs	r1, #16
 8001c80:	2002      	movs	r0, #2
 8001c82:	f7fe fc1c 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c86:	2102      	movs	r1, #2
 8001c88:	4849      	ldr	r0, [pc, #292]	; (8001db0 <menu+0x1830>)
 8001c8a:	f006 fdf5 	bl	8008878 <HAL_GPIO_ReadPin>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d119      	bne.n	8001cc8 <menu+0x1748>
 8001c94:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <menu+0x1834>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f083 0301 	eor.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <menu+0x1748>
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <menu+0x1828>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10e      	bne.n	8001cc8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001caa:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <menu+0x1858>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <menu+0x1858>)
 8001cb4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001cb6:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <menu+0x1858>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d902      	bls.n	8001cc4 <menu+0x1744>
				kapi2AcSure = 0;
 8001cbe:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <menu+0x1858>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc4:	f002 ffd0 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001cc8:	2104      	movs	r1, #4
 8001cca:	4839      	ldr	r0, [pc, #228]	; (8001db0 <menu+0x1830>)
 8001ccc:	f006 fdd4 	bl	8008878 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d119      	bne.n	8001d0a <menu+0x178a>
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <menu+0x1834>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f083 0301 	eor.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d012      	beq.n	8001d0a <menu+0x178a>
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <menu+0x1828>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10e      	bne.n	8001d0a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <menu+0x1858>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <menu+0x1858>)
 8001cf6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001cf8:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <menu+0x1858>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d902      	bls.n	8001d06 <menu+0x1786>
		   		kapi2AcSure = 5;
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <menu+0x1858>)
 8001d02:	2205      	movs	r2, #5
 8001d04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d06:	f002 ffaf 	bl	8004c68 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	4828      	ldr	r0, [pc, #160]	; (8001db0 <menu+0x1830>)
 8001d0e:	f006 fdb3 	bl	8008878 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10d      	bne.n	8001d34 <menu+0x17b4>
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <menu+0x1834>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <menu+0x1858>)
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <menu+0x1838>)
 8001d2c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <menu+0x183c>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <menu+0x1840>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b0d      	cmp	r3, #13
 8001d3a:	f040 80b5 	bne.w	8001ea8 <menu+0x1928>
		if(dilSecim == 0) {
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <menu+0x1844>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001d46:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <menu+0x1860>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f7fe fbb7 	bl	80004be <lcd_print>
 8001d50:	e008      	b.n	8001d64 <menu+0x17e4>
		} else if(dilSecim == 1){
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <menu+0x1844>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d104      	bne.n	8001d64 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001d5a:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <menu+0x1864>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7fe fbad 	bl	80004be <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <menu+0x1868>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <menu+0x186c>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2002      	movs	r0, #2
 8001d72:	f7fe fba4 	bl	80004be <lcd_print>
 8001d76:	e048      	b.n	8001e0a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <menu+0x1868>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d13b      	bne.n	8001df8 <menu+0x1878>
			if(dilSecim == 0) {
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <menu+0x1844>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <menu+0x1870>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f7fe fb96 	bl	80004be <lcd_print>
 8001d92:	e03a      	b.n	8001e0a <menu+0x188a>
			} else if(dilSecim == 1) {
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <menu+0x1844>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d136      	bne.n	8001e0a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <menu+0x1874>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7fe fb8c 	bl	80004be <lcd_print>
 8001da6:	e030      	b.n	8001e0a <menu+0x188a>
 8001da8:	20000c8e 	.word	0x20000c8e
 8001dac:	0800de8c 	.word	0x0800de8c
 8001db0:	40010800 	.word	0x40010800
 8001db4:	20000cb2 	.word	0x20000cb2
 8001db8:	20000c18 	.word	0x20000c18
 8001dbc:	20000caf 	.word	0x20000caf
 8001dc0:	20000c84 	.word	0x20000c84
 8001dc4:	20000ca4 	.word	0x20000ca4
 8001dc8:	0800df0c 	.word	0x0800df0c
 8001dcc:	0800deb0 	.word	0x0800deb0
 8001dd0:	0800df20 	.word	0x0800df20
 8001dd4:	0800ded4 	.word	0x0800ded4
 8001dd8:	20000c9e 	.word	0x20000c9e
 8001ddc:	20000c58 	.word	0x20000c58
 8001de0:	0800df34 	.word	0x0800df34
 8001de4:	0800df48 	.word	0x0800df48
 8001de8:	20000c8f 	.word	0x20000c8f
 8001dec:	0800de54 	.word	0x0800de54
 8001df0:	0800de68 	.word	0x0800de68
 8001df4:	0800de78 	.word	0x0800de78
			}
		} else if(kapitablaTip == 2) {
 8001df8:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <menu+0x19e8>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d104      	bne.n	8001e0a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8001e00:	4a5a      	ldr	r2, [pc, #360]	; (8001f6c <menu+0x19ec>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2002      	movs	r0, #2
 8001e06:	f7fe fb5a 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4858      	ldr	r0, [pc, #352]	; (8001f70 <menu+0x19f0>)
 8001e0e:	f006 fd33 	bl	8008878 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d115      	bne.n	8001e44 <menu+0x18c4>
 8001e18:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <menu+0x19f4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00e      	beq.n	8001e44 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8001e26:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <menu+0x19e8>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <menu+0x19e8>)
 8001e30:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001e32:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <menu+0x19e8>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d902      	bls.n	8001e40 <menu+0x18c0>
				kapitablaTip = 0;
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <menu+0x19e8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e40:	f002 ff12 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e44:	2104      	movs	r1, #4
 8001e46:	484a      	ldr	r0, [pc, #296]	; (8001f70 <menu+0x19f0>)
 8001e48:	f006 fd16 	bl	8008878 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d115      	bne.n	8001e7e <menu+0x18fe>
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <menu+0x19f4>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8001e60:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <menu+0x19e8>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <menu+0x19e8>)
 8001e6a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001e6c:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <menu+0x19e8>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d902      	bls.n	8001e7a <menu+0x18fa>
		   		kapitablaTip = 2;
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <menu+0x19e8>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e7a:	f002 fef5 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e7e:	2108      	movs	r1, #8
 8001e80:	483b      	ldr	r0, [pc, #236]	; (8001f70 <menu+0x19f0>)
 8001e82:	f006 fcf9 	bl	8008878 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10d      	bne.n	8001ea8 <menu+0x1928>
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <menu+0x19f4>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f083 0301 	eor.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <menu+0x19e8>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <menu+0x19f8>)
 8001ea0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001ea2:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <menu+0x19fc>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <menu+0x1a00>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b0e      	cmp	r3, #14
 8001eae:	f040 80f2 	bne.w	8002096 <menu+0x1b16>
		if(dilSecim == 0) {
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <menu+0x1a04>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8001eba:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <menu+0x1a08>)
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7fe fafd 	bl	80004be <lcd_print>
 8001ec4:	e008      	b.n	8001ed8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <menu+0x1a04>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d104      	bne.n	8001ed8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8001ece:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <menu+0x1a0c>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7fe faf3 	bl	80004be <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <menu+0x1a10>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d113      	bne.n	8001f08 <menu+0x1988>
			if(dilSecim == 0){
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <menu+0x1a04>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <menu+0x1a14>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	2002      	movs	r0, #2
 8001eee:	f7fe fae6 	bl	80004be <lcd_print>
 8001ef2:	e071      	b.n	8001fd8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001ef4:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <menu+0x1a04>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d16d      	bne.n	8001fd8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <menu+0x1a18>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	2002      	movs	r0, #2
 8001f02:	f7fe fadc 	bl	80004be <lcd_print>
 8001f06:	e067      	b.n	8001fd8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <menu+0x1a10>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d112      	bne.n	8001f36 <menu+0x19b6>
			if(dilSecim == 0){
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <menu+0x1a04>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d104      	bne.n	8001f22 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <menu+0x1a1c>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7fe face 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1){
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <menu+0x1a04>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d156      	bne.n	8001fd8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <menu+0x1a20>)
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7fe fac5 	bl	80004be <lcd_print>
 8001f34:	e050      	b.n	8001fd8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <menu+0x1a10>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d136      	bne.n	8001fac <menu+0x1a2c>
			if(dilSecim == 0){
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <menu+0x1a04>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8001f46:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <menu+0x1a24>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f7fe fab7 	bl	80004be <lcd_print>
 8001f50:	e042      	b.n	8001fd8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <menu+0x1a04>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d13e      	bne.n	8001fd8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8001f5a:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <menu+0x1a28>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f7fe faad 	bl	80004be <lcd_print>
 8001f64:	e038      	b.n	8001fd8 <menu+0x1a58>
 8001f66:	bf00      	nop
 8001f68:	20000c8f 	.word	0x20000c8f
 8001f6c:	0800de8c 	.word	0x0800de8c
 8001f70:	40010800 	.word	0x40010800
 8001f74:	20000cb2 	.word	0x20000cb2
 8001f78:	20000c18 	.word	0x20000c18
 8001f7c:	20000caf 	.word	0x20000caf
 8001f80:	20000c84 	.word	0x20000c84
 8001f84:	20000ca4 	.word	0x20000ca4
 8001f88:	0800df5c 	.word	0x0800df5c
 8001f8c:	0800df70 	.word	0x0800df70
 8001f90:	20000c91 	.word	0x20000c91
 8001f94:	0800df84 	.word	0x0800df84
 8001f98:	0800df94 	.word	0x0800df94
 8001f9c:	0800dfa4 	.word	0x0800dfa4
 8001fa0:	0800dfb4 	.word	0x0800dfb4
 8001fa4:	0800dfc4 	.word	0x0800dfc4
 8001fa8:	0800dfd8 	.word	0x0800dfd8
			}
		} else if(kapiTablaAcKonum == 3) {
 8001fac:	4b9b      	ldr	r3, [pc, #620]	; (800221c <menu+0x1c9c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d111      	bne.n	8001fd8 <menu+0x1a58>
			if(dilSecim == 0) {
 8001fb4:	4b9a      	ldr	r3, [pc, #616]	; (8002220 <menu+0x1ca0>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8001fbc:	4a99      	ldr	r2, [pc, #612]	; (8002224 <menu+0x1ca4>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7fe fa7c 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 8001fc6:	4b96      	ldr	r3, [pc, #600]	; (8002220 <menu+0x1ca0>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d104      	bne.n	8001fd8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8001fce:	4a96      	ldr	r2, [pc, #600]	; (8002228 <menu+0x1ca8>)
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	f7fe fa73 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4894      	ldr	r0, [pc, #592]	; (800222c <menu+0x1cac>)
 8001fdc:	f006 fc4c 	bl	8008878 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d115      	bne.n	8002012 <menu+0x1a92>
 8001fe6:	4b92      	ldr	r3, [pc, #584]	; (8002230 <menu+0x1cb0>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001ff4:	4b89      	ldr	r3, [pc, #548]	; (800221c <menu+0x1c9c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b87      	ldr	r3, [pc, #540]	; (800221c <menu+0x1c9c>)
 8001ffe:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002000:	4b86      	ldr	r3, [pc, #536]	; (800221c <menu+0x1c9c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d902      	bls.n	800200e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002008:	4b84      	ldr	r3, [pc, #528]	; (800221c <menu+0x1c9c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800200e:	f002 fe2b 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002012:	2104      	movs	r1, #4
 8002014:	4885      	ldr	r0, [pc, #532]	; (800222c <menu+0x1cac>)
 8002016:	f006 fc2f 	bl	8008878 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	2b01      	cmp	r3, #1
 800201e:	d115      	bne.n	800204c <menu+0x1acc>
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <menu+0x1cb0>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	f083 0301 	eor.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00e      	beq.n	800204c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800202e:	4b7b      	ldr	r3, [pc, #492]	; (800221c <menu+0x1c9c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3b01      	subs	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b79      	ldr	r3, [pc, #484]	; (800221c <menu+0x1c9c>)
 8002038:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800203a:	4b78      	ldr	r3, [pc, #480]	; (800221c <menu+0x1c9c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d902      	bls.n	8002048 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <menu+0x1c9c>)
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002048:	f002 fe0e 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800204c:	2108      	movs	r1, #8
 800204e:	4877      	ldr	r0, [pc, #476]	; (800222c <menu+0x1cac>)
 8002050:	f006 fc12 	bl	8008878 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d11d      	bne.n	8002096 <menu+0x1b16>
 800205a:	4b75      	ldr	r3, [pc, #468]	; (8002230 <menu+0x1cb0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002068:	4b6c      	ldr	r3, [pc, #432]	; (800221c <menu+0x1c9c>)
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	4b71      	ldr	r3, [pc, #452]	; (8002234 <menu+0x1cb4>)
 800206e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <menu+0x1c9c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <menu+0x1b02>
 800207a:	4b68      	ldr	r3, [pc, #416]	; (800221c <menu+0x1c9c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d106      	bne.n	8002090 <menu+0x1b10>
				altLimit = 1;
 8002082:	4b6d      	ldr	r3, [pc, #436]	; (8002238 <menu+0x1cb8>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002088:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <menu+0x1cb8>)
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	4b69      	ldr	r3, [pc, #420]	; (8002234 <menu+0x1cb4>)
 800208e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <menu+0x1cbc>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002096:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <menu+0x1cc0>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	d17f      	bne.n	800219e <menu+0x1c1e>
		if(dilSecim == 0) {
 800209e:	4b60      	ldr	r3, [pc, #384]	; (8002220 <menu+0x1ca0>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10a      	bne.n	80020bc <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80020a6:	4a67      	ldr	r2, [pc, #412]	; (8002244 <menu+0x1cc4>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7fe fa07 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80020b0:	4a65      	ldr	r2, [pc, #404]	; (8002248 <menu+0x1cc8>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7fe fa02 	bl	80004be <lcd_print>
 80020ba:	e00d      	b.n	80020d8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 80020bc:	4b58      	ldr	r3, [pc, #352]	; (8002220 <menu+0x1ca0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d109      	bne.n	80020d8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80020c4:	4a61      	ldr	r2, [pc, #388]	; (800224c <menu+0x1ccc>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7fe f9f8 	bl	80004be <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80020ce:	4a60      	ldr	r2, [pc, #384]	; (8002250 <menu+0x1cd0>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	2002      	movs	r0, #2
 80020d4:	f7fe f9f3 	bl	80004be <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80020d8:	4b5e      	ldr	r3, [pc, #376]	; (8002254 <menu+0x1cd4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	220a      	movs	r2, #10
 80020de:	495e      	ldr	r1, [pc, #376]	; (8002258 <menu+0x1cd8>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00a ff3d 	bl	800cf60 <itoa>
		lcd_print(2,16,snum);
 80020e6:	4a5c      	ldr	r2, [pc, #368]	; (8002258 <menu+0x1cd8>)
 80020e8:	2110      	movs	r1, #16
 80020ea:	2002      	movs	r0, #2
 80020ec:	f7fe f9e7 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80020f0:	2102      	movs	r1, #2
 80020f2:	484e      	ldr	r0, [pc, #312]	; (800222c <menu+0x1cac>)
 80020f4:	f006 fbc0 	bl	8008878 <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d119      	bne.n	8002132 <menu+0x1bb2>
 80020fe:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <menu+0x1cb0>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d012      	beq.n	8002132 <menu+0x1bb2>
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <menu+0x1cdc>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10e      	bne.n	8002132 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <menu+0x1cd4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <menu+0x1cd4>)
 800211e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002120:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <menu+0x1cd4>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d902      	bls.n	800212e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002128:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <menu+0x1cd4>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800212e:	f002 fd9b 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002132:	2104      	movs	r1, #4
 8002134:	483d      	ldr	r0, [pc, #244]	; (800222c <menu+0x1cac>)
 8002136:	f006 fb9f 	bl	8008878 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	2b01      	cmp	r3, #1
 800213e:	d119      	bne.n	8002174 <menu+0x1bf4>
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <menu+0x1cb0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f083 0301 	eor.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <menu+0x1bf4>
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <menu+0x1cdc>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10e      	bne.n	8002174 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002156:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <menu+0x1cd4>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <menu+0x1cd4>)
 8002160:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002162:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <menu+0x1cd4>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800216a:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <menu+0x1cd4>)
 800216c:	2205      	movs	r2, #5
 800216e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002170:	f002 fd7a 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002174:	2108      	movs	r1, #8
 8002176:	482d      	ldr	r0, [pc, #180]	; (800222c <menu+0x1cac>)
 8002178:	f006 fb7e 	bl	8008878 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10d      	bne.n	800219e <menu+0x1c1e>
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <menu+0x1cb0>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <menu+0x1cd4>)
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <menu+0x1cb4>)
 8002196:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002198:	4b28      	ldr	r3, [pc, #160]	; (800223c <menu+0x1cbc>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <menu+0x1cc0>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	f040 80bc 	bne.w	8002320 <menu+0x1da0>
		if(dilSecim == 0) {
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <menu+0x1ca0>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <menu+0x1ce0>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7fe f982 	bl	80004be <lcd_print>
 80021ba:	e008      	b.n	80021ce <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <menu+0x1ca0>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d104      	bne.n	80021ce <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <menu+0x1ce4>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7fe f978 	bl	80004be <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <menu+0x1ce8>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d113      	bne.n	80021fe <menu+0x1c7e>
			if(dilSecim == 0) {
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <menu+0x1ca0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <menu+0x1ca4>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f7fe f96b 	bl	80004be <lcd_print>
 80021e8:	e04b      	b.n	8002282 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <menu+0x1ca0>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d147      	bne.n	8002282 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80021f2:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <menu+0x1ca8>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	2002      	movs	r0, #2
 80021f8:	f7fe f961 	bl	80004be <lcd_print>
 80021fc:	e041      	b.n	8002282 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <menu+0x1ce8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d13d      	bne.n	8002282 <menu+0x1d02>
			if(dilSecim == 0) {
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <menu+0x1ca0>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d130      	bne.n	8002270 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800220e:	4a17      	ldr	r2, [pc, #92]	; (800226c <menu+0x1cec>)
 8002210:	2101      	movs	r1, #1
 8002212:	2002      	movs	r0, #2
 8002214:	f7fe f953 	bl	80004be <lcd_print>
 8002218:	e033      	b.n	8002282 <menu+0x1d02>
 800221a:	bf00      	nop
 800221c:	20000c91 	.word	0x20000c91
 8002220:	20000ca4 	.word	0x20000ca4
 8002224:	0800dc4c 	.word	0x0800dc4c
 8002228:	0800dc60 	.word	0x0800dc60
 800222c:	40010800 	.word	0x40010800
 8002230:	20000cb2 	.word	0x20000cb2
 8002234:	20000c18 	.word	0x20000c18
 8002238:	20000c8a 	.word	0x20000c8a
 800223c:	20000caf 	.word	0x20000caf
 8002240:	20000c84 	.word	0x20000c84
 8002244:	0800dfec 	.word	0x0800dfec
 8002248:	0800deb0 	.word	0x0800deb0
 800224c:	0800e000 	.word	0x0800e000
 8002250:	0800ded4 	.word	0x0800ded4
 8002254:	20000c9f 	.word	0x20000c9f
 8002258:	20000c58 	.word	0x20000c58
 800225c:	20000c8f 	.word	0x20000c8f
 8002260:	0800e014 	.word	0x0800e014
 8002264:	0800e028 	.word	0x0800e028
 8002268:	20000c92 	.word	0x20000c92
 800226c:	0800dcac 	.word	0x0800dcac
			} else if(dilSecim == 1) {
 8002270:	4b99      	ldr	r3, [pc, #612]	; (80024d8 <menu+0x1f58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d104      	bne.n	8002282 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002278:	4a98      	ldr	r2, [pc, #608]	; (80024dc <menu+0x1f5c>)
 800227a:	2101      	movs	r1, #1
 800227c:	2002      	movs	r0, #2
 800227e:	f7fe f91e 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002282:	2102      	movs	r1, #2
 8002284:	4896      	ldr	r0, [pc, #600]	; (80024e0 <menu+0x1f60>)
 8002286:	f006 faf7 	bl	8008878 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b01      	cmp	r3, #1
 800228e:	d115      	bne.n	80022bc <menu+0x1d3c>
 8002290:	4b94      	ldr	r3, [pc, #592]	; (80024e4 <menu+0x1f64>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00e      	beq.n	80022bc <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800229e:	4b92      	ldr	r3, [pc, #584]	; (80024e8 <menu+0x1f68>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b90      	ldr	r3, [pc, #576]	; (80024e8 <menu+0x1f68>)
 80022a8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80022aa:	4b8f      	ldr	r3, [pc, #572]	; (80024e8 <menu+0x1f68>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d902      	bls.n	80022b8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80022b2:	4b8d      	ldr	r3, [pc, #564]	; (80024e8 <menu+0x1f68>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022b8:	f002 fcd6 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022bc:	2104      	movs	r1, #4
 80022be:	4888      	ldr	r0, [pc, #544]	; (80024e0 <menu+0x1f60>)
 80022c0:	f006 fada 	bl	8008878 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d115      	bne.n	80022f6 <menu+0x1d76>
 80022ca:	4b86      	ldr	r3, [pc, #536]	; (80024e4 <menu+0x1f64>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	f083 0301 	eor.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00e      	beq.n	80022f6 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80022d8:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <menu+0x1f68>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <menu+0x1f68>)
 80022e2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80022e4:	4b80      	ldr	r3, [pc, #512]	; (80024e8 <menu+0x1f68>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80022ec:	4b7e      	ldr	r3, [pc, #504]	; (80024e8 <menu+0x1f68>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022f2:	f002 fcb9 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022f6:	2108      	movs	r1, #8
 80022f8:	4879      	ldr	r0, [pc, #484]	; (80024e0 <menu+0x1f60>)
 80022fa:	f006 fabd 	bl	8008878 <HAL_GPIO_ReadPin>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10d      	bne.n	8002320 <menu+0x1da0>
 8002304:	4b77      	ldr	r3, [pc, #476]	; (80024e4 <menu+0x1f64>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f083 0301 	eor.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002312:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <menu+0x1f68>)
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	4b75      	ldr	r3, [pc, #468]	; (80024ec <menu+0x1f6c>)
 8002318:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800231a:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <menu+0x1f70>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002320:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <menu+0x1f74>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b11      	cmp	r3, #17
 8002326:	f040 80c3 	bne.w	80024b0 <menu+0x1f30>
		if(dilSecim == 0) {
 800232a:	4b6b      	ldr	r3, [pc, #428]	; (80024d8 <menu+0x1f58>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002332:	4a71      	ldr	r2, [pc, #452]	; (80024f8 <menu+0x1f78>)
 8002334:	2101      	movs	r1, #1
 8002336:	2001      	movs	r0, #1
 8002338:	f7fe f8c1 	bl	80004be <lcd_print>
 800233c:	e008      	b.n	8002350 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800233e:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <menu+0x1f58>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d104      	bne.n	8002350 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002346:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <menu+0x1f7c>)
 8002348:	2101      	movs	r1, #1
 800234a:	2001      	movs	r0, #1
 800234c:	f7fe f8b7 	bl	80004be <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002350:	4b6b      	ldr	r3, [pc, #428]	; (8002500 <menu+0x1f80>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d113      	bne.n	8002380 <menu+0x1e00>
			if(dilSecim == 0){
 8002358:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <menu+0x1f58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002360:	4a68      	ldr	r2, [pc, #416]	; (8002504 <menu+0x1f84>)
 8002362:	2101      	movs	r1, #1
 8002364:	2002      	movs	r0, #2
 8002366:	f7fe f8aa 	bl	80004be <lcd_print>
 800236a:	e038      	b.n	80023de <menu+0x1e5e>
			} else if(dilSecim == 1){
 800236c:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <menu+0x1f58>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d134      	bne.n	80023de <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002374:	4a64      	ldr	r2, [pc, #400]	; (8002508 <menu+0x1f88>)
 8002376:	2101      	movs	r1, #1
 8002378:	2002      	movs	r0, #2
 800237a:	f7fe f8a0 	bl	80004be <lcd_print>
 800237e:	e02e      	b.n	80023de <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002380:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <menu+0x1f80>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d113      	bne.n	80023b0 <menu+0x1e30>
			if(dilSecim == 0){
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <menu+0x1f58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002390:	4a5e      	ldr	r2, [pc, #376]	; (800250c <menu+0x1f8c>)
 8002392:	2101      	movs	r1, #1
 8002394:	2002      	movs	r0, #2
 8002396:	f7fe f892 	bl	80004be <lcd_print>
 800239a:	e020      	b.n	80023de <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800239c:	4b4e      	ldr	r3, [pc, #312]	; (80024d8 <menu+0x1f58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d11c      	bne.n	80023de <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80023a4:	4a5a      	ldr	r2, [pc, #360]	; (8002510 <menu+0x1f90>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	2002      	movs	r0, #2
 80023aa:	f7fe f888 	bl	80004be <lcd_print>
 80023ae:	e016      	b.n	80023de <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <menu+0x1f80>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d112      	bne.n	80023de <menu+0x1e5e>
			if(dilSecim == 0) {
 80023b8:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <menu+0x1f58>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <menu+0x1f94>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	2002      	movs	r0, #2
 80023c6:	f7fe f87a 	bl	80004be <lcd_print>
 80023ca:	e008      	b.n	80023de <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80023cc:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <menu+0x1f58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d104      	bne.n	80023de <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80023d4:	4a50      	ldr	r2, [pc, #320]	; (8002518 <menu+0x1f98>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	2002      	movs	r0, #2
 80023da:	f7fe f870 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023de:	2102      	movs	r1, #2
 80023e0:	483f      	ldr	r0, [pc, #252]	; (80024e0 <menu+0x1f60>)
 80023e2:	f006 fa49 	bl	8008878 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d115      	bne.n	8002418 <menu+0x1e98>
 80023ec:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <menu+0x1f64>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <menu+0x1f80>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	3301      	adds	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <menu+0x1f80>)
 8002404:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <menu+0x1f80>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d902      	bls.n	8002414 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800240e:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <menu+0x1f80>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002414:	f002 fc28 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002418:	2104      	movs	r1, #4
 800241a:	4831      	ldr	r0, [pc, #196]	; (80024e0 <menu+0x1f60>)
 800241c:	f006 fa2c 	bl	8008878 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d115      	bne.n	8002452 <menu+0x1ed2>
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <menu+0x1f64>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <menu+0x1f80>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3b01      	subs	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <menu+0x1f80>)
 800243e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <menu+0x1f80>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d902      	bls.n	800244e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <menu+0x1f80>)
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800244e:	f002 fc0b 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002452:	2108      	movs	r1, #8
 8002454:	4822      	ldr	r0, [pc, #136]	; (80024e0 <menu+0x1f60>)
 8002456:	f006 fa0f 	bl	8008878 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d127      	bne.n	80024b0 <menu+0x1f30>
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <menu+0x1f64>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f083 0301 	eor.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d020      	beq.n	80024b0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <menu+0x1f80>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <menu+0x1f6c>)
 8002474:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <menu+0x1f80>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <menu+0x1f06>
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <menu+0x1f80>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d106      	bne.n	8002494 <menu+0x1f14>
				calismaSekli = 0;
 8002486:	4b25      	ldr	r3, [pc, #148]	; (800251c <menu+0x1f9c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <menu+0x1f9c>)
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <menu+0x1f6c>)
 8002492:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <menu+0x1f80>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800249c:	4b20      	ldr	r3, [pc, #128]	; (8002520 <menu+0x1fa0>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <menu+0x1fa0>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <menu+0x1f6c>)
 80024a8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <menu+0x1f70>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <menu+0x1f74>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	f040 80d5 	bne.w	8002664 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <menu+0x1f80>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d13c      	bne.n	800253c <menu+0x1fbc>
			if(dilSecim == 0) {
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <menu+0x1f58>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d12e      	bne.n	8002528 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <menu+0x1fa4>)
 80024cc:	2101      	movs	r1, #1
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7fd fff5 	bl	80004be <lcd_print>
 80024d4:	e048      	b.n	8002568 <menu+0x1fe8>
 80024d6:	bf00      	nop
 80024d8:	20000ca4 	.word	0x20000ca4
 80024dc:	0800dcc0 	.word	0x0800dcc0
 80024e0:	40010800 	.word	0x40010800
 80024e4:	20000cb2 	.word	0x20000cb2
 80024e8:	20000c92 	.word	0x20000c92
 80024ec:	20000c18 	.word	0x20000c18
 80024f0:	20000caf 	.word	0x20000caf
 80024f4:	20000c84 	.word	0x20000c84
 80024f8:	0800e03c 	.word	0x0800e03c
 80024fc:	0800e050 	.word	0x0800e050
 8002500:	20000c93 	.word	0x20000c93
 8002504:	0800e064 	.word	0x0800e064
 8002508:	0800e074 	.word	0x0800e074
 800250c:	0800e084 	.word	0x0800e084
 8002510:	0800e094 	.word	0x0800e094
 8002514:	0800dc4c 	.word	0x0800dc4c
 8002518:	0800dc60 	.word	0x0800dc60
 800251c:	20000c85 	.word	0x20000c85
 8002520:	20000c96 	.word	0x20000c96
 8002524:	0800e0a4 	.word	0x0800e0a4
			} else if(dilSecim == 1) {
 8002528:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <menu+0x2198>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d11b      	bne.n	8002568 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002530:	4a7a      	ldr	r2, [pc, #488]	; (800271c <menu+0x219c>)
 8002532:	2101      	movs	r1, #1
 8002534:	2001      	movs	r0, #1
 8002536:	f7fd ffc2 	bl	80004be <lcd_print>
 800253a:	e015      	b.n	8002568 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800253c:	4b78      	ldr	r3, [pc, #480]	; (8002720 <menu+0x21a0>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d111      	bne.n	8002568 <menu+0x1fe8>
			if(dilSecim == 0){
 8002544:	4b74      	ldr	r3, [pc, #464]	; (8002718 <menu+0x2198>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800254c:	4a75      	ldr	r2, [pc, #468]	; (8002724 <menu+0x21a4>)
 800254e:	2101      	movs	r1, #1
 8002550:	2001      	movs	r0, #1
 8002552:	f7fd ffb4 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1){
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <menu+0x2198>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d104      	bne.n	8002568 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800255e:	4a72      	ldr	r2, [pc, #456]	; (8002728 <menu+0x21a8>)
 8002560:	2101      	movs	r1, #1
 8002562:	2001      	movs	r0, #1
 8002564:	f7fd ffab 	bl	80004be <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8002568:	4b70      	ldr	r3, [pc, #448]	; (800272c <menu+0x21ac>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d113      	bne.n	8002598 <menu+0x2018>
			if(dilSecim == 0) {
 8002570:	4b69      	ldr	r3, [pc, #420]	; (8002718 <menu+0x2198>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8002578:	4a6d      	ldr	r2, [pc, #436]	; (8002730 <menu+0x21b0>)
 800257a:	2101      	movs	r1, #1
 800257c:	2002      	movs	r0, #2
 800257e:	f7fd ff9e 	bl	80004be <lcd_print>
 8002582:	e020      	b.n	80025c6 <menu+0x2046>
			} else if(dilSecim == 1){
 8002584:	4b64      	ldr	r3, [pc, #400]	; (8002718 <menu+0x2198>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d11c      	bne.n	80025c6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800258c:	4a69      	ldr	r2, [pc, #420]	; (8002734 <menu+0x21b4>)
 800258e:	2101      	movs	r1, #1
 8002590:	2002      	movs	r0, #2
 8002592:	f7fd ff94 	bl	80004be <lcd_print>
 8002596:	e016      	b.n	80025c6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8002598:	4b64      	ldr	r3, [pc, #400]	; (800272c <menu+0x21ac>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d112      	bne.n	80025c6 <menu+0x2046>
			if(dilSecim == 0){
 80025a0:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <menu+0x2198>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80025a8:	4a63      	ldr	r2, [pc, #396]	; (8002738 <menu+0x21b8>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	2002      	movs	r0, #2
 80025ae:	f7fd ff86 	bl	80004be <lcd_print>
 80025b2:	e008      	b.n	80025c6 <menu+0x2046>
			} else if(dilSecim == 1){
 80025b4:	4b58      	ldr	r3, [pc, #352]	; (8002718 <menu+0x2198>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d104      	bne.n	80025c6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80025bc:	4a5f      	ldr	r2, [pc, #380]	; (800273c <menu+0x21bc>)
 80025be:	2101      	movs	r1, #1
 80025c0:	2002      	movs	r0, #2
 80025c2:	f7fd ff7c 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c6:	2102      	movs	r1, #2
 80025c8:	485d      	ldr	r0, [pc, #372]	; (8002740 <menu+0x21c0>)
 80025ca:	f006 f955 	bl	8008878 <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d115      	bne.n	8002600 <menu+0x2080>
 80025d4:	4b5b      	ldr	r3, [pc, #364]	; (8002744 <menu+0x21c4>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	f083 0301 	eor.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00e      	beq.n	8002600 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80025e2:	4b52      	ldr	r3, [pc, #328]	; (800272c <menu+0x21ac>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b50      	ldr	r3, [pc, #320]	; (800272c <menu+0x21ac>)
 80025ec:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80025ee:	4b4f      	ldr	r3, [pc, #316]	; (800272c <menu+0x21ac>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d902      	bls.n	80025fc <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80025f6:	4b4d      	ldr	r3, [pc, #308]	; (800272c <menu+0x21ac>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025fc:	f002 fb34 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002600:	2104      	movs	r1, #4
 8002602:	484f      	ldr	r0, [pc, #316]	; (8002740 <menu+0x21c0>)
 8002604:	f006 f938 	bl	8008878 <HAL_GPIO_ReadPin>
 8002608:	4603      	mov	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d115      	bne.n	800263a <menu+0x20ba>
 800260e:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <menu+0x21c4>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <menu+0x21ac>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	3b01      	subs	r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b41      	ldr	r3, [pc, #260]	; (800272c <menu+0x21ac>)
 8002626:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <menu+0x21ac>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002630:	4b3e      	ldr	r3, [pc, #248]	; (800272c <menu+0x21ac>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002636:	f002 fb17 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800263a:	2108      	movs	r1, #8
 800263c:	4840      	ldr	r0, [pc, #256]	; (8002740 <menu+0x21c0>)
 800263e:	f006 f91b 	bl	8008878 <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10d      	bne.n	8002664 <menu+0x20e4>
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <menu+0x21c4>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	f083 0301 	eor.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <menu+0x21ac>)
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <menu+0x21c8>)
 800265c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <menu+0x21cc>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002664:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <menu+0x21d0>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b13      	cmp	r3, #19
 800266a:	f040 80d5 	bne.w	8002818 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <menu+0x21a0>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d113      	bne.n	800269e <menu+0x211e>
			if(dilSecim == 0) {
 8002676:	4b28      	ldr	r3, [pc, #160]	; (8002718 <menu+0x2198>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800267e:	4a35      	ldr	r2, [pc, #212]	; (8002754 <menu+0x21d4>)
 8002680:	2101      	movs	r1, #1
 8002682:	2001      	movs	r0, #1
 8002684:	f7fd ff1b 	bl	80004be <lcd_print>
 8002688:	e01f      	b.n	80026ca <menu+0x214a>
			} else if(dilSecim == 1) {
 800268a:	4b23      	ldr	r3, [pc, #140]	; (8002718 <menu+0x2198>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d11b      	bne.n	80026ca <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8002692:	4a31      	ldr	r2, [pc, #196]	; (8002758 <menu+0x21d8>)
 8002694:	2101      	movs	r1, #1
 8002696:	2001      	movs	r0, #1
 8002698:	f7fd ff11 	bl	80004be <lcd_print>
 800269c:	e015      	b.n	80026ca <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <menu+0x21a0>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d111      	bne.n	80026ca <menu+0x214a>
			if(dilSecim == 0) {
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <menu+0x2198>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80026ae:	4a2b      	ldr	r2, [pc, #172]	; (800275c <menu+0x21dc>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7fd ff03 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <menu+0x2198>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d104      	bne.n	80026ca <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <menu+0x21e0>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7fd fefa 	bl	80004be <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <menu+0x21e4>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d113      	bne.n	80026fa <menu+0x217a>
			if(dilSecim == 0) {
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <menu+0x2198>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d105      	bne.n	80026e6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <menu+0x21b0>)
 80026dc:	2101      	movs	r1, #1
 80026de:	2002      	movs	r0, #2
 80026e0:	f7fd feed 	bl	80004be <lcd_print>
 80026e4:	e049      	b.n	800277a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <menu+0x2198>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d145      	bne.n	800277a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <menu+0x21b4>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	2002      	movs	r0, #2
 80026f4:	f7fd fee3 	bl	80004be <lcd_print>
 80026f8:	e03f      	b.n	800277a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <menu+0x21e4>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d13b      	bne.n	800277a <menu+0x21fa>
			if(dilSecim == 0) {
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <menu+0x2198>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d12e      	bne.n	8002768 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800270a:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <menu+0x21b8>)
 800270c:	2101      	movs	r1, #1
 800270e:	2002      	movs	r0, #2
 8002710:	f7fd fed5 	bl	80004be <lcd_print>
 8002714:	e031      	b.n	800277a <menu+0x21fa>
 8002716:	bf00      	nop
 8002718:	20000ca4 	.word	0x20000ca4
 800271c:	0800e0b8 	.word	0x0800e0b8
 8002720:	20000c93 	.word	0x20000c93
 8002724:	0800e0c8 	.word	0x0800e0c8
 8002728:	0800e0dc 	.word	0x0800e0dc
 800272c:	20000c94 	.word	0x20000c94
 8002730:	0800dc4c 	.word	0x0800dc4c
 8002734:	0800dc60 	.word	0x0800dc60
 8002738:	0800dcac 	.word	0x0800dcac
 800273c:	0800dcc0 	.word	0x0800dcc0
 8002740:	40010800 	.word	0x40010800
 8002744:	20000cb2 	.word	0x20000cb2
 8002748:	20000c18 	.word	0x20000c18
 800274c:	20000caf 	.word	0x20000caf
 8002750:	20000c84 	.word	0x20000c84
 8002754:	0800e0f0 	.word	0x0800e0f0
 8002758:	0800e104 	.word	0x0800e104
 800275c:	0800e118 	.word	0x0800e118
 8002760:	0800e12c 	.word	0x0800e12c
 8002764:	20000c95 	.word	0x20000c95
			} else if(dilSecim == 1) {
 8002768:	4b90      	ldr	r3, [pc, #576]	; (80029ac <menu+0x242c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d104      	bne.n	800277a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8002770:	4a8f      	ldr	r2, [pc, #572]	; (80029b0 <menu+0x2430>)
 8002772:	2101      	movs	r1, #1
 8002774:	2002      	movs	r0, #2
 8002776:	f7fd fea2 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800277a:	2102      	movs	r1, #2
 800277c:	488d      	ldr	r0, [pc, #564]	; (80029b4 <menu+0x2434>)
 800277e:	f006 f87b 	bl	8008878 <HAL_GPIO_ReadPin>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d115      	bne.n	80027b4 <menu+0x2234>
 8002788:	4b8b      	ldr	r3, [pc, #556]	; (80029b8 <menu+0x2438>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <menu+0x243c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b87      	ldr	r3, [pc, #540]	; (80029bc <menu+0x243c>)
 80027a0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80027a2:	4b86      	ldr	r3, [pc, #536]	; (80029bc <menu+0x243c>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d902      	bls.n	80027b0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80027aa:	4b84      	ldr	r3, [pc, #528]	; (80029bc <menu+0x243c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027b0:	f002 fa5a 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b4:	2104      	movs	r1, #4
 80027b6:	487f      	ldr	r0, [pc, #508]	; (80029b4 <menu+0x2434>)
 80027b8:	f006 f85e 	bl	8008878 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d115      	bne.n	80027ee <menu+0x226e>
 80027c2:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <menu+0x2438>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80027d0:	4b7a      	ldr	r3, [pc, #488]	; (80029bc <menu+0x243c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b78      	ldr	r3, [pc, #480]	; (80029bc <menu+0x243c>)
 80027da:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80027dc:	4b77      	ldr	r3, [pc, #476]	; (80029bc <menu+0x243c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80027e4:	4b75      	ldr	r3, [pc, #468]	; (80029bc <menu+0x243c>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ea:	f002 fa3d 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ee:	2108      	movs	r1, #8
 80027f0:	4870      	ldr	r0, [pc, #448]	; (80029b4 <menu+0x2434>)
 80027f2:	f006 f841 	bl	8008878 <HAL_GPIO_ReadPin>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10d      	bne.n	8002818 <menu+0x2298>
 80027fc:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <menu+0x2438>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800280a:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <menu+0x243c>)
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <menu+0x2440>)
 8002810:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002812:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <menu+0x2444>)
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002818:	4b6b      	ldr	r3, [pc, #428]	; (80029c8 <menu+0x2448>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b14      	cmp	r3, #20
 800281e:	f040 80b5 	bne.w	800298c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002822:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <menu+0x244c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d113      	bne.n	8002852 <menu+0x22d2>
			if(dilSecim == 0) {
 800282a:	4b60      	ldr	r3, [pc, #384]	; (80029ac <menu+0x242c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002832:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <menu+0x2450>)
 8002834:	2101      	movs	r1, #1
 8002836:	2001      	movs	r0, #1
 8002838:	f7fd fe41 	bl	80004be <lcd_print>
 800283c:	e020      	b.n	8002880 <menu+0x2300>
			} else if(dilSecim == 1) {
 800283e:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <menu+0x242c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d11c      	bne.n	8002880 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002846:	4a63      	ldr	r2, [pc, #396]	; (80029d4 <menu+0x2454>)
 8002848:	2101      	movs	r1, #1
 800284a:	2001      	movs	r0, #1
 800284c:	f7fd fe37 	bl	80004be <lcd_print>
 8002850:	e016      	b.n	8002880 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002852:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <menu+0x244c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d112      	bne.n	8002880 <menu+0x2300>
			if(dilSecim == 0) {
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <menu+0x242c>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002862:	4a5d      	ldr	r2, [pc, #372]	; (80029d8 <menu+0x2458>)
 8002864:	2101      	movs	r1, #1
 8002866:	2001      	movs	r0, #1
 8002868:	f7fd fe29 	bl	80004be <lcd_print>
 800286c:	e008      	b.n	8002880 <menu+0x2300>
			} else if(dilSecim == 1) {
 800286e:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <menu+0x242c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d104      	bne.n	8002880 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002876:	4a59      	ldr	r2, [pc, #356]	; (80029dc <menu+0x245c>)
 8002878:	2101      	movs	r1, #1
 800287a:	2001      	movs	r0, #1
 800287c:	f7fd fe1f 	bl	80004be <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002880:	4b57      	ldr	r3, [pc, #348]	; (80029e0 <menu+0x2460>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d113      	bne.n	80028b0 <menu+0x2330>
			if(dilSecim == 0) {
 8002888:	4b48      	ldr	r3, [pc, #288]	; (80029ac <menu+0x242c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002890:	4a54      	ldr	r2, [pc, #336]	; (80029e4 <menu+0x2464>)
 8002892:	2101      	movs	r1, #1
 8002894:	2002      	movs	r0, #2
 8002896:	f7fd fe12 	bl	80004be <lcd_print>
 800289a:	e020      	b.n	80028de <menu+0x235e>
			} else if(dilSecim == 1) {
 800289c:	4b43      	ldr	r3, [pc, #268]	; (80029ac <menu+0x242c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d11c      	bne.n	80028de <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <menu+0x2468>)
 80028a6:	2101      	movs	r1, #1
 80028a8:	2002      	movs	r0, #2
 80028aa:	f7fd fe08 	bl	80004be <lcd_print>
 80028ae:	e016      	b.n	80028de <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <menu+0x2460>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d112      	bne.n	80028de <menu+0x235e>
			if(dilSecim == 0) {
 80028b8:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <menu+0x242c>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80028c0:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <menu+0x246c>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2002      	movs	r0, #2
 80028c6:	f7fd fdfa 	bl	80004be <lcd_print>
 80028ca:	e008      	b.n	80028de <menu+0x235e>
			} else if(dilSecim == 1) {
 80028cc:	4b37      	ldr	r3, [pc, #220]	; (80029ac <menu+0x242c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d104      	bne.n	80028de <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80028d4:	4a46      	ldr	r2, [pc, #280]	; (80029f0 <menu+0x2470>)
 80028d6:	2101      	movs	r1, #1
 80028d8:	2002      	movs	r0, #2
 80028da:	f7fd fdf0 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80028de:	2102      	movs	r1, #2
 80028e0:	4834      	ldr	r0, [pc, #208]	; (80029b4 <menu+0x2434>)
 80028e2:	f005 ffc9 	bl	8008878 <HAL_GPIO_ReadPin>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d119      	bne.n	8002920 <menu+0x23a0>
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <menu+0x2438>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d012      	beq.n	8002920 <menu+0x23a0>
 80028fa:	4b34      	ldr	r3, [pc, #208]	; (80029cc <menu+0x244c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d10e      	bne.n	8002920 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <menu+0x2460>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <menu+0x2460>)
 800290c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <menu+0x2460>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d902      	bls.n	800291c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <menu+0x2460>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800291c:	f002 f9a4 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002920:	2104      	movs	r1, #4
 8002922:	4824      	ldr	r0, [pc, #144]	; (80029b4 <menu+0x2434>)
 8002924:	f005 ffa8 	bl	8008878 <HAL_GPIO_ReadPin>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d119      	bne.n	8002962 <menu+0x23e2>
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <menu+0x2438>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	f083 0301 	eor.w	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <menu+0x23e2>
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <menu+0x244c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d10e      	bne.n	8002962 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002944:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <menu+0x2460>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <menu+0x2460>)
 800294e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <menu+0x2460>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <menu+0x2460>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800295e:	f002 f983 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002962:	2108      	movs	r1, #8
 8002964:	4813      	ldr	r0, [pc, #76]	; (80029b4 <menu+0x2434>)
 8002966:	f005 ff87 	bl	8008878 <HAL_GPIO_ReadPin>
 800296a:	4603      	mov	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10d      	bne.n	800298c <menu+0x240c>
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <menu+0x2438>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f083 0301 	eor.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <menu+0x2460>)
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <menu+0x2440>)
 8002984:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <menu+0x2444>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <menu+0x2448>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b15      	cmp	r3, #21
 8002992:	f040 80c2 	bne.w	8002b1a <menu+0x259a>
		if(dilSecim == 0) {
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <menu+0x242c>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d12c      	bne.n	80029f8 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <menu+0x2474>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fd fd8b 	bl	80004be <lcd_print>
 80029a8:	e02f      	b.n	8002a0a <menu+0x248a>
 80029aa:	bf00      	nop
 80029ac:	20000ca4 	.word	0x20000ca4
 80029b0:	0800dcc0 	.word	0x0800dcc0
 80029b4:	40010800 	.word	0x40010800
 80029b8:	20000cb2 	.word	0x20000cb2
 80029bc:	20000c95 	.word	0x20000c95
 80029c0:	20000c18 	.word	0x20000c18
 80029c4:	20000caf 	.word	0x20000caf
 80029c8:	20000c84 	.word	0x20000c84
 80029cc:	20000c93 	.word	0x20000c93
 80029d0:	0800e140 	.word	0x0800e140
 80029d4:	0800e154 	.word	0x0800e154
 80029d8:	0800e168 	.word	0x0800e168
 80029dc:	0800e17c 	.word	0x0800e17c
 80029e0:	20000c96 	.word	0x20000c96
 80029e4:	0800e190 	.word	0x0800e190
 80029e8:	0800e1a4 	.word	0x0800e1a4
 80029ec:	0800e1b4 	.word	0x0800e1b4
 80029f0:	0800e1c8 	.word	0x0800e1c8
 80029f4:	0800e1d8 	.word	0x0800e1d8
		} else if(dilSecim == 1) {
 80029f8:	4b9c      	ldr	r3, [pc, #624]	; (8002c6c <menu+0x26ec>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d104      	bne.n	8002a0a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002a00:	4a9b      	ldr	r2, [pc, #620]	; (8002c70 <menu+0x26f0>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7fd fd5a 	bl	80004be <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002a0a:	4b9a      	ldr	r3, [pc, #616]	; (8002c74 <menu+0x26f4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d112      	bne.n	8002a38 <menu+0x24b8>
			if(dilSecim == 0) {
 8002a12:	4b96      	ldr	r3, [pc, #600]	; (8002c6c <menu+0x26ec>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8002a1a:	4a97      	ldr	r2, [pc, #604]	; (8002c78 <menu+0x26f8>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f7fd fd4d 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 8002a24:	4b91      	ldr	r3, [pc, #580]	; (8002c6c <menu+0x26ec>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d11c      	bne.n	8002a66 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8002a2c:	4a93      	ldr	r2, [pc, #588]	; (8002c7c <menu+0x26fc>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f7fd fd44 	bl	80004be <lcd_print>
 8002a36:	e016      	b.n	8002a66 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002a38:	4b8e      	ldr	r3, [pc, #568]	; (8002c74 <menu+0x26f4>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d112      	bne.n	8002a66 <menu+0x24e6>
			if(dilSecim == 0) {
 8002a40:	4b8a      	ldr	r3, [pc, #552]	; (8002c6c <menu+0x26ec>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002a48:	4a8d      	ldr	r2, [pc, #564]	; (8002c80 <menu+0x2700>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7fd fd36 	bl	80004be <lcd_print>
 8002a52:	e008      	b.n	8002a66 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002a54:	4b85      	ldr	r3, [pc, #532]	; (8002c6c <menu+0x26ec>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d104      	bne.n	8002a66 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002a5c:	4a89      	ldr	r2, [pc, #548]	; (8002c84 <menu+0x2704>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2002      	movs	r0, #2
 8002a62:	f7fd fd2c 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a66:	2102      	movs	r1, #2
 8002a68:	4887      	ldr	r0, [pc, #540]	; (8002c88 <menu+0x2708>)
 8002a6a:	f005 ff05 	bl	8008878 <HAL_GPIO_ReadPin>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d115      	bne.n	8002aa0 <menu+0x2520>
 8002a74:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <menu+0x270c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f083 0301 	eor.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00e      	beq.n	8002aa0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002a82:	4b7c      	ldr	r3, [pc, #496]	; (8002c74 <menu+0x26f4>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <menu+0x26f4>)
 8002a8c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002a8e:	4b79      	ldr	r3, [pc, #484]	; (8002c74 <menu+0x26f4>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d902      	bls.n	8002a9c <menu+0x251c>
				platformSilindirTipi = 0;
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <menu+0x26f4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a9c:	f002 f8e4 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	4879      	ldr	r0, [pc, #484]	; (8002c88 <menu+0x2708>)
 8002aa4:	f005 fee8 	bl	8008878 <HAL_GPIO_ReadPin>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d115      	bne.n	8002ada <menu+0x255a>
 8002aae:	4b77      	ldr	r3, [pc, #476]	; (8002c8c <menu+0x270c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f083 0301 	eor.w	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00e      	beq.n	8002ada <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002abc:	4b6d      	ldr	r3, [pc, #436]	; (8002c74 <menu+0x26f4>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	4b6b      	ldr	r3, [pc, #428]	; (8002c74 <menu+0x26f4>)
 8002ac6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <menu+0x26f4>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <menu+0x26f4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ad6:	f002 f8c7 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ada:	2108      	movs	r1, #8
 8002adc:	486a      	ldr	r0, [pc, #424]	; (8002c88 <menu+0x2708>)
 8002ade:	f005 fecb 	bl	8008878 <HAL_GPIO_ReadPin>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d118      	bne.n	8002b1a <menu+0x259a>
 8002ae8:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <menu+0x270c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	f083 0301 	eor.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d011      	beq.n	8002b1a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <menu+0x26f4>)
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <menu+0x2710>)
 8002afc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <menu+0x26f4>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d106      	bne.n	8002b14 <menu+0x2594>
				altLimit = 1;
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <menu+0x2714>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002b0c:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <menu+0x2714>)
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <menu+0x2710>)
 8002b12:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002b14:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <menu+0x2718>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002b1a:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <menu+0x271c>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b16      	cmp	r3, #22
 8002b20:	f040 8081 	bne.w	8002c26 <menu+0x26a6>
		if(dilSecim == 0) {
 8002b24:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <menu+0x26ec>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002b2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <menu+0x2720>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	2001      	movs	r0, #1
 8002b32:	f7fd fcc4 	bl	80004be <lcd_print>
 8002b36:	e008      	b.n	8002b4a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002b38:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <menu+0x26ec>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d104      	bne.n	8002b4a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <menu+0x2724>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	2001      	movs	r0, #1
 8002b46:	f7fd fcba 	bl	80004be <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002b4a:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <menu+0x26ec>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002b52:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <menu+0x2728>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	2002      	movs	r0, #2
 8002b58:	f7fd fcb1 	bl	80004be <lcd_print>
 8002b5c:	e008      	b.n	8002b70 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002b5e:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <menu+0x26ec>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d104      	bne.n	8002b70 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002b66:	4a51      	ldr	r2, [pc, #324]	; (8002cac <menu+0x272c>)
 8002b68:	2101      	movs	r1, #1
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f7fd fca7 	bl	80004be <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <menu+0x2730>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	220a      	movs	r2, #10
 8002b76:	494f      	ldr	r1, [pc, #316]	; (8002cb4 <menu+0x2734>)
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f00a f9f1 	bl	800cf60 <itoa>
		lcd_print(2,16,snum);
 8002b7e:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <menu+0x2734>)
 8002b80:	2110      	movs	r1, #16
 8002b82:	2002      	movs	r0, #2
 8002b84:	f7fd fc9b 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b88:	2102      	movs	r1, #2
 8002b8a:	483f      	ldr	r0, [pc, #252]	; (8002c88 <menu+0x2708>)
 8002b8c:	f005 fe74 	bl	8008878 <HAL_GPIO_ReadPin>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d115      	bne.n	8002bc2 <menu+0x2642>
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <menu+0x270c>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	f083 0301 	eor.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00e      	beq.n	8002bc2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002ba4:	4b42      	ldr	r3, [pc, #264]	; (8002cb0 <menu+0x2730>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <menu+0x2730>)
 8002bae:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <menu+0x2730>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d902      	bls.n	8002bbe <menu+0x263e>
				yukariValfTmr = 0;
 8002bb8:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <menu+0x2730>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bbe:	f002 f853 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	4830      	ldr	r0, [pc, #192]	; (8002c88 <menu+0x2708>)
 8002bc6:	f005 fe57 	bl	8008878 <HAL_GPIO_ReadPin>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d115      	bne.n	8002bfc <menu+0x267c>
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <menu+0x270c>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	f083 0301 	eor.w	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002bde:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <menu+0x2730>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <menu+0x2730>)
 8002be8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002bea:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <menu+0x2730>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <menu+0x2730>)
 8002bf4:	2205      	movs	r2, #5
 8002bf6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bf8:	f002 f836 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bfc:	2108      	movs	r1, #8
 8002bfe:	4822      	ldr	r0, [pc, #136]	; (8002c88 <menu+0x2708>)
 8002c00:	f005 fe3a 	bl	8008878 <HAL_GPIO_ReadPin>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10d      	bne.n	8002c26 <menu+0x26a6>
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <menu+0x270c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d006      	beq.n	8002c26 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <menu+0x2730>)
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <menu+0x2710>)
 8002c1e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <menu+0x2718>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <menu+0x271c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b17      	cmp	r3, #23
 8002c2c:	f040 80ac 	bne.w	8002d88 <menu+0x2808>
		if(dilSecim == 0) {
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <menu+0x26ec>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002c38:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <menu+0x2738>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7fd fc3e 	bl	80004be <lcd_print>
 8002c42:	e008      	b.n	8002c56 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <menu+0x26ec>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d104      	bne.n	8002c56 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002c4c:	4a1b      	ldr	r2, [pc, #108]	; (8002cbc <menu+0x273c>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7fd fc34 	bl	80004be <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <menu+0x26ec>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d130      	bne.n	8002cc0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <menu+0x2728>)
 8002c60:	2101      	movs	r1, #1
 8002c62:	2002      	movs	r0, #2
 8002c64:	f7fd fc2b 	bl	80004be <lcd_print>
 8002c68:	e033      	b.n	8002cd2 <menu+0x2752>
 8002c6a:	bf00      	nop
 8002c6c:	20000ca4 	.word	0x20000ca4
 8002c70:	0800e1ec 	.word	0x0800e1ec
 8002c74:	20000c97 	.word	0x20000c97
 8002c78:	0800e190 	.word	0x0800e190
 8002c7c:	0800e1a4 	.word	0x0800e1a4
 8002c80:	0800e1b4 	.word	0x0800e1b4
 8002c84:	0800e1c8 	.word	0x0800e1c8
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	20000cb2 	.word	0x20000cb2
 8002c90:	20000c18 	.word	0x20000c18
 8002c94:	20000c8a 	.word	0x20000c8a
 8002c98:	20000caf 	.word	0x20000caf
 8002c9c:	20000c84 	.word	0x20000c84
 8002ca0:	0800e1fc 	.word	0x0800e1fc
 8002ca4:	0800e210 	.word	0x0800e210
 8002ca8:	0800deb0 	.word	0x0800deb0
 8002cac:	0800e224 	.word	0x0800e224
 8002cb0:	20000c98 	.word	0x20000c98
 8002cb4:	20000c58 	.word	0x20000c58
 8002cb8:	0800e234 	.word	0x0800e234
 8002cbc:	0800e248 	.word	0x0800e248
			} else if(dilSecim == 1) {
 8002cc0:	4b98      	ldr	r3, [pc, #608]	; (8002f24 <menu+0x29a4>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d104      	bne.n	8002cd2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002cc8:	4a97      	ldr	r2, [pc, #604]	; (8002f28 <menu+0x29a8>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f7fd fbf6 	bl	80004be <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002cd2:	4b96      	ldr	r3, [pc, #600]	; (8002f2c <menu+0x29ac>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	220a      	movs	r2, #10
 8002cd8:	4995      	ldr	r1, [pc, #596]	; (8002f30 <menu+0x29b0>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f00a f940 	bl	800cf60 <itoa>
		lcd_print(2,16,snum);
 8002ce0:	4a93      	ldr	r2, [pc, #588]	; (8002f30 <menu+0x29b0>)
 8002ce2:	2110      	movs	r1, #16
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f7fd fbea 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cea:	2102      	movs	r1, #2
 8002cec:	4891      	ldr	r0, [pc, #580]	; (8002f34 <menu+0x29b4>)
 8002cee:	f005 fdc3 	bl	8008878 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d115      	bne.n	8002d24 <menu+0x27a4>
 8002cf8:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <menu+0x29b8>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00e      	beq.n	8002d24 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002d06:	4b89      	ldr	r3, [pc, #548]	; (8002f2c <menu+0x29ac>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b87      	ldr	r3, [pc, #540]	; (8002f2c <menu+0x29ac>)
 8002d10:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002d12:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <menu+0x29ac>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d902      	bls.n	8002d20 <menu+0x27a0>
				asagiValfTmr = 0;
 8002d1a:	4b84      	ldr	r3, [pc, #528]	; (8002f2c <menu+0x29ac>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d20:	f001 ffa2 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d24:	2104      	movs	r1, #4
 8002d26:	4883      	ldr	r0, [pc, #524]	; (8002f34 <menu+0x29b4>)
 8002d28:	f005 fda6 	bl	8008878 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d115      	bne.n	8002d5e <menu+0x27de>
 8002d32:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <menu+0x29b8>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002d40:	4b7a      	ldr	r3, [pc, #488]	; (8002f2c <menu+0x29ac>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <menu+0x29ac>)
 8002d4a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002d4c:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <menu+0x29ac>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d902      	bls.n	8002d5a <menu+0x27da>
		   		asagiValfTmr = 5;
 8002d54:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <menu+0x29ac>)
 8002d56:	2205      	movs	r2, #5
 8002d58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d5a:	f001 ff85 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d5e:	2108      	movs	r1, #8
 8002d60:	4874      	ldr	r0, [pc, #464]	; (8002f34 <menu+0x29b4>)
 8002d62:	f005 fd89 	bl	8008878 <HAL_GPIO_ReadPin>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10d      	bne.n	8002d88 <menu+0x2808>
 8002d6c:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <menu+0x29b8>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	f083 0301 	eor.w	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <menu+0x29ac>)
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <menu+0x29bc>)
 8002d80:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <menu+0x29c0>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002d88:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <menu+0x29c4>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b18      	cmp	r3, #24
 8002d8e:	f040 809d 	bne.w	8002ecc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <menu+0x29c8>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d113      	bne.n	8002dc2 <menu+0x2842>
			if(dilSecim == 0) {
 8002d9a:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <menu+0x29a4>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002da2:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <menu+0x29cc>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fd fb89 	bl	80004be <lcd_print>
 8002dac:	e020      	b.n	8002df0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002dae:	4b5d      	ldr	r3, [pc, #372]	; (8002f24 <menu+0x29a4>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d11c      	bne.n	8002df0 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002db6:	4a66      	ldr	r2, [pc, #408]	; (8002f50 <menu+0x29d0>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7fd fb7f 	bl	80004be <lcd_print>
 8002dc0:	e016      	b.n	8002df0 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002dc2:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <menu+0x29c8>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d112      	bne.n	8002df0 <menu+0x2870>
			if(dilSecim == 0) {
 8002dca:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <menu+0x29a4>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002dd2:	4a60      	ldr	r2, [pc, #384]	; (8002f54 <menu+0x29d4>)
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7fd fb71 	bl	80004be <lcd_print>
 8002ddc:	e008      	b.n	8002df0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002dde:	4b51      	ldr	r3, [pc, #324]	; (8002f24 <menu+0x29a4>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d104      	bne.n	8002df0 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002de6:	4a5c      	ldr	r2, [pc, #368]	; (8002f58 <menu+0x29d8>)
 8002de8:	2101      	movs	r1, #1
 8002dea:	2001      	movs	r0, #1
 8002dec:	f7fd fb67 	bl	80004be <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <menu+0x29a4>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <menu+0x29dc>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f7fd fb5e 	bl	80004be <lcd_print>
 8002e02:	e008      	b.n	8002e16 <menu+0x2896>
			} else if(dilSecim == 1) {
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <menu+0x29a4>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d104      	bne.n	8002e16 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8002e0c:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <menu+0x29a8>)
 8002e0e:	2101      	movs	r1, #1
 8002e10:	2002      	movs	r0, #2
 8002e12:	f7fd fb54 	bl	80004be <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002e16:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <menu+0x29e0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	4944      	ldr	r1, [pc, #272]	; (8002f30 <menu+0x29b0>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f00a f89e 	bl	800cf60 <itoa>
		lcd_print(2, 16, snum);
 8002e24:	4a42      	ldr	r2, [pc, #264]	; (8002f30 <menu+0x29b0>)
 8002e26:	2110      	movs	r1, #16
 8002e28:	2002      	movs	r0, #2
 8002e2a:	f7fd fb48 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4840      	ldr	r0, [pc, #256]	; (8002f34 <menu+0x29b4>)
 8002e32:	f005 fd21 	bl	8008878 <HAL_GPIO_ReadPin>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d115      	bne.n	8002e68 <menu+0x28e8>
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <menu+0x29b8>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002e4a:	4b45      	ldr	r3, [pc, #276]	; (8002f60 <menu+0x29e0>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <menu+0x29e0>)
 8002e54:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002e56:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <menu+0x29e0>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d902      	bls.n	8002e64 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8002e5e:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <menu+0x29e0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e64:	f001 ff00 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e68:	2104      	movs	r1, #4
 8002e6a:	4832      	ldr	r0, [pc, #200]	; (8002f34 <menu+0x29b4>)
 8002e6c:	f005 fd04 	bl	8008878 <HAL_GPIO_ReadPin>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d115      	bne.n	8002ea2 <menu+0x2922>
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <menu+0x29b8>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	f083 0301 	eor.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00e      	beq.n	8002ea2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <menu+0x29e0>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <menu+0x29e0>)
 8002e8e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002e90:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <menu+0x29e0>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d902      	bls.n	8002e9e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <menu+0x29e0>)
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e9e:	f001 fee3 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	4823      	ldr	r0, [pc, #140]	; (8002f34 <menu+0x29b4>)
 8002ea6:	f005 fce7 	bl	8008878 <HAL_GPIO_ReadPin>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10d      	bne.n	8002ecc <menu+0x294c>
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <menu+0x29b8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f083 0301 	eor.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <menu+0x29e0>)
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <menu+0x29bc>)
 8002ec4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <menu+0x29c0>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <menu+0x29c4>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b19      	cmp	r3, #25
 8002ed2:	f040 80c4 	bne.w	800305e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <menu+0x29c8>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d113      	bne.n	8002f06 <menu+0x2986>
			if(dilSecim == 0) {
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <menu+0x29a4>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <menu+0x29e4>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	2001      	movs	r0, #1
 8002eec:	f7fd fae7 	bl	80004be <lcd_print>
 8002ef0:	e047      	b.n	8002f82 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <menu+0x29a4>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d143      	bne.n	8002f82 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <menu+0x29e8>)
 8002efc:	2101      	movs	r1, #1
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fd fadd 	bl	80004be <lcd_print>
 8002f04:	e03d      	b.n	8002f82 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <menu+0x29c8>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d139      	bne.n	8002f82 <menu+0x2a02>
			if(dilSecim == 0) {
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <menu+0x29a4>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d12c      	bne.n	8002f70 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <menu+0x29ec>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7fd facf 	bl	80004be <lcd_print>
 8002f20:	e02f      	b.n	8002f82 <menu+0x2a02>
 8002f22:	bf00      	nop
 8002f24:	20000ca4 	.word	0x20000ca4
 8002f28:	0800e224 	.word	0x0800e224
 8002f2c:	20000c99 	.word	0x20000c99
 8002f30:	20000c58 	.word	0x20000c58
 8002f34:	40010800 	.word	0x40010800
 8002f38:	20000cb2 	.word	0x20000cb2
 8002f3c:	20000c18 	.word	0x20000c18
 8002f40:	20000caf 	.word	0x20000caf
 8002f44:	20000c84 	.word	0x20000c84
 8002f48:	20000c93 	.word	0x20000c93
 8002f4c:	0800e25c 	.word	0x0800e25c
 8002f50:	0800e270 	.word	0x0800e270
 8002f54:	0800e284 	.word	0x0800e284
 8002f58:	0800e298 	.word	0x0800e298
 8002f5c:	0800deb0 	.word	0x0800deb0
 8002f60:	20000c9a 	.word	0x20000c9a
 8002f64:	0800e2ac 	.word	0x0800e2ac
 8002f68:	0800e2c0 	.word	0x0800e2c0
 8002f6c:	0800e2d4 	.word	0x0800e2d4
			} else if(dilSecim == 1) {
 8002f70:	4b73      	ldr	r3, [pc, #460]	; (8003140 <menu+0x2bc0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d104      	bne.n	8002f82 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8002f78:	4a72      	ldr	r2, [pc, #456]	; (8003144 <menu+0x2bc4>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f7fd fa9e 	bl	80004be <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8002f82:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <menu+0x2bc0>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8002f8a:	4a6f      	ldr	r2, [pc, #444]	; (8003148 <menu+0x2bc8>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f7fd fa95 	bl	80004be <lcd_print>
 8002f94:	e008      	b.n	8002fa8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8002f96:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <menu+0x2bc0>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d104      	bne.n	8002fa8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8002f9e:	4a6b      	ldr	r2, [pc, #428]	; (800314c <menu+0x2bcc>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f7fd fa8b 	bl	80004be <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002fa8:	4b69      	ldr	r3, [pc, #420]	; (8003150 <menu+0x2bd0>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	220a      	movs	r2, #10
 8002fae:	4969      	ldr	r1, [pc, #420]	; (8003154 <menu+0x2bd4>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f009 ffd5 	bl	800cf60 <itoa>
		lcd_print(2,16,snum);
 8002fb6:	4a67      	ldr	r2, [pc, #412]	; (8003154 <menu+0x2bd4>)
 8002fb8:	2110      	movs	r1, #16
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f7fd fa7f 	bl	80004be <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4865      	ldr	r0, [pc, #404]	; (8003158 <menu+0x2bd8>)
 8002fc4:	f005 fc58 	bl	8008878 <HAL_GPIO_ReadPin>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d115      	bne.n	8002ffa <menu+0x2a7a>
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <menu+0x2bdc>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	f083 0301 	eor.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002fdc:	4b5c      	ldr	r3, [pc, #368]	; (8003150 <menu+0x2bd0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <menu+0x2bd0>)
 8002fe6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002fe8:	4b59      	ldr	r3, [pc, #356]	; (8003150 <menu+0x2bd0>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b05      	cmp	r3, #5
 8002fee:	d902      	bls.n	8002ff6 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8002ff0:	4b57      	ldr	r3, [pc, #348]	; (8003150 <menu+0x2bd0>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ff6:	f001 fe37 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	4856      	ldr	r0, [pc, #344]	; (8003158 <menu+0x2bd8>)
 8002ffe:	f005 fc3b 	bl	8008878 <HAL_GPIO_ReadPin>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d115      	bne.n	8003034 <menu+0x2ab4>
 8003008:	4b54      	ldr	r3, [pc, #336]	; (800315c <menu+0x2bdc>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	f083 0301 	eor.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00e      	beq.n	8003034 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003016:	4b4e      	ldr	r3, [pc, #312]	; (8003150 <menu+0x2bd0>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3b01      	subs	r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <menu+0x2bd0>)
 8003020:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003022:	4b4b      	ldr	r3, [pc, #300]	; (8003150 <menu+0x2bd0>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b06      	cmp	r3, #6
 8003028:	d902      	bls.n	8003030 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <menu+0x2bd0>)
 800302c:	2205      	movs	r2, #5
 800302e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003030:	f001 fe1a 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003034:	2108      	movs	r1, #8
 8003036:	4848      	ldr	r0, [pc, #288]	; (8003158 <menu+0x2bd8>)
 8003038:	f005 fc1e 	bl	8008878 <HAL_GPIO_ReadPin>
 800303c:	4603      	mov	r3, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	d10d      	bne.n	800305e <menu+0x2ade>
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <menu+0x2bdc>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	f083 0301 	eor.w	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <menu+0x2bd0>)
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	4b42      	ldr	r3, [pc, #264]	; (8003160 <menu+0x2be0>)
 8003056:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <menu+0x2be4>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <menu+0x2be8>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b1a      	cmp	r3, #26
 8003064:	f040 80ec 	bne.w	8003240 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <menu+0x2bc0>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003070:	4a3e      	ldr	r2, [pc, #248]	; (800316c <menu+0x2bec>)
 8003072:	2101      	movs	r1, #1
 8003074:	2001      	movs	r0, #1
 8003076:	f7fd fa22 	bl	80004be <lcd_print>
 800307a:	e008      	b.n	800308e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 800307c:	4b30      	ldr	r3, [pc, #192]	; (8003140 <menu+0x2bc0>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d104      	bne.n	800308e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003084:	4a3a      	ldr	r2, [pc, #232]	; (8003170 <menu+0x2bf0>)
 8003086:	2101      	movs	r1, #1
 8003088:	2001      	movs	r0, #1
 800308a:	f7fd fa18 	bl	80004be <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <menu+0x2bf4>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b63      	cmp	r3, #99	; 0x63
 8003094:	d91e      	bls.n	80030d4 <menu+0x2b54>
			if(dilSecim == 0) {
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <menu+0x2bc0>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <menu+0x2bc8>)
 80030a0:	2101      	movs	r1, #1
 80030a2:	2002      	movs	r0, #2
 80030a4:	f7fd fa0b 	bl	80004be <lcd_print>
			}
			if(dilSecim == 1) {
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <menu+0x2bc0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d104      	bne.n	80030ba <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80030b0:	4a26      	ldr	r2, [pc, #152]	; (800314c <menu+0x2bcc>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	2002      	movs	r0, #2
 80030b6:	f7fd fa02 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <menu+0x2bf4>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	220a      	movs	r2, #10
 80030c0:	4924      	ldr	r1, [pc, #144]	; (8003154 <menu+0x2bd4>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f009 ff4c 	bl	800cf60 <itoa>
			lcd_print(2,14,snum);
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <menu+0x2bd4>)
 80030ca:	210e      	movs	r1, #14
 80030cc:	2002      	movs	r0, #2
 80030ce:	f7fd f9f6 	bl	80004be <lcd_print>
 80030d2:	e066      	b.n	80031a2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <menu+0x2bf4>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b09      	cmp	r3, #9
 80030da:	d923      	bls.n	8003124 <menu+0x2ba4>
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <menu+0x2bf4>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b63      	cmp	r3, #99	; 0x63
 80030e2:	d81f      	bhi.n	8003124 <menu+0x2ba4>
			if(dilSecim == 0) {
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <menu+0x2bc0>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <menu+0x2bc8>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	2002      	movs	r0, #2
 80030f2:	f7fd f9e4 	bl	80004be <lcd_print>
 80030f6:	e008      	b.n	800310a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <menu+0x2bc0>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d104      	bne.n	800310a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003100:	4a12      	ldr	r2, [pc, #72]	; (800314c <menu+0x2bcc>)
 8003102:	2101      	movs	r1, #1
 8003104:	2002      	movs	r0, #2
 8003106:	f7fd f9da 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <menu+0x2bf4>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	220a      	movs	r2, #10
 8003110:	4910      	ldr	r1, [pc, #64]	; (8003154 <menu+0x2bd4>)
 8003112:	4618      	mov	r0, r3
 8003114:	f009 ff24 	bl	800cf60 <itoa>
			lcd_print(2, 15, snum);
 8003118:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <menu+0x2bd4>)
 800311a:	210f      	movs	r1, #15
 800311c:	2002      	movs	r0, #2
 800311e:	f7fd f9ce 	bl	80004be <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003122:	e03e      	b.n	80031a2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <menu+0x2bf4>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b09      	cmp	r3, #9
 800312a:	d83a      	bhi.n	80031a2 <menu+0x2c22>
			if(dilSecim == 0) {
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <menu+0x2bc0>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d121      	bne.n	8003178 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <menu+0x2bc8>)
 8003136:	2101      	movs	r1, #1
 8003138:	2002      	movs	r0, #2
 800313a:	f7fd f9c0 	bl	80004be <lcd_print>
 800313e:	e024      	b.n	800318a <menu+0x2c0a>
 8003140:	20000ca4 	.word	0x20000ca4
 8003144:	0800e2e8 	.word	0x0800e2e8
 8003148:	0800deb0 	.word	0x0800deb0
 800314c:	0800e224 	.word	0x0800e224
 8003150:	20000c9b 	.word	0x20000c9b
 8003154:	20000c58 	.word	0x20000c58
 8003158:	40010800 	.word	0x40010800
 800315c:	20000cb2 	.word	0x20000cb2
 8003160:	20000c18 	.word	0x20000c18
 8003164:	20000caf 	.word	0x20000caf
 8003168:	20000c84 	.word	0x20000c84
 800316c:	0800e2fc 	.word	0x0800e2fc
 8003170:	0800e310 	.word	0x0800e310
 8003174:	20000c9c 	.word	0x20000c9c
			} else if(dilSecim == 1) {
 8003178:	4b8f      	ldr	r3, [pc, #572]	; (80033b8 <menu+0x2e38>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d104      	bne.n	800318a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003180:	4a8e      	ldr	r2, [pc, #568]	; (80033bc <menu+0x2e3c>)
 8003182:	2101      	movs	r1, #1
 8003184:	2002      	movs	r0, #2
 8003186:	f7fd f99a 	bl	80004be <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800318a:	4b8d      	ldr	r3, [pc, #564]	; (80033c0 <menu+0x2e40>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	220a      	movs	r2, #10
 8003190:	498c      	ldr	r1, [pc, #560]	; (80033c4 <menu+0x2e44>)
 8003192:	4618      	mov	r0, r3
 8003194:	f009 fee4 	bl	800cf60 <itoa>
			lcd_print(2, 16, snum);
 8003198:	4a8a      	ldr	r2, [pc, #552]	; (80033c4 <menu+0x2e44>)
 800319a:	2110      	movs	r1, #16
 800319c:	2002      	movs	r0, #2
 800319e:	f7fd f98e 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a2:	2102      	movs	r1, #2
 80031a4:	4888      	ldr	r0, [pc, #544]	; (80033c8 <menu+0x2e48>)
 80031a6:	f005 fb67 	bl	8008878 <HAL_GPIO_ReadPin>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d115      	bne.n	80031dc <menu+0x2c5c>
 80031b0:	4b86      	ldr	r3, [pc, #536]	; (80033cc <menu+0x2e4c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00e      	beq.n	80031dc <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80031be:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <menu+0x2e40>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b7e      	ldr	r3, [pc, #504]	; (80033c0 <menu+0x2e40>)
 80031c8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80031ca:	4b7d      	ldr	r3, [pc, #500]	; (80033c0 <menu+0x2e40>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2bb4      	cmp	r3, #180	; 0xb4
 80031d0:	d902      	bls.n	80031d8 <menu+0x2c58>
				makineCalismaTmr = 0;
 80031d2:	4b7b      	ldr	r3, [pc, #492]	; (80033c0 <menu+0x2e40>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031d8:	f001 fd46 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031dc:	2104      	movs	r1, #4
 80031de:	487a      	ldr	r0, [pc, #488]	; (80033c8 <menu+0x2e48>)
 80031e0:	f005 fb4a 	bl	8008878 <HAL_GPIO_ReadPin>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d115      	bne.n	8003216 <menu+0x2c96>
 80031ea:	4b78      	ldr	r3, [pc, #480]	; (80033cc <menu+0x2e4c>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f083 0301 	eor.w	r3, r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80031f8:	4b71      	ldr	r3, [pc, #452]	; (80033c0 <menu+0x2e40>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <menu+0x2e40>)
 8003202:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003204:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <menu+0x2e40>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2bb5      	cmp	r3, #181	; 0xb5
 800320a:	d902      	bls.n	8003212 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <menu+0x2e40>)
 800320e:	22b4      	movs	r2, #180	; 0xb4
 8003210:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003212:	f001 fd29 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003216:	2108      	movs	r1, #8
 8003218:	486b      	ldr	r0, [pc, #428]	; (80033c8 <menu+0x2e48>)
 800321a:	f005 fb2d 	bl	8008878 <HAL_GPIO_ReadPin>
 800321e:	4603      	mov	r3, r0
 8003220:	2b01      	cmp	r3, #1
 8003222:	d10d      	bne.n	8003240 <menu+0x2cc0>
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <menu+0x2e4c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	f083 0301 	eor.w	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d006      	beq.n	8003240 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <menu+0x2e40>)
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <menu+0x2e50>)
 8003238:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800323a:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <menu+0x2e54>)
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003240:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <menu+0x2e58>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b1b      	cmp	r3, #27
 8003246:	f040 8083 	bne.w	8003350 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800324a:	4a64      	ldr	r2, [pc, #400]	; (80033dc <menu+0x2e5c>)
 800324c:	2101      	movs	r1, #1
 800324e:	2001      	movs	r0, #1
 8003250:	f7fd f935 	bl	80004be <lcd_print>

		if(buzzer == 0) {
 8003254:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <menu+0x2e60>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d113      	bne.n	8003284 <menu+0x2d04>
			if(dilSecim == 0) {
 800325c:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <menu+0x2e38>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003264:	4a5f      	ldr	r2, [pc, #380]	; (80033e4 <menu+0x2e64>)
 8003266:	2101      	movs	r1, #1
 8003268:	2002      	movs	r0, #2
 800326a:	f7fd f928 	bl	80004be <lcd_print>
 800326e:	e020      	b.n	80032b2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003270:	4b51      	ldr	r3, [pc, #324]	; (80033b8 <menu+0x2e38>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d11c      	bne.n	80032b2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003278:	4a5b      	ldr	r2, [pc, #364]	; (80033e8 <menu+0x2e68>)
 800327a:	2101      	movs	r1, #1
 800327c:	2002      	movs	r0, #2
 800327e:	f7fd f91e 	bl	80004be <lcd_print>
 8003282:	e016      	b.n	80032b2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003284:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <menu+0x2e60>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d112      	bne.n	80032b2 <menu+0x2d32>
			if(dilSecim == 0) {
 800328c:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <menu+0x2e38>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003294:	4a55      	ldr	r2, [pc, #340]	; (80033ec <menu+0x2e6c>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f7fd f910 	bl	80004be <lcd_print>
 800329e:	e008      	b.n	80032b2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80032a0:	4b45      	ldr	r3, [pc, #276]	; (80033b8 <menu+0x2e38>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d104      	bne.n	80032b2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80032a8:	4a51      	ldr	r2, [pc, #324]	; (80033f0 <menu+0x2e70>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2002      	movs	r0, #2
 80032ae:	f7fd f906 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b2:	2102      	movs	r1, #2
 80032b4:	4844      	ldr	r0, [pc, #272]	; (80033c8 <menu+0x2e48>)
 80032b6:	f005 fadf 	bl	8008878 <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d115      	bne.n	80032ec <menu+0x2d6c>
 80032c0:	4b42      	ldr	r3, [pc, #264]	; (80033cc <menu+0x2e4c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <menu+0x2d6c>
			buzzer = buzzer + 1;
 80032ce:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <menu+0x2e60>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <menu+0x2e60>)
 80032d8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <menu+0x2e60>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d902      	bls.n	80032e8 <menu+0x2d68>
				buzzer = 0;
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <menu+0x2e60>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e8:	f001 fcbe 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ec:	2104      	movs	r1, #4
 80032ee:	4836      	ldr	r0, [pc, #216]	; (80033c8 <menu+0x2e48>)
 80032f0:	f005 fac2 	bl	8008878 <HAL_GPIO_ReadPin>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d115      	bne.n	8003326 <menu+0x2da6>
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <menu+0x2e4c>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <menu+0x2e60>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <menu+0x2e60>)
 8003312:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <menu+0x2e60>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <menu+0x2da2>
		   		buzzer = 1;
 800331c:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <menu+0x2e60>)
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003322:	f001 fca1 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003326:	2108      	movs	r1, #8
 8003328:	4827      	ldr	r0, [pc, #156]	; (80033c8 <menu+0x2e48>)
 800332a:	f005 faa5 	bl	8008878 <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10d      	bne.n	8003350 <menu+0x2dd0>
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <menu+0x2e4c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <menu+0x2e60>)
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <menu+0x2e50>)
 8003348:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <menu+0x2e54>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <menu+0x2e58>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b1c      	cmp	r3, #28
 8003356:	f040 80ab 	bne.w	80034b0 <menu+0x2f30>
		calismaSayModu = 0;
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <menu+0x2e74>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <menu+0x2e78>)
 8003362:	2101      	movs	r1, #1
 8003364:	2001      	movs	r0, #1
 8003366:	f7fd f8aa 	bl	80004be <lcd_print>

		if(demoMode == 0) {
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <menu+0x2e7c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d113      	bne.n	800339a <menu+0x2e1a>
			if(dilSecim == 0) {
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <menu+0x2e38>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d105      	bne.n	8003386 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800337a:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <menu+0x2e64>)
 800337c:	2101      	movs	r1, #1
 800337e:	2002      	movs	r0, #2
 8003380:	f7fd f89d 	bl	80004be <lcd_print>
 8003384:	e045      	b.n	8003412 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <menu+0x2e38>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d141      	bne.n	8003412 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800338e:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <menu+0x2e68>)
 8003390:	2101      	movs	r1, #1
 8003392:	2002      	movs	r0, #2
 8003394:	f7fd f893 	bl	80004be <lcd_print>
 8003398:	e03b      	b.n	8003412 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <menu+0x2e7c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d137      	bne.n	8003412 <menu+0x2e92>
			if(dilSecim == 0){
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <menu+0x2e38>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d12a      	bne.n	8003400 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <menu+0x2e6c>)
 80033ac:	2101      	movs	r1, #1
 80033ae:	2002      	movs	r0, #2
 80033b0:	f7fd f885 	bl	80004be <lcd_print>
 80033b4:	e02d      	b.n	8003412 <menu+0x2e92>
 80033b6:	bf00      	nop
 80033b8:	20000ca4 	.word	0x20000ca4
 80033bc:	0800e224 	.word	0x0800e224
 80033c0:	20000c9c 	.word	0x20000c9c
 80033c4:	20000c58 	.word	0x20000c58
 80033c8:	40010800 	.word	0x40010800
 80033cc:	20000cb2 	.word	0x20000cb2
 80033d0:	20000c18 	.word	0x20000c18
 80033d4:	20000caf 	.word	0x20000caf
 80033d8:	20000c84 	.word	0x20000c84
 80033dc:	0800e324 	.word	0x0800e324
 80033e0:	20000ca0 	.word	0x20000ca0
 80033e4:	0800dc4c 	.word	0x0800dc4c
 80033e8:	0800dc60 	.word	0x0800dc60
 80033ec:	0800dcac 	.word	0x0800dcac
 80033f0:	0800dcc0 	.word	0x0800dcc0
 80033f4:	20000ca3 	.word	0x20000ca3
 80033f8:	0800e338 	.word	0x0800e338
 80033fc:	20000ca2 	.word	0x20000ca2
			} else if(dilSecim == 1) {
 8003400:	4b71      	ldr	r3, [pc, #452]	; (80035c8 <menu+0x3048>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d104      	bne.n	8003412 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003408:	4a70      	ldr	r2, [pc, #448]	; (80035cc <menu+0x304c>)
 800340a:	2101      	movs	r1, #1
 800340c:	2002      	movs	r0, #2
 800340e:	f7fd f856 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003412:	2102      	movs	r1, #2
 8003414:	486e      	ldr	r0, [pc, #440]	; (80035d0 <menu+0x3050>)
 8003416:	f005 fa2f 	bl	8008878 <HAL_GPIO_ReadPin>
 800341a:	4603      	mov	r3, r0
 800341c:	2b01      	cmp	r3, #1
 800341e:	d115      	bne.n	800344c <menu+0x2ecc>
 8003420:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <menu+0x3054>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800342e:	4b6a      	ldr	r3, [pc, #424]	; (80035d8 <menu+0x3058>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <menu+0x3058>)
 8003438:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <menu+0x3058>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d902      	bls.n	8003448 <menu+0x2ec8>
				demoMode = 0;
 8003442:	4b65      	ldr	r3, [pc, #404]	; (80035d8 <menu+0x3058>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003448:	f001 fc0e 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800344c:	2104      	movs	r1, #4
 800344e:	4860      	ldr	r0, [pc, #384]	; (80035d0 <menu+0x3050>)
 8003450:	f005 fa12 	bl	8008878 <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d115      	bne.n	8003486 <menu+0x2f06>
 800345a:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <menu+0x3054>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00e      	beq.n	8003486 <menu+0x2f06>
			demoMode = demoMode - 1;
 8003468:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <menu+0x3058>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	3b01      	subs	r3, #1
 800346e:	b2da      	uxtb	r2, r3
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <menu+0x3058>)
 8003472:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003474:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <menu+0x3058>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <menu+0x2f02>
		   		demoMode = 1;
 800347c:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <menu+0x3058>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003482:	f001 fbf1 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003486:	2108      	movs	r1, #8
 8003488:	4851      	ldr	r0, [pc, #324]	; (80035d0 <menu+0x3050>)
 800348a:	f005 f9f5 	bl	8008878 <HAL_GPIO_ReadPin>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10d      	bne.n	80034b0 <menu+0x2f30>
 8003494:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <menu+0x3054>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	f083 0301 	eor.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80034a2:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <menu+0x3058>)
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	4b4d      	ldr	r3, [pc, #308]	; (80035dc <menu+0x305c>)
 80034a8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80034aa:	4b4d      	ldr	r3, [pc, #308]	; (80035e0 <menu+0x3060>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <menu+0x3064>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b1d      	cmp	r3, #29
 80034b6:	f040 8132 	bne.w	800371e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80034ba:	4b4b      	ldr	r3, [pc, #300]	; (80035e8 <menu+0x3068>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <menu+0x2f6a>
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <menu+0x306c>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <menu+0x2f6a>
 80034ca:	4b49      	ldr	r3, [pc, #292]	; (80035f0 <menu+0x3070>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <menu+0x2f6a>
 80034d2:	4b48      	ldr	r3, [pc, #288]	; (80035f4 <menu+0x3074>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <menu+0x2f6a>
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <menu+0x3078>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <menu+0x2f6a>
			calismaSayisiYar = 0;
 80034e2:	4b46      	ldr	r3, [pc, #280]	; (80035fc <menu+0x307c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e002      	b.n	80034f0 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <menu+0x307c>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <menu+0x3080>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d154      	bne.n	80035a2 <menu+0x3022>
			if(dilSecim == 0) {
 80034f8:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <menu+0x3048>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003500:	4a40      	ldr	r2, [pc, #256]	; (8003604 <menu+0x3084>)
 8003502:	2101      	movs	r1, #1
 8003504:	2001      	movs	r0, #1
 8003506:	f7fc ffda 	bl	80004be <lcd_print>
 800350a:	e008      	b.n	800351e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800350c:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <menu+0x3048>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d104      	bne.n	800351e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8003514:	4a3c      	ldr	r2, [pc, #240]	; (8003608 <menu+0x3088>)
 8003516:	2101      	movs	r1, #1
 8003518:	2001      	movs	r0, #1
 800351a:	f7fc ffd0 	bl	80004be <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <menu+0x3078>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	220a      	movs	r2, #10
 8003524:	4939      	ldr	r1, [pc, #228]	; (800360c <menu+0x308c>)
 8003526:	4618      	mov	r0, r3
 8003528:	f009 fd1a 	bl	800cf60 <itoa>
			lcd_print(2, 12, snum);
 800352c:	4a37      	ldr	r2, [pc, #220]	; (800360c <menu+0x308c>)
 800352e:	210c      	movs	r1, #12
 8003530:	2002      	movs	r0, #2
 8003532:	f7fc ffc4 	bl	80004be <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <menu+0x3074>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	220a      	movs	r2, #10
 800353c:	4933      	ldr	r1, [pc, #204]	; (800360c <menu+0x308c>)
 800353e:	4618      	mov	r0, r3
 8003540:	f009 fd0e 	bl	800cf60 <itoa>
			lcd_print(2, 13, snum);
 8003544:	4a31      	ldr	r2, [pc, #196]	; (800360c <menu+0x308c>)
 8003546:	210d      	movs	r1, #13
 8003548:	2002      	movs	r0, #2
 800354a:	f7fc ffb8 	bl	80004be <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <menu+0x3070>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	220a      	movs	r2, #10
 8003554:	492d      	ldr	r1, [pc, #180]	; (800360c <menu+0x308c>)
 8003556:	4618      	mov	r0, r3
 8003558:	f009 fd02 	bl	800cf60 <itoa>
			lcd_print(2, 14, snum);
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <menu+0x308c>)
 800355e:	210e      	movs	r1, #14
 8003560:	2002      	movs	r0, #2
 8003562:	f7fc ffac 	bl	80004be <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <menu+0x306c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	220a      	movs	r2, #10
 800356c:	4927      	ldr	r1, [pc, #156]	; (800360c <menu+0x308c>)
 800356e:	4618      	mov	r0, r3
 8003570:	f009 fcf6 	bl	800cf60 <itoa>
			lcd_print(2, 15, snum);
 8003574:	4a25      	ldr	r2, [pc, #148]	; (800360c <menu+0x308c>)
 8003576:	210f      	movs	r1, #15
 8003578:	2002      	movs	r0, #2
 800357a:	f7fc ffa0 	bl	80004be <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <menu+0x3068>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	220a      	movs	r2, #10
 8003584:	4921      	ldr	r1, [pc, #132]	; (800360c <menu+0x308c>)
 8003586:	4618      	mov	r0, r3
 8003588:	f009 fcea 	bl	800cf60 <itoa>
			lcd_print(2, 16, snum);
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <menu+0x308c>)
 800358e:	2110      	movs	r1, #16
 8003590:	2002      	movs	r0, #2
 8003592:	f7fc ff94 	bl	80004be <lcd_print>

			lcd_print(2, 1, "           ");
 8003596:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <menu+0x3090>)
 8003598:	2101      	movs	r1, #1
 800359a:	2002      	movs	r0, #2
 800359c:	f7fc ff8f 	bl	80004be <lcd_print>
 80035a0:	e048      	b.n	8003634 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <menu+0x3080>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d144      	bne.n	8003634 <menu+0x30b4>
			if(dilSecim == 0) {
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <menu+0x3048>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d132      	bne.n	8003618 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <menu+0x3084>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7fc ff81 	bl	80004be <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <menu+0x3094>)
 80035be:	2101      	movs	r1, #1
 80035c0:	2002      	movs	r0, #2
 80035c2:	f7fc ff7c 	bl	80004be <lcd_print>
 80035c6:	e035      	b.n	8003634 <menu+0x30b4>
 80035c8:	20000ca4 	.word	0x20000ca4
 80035cc:	0800dcc0 	.word	0x0800dcc0
 80035d0:	40010800 	.word	0x40010800
 80035d4:	20000cb2 	.word	0x20000cb2
 80035d8:	20000ca2 	.word	0x20000ca2
 80035dc:	20000c18 	.word	0x20000c18
 80035e0:	20000caf 	.word	0x20000caf
 80035e4:	20000c84 	.word	0x20000c84
 80035e8:	20000c81 	.word	0x20000c81
 80035ec:	20000c82 	.word	0x20000c82
 80035f0:	20000941 	.word	0x20000941
 80035f4:	20000942 	.word	0x20000942
 80035f8:	20000c83 	.word	0x20000c83
 80035fc:	20000cc4 	.word	0x20000cc4
 8003600:	20000ca3 	.word	0x20000ca3
 8003604:	0800e348 	.word	0x0800e348
 8003608:	0800e35c 	.word	0x0800e35c
 800360c:	20000c58 	.word	0x20000c58
 8003610:	0800e370 	.word	0x0800e370
 8003614:	0800e37c 	.word	0x0800e37c
			} else if(dilSecim == 1) {
 8003618:	4b95      	ldr	r3, [pc, #596]	; (8003870 <menu+0x32f0>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d109      	bne.n	8003634 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003620:	4a94      	ldr	r2, [pc, #592]	; (8003874 <menu+0x32f4>)
 8003622:	2101      	movs	r1, #1
 8003624:	2001      	movs	r0, #1
 8003626:	f7fc ff4a 	bl	80004be <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800362a:	4a93      	ldr	r2, [pc, #588]	; (8003878 <menu+0x32f8>)
 800362c:	2101      	movs	r1, #1
 800362e:	2002      	movs	r0, #2
 8003630:	f7fc ff45 	bl	80004be <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003634:	2102      	movs	r1, #2
 8003636:	4891      	ldr	r0, [pc, #580]	; (800387c <menu+0x32fc>)
 8003638:	f005 f91e 	bl	8008878 <HAL_GPIO_ReadPin>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d119      	bne.n	8003676 <menu+0x30f6>
 8003642:	4b8f      	ldr	r3, [pc, #572]	; (8003880 <menu+0x3300>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f083 0301 	eor.w	r3, r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d012      	beq.n	8003676 <menu+0x30f6>
 8003650:	4b8c      	ldr	r3, [pc, #560]	; (8003884 <menu+0x3304>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00e      	beq.n	8003676 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8003658:	4b8b      	ldr	r3, [pc, #556]	; (8003888 <menu+0x3308>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	4b89      	ldr	r3, [pc, #548]	; (8003888 <menu+0x3308>)
 8003662:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003664:	4b88      	ldr	r3, [pc, #544]	; (8003888 <menu+0x3308>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d902      	bls.n	8003672 <menu+0x30f2>
				calismaSayModu = 0;
 800366c:	4b86      	ldr	r3, [pc, #536]	; (8003888 <menu+0x3308>)
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003672:	f001 faf9 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003676:	2104      	movs	r1, #4
 8003678:	4880      	ldr	r0, [pc, #512]	; (800387c <menu+0x32fc>)
 800367a:	f005 f8fd 	bl	8008878 <HAL_GPIO_ReadPin>
 800367e:	4603      	mov	r3, r0
 8003680:	2b01      	cmp	r3, #1
 8003682:	d119      	bne.n	80036b8 <menu+0x3138>
 8003684:	4b7e      	ldr	r3, [pc, #504]	; (8003880 <menu+0x3300>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <menu+0x3138>
 8003692:	4b7c      	ldr	r3, [pc, #496]	; (8003884 <menu+0x3304>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800369a:	4b7b      	ldr	r3, [pc, #492]	; (8003888 <menu+0x3308>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	3b01      	subs	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b79      	ldr	r3, [pc, #484]	; (8003888 <menu+0x3308>)
 80036a4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80036a6:	4b78      	ldr	r3, [pc, #480]	; (8003888 <menu+0x3308>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <menu+0x3134>
		   		calismaSayModu = 1;
 80036ae:	4b76      	ldr	r3, [pc, #472]	; (8003888 <menu+0x3308>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036b4:	f001 fad8 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b8:	2108      	movs	r1, #8
 80036ba:	4870      	ldr	r0, [pc, #448]	; (800387c <menu+0x32fc>)
 80036bc:	f005 f8dc 	bl	8008878 <HAL_GPIO_ReadPin>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d12b      	bne.n	800371e <menu+0x319e>
 80036c6:	4b6e      	ldr	r3, [pc, #440]	; (8003880 <menu+0x3300>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d024      	beq.n	800371e <menu+0x319e>
			eepromData[32] = 0;
 80036d4:	4b6d      	ldr	r3, [pc, #436]	; (800388c <menu+0x330c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80036dc:	4b6b      	ldr	r3, [pc, #428]	; (800388c <menu+0x330c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80036e2:	4b6a      	ldr	r3, [pc, #424]	; (800388c <menu+0x330c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80036e8:	4b68      	ldr	r3, [pc, #416]	; (800388c <menu+0x330c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80036ee:	4b67      	ldr	r3, [pc, #412]	; (800388c <menu+0x330c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80036f4:	4b66      	ldr	r3, [pc, #408]	; (8003890 <menu+0x3310>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80036fa:	4b66      	ldr	r3, [pc, #408]	; (8003894 <menu+0x3314>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003700:	4b65      	ldr	r3, [pc, #404]	; (8003898 <menu+0x3318>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003706:	4b65      	ldr	r3, [pc, #404]	; (800389c <menu+0x331c>)
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800370c:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <menu+0x3320>)
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003712:	4b5d      	ldr	r3, [pc, #372]	; (8003888 <menu+0x3308>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003718:	4b62      	ldr	r3, [pc, #392]	; (80038a4 <menu+0x3324>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800371e:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <menu+0x3328>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b1e      	cmp	r3, #30
 8003724:	d16f      	bne.n	8003806 <menu+0x3286>
		calismaSayModu = 0;
 8003726:	4b58      	ldr	r3, [pc, #352]	; (8003888 <menu+0x3308>)
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <menu+0x32f0>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003734:	4a5d      	ldr	r2, [pc, #372]	; (80038ac <menu+0x332c>)
 8003736:	2101      	movs	r1, #1
 8003738:	2001      	movs	r0, #1
 800373a:	f7fc fec0 	bl	80004be <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800373e:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <menu+0x3330>)
 8003740:	2101      	movs	r1, #1
 8003742:	2002      	movs	r0, #2
 8003744:	f7fc febb 	bl	80004be <lcd_print>
 8003748:	e00d      	b.n	8003766 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800374a:	4b49      	ldr	r3, [pc, #292]	; (8003870 <menu+0x32f0>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d109      	bne.n	8003766 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8003752:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <menu+0x3334>)
 8003754:	2101      	movs	r1, #1
 8003756:	2001      	movs	r0, #1
 8003758:	f7fc feb1 	bl	80004be <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800375c:	4a56      	ldr	r2, [pc, #344]	; (80038b8 <menu+0x3338>)
 800375e:	2101      	movs	r1, #1
 8003760:	2002      	movs	r0, #2
 8003762:	f7fc feac 	bl	80004be <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003766:	2102      	movs	r1, #2
 8003768:	4844      	ldr	r0, [pc, #272]	; (800387c <menu+0x32fc>)
 800376a:	f005 f885 	bl	8008878 <HAL_GPIO_ReadPin>
 800376e:	4603      	mov	r3, r0
 8003770:	2b01      	cmp	r3, #1
 8003772:	d115      	bne.n	80037a0 <menu+0x3220>
 8003774:	4b42      	ldr	r3, [pc, #264]	; (8003880 <menu+0x3300>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	f083 0301 	eor.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00e      	beq.n	80037a0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <menu+0x32f0>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <menu+0x32f0>)
 800378c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <menu+0x32f0>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d902      	bls.n	800379c <menu+0x321c>
				dilSecim = 0;
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <menu+0x32f0>)
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800379c:	f001 fa64 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037a0:	2104      	movs	r1, #4
 80037a2:	4836      	ldr	r0, [pc, #216]	; (800387c <menu+0x32fc>)
 80037a4:	f005 f868 	bl	8008878 <HAL_GPIO_ReadPin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d115      	bne.n	80037da <menu+0x325a>
 80037ae:	4b34      	ldr	r3, [pc, #208]	; (8003880 <menu+0x3300>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <menu+0x325a>
			dilSecim = dilSecim - 1;
 80037bc:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <menu+0x32f0>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <menu+0x32f0>)
 80037c6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <menu+0x32f0>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <menu+0x3256>
		   		dilSecim = 1;
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <menu+0x32f0>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80037d6:	f001 fa47 	bl	8004c68 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037da:	2108      	movs	r1, #8
 80037dc:	4827      	ldr	r0, [pc, #156]	; (800387c <menu+0x32fc>)
 80037de:	f005 f84b 	bl	8008878 <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10e      	bne.n	8003806 <menu+0x3286>
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <menu+0x3300>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	f083 0301 	eor.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <menu+0x3286>
			eepromData[33] = dilSecim;
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <menu+0x32f0>)
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <menu+0x330c>)
 80037fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <menu+0x3324>)
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <menu+0x3328>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b1f      	cmp	r3, #31
 800380c:	d12e      	bne.n	800386c <menu+0x32ec>
		if(dilSecim == 0) {
 800380e:	4b18      	ldr	r3, [pc, #96]	; (8003870 <menu+0x32f0>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <menu+0x333c>)
 8003818:	2101      	movs	r1, #1
 800381a:	2001      	movs	r0, #1
 800381c:	f7fc fe4f 	bl	80004be <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <menu+0x3340>)
 8003822:	2101      	movs	r1, #1
 8003824:	2002      	movs	r0, #2
 8003826:	f7fc fe4a 	bl	80004be <lcd_print>
 800382a:	e00d      	b.n	8003848 <menu+0x32c8>
		} else if(dilSecim == 1) {
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <menu+0x32f0>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d109      	bne.n	8003848 <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003834:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <menu+0x3344>)
 8003836:	2101      	movs	r1, #1
 8003838:	2001      	movs	r0, #1
 800383a:	f7fc fe40 	bl	80004be <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <menu+0x3348>)
 8003840:	2101      	movs	r1, #1
 8003842:	2002      	movs	r0, #2
 8003844:	f7fc fe3b 	bl	80004be <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003848:	2108      	movs	r1, #8
 800384a:	480c      	ldr	r0, [pc, #48]	; (800387c <menu+0x32fc>)
 800384c:	f005 f814 	bl	8008878 <HAL_GPIO_ReadPin>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10a      	bne.n	800386c <menu+0x32ec>
			menuGiris = 0;
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <menu+0x334c>)
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 800385c:	f7fc fe44 	bl	80004e8 <lcd_clear>
			HAL_Delay(500);
 8003860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003864:	f004 fa38 	bl	8007cd8 <HAL_Delay>
			NVIC_SystemReset();
 8003868:	f7fc fe5a 	bl	8000520 <__NVIC_SystemReset>
		}
	}
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000ca4 	.word	0x20000ca4
 8003874:	0800e35c 	.word	0x0800e35c
 8003878:	0800e390 	.word	0x0800e390
 800387c:	40010800 	.word	0x40010800
 8003880:	20000cb2 	.word	0x20000cb2
 8003884:	20000cc4 	.word	0x20000cc4
 8003888:	20000ca3 	.word	0x20000ca3
 800388c:	20000c18 	.word	0x20000c18
 8003890:	20000c83 	.word	0x20000c83
 8003894:	20000942 	.word	0x20000942
 8003898:	20000941 	.word	0x20000941
 800389c:	20000c82 	.word	0x20000c82
 80038a0:	20000c81 	.word	0x20000c81
 80038a4:	20000caf 	.word	0x20000caf
 80038a8:	20000c84 	.word	0x20000c84
 80038ac:	0800e3a4 	.word	0x0800e3a4
 80038b0:	0800e3b8 	.word	0x0800e3b8
 80038b4:	0800e3cc 	.word	0x0800e3cc
 80038b8:	0800e3e0 	.word	0x0800e3e0
 80038bc:	0800e3f4 	.word	0x0800e3f4
 80038c0:	0800e408 	.word	0x0800e408
 80038c4:	0800e41c 	.word	0x0800e41c
 80038c8:	0800e430 	.word	0x0800e430
 80038cc:	20000ca1 	.word	0x20000ca1

080038d0 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 80038da:	48a9      	ldr	r0, [pc, #676]	; (8003b80 <loadMenuTexts+0x2b0>)
 80038dc:	f7fc fe36 	bl	800054c <copyText>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4aa8      	ldr	r2, [pc, #672]	; (8003b84 <loadMenuTexts+0x2b4>)
 80038e4:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 80038e6:	48a8      	ldr	r0, [pc, #672]	; (8003b88 <loadMenuTexts+0x2b8>)
 80038e8:	f7fc fe30 	bl	800054c <copyText>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4aa7      	ldr	r2, [pc, #668]	; (8003b8c <loadMenuTexts+0x2bc>)
 80038f0:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 80038f2:	48a7      	ldr	r0, [pc, #668]	; (8003b90 <loadMenuTexts+0x2c0>)
 80038f4:	f7fc fe2a 	bl	800054c <copyText>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4aa6      	ldr	r2, [pc, #664]	; (8003b94 <loadMenuTexts+0x2c4>)
 80038fc:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 80038fe:	48a6      	ldr	r0, [pc, #664]	; (8003b98 <loadMenuTexts+0x2c8>)
 8003900:	f7fc fe24 	bl	800054c <copyText>
 8003904:	4603      	mov	r3, r0
 8003906:	4aa5      	ldr	r2, [pc, #660]	; (8003b9c <loadMenuTexts+0x2cc>)
 8003908:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 800390a:	48a5      	ldr	r0, [pc, #660]	; (8003ba0 <loadMenuTexts+0x2d0>)
 800390c:	f7fc fe1e 	bl	800054c <copyText>
 8003910:	4603      	mov	r3, r0
 8003912:	4aa4      	ldr	r2, [pc, #656]	; (8003ba4 <loadMenuTexts+0x2d4>)
 8003914:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003916:	48a4      	ldr	r0, [pc, #656]	; (8003ba8 <loadMenuTexts+0x2d8>)
 8003918:	f7fc fe18 	bl	800054c <copyText>
 800391c:	4603      	mov	r3, r0
 800391e:	4aa3      	ldr	r2, [pc, #652]	; (8003bac <loadMenuTexts+0x2dc>)
 8003920:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003922:	48a3      	ldr	r0, [pc, #652]	; (8003bb0 <loadMenuTexts+0x2e0>)
 8003924:	f7fc fe12 	bl	800054c <copyText>
 8003928:	4603      	mov	r3, r0
 800392a:	4aa2      	ldr	r2, [pc, #648]	; (8003bb4 <loadMenuTexts+0x2e4>)
 800392c:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f040 82d1 	bne.w	8003ed8 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003936:	48a0      	ldr	r0, [pc, #640]	; (8003bb8 <loadMenuTexts+0x2e8>)
 8003938:	f7fc fe08 	bl	800054c <copyText>
 800393c:	4603      	mov	r3, r0
 800393e:	4a9f      	ldr	r2, [pc, #636]	; (8003bbc <loadMenuTexts+0x2ec>)
 8003940:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003942:	489f      	ldr	r0, [pc, #636]	; (8003bc0 <loadMenuTexts+0x2f0>)
 8003944:	f7fc fe02 	bl	800054c <copyText>
 8003948:	4603      	mov	r3, r0
 800394a:	4a9e      	ldr	r2, [pc, #632]	; (8003bc4 <loadMenuTexts+0x2f4>)
 800394c:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 800394e:	489e      	ldr	r0, [pc, #632]	; (8003bc8 <loadMenuTexts+0x2f8>)
 8003950:	f7fc fdfc 	bl	800054c <copyText>
 8003954:	4603      	mov	r3, r0
 8003956:	4a9d      	ldr	r2, [pc, #628]	; (8003bcc <loadMenuTexts+0x2fc>)
 8003958:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 800395a:	489d      	ldr	r0, [pc, #628]	; (8003bd0 <loadMenuTexts+0x300>)
 800395c:	f7fc fdf6 	bl	800054c <copyText>
 8003960:	4603      	mov	r3, r0
 8003962:	4a9c      	ldr	r2, [pc, #624]	; (8003bd4 <loadMenuTexts+0x304>)
 8003964:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003966:	489c      	ldr	r0, [pc, #624]	; (8003bd8 <loadMenuTexts+0x308>)
 8003968:	f7fc fdf0 	bl	800054c <copyText>
 800396c:	4603      	mov	r3, r0
 800396e:	4a9b      	ldr	r2, [pc, #620]	; (8003bdc <loadMenuTexts+0x30c>)
 8003970:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003972:	489b      	ldr	r0, [pc, #620]	; (8003be0 <loadMenuTexts+0x310>)
 8003974:	f7fc fdea 	bl	800054c <copyText>
 8003978:	4603      	mov	r3, r0
 800397a:	4a9a      	ldr	r2, [pc, #616]	; (8003be4 <loadMenuTexts+0x314>)
 800397c:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 800397e:	489a      	ldr	r0, [pc, #616]	; (8003be8 <loadMenuTexts+0x318>)
 8003980:	f7fc fde4 	bl	800054c <copyText>
 8003984:	4603      	mov	r3, r0
 8003986:	4a99      	ldr	r2, [pc, #612]	; (8003bec <loadMenuTexts+0x31c>)
 8003988:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 800398a:	4899      	ldr	r0, [pc, #612]	; (8003bf0 <loadMenuTexts+0x320>)
 800398c:	f7fc fdde 	bl	800054c <copyText>
 8003990:	4603      	mov	r3, r0
 8003992:	4a98      	ldr	r2, [pc, #608]	; (8003bf4 <loadMenuTexts+0x324>)
 8003994:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003996:	4898      	ldr	r0, [pc, #608]	; (8003bf8 <loadMenuTexts+0x328>)
 8003998:	f7fc fdd8 	bl	800054c <copyText>
 800399c:	4603      	mov	r3, r0
 800399e:	4a97      	ldr	r2, [pc, #604]	; (8003bfc <loadMenuTexts+0x32c>)
 80039a0:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 80039a2:	4897      	ldr	r0, [pc, #604]	; (8003c00 <loadMenuTexts+0x330>)
 80039a4:	f7fc fdd2 	bl	800054c <copyText>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a96      	ldr	r2, [pc, #600]	; (8003c04 <loadMenuTexts+0x334>)
 80039ac:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 80039ae:	4896      	ldr	r0, [pc, #600]	; (8003c08 <loadMenuTexts+0x338>)
 80039b0:	f7fc fdcc 	bl	800054c <copyText>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a95      	ldr	r2, [pc, #596]	; (8003c0c <loadMenuTexts+0x33c>)
 80039b8:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 80039ba:	4895      	ldr	r0, [pc, #596]	; (8003c10 <loadMenuTexts+0x340>)
 80039bc:	f7fc fdc6 	bl	800054c <copyText>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4a94      	ldr	r2, [pc, #592]	; (8003c14 <loadMenuTexts+0x344>)
 80039c4:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 80039c6:	4894      	ldr	r0, [pc, #592]	; (8003c18 <loadMenuTexts+0x348>)
 80039c8:	f7fc fdc0 	bl	800054c <copyText>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4a93      	ldr	r2, [pc, #588]	; (8003c1c <loadMenuTexts+0x34c>)
 80039d0:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 80039d2:	4893      	ldr	r0, [pc, #588]	; (8003c20 <loadMenuTexts+0x350>)
 80039d4:	f7fc fdba 	bl	800054c <copyText>
 80039d8:	4603      	mov	r3, r0
 80039da:	4a92      	ldr	r2, [pc, #584]	; (8003c24 <loadMenuTexts+0x354>)
 80039dc:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 80039de:	4892      	ldr	r0, [pc, #584]	; (8003c28 <loadMenuTexts+0x358>)
 80039e0:	f7fc fdb4 	bl	800054c <copyText>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a91      	ldr	r2, [pc, #580]	; (8003c2c <loadMenuTexts+0x35c>)
 80039e8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 80039ea:	4891      	ldr	r0, [pc, #580]	; (8003c30 <loadMenuTexts+0x360>)
 80039ec:	f7fc fdae 	bl	800054c <copyText>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <loadMenuTexts+0x364>)
 80039f4:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 80039f6:	4890      	ldr	r0, [pc, #576]	; (8003c38 <loadMenuTexts+0x368>)
 80039f8:	f7fc fda8 	bl	800054c <copyText>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4a8f      	ldr	r2, [pc, #572]	; (8003c3c <loadMenuTexts+0x36c>)
 8003a00:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003a02:	488f      	ldr	r0, [pc, #572]	; (8003c40 <loadMenuTexts+0x370>)
 8003a04:	f7fc fda2 	bl	800054c <copyText>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4a8e      	ldr	r2, [pc, #568]	; (8003c44 <loadMenuTexts+0x374>)
 8003a0c:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003a0e:	488e      	ldr	r0, [pc, #568]	; (8003c48 <loadMenuTexts+0x378>)
 8003a10:	f7fc fd9c 	bl	800054c <copyText>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a8d      	ldr	r2, [pc, #564]	; (8003c4c <loadMenuTexts+0x37c>)
 8003a18:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003a1a:	488d      	ldr	r0, [pc, #564]	; (8003c50 <loadMenuTexts+0x380>)
 8003a1c:	f7fc fd96 	bl	800054c <copyText>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a8c      	ldr	r2, [pc, #560]	; (8003c54 <loadMenuTexts+0x384>)
 8003a24:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003a26:	488c      	ldr	r0, [pc, #560]	; (8003c58 <loadMenuTexts+0x388>)
 8003a28:	f7fc fd90 	bl	800054c <copyText>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4a8b      	ldr	r2, [pc, #556]	; (8003c5c <loadMenuTexts+0x38c>)
 8003a30:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003a32:	488b      	ldr	r0, [pc, #556]	; (8003c60 <loadMenuTexts+0x390>)
 8003a34:	f7fc fd8a 	bl	800054c <copyText>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a8a      	ldr	r2, [pc, #552]	; (8003c64 <loadMenuTexts+0x394>)
 8003a3c:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003a3e:	488a      	ldr	r0, [pc, #552]	; (8003c68 <loadMenuTexts+0x398>)
 8003a40:	f7fc fd84 	bl	800054c <copyText>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4a89      	ldr	r2, [pc, #548]	; (8003c6c <loadMenuTexts+0x39c>)
 8003a48:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003a4a:	4889      	ldr	r0, [pc, #548]	; (8003c70 <loadMenuTexts+0x3a0>)
 8003a4c:	f7fc fd7e 	bl	800054c <copyText>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4a88      	ldr	r2, [pc, #544]	; (8003c74 <loadMenuTexts+0x3a4>)
 8003a54:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003a56:	4888      	ldr	r0, [pc, #544]	; (8003c78 <loadMenuTexts+0x3a8>)
 8003a58:	f7fc fd78 	bl	800054c <copyText>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a87      	ldr	r2, [pc, #540]	; (8003c7c <loadMenuTexts+0x3ac>)
 8003a60:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003a62:	4887      	ldr	r0, [pc, #540]	; (8003c80 <loadMenuTexts+0x3b0>)
 8003a64:	f7fc fd72 	bl	800054c <copyText>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a86      	ldr	r2, [pc, #536]	; (8003c84 <loadMenuTexts+0x3b4>)
 8003a6c:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003a6e:	4886      	ldr	r0, [pc, #536]	; (8003c88 <loadMenuTexts+0x3b8>)
 8003a70:	f7fc fd6c 	bl	800054c <copyText>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a85      	ldr	r2, [pc, #532]	; (8003c8c <loadMenuTexts+0x3bc>)
 8003a78:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003a7a:	4885      	ldr	r0, [pc, #532]	; (8003c90 <loadMenuTexts+0x3c0>)
 8003a7c:	f7fc fd66 	bl	800054c <copyText>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a84      	ldr	r2, [pc, #528]	; (8003c94 <loadMenuTexts+0x3c4>)
 8003a84:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003a86:	4884      	ldr	r0, [pc, #528]	; (8003c98 <loadMenuTexts+0x3c8>)
 8003a88:	f7fc fd60 	bl	800054c <copyText>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4a83      	ldr	r2, [pc, #524]	; (8003c9c <loadMenuTexts+0x3cc>)
 8003a90:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003a92:	4883      	ldr	r0, [pc, #524]	; (8003ca0 <loadMenuTexts+0x3d0>)
 8003a94:	f7fc fd5a 	bl	800054c <copyText>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4a82      	ldr	r2, [pc, #520]	; (8003ca4 <loadMenuTexts+0x3d4>)
 8003a9c:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003a9e:	4882      	ldr	r0, [pc, #520]	; (8003ca8 <loadMenuTexts+0x3d8>)
 8003aa0:	f7fc fd54 	bl	800054c <copyText>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a81      	ldr	r2, [pc, #516]	; (8003cac <loadMenuTexts+0x3dc>)
 8003aa8:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003aaa:	4881      	ldr	r0, [pc, #516]	; (8003cb0 <loadMenuTexts+0x3e0>)
 8003aac:	f7fc fd4e 	bl	800054c <copyText>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4a80      	ldr	r2, [pc, #512]	; (8003cb4 <loadMenuTexts+0x3e4>)
 8003ab4:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003ab6:	4880      	ldr	r0, [pc, #512]	; (8003cb8 <loadMenuTexts+0x3e8>)
 8003ab8:	f7fc fd48 	bl	800054c <copyText>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4a7f      	ldr	r2, [pc, #508]	; (8003cbc <loadMenuTexts+0x3ec>)
 8003ac0:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003ac2:	487f      	ldr	r0, [pc, #508]	; (8003cc0 <loadMenuTexts+0x3f0>)
 8003ac4:	f7fc fd42 	bl	800054c <copyText>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4a7e      	ldr	r2, [pc, #504]	; (8003cc4 <loadMenuTexts+0x3f4>)
 8003acc:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003ace:	487e      	ldr	r0, [pc, #504]	; (8003cc8 <loadMenuTexts+0x3f8>)
 8003ad0:	f7fc fd3c 	bl	800054c <copyText>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4a7d      	ldr	r2, [pc, #500]	; (8003ccc <loadMenuTexts+0x3fc>)
 8003ad8:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003ada:	487d      	ldr	r0, [pc, #500]	; (8003cd0 <loadMenuTexts+0x400>)
 8003adc:	f7fc fd36 	bl	800054c <copyText>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4a7c      	ldr	r2, [pc, #496]	; (8003cd4 <loadMenuTexts+0x404>)
 8003ae4:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003ae6:	487c      	ldr	r0, [pc, #496]	; (8003cd8 <loadMenuTexts+0x408>)
 8003ae8:	f7fc fd30 	bl	800054c <copyText>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a7b      	ldr	r2, [pc, #492]	; (8003cdc <loadMenuTexts+0x40c>)
 8003af0:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003af2:	487b      	ldr	r0, [pc, #492]	; (8003ce0 <loadMenuTexts+0x410>)
 8003af4:	f7fc fd2a 	bl	800054c <copyText>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4a7a      	ldr	r2, [pc, #488]	; (8003ce4 <loadMenuTexts+0x414>)
 8003afc:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003afe:	487a      	ldr	r0, [pc, #488]	; (8003ce8 <loadMenuTexts+0x418>)
 8003b00:	f7fc fd24 	bl	800054c <copyText>
 8003b04:	4603      	mov	r3, r0
 8003b06:	4a79      	ldr	r2, [pc, #484]	; (8003cec <loadMenuTexts+0x41c>)
 8003b08:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003b0a:	4879      	ldr	r0, [pc, #484]	; (8003cf0 <loadMenuTexts+0x420>)
 8003b0c:	f7fc fd1e 	bl	800054c <copyText>
 8003b10:	4603      	mov	r3, r0
 8003b12:	4a78      	ldr	r2, [pc, #480]	; (8003cf4 <loadMenuTexts+0x424>)
 8003b14:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003b16:	4878      	ldr	r0, [pc, #480]	; (8003cf8 <loadMenuTexts+0x428>)
 8003b18:	f7fc fd18 	bl	800054c <copyText>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4a77      	ldr	r2, [pc, #476]	; (8003cfc <loadMenuTexts+0x42c>)
 8003b20:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003b22:	4877      	ldr	r0, [pc, #476]	; (8003d00 <loadMenuTexts+0x430>)
 8003b24:	f7fc fd12 	bl	800054c <copyText>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4a76      	ldr	r2, [pc, #472]	; (8003d04 <loadMenuTexts+0x434>)
 8003b2c:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003b2e:	4876      	ldr	r0, [pc, #472]	; (8003d08 <loadMenuTexts+0x438>)
 8003b30:	f7fc fd0c 	bl	800054c <copyText>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4a75      	ldr	r2, [pc, #468]	; (8003d0c <loadMenuTexts+0x43c>)
 8003b38:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003b3a:	4875      	ldr	r0, [pc, #468]	; (8003d10 <loadMenuTexts+0x440>)
 8003b3c:	f7fc fd06 	bl	800054c <copyText>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4a74      	ldr	r2, [pc, #464]	; (8003d14 <loadMenuTexts+0x444>)
 8003b44:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003b46:	4874      	ldr	r0, [pc, #464]	; (8003d18 <loadMenuTexts+0x448>)
 8003b48:	f7fc fd00 	bl	800054c <copyText>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4a73      	ldr	r2, [pc, #460]	; (8003d1c <loadMenuTexts+0x44c>)
 8003b50:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003b52:	4873      	ldr	r0, [pc, #460]	; (8003d20 <loadMenuTexts+0x450>)
 8003b54:	f7fc fcfa 	bl	800054c <copyText>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <loadMenuTexts+0x454>)
 8003b5c:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003b5e:	4872      	ldr	r0, [pc, #456]	; (8003d28 <loadMenuTexts+0x458>)
 8003b60:	f7fc fcf4 	bl	800054c <copyText>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4a71      	ldr	r2, [pc, #452]	; (8003d2c <loadMenuTexts+0x45c>)
 8003b68:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003b6a:	4871      	ldr	r0, [pc, #452]	; (8003d30 <loadMenuTexts+0x460>)
 8003b6c:	f7fc fcee 	bl	800054c <copyText>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4a70      	ldr	r2, [pc, #448]	; (8003d34 <loadMenuTexts+0x464>)
 8003b74:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003b76:	4870      	ldr	r0, [pc, #448]	; (8003d38 <loadMenuTexts+0x468>)
 8003b78:	f7fc fce8 	bl	800054c <copyText>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	e0dd      	b.n	8003d3c <loadMenuTexts+0x46c>
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000ce8 	.word	0x20000ce8
 8003b88:	20000010 	.word	0x20000010
 8003b8c:	20000cec 	.word	0x20000cec
 8003b90:	20000020 	.word	0x20000020
 8003b94:	20000d44 	.word	0x20000d44
 8003b98:	20000030 	.word	0x20000030
 8003b9c:	20000d74 	.word	0x20000d74
 8003ba0:	20000040 	.word	0x20000040
 8003ba4:	20000d7c 	.word	0x20000d7c
 8003ba8:	20000050 	.word	0x20000050
 8003bac:	20000df4 	.word	0x20000df4
 8003bb0:	20000060 	.word	0x20000060
 8003bb4:	20000df8 	.word	0x20000df8
 8003bb8:	20000070 	.word	0x20000070
 8003bbc:	20000cf0 	.word	0x20000cf0
 8003bc0:	20000080 	.word	0x20000080
 8003bc4:	20000cf4 	.word	0x20000cf4
 8003bc8:	20000090 	.word	0x20000090
 8003bcc:	20000cf8 	.word	0x20000cf8
 8003bd0:	200000a0 	.word	0x200000a0
 8003bd4:	20000cfc 	.word	0x20000cfc
 8003bd8:	200000b0 	.word	0x200000b0
 8003bdc:	20000d00 	.word	0x20000d00
 8003be0:	200000c0 	.word	0x200000c0
 8003be4:	20000d04 	.word	0x20000d04
 8003be8:	200000d0 	.word	0x200000d0
 8003bec:	20000d08 	.word	0x20000d08
 8003bf0:	200000e0 	.word	0x200000e0
 8003bf4:	20000d0c 	.word	0x20000d0c
 8003bf8:	200000f0 	.word	0x200000f0
 8003bfc:	20000d10 	.word	0x20000d10
 8003c00:	20000100 	.word	0x20000100
 8003c04:	20000d14 	.word	0x20000d14
 8003c08:	20000110 	.word	0x20000110
 8003c0c:	20000d18 	.word	0x20000d18
 8003c10:	20000120 	.word	0x20000120
 8003c14:	20000d1c 	.word	0x20000d1c
 8003c18:	20000130 	.word	0x20000130
 8003c1c:	20000d20 	.word	0x20000d20
 8003c20:	20000140 	.word	0x20000140
 8003c24:	20000d24 	.word	0x20000d24
 8003c28:	20000150 	.word	0x20000150
 8003c2c:	20000d28 	.word	0x20000d28
 8003c30:	20000160 	.word	0x20000160
 8003c34:	20000d2c 	.word	0x20000d2c
 8003c38:	20000170 	.word	0x20000170
 8003c3c:	20000d30 	.word	0x20000d30
 8003c40:	20000180 	.word	0x20000180
 8003c44:	20000d34 	.word	0x20000d34
 8003c48:	20000190 	.word	0x20000190
 8003c4c:	20000d38 	.word	0x20000d38
 8003c50:	200001a0 	.word	0x200001a0
 8003c54:	20000d3c 	.word	0x20000d3c
 8003c58:	200001b0 	.word	0x200001b0
 8003c5c:	20000d40 	.word	0x20000d40
 8003c60:	200001c0 	.word	0x200001c0
 8003c64:	20000d48 	.word	0x20000d48
 8003c68:	200001d0 	.word	0x200001d0
 8003c6c:	20000d4c 	.word	0x20000d4c
 8003c70:	200001e0 	.word	0x200001e0
 8003c74:	20000d50 	.word	0x20000d50
 8003c78:	200001f0 	.word	0x200001f0
 8003c7c:	20000d54 	.word	0x20000d54
 8003c80:	20000200 	.word	0x20000200
 8003c84:	20000d58 	.word	0x20000d58
 8003c88:	20000210 	.word	0x20000210
 8003c8c:	20000d5c 	.word	0x20000d5c
 8003c90:	20000220 	.word	0x20000220
 8003c94:	20000d60 	.word	0x20000d60
 8003c98:	20000230 	.word	0x20000230
 8003c9c:	20000d64 	.word	0x20000d64
 8003ca0:	20000240 	.word	0x20000240
 8003ca4:	20000d68 	.word	0x20000d68
 8003ca8:	20000250 	.word	0x20000250
 8003cac:	20000d6c 	.word	0x20000d6c
 8003cb0:	20000260 	.word	0x20000260
 8003cb4:	20000d70 	.word	0x20000d70
 8003cb8:	20000270 	.word	0x20000270
 8003cbc:	20000d78 	.word	0x20000d78
 8003cc0:	20000280 	.word	0x20000280
 8003cc4:	20000d80 	.word	0x20000d80
 8003cc8:	20000290 	.word	0x20000290
 8003ccc:	20000d84 	.word	0x20000d84
 8003cd0:	200002a0 	.word	0x200002a0
 8003cd4:	20000d88 	.word	0x20000d88
 8003cd8:	200002b0 	.word	0x200002b0
 8003cdc:	20000d8c 	.word	0x20000d8c
 8003ce0:	200002c0 	.word	0x200002c0
 8003ce4:	20000d90 	.word	0x20000d90
 8003ce8:	200002d0 	.word	0x200002d0
 8003cec:	20000d94 	.word	0x20000d94
 8003cf0:	200002e0 	.word	0x200002e0
 8003cf4:	20000d98 	.word	0x20000d98
 8003cf8:	200002f0 	.word	0x200002f0
 8003cfc:	20000d9c 	.word	0x20000d9c
 8003d00:	20000300 	.word	0x20000300
 8003d04:	20000da0 	.word	0x20000da0
 8003d08:	20000310 	.word	0x20000310
 8003d0c:	20000da4 	.word	0x20000da4
 8003d10:	20000320 	.word	0x20000320
 8003d14:	20000da8 	.word	0x20000da8
 8003d18:	20000330 	.word	0x20000330
 8003d1c:	20000dac 	.word	0x20000dac
 8003d20:	20000340 	.word	0x20000340
 8003d24:	20000db0 	.word	0x20000db0
 8003d28:	20000350 	.word	0x20000350
 8003d2c:	20000db4 	.word	0x20000db4
 8003d30:	20000360 	.word	0x20000360
 8003d34:	20000db8 	.word	0x20000db8
 8003d38:	20000370 	.word	0x20000370
 8003d3c:	4a3d      	ldr	r2, [pc, #244]	; (8003e34 <loadMenuTexts+0x564>)
 8003d3e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003d40:	483d      	ldr	r0, [pc, #244]	; (8003e38 <loadMenuTexts+0x568>)
 8003d42:	f7fc fc03 	bl	800054c <copyText>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a3c      	ldr	r2, [pc, #240]	; (8003e3c <loadMenuTexts+0x56c>)
 8003d4a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003d4c:	483c      	ldr	r0, [pc, #240]	; (8003e40 <loadMenuTexts+0x570>)
 8003d4e:	f7fc fbfd 	bl	800054c <copyText>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <loadMenuTexts+0x574>)
 8003d56:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003d58:	483b      	ldr	r0, [pc, #236]	; (8003e48 <loadMenuTexts+0x578>)
 8003d5a:	f7fc fbf7 	bl	800054c <copyText>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <loadMenuTexts+0x57c>)
 8003d62:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003d64:	483a      	ldr	r0, [pc, #232]	; (8003e50 <loadMenuTexts+0x580>)
 8003d66:	f7fc fbf1 	bl	800054c <copyText>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4a39      	ldr	r2, [pc, #228]	; (8003e54 <loadMenuTexts+0x584>)
 8003d6e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003d70:	4839      	ldr	r0, [pc, #228]	; (8003e58 <loadMenuTexts+0x588>)
 8003d72:	f7fc fbeb 	bl	800054c <copyText>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4a38      	ldr	r2, [pc, #224]	; (8003e5c <loadMenuTexts+0x58c>)
 8003d7a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003d7c:	4838      	ldr	r0, [pc, #224]	; (8003e60 <loadMenuTexts+0x590>)
 8003d7e:	f7fc fbe5 	bl	800054c <copyText>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4a37      	ldr	r2, [pc, #220]	; (8003e64 <loadMenuTexts+0x594>)
 8003d86:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003d88:	4837      	ldr	r0, [pc, #220]	; (8003e68 <loadMenuTexts+0x598>)
 8003d8a:	f7fc fbdf 	bl	800054c <copyText>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4a36      	ldr	r2, [pc, #216]	; (8003e6c <loadMenuTexts+0x59c>)
 8003d92:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003d94:	4836      	ldr	r0, [pc, #216]	; (8003e70 <loadMenuTexts+0x5a0>)
 8003d96:	f7fc fbd9 	bl	800054c <copyText>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4a35      	ldr	r2, [pc, #212]	; (8003e74 <loadMenuTexts+0x5a4>)
 8003d9e:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003da0:	4835      	ldr	r0, [pc, #212]	; (8003e78 <loadMenuTexts+0x5a8>)
 8003da2:	f7fc fbd3 	bl	800054c <copyText>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <loadMenuTexts+0x5ac>)
 8003daa:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003dac:	4834      	ldr	r0, [pc, #208]	; (8003e80 <loadMenuTexts+0x5b0>)
 8003dae:	f7fc fbcd 	bl	800054c <copyText>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <loadMenuTexts+0x5b4>)
 8003db6:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003db8:	4833      	ldr	r0, [pc, #204]	; (8003e88 <loadMenuTexts+0x5b8>)
 8003dba:	f7fc fbc7 	bl	800054c <copyText>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4a32      	ldr	r2, [pc, #200]	; (8003e8c <loadMenuTexts+0x5bc>)
 8003dc2:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003dc4:	4832      	ldr	r0, [pc, #200]	; (8003e90 <loadMenuTexts+0x5c0>)
 8003dc6:	f7fc fbc1 	bl	800054c <copyText>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4a31      	ldr	r2, [pc, #196]	; (8003e94 <loadMenuTexts+0x5c4>)
 8003dce:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8003dd0:	4831      	ldr	r0, [pc, #196]	; (8003e98 <loadMenuTexts+0x5c8>)
 8003dd2:	f7fc fbbb 	bl	800054c <copyText>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4a30      	ldr	r2, [pc, #192]	; (8003e9c <loadMenuTexts+0x5cc>)
 8003dda:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8003ddc:	4830      	ldr	r0, [pc, #192]	; (8003ea0 <loadMenuTexts+0x5d0>)
 8003dde:	f7fc fbb5 	bl	800054c <copyText>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4a2f      	ldr	r2, [pc, #188]	; (8003ea4 <loadMenuTexts+0x5d4>)
 8003de6:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8003de8:	482f      	ldr	r0, [pc, #188]	; (8003ea8 <loadMenuTexts+0x5d8>)
 8003dea:	f7fc fbaf 	bl	800054c <copyText>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <loadMenuTexts+0x5dc>)
 8003df2:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8003df4:	482e      	ldr	r0, [pc, #184]	; (8003eb0 <loadMenuTexts+0x5e0>)
 8003df6:	f7fc fba9 	bl	800054c <copyText>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4a2d      	ldr	r2, [pc, #180]	; (8003eb4 <loadMenuTexts+0x5e4>)
 8003dfe:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8003e00:	482d      	ldr	r0, [pc, #180]	; (8003eb8 <loadMenuTexts+0x5e8>)
 8003e02:	f7fc fba3 	bl	800054c <copyText>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <loadMenuTexts+0x5ec>)
 8003e0a:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8003e0c:	482c      	ldr	r0, [pc, #176]	; (8003ec0 <loadMenuTexts+0x5f0>)
 8003e0e:	f7fc fb9d 	bl	800054c <copyText>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <loadMenuTexts+0x5f4>)
 8003e16:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8003e18:	482b      	ldr	r0, [pc, #172]	; (8003ec8 <loadMenuTexts+0x5f8>)
 8003e1a:	f7fc fb97 	bl	800054c <copyText>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <loadMenuTexts+0x5fc>)
 8003e22:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8003e24:	482a      	ldr	r0, [pc, #168]	; (8003ed0 <loadMenuTexts+0x600>)
 8003e26:	f7fc fb91 	bl	800054c <copyText>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <loadMenuTexts+0x604>)
 8003e2e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8003e30:	e2d3      	b.n	80043da <loadMenuTexts+0xb0a>
 8003e32:	bf00      	nop
 8003e34:	20000dbc 	.word	0x20000dbc
 8003e38:	20000380 	.word	0x20000380
 8003e3c:	20000dc0 	.word	0x20000dc0
 8003e40:	20000390 	.word	0x20000390
 8003e44:	20000dc4 	.word	0x20000dc4
 8003e48:	200003a0 	.word	0x200003a0
 8003e4c:	20000dc8 	.word	0x20000dc8
 8003e50:	200003b0 	.word	0x200003b0
 8003e54:	20000dcc 	.word	0x20000dcc
 8003e58:	200003c0 	.word	0x200003c0
 8003e5c:	20000dd0 	.word	0x20000dd0
 8003e60:	200003d0 	.word	0x200003d0
 8003e64:	20000dd4 	.word	0x20000dd4
 8003e68:	200003e0 	.word	0x200003e0
 8003e6c:	20000dd8 	.word	0x20000dd8
 8003e70:	200003f0 	.word	0x200003f0
 8003e74:	20000ddc 	.word	0x20000ddc
 8003e78:	20000400 	.word	0x20000400
 8003e7c:	20000de0 	.word	0x20000de0
 8003e80:	20000410 	.word	0x20000410
 8003e84:	20000de4 	.word	0x20000de4
 8003e88:	20000420 	.word	0x20000420
 8003e8c:	20000de8 	.word	0x20000de8
 8003e90:	20000430 	.word	0x20000430
 8003e94:	20000dec 	.word	0x20000dec
 8003e98:	20000440 	.word	0x20000440
 8003e9c:	20000df0 	.word	0x20000df0
 8003ea0:	20000450 	.word	0x20000450
 8003ea4:	20000dfc 	.word	0x20000dfc
 8003ea8:	20000460 	.word	0x20000460
 8003eac:	20000e00 	.word	0x20000e00
 8003eb0:	20000470 	.word	0x20000470
 8003eb4:	20000e04 	.word	0x20000e04
 8003eb8:	20000480 	.word	0x20000480
 8003ebc:	20000e08 	.word	0x20000e08
 8003ec0:	20000490 	.word	0x20000490
 8003ec4:	20000e0c 	.word	0x20000e0c
 8003ec8:	200004a0 	.word	0x200004a0
 8003ecc:	20000e10 	.word	0x20000e10
 8003ed0:	200004b0 	.word	0x200004b0
 8003ed4:	20000e14 	.word	0x20000e14
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8003ed8:	48a9      	ldr	r0, [pc, #676]	; (8004180 <loadMenuTexts+0x8b0>)
 8003eda:	f7fc fb37 	bl	800054c <copyText>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4aa8      	ldr	r2, [pc, #672]	; (8004184 <loadMenuTexts+0x8b4>)
 8003ee2:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8003ee4:	48a8      	ldr	r0, [pc, #672]	; (8004188 <loadMenuTexts+0x8b8>)
 8003ee6:	f7fc fb31 	bl	800054c <copyText>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4aa7      	ldr	r2, [pc, #668]	; (800418c <loadMenuTexts+0x8bc>)
 8003eee:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8003ef0:	48a7      	ldr	r0, [pc, #668]	; (8004190 <loadMenuTexts+0x8c0>)
 8003ef2:	f7fc fb2b 	bl	800054c <copyText>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4aa6      	ldr	r2, [pc, #664]	; (8004194 <loadMenuTexts+0x8c4>)
 8003efa:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8003efc:	48a6      	ldr	r0, [pc, #664]	; (8004198 <loadMenuTexts+0x8c8>)
 8003efe:	f7fc fb25 	bl	800054c <copyText>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4aa5      	ldr	r2, [pc, #660]	; (800419c <loadMenuTexts+0x8cc>)
 8003f06:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8003f08:	48a5      	ldr	r0, [pc, #660]	; (80041a0 <loadMenuTexts+0x8d0>)
 8003f0a:	f7fc fb1f 	bl	800054c <copyText>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4aa4      	ldr	r2, [pc, #656]	; (80041a4 <loadMenuTexts+0x8d4>)
 8003f12:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8003f14:	48a4      	ldr	r0, [pc, #656]	; (80041a8 <loadMenuTexts+0x8d8>)
 8003f16:	f7fc fb19 	bl	800054c <copyText>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4aa3      	ldr	r2, [pc, #652]	; (80041ac <loadMenuTexts+0x8dc>)
 8003f1e:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8003f20:	48a3      	ldr	r0, [pc, #652]	; (80041b0 <loadMenuTexts+0x8e0>)
 8003f22:	f7fc fb13 	bl	800054c <copyText>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4aa2      	ldr	r2, [pc, #648]	; (80041b4 <loadMenuTexts+0x8e4>)
 8003f2a:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8003f2c:	48a2      	ldr	r0, [pc, #648]	; (80041b8 <loadMenuTexts+0x8e8>)
 8003f2e:	f7fc fb0d 	bl	800054c <copyText>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4aa1      	ldr	r2, [pc, #644]	; (80041bc <loadMenuTexts+0x8ec>)
 8003f36:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8003f38:	48a1      	ldr	r0, [pc, #644]	; (80041c0 <loadMenuTexts+0x8f0>)
 8003f3a:	f7fc fb07 	bl	800054c <copyText>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4aa0      	ldr	r2, [pc, #640]	; (80041c4 <loadMenuTexts+0x8f4>)
 8003f42:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8003f44:	48a0      	ldr	r0, [pc, #640]	; (80041c8 <loadMenuTexts+0x8f8>)
 8003f46:	f7fc fb01 	bl	800054c <copyText>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a9f      	ldr	r2, [pc, #636]	; (80041cc <loadMenuTexts+0x8fc>)
 8003f4e:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8003f50:	489f      	ldr	r0, [pc, #636]	; (80041d0 <loadMenuTexts+0x900>)
 8003f52:	f7fc fafb 	bl	800054c <copyText>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a9e      	ldr	r2, [pc, #632]	; (80041d4 <loadMenuTexts+0x904>)
 8003f5a:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8003f5c:	489e      	ldr	r0, [pc, #632]	; (80041d8 <loadMenuTexts+0x908>)
 8003f5e:	f7fc faf5 	bl	800054c <copyText>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a9d      	ldr	r2, [pc, #628]	; (80041dc <loadMenuTexts+0x90c>)
 8003f66:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8003f68:	489d      	ldr	r0, [pc, #628]	; (80041e0 <loadMenuTexts+0x910>)
 8003f6a:	f7fc faef 	bl	800054c <copyText>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a9c      	ldr	r2, [pc, #624]	; (80041e4 <loadMenuTexts+0x914>)
 8003f72:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8003f74:	489c      	ldr	r0, [pc, #624]	; (80041e8 <loadMenuTexts+0x918>)
 8003f76:	f7fc fae9 	bl	800054c <copyText>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4a9b      	ldr	r2, [pc, #620]	; (80041ec <loadMenuTexts+0x91c>)
 8003f7e:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8003f80:	489b      	ldr	r0, [pc, #620]	; (80041f0 <loadMenuTexts+0x920>)
 8003f82:	f7fc fae3 	bl	800054c <copyText>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a9a      	ldr	r2, [pc, #616]	; (80041f4 <loadMenuTexts+0x924>)
 8003f8a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8003f8c:	489a      	ldr	r0, [pc, #616]	; (80041f8 <loadMenuTexts+0x928>)
 8003f8e:	f7fc fadd 	bl	800054c <copyText>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a99      	ldr	r2, [pc, #612]	; (80041fc <loadMenuTexts+0x92c>)
 8003f96:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8003f98:	4899      	ldr	r0, [pc, #612]	; (8004200 <loadMenuTexts+0x930>)
 8003f9a:	f7fc fad7 	bl	800054c <copyText>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a98      	ldr	r2, [pc, #608]	; (8004204 <loadMenuTexts+0x934>)
 8003fa2:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8003fa4:	4898      	ldr	r0, [pc, #608]	; (8004208 <loadMenuTexts+0x938>)
 8003fa6:	f7fc fad1 	bl	800054c <copyText>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a97      	ldr	r2, [pc, #604]	; (800420c <loadMenuTexts+0x93c>)
 8003fae:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8003fb0:	4897      	ldr	r0, [pc, #604]	; (8004210 <loadMenuTexts+0x940>)
 8003fb2:	f7fc facb 	bl	800054c <copyText>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a96      	ldr	r2, [pc, #600]	; (8004214 <loadMenuTexts+0x944>)
 8003fba:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8003fbc:	4896      	ldr	r0, [pc, #600]	; (8004218 <loadMenuTexts+0x948>)
 8003fbe:	f7fc fac5 	bl	800054c <copyText>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a95      	ldr	r2, [pc, #596]	; (800421c <loadMenuTexts+0x94c>)
 8003fc6:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8003fc8:	4895      	ldr	r0, [pc, #596]	; (8004220 <loadMenuTexts+0x950>)
 8003fca:	f7fc fabf 	bl	800054c <copyText>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a94      	ldr	r2, [pc, #592]	; (8004224 <loadMenuTexts+0x954>)
 8003fd2:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8003fd4:	4894      	ldr	r0, [pc, #592]	; (8004228 <loadMenuTexts+0x958>)
 8003fd6:	f7fc fab9 	bl	800054c <copyText>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a93      	ldr	r2, [pc, #588]	; (800422c <loadMenuTexts+0x95c>)
 8003fde:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8003fe0:	4893      	ldr	r0, [pc, #588]	; (8004230 <loadMenuTexts+0x960>)
 8003fe2:	f7fc fab3 	bl	800054c <copyText>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a92      	ldr	r2, [pc, #584]	; (8004234 <loadMenuTexts+0x964>)
 8003fea:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8003fec:	4892      	ldr	r0, [pc, #584]	; (8004238 <loadMenuTexts+0x968>)
 8003fee:	f7fc faad 	bl	800054c <copyText>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a91      	ldr	r2, [pc, #580]	; (800423c <loadMenuTexts+0x96c>)
 8003ff6:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8003ff8:	4891      	ldr	r0, [pc, #580]	; (8004240 <loadMenuTexts+0x970>)
 8003ffa:	f7fc faa7 	bl	800054c <copyText>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a90      	ldr	r2, [pc, #576]	; (8004244 <loadMenuTexts+0x974>)
 8004002:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8004004:	4890      	ldr	r0, [pc, #576]	; (8004248 <loadMenuTexts+0x978>)
 8004006:	f7fc faa1 	bl	800054c <copyText>
 800400a:	4603      	mov	r3, r0
 800400c:	4a8f      	ldr	r2, [pc, #572]	; (800424c <loadMenuTexts+0x97c>)
 800400e:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8004010:	488f      	ldr	r0, [pc, #572]	; (8004250 <loadMenuTexts+0x980>)
 8004012:	f7fc fa9b 	bl	800054c <copyText>
 8004016:	4603      	mov	r3, r0
 8004018:	4a8e      	ldr	r2, [pc, #568]	; (8004254 <loadMenuTexts+0x984>)
 800401a:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 800401c:	488e      	ldr	r0, [pc, #568]	; (8004258 <loadMenuTexts+0x988>)
 800401e:	f7fc fa95 	bl	800054c <copyText>
 8004022:	4603      	mov	r3, r0
 8004024:	4a8d      	ldr	r2, [pc, #564]	; (800425c <loadMenuTexts+0x98c>)
 8004026:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8004028:	488d      	ldr	r0, [pc, #564]	; (8004260 <loadMenuTexts+0x990>)
 800402a:	f7fc fa8f 	bl	800054c <copyText>
 800402e:	4603      	mov	r3, r0
 8004030:	4a8c      	ldr	r2, [pc, #560]	; (8004264 <loadMenuTexts+0x994>)
 8004032:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8004034:	488c      	ldr	r0, [pc, #560]	; (8004268 <loadMenuTexts+0x998>)
 8004036:	f7fc fa89 	bl	800054c <copyText>
 800403a:	4603      	mov	r3, r0
 800403c:	4a8b      	ldr	r2, [pc, #556]	; (800426c <loadMenuTexts+0x99c>)
 800403e:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8004040:	488b      	ldr	r0, [pc, #556]	; (8004270 <loadMenuTexts+0x9a0>)
 8004042:	f7fc fa83 	bl	800054c <copyText>
 8004046:	4603      	mov	r3, r0
 8004048:	4a8a      	ldr	r2, [pc, #552]	; (8004274 <loadMenuTexts+0x9a4>)
 800404a:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 800404c:	488a      	ldr	r0, [pc, #552]	; (8004278 <loadMenuTexts+0x9a8>)
 800404e:	f7fc fa7d 	bl	800054c <copyText>
 8004052:	4603      	mov	r3, r0
 8004054:	4a89      	ldr	r2, [pc, #548]	; (800427c <loadMenuTexts+0x9ac>)
 8004056:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8004058:	4889      	ldr	r0, [pc, #548]	; (8004280 <loadMenuTexts+0x9b0>)
 800405a:	f7fc fa77 	bl	800054c <copyText>
 800405e:	4603      	mov	r3, r0
 8004060:	4a88      	ldr	r2, [pc, #544]	; (8004284 <loadMenuTexts+0x9b4>)
 8004062:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8004064:	4888      	ldr	r0, [pc, #544]	; (8004288 <loadMenuTexts+0x9b8>)
 8004066:	f7fc fa71 	bl	800054c <copyText>
 800406a:	4603      	mov	r3, r0
 800406c:	4a87      	ldr	r2, [pc, #540]	; (800428c <loadMenuTexts+0x9bc>)
 800406e:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8004070:	4887      	ldr	r0, [pc, #540]	; (8004290 <loadMenuTexts+0x9c0>)
 8004072:	f7fc fa6b 	bl	800054c <copyText>
 8004076:	4603      	mov	r3, r0
 8004078:	4a86      	ldr	r2, [pc, #536]	; (8004294 <loadMenuTexts+0x9c4>)
 800407a:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 800407c:	4886      	ldr	r0, [pc, #536]	; (8004298 <loadMenuTexts+0x9c8>)
 800407e:	f7fc fa65 	bl	800054c <copyText>
 8004082:	4603      	mov	r3, r0
 8004084:	4a85      	ldr	r2, [pc, #532]	; (800429c <loadMenuTexts+0x9cc>)
 8004086:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8004088:	4885      	ldr	r0, [pc, #532]	; (80042a0 <loadMenuTexts+0x9d0>)
 800408a:	f7fc fa5f 	bl	800054c <copyText>
 800408e:	4603      	mov	r3, r0
 8004090:	4a84      	ldr	r2, [pc, #528]	; (80042a4 <loadMenuTexts+0x9d4>)
 8004092:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8004094:	4884      	ldr	r0, [pc, #528]	; (80042a8 <loadMenuTexts+0x9d8>)
 8004096:	f7fc fa59 	bl	800054c <copyText>
 800409a:	4603      	mov	r3, r0
 800409c:	4a83      	ldr	r2, [pc, #524]	; (80042ac <loadMenuTexts+0x9dc>)
 800409e:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80040a0:	4883      	ldr	r0, [pc, #524]	; (80042b0 <loadMenuTexts+0x9e0>)
 80040a2:	f7fc fa53 	bl	800054c <copyText>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a82      	ldr	r2, [pc, #520]	; (80042b4 <loadMenuTexts+0x9e4>)
 80040aa:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80040ac:	4882      	ldr	r0, [pc, #520]	; (80042b8 <loadMenuTexts+0x9e8>)
 80040ae:	f7fc fa4d 	bl	800054c <copyText>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4a81      	ldr	r2, [pc, #516]	; (80042bc <loadMenuTexts+0x9ec>)
 80040b6:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80040b8:	4881      	ldr	r0, [pc, #516]	; (80042c0 <loadMenuTexts+0x9f0>)
 80040ba:	f7fc fa47 	bl	800054c <copyText>
 80040be:	4603      	mov	r3, r0
 80040c0:	4a80      	ldr	r2, [pc, #512]	; (80042c4 <loadMenuTexts+0x9f4>)
 80040c2:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80040c4:	4880      	ldr	r0, [pc, #512]	; (80042c8 <loadMenuTexts+0x9f8>)
 80040c6:	f7fc fa41 	bl	800054c <copyText>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4a7f      	ldr	r2, [pc, #508]	; (80042cc <loadMenuTexts+0x9fc>)
 80040ce:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80040d0:	487f      	ldr	r0, [pc, #508]	; (80042d0 <loadMenuTexts+0xa00>)
 80040d2:	f7fc fa3b 	bl	800054c <copyText>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4a7e      	ldr	r2, [pc, #504]	; (80042d4 <loadMenuTexts+0xa04>)
 80040da:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80040dc:	487e      	ldr	r0, [pc, #504]	; (80042d8 <loadMenuTexts+0xa08>)
 80040de:	f7fc fa35 	bl	800054c <copyText>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a7d      	ldr	r2, [pc, #500]	; (80042dc <loadMenuTexts+0xa0c>)
 80040e6:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80040e8:	487d      	ldr	r0, [pc, #500]	; (80042e0 <loadMenuTexts+0xa10>)
 80040ea:	f7fc fa2f 	bl	800054c <copyText>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4a7c      	ldr	r2, [pc, #496]	; (80042e4 <loadMenuTexts+0xa14>)
 80040f2:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80040f4:	487c      	ldr	r0, [pc, #496]	; (80042e8 <loadMenuTexts+0xa18>)
 80040f6:	f7fc fa29 	bl	800054c <copyText>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a7b      	ldr	r2, [pc, #492]	; (80042ec <loadMenuTexts+0xa1c>)
 80040fe:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8004100:	487b      	ldr	r0, [pc, #492]	; (80042f0 <loadMenuTexts+0xa20>)
 8004102:	f7fc fa23 	bl	800054c <copyText>
 8004106:	4603      	mov	r3, r0
 8004108:	4a7a      	ldr	r2, [pc, #488]	; (80042f4 <loadMenuTexts+0xa24>)
 800410a:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 800410c:	487a      	ldr	r0, [pc, #488]	; (80042f8 <loadMenuTexts+0xa28>)
 800410e:	f7fc fa1d 	bl	800054c <copyText>
 8004112:	4603      	mov	r3, r0
 8004114:	4a79      	ldr	r2, [pc, #484]	; (80042fc <loadMenuTexts+0xa2c>)
 8004116:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004118:	4879      	ldr	r0, [pc, #484]	; (8004300 <loadMenuTexts+0xa30>)
 800411a:	f7fc fa17 	bl	800054c <copyText>
 800411e:	4603      	mov	r3, r0
 8004120:	4a78      	ldr	r2, [pc, #480]	; (8004304 <loadMenuTexts+0xa34>)
 8004122:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8004124:	4878      	ldr	r0, [pc, #480]	; (8004308 <loadMenuTexts+0xa38>)
 8004126:	f7fc fa11 	bl	800054c <copyText>
 800412a:	4603      	mov	r3, r0
 800412c:	4a77      	ldr	r2, [pc, #476]	; (800430c <loadMenuTexts+0xa3c>)
 800412e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8004130:	4877      	ldr	r0, [pc, #476]	; (8004310 <loadMenuTexts+0xa40>)
 8004132:	f7fc fa0b 	bl	800054c <copyText>
 8004136:	4603      	mov	r3, r0
 8004138:	4a76      	ldr	r2, [pc, #472]	; (8004314 <loadMenuTexts+0xa44>)
 800413a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 800413c:	4876      	ldr	r0, [pc, #472]	; (8004318 <loadMenuTexts+0xa48>)
 800413e:	f7fc fa05 	bl	800054c <copyText>
 8004142:	4603      	mov	r3, r0
 8004144:	4a75      	ldr	r2, [pc, #468]	; (800431c <loadMenuTexts+0xa4c>)
 8004146:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004148:	4875      	ldr	r0, [pc, #468]	; (8004320 <loadMenuTexts+0xa50>)
 800414a:	f7fc f9ff 	bl	800054c <copyText>
 800414e:	4603      	mov	r3, r0
 8004150:	4a74      	ldr	r2, [pc, #464]	; (8004324 <loadMenuTexts+0xa54>)
 8004152:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8004154:	4874      	ldr	r0, [pc, #464]	; (8004328 <loadMenuTexts+0xa58>)
 8004156:	f7fc f9f9 	bl	800054c <copyText>
 800415a:	4603      	mov	r3, r0
 800415c:	4a73      	ldr	r2, [pc, #460]	; (800432c <loadMenuTexts+0xa5c>)
 800415e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8004160:	4873      	ldr	r0, [pc, #460]	; (8004330 <loadMenuTexts+0xa60>)
 8004162:	f7fc f9f3 	bl	800054c <copyText>
 8004166:	4603      	mov	r3, r0
 8004168:	4a72      	ldr	r2, [pc, #456]	; (8004334 <loadMenuTexts+0xa64>)
 800416a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 800416c:	4872      	ldr	r0, [pc, #456]	; (8004338 <loadMenuTexts+0xa68>)
 800416e:	f7fc f9ed 	bl	800054c <copyText>
 8004172:	4603      	mov	r3, r0
 8004174:	4a71      	ldr	r2, [pc, #452]	; (800433c <loadMenuTexts+0xa6c>)
 8004176:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004178:	4871      	ldr	r0, [pc, #452]	; (8004340 <loadMenuTexts+0xa70>)
 800417a:	f7fc f9e7 	bl	800054c <copyText>
 800417e:	e0e1      	b.n	8004344 <loadMenuTexts+0xa74>
 8004180:	200004c0 	.word	0x200004c0
 8004184:	20000cf0 	.word	0x20000cf0
 8004188:	200004d0 	.word	0x200004d0
 800418c:	20000cf4 	.word	0x20000cf4
 8004190:	200004e0 	.word	0x200004e0
 8004194:	20000cf8 	.word	0x20000cf8
 8004198:	200004f0 	.word	0x200004f0
 800419c:	20000cfc 	.word	0x20000cfc
 80041a0:	20000500 	.word	0x20000500
 80041a4:	20000d00 	.word	0x20000d00
 80041a8:	20000510 	.word	0x20000510
 80041ac:	20000d04 	.word	0x20000d04
 80041b0:	20000520 	.word	0x20000520
 80041b4:	20000d08 	.word	0x20000d08
 80041b8:	20000530 	.word	0x20000530
 80041bc:	20000d0c 	.word	0x20000d0c
 80041c0:	20000540 	.word	0x20000540
 80041c4:	20000d10 	.word	0x20000d10
 80041c8:	20000550 	.word	0x20000550
 80041cc:	20000d14 	.word	0x20000d14
 80041d0:	20000560 	.word	0x20000560
 80041d4:	20000d18 	.word	0x20000d18
 80041d8:	20000570 	.word	0x20000570
 80041dc:	20000d1c 	.word	0x20000d1c
 80041e0:	20000580 	.word	0x20000580
 80041e4:	20000d20 	.word	0x20000d20
 80041e8:	20000590 	.word	0x20000590
 80041ec:	20000d24 	.word	0x20000d24
 80041f0:	200005a0 	.word	0x200005a0
 80041f4:	20000d28 	.word	0x20000d28
 80041f8:	200005b0 	.word	0x200005b0
 80041fc:	20000d2c 	.word	0x20000d2c
 8004200:	200005c0 	.word	0x200005c0
 8004204:	20000d30 	.word	0x20000d30
 8004208:	200005d0 	.word	0x200005d0
 800420c:	20000d34 	.word	0x20000d34
 8004210:	200005e0 	.word	0x200005e0
 8004214:	20000d38 	.word	0x20000d38
 8004218:	200005f0 	.word	0x200005f0
 800421c:	20000d3c 	.word	0x20000d3c
 8004220:	20000600 	.word	0x20000600
 8004224:	20000d40 	.word	0x20000d40
 8004228:	20000610 	.word	0x20000610
 800422c:	20000d48 	.word	0x20000d48
 8004230:	20000620 	.word	0x20000620
 8004234:	20000d4c 	.word	0x20000d4c
 8004238:	20000630 	.word	0x20000630
 800423c:	20000d50 	.word	0x20000d50
 8004240:	20000640 	.word	0x20000640
 8004244:	20000d54 	.word	0x20000d54
 8004248:	20000650 	.word	0x20000650
 800424c:	20000d58 	.word	0x20000d58
 8004250:	20000660 	.word	0x20000660
 8004254:	20000d5c 	.word	0x20000d5c
 8004258:	20000670 	.word	0x20000670
 800425c:	20000d60 	.word	0x20000d60
 8004260:	20000680 	.word	0x20000680
 8004264:	20000d64 	.word	0x20000d64
 8004268:	20000690 	.word	0x20000690
 800426c:	20000d68 	.word	0x20000d68
 8004270:	200006a0 	.word	0x200006a0
 8004274:	20000d6c 	.word	0x20000d6c
 8004278:	200006b0 	.word	0x200006b0
 800427c:	20000d70 	.word	0x20000d70
 8004280:	200006c0 	.word	0x200006c0
 8004284:	20000d78 	.word	0x20000d78
 8004288:	200006d0 	.word	0x200006d0
 800428c:	20000d80 	.word	0x20000d80
 8004290:	200006e0 	.word	0x200006e0
 8004294:	20000d84 	.word	0x20000d84
 8004298:	200006f0 	.word	0x200006f0
 800429c:	20000d88 	.word	0x20000d88
 80042a0:	20000700 	.word	0x20000700
 80042a4:	20000d8c 	.word	0x20000d8c
 80042a8:	20000710 	.word	0x20000710
 80042ac:	20000d90 	.word	0x20000d90
 80042b0:	20000720 	.word	0x20000720
 80042b4:	20000d94 	.word	0x20000d94
 80042b8:	20000730 	.word	0x20000730
 80042bc:	20000d98 	.word	0x20000d98
 80042c0:	20000740 	.word	0x20000740
 80042c4:	20000d9c 	.word	0x20000d9c
 80042c8:	20000750 	.word	0x20000750
 80042cc:	20000da0 	.word	0x20000da0
 80042d0:	20000760 	.word	0x20000760
 80042d4:	20000da4 	.word	0x20000da4
 80042d8:	20000770 	.word	0x20000770
 80042dc:	20000da8 	.word	0x20000da8
 80042e0:	20000780 	.word	0x20000780
 80042e4:	20000dac 	.word	0x20000dac
 80042e8:	20000790 	.word	0x20000790
 80042ec:	20000db0 	.word	0x20000db0
 80042f0:	200007a0 	.word	0x200007a0
 80042f4:	20000db4 	.word	0x20000db4
 80042f8:	200007b0 	.word	0x200007b0
 80042fc:	20000db8 	.word	0x20000db8
 8004300:	200007c0 	.word	0x200007c0
 8004304:	20000dbc 	.word	0x20000dbc
 8004308:	200007d0 	.word	0x200007d0
 800430c:	20000dc0 	.word	0x20000dc0
 8004310:	200007e0 	.word	0x200007e0
 8004314:	20000dc4 	.word	0x20000dc4
 8004318:	200007f0 	.word	0x200007f0
 800431c:	20000dc8 	.word	0x20000dc8
 8004320:	20000800 	.word	0x20000800
 8004324:	20000dcc 	.word	0x20000dcc
 8004328:	20000810 	.word	0x20000810
 800432c:	20000dd0 	.word	0x20000dd0
 8004330:	20000820 	.word	0x20000820
 8004334:	20000dd4 	.word	0x20000dd4
 8004338:	20000830 	.word	0x20000830
 800433c:	20000dd8 	.word	0x20000dd8
 8004340:	20000840 	.word	0x20000840
 8004344:	4603      	mov	r3, r0
 8004346:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <loadMenuTexts+0xb14>)
 8004348:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800434a:	4827      	ldr	r0, [pc, #156]	; (80043e8 <loadMenuTexts+0xb18>)
 800434c:	f7fc f8fe 	bl	800054c <copyText>
 8004350:	4603      	mov	r3, r0
 8004352:	4a26      	ldr	r2, [pc, #152]	; (80043ec <loadMenuTexts+0xb1c>)
 8004354:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8004356:	4826      	ldr	r0, [pc, #152]	; (80043f0 <loadMenuTexts+0xb20>)
 8004358:	f7fc f8f8 	bl	800054c <copyText>
 800435c:	4603      	mov	r3, r0
 800435e:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <loadMenuTexts+0xb24>)
 8004360:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8004362:	4825      	ldr	r0, [pc, #148]	; (80043f8 <loadMenuTexts+0xb28>)
 8004364:	f7fc f8f2 	bl	800054c <copyText>
 8004368:	4603      	mov	r3, r0
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <loadMenuTexts+0xb2c>)
 800436c:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800436e:	4824      	ldr	r0, [pc, #144]	; (8004400 <loadMenuTexts+0xb30>)
 8004370:	f7fc f8ec 	bl	800054c <copyText>
 8004374:	4603      	mov	r3, r0
 8004376:	4a23      	ldr	r2, [pc, #140]	; (8004404 <loadMenuTexts+0xb34>)
 8004378:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800437a:	4823      	ldr	r0, [pc, #140]	; (8004408 <loadMenuTexts+0xb38>)
 800437c:	f7fc f8e6 	bl	800054c <copyText>
 8004380:	4603      	mov	r3, r0
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <loadMenuTexts+0xb3c>)
 8004384:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8004386:	4822      	ldr	r0, [pc, #136]	; (8004410 <loadMenuTexts+0xb40>)
 8004388:	f7fc f8e0 	bl	800054c <copyText>
 800438c:	4603      	mov	r3, r0
 800438e:	4a21      	ldr	r2, [pc, #132]	; (8004414 <loadMenuTexts+0xb44>)
 8004390:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8004392:	4821      	ldr	r0, [pc, #132]	; (8004418 <loadMenuTexts+0xb48>)
 8004394:	f7fc f8da 	bl	800054c <copyText>
 8004398:	4603      	mov	r3, r0
 800439a:	4a20      	ldr	r2, [pc, #128]	; (800441c <loadMenuTexts+0xb4c>)
 800439c:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800439e:	4820      	ldr	r0, [pc, #128]	; (8004420 <loadMenuTexts+0xb50>)
 80043a0:	f7fc f8d4 	bl	800054c <copyText>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <loadMenuTexts+0xb54>)
 80043a8:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80043aa:	481f      	ldr	r0, [pc, #124]	; (8004428 <loadMenuTexts+0xb58>)
 80043ac:	f7fc f8ce 	bl	800054c <copyText>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <loadMenuTexts+0xb5c>)
 80043b4:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80043b6:	481e      	ldr	r0, [pc, #120]	; (8004430 <loadMenuTexts+0xb60>)
 80043b8:	f7fc f8c8 	bl	800054c <copyText>
 80043bc:	4603      	mov	r3, r0
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <loadMenuTexts+0xb64>)
 80043c0:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80043c2:	481d      	ldr	r0, [pc, #116]	; (8004438 <loadMenuTexts+0xb68>)
 80043c4:	f7fc f8c2 	bl	800054c <copyText>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <loadMenuTexts+0xb6c>)
 80043cc:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80043ce:	481c      	ldr	r0, [pc, #112]	; (8004440 <loadMenuTexts+0xb70>)
 80043d0:	f7fc f8bc 	bl	800054c <copyText>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <loadMenuTexts+0xb74>)
 80043d8:	6013      	str	r3, [r2, #0]
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000ddc 	.word	0x20000ddc
 80043e8:	20000850 	.word	0x20000850
 80043ec:	20000de0 	.word	0x20000de0
 80043f0:	20000860 	.word	0x20000860
 80043f4:	20000de4 	.word	0x20000de4
 80043f8:	20000870 	.word	0x20000870
 80043fc:	20000de8 	.word	0x20000de8
 8004400:	20000880 	.word	0x20000880
 8004404:	20000dec 	.word	0x20000dec
 8004408:	20000890 	.word	0x20000890
 800440c:	20000df0 	.word	0x20000df0
 8004410:	200008a0 	.word	0x200008a0
 8004414:	20000dfc 	.word	0x20000dfc
 8004418:	200008b0 	.word	0x200008b0
 800441c:	20000e00 	.word	0x20000e00
 8004420:	200008c0 	.word	0x200008c0
 8004424:	20000e04 	.word	0x20000e04
 8004428:	200008d0 	.word	0x200008d0
 800442c:	20000e08 	.word	0x20000e08
 8004430:	200008e0 	.word	0x200008e0
 8004434:	20000e0c 	.word	0x20000e0c
 8004438:	200008f0 	.word	0x200008f0
 800443c:	20000e10 	.word	0x20000e10
 8004440:	20000900 	.word	0x20000900
 8004444:	20000e14 	.word	0x20000e14

08004448 <lcdUpdate>:
char* mergeData(void);
void checkAPandConnect(void);

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004458:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <lcdUpdate+0x9c>)
 800445a:	2101      	movs	r1, #1
 800445c:	2002      	movs	r0, #2
 800445e:	f7fc f82e 	bl	80004be <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004462:	e03b      	b.n	80044dc <lcdUpdate+0x94>
	} else if(y==2) {
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d105      	bne.n	8004476 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <lcdUpdate+0x9c>)
 800446c:	2102      	movs	r1, #2
 800446e:	2002      	movs	r0, #2
 8004470:	f7fc f825 	bl	80004be <lcd_print>
}
 8004474:	e032      	b.n	80044dc <lcdUpdate+0x94>
	} else if(y==3) {
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d105      	bne.n	8004488 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <lcdUpdate+0x9c>)
 800447e:	2103      	movs	r1, #3
 8004480:	2002      	movs	r0, #2
 8004482:	f7fc f81c 	bl	80004be <lcd_print>
}
 8004486:	e029      	b.n	80044dc <lcdUpdate+0x94>
	} else if(y==4) {
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d105      	bne.n	800449a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800448e:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <lcdUpdate+0x9c>)
 8004490:	2104      	movs	r1, #4
 8004492:	2002      	movs	r0, #2
 8004494:	f7fc f813 	bl	80004be <lcd_print>
}
 8004498:	e020      	b.n	80044dc <lcdUpdate+0x94>
	} else if(y==5) {
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d105      	bne.n	80044ac <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80044a0:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <lcdUpdate+0x9c>)
 80044a2:	2105      	movs	r1, #5
 80044a4:	2002      	movs	r0, #2
 80044a6:	f7fc f80a 	bl	80004be <lcd_print>
}
 80044aa:	e017      	b.n	80044dc <lcdUpdate+0x94>
	} else if(y==6) {
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d105      	bne.n	80044be <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80044b2:	4a0c      	ldr	r2, [pc, #48]	; (80044e4 <lcdUpdate+0x9c>)
 80044b4:	2106      	movs	r1, #6
 80044b6:	2002      	movs	r0, #2
 80044b8:	f7fc f801 	bl	80004be <lcd_print>
}
 80044bc:	e00e      	b.n	80044dc <lcdUpdate+0x94>
	} else if (y==7) {
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	2b07      	cmp	r3, #7
 80044c2:	d10b      	bne.n	80044dc <lcdUpdate+0x94>
		lcd_clear();
 80044c4:	f7fc f810 	bl	80004e8 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 80044c8:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <lcdUpdate+0xa0>)
 80044ca:	2101      	movs	r1, #1
 80044cc:	2001      	movs	r0, #1
 80044ce:	f7fb fff6 	bl	80004be <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80044d2:	4a06      	ldr	r2, [pc, #24]	; (80044ec <lcdUpdate+0xa4>)
 80044d4:	2101      	movs	r1, #1
 80044d6:	2002      	movs	r0, #2
 80044d8:	f7fb fff1 	bl	80004be <lcd_print>
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	0800db68 	.word	0x0800db68
 80044e8:	0800e444 	.word	0x0800e444
 80044ec:	0800e458 	.word	0x0800e458

080044f0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d11d      	bne.n	800453c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004500:	4b62      	ldr	r3, [pc, #392]	; (800468c <hataKoduLcdGoster+0x19c>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d105      	bne.n	8004514 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004508:	4a61      	ldr	r2, [pc, #388]	; (8004690 <hataKoduLcdGoster+0x1a0>)
 800450a:	2101      	movs	r1, #1
 800450c:	2001      	movs	r0, #1
 800450e:	f7fb ffd6 	bl	80004be <lcd_print>
 8004512:	e008      	b.n	8004526 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004514:	4b5d      	ldr	r3, [pc, #372]	; (800468c <hataKoduLcdGoster+0x19c>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d104      	bne.n	8004526 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 800451c:	4a5d      	ldr	r2, [pc, #372]	; (8004694 <hataKoduLcdGoster+0x1a4>)
 800451e:	2101      	movs	r1, #1
 8004520:	2001      	movs	r0, #1
 8004522:	f7fb ffcc 	bl	80004be <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004526:	4a5c      	ldr	r2, [pc, #368]	; (8004698 <hataKoduLcdGoster+0x1a8>)
 8004528:	2101      	movs	r1, #1
 800452a:	2002      	movs	r0, #2
 800452c:	f7fb ffc7 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 8004530:	4a5a      	ldr	r2, [pc, #360]	; (800469c <hataKoduLcdGoster+0x1ac>)
 8004532:	2107      	movs	r1, #7
 8004534:	2002      	movs	r0, #2
 8004536:	f7fb ffc2 	bl	80004be <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 800453a:	e0a3      	b.n	8004684 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d11d      	bne.n	800457e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004542:	4b52      	ldr	r3, [pc, #328]	; (800468c <hataKoduLcdGoster+0x19c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 800454a:	4a51      	ldr	r2, [pc, #324]	; (8004690 <hataKoduLcdGoster+0x1a0>)
 800454c:	2101      	movs	r1, #1
 800454e:	2001      	movs	r0, #1
 8004550:	f7fb ffb5 	bl	80004be <lcd_print>
 8004554:	e008      	b.n	8004568 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8004556:	4b4d      	ldr	r3, [pc, #308]	; (800468c <hataKoduLcdGoster+0x19c>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d104      	bne.n	8004568 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 800455e:	4a4d      	ldr	r2, [pc, #308]	; (8004694 <hataKoduLcdGoster+0x1a4>)
 8004560:	2101      	movs	r1, #1
 8004562:	2001      	movs	r0, #1
 8004564:	f7fb ffab 	bl	80004be <lcd_print>
		lcd_print(2, 2, "2");
 8004568:	4a4d      	ldr	r2, [pc, #308]	; (80046a0 <hataKoduLcdGoster+0x1b0>)
 800456a:	2102      	movs	r1, #2
 800456c:	2002      	movs	r0, #2
 800456e:	f7fb ffa6 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 8004572:	4a4a      	ldr	r2, [pc, #296]	; (800469c <hataKoduLcdGoster+0x1ac>)
 8004574:	2107      	movs	r1, #7
 8004576:	2002      	movs	r0, #2
 8004578:	f7fb ffa1 	bl	80004be <lcd_print>
}
 800457c:	e082      	b.n	8004684 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d11d      	bne.n	80045c0 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004584:	4b41      	ldr	r3, [pc, #260]	; (800468c <hataKoduLcdGoster+0x19c>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 800458c:	4a40      	ldr	r2, [pc, #256]	; (8004690 <hataKoduLcdGoster+0x1a0>)
 800458e:	2101      	movs	r1, #1
 8004590:	2001      	movs	r0, #1
 8004592:	f7fb ff94 	bl	80004be <lcd_print>
 8004596:	e008      	b.n	80045aa <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8004598:	4b3c      	ldr	r3, [pc, #240]	; (800468c <hataKoduLcdGoster+0x19c>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d104      	bne.n	80045aa <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80045a0:	4a3c      	ldr	r2, [pc, #240]	; (8004694 <hataKoduLcdGoster+0x1a4>)
 80045a2:	2101      	movs	r1, #1
 80045a4:	2001      	movs	r0, #1
 80045a6:	f7fb ff8a 	bl	80004be <lcd_print>
		lcd_print(2, 3, "3");
 80045aa:	4a3e      	ldr	r2, [pc, #248]	; (80046a4 <hataKoduLcdGoster+0x1b4>)
 80045ac:	2103      	movs	r1, #3
 80045ae:	2002      	movs	r0, #2
 80045b0:	f7fb ff85 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 80045b4:	4a39      	ldr	r2, [pc, #228]	; (800469c <hataKoduLcdGoster+0x1ac>)
 80045b6:	2107      	movs	r1, #7
 80045b8:	2002      	movs	r0, #2
 80045ba:	f7fb ff80 	bl	80004be <lcd_print>
}
 80045be:	e061      	b.n	8004684 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d11d      	bne.n	8004602 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80045c6:	4b31      	ldr	r3, [pc, #196]	; (800468c <hataKoduLcdGoster+0x19c>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 80045ce:	4a30      	ldr	r2, [pc, #192]	; (8004690 <hataKoduLcdGoster+0x1a0>)
 80045d0:	2101      	movs	r1, #1
 80045d2:	2001      	movs	r0, #1
 80045d4:	f7fb ff73 	bl	80004be <lcd_print>
 80045d8:	e008      	b.n	80045ec <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 80045da:	4b2c      	ldr	r3, [pc, #176]	; (800468c <hataKoduLcdGoster+0x19c>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d104      	bne.n	80045ec <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80045e2:	4a2c      	ldr	r2, [pc, #176]	; (8004694 <hataKoduLcdGoster+0x1a4>)
 80045e4:	2101      	movs	r1, #1
 80045e6:	2001      	movs	r0, #1
 80045e8:	f7fb ff69 	bl	80004be <lcd_print>
		lcd_print(2, 4, "4");
 80045ec:	4a2e      	ldr	r2, [pc, #184]	; (80046a8 <hataKoduLcdGoster+0x1b8>)
 80045ee:	2104      	movs	r1, #4
 80045f0:	2002      	movs	r0, #2
 80045f2:	f7fb ff64 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 80045f6:	4a29      	ldr	r2, [pc, #164]	; (800469c <hataKoduLcdGoster+0x1ac>)
 80045f8:	2107      	movs	r1, #7
 80045fa:	2002      	movs	r0, #2
 80045fc:	f7fb ff5f 	bl	80004be <lcd_print>
}
 8004600:	e040      	b.n	8004684 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	2b05      	cmp	r3, #5
 8004606:	d11d      	bne.n	8004644 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004608:	4b20      	ldr	r3, [pc, #128]	; (800468c <hataKoduLcdGoster+0x19c>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d105      	bne.n	800461c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <hataKoduLcdGoster+0x1a0>)
 8004612:	2101      	movs	r1, #1
 8004614:	2001      	movs	r0, #1
 8004616:	f7fb ff52 	bl	80004be <lcd_print>
 800461a:	e008      	b.n	800462e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 800461c:	4b1b      	ldr	r3, [pc, #108]	; (800468c <hataKoduLcdGoster+0x19c>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d104      	bne.n	800462e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <hataKoduLcdGoster+0x1a4>)
 8004626:	2101      	movs	r1, #1
 8004628:	2001      	movs	r0, #1
 800462a:	f7fb ff48 	bl	80004be <lcd_print>
		lcd_print(2, 5, "5");
 800462e:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <hataKoduLcdGoster+0x1bc>)
 8004630:	2105      	movs	r1, #5
 8004632:	2002      	movs	r0, #2
 8004634:	f7fb ff43 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 8004638:	4a18      	ldr	r2, [pc, #96]	; (800469c <hataKoduLcdGoster+0x1ac>)
 800463a:	2107      	movs	r1, #7
 800463c:	2002      	movs	r0, #2
 800463e:	f7fb ff3e 	bl	80004be <lcd_print>
}
 8004642:	e01f      	b.n	8004684 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	2b06      	cmp	r3, #6
 8004648:	d11c      	bne.n	8004684 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <hataKoduLcdGoster+0x19c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8004652:	4a0f      	ldr	r2, [pc, #60]	; (8004690 <hataKoduLcdGoster+0x1a0>)
 8004654:	2101      	movs	r1, #1
 8004656:	2001      	movs	r0, #1
 8004658:	f7fb ff31 	bl	80004be <lcd_print>
 800465c:	e008      	b.n	8004670 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <hataKoduLcdGoster+0x19c>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d104      	bne.n	8004670 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004666:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <hataKoduLcdGoster+0x1a4>)
 8004668:	2101      	movs	r1, #1
 800466a:	2001      	movs	r0, #1
 800466c:	f7fb ff27 	bl	80004be <lcd_print>
		lcd_print(2, 6, "6");
 8004670:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <hataKoduLcdGoster+0x1c0>)
 8004672:	2106      	movs	r1, #6
 8004674:	2002      	movs	r0, #2
 8004676:	f7fb ff22 	bl	80004be <lcd_print>
		lcd_print(2, 7, "          ");
 800467a:	4a08      	ldr	r2, [pc, #32]	; (800469c <hataKoduLcdGoster+0x1ac>)
 800467c:	2107      	movs	r1, #7
 800467e:	2002      	movs	r0, #2
 8004680:	f7fb ff1d 	bl	80004be <lcd_print>
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000ca4 	.word	0x20000ca4
 8004690:	0800e46c 	.word	0x0800e46c
 8004694:	0800e480 	.word	0x0800e480
 8004698:	0800e494 	.word	0x0800e494
 800469c:	0800e498 	.word	0x0800e498
 80046a0:	0800e4a4 	.word	0x0800e4a4
 80046a4:	0800e4a8 	.word	0x0800e4a8
 80046a8:	0800e4ac 	.word	0x0800e4ac
 80046ac:	0800e4b0 	.word	0x0800e4b0
 80046b0:	0800e4b4 	.word	0x0800e4b4

080046b4 <eepromKontrol>:

void eepromKontrol(void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80046ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80046be:	9302      	str	r3, [sp, #8]
 80046c0:	233f      	movs	r3, #63	; 0x3f
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	4b9b      	ldr	r3, [pc, #620]	; (8004934 <eepromKontrol+0x280>)
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	233f      	movs	r3, #63	; 0x3f
 80046ca:	2200      	movs	r2, #0
 80046cc:	21a0      	movs	r1, #160	; 0xa0
 80046ce:	489a      	ldr	r0, [pc, #616]	; (8004938 <eepromKontrol+0x284>)
 80046d0:	f004 fc86 	bl	8008fe0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80046d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046d8:	f003 fafe 	bl	8007cd8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80046dc:	4b95      	ldr	r3, [pc, #596]	; (8004934 <eepromKontrol+0x280>)
 80046de:	78da      	ldrb	r2, [r3, #3]
 80046e0:	4b96      	ldr	r3, [pc, #600]	; (800493c <eepromKontrol+0x288>)
 80046e2:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80046e4:	4b93      	ldr	r3, [pc, #588]	; (8004934 <eepromKontrol+0x280>)
 80046e6:	785a      	ldrb	r2, [r3, #1]
 80046e8:	4b95      	ldr	r3, [pc, #596]	; (8004940 <eepromKontrol+0x28c>)
 80046ea:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80046ec:	4b91      	ldr	r3, [pc, #580]	; (8004934 <eepromKontrol+0x280>)
 80046ee:	789a      	ldrb	r2, [r3, #2]
 80046f0:	4b94      	ldr	r3, [pc, #592]	; (8004944 <eepromKontrol+0x290>)
 80046f2:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80046f4:	4b8f      	ldr	r3, [pc, #572]	; (8004934 <eepromKontrol+0x280>)
 80046f6:	791a      	ldrb	r2, [r3, #4]
 80046f8:	4b93      	ldr	r3, [pc, #588]	; (8004948 <eepromKontrol+0x294>)
 80046fa:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80046fc:	4b8d      	ldr	r3, [pc, #564]	; (8004934 <eepromKontrol+0x280>)
 80046fe:	795a      	ldrb	r2, [r3, #5]
 8004700:	4b92      	ldr	r3, [pc, #584]	; (800494c <eepromKontrol+0x298>)
 8004702:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004704:	4b8b      	ldr	r3, [pc, #556]	; (8004934 <eepromKontrol+0x280>)
 8004706:	799a      	ldrb	r2, [r3, #6]
 8004708:	4b91      	ldr	r3, [pc, #580]	; (8004950 <eepromKontrol+0x29c>)
 800470a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800470c:	4b89      	ldr	r3, [pc, #548]	; (8004934 <eepromKontrol+0x280>)
 800470e:	79da      	ldrb	r2, [r3, #7]
 8004710:	4b90      	ldr	r3, [pc, #576]	; (8004954 <eepromKontrol+0x2a0>)
 8004712:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004714:	4b87      	ldr	r3, [pc, #540]	; (8004934 <eepromKontrol+0x280>)
 8004716:	7a1a      	ldrb	r2, [r3, #8]
 8004718:	4b8f      	ldr	r3, [pc, #572]	; (8004958 <eepromKontrol+0x2a4>)
 800471a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800471c:	4b85      	ldr	r3, [pc, #532]	; (8004934 <eepromKontrol+0x280>)
 800471e:	7a5a      	ldrb	r2, [r3, #9]
 8004720:	4b8e      	ldr	r3, [pc, #568]	; (800495c <eepromKontrol+0x2a8>)
 8004722:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004724:	4b83      	ldr	r3, [pc, #524]	; (8004934 <eepromKontrol+0x280>)
 8004726:	7a9a      	ldrb	r2, [r3, #10]
 8004728:	4b8d      	ldr	r3, [pc, #564]	; (8004960 <eepromKontrol+0x2ac>)
 800472a:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 800472c:	4b81      	ldr	r3, [pc, #516]	; (8004934 <eepromKontrol+0x280>)
 800472e:	7ada      	ldrb	r2, [r3, #11]
 8004730:	4b8c      	ldr	r3, [pc, #560]	; (8004964 <eepromKontrol+0x2b0>)
 8004732:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004734:	4b7f      	ldr	r3, [pc, #508]	; (8004934 <eepromKontrol+0x280>)
 8004736:	7b1a      	ldrb	r2, [r3, #12]
 8004738:	4b8b      	ldr	r3, [pc, #556]	; (8004968 <eepromKontrol+0x2b4>)
 800473a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 800473c:	4b7d      	ldr	r3, [pc, #500]	; (8004934 <eepromKontrol+0x280>)
 800473e:	7b5a      	ldrb	r2, [r3, #13]
 8004740:	4b8a      	ldr	r3, [pc, #552]	; (800496c <eepromKontrol+0x2b8>)
 8004742:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <eepromKontrol+0x280>)
 8004746:	7b9a      	ldrb	r2, [r3, #14]
 8004748:	4b89      	ldr	r3, [pc, #548]	; (8004970 <eepromKontrol+0x2bc>)
 800474a:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 800474c:	4b79      	ldr	r3, [pc, #484]	; (8004934 <eepromKontrol+0x280>)
 800474e:	7bda      	ldrb	r2, [r3, #15]
 8004750:	4b88      	ldr	r3, [pc, #544]	; (8004974 <eepromKontrol+0x2c0>)
 8004752:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004754:	4b77      	ldr	r3, [pc, #476]	; (8004934 <eepromKontrol+0x280>)
 8004756:	7c1a      	ldrb	r2, [r3, #16]
 8004758:	4b87      	ldr	r3, [pc, #540]	; (8004978 <eepromKontrol+0x2c4>)
 800475a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 800475c:	4b75      	ldr	r3, [pc, #468]	; (8004934 <eepromKontrol+0x280>)
 800475e:	7c5a      	ldrb	r2, [r3, #17]
 8004760:	4b86      	ldr	r3, [pc, #536]	; (800497c <eepromKontrol+0x2c8>)
 8004762:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004764:	4b73      	ldr	r3, [pc, #460]	; (8004934 <eepromKontrol+0x280>)
 8004766:	7c9a      	ldrb	r2, [r3, #18]
 8004768:	4b85      	ldr	r3, [pc, #532]	; (8004980 <eepromKontrol+0x2cc>)
 800476a:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 800476c:	4b71      	ldr	r3, [pc, #452]	; (8004934 <eepromKontrol+0x280>)
 800476e:	7cda      	ldrb	r2, [r3, #19]
 8004770:	4b84      	ldr	r3, [pc, #528]	; (8004984 <eepromKontrol+0x2d0>)
 8004772:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004774:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <eepromKontrol+0x280>)
 8004776:	7d1a      	ldrb	r2, [r3, #20]
 8004778:	4b83      	ldr	r3, [pc, #524]	; (8004988 <eepromKontrol+0x2d4>)
 800477a:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 800477c:	4b6d      	ldr	r3, [pc, #436]	; (8004934 <eepromKontrol+0x280>)
 800477e:	7d5a      	ldrb	r2, [r3, #21]
 8004780:	4b82      	ldr	r3, [pc, #520]	; (800498c <eepromKontrol+0x2d8>)
 8004782:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004784:	4b6b      	ldr	r3, [pc, #428]	; (8004934 <eepromKontrol+0x280>)
 8004786:	7d9a      	ldrb	r2, [r3, #22]
 8004788:	4b81      	ldr	r3, [pc, #516]	; (8004990 <eepromKontrol+0x2dc>)
 800478a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800478c:	4b69      	ldr	r3, [pc, #420]	; (8004934 <eepromKontrol+0x280>)
 800478e:	7dda      	ldrb	r2, [r3, #23]
 8004790:	4b80      	ldr	r3, [pc, #512]	; (8004994 <eepromKontrol+0x2e0>)
 8004792:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004794:	4b67      	ldr	r3, [pc, #412]	; (8004934 <eepromKontrol+0x280>)
 8004796:	7e1a      	ldrb	r2, [r3, #24]
 8004798:	4b7f      	ldr	r3, [pc, #508]	; (8004998 <eepromKontrol+0x2e4>)
 800479a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800479c:	4b65      	ldr	r3, [pc, #404]	; (8004934 <eepromKontrol+0x280>)
 800479e:	7e5a      	ldrb	r2, [r3, #25]
 80047a0:	4b7e      	ldr	r3, [pc, #504]	; (800499c <eepromKontrol+0x2e8>)
 80047a2:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80047a4:	4b63      	ldr	r3, [pc, #396]	; (8004934 <eepromKontrol+0x280>)
 80047a6:	7e9a      	ldrb	r2, [r3, #26]
 80047a8:	4b7d      	ldr	r3, [pc, #500]	; (80049a0 <eepromKontrol+0x2ec>)
 80047aa:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80047ac:	4b61      	ldr	r3, [pc, #388]	; (8004934 <eepromKontrol+0x280>)
 80047ae:	7eda      	ldrb	r2, [r3, #27]
 80047b0:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <eepromKontrol+0x2f0>)
 80047b2:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80047b4:	4b5f      	ldr	r3, [pc, #380]	; (8004934 <eepromKontrol+0x280>)
 80047b6:	7f1a      	ldrb	r2, [r3, #28]
 80047b8:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <eepromKontrol+0x2f4>)
 80047ba:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80047bc:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <eepromKontrol+0x280>)
 80047be:	7f5a      	ldrb	r2, [r3, #29]
 80047c0:	4b7a      	ldr	r3, [pc, #488]	; (80049ac <eepromKontrol+0x2f8>)
 80047c2:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80047c4:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <eepromKontrol+0x280>)
 80047c6:	7f9a      	ldrb	r2, [r3, #30]
 80047c8:	4b79      	ldr	r3, [pc, #484]	; (80049b0 <eepromKontrol+0x2fc>)
 80047ca:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 80047cc:	4b59      	ldr	r3, [pc, #356]	; (8004934 <eepromKontrol+0x280>)
 80047ce:	7fda      	ldrb	r2, [r3, #31]
 80047d0:	4b78      	ldr	r3, [pc, #480]	; (80049b4 <eepromKontrol+0x300>)
 80047d2:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 80047d4:	4b57      	ldr	r3, [pc, #348]	; (8004934 <eepromKontrol+0x280>)
 80047d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80047da:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <eepromKontrol+0x304>)
 80047dc:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 80047de:	4b55      	ldr	r3, [pc, #340]	; (8004934 <eepromKontrol+0x280>)
 80047e0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80047e4:	4b75      	ldr	r3, [pc, #468]	; (80049bc <eepromKontrol+0x308>)
 80047e6:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 80047e8:	4b52      	ldr	r3, [pc, #328]	; (8004934 <eepromKontrol+0x280>)
 80047ea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80047ee:	4b74      	ldr	r3, [pc, #464]	; (80049c0 <eepromKontrol+0x30c>)
 80047f0:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 80047f2:	4b50      	ldr	r3, [pc, #320]	; (8004934 <eepromKontrol+0x280>)
 80047f4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80047f8:	4b72      	ldr	r3, [pc, #456]	; (80049c4 <eepromKontrol+0x310>)
 80047fa:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 80047fc:	4b4d      	ldr	r3, [pc, #308]	; (8004934 <eepromKontrol+0x280>)
 80047fe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004802:	4b71      	ldr	r3, [pc, #452]	; (80049c8 <eepromKontrol+0x314>)
 8004804:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8004806:	4b4b      	ldr	r3, [pc, #300]	; (8004934 <eepromKontrol+0x280>)
 8004808:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800480c:	4b6f      	ldr	r3, [pc, #444]	; (80049cc <eepromKontrol+0x318>)
 800480e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004810:	4b48      	ldr	r3, [pc, #288]	; (8004934 <eepromKontrol+0x280>)
 8004812:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004816:	4b6e      	ldr	r3, [pc, #440]	; (80049d0 <eepromKontrol+0x31c>)
 8004818:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 800481a:	4b46      	ldr	r3, [pc, #280]	; (8004934 <eepromKontrol+0x280>)
 800481c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004820:	4b6c      	ldr	r3, [pc, #432]	; (80049d4 <eepromKontrol+0x320>)
 8004822:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8004824:	4b43      	ldr	r3, [pc, #268]	; (8004934 <eepromKontrol+0x280>)
 8004826:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800482a:	4b6b      	ldr	r3, [pc, #428]	; (80049d8 <eepromKontrol+0x324>)
 800482c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 800482e:	4b41      	ldr	r3, [pc, #260]	; (8004934 <eepromKontrol+0x280>)
 8004830:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004834:	4b69      	ldr	r3, [pc, #420]	; (80049dc <eepromKontrol+0x328>)
 8004836:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8004838:	4b3e      	ldr	r3, [pc, #248]	; (8004934 <eepromKontrol+0x280>)
 800483a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800483e:	4b68      	ldr	r3, [pc, #416]	; (80049e0 <eepromKontrol+0x32c>)
 8004840:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8004842:	4b3c      	ldr	r3, [pc, #240]	; (8004934 <eepromKontrol+0x280>)
 8004844:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004848:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <eepromKontrol+0x330>)
 800484a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 800484c:	4b39      	ldr	r3, [pc, #228]	; (8004934 <eepromKontrol+0x280>)
 800484e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004852:	4b65      	ldr	r3, [pc, #404]	; (80049e8 <eepromKontrol+0x334>)
 8004854:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 8004856:	4b37      	ldr	r3, [pc, #220]	; (8004934 <eepromKontrol+0x280>)
 8004858:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800485c:	4b63      	ldr	r3, [pc, #396]	; (80049ec <eepromKontrol+0x338>)
 800485e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004860:	4b34      	ldr	r3, [pc, #208]	; (8004934 <eepromKontrol+0x280>)
 8004862:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004866:	4b62      	ldr	r3, [pc, #392]	; (80049f0 <eepromKontrol+0x33c>)
 8004868:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 800486a:	4b54      	ldr	r3, [pc, #336]	; (80049bc <eepromKontrol+0x308>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff f82e 	bl	80038d0 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004874:	4b50      	ldr	r3, [pc, #320]	; (80049b8 <eepromKontrol+0x304>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b09      	cmp	r3, #9
 800487a:	d902      	bls.n	8004882 <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 800487c:	4b4e      	ldr	r3, [pc, #312]	; (80049b8 <eepromKontrol+0x304>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004882:	4b4c      	ldr	r3, [pc, #304]	; (80049b4 <eepromKontrol+0x300>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b09      	cmp	r3, #9
 8004888:	d902      	bls.n	8004890 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 800488a:	4b4a      	ldr	r3, [pc, #296]	; (80049b4 <eepromKontrol+0x300>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004890:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <eepromKontrol+0x2fc>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b09      	cmp	r3, #9
 8004896:	d902      	bls.n	800489e <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 8004898:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <eepromKontrol+0x2fc>)
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 800489e:	4b43      	ldr	r3, [pc, #268]	; (80049ac <eepromKontrol+0x2f8>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b09      	cmp	r3, #9
 80048a4:	d902      	bls.n	80048ac <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 80048a6:	4b41      	ldr	r3, [pc, #260]	; (80049ac <eepromKontrol+0x2f8>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80048ac:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <eepromKontrol+0x2f4>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b09      	cmp	r3, #9
 80048b2:	d902      	bls.n	80048ba <eepromKontrol+0x206>
	    calismaSayisi1=0;
 80048b4:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <eepromKontrol+0x2f4>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80048ba:	4b21      	ldr	r3, [pc, #132]	; (8004940 <eepromKontrol+0x28c>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d902      	bls.n	80048c8 <eepromKontrol+0x214>
	    calismaSekli=0;
 80048c2:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <eepromKontrol+0x28c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <eepromKontrol+0x290>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d902      	bls.n	80048d6 <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 80048d0:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <eepromKontrol+0x290>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80048d6:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <eepromKontrol+0x294>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d902      	bls.n	80048e4 <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 80048de:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <eepromKontrol+0x294>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80048e4:	4b19      	ldr	r3, [pc, #100]	; (800494c <eepromKontrol+0x298>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d902      	bls.n	80048f2 <eepromKontrol+0x23e>
	    altLimit=1;
 80048ec:	4b17      	ldr	r3, [pc, #92]	; (800494c <eepromKontrol+0x298>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 80048f2:	4b17      	ldr	r3, [pc, #92]	; (8004950 <eepromKontrol+0x29c>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d902      	bls.n	8004900 <eepromKontrol+0x24c>
	    basincSalteri=1;
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <eepromKontrol+0x29c>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <eepromKontrol+0x2a0>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d902      	bls.n	800490e <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <eepromKontrol+0x2a0>)
 800490a:	2203      	movs	r2, #3
 800490c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800490e:	4b2e      	ldr	r3, [pc, #184]	; (80049c8 <eepromKontrol+0x314>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d902      	bls.n	800491c <eepromKontrol+0x268>
	    kapiAcTipi=0;
 8004916:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <eepromKontrol+0x314>)
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <eepromKontrol+0x2a4>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d902      	bls.n	800492a <eepromKontrol+0x276>
	    kapi1Tip=1;
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <eepromKontrol+0x2a4>)
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800492a:	4b0c      	ldr	r3, [pc, #48]	; (800495c <eepromKontrol+0x2a8>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b05      	cmp	r3, #5
 8004930:	d963      	bls.n	80049fa <eepromKontrol+0x346>
 8004932:	e05f      	b.n	80049f4 <eepromKontrol+0x340>
 8004934:	20000c18 	.word	0x20000c18
 8004938:	20000e40 	.word	0x20000e40
 800493c:	20000c57 	.word	0x20000c57
 8004940:	20000c85 	.word	0x20000c85
 8004944:	20000c88 	.word	0x20000c88
 8004948:	20000c89 	.word	0x20000c89
 800494c:	20000c8a 	.word	0x20000c8a
 8004950:	20000c8b 	.word	0x20000c8b
 8004954:	20000c8c 	.word	0x20000c8c
 8004958:	20000c8d 	.word	0x20000c8d
 800495c:	20000c9d 	.word	0x20000c9d
 8004960:	20000c8e 	.word	0x20000c8e
 8004964:	20000c9e 	.word	0x20000c9e
 8004968:	20000c8f 	.word	0x20000c8f
 800496c:	20000c9f 	.word	0x20000c9f
 8004970:	20000c92 	.word	0x20000c92
 8004974:	20000c93 	.word	0x20000c93
 8004978:	20000c94 	.word	0x20000c94
 800497c:	20000c95 	.word	0x20000c95
 8004980:	20000c96 	.word	0x20000c96
 8004984:	20000c97 	.word	0x20000c97
 8004988:	20000c98 	.word	0x20000c98
 800498c:	20000c99 	.word	0x20000c99
 8004990:	20000c9a 	.word	0x20000c9a
 8004994:	20000c9b 	.word	0x20000c9b
 8004998:	20000c9c 	.word	0x20000c9c
 800499c:	20000ca0 	.word	0x20000ca0
 80049a0:	20000ca2 	.word	0x20000ca2
 80049a4:	20000c80 	.word	0x20000c80
 80049a8:	20000c81 	.word	0x20000c81
 80049ac:	20000c82 	.word	0x20000c82
 80049b0:	20000941 	.word	0x20000941
 80049b4:	20000942 	.word	0x20000942
 80049b8:	20000c83 	.word	0x20000c83
 80049bc:	20000ca4 	.word	0x20000ca4
 80049c0:	20000c91 	.word	0x20000c91
 80049c4:	20000ca3 	.word	0x20000ca3
 80049c8:	20000c90 	.word	0x20000c90
 80049cc:	20000ca5 	.word	0x20000ca5
 80049d0:	20000ca6 	.word	0x20000ca6
 80049d4:	20000ca7 	.word	0x20000ca7
 80049d8:	20000ca8 	.word	0x20000ca8
 80049dc:	20000ca9 	.word	0x20000ca9
 80049e0:	20000caa 	.word	0x20000caa
 80049e4:	20000cab 	.word	0x20000cab
 80049e8:	20000cac 	.word	0x20000cac
 80049ec:	20000cad 	.word	0x20000cad
 80049f0:	20000cae 	.word	0x20000cae
	    kapi1AcSure=5;
 80049f4:	4b4a      	ldr	r3, [pc, #296]	; (8004b20 <eepromKontrol+0x46c>)
 80049f6:	2205      	movs	r2, #5
 80049f8:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 80049fa:	4b4a      	ldr	r3, [pc, #296]	; (8004b24 <eepromKontrol+0x470>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d902      	bls.n	8004a08 <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004a02:	4b48      	ldr	r3, [pc, #288]	; (8004b24 <eepromKontrol+0x470>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004a08:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <eepromKontrol+0x474>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d902      	bls.n	8004a16 <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004a10:	4b45      	ldr	r3, [pc, #276]	; (8004b28 <eepromKontrol+0x474>)
 8004a12:	2205      	movs	r2, #5
 8004a14:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004a16:	4b45      	ldr	r3, [pc, #276]	; (8004b2c <eepromKontrol+0x478>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d902      	bls.n	8004a24 <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004a1e:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <eepromKontrol+0x478>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004a24:	4b42      	ldr	r3, [pc, #264]	; (8004b30 <eepromKontrol+0x47c>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d902      	bls.n	8004a32 <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8004a2c:	4b40      	ldr	r3, [pc, #256]	; (8004b30 <eepromKontrol+0x47c>)
 8004a2e:	2202      	movs	r2, #2
 8004a30:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004a32:	4b40      	ldr	r3, [pc, #256]	; (8004b34 <eepromKontrol+0x480>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d902      	bls.n	8004a40 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <eepromKontrol+0x480>)
 8004a3c:	2205      	movs	r2, #5
 8004a3e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004a40:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <eepromKontrol+0x484>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d902      	bls.n	8004a4e <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004a48:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <eepromKontrol+0x484>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <eepromKontrol+0x488>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d902      	bls.n	8004a5c <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004a56:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <eepromKontrol+0x488>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004a5c:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <eepromKontrol+0x48c>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d902      	bls.n	8004a6a <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <eepromKontrol+0x48c>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004a6a:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <eepromKontrol+0x490>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d902      	bls.n	8004a78 <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004a72:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <eepromKontrol+0x490>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004a78:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <eepromKontrol+0x494>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d902      	bls.n	8004a86 <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004a80:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <eepromKontrol+0x494>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004a86:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <eepromKontrol+0x498>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d902      	bls.n	8004a94 <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004a8e:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <eepromKontrol+0x498>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004a94:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <eepromKontrol+0x49c>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	d902      	bls.n	8004aa2 <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004a9c:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <eepromKontrol+0x49c>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <eepromKontrol+0x4a0>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d902      	bls.n	8004ab0 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004aaa:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <eepromKontrol+0x4a0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004ab0:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <eepromKontrol+0x4a4>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d902      	bls.n	8004abe <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <eepromKontrol+0x4a4>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004abe:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <eepromKontrol+0x4a8>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d902      	bls.n	8004acc <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <eepromKontrol+0x4a8>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004acc:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <eepromKontrol+0x4ac>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2bb4      	cmp	r3, #180	; 0xb4
 8004ad2:	d902      	bls.n	8004ada <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004ad4:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <eepromKontrol+0x4ac>)
 8004ad6:	223c      	movs	r2, #60	; 0x3c
 8004ad8:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004ada:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <eepromKontrol+0x4b0>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d902      	bls.n	8004ae8 <eepromKontrol+0x434>
	    buzzer=0;
 8004ae2:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <eepromKontrol+0x4b0>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004ae8:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <eepromKontrol+0x4b4>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d902      	bls.n	8004af6 <eepromKontrol+0x442>
	    demoMode=0;
 8004af0:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <eepromKontrol+0x4b4>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <eepromKontrol+0x4b8>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d902      	bls.n	8004b04 <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004afe:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <eepromKontrol+0x4b8>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004b04:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <eepromKontrol+0x4bc>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d902      	bls.n	8004b12 <eepromKontrol+0x45e>
	    dilSecim=0;
 8004b0c:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <eepromKontrol+0x4bc>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b16:	f003 f8df 	bl	8007cd8 <HAL_Delay>
}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000c9d 	.word	0x20000c9d
 8004b24:	20000c8e 	.word	0x20000c8e
 8004b28:	20000c9e 	.word	0x20000c9e
 8004b2c:	20000c8f 	.word	0x20000c8f
 8004b30:	20000c91 	.word	0x20000c91
 8004b34:	20000c9f 	.word	0x20000c9f
 8004b38:	20000c92 	.word	0x20000c92
 8004b3c:	20000c93 	.word	0x20000c93
 8004b40:	20000c94 	.word	0x20000c94
 8004b44:	20000c95 	.word	0x20000c95
 8004b48:	20000c96 	.word	0x20000c96
 8004b4c:	20000c97 	.word	0x20000c97
 8004b50:	20000c98 	.word	0x20000c98
 8004b54:	20000c99 	.word	0x20000c99
 8004b58:	20000c9a 	.word	0x20000c9a
 8004b5c:	20000c9b 	.word	0x20000c9b
 8004b60:	20000c9c 	.word	0x20000c9c
 8004b64:	20000ca0 	.word	0x20000ca0
 8004b68:	20000ca2 	.word	0x20000ca2
 8004b6c:	20000ca3 	.word	0x20000ca3
 8004b70:	20000ca4 	.word	0x20000ca4

08004b74 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	af04      	add	r7, sp, #16
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004b7e:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <hata2EEPROM+0xa0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1e5a      	subs	r2, r3, #1
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <hata2EEPROM+0xa4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4413      	add	r3, r2
 8004b8a:	4a24      	ldr	r2, [pc, #144]	; (8004c1c <hata2EEPROM+0xa8>)
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004b92:	f000 f847 	bl	8004c24 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004b96:	e000      	b.n	8004b9a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004b98:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	e012      	b.n	8004bc6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <hata2EEPROM+0xa4>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <hata2EEPROM+0xa8>)
 8004baa:	5cd3      	ldrb	r3, [r2, r3]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <hata2EEPROM+0xa4>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	4918      	ldr	r1, [pc, #96]	; (8004c1c <hata2EEPROM+0xa8>)
 8004bba:	79fa      	ldrb	r2, [r7, #7]
 8004bbc:	54ca      	strb	r2, [r1, r3]
					break;
 8004bbe:	e007      	b.n	8004bd0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <hata2EEPROM+0xa0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	dbe7      	blt.n	8004ba0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <hata2EEPROM+0xa4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b299      	uxth	r1, r3
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <hata2EEPROM+0xa0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	b298      	uxth	r0, r3
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <hata2EEPROM+0xa4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <hata2EEPROM+0xa8>)
 8004be2:	4413      	add	r3, r2
 8004be4:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <hata2EEPROM+0xa0>)
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	b292      	uxth	r2, r2
 8004bea:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004bee:	9402      	str	r4, [sp, #8]
 8004bf0:	9201      	str	r2, [sp, #4]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	460a      	mov	r2, r1
 8004bf8:	21a0      	movs	r1, #160	; 0xa0
 8004bfa:	4809      	ldr	r0, [pc, #36]	; (8004c20 <hata2EEPROM+0xac>)
 8004bfc:	f004 f8f6 	bl	8008dec <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c04:	f003 f868 	bl	8007cd8 <HAL_Delay>
	eepromKontrol();
 8004c08:	f7ff fd54 	bl	80046b4 <eepromKontrol>
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd90      	pop	{r4, r7, pc}
 8004c14:	20000938 	.word	0x20000938
 8004c18:	2000093c 	.word	0x2000093c
 8004c1c:	20000c18 	.word	0x20000c18
 8004c20:	20000e40 	.word	0x20000e40

08004c24 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	e009      	b.n	8004c44 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004c30:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <eepromDataFillWithEmpty+0x38>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <eepromDataFillWithEmpty+0x3c>)
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3301      	adds	r3, #1
 8004c42:	607b      	str	r3, [r7, #4]
 8004c44:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <eepromDataFillWithEmpty+0x40>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	dbf0      	blt.n	8004c30 <eepromDataFillWithEmpty+0xc>
	}
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000910 	.word	0x20000910
 8004c60:	20000c18 	.word	0x20000c18
 8004c64:	20000938 	.word	0x20000938

08004c68 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
	timer1=millis;
 8004c6c:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <bekle+0x124>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a47      	ldr	r2, [pc, #284]	; (8004d90 <bekle+0x128>)
 8004c72:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c74:	e002      	b.n	8004c7c <bekle+0x14>
    	butonKontrol = 1;
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <bekle+0x12c>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4846      	ldr	r0, [pc, #280]	; (8004d98 <bekle+0x130>)
 8004c80:	f003 fdfa 	bl	8008878 <HAL_GPIO_ReadPin>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d109      	bne.n	8004c9e <bekle+0x36>
 8004c8a:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <bekle+0x124>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <bekle+0x128>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d0ef      	beq.n	8004c76 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c96:	e002      	b.n	8004c9e <bekle+0x36>
    	butonKontrol = 1;
 8004c98:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <bekle+0x12c>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c9e:	2108      	movs	r1, #8
 8004ca0:	483e      	ldr	r0, [pc, #248]	; (8004d9c <bekle+0x134>)
 8004ca2:	f003 fde9 	bl	8008878 <HAL_GPIO_ReadPin>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d109      	bne.n	8004cc0 <bekle+0x58>
 8004cac:	4b37      	ldr	r3, [pc, #220]	; (8004d8c <bekle+0x124>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <bekle+0x128>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0ef      	beq.n	8004c98 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cb8:	e002      	b.n	8004cc0 <bekle+0x58>
    	butonKontrol = 1;
 8004cba:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <bekle+0x12c>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	4835      	ldr	r0, [pc, #212]	; (8004d98 <bekle+0x130>)
 8004cc4:	f003 fdd8 	bl	8008878 <HAL_GPIO_ReadPin>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d109      	bne.n	8004ce2 <bekle+0x7a>
 8004cce:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <bekle+0x124>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <bekle+0x128>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d0ef      	beq.n	8004cba <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cda:	e002      	b.n	8004ce2 <bekle+0x7a>
    	butonKontrol = 1;
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	; (8004d94 <bekle+0x12c>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ce2:	2104      	movs	r1, #4
 8004ce4:	482c      	ldr	r0, [pc, #176]	; (8004d98 <bekle+0x130>)
 8004ce6:	f003 fdc7 	bl	8008878 <HAL_GPIO_ReadPin>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d109      	bne.n	8004d04 <bekle+0x9c>
 8004cf0:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <bekle+0x124>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <bekle+0x128>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d0ef      	beq.n	8004cdc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cfc:	e002      	b.n	8004d04 <bekle+0x9c>
    	butonKontrol = 1;
 8004cfe:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <bekle+0x12c>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004d04:	2108      	movs	r1, #8
 8004d06:	4824      	ldr	r0, [pc, #144]	; (8004d98 <bekle+0x130>)
 8004d08:	f003 fdb6 	bl	8008878 <HAL_GPIO_ReadPin>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d109      	bne.n	8004d26 <bekle+0xbe>
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <bekle+0x124>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <bekle+0x128>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d0ef      	beq.n	8004cfe <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d1e:	e002      	b.n	8004d26 <bekle+0xbe>
    	butonKontrol = 1;
 8004d20:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <bekle+0x12c>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	481c      	ldr	r0, [pc, #112]	; (8004d9c <bekle+0x134>)
 8004d2a:	f003 fda5 	bl	8008878 <HAL_GPIO_ReadPin>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <bekle+0xe0>
 8004d34:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <bekle+0x124>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <bekle+0x128>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d0ef      	beq.n	8004d20 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d40:	e002      	b.n	8004d48 <bekle+0xe0>
    	butonKontrol = 1;
 8004d42:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <bekle+0x12c>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d4c:	4813      	ldr	r0, [pc, #76]	; (8004d9c <bekle+0x134>)
 8004d4e:	f003 fd93 	bl	8008878 <HAL_GPIO_ReadPin>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <bekle+0x104>
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <bekle+0x124>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <bekle+0x128>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d0ee      	beq.n	8004d42 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d64:	e002      	b.n	8004d6c <bekle+0x104>
    	butonKontrol = 1;
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <bekle+0x12c>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d70:	480a      	ldr	r0, [pc, #40]	; (8004d9c <bekle+0x134>)
 8004d72:	f003 fd81 	bl	8008878 <HAL_GPIO_ReadPin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <bekle+0x120>
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <bekle+0x124>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <bekle+0x128>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d0ee      	beq.n	8004d66 <bekle+0xfe>
    }

}
 8004d88:	bf00      	nop
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000c60 	.word	0x20000c60
 8004d90:	20000c68 	.word	0x20000c68
 8004d94:	20000cb2 	.word	0x20000cb2
 8004d98:	40010800 	.word	0x40010800
 8004d9c:	40011000 	.word	0x40011000

08004da0 <i2cTest>:

void i2cTest() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8004da6:	463b      	mov	r3, r7
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	605a      	str	r2, [r3, #4]
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004db2:	4b50      	ldr	r3, [pc, #320]	; (8004ef4 <i2cTest+0x154>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b4e      	ldr	r3, [pc, #312]	; (8004ef4 <i2cTest+0x154>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004dc2:	484c      	ldr	r0, [pc, #304]	; (8004ef4 <i2cTest+0x154>)
 8004dc4:	f003 fee4 	bl	8008b90 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004dc8:	23c0      	movs	r3, #192	; 0xc0
 8004dca:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004dcc:	2311      	movs	r3, #17
 8004dce:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004dd8:	463b      	mov	r3, r7
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4846      	ldr	r0, [pc, #280]	; (8004ef8 <i2cTest+0x158>)
 8004dde:	f003 faeb 	bl	80083b8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004de2:	2201      	movs	r2, #1
 8004de4:	2140      	movs	r1, #64	; 0x40
 8004de6:	4844      	ldr	r0, [pc, #272]	; (8004ef8 <i2cTest+0x158>)
 8004de8:	f003 fd5d 	bl	80088a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004dec:	2201      	movs	r2, #1
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	4841      	ldr	r0, [pc, #260]	; (8004ef8 <i2cTest+0x158>)
 8004df2:	f003 fd58 	bl	80088a6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8004df6:	200a      	movs	r0, #10
 8004df8:	f002 ff6e 	bl	8007cd8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004dfc:	bf00      	nop
 8004dfe:	2140      	movs	r1, #64	; 0x40
 8004e00:	483d      	ldr	r0, [pc, #244]	; (8004ef8 <i2cTest+0x158>)
 8004e02:	f003 fd39 	bl	8008878 <HAL_GPIO_ReadPin>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d006      	beq.n	8004e1a <i2cTest+0x7a>
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	483a      	ldr	r0, [pc, #232]	; (8004ef8 <i2cTest+0x158>)
 8004e10:	f003 fd32 	bl	8008878 <HAL_GPIO_ReadPin>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d1f1      	bne.n	8004dfe <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	4836      	ldr	r0, [pc, #216]	; (8004ef8 <i2cTest+0x158>)
 8004e20:	f003 fd41 	bl	80088a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8004e24:	200a      	movs	r0, #10
 8004e26:	f002 ff57 	bl	8007cd8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8004e2a:	bf00      	nop
 8004e2c:	2180      	movs	r1, #128	; 0x80
 8004e2e:	4832      	ldr	r0, [pc, #200]	; (8004ef8 <i2cTest+0x158>)
 8004e30:	f003 fd22 	bl	8008878 <HAL_GPIO_ReadPin>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d0f8      	beq.n	8004e2c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2140      	movs	r1, #64	; 0x40
 8004e3e:	482e      	ldr	r0, [pc, #184]	; (8004ef8 <i2cTest+0x158>)
 8004e40:	f003 fd31 	bl	80088a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e44:	200a      	movs	r0, #10
 8004e46:	f002 ff47 	bl	8007cd8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8004e4a:	bf00      	nop
 8004e4c:	2140      	movs	r1, #64	; 0x40
 8004e4e:	482a      	ldr	r0, [pc, #168]	; (8004ef8 <i2cTest+0x158>)
 8004e50:	f003 fd12 	bl	8008878 <HAL_GPIO_ReadPin>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d0f8      	beq.n	8004e4c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	2140      	movs	r1, #64	; 0x40
 8004e5e:	4826      	ldr	r0, [pc, #152]	; (8004ef8 <i2cTest+0x158>)
 8004e60:	f003 fd21 	bl	80088a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e64:	200a      	movs	r0, #10
 8004e66:	f002 ff37 	bl	8007cd8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8004e6a:	bf00      	nop
 8004e6c:	2140      	movs	r1, #64	; 0x40
 8004e6e:	4822      	ldr	r0, [pc, #136]	; (8004ef8 <i2cTest+0x158>)
 8004e70:	f003 fd02 	bl	8008878 <HAL_GPIO_ReadPin>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d1f8      	bne.n	8004e6c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	2180      	movs	r1, #128	; 0x80
 8004e7e:	481e      	ldr	r0, [pc, #120]	; (8004ef8 <i2cTest+0x158>)
 8004e80:	f003 fd11 	bl	80088a6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e84:	200a      	movs	r0, #10
 8004e86:	f002 ff27 	bl	8007cd8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004e8a:	bf00      	nop
 8004e8c:	2180      	movs	r1, #128	; 0x80
 8004e8e:	481a      	ldr	r0, [pc, #104]	; (8004ef8 <i2cTest+0x158>)
 8004e90:	f003 fcf2 	bl	8008878 <HAL_GPIO_ReadPin>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d1f8      	bne.n	8004e8c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e9a:	23c0      	movs	r3, #192	; 0xc0
 8004e9c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8004e9e:	2312      	movs	r3, #18
 8004ea0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004eaa:	463b      	mov	r3, r7
 8004eac:	4619      	mov	r1, r3
 8004eae:	4812      	ldr	r0, [pc, #72]	; (8004ef8 <i2cTest+0x158>)
 8004eb0:	f003 fa82 	bl	80083b8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <i2cTest+0x154>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <i2cTest+0x154>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ec2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <i2cTest+0x154>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <i2cTest+0x154>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <i2cTest+0x154>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <i2cTest+0x154>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8004ee4:	4803      	ldr	r0, [pc, #12]	; (8004ef4 <i2cTest+0x154>)
 8004ee6:	f003 fd0f 	bl	8008908 <HAL_I2C_Init>
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000e40 	.word	0x20000e40
 8004ef8:	40010c00 	.word	0x40010c00

08004efc <resetUSART>:

void resetUSART() {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT\r\n", strlen("AT\r\n"), HAL_MAX_DELAY);
 8004f00:	f04f 33ff 	mov.w	r3, #4294967295
 8004f04:	2204      	movs	r2, #4
 8004f06:	490a      	ldr	r1, [pc, #40]	; (8004f30 <resetUSART+0x34>)
 8004f08:	480a      	ldr	r0, [pc, #40]	; (8004f34 <resetUSART+0x38>)
 8004f0a:	f005 ffb1 	bl	800ae70 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8004f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f12:	f002 fee1 	bl	8007cd8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+RST\r\n", strlen("AT+RST\r\n"), HAL_MAX_DELAY);
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	4906      	ldr	r1, [pc, #24]	; (8004f38 <resetUSART+0x3c>)
 8004f1e:	4805      	ldr	r0, [pc, #20]	; (8004f34 <resetUSART+0x38>)
 8004f20:	f005 ffa6 	bl	800ae70 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8004f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f28:	f002 fed6 	bl	8007cd8 <HAL_Delay>
}
 8004f2c:	bf00      	nop
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	0800e4b8 	.word	0x0800e4b8
 8004f34:	20000edc 	.word	0x20000edc
 8004f38:	0800e4c0 	.word	0x0800e4c0

08004f3c <sendHttpRequestTaskFunc>:

void sendHttpRequestTaskFunc(void *pvParameters) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	connectWifi();
 8004f44:	f000 f80e 	bl	8004f64 <connectWifi>
	lcd_print(2, 1, "seperator");
 8004f48:	4a05      	ldr	r2, [pc, #20]	; (8004f60 <sendHttpRequestTaskFunc+0x24>)
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	2002      	movs	r0, #2
 8004f4e:	f7fb fab6 	bl	80004be <lcd_print>
	sendHTTPRequest();
 8004f52:	f000 f865 	bl	8005020 <sendHTTPRequest>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	0800e4cc 	.word	0x0800e4cc

08004f64 <connectWifi>:

void connectWifi() {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b0a6      	sub	sp, #152	; 0x98
 8004f68:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT\r\n", strlen("AT\r\n"), HAL_MAX_DELAY);
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	2204      	movs	r2, #4
 8004f70:	4923      	ldr	r1, [pc, #140]	; (8005000 <connectWifi+0x9c>)
 8004f72:	4824      	ldr	r0, [pc, #144]	; (8005004 <connectWifi+0xa0>)
 8004f74:	f005 ff7c 	bl	800ae70 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8004f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f7c:	f002 feac 	bl	8007cd8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+RST\r\n", strlen("AT+RST\r\n"), HAL_MAX_DELAY);
 8004f80:	f04f 33ff 	mov.w	r3, #4294967295
 8004f84:	2208      	movs	r2, #8
 8004f86:	4920      	ldr	r1, [pc, #128]	; (8005008 <connectWifi+0xa4>)
 8004f88:	481e      	ldr	r0, [pc, #120]	; (8005004 <connectWifi+0xa0>)
 8004f8a:	f005 ff71 	bl	800ae70 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8004f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f92:	f002 fea1 	bl	8007cd8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), HAL_MAX_DELAY);
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9a:	220d      	movs	r2, #13
 8004f9c:	491b      	ldr	r1, [pc, #108]	; (800500c <connectWifi+0xa8>)
 8004f9e:	4819      	ldr	r0, [pc, #100]	; (8005004 <connectWifi+0xa0>)
 8004fa0:	f005 ff66 	bl	800ae70 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8004fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fa8:	f002 fe96 	bl	8007cd8 <HAL_Delay>

	char wifiCommand[50];
	sprintf(wifiCommand, "AT+CWJAP=\"%s\",\"%s\"\r\n", WIFI_SSID, WIFI_PASSWORD);
 8004fac:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <connectWifi+0xac>)
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <connectWifi+0xb0>)
 8004fb4:	4918      	ldr	r1, [pc, #96]	; (8005018 <connectWifi+0xb4>)
 8004fb6:	f008 f8cb 	bl	800d150 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)wifiCommand, strlen(wifiCommand), HAL_MAX_DELAY);
 8004fba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb f936 	bl	8000230 <strlen>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	480c      	ldr	r0, [pc, #48]	; (8005004 <connectWifi+0xa0>)
 8004fd2:	f005 ff4d 	bl	800ae70 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8004fd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004fda:	f002 fe7d 	bl	8007cd8 <HAL_Delay>

	char response[100];
	HAL_UART_Receive(&huart1, (uint8_t *)response, sizeof(response), HAL_MAX_DELAY);
 8004fde:	4639      	mov	r1, r7
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe4:	2264      	movs	r2, #100	; 0x64
 8004fe6:	4807      	ldr	r0, [pc, #28]	; (8005004 <connectWifi+0xa0>)
 8004fe8:	f005 ffc5 	bl	800af76 <HAL_UART_Receive>

	lcd_print(1, 1, "asd");
 8004fec:	4a0b      	ldr	r2, [pc, #44]	; (800501c <connectWifi+0xb8>)
 8004fee:	2101      	movs	r1, #1
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	f7fb fa64 	bl	80004be <lcd_print>
}
 8004ff6:	bf00      	nop
 8004ff8:	3798      	adds	r7, #152	; 0x98
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	0800e4b8 	.word	0x0800e4b8
 8005004:	20000edc 	.word	0x20000edc
 8005008:	0800e4c0 	.word	0x0800e4c0
 800500c:	0800e4d8 	.word	0x0800e4d8
 8005010:	0800e4e8 	.word	0x0800e4e8
 8005014:	0800e4f8 	.word	0x0800e4f8
 8005018:	0800e514 	.word	0x0800e514
 800501c:	0800e52c 	.word	0x0800e52c

08005020 <sendHTTPRequest>:

void sendHTTPRequest() {
 8005020:	b580      	push	{r7, lr}
 8005022:	b0f8      	sub	sp, #480	; 0x1e0
 8005024:	af00      	add	r7, sp, #0
    char tcpCommand[50];
    sprintf(tcpCommand, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SERVER_IP, SERVER_PORT);
 8005026:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 800502a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800502e:	4a59      	ldr	r2, [pc, #356]	; (8005194 <sendHTTPRequest+0x174>)
 8005030:	4959      	ldr	r1, [pc, #356]	; (8005198 <sendHTTPRequest+0x178>)
 8005032:	f008 f88d 	bl	800d150 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)tcpCommand, strlen(tcpCommand), HAL_MAX_DELAY);
 8005036:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb f8f8 	bl	8000230 <strlen>
 8005040:	4603      	mov	r3, r0
 8005042:	b29a      	uxth	r2, r3
 8005044:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	4853      	ldr	r0, [pc, #332]	; (800519c <sendHTTPRequest+0x17c>)
 800504e:	f005 ff0f 	bl	800ae70 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8005052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005056:	f002 fe3f 	bl	8007cd8 <HAL_Delay>

    char httpCommand[200];
    char postData[200];
    sprintf(postData, "{\"machineID\":\"%s\",\"machineData\":\"%s\"}", MACHINE_ID, MACHINE_DATA);
 800505a:	f107 001c 	add.w	r0, r7, #28
 800505e:	4b50      	ldr	r3, [pc, #320]	; (80051a0 <sendHTTPRequest+0x180>)
 8005060:	4a50      	ldr	r2, [pc, #320]	; (80051a4 <sendHTTPRequest+0x184>)
 8005062:	4951      	ldr	r1, [pc, #324]	; (80051a8 <sendHTTPRequest+0x188>)
 8005064:	f008 f874 	bl	800d150 <siprintf>
    sprintf(httpCommand, "AT+CIPSEND=%d\r\n", strlen(postData) + 94);
 8005068:	f107 031c 	add.w	r3, r7, #28
 800506c:	4618      	mov	r0, r3
 800506e:	f7fb f8df 	bl	8000230 <strlen>
 8005072:	4603      	mov	r3, r0
 8005074:	f103 025e 	add.w	r2, r3, #94	; 0x5e
 8005078:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800507c:	494b      	ldr	r1, [pc, #300]	; (80051ac <sendHTTPRequest+0x18c>)
 800507e:	4618      	mov	r0, r3
 8005080:	f008 f866 	bl	800d150 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)httpCommand, strlen(httpCommand), HAL_MAX_DELAY);
 8005084:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005088:	4618      	mov	r0, r3
 800508a:	f7fb f8d1 	bl	8000230 <strlen>
 800508e:	4603      	mov	r3, r0
 8005090:	b29a      	uxth	r2, r3
 8005092:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8005096:	f04f 33ff 	mov.w	r3, #4294967295
 800509a:	4840      	ldr	r0, [pc, #256]	; (800519c <sendHTTPRequest+0x17c>)
 800509c:	f005 fee8 	bl	800ae70 <HAL_UART_Transmit>
    HAL_Delay(1000);
 80050a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050a4:	f002 fe18 	bl	8007cd8 <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t *)"POST /api/machine/updateMachineData HTTP/1.1\r\n",
 80050a8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ac:	222e      	movs	r2, #46	; 0x2e
 80050ae:	4940      	ldr	r1, [pc, #256]	; (80051b0 <sendHTTPRequest+0x190>)
 80050b0:	483a      	ldr	r0, [pc, #232]	; (800519c <sendHTTPRequest+0x17c>)
 80050b2:	f005 fedd 	bl	800ae70 <HAL_UART_Transmit>
                     strlen("POST /api/machine/updateMachineData HTTP/1.1\r\n"), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart1, (uint8_t *)"Host: x.x.x.x:3000\r\n", strlen("Host: x.x.x.x:3000\r\n"), HAL_MAX_DELAY);
 80050b6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ba:	2214      	movs	r2, #20
 80050bc:	493d      	ldr	r1, [pc, #244]	; (80051b4 <sendHTTPRequest+0x194>)
 80050be:	4837      	ldr	r0, [pc, #220]	; (800519c <sendHTTPRequest+0x17c>)
 80050c0:	f005 fed6 	bl	800ae70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)"Content-Type: application/json\r\n",
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	2220      	movs	r2, #32
 80050ca:	493b      	ldr	r1, [pc, #236]	; (80051b8 <sendHTTPRequest+0x198>)
 80050cc:	4833      	ldr	r0, [pc, #204]	; (800519c <sendHTTPRequest+0x17c>)
 80050ce:	f005 fecf 	bl	800ae70 <HAL_UART_Transmit>
                     strlen("Content-Type: application/json\r\n"), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart1, (uint8_t *)"Content-Length: ", strlen("Content-Length: "), HAL_MAX_DELAY);
 80050d2:	f04f 33ff 	mov.w	r3, #4294967295
 80050d6:	2210      	movs	r2, #16
 80050d8:	4938      	ldr	r1, [pc, #224]	; (80051bc <sendHTTPRequest+0x19c>)
 80050da:	4830      	ldr	r0, [pc, #192]	; (800519c <sendHTTPRequest+0x17c>)
 80050dc:	f005 fec8 	bl	800ae70 <HAL_UART_Transmit>
    char contentLength[4];
    sprintf(contentLength, "%d\r\n", strlen(postData));
 80050e0:	f107 031c 	add.w	r3, r7, #28
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fb f8a3 	bl	8000230 <strlen>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f107 0318 	add.w	r3, r7, #24
 80050f0:	4933      	ldr	r1, [pc, #204]	; (80051c0 <sendHTTPRequest+0x1a0>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f008 f82c 	bl	800d150 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)contentLength, strlen(contentLength), HAL_MAX_DELAY);
 80050f8:	f107 0318 	add.w	r3, r7, #24
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fb f897 	bl	8000230 <strlen>
 8005102:	4603      	mov	r3, r0
 8005104:	b29a      	uxth	r2, r3
 8005106:	f107 0118 	add.w	r1, r7, #24
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	4823      	ldr	r0, [pc, #140]	; (800519c <sendHTTPRequest+0x17c>)
 8005110:	f005 feae 	bl	800ae70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
 8005114:	f04f 33ff 	mov.w	r3, #4294967295
 8005118:	2202      	movs	r2, #2
 800511a:	492a      	ldr	r1, [pc, #168]	; (80051c4 <sendHTTPRequest+0x1a4>)
 800511c:	481f      	ldr	r0, [pc, #124]	; (800519c <sendHTTPRequest+0x17c>)
 800511e:	f005 fea7 	bl	800ae70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)postData, strlen(postData), HAL_MAX_DELAY);
 8005122:	f107 031c 	add.w	r3, r7, #28
 8005126:	4618      	mov	r0, r3
 8005128:	f7fb f882 	bl	8000230 <strlen>
 800512c:	4603      	mov	r3, r0
 800512e:	b29a      	uxth	r2, r3
 8005130:	f107 011c 	add.w	r1, r7, #28
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	4818      	ldr	r0, [pc, #96]	; (800519c <sendHTTPRequest+0x17c>)
 800513a:	f005 fe99 	bl	800ae70 <HAL_UART_Transmit>
    HAL_Delay(2000);
 800513e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005142:	f002 fdc9 	bl	8007cd8 <HAL_Delay>

    char responseBuffer[20];
    memset(responseBuffer, 0, sizeof(responseBuffer));
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	2214      	movs	r2, #20
 800514a:	2100      	movs	r1, #0
 800514c:	4618      	mov	r0, r3
 800514e:	f008 f81f 	bl	800d190 <memset>

    HAL_UART_Receive(&huart1, (uint8_t *)responseBuffer, sizeof(responseBuffer) - 1, HAL_MAX_DELAY);
 8005152:	1d39      	adds	r1, r7, #4
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	2213      	movs	r2, #19
 800515a:	4810      	ldr	r0, [pc, #64]	; (800519c <sendHTTPRequest+0x17c>)
 800515c:	f005 ff0b 	bl	800af76 <HAL_UART_Receive>
    if (strncmp(responseBuffer, "HTTP/1.1 200 OK", 15) == 0) {
 8005160:	1d3b      	adds	r3, r7, #4
 8005162:	220f      	movs	r2, #15
 8005164:	4918      	ldr	r1, [pc, #96]	; (80051c8 <sendHTTPRequest+0x1a8>)
 8005166:	4618      	mov	r0, r3
 8005168:	f008 f81a 	bl	800d1a0 <strncmp>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <sendHTTPRequest+0x15e>
        lcd_print(2, 1, "İşlem Başarılı");
 8005172:	4a16      	ldr	r2, [pc, #88]	; (80051cc <sendHTTPRequest+0x1ac>)
 8005174:	2101      	movs	r1, #1
 8005176:	2002      	movs	r0, #2
 8005178:	f7fb f9a1 	bl	80004be <lcd_print>
    } else {
        lcd_print(2, 1, "Hata Oluştu");
    }
}
 800517c:	e004      	b.n	8005188 <sendHTTPRequest+0x168>
        lcd_print(2, 1, "Hata Oluştu");
 800517e:	4a14      	ldr	r2, [pc, #80]	; (80051d0 <sendHTTPRequest+0x1b0>)
 8005180:	2101      	movs	r1, #1
 8005182:	2002      	movs	r0, #2
 8005184:	f7fb f99b 	bl	80004be <lcd_print>
}
 8005188:	bf00      	nop
 800518a:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	0800e530 	.word	0x0800e530
 8005198:	0800e540 	.word	0x0800e540
 800519c:	20000edc 	.word	0x20000edc
 80051a0:	0800e55c 	.word	0x0800e55c
 80051a4:	0800e58c 	.word	0x0800e58c
 80051a8:	0800e594 	.word	0x0800e594
 80051ac:	0800e5bc 	.word	0x0800e5bc
 80051b0:	0800e5cc 	.word	0x0800e5cc
 80051b4:	0800e5fc 	.word	0x0800e5fc
 80051b8:	0800e614 	.word	0x0800e614
 80051bc:	0800e638 	.word	0x0800e638
 80051c0:	0800e64c 	.word	0x0800e64c
 80051c4:	0800e654 	.word	0x0800e654
 80051c8:	0800e658 	.word	0x0800e658
 80051cc:	0800e668 	.word	0x0800e668
 80051d0:	0800e67c 	.word	0x0800e67c

080051d4 <mainTask>:

void mainTask(void *pvParameters) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af04      	add	r7, sp, #16
 80051da:	6078      	str	r0, [r7, #4]
	xTaskCreate(sendHttpRequestTaskFunc, "sendHttpRequestTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80051dc:	2300      	movs	r3, #0
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	2301      	movs	r3, #1
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	2280      	movs	r2, #128	; 0x80
 80051e8:	49a7      	ldr	r1, [pc, #668]	; (8005488 <mainTask+0x2b4>)
 80051ea:	48a8      	ldr	r0, [pc, #672]	; (800548c <mainTask+0x2b8>)
 80051ec:	f006 fe2f 	bl	800be4e <xTaskCreate>
	while(1) {
		checkLCDBacklight();
 80051f0:	f000 f996 	bl	8005520 <checkLCDBacklight>

		//createAPandConnect();

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80051f4:	2101      	movs	r1, #1
 80051f6:	48a6      	ldr	r0, [pc, #664]	; (8005490 <mainTask+0x2bc>)
 80051f8:	f003 fb3e 	bl	8008878 <HAL_GPIO_ReadPin>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d136      	bne.n	8005270 <mainTask+0x9c>
 8005202:	2108      	movs	r1, #8
 8005204:	48a3      	ldr	r0, [pc, #652]	; (8005494 <mainTask+0x2c0>)
 8005206:	f003 fb37 	bl	8008878 <HAL_GPIO_ReadPin>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d12f      	bne.n	8005270 <mainTask+0x9c>
 8005210:	2102      	movs	r1, #2
 8005212:	489f      	ldr	r0, [pc, #636]	; (8005490 <mainTask+0x2bc>)
 8005214:	f003 fb30 	bl	8008878 <HAL_GPIO_ReadPin>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d128      	bne.n	8005270 <mainTask+0x9c>
 800521e:	2104      	movs	r1, #4
 8005220:	489b      	ldr	r0, [pc, #620]	; (8005490 <mainTask+0x2bc>)
 8005222:	f003 fb29 	bl	8008878 <HAL_GPIO_ReadPin>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d121      	bne.n	8005270 <mainTask+0x9c>
 800522c:	2108      	movs	r1, #8
 800522e:	4898      	ldr	r0, [pc, #608]	; (8005490 <mainTask+0x2bc>)
 8005230:	f003 fb22 	bl	8008878 <HAL_GPIO_ReadPin>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d11a      	bne.n	8005270 <mainTask+0x9c>
 800523a:	2180      	movs	r1, #128	; 0x80
 800523c:	4895      	ldr	r0, [pc, #596]	; (8005494 <mainTask+0x2c0>)
 800523e:	f003 fb1b 	bl	8008878 <HAL_GPIO_ReadPin>
 8005242:	4603      	mov	r3, r0
 8005244:	2b01      	cmp	r3, #1
 8005246:	d113      	bne.n	8005270 <mainTask+0x9c>
 8005248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800524c:	4891      	ldr	r0, [pc, #580]	; (8005494 <mainTask+0x2c0>)
 800524e:	f003 fb13 	bl	8008878 <HAL_GPIO_ReadPin>
 8005252:	4603      	mov	r3, r0
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10b      	bne.n	8005270 <mainTask+0x9c>
 8005258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800525c:	488d      	ldr	r0, [pc, #564]	; (8005494 <mainTask+0x2c0>)
 800525e:	f003 fb0b 	bl	8008878 <HAL_GPIO_ReadPin>
 8005262:	4603      	mov	r3, r0
 8005264:	2b01      	cmp	r3, #1
 8005266:	d103      	bne.n	8005270 <mainTask+0x9c>
			butonKontrol=0;
 8005268:	4b8b      	ldr	r3, [pc, #556]	; (8005498 <mainTask+0x2c4>)
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e003      	b.n	8005278 <mainTask+0xa4>
		} else {
			backLightTimer = millis;
 8005270:	4b8a      	ldr	r3, [pc, #552]	; (800549c <mainTask+0x2c8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a8a      	ldr	r2, [pc, #552]	; (80054a0 <mainTask+0x2cc>)
 8005276:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005278:	4b8a      	ldr	r3, [pc, #552]	; (80054a4 <mainTask+0x2d0>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d039      	beq.n	80052f4 <mainTask+0x120>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005280:	bf00      	nop
 8005282:	4889      	ldr	r0, [pc, #548]	; (80054a8 <mainTask+0x2d4>)
 8005284:	f004 f921 	bl	80094ca <HAL_I2C_GetError>
 8005288:	4603      	mov	r3, r0
 800528a:	2b04      	cmp	r3, #4
 800528c:	d0f9      	beq.n	8005282 <mainTask+0xae>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800528e:	bf00      	nop
 8005290:	4885      	ldr	r0, [pc, #532]	; (80054a8 <mainTask+0x2d4>)
 8005292:	f004 f90d 	bl	80094b0 <HAL_I2C_GetState>
 8005296:	4603      	mov	r3, r0
 8005298:	2b20      	cmp	r3, #32
 800529a:	d1f9      	bne.n	8005290 <mainTask+0xbc>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 800529c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80052a0:	9302      	str	r3, [sp, #8]
 80052a2:	233f      	movs	r3, #63	; 0x3f
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	4b81      	ldr	r3, [pc, #516]	; (80054ac <mainTask+0x2d8>)
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	233f      	movs	r3, #63	; 0x3f
 80052ac:	2200      	movs	r2, #0
 80052ae:	21a0      	movs	r1, #160	; 0xa0
 80052b0:	487d      	ldr	r0, [pc, #500]	; (80054a8 <mainTask+0x2d4>)
 80052b2:	f003 fd9b 	bl	8008dec <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 80052b6:	2005      	movs	r0, #5
 80052b8:	f002 fd0e 	bl	8007cd8 <HAL_Delay>

		  hafizaYaz=0;
 80052bc:	4b79      	ldr	r3, [pc, #484]	; (80054a4 <mainTask+0x2d0>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80052c2:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <mainTask+0x2dc>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <mainTask+0x102>
			  lcd_print(2,1,"Data yazildi    ");
 80052ca:	4a7a      	ldr	r2, [pc, #488]	; (80054b4 <mainTask+0x2e0>)
 80052cc:	2101      	movs	r1, #1
 80052ce:	2002      	movs	r0, #2
 80052d0:	f7fb f8f5 	bl	80004be <lcd_print>
 80052d4:	e008      	b.n	80052e8 <mainTask+0x114>
		  } else if(dilSecim==1) {
 80052d6:	4b76      	ldr	r3, [pc, #472]	; (80054b0 <mainTask+0x2dc>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d104      	bne.n	80052e8 <mainTask+0x114>
			  lcd_print(2,1,"Data Wrote      ");
 80052de:	4a76      	ldr	r2, [pc, #472]	; (80054b8 <mainTask+0x2e4>)
 80052e0:	2101      	movs	r1, #1
 80052e2:	2002      	movs	r0, #2
 80052e4:	f7fb f8eb 	bl	80004be <lcd_print>
		  }

		  HAL_Delay(1000);
 80052e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052ec:	f002 fcf4 	bl	8007cd8 <HAL_Delay>
		  lcd_clear();
 80052f0:	f7fb f8fa 	bl	80004e8 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80052f4:	4b71      	ldr	r3, [pc, #452]	; (80054bc <mainTask+0x2e8>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f083 0301 	eor.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d06b      	beq.n	80053da <mainTask+0x206>
 8005302:	4869      	ldr	r0, [pc, #420]	; (80054a8 <mainTask+0x2d4>)
 8005304:	f004 f8d4 	bl	80094b0 <HAL_I2C_GetState>
 8005308:	4603      	mov	r3, r0
 800530a:	2b20      	cmp	r3, #32
 800530c:	d165      	bne.n	80053da <mainTask+0x206>
		  if(ilkOkuma==0) {
 800530e:	4b6c      	ldr	r3, [pc, #432]	; (80054c0 <mainTask+0x2ec>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	f083 0301 	eor.w	r3, r3, #1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d044      	beq.n	80053a6 <mainTask+0x1d2>
			  lcd_print(1,1,"   **EEPROM**   ");
 800531c:	4a69      	ldr	r2, [pc, #420]	; (80054c4 <mainTask+0x2f0>)
 800531e:	2101      	movs	r1, #1
 8005320:	2001      	movs	r0, #1
 8005322:	f7fb f8cc 	bl	80004be <lcd_print>
			  if(dilSecim==0) {
 8005326:	4b62      	ldr	r3, [pc, #392]	; (80054b0 <mainTask+0x2dc>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d105      	bne.n	800533a <mainTask+0x166>
				  lcd_print(2,1,"Data Okunuyor...");
 800532e:	4a66      	ldr	r2, [pc, #408]	; (80054c8 <mainTask+0x2f4>)
 8005330:	2101      	movs	r1, #1
 8005332:	2002      	movs	r0, #2
 8005334:	f7fb f8c3 	bl	80004be <lcd_print>
 8005338:	e008      	b.n	800534c <mainTask+0x178>
			  } else if(dilSecim==1) {
 800533a:	4b5d      	ldr	r3, [pc, #372]	; (80054b0 <mainTask+0x2dc>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d104      	bne.n	800534c <mainTask+0x178>
				  lcd_print(2,1,"Data Reading... ");
 8005342:	4a62      	ldr	r2, [pc, #392]	; (80054cc <mainTask+0x2f8>)
 8005344:	2101      	movs	r1, #1
 8005346:	2002      	movs	r0, #2
 8005348:	f7fb f8b9 	bl	80004be <lcd_print>
			  }
			  HAL_Delay(1000);
 800534c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005350:	f002 fcc2 	bl	8007cd8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005354:	bf00      	nop
 8005356:	4854      	ldr	r0, [pc, #336]	; (80054a8 <mainTask+0x2d4>)
 8005358:	f004 f8b7 	bl	80094ca <HAL_I2C_GetError>
 800535c:	4603      	mov	r3, r0
 800535e:	2b04      	cmp	r3, #4
 8005360:	d0f9      	beq.n	8005356 <mainTask+0x182>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005362:	e003      	b.n	800536c <mainTask+0x198>
				  HAL_Delay(1000);
 8005364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005368:	f002 fcb6 	bl	8007cd8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800536c:	484e      	ldr	r0, [pc, #312]	; (80054a8 <mainTask+0x2d4>)
 800536e:	f004 f89f 	bl	80094b0 <HAL_I2C_GetState>
 8005372:	4603      	mov	r3, r0
 8005374:	2b20      	cmp	r3, #32
 8005376:	d1f5      	bne.n	8005364 <mainTask+0x190>
			  }

			  if(dilSecim==0) {
 8005378:	4b4d      	ldr	r3, [pc, #308]	; (80054b0 <mainTask+0x2dc>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <mainTask+0x1b8>
				  lcd_print(2,1,"Data Okundu.    ");
 8005380:	4a53      	ldr	r2, [pc, #332]	; (80054d0 <mainTask+0x2fc>)
 8005382:	2101      	movs	r1, #1
 8005384:	2002      	movs	r0, #2
 8005386:	f7fb f89a 	bl	80004be <lcd_print>
 800538a:	e008      	b.n	800539e <mainTask+0x1ca>
			  } else if(dilSecim==1) {
 800538c:	4b48      	ldr	r3, [pc, #288]	; (80054b0 <mainTask+0x2dc>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d104      	bne.n	800539e <mainTask+0x1ca>
				  lcd_print(2,1,"Data Read.      ");
 8005394:	4a4f      	ldr	r2, [pc, #316]	; (80054d4 <mainTask+0x300>)
 8005396:	2101      	movs	r1, #1
 8005398:	2002      	movs	r0, #2
 800539a:	f7fb f890 	bl	80004be <lcd_print>
			  }

			  ilkOkuma=1;
 800539e:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <mainTask+0x2ec>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	e014      	b.n	80053d0 <mainTask+0x1fc>
		  } else {
			  if(dilSecim==0) {
 80053a6:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <mainTask+0x2dc>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <mainTask+0x1e6>
				  lcd_print(2,1,"Deger Kaydedildi");
 80053ae:	4a4a      	ldr	r2, [pc, #296]	; (80054d8 <mainTask+0x304>)
 80053b0:	2101      	movs	r1, #1
 80053b2:	2002      	movs	r0, #2
 80053b4:	f7fb f883 	bl	80004be <lcd_print>
 80053b8:	e008      	b.n	80053cc <mainTask+0x1f8>
			  } else if(dilSecim==1) {
 80053ba:	4b3d      	ldr	r3, [pc, #244]	; (80054b0 <mainTask+0x2dc>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d104      	bne.n	80053cc <mainTask+0x1f8>
				  lcd_print(2,1,"Value Saved     ");
 80053c2:	4a46      	ldr	r2, [pc, #280]	; (80054dc <mainTask+0x308>)
 80053c4:	2101      	movs	r1, #1
 80053c6:	2002      	movs	r0, #2
 80053c8:	f7fb f879 	bl	80004be <lcd_print>
			  }
			  lcd_clear();
 80053cc:	f7fb f88c 	bl	80004e8 <lcd_clear>
		  }

		  eepromKontrol();
 80053d0:	f7ff f970 	bl	80046b4 <eepromKontrol>
		  hafizaOku=1;
 80053d4:	4b39      	ldr	r3, [pc, #228]	; (80054bc <mainTask+0x2e8>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80053da:	4b41      	ldr	r3, [pc, #260]	; (80054e0 <mainTask+0x30c>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d11c      	bne.n	800541c <mainTask+0x248>
 80053e2:	4b40      	ldr	r3, [pc, #256]	; (80054e4 <mainTask+0x310>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f083 0301 	eor.w	r3, r3, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d015      	beq.n	800541c <mainTask+0x248>
 80053f0:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <mainTask+0x314>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d111      	bne.n	800541c <mainTask+0x248>
			lcd_clear();
 80053f8:	f7fb f876 	bl	80004e8 <lcd_clear>
			HAL_Delay(10);
 80053fc:	200a      	movs	r0, #10
 80053fe:	f002 fc6b 	bl	8007cd8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8005402:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <mainTask+0x318>)
 8005404:	2101      	movs	r1, #1
 8005406:	2001      	movs	r0, #1
 8005408:	f7fb f859 	bl	80004be <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800540c:	4a38      	ldr	r2, [pc, #224]	; (80054f0 <mainTask+0x31c>)
 800540e:	2101      	movs	r1, #1
 8005410:	2002      	movs	r0, #2
 8005412:	f7fb f854 	bl	80004be <lcd_print>
			mesajYazildi=1;
 8005416:	4b33      	ldr	r3, [pc, #204]	; (80054e4 <mainTask+0x310>)
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800541c:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <mainTask+0x30c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d112      	bne.n	800544a <mainTask+0x276>
 8005424:	2102      	movs	r1, #2
 8005426:	481a      	ldr	r0, [pc, #104]	; (8005490 <mainTask+0x2bc>)
 8005428:	f003 fa26 	bl	8008878 <HAL_GPIO_ReadPin>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10b      	bne.n	800544a <mainTask+0x276>
 8005432:	2104      	movs	r1, #4
 8005434:	4816      	ldr	r0, [pc, #88]	; (8005490 <mainTask+0x2bc>)
 8005436:	f003 fa1f 	bl	8008878 <HAL_GPIO_ReadPin>
 800543a:	4603      	mov	r3, r0
 800543c:	2b01      	cmp	r3, #1
 800543e:	d104      	bne.n	800544a <mainTask+0x276>
			menuGiris=1;
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <mainTask+0x30c>)
 8005442:	2201      	movs	r2, #1
 8005444:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005446:	f7fb f84f 	bl	80004e8 <lcd_clear>
		}

		if(menuGiris==1) {
 800544a:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <mainTask+0x30c>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <mainTask+0x282>
			menu();
 8005452:	f7fb f895 	bl	8000580 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800545a:	480e      	ldr	r0, [pc, #56]	; (8005494 <mainTask+0x2c0>)
 800545c:	f003 fa3b 	bl	80088d6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005464:	4823      	ldr	r0, [pc, #140]	; (80054f4 <mainTask+0x320>)
 8005466:	f003 fa07 	bl	8008878 <HAL_GPIO_ReadPin>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d147      	bne.n	8005500 <mainTask+0x32c>
 8005470:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <mainTask+0x324>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	f083 0301 	eor.w	r3, r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d040      	beq.n	8005500 <mainTask+0x32c>
			stopVar=1;
 800547e:	4b1f      	ldr	r3, [pc, #124]	; (80054fc <mainTask+0x328>)
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e03f      	b.n	8005506 <mainTask+0x332>
 8005486:	bf00      	nop
 8005488:	0800e68c 	.word	0x0800e68c
 800548c:	08004f3d 	.word	0x08004f3d
 8005490:	40010800 	.word	0x40010800
 8005494:	40011000 	.word	0x40011000
 8005498:	20000cb2 	.word	0x20000cb2
 800549c:	20000c60 	.word	0x20000c60
 80054a0:	20000c7c 	.word	0x20000c7c
 80054a4:	20000caf 	.word	0x20000caf
 80054a8:	20000e40 	.word	0x20000e40
 80054ac:	20000c18 	.word	0x20000c18
 80054b0:	20000ca4 	.word	0x20000ca4
 80054b4:	0800e6a0 	.word	0x0800e6a0
 80054b8:	0800e6b4 	.word	0x0800e6b4
 80054bc:	20000cb0 	.word	0x20000cb0
 80054c0:	20000cb1 	.word	0x20000cb1
 80054c4:	0800e6c8 	.word	0x0800e6c8
 80054c8:	0800e6dc 	.word	0x0800e6dc
 80054cc:	0800e6f0 	.word	0x0800e6f0
 80054d0:	0800e704 	.word	0x0800e704
 80054d4:	0800e718 	.word	0x0800e718
 80054d8:	0800e72c 	.word	0x0800e72c
 80054dc:	0800e740 	.word	0x0800e740
 80054e0:	20000ca1 	.word	0x20000ca1
 80054e4:	20000cb7 	.word	0x20000cb7
 80054e8:	20000ca2 	.word	0x20000ca2
 80054ec:	0800e444 	.word	0x0800e444
 80054f0:	0800e458 	.word	0x0800e458
 80054f4:	40010c00 	.word	0x40010c00
 80054f8:	20000cd8 	.word	0x20000cd8
 80054fc:	20000cd5 	.word	0x20000cd5
		} else {
			stopVar=0;
 8005500:	4b06      	ldr	r3, [pc, #24]	; (800551c <mainTask+0x348>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005506:	f000 f825 	bl	8005554 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800550a:	f000 f857 	bl	80055bc <checkBasGonder>

		/******** Kapı Secimleri ***********/

		checkKapiSecimleri();
 800550e:	f000 f89b 	bl	8005648 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/

		/*MOTOR CALISIYOR*/

		checkAktifCalisma();
 8005512:	f000 f8eb 	bl	80056ec <checkAktifCalisma>

		// DEMO MOD BASLIYOR

		// DEMO YUKARI CALISMA

		checkDemoModCalisma();
 8005516:	f001 fc39 	bl	8006d8c <checkDemoModCalisma>
		checkLCDBacklight();
 800551a:	e669      	b.n	80051f0 <mainTask+0x1c>
 800551c:	20000cd5 	.word	0x20000cd5

08005520 <checkLCDBacklight>:
			}
		}
	}
}

void checkLCDBacklight() {
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8005524:	4b08      	ldr	r3, [pc, #32]	; (8005548 <checkLCDBacklight+0x28>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	4b08      	ldr	r3, [pc, #32]	; (800554c <checkLCDBacklight+0x2c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	4a08      	ldr	r2, [pc, #32]	; (8005550 <checkLCDBacklight+0x30>)
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	4293      	cmp	r3, r2
 8005534:	d303      	bcc.n	800553e <checkLCDBacklight+0x1e>
				lcd_backlight(0);
 8005536:	2000      	movs	r0, #0
 8005538:	f7fa ffe0 	bl	80004fc <lcd_backlight>
			} else {
				lcd_backlight(1);
			}
}
 800553c:	e002      	b.n	8005544 <checkLCDBacklight+0x24>
				lcd_backlight(1);
 800553e:	2001      	movs	r0, #1
 8005540:	f7fa ffdc 	bl	80004fc <lcd_backlight>
}
 8005544:	bf00      	nop
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000c60 	.word	0x20000c60
 800554c:	20000c7c 	.word	0x20000c7c
 8005550:	20000940 	.word	0x20000940

08005554 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005558:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <checkBasincSalteri+0x54>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <checkBasincSalteri+0x12>
				basincVar=1;
 8005560:	4b12      	ldr	r3, [pc, #72]	; (80055ac <checkBasincSalteri+0x58>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
			}

			if(basincSalteri==1) {
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <checkBasincSalteri+0x54>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d119      	bne.n	80055a2 <checkBasincSalteri+0x4e>
				if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800556e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005572:	480f      	ldr	r0, [pc, #60]	; (80055b0 <checkBasincSalteri+0x5c>)
 8005574:	f003 f980 	bl	8008878 <HAL_GPIO_ReadPin>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <checkBasincSalteri+0x40>
					if(millis-timer5>=3) {
 800557e:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <checkBasincSalteri+0x60>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <checkBasincSalteri+0x64>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d90a      	bls.n	80055a2 <checkBasincSalteri+0x4e>
						basincVar=1;
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <checkBasincSalteri+0x58>)
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
				} else {
					timer5=millis;
					basincVar=0;
				}
			}
}
 8005592:	e006      	b.n	80055a2 <checkBasincSalteri+0x4e>
					timer5=millis;
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <checkBasincSalteri+0x60>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a07      	ldr	r2, [pc, #28]	; (80055b8 <checkBasincSalteri+0x64>)
 800559a:	6013      	str	r3, [r2, #0]
					basincVar=0;
 800559c:	4b03      	ldr	r3, [pc, #12]	; (80055ac <checkBasincSalteri+0x58>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000c8b 	.word	0x20000c8b
 80055ac:	20000c87 	.word	0x20000c87
 80055b0:	40011000 	.word	0x40011000
 80055b4:	20000c60 	.word	0x20000c60
 80055b8:	20000c78 	.word	0x20000c78

080055bc <checkBasGonder>:

void checkBasGonder() {
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80055c0:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <checkBasGonder+0x74>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d10b      	bne.n	80055e0 <checkBasGonder+0x24>
 80055c8:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <checkBasGonder+0x78>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <checkBasGonder+0x24>
 80055d0:	4b19      	ldr	r3, [pc, #100]	; (8005638 <checkBasGonder+0x7c>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <checkBasGonder+0x24>
				basgondercalisyukari=1;
 80055d8:	4b18      	ldr	r3, [pc, #96]	; (800563c <checkBasGonder+0x80>)
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e009      	b.n	80055f4 <checkBasGonder+0x38>
			} else if(yukarimotorcalisiyor==0) {
 80055e0:	4b14      	ldr	r3, [pc, #80]	; (8005634 <checkBasGonder+0x78>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f083 0301 	eor.w	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <checkBasGonder+0x38>
				basgondercalisyukari=0;
 80055ee:	4b13      	ldr	r3, [pc, #76]	; (800563c <checkBasGonder+0x80>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
			}

			if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <checkBasGonder+0x74>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d10b      	bne.n	8005614 <checkBasGonder+0x58>
 80055fc:	4b10      	ldr	r3, [pc, #64]	; (8005640 <checkBasGonder+0x84>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <checkBasGonder+0x58>
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <checkBasGonder+0x7c>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d103      	bne.n	8005614 <checkBasGonder+0x58>
				basgondercalisasagi=1;
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <checkBasGonder+0x88>)
 800560e:	2201      	movs	r2, #1
 8005610:	701a      	strb	r2, [r3, #0]
			} else if(asagivalfcalisiyor==0) {
				basgondercalisasagi=0;
			}
}
 8005612:	e009      	b.n	8005628 <checkBasGonder+0x6c>
			} else if(asagivalfcalisiyor==0) {
 8005614:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <checkBasGonder+0x84>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f083 0301 	eor.w	r3, r3, #1
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <checkBasGonder+0x6c>
				basgondercalisasagi=0;
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <checkBasGonder+0x88>)
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	20000c85 	.word	0x20000c85
 8005634:	20000cb8 	.word	0x20000cb8
 8005638:	20000c93 	.word	0x20000c93
 800563c:	20000cbf 	.word	0x20000cbf
 8005640:	20000cbb 	.word	0x20000cbb
 8005644:	20000cc0 	.word	0x20000cc0

08005648 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800564c:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <checkKapiSecimleri+0x98>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <checkKapiSecimleri+0x12>
				kapiSivicVar=1;
 8005654:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <checkKapiSecimleri+0x9c>)
 8005656:	2201      	movs	r2, #1
 8005658:	701a      	strb	r2, [r3, #0]
			}

			if(kapiSecimleri==1) {
 800565a:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <checkKapiSecimleri+0x98>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d10e      	bne.n	8005680 <checkKapiSecimleri+0x38>
				if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005666:	4820      	ldr	r0, [pc, #128]	; (80056e8 <checkKapiSecimleri+0xa0>)
 8005668:	f003 f906 	bl	8008878 <HAL_GPIO_ReadPin>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <checkKapiSecimleri+0x32>
					kapiSivicVar=1;
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <checkKapiSecimleri+0x9c>)
 8005674:	2201      	movs	r2, #1
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	e002      	b.n	8005680 <checkKapiSecimleri+0x38>
				} else {
					kapiSivicVar=0;
 800567a:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <checkKapiSecimleri+0x9c>)
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==2){
 8005680:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <checkKapiSecimleri+0x98>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d10e      	bne.n	80056a6 <checkKapiSecimleri+0x5e>
				if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8005688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800568c:	4816      	ldr	r0, [pc, #88]	; (80056e8 <checkKapiSecimleri+0xa0>)
 800568e:	f003 f8f3 	bl	8008878 <HAL_GPIO_ReadPin>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <checkKapiSecimleri+0x58>
					kapiSivicVar=1;
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <checkKapiSecimleri+0x9c>)
 800569a:	2201      	movs	r2, #1
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e002      	b.n	80056a6 <checkKapiSecimleri+0x5e>
				} else {
					kapiSivicVar=0;
 80056a0:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <checkKapiSecimleri+0x9c>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==3) {
 80056a6:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <checkKapiSecimleri+0x98>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d116      	bne.n	80056dc <checkKapiSecimleri+0x94>
				if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80056ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056b2:	480d      	ldr	r0, [pc, #52]	; (80056e8 <checkKapiSecimleri+0xa0>)
 80056b4:	f003 f8e0 	bl	8008878 <HAL_GPIO_ReadPin>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <checkKapiSecimleri+0x8e>
 80056be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056c2:	4809      	ldr	r0, [pc, #36]	; (80056e8 <checkKapiSecimleri+0xa0>)
 80056c4:	f003 f8d8 	bl	8008878 <HAL_GPIO_ReadPin>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <checkKapiSecimleri+0x8e>
					kapiSivicVar=1;
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <checkKapiSecimleri+0x9c>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
				} else {
					kapiSivicVar=0;
				}
			}
}
 80056d4:	e002      	b.n	80056dc <checkKapiSecimleri+0x94>
					kapiSivicVar=0;
 80056d6:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <checkKapiSecimleri+0x9c>)
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
}
 80056dc:	bf00      	nop
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000c8c 	.word	0x20000c8c
 80056e4:	20000cd6 	.word	0x20000cd6
 80056e8:	40010800 	.word	0x40010800

080056ec <checkAktifCalisma>:

void checkAktifCalisma() {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80056f0:	4b62      	ldr	r3, [pc, #392]	; (800587c <checkAktifCalisma+0x190>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f041 8332 	bne.w	8006d5e <checkAktifCalisma+0x1672>
 80056fa:	4b61      	ldr	r3, [pc, #388]	; (8005880 <checkAktifCalisma+0x194>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f041 832d 	bne.w	8006d5e <checkAktifCalisma+0x1672>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005704:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <checkAktifCalisma+0x198>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11a      	bne.n	8005742 <checkAktifCalisma+0x56>
 800570c:	4b5e      	ldr	r3, [pc, #376]	; (8005888 <checkAktifCalisma+0x19c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <checkAktifCalisma+0x56>
 8005714:	4b5d      	ldr	r3, [pc, #372]	; (800588c <checkAktifCalisma+0x1a0>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <checkAktifCalisma+0x46>
 800571c:	4b5c      	ldr	r3, [pc, #368]	; (8005890 <checkAktifCalisma+0x1a4>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f083 0301 	eor.w	r3, r3, #1
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <checkAktifCalisma+0x46>
 800572a:	4b5a      	ldr	r3, [pc, #360]	; (8005894 <checkAktifCalisma+0x1a8>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d007      	beq.n	8005742 <checkAktifCalisma+0x56>
 8005732:	4b59      	ldr	r3, [pc, #356]	; (8005898 <checkAktifCalisma+0x1ac>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d018      	beq.n	800576c <checkAktifCalisma+0x80>
 800573a:	4b58      	ldr	r3, [pc, #352]	; (800589c <checkAktifCalisma+0x1b0>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d114      	bne.n	800576c <checkAktifCalisma+0x80>
 8005742:	4b57      	ldr	r3, [pc, #348]	; (80058a0 <checkAktifCalisma+0x1b4>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d010      	beq.n	800576c <checkAktifCalisma+0x80>
 800574a:	4b56      	ldr	r3, [pc, #344]	; (80058a4 <checkAktifCalisma+0x1b8>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <checkAktifCalisma+0x80>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005752:	2201      	movs	r2, #1
 8005754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005758:	4853      	ldr	r0, [pc, #332]	; (80058a8 <checkAktifCalisma+0x1bc>)
 800575a:	f003 f8a4 	bl	80088a6 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 800575e:	4b53      	ldr	r3, [pc, #332]	; (80058ac <checkAktifCalisma+0x1c0>)
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005764:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <checkAktifCalisma+0x1c4>)
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e008      	b.n	800577e <checkAktifCalisma+0x92>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800576c:	2200      	movs	r2, #0
 800576e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005772:	484d      	ldr	r0, [pc, #308]	; (80058a8 <checkAktifCalisma+0x1bc>)
 8005774:	f003 f897 	bl	80088a6 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005778:	4b4c      	ldr	r3, [pc, #304]	; (80058ac <checkAktifCalisma+0x1c0>)
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 800577e:	4b40      	ldr	r3, [pc, #256]	; (8005880 <checkAktifCalisma+0x194>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d160      	bne.n	8005848 <checkAktifCalisma+0x15c>
 8005786:	4b46      	ldr	r3, [pc, #280]	; (80058a0 <checkAktifCalisma+0x1b4>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d05c      	beq.n	8005848 <checkAktifCalisma+0x15c>
 800578e:	4b45      	ldr	r3, [pc, #276]	; (80058a4 <checkAktifCalisma+0x1b8>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d058      	beq.n	8005848 <checkAktifCalisma+0x15c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800579a:	4843      	ldr	r0, [pc, #268]	; (80058a8 <checkAktifCalisma+0x1bc>)
 800579c:	f003 f86c 	bl	8008878 <HAL_GPIO_ReadPin>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <checkAktifCalisma+0xc2>
 80057a6:	4b43      	ldr	r3, [pc, #268]	; (80058b4 <checkAktifCalisma+0x1c8>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d04c      	beq.n	8005848 <checkAktifCalisma+0x15c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057ae:	2102      	movs	r1, #2
 80057b0:	4841      	ldr	r0, [pc, #260]	; (80058b8 <checkAktifCalisma+0x1cc>)
 80057b2:	f003 f861 	bl	8008878 <HAL_GPIO_ReadPin>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d145      	bne.n	8005848 <checkAktifCalisma+0x15c>
							&& (basincVar)
 80057bc:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <checkAktifCalisma+0x1d0>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d041      	beq.n	8005848 <checkAktifCalisma+0x15c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80057c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057c8:	4837      	ldr	r0, [pc, #220]	; (80058a8 <checkAktifCalisma+0x1bc>)
 80057ca:	f003 f855 	bl	8008878 <HAL_GPIO_ReadPin>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10e      	bne.n	80057f2 <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80057d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057d8:	4833      	ldr	r0, [pc, #204]	; (80058a8 <checkAktifCalisma+0x1bc>)
 80057da:	f003 f84d 	bl	8008878 <HAL_GPIO_ReadPin>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d106      	bne.n	80057f2 <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80057e4:	2140      	movs	r1, #64	; 0x40
 80057e6:	4834      	ldr	r0, [pc, #208]	; (80058b8 <checkAktifCalisma+0x1cc>)
 80057e8:	f003 f846 	bl	8008878 <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d003      	beq.n	80057fa <checkAktifCalisma+0x10e>
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <checkAktifCalisma+0x198>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d026      	beq.n	8005848 <checkAktifCalisma+0x15c>
							&& (asagivalfcalisiyor==0)
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <checkAktifCalisma+0x1a0>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	f083 0301 	eor.w	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01f      	beq.n	8005848 <checkAktifCalisma+0x15c>
							&& (devmotoryukaricalisiyor==0)
 8005808:	4b1f      	ldr	r3, [pc, #124]	; (8005888 <checkAktifCalisma+0x19c>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <checkAktifCalisma+0x15c>
							&& (devmotorasagicalisiyor==0)
 8005816:	4b20      	ldr	r3, [pc, #128]	; (8005898 <checkAktifCalisma+0x1ac>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f083 0301 	eor.w	r3, r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d011      	beq.n	8005848 <checkAktifCalisma+0x15c>
							&&(devyukarivalfcalisiyor==0)
 8005824:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <checkAktifCalisma+0x1d4>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f083 0301 	eor.w	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <checkAktifCalisma+0x15c>
							&&(devasagivalfcalisiyor==0)) {
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <checkAktifCalisma+0x1d8>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f083 0301 	eor.w	r3, r3, #1
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <checkAktifCalisma+0x15c>
					yukarimotorcalisiyor=1;
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <checkAktifCalisma+0x198>)
 8005842:	2201      	movs	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e002      	b.n	800584e <checkAktifCalisma+0x162>
				} else {
					yukarimotorcalisiyor=0;
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <checkAktifCalisma+0x198>)
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <checkAktifCalisma+0x198>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d03a      	beq.n	80058cc <checkAktifCalisma+0x1e0>
 8005856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800585a:	4817      	ldr	r0, [pc, #92]	; (80058b8 <checkAktifCalisma+0x1cc>)
 800585c:	f003 f80c 	bl	8008878 <HAL_GPIO_ReadPin>
 8005860:	4603      	mov	r3, r0
 8005862:	2b01      	cmp	r3, #1
 8005864:	d132      	bne.n	80058cc <checkAktifCalisma+0x1e0>
 8005866:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <checkAktifCalisma+0x1dc>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d02e      	beq.n	80058cc <checkAktifCalisma+0x1e0>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800586e:	2201      	movs	r2, #1
 8005870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005874:	480c      	ldr	r0, [pc, #48]	; (80058a8 <checkAktifCalisma+0x1bc>)
 8005876:	f003 f816 	bl	80088a6 <HAL_GPIO_WritePin>
 800587a:	e02d      	b.n	80058d8 <checkAktifCalisma+0x1ec>
 800587c:	20000ca2 	.word	0x20000ca2
 8005880:	20000ca1 	.word	0x20000ca1
 8005884:	20000cb8 	.word	0x20000cb8
 8005888:	20000cb9 	.word	0x20000cb9
 800588c:	20000cbb 	.word	0x20000cbb
 8005890:	20000cb3 	.word	0x20000cb3
 8005894:	20000c97 	.word	0x20000c97
 8005898:	20000cba 	.word	0x20000cba
 800589c:	20000c96 	.word	0x20000c96
 80058a0:	20000cd5 	.word	0x20000cd5
 80058a4:	20000cd6 	.word	0x20000cd6
 80058a8:	40010c00 	.word	0x40010c00
 80058ac:	20000cd7 	.word	0x20000cd7
 80058b0:	20000cc2 	.word	0x20000cc2
 80058b4:	20000cbf 	.word	0x20000cbf
 80058b8:	40011000 	.word	0x40011000
 80058bc:	20000c87 	.word	0x20000c87
 80058c0:	20000cbd 	.word	0x20000cbd
 80058c4:	20000cbe 	.word	0x20000cbe
 80058c8:	20000c92 	.word	0x20000c92
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80058cc:	2200      	movs	r2, #0
 80058ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058d2:	4860      	ldr	r0, [pc, #384]	; (8005a54 <checkAktifCalisma+0x368>)
 80058d4:	f002 ffe7 	bl	80088a6 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80058d8:	4b5f      	ldr	r3, [pc, #380]	; (8005a58 <checkAktifCalisma+0x36c>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d013      	beq.n	8005908 <checkAktifCalisma+0x21c>
 80058e0:	4b5e      	ldr	r3, [pc, #376]	; (8005a5c <checkAktifCalisma+0x370>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d007      	beq.n	80058f8 <checkAktifCalisma+0x20c>
 80058e8:	4b5c      	ldr	r3, [pc, #368]	; (8005a5c <checkAktifCalisma+0x370>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d003      	beq.n	80058f8 <checkAktifCalisma+0x20c>
 80058f0:	4b5b      	ldr	r3, [pc, #364]	; (8005a60 <checkAktifCalisma+0x374>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <checkAktifCalisma+0x21c>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80058f8:	2201      	movs	r2, #1
 80058fa:	2104      	movs	r1, #4
 80058fc:	4855      	ldr	r0, [pc, #340]	; (8005a54 <checkAktifCalisma+0x368>)
 80058fe:	f002 ffd2 	bl	80088a6 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005902:	4b58      	ldr	r3, [pc, #352]	; (8005a64 <checkAktifCalisma+0x378>)
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005908:	4b56      	ldr	r3, [pc, #344]	; (8005a64 <checkAktifCalisma+0x378>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02f      	beq.n	8005970 <checkAktifCalisma+0x284>
 8005910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005914:	484f      	ldr	r0, [pc, #316]	; (8005a54 <checkAktifCalisma+0x368>)
 8005916:	f002 ffaf 	bl	8008878 <HAL_GPIO_ReadPin>
 800591a:	4603      	mov	r3, r0
 800591c:	2b01      	cmp	r3, #1
 800591e:	d106      	bne.n	800592e <checkAktifCalisma+0x242>
 8005920:	4b51      	ldr	r3, [pc, #324]	; (8005a68 <checkAktifCalisma+0x37c>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f083 0301 	eor.w	r3, r3, #1
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <checkAktifCalisma+0x250>
 800592e:	2102      	movs	r1, #2
 8005930:	484e      	ldr	r0, [pc, #312]	; (8005a6c <checkAktifCalisma+0x380>)
 8005932:	f002 ffa1 	bl	8008878 <HAL_GPIO_ReadPin>
 8005936:	4603      	mov	r3, r0
 8005938:	2b01      	cmp	r3, #1
 800593a:	d119      	bne.n	8005970 <checkAktifCalisma+0x284>
 800593c:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <checkAktifCalisma+0x384>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d015      	beq.n	8005970 <checkAktifCalisma+0x284>
 8005944:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <checkAktifCalisma+0x388>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <checkAktifCalisma+0x284>
 800594c:	4b4a      	ldr	r3, [pc, #296]	; (8005a78 <checkAktifCalisma+0x38c>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <checkAktifCalisma+0x284>
 8005954:	4b49      	ldr	r3, [pc, #292]	; (8005a7c <checkAktifCalisma+0x390>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f083 0301 	eor.w	r3, r3, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d006      	beq.n	8005970 <checkAktifCalisma+0x284>
					timer2=millis;
 8005962:	4b47      	ldr	r3, [pc, #284]	; (8005a80 <checkAktifCalisma+0x394>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a47      	ldr	r2, [pc, #284]	; (8005a84 <checkAktifCalisma+0x398>)
 8005968:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <checkAktifCalisma+0x390>)
 800596c:	2201      	movs	r2, #1
 800596e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005970:	4b43      	ldr	r3, [pc, #268]	; (8005a80 <checkAktifCalisma+0x394>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b43      	ldr	r3, [pc, #268]	; (8005a84 <checkAktifCalisma+0x398>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	4a43      	ldr	r2, [pc, #268]	; (8005a88 <checkAktifCalisma+0x39c>)
 800597c:	7812      	ldrb	r2, [r2, #0]
 800597e:	4293      	cmp	r3, r2
 8005980:	d303      	bcc.n	800598a <checkAktifCalisma+0x29e>
 8005982:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <checkAktifCalisma+0x390>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d111      	bne.n	80059ae <checkAktifCalisma+0x2c2>
 800598a:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <checkAktifCalisma+0x384>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f083 0301 	eor.w	r3, r3, #1
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <checkAktifCalisma+0x2c2>
 8005998:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <checkAktifCalisma+0x388>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f083 0301 	eor.w	r3, r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <checkAktifCalisma+0x2c2>
 80059a6:	4b34      	ldr	r3, [pc, #208]	; (8005a78 <checkAktifCalisma+0x38c>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <checkAktifCalisma+0x2d8>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80059ae:	2200      	movs	r2, #0
 80059b0:	2104      	movs	r1, #4
 80059b2:	4828      	ldr	r0, [pc, #160]	; (8005a54 <checkAktifCalisma+0x368>)
 80059b4:	f002 ff77 	bl	80088a6 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80059b8:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <checkAktifCalisma+0x378>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80059be:	4b2f      	ldr	r3, [pc, #188]	; (8005a7c <checkAktifCalisma+0x390>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80059c4:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <checkAktifCalisma+0x3a0>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <checkAktifCalisma+0x2e6>
					cerceveVar=1;
 80059cc:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <checkAktifCalisma+0x3a4>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <checkAktifCalisma+0x3a0>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d116      	bne.n	8005a08 <checkAktifCalisma+0x31c>
 80059da:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <checkAktifCalisma+0x3a8>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d112      	bne.n	8005a08 <checkAktifCalisma+0x31c>
 80059e2:	2101      	movs	r1, #1
 80059e4:	4821      	ldr	r0, [pc, #132]	; (8005a6c <checkAktifCalisma+0x380>)
 80059e6:	f002 ff47 	bl	8008878 <HAL_GPIO_ReadPin>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10b      	bne.n	8005a08 <checkAktifCalisma+0x31c>
 80059f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059f4:	4817      	ldr	r0, [pc, #92]	; (8005a54 <checkAktifCalisma+0x368>)
 80059f6:	f002 ff3f 	bl	8008878 <HAL_GPIO_ReadPin>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <checkAktifCalisma+0x31c>
					cerceveVar=1;
 8005a00:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <checkAktifCalisma+0x3a4>)
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	e011      	b.n	8005a2c <checkAktifCalisma+0x340>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <checkAktifCalisma+0x3a0>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10d      	bne.n	8005a2c <checkAktifCalisma+0x340>
 8005a10:	2101      	movs	r1, #1
 8005a12:	4816      	ldr	r0, [pc, #88]	; (8005a6c <checkAktifCalisma+0x380>)
 8005a14:	f002 ff30 	bl	8008878 <HAL_GPIO_ReadPin>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d106      	bne.n	8005a2c <checkAktifCalisma+0x340>
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <checkAktifCalisma+0x3a8>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <checkAktifCalisma+0x340>
					cerceveVar=0;
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <checkAktifCalisma+0x3a4>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <checkAktifCalisma+0x3a0>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d134      	bne.n	8005a9e <checkAktifCalisma+0x3b2>
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <checkAktifCalisma+0x3a8>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d130      	bne.n	8005a9e <checkAktifCalisma+0x3b2>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	480b      	ldr	r0, [pc, #44]	; (8005a6c <checkAktifCalisma+0x380>)
 8005a40:	f002 ff1a 	bl	8008878 <HAL_GPIO_ReadPin>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d126      	bne.n	8005a98 <checkAktifCalisma+0x3ac>
						cerceveVar=1;
 8005a4a:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <checkAktifCalisma+0x3a4>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e025      	b.n	8005a9e <checkAktifCalisma+0x3b2>
 8005a52:	bf00      	nop
 8005a54:	40010c00 	.word	0x40010c00
 8005a58:	20000cb8 	.word	0x20000cb8
 8005a5c:	20000c93 	.word	0x20000c93
 8005a60:	20000c97 	.word	0x20000c97
 8005a64:	20000cbc 	.word	0x20000cbc
 8005a68:	20000cbf 	.word	0x20000cbf
 8005a6c:	40011000 	.word	0x40011000
 8005a70:	20000cd5 	.word	0x20000cd5
 8005a74:	20000cd6 	.word	0x20000cd6
 8005a78:	20000c87 	.word	0x20000c87
 8005a7c:	20000cb4 	.word	0x20000cb4
 8005a80:	20000c60 	.word	0x20000c60
 8005a84:	20000c6c 	.word	0x20000c6c
 8005a88:	20000c98 	.word	0x20000c98
 8005a8c:	20000c88 	.word	0x20000c88
 8005a90:	20000cda 	.word	0x20000cda
 8005a94:	20000c85 	.word	0x20000c85
					} else {
						cerceveVar=0;
 8005a98:	4b7f      	ldr	r3, [pc, #508]	; (8005c98 <checkAktifCalisma+0x5ac>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005a9e:	4b7f      	ldr	r3, [pc, #508]	; (8005c9c <checkAktifCalisma+0x5b0>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d17c      	bne.n	8005ba0 <checkAktifCalisma+0x4b4>
 8005aa6:	4b7e      	ldr	r3, [pc, #504]	; (8005ca0 <checkAktifCalisma+0x5b4>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d078      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
 8005aae:	4b7d      	ldr	r3, [pc, #500]	; (8005ca4 <checkAktifCalisma+0x5b8>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d074      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005aba:	487b      	ldr	r0, [pc, #492]	; (8005ca8 <checkAktifCalisma+0x5bc>)
 8005abc:	f002 fedc 	bl	8008878 <HAL_GPIO_ReadPin>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <checkAktifCalisma+0x3e2>
 8005ac6:	4b79      	ldr	r3, [pc, #484]	; (8005cac <checkAktifCalisma+0x5c0>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d068      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005ace:	4b72      	ldr	r3, [pc, #456]	; (8005c98 <checkAktifCalisma+0x5ac>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d064      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
 8005ad6:	4b76      	ldr	r3, [pc, #472]	; (8005cb0 <checkAktifCalisma+0x5c4>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	f083 0301 	eor.w	r3, r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d05d      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005ae4:	2104      	movs	r1, #4
 8005ae6:	4873      	ldr	r0, [pc, #460]	; (8005cb4 <checkAktifCalisma+0x5c8>)
 8005ae8:	f002 fec6 	bl	8008878 <HAL_GPIO_ReadPin>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <checkAktifCalisma+0x40e>
 8005af2:	4b71      	ldr	r3, [pc, #452]	; (8005cb8 <checkAktifCalisma+0x5cc>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d152      	bne.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005afe:	486a      	ldr	r0, [pc, #424]	; (8005ca8 <checkAktifCalisma+0x5bc>)
 8005b00:	f002 feba 	bl	8008878 <HAL_GPIO_ReadPin>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d10e      	bne.n	8005b28 <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b0e:	4866      	ldr	r0, [pc, #408]	; (8005ca8 <checkAktifCalisma+0x5bc>)
 8005b10:	f002 feb2 	bl	8008878 <HAL_GPIO_ReadPin>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d106      	bne.n	8005b28 <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005b1a:	2140      	movs	r1, #64	; 0x40
 8005b1c:	4865      	ldr	r0, [pc, #404]	; (8005cb4 <checkAktifCalisma+0x5c8>)
 8005b1e:	f002 feab 	bl	8008878 <HAL_GPIO_ReadPin>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d003      	beq.n	8005b30 <checkAktifCalisma+0x444>
 8005b28:	4b64      	ldr	r3, [pc, #400]	; (8005cbc <checkAktifCalisma+0x5d0>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d037      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& (yukarimotorcalisiyor==0)
 8005b30:	4b63      	ldr	r3, [pc, #396]	; (8005cc0 <checkAktifCalisma+0x5d4>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f083 0301 	eor.w	r3, r3, #1
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d030      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& (yukarivalfcalisiyor==0)
 8005b3e:	4b61      	ldr	r3, [pc, #388]	; (8005cc4 <checkAktifCalisma+0x5d8>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	f083 0301 	eor.w	r3, r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d029      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005b4c:	4b5e      	ldr	r3, [pc, #376]	; (8005cc8 <checkAktifCalisma+0x5dc>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f083 0301 	eor.w	r3, r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d022      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& (devmotorasagicalisiyor==0)
 8005b5a:	4b5c      	ldr	r3, [pc, #368]	; (8005ccc <checkAktifCalisma+0x5e0>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f083 0301 	eor.w	r3, r3, #1
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01b      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& (devyukarivalfcalisiyor==0)
 8005b68:	4b59      	ldr	r3, [pc, #356]	; (8005cd0 <checkAktifCalisma+0x5e4>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f083 0301 	eor.w	r3, r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d014      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>
						&& (devasagivalfcalisiyor==0)) {
 8005b76:	4b57      	ldr	r3, [pc, #348]	; (8005cd4 <checkAktifCalisma+0x5e8>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f083 0301 	eor.w	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00d      	beq.n	8005ba0 <checkAktifCalisma+0x4b4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005b84:	2201      	movs	r2, #1
 8005b86:	2102      	movs	r1, #2
 8005b88:	4847      	ldr	r0, [pc, #284]	; (8005ca8 <checkAktifCalisma+0x5bc>)
 8005b8a:	f002 fe8c 	bl	80088a6 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <checkAktifCalisma+0x5d0>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8005b94:	4b50      	ldr	r3, [pc, #320]	; (8005cd8 <checkAktifCalisma+0x5ec>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8005b9a:	4b50      	ldr	r3, [pc, #320]	; (8005cdc <checkAktifCalisma+0x5f0>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005ba0:	4b46      	ldr	r3, [pc, #280]	; (8005cbc <checkAktifCalisma+0x5d0>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d033      	beq.n	8005c10 <checkAktifCalisma+0x524>
 8005ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bac:	483e      	ldr	r0, [pc, #248]	; (8005ca8 <checkAktifCalisma+0x5bc>)
 8005bae:	f002 fe63 	bl	8008878 <HAL_GPIO_ReadPin>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d106      	bne.n	8005bc6 <checkAktifCalisma+0x4da>
 8005bb8:	4b3c      	ldr	r3, [pc, #240]	; (8005cac <checkAktifCalisma+0x5c0>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f083 0301 	eor.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <checkAktifCalisma+0x4f0>
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	483a      	ldr	r0, [pc, #232]	; (8005cb4 <checkAktifCalisma+0x5c8>)
 8005bca:	f002 fe55 	bl	8008878 <HAL_GPIO_ReadPin>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d11d      	bne.n	8005c10 <checkAktifCalisma+0x524>
 8005bd4:	4b38      	ldr	r3, [pc, #224]	; (8005cb8 <checkAktifCalisma+0x5cc>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d019      	beq.n	8005c10 <checkAktifCalisma+0x524>
 8005bdc:	4b30      	ldr	r3, [pc, #192]	; (8005ca0 <checkAktifCalisma+0x5b4>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d015      	beq.n	8005c10 <checkAktifCalisma+0x524>
 8005be4:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <checkAktifCalisma+0x5b8>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d011      	beq.n	8005c10 <checkAktifCalisma+0x524>
 8005bec:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <checkAktifCalisma+0x5ac>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <checkAktifCalisma+0x524>
 8005bf4:	4b3a      	ldr	r3, [pc, #232]	; (8005ce0 <checkAktifCalisma+0x5f4>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f083 0301 	eor.w	r3, r3, #1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <checkAktifCalisma+0x524>
					timer2=millis;
 8005c02:	4b38      	ldr	r3, [pc, #224]	; (8005ce4 <checkAktifCalisma+0x5f8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a38      	ldr	r2, [pc, #224]	; (8005ce8 <checkAktifCalisma+0x5fc>)
 8005c08:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8005c0a:	4b35      	ldr	r3, [pc, #212]	; (8005ce0 <checkAktifCalisma+0x5f4>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005c10:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <checkAktifCalisma+0x5f8>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4b34      	ldr	r3, [pc, #208]	; (8005ce8 <checkAktifCalisma+0x5fc>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	4a34      	ldr	r2, [pc, #208]	; (8005cec <checkAktifCalisma+0x600>)
 8005c1c:	7812      	ldrb	r2, [r2, #0]
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d303      	bcc.n	8005c2a <checkAktifCalisma+0x53e>
 8005c22:	4b2f      	ldr	r3, [pc, #188]	; (8005ce0 <checkAktifCalisma+0x5f4>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d114      	bne.n	8005c54 <checkAktifCalisma+0x568>
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <checkAktifCalisma+0x5b4>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f083 0301 	eor.w	r3, r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10d      	bne.n	8005c54 <checkAktifCalisma+0x568>
 8005c38:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <checkAktifCalisma+0x5b8>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	f083 0301 	eor.w	r3, r3, #1
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <checkAktifCalisma+0x568>
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <checkAktifCalisma+0x5ac>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f083 0301 	eor.w	r3, r3, #1
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <checkAktifCalisma+0x57e>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005c54:	2200      	movs	r2, #0
 8005c56:	2102      	movs	r1, #2
 8005c58:	4813      	ldr	r0, [pc, #76]	; (8005ca8 <checkAktifCalisma+0x5bc>)
 8005c5a:	f002 fe24 	bl	80088a6 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8005c5e:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <checkAktifCalisma+0x5d0>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005c64:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <checkAktifCalisma+0x5f4>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <checkAktifCalisma+0x5d0>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d040      	beq.n	8005cf4 <checkAktifCalisma+0x608>
 8005c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c76:	480f      	ldr	r0, [pc, #60]	; (8005cb4 <checkAktifCalisma+0x5c8>)
 8005c78:	f002 fdfe 	bl	8008878 <HAL_GPIO_ReadPin>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d138      	bne.n	8005cf4 <checkAktifCalisma+0x608>
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <checkAktifCalisma+0x604>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d034      	beq.n	8005cf4 <checkAktifCalisma+0x608>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	4806      	ldr	r0, [pc, #24]	; (8005ca8 <checkAktifCalisma+0x5bc>)
 8005c90:	f002 fe09 	bl	80088a6 <HAL_GPIO_WritePin>
 8005c94:	e033      	b.n	8005cfe <checkAktifCalisma+0x612>
 8005c96:	bf00      	nop
 8005c98:	20000cda 	.word	0x20000cda
 8005c9c:	20000ca1 	.word	0x20000ca1
 8005ca0:	20000cd5 	.word	0x20000cd5
 8005ca4:	20000cd6 	.word	0x20000cd6
 8005ca8:	40010c00 	.word	0x40010c00
 8005cac:	20000cc0 	.word	0x20000cc0
 8005cb0:	20000cd4 	.word	0x20000cd4
 8005cb4:	40011000 	.word	0x40011000
 8005cb8:	20000c8a 	.word	0x20000c8a
 8005cbc:	20000cbb 	.word	0x20000cbb
 8005cc0:	20000cb8 	.word	0x20000cb8
 8005cc4:	20000cbc 	.word	0x20000cbc
 8005cc8:	20000cb9 	.word	0x20000cb9
 8005ccc:	20000cba 	.word	0x20000cba
 8005cd0:	20000cbd 	.word	0x20000cbd
 8005cd4:	20000cbe 	.word	0x20000cbe
 8005cd8:	20000cc3 	.word	0x20000cc3
 8005cdc:	20000ce4 	.word	0x20000ce4
 8005ce0:	20000cb3 	.word	0x20000cb3
 8005ce4:	20000c60 	.word	0x20000c60
 8005ce8:	20000c6c 	.word	0x20000c6c
 8005cec:	20000c99 	.word	0x20000c99
 8005cf0:	20000c89 	.word	0x20000c89
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4836      	ldr	r0, [pc, #216]	; (8005dd4 <checkAktifCalisma+0x6e8>)
 8005cfa:	f002 fdd4 	bl	80088a6 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8005cfe:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <checkAktifCalisma+0x6ec>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 8080 	bne.w	8005e08 <checkAktifCalisma+0x71c>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005d08:	4b34      	ldr	r3, [pc, #208]	; (8005ddc <checkAktifCalisma+0x6f0>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d003      	beq.n	8005d18 <checkAktifCalisma+0x62c>
 8005d10:	4b32      	ldr	r3, [pc, #200]	; (8005ddc <checkAktifCalisma+0x6f0>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d177      	bne.n	8005e08 <checkAktifCalisma+0x71c>
						&& (stopVar) && (kapiSivicVar)
 8005d18:	4b31      	ldr	r3, [pc, #196]	; (8005de0 <checkAktifCalisma+0x6f4>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d073      	beq.n	8005e08 <checkAktifCalisma+0x71c>
 8005d20:	4b30      	ldr	r3, [pc, #192]	; (8005de4 <checkAktifCalisma+0x6f8>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d06f      	beq.n	8005e08 <checkAktifCalisma+0x71c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005d28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d2c:	4829      	ldr	r0, [pc, #164]	; (8005dd4 <checkAktifCalisma+0x6e8>)
 8005d2e:	f002 fda3 	bl	8008878 <HAL_GPIO_ReadPin>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d167      	bne.n	8005e08 <checkAktifCalisma+0x71c>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d3c:	482a      	ldr	r0, [pc, #168]	; (8005de8 <checkAktifCalisma+0x6fc>)
 8005d3e:	f002 fd9b 	bl	8008878 <HAL_GPIO_ReadPin>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <checkAktifCalisma+0x664>
 8005d48:	4b28      	ldr	r3, [pc, #160]	; (8005dec <checkAktifCalisma+0x700>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d15b      	bne.n	8005e08 <checkAktifCalisma+0x71c>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005d50:	2140      	movs	r1, #64	; 0x40
 8005d52:	4825      	ldr	r0, [pc, #148]	; (8005de8 <checkAktifCalisma+0x6fc>)
 8005d54:	f002 fd90 	bl	8008878 <HAL_GPIO_ReadPin>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d10f      	bne.n	8005d7e <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d62:	481c      	ldr	r0, [pc, #112]	; (8005dd4 <checkAktifCalisma+0x6e8>)
 8005d64:	f002 fd88 	bl	8008878 <HAL_GPIO_ReadPin>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005d6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d72:	4818      	ldr	r0, [pc, #96]	; (8005dd4 <checkAktifCalisma+0x6e8>)
 8005d74:	f002 fd80 	bl	8008878 <HAL_GPIO_ReadPin>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d003      	beq.n	8005d86 <checkAktifCalisma+0x69a>
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <checkAktifCalisma+0x704>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d040      	beq.n	8005e08 <checkAktifCalisma+0x71c>
						&& (yukarimotorcalisiyor==0)
 8005d86:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <checkAktifCalisma+0x708>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	f083 0301 	eor.w	r3, r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d039      	beq.n	8005e08 <checkAktifCalisma+0x71c>
						&& (yukarivalfcalisiyor==0)
 8005d94:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <checkAktifCalisma+0x70c>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	f083 0301 	eor.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d032      	beq.n	8005e08 <checkAktifCalisma+0x71c>
						&& (asagivalfcalisiyor==0)
 8005da2:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <checkAktifCalisma+0x710>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	f083 0301 	eor.w	r3, r3, #1
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02b      	beq.n	8005e08 <checkAktifCalisma+0x71c>
						&& (devmotorasagicalisiyor==0)
 8005db0:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <checkAktifCalisma+0x714>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f083 0301 	eor.w	r3, r3, #1
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d024      	beq.n	8005e08 <checkAktifCalisma+0x71c>
						&&(devasagivalfcalisiyor==0)) {
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <checkAktifCalisma+0x718>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	f083 0301 	eor.w	r3, r3, #1
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01d      	beq.n	8005e08 <checkAktifCalisma+0x71c>

					devmotoryukaricalisiyor=1;
 8005dcc:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <checkAktifCalisma+0x704>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e01c      	b.n	8005e0e <checkAktifCalisma+0x722>
 8005dd4:	40010c00 	.word	0x40010c00
 8005dd8:	20000ca1 	.word	0x20000ca1
 8005ddc:	20000c93 	.word	0x20000c93
 8005de0:	20000cd5 	.word	0x20000cd5
 8005de4:	20000cd6 	.word	0x20000cd6
 8005de8:	40011000 	.word	0x40011000
 8005dec:	20000c94 	.word	0x20000c94
 8005df0:	20000cb9 	.word	0x20000cb9
 8005df4:	20000cb8 	.word	0x20000cb8
 8005df8:	20000cbc 	.word	0x20000cbc
 8005dfc:	20000cbb 	.word	0x20000cbb
 8005e00:	20000cba 	.word	0x20000cba
 8005e04:	20000cbe 	.word	0x20000cbe
				} else {
					devmotoryukaricalisiyor=0;
 8005e08:	4b64      	ldr	r3, [pc, #400]	; (8005f9c <checkAktifCalisma+0x8b0>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8005e0e:	4b63      	ldr	r3, [pc, #396]	; (8005f9c <checkAktifCalisma+0x8b0>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <checkAktifCalisma+0x73a>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005e16:	2201      	movs	r2, #1
 8005e18:	2120      	movs	r1, #32
 8005e1a:	4861      	ldr	r0, [pc, #388]	; (8005fa0 <checkAktifCalisma+0x8b4>)
 8005e1c:	f002 fd43 	bl	80088a6 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005e20:	4b60      	ldr	r3, [pc, #384]	; (8005fa4 <checkAktifCalisma+0x8b8>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005e26:	4b5f      	ldr	r3, [pc, #380]	; (8005fa4 <checkAktifCalisma+0x8b8>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d025      	beq.n	8005e7a <checkAktifCalisma+0x78e>
 8005e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e32:	485d      	ldr	r0, [pc, #372]	; (8005fa8 <checkAktifCalisma+0x8bc>)
 8005e34:	f002 fd20 	bl	8008878 <HAL_GPIO_ReadPin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d007      	beq.n	8005e4e <checkAktifCalisma+0x762>
 8005e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e42:	4857      	ldr	r0, [pc, #348]	; (8005fa0 <checkAktifCalisma+0x8b4>)
 8005e44:	f002 fd18 	bl	8008878 <HAL_GPIO_ReadPin>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d115      	bne.n	8005e7a <checkAktifCalisma+0x78e>
 8005e4e:	4b57      	ldr	r3, [pc, #348]	; (8005fac <checkAktifCalisma+0x8c0>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d011      	beq.n	8005e7a <checkAktifCalisma+0x78e>
 8005e56:	4b56      	ldr	r3, [pc, #344]	; (8005fb0 <checkAktifCalisma+0x8c4>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00d      	beq.n	8005e7a <checkAktifCalisma+0x78e>
 8005e5e:	4b55      	ldr	r3, [pc, #340]	; (8005fb4 <checkAktifCalisma+0x8c8>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f083 0301 	eor.w	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d006      	beq.n	8005e7a <checkAktifCalisma+0x78e>
					timer2=millis;
 8005e6c:	4b52      	ldr	r3, [pc, #328]	; (8005fb8 <checkAktifCalisma+0x8cc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a52      	ldr	r2, [pc, #328]	; (8005fbc <checkAktifCalisma+0x8d0>)
 8005e72:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005e74:	4b4f      	ldr	r3, [pc, #316]	; (8005fb4 <checkAktifCalisma+0x8c8>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005e7a:	4b4f      	ldr	r3, [pc, #316]	; (8005fb8 <checkAktifCalisma+0x8cc>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b4f      	ldr	r3, [pc, #316]	; (8005fbc <checkAktifCalisma+0x8d0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	4a4e      	ldr	r2, [pc, #312]	; (8005fc0 <checkAktifCalisma+0x8d4>)
 8005e86:	7812      	ldrb	r2, [r2, #0]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d303      	bcc.n	8005e94 <checkAktifCalisma+0x7a8>
 8005e8c:	4b49      	ldr	r3, [pc, #292]	; (8005fb4 <checkAktifCalisma+0x8c8>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10d      	bne.n	8005eb0 <checkAktifCalisma+0x7c4>
 8005e94:	4b45      	ldr	r3, [pc, #276]	; (8005fac <checkAktifCalisma+0x8c0>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f083 0301 	eor.w	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <checkAktifCalisma+0x7c4>
 8005ea2:	4b43      	ldr	r3, [pc, #268]	; (8005fb0 <checkAktifCalisma+0x8c4>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	f083 0301 	eor.w	r3, r3, #1
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <checkAktifCalisma+0x7da>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2120      	movs	r1, #32
 8005eb4:	483a      	ldr	r0, [pc, #232]	; (8005fa0 <checkAktifCalisma+0x8b4>)
 8005eb6:	f002 fcf6 	bl	80088a6 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005eba:	4b3a      	ldr	r3, [pc, #232]	; (8005fa4 <checkAktifCalisma+0x8b8>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005ec0:	4b3c      	ldr	r3, [pc, #240]	; (8005fb4 <checkAktifCalisma+0x8c8>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005ec6:	4b3f      	ldr	r3, [pc, #252]	; (8005fc4 <checkAktifCalisma+0x8d8>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 8088 	bne.w	8005fe0 <checkAktifCalisma+0x8f4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005ed0:	4b3d      	ldr	r3, [pc, #244]	; (8005fc8 <checkAktifCalisma+0x8dc>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d003      	beq.n	8005ee0 <checkAktifCalisma+0x7f4>
 8005ed8:	4b3b      	ldr	r3, [pc, #236]	; (8005fc8 <checkAktifCalisma+0x8dc>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d17f      	bne.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& (stopVar) && (kapiSivicVar)
 8005ee0:	4b32      	ldr	r3, [pc, #200]	; (8005fac <checkAktifCalisma+0x8c0>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d07b      	beq.n	8005fe0 <checkAktifCalisma+0x8f4>
 8005ee8:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <checkAktifCalisma+0x8c4>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d077      	beq.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005ef0:	2140      	movs	r1, #64	; 0x40
 8005ef2:	482b      	ldr	r0, [pc, #172]	; (8005fa0 <checkAktifCalisma+0x8b4>)
 8005ef4:	f002 fcc0 	bl	8008878 <HAL_GPIO_ReadPin>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d170      	bne.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005efe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f02:	4827      	ldr	r0, [pc, #156]	; (8005fa0 <checkAktifCalisma+0x8b4>)
 8005f04:	f002 fcb8 	bl	8008878 <HAL_GPIO_ReadPin>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <checkAktifCalisma+0x82a>
 8005f0e:	4b2f      	ldr	r3, [pc, #188]	; (8005fcc <checkAktifCalisma+0x8e0>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d164      	bne.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f1a:	4823      	ldr	r0, [pc, #140]	; (8005fa8 <checkAktifCalisma+0x8bc>)
 8005f1c:	f002 fcac 	bl	8008878 <HAL_GPIO_ReadPin>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10f      	bne.n	8005f46 <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f2a:	481f      	ldr	r0, [pc, #124]	; (8005fa8 <checkAktifCalisma+0x8bc>)
 8005f2c:	f002 fca4 	bl	8008878 <HAL_GPIO_ReadPin>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d107      	bne.n	8005f46 <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005f36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f3a:	481b      	ldr	r0, [pc, #108]	; (8005fa8 <checkAktifCalisma+0x8bc>)
 8005f3c:	f002 fc9c 	bl	8008878 <HAL_GPIO_ReadPin>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d003      	beq.n	8005f4e <checkAktifCalisma+0x862>
 8005f46:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <checkAktifCalisma+0x8e4>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d048      	beq.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& (yukarimotorcalisiyor==0)
 8005f4e:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <checkAktifCalisma+0x8e8>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f083 0301 	eor.w	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d041      	beq.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& (yukarivalfcalisiyor==0)
 8005f5c:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <checkAktifCalisma+0x8ec>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	f083 0301 	eor.w	r3, r3, #1
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03a      	beq.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& (asagivalfcalisiyor==0)
 8005f6a:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <checkAktifCalisma+0x8f0>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f083 0301 	eor.w	r3, r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d033      	beq.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& (devyukarivalfcalisiyor==0)
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <checkAktifCalisma+0x8b8>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f083 0301 	eor.w	r3, r3, #1
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d02c      	beq.n	8005fe0 <checkAktifCalisma+0x8f4>
						&& (devmotoryukaricalisiyor==0)) {
 8005f86:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <checkAktifCalisma+0x8b0>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	f083 0301 	eor.w	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d025      	beq.n	8005fe0 <checkAktifCalisma+0x8f4>

					devmotorasagicalisiyor=1;
 8005f94:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <checkAktifCalisma+0x8e4>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e024      	b.n	8005fe6 <checkAktifCalisma+0x8fa>
 8005f9c:	20000cb9 	.word	0x20000cb9
 8005fa0:	40011000 	.word	0x40011000
 8005fa4:	20000cbd 	.word	0x20000cbd
 8005fa8:	40010c00 	.word	0x40010c00
 8005fac:	20000cd5 	.word	0x20000cd5
 8005fb0:	20000cd6 	.word	0x20000cd6
 8005fb4:	20000cb5 	.word	0x20000cb5
 8005fb8:	20000c60 	.word	0x20000c60
 8005fbc:	20000c6c 	.word	0x20000c6c
 8005fc0:	20000c9a 	.word	0x20000c9a
 8005fc4:	20000ca1 	.word	0x20000ca1
 8005fc8:	20000c93 	.word	0x20000c93
 8005fcc:	20000c95 	.word	0x20000c95
 8005fd0:	20000cba 	.word	0x20000cba
 8005fd4:	20000cb8 	.word	0x20000cb8
 8005fd8:	20000cbc 	.word	0x20000cbc
 8005fdc:	20000cbb 	.word	0x20000cbb
				} else {
					devmotorasagicalisiyor=0;
 8005fe0:	4b96      	ldr	r3, [pc, #600]	; (800623c <checkAktifCalisma+0xb50>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005fe6:	4b95      	ldr	r3, [pc, #596]	; (800623c <checkAktifCalisma+0xb50>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <checkAktifCalisma+0x912>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005fee:	2201      	movs	r2, #1
 8005ff0:	2110      	movs	r1, #16
 8005ff2:	4893      	ldr	r0, [pc, #588]	; (8006240 <checkAktifCalisma+0xb54>)
 8005ff4:	f002 fc57 	bl	80088a6 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005ff8:	4b92      	ldr	r3, [pc, #584]	; (8006244 <checkAktifCalisma+0xb58>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005ffe:	4b91      	ldr	r3, [pc, #580]	; (8006244 <checkAktifCalisma+0xb58>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d024      	beq.n	8006050 <checkAktifCalisma+0x964>
 8006006:	2140      	movs	r1, #64	; 0x40
 8006008:	488d      	ldr	r0, [pc, #564]	; (8006240 <checkAktifCalisma+0xb54>)
 800600a:	f002 fc35 	bl	8008878 <HAL_GPIO_ReadPin>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d007      	beq.n	8006024 <checkAktifCalisma+0x938>
 8006014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006018:	4889      	ldr	r0, [pc, #548]	; (8006240 <checkAktifCalisma+0xb54>)
 800601a:	f002 fc2d 	bl	8008878 <HAL_GPIO_ReadPin>
 800601e:	4603      	mov	r3, r0
 8006020:	2b01      	cmp	r3, #1
 8006022:	d115      	bne.n	8006050 <checkAktifCalisma+0x964>
 8006024:	4b88      	ldr	r3, [pc, #544]	; (8006248 <checkAktifCalisma+0xb5c>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d011      	beq.n	8006050 <checkAktifCalisma+0x964>
 800602c:	4b87      	ldr	r3, [pc, #540]	; (800624c <checkAktifCalisma+0xb60>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <checkAktifCalisma+0x964>
 8006034:	4b86      	ldr	r3, [pc, #536]	; (8006250 <checkAktifCalisma+0xb64>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f083 0301 	eor.w	r3, r3, #1
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d006      	beq.n	8006050 <checkAktifCalisma+0x964>
					timer2=millis;
 8006042:	4b84      	ldr	r3, [pc, #528]	; (8006254 <checkAktifCalisma+0xb68>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a84      	ldr	r2, [pc, #528]	; (8006258 <checkAktifCalisma+0xb6c>)
 8006048:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 800604a:	4b81      	ldr	r3, [pc, #516]	; (8006250 <checkAktifCalisma+0xb64>)
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006050:	4b80      	ldr	r3, [pc, #512]	; (8006254 <checkAktifCalisma+0xb68>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	4b80      	ldr	r3, [pc, #512]	; (8006258 <checkAktifCalisma+0xb6c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	4a80      	ldr	r2, [pc, #512]	; (800625c <checkAktifCalisma+0xb70>)
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	4293      	cmp	r3, r2
 8006060:	d303      	bcc.n	800606a <checkAktifCalisma+0x97e>
 8006062:	4b7b      	ldr	r3, [pc, #492]	; (8006250 <checkAktifCalisma+0xb64>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10d      	bne.n	8006086 <checkAktifCalisma+0x99a>
 800606a:	4b77      	ldr	r3, [pc, #476]	; (8006248 <checkAktifCalisma+0xb5c>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f083 0301 	eor.w	r3, r3, #1
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <checkAktifCalisma+0x99a>
 8006078:	4b74      	ldr	r3, [pc, #464]	; (800624c <checkAktifCalisma+0xb60>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f083 0301 	eor.w	r3, r3, #1
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <checkAktifCalisma+0x9b0>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006086:	2200      	movs	r2, #0
 8006088:	2110      	movs	r1, #16
 800608a:	486d      	ldr	r0, [pc, #436]	; (8006240 <checkAktifCalisma+0xb54>)
 800608c:	f002 fc0b 	bl	80088a6 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8006090:	4b6c      	ldr	r3, [pc, #432]	; (8006244 <checkAktifCalisma+0xb58>)
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8006096:	4b6e      	ldr	r3, [pc, #440]	; (8006250 <checkAktifCalisma+0xb64>)
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800609c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060a0:	486f      	ldr	r0, [pc, #444]	; (8006260 <checkAktifCalisma+0xb74>)
 80060a2:	f002 fbe9 	bl	8008878 <HAL_GPIO_ReadPin>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d120      	bne.n	80060ee <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80060ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80060b0:	486b      	ldr	r0, [pc, #428]	; (8006260 <checkAktifCalisma+0xb74>)
 80060b2:	f002 fbe1 	bl	8008878 <HAL_GPIO_ReadPin>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d118      	bne.n	80060ee <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80060bc:	2104      	movs	r1, #4
 80060be:	4868      	ldr	r0, [pc, #416]	; (8006260 <checkAktifCalisma+0xb74>)
 80060c0:	f002 fbda 	bl	8008878 <HAL_GPIO_ReadPin>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d111      	bne.n	80060ee <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80060ca:	2102      	movs	r1, #2
 80060cc:	4864      	ldr	r0, [pc, #400]	; (8006260 <checkAktifCalisma+0xb74>)
 80060ce:	f002 fbd3 	bl	8008878 <HAL_GPIO_ReadPin>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80060d8:	2101      	movs	r1, #1
 80060da:	4861      	ldr	r0, [pc, #388]	; (8006260 <checkAktifCalisma+0xb74>)
 80060dc:	f002 fbcc 	bl	8008878 <HAL_GPIO_ReadPin>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <checkAktifCalisma+0xa02>
					makineStop=1;
 80060e6:	4b5f      	ldr	r3, [pc, #380]	; (8006264 <checkAktifCalisma+0xb78>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e002      	b.n	80060f4 <checkAktifCalisma+0xa08>
				} else {
					makineStop=0;
 80060ee:	4b5d      	ldr	r3, [pc, #372]	; (8006264 <checkAktifCalisma+0xb78>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060f4:	4b5c      	ldr	r3, [pc, #368]	; (8006268 <checkAktifCalisma+0xb7c>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d144      	bne.n	8006186 <checkAktifCalisma+0xa9a>
 80060fc:	4b5b      	ldr	r3, [pc, #364]	; (800626c <checkAktifCalisma+0xb80>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d003      	beq.n	800610c <checkAktifCalisma+0xa20>
 8006104:	4b59      	ldr	r3, [pc, #356]	; (800626c <checkAktifCalisma+0xb80>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d13c      	bne.n	8006186 <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800610c:	2180      	movs	r1, #128	; 0x80
 800610e:	484c      	ldr	r0, [pc, #304]	; (8006240 <checkAktifCalisma+0xb54>)
 8006110:	f002 fbb2 	bl	8008878 <HAL_GPIO_ReadPin>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <checkAktifCalisma+0xa36>
 800611a:	4b55      	ldr	r3, [pc, #340]	; (8006270 <checkAktifCalisma+0xb84>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <checkAktifCalisma+0xa4e>
 8006122:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006126:	484e      	ldr	r0, [pc, #312]	; (8006260 <checkAktifCalisma+0xb74>)
 8006128:	f002 fba6 	bl	8008878 <HAL_GPIO_ReadPin>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d129      	bne.n	8006186 <checkAktifCalisma+0xa9a>
 8006132:	4b4f      	ldr	r3, [pc, #316]	; (8006270 <checkAktifCalisma+0xb84>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d125      	bne.n	8006186 <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800613a:	2104      	movs	r1, #4
 800613c:	4840      	ldr	r0, [pc, #256]	; (8006240 <checkAktifCalisma+0xb54>)
 800613e:	f002 fb9b 	bl	8008878 <HAL_GPIO_ReadPin>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d003      	beq.n	8006150 <checkAktifCalisma+0xa64>
 8006148:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <checkAktifCalisma+0xb88>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d11a      	bne.n	8006186 <checkAktifCalisma+0xa9a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006150:	2102      	movs	r1, #2
 8006152:	483b      	ldr	r0, [pc, #236]	; (8006240 <checkAktifCalisma+0xb54>)
 8006154:	f002 fb90 	bl	8008878 <HAL_GPIO_ReadPin>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d113      	bne.n	8006186 <checkAktifCalisma+0xa9a>
						&&(butonKontrol==0)
 800615e:	4b46      	ldr	r3, [pc, #280]	; (8006278 <checkAktifCalisma+0xb8c>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f083 0301 	eor.w	r3, r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <checkAktifCalisma+0xa9a>
						&&(makineStop==1)) {
 800616c:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <checkAktifCalisma+0xb78>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <checkAktifCalisma+0xa9a>

					kapi1prudhome=1;
 8006174:	4b41      	ldr	r3, [pc, #260]	; (800627c <checkAktifCalisma+0xb90>)
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800617a:	4b36      	ldr	r3, [pc, #216]	; (8006254 <checkAktifCalisma+0xb68>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a40      	ldr	r2, [pc, #256]	; (8006280 <checkAktifCalisma+0xb94>)
 8006180:	6013      	str	r3, [r2, #0]
					bekle();
 8006182:	f7fe fd71 	bl	8004c68 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006186:	4b33      	ldr	r3, [pc, #204]	; (8006254 <checkAktifCalisma+0xb68>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b3d      	ldr	r3, [pc, #244]	; (8006280 <checkAktifCalisma+0xb94>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	4a3c      	ldr	r2, [pc, #240]	; (8006284 <checkAktifCalisma+0xb98>)
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	4293      	cmp	r3, r2
 8006196:	d211      	bcs.n	80061bc <checkAktifCalisma+0xad0>
 8006198:	2104      	movs	r1, #4
 800619a:	4829      	ldr	r0, [pc, #164]	; (8006240 <checkAktifCalisma+0xb54>)
 800619c:	f002 fb6c 	bl	8008878 <HAL_GPIO_ReadPin>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <checkAktifCalisma+0xad0>
 80061a6:	4b33      	ldr	r3, [pc, #204]	; (8006274 <checkAktifCalisma+0xb88>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d006      	beq.n	80061bc <checkAktifCalisma+0xad0>
 80061ae:	4b2d      	ldr	r3, [pc, #180]	; (8006264 <checkAktifCalisma+0xb78>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	f083 0301 	eor.w	r3, r3, #1
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <checkAktifCalisma+0xad6>
					kapi1prudhome=0;
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <checkAktifCalisma+0xb90>)
 80061be:	2200      	movs	r2, #0
 80061c0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80061c2:	4b29      	ldr	r3, [pc, #164]	; (8006268 <checkAktifCalisma+0xb7c>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d160      	bne.n	800628c <checkAktifCalisma+0xba0>
 80061ca:	4b28      	ldr	r3, [pc, #160]	; (800626c <checkAktifCalisma+0xb80>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d003      	beq.n	80061da <checkAktifCalisma+0xaee>
 80061d2:	4b26      	ldr	r3, [pc, #152]	; (800626c <checkAktifCalisma+0xb80>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d158      	bne.n	800628c <checkAktifCalisma+0xba0>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80061da:	2104      	movs	r1, #4
 80061dc:	4818      	ldr	r0, [pc, #96]	; (8006240 <checkAktifCalisma+0xb54>)
 80061de:	f002 fb4b 	bl	8008878 <HAL_GPIO_ReadPin>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d003      	beq.n	80061f0 <checkAktifCalisma+0xb04>
 80061e8:	4b22      	ldr	r3, [pc, #136]	; (8006274 <checkAktifCalisma+0xb88>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d14d      	bne.n	800628c <checkAktifCalisma+0xba0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80061f0:	2102      	movs	r1, #2
 80061f2:	4813      	ldr	r0, [pc, #76]	; (8006240 <checkAktifCalisma+0xb54>)
 80061f4:	f002 fb40 	bl	8008878 <HAL_GPIO_ReadPin>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d146      	bne.n	800628c <checkAktifCalisma+0xba0>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80061fe:	2180      	movs	r1, #128	; 0x80
 8006200:	480f      	ldr	r0, [pc, #60]	; (8006240 <checkAktifCalisma+0xb54>)
 8006202:	f002 fb39 	bl	8008878 <HAL_GPIO_ReadPin>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <checkAktifCalisma+0xb28>
 800620c:	4b18      	ldr	r3, [pc, #96]	; (8006270 <checkAktifCalisma+0xb84>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <checkAktifCalisma+0xb40>
 8006214:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006218:	4811      	ldr	r0, [pc, #68]	; (8006260 <checkAktifCalisma+0xb74>)
 800621a:	f002 fb2d 	bl	8008878 <HAL_GPIO_ReadPin>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d133      	bne.n	800628c <checkAktifCalisma+0xba0>
 8006224:	4b12      	ldr	r3, [pc, #72]	; (8006270 <checkAktifCalisma+0xb84>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d12f      	bne.n	800628c <checkAktifCalisma+0xba0>
						&&(makineStop==1)) {
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <checkAktifCalisma+0xb78>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d02b      	beq.n	800628c <checkAktifCalisma+0xba0>

					kapi1butonkontrol=1;
 8006234:	4b14      	ldr	r3, [pc, #80]	; (8006288 <checkAktifCalisma+0xb9c>)
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e02a      	b.n	8006292 <checkAktifCalisma+0xba6>
 800623c:	20000cba 	.word	0x20000cba
 8006240:	40011000 	.word	0x40011000
 8006244:	20000cbe 	.word	0x20000cbe
 8006248:	20000cd5 	.word	0x20000cd5
 800624c:	20000cd6 	.word	0x20000cd6
 8006250:	20000cb6 	.word	0x20000cb6
 8006254:	20000c60 	.word	0x20000c60
 8006258:	20000c6c 	.word	0x20000c6c
 800625c:	20000c9a 	.word	0x20000c9a
 8006260:	40010c00 	.word	0x40010c00
 8006264:	20000cc5 	.word	0x20000cc5
 8006268:	20000c8d 	.word	0x20000c8d
 800626c:	20000c8c 	.word	0x20000c8c
 8006270:	20000c90 	.word	0x20000c90
 8006274:	20000c8a 	.word	0x20000c8a
 8006278:	20000cb2 	.word	0x20000cb2
 800627c:	20000cc6 	.word	0x20000cc6
 8006280:	20000c64 	.word	0x20000c64
 8006284:	20000c9d 	.word	0x20000c9d
 8006288:	20000cc7 	.word	0x20000cc7
				} else {
					kapi1butonkontrol=0;
 800628c:	4b8b      	ldr	r3, [pc, #556]	; (80064bc <checkAktifCalisma+0xdd0>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006292:	4b8b      	ldr	r3, [pc, #556]	; (80064c0 <checkAktifCalisma+0xdd4>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d121      	bne.n	80062de <checkAktifCalisma+0xbf2>
 800629a:	4b8a      	ldr	r3, [pc, #552]	; (80064c4 <checkAktifCalisma+0xdd8>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d003      	beq.n	80062aa <checkAktifCalisma+0xbbe>
 80062a2:	4b88      	ldr	r3, [pc, #544]	; (80064c4 <checkAktifCalisma+0xdd8>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d119      	bne.n	80062de <checkAktifCalisma+0xbf2>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80062aa:	2104      	movs	r1, #4
 80062ac:	4886      	ldr	r0, [pc, #536]	; (80064c8 <checkAktifCalisma+0xddc>)
 80062ae:	f002 fae3 	bl	8008878 <HAL_GPIO_ReadPin>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d003      	beq.n	80062c0 <checkAktifCalisma+0xbd4>
 80062b8:	4b84      	ldr	r3, [pc, #528]	; (80064cc <checkAktifCalisma+0xde0>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10e      	bne.n	80062de <checkAktifCalisma+0xbf2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80062c0:	2102      	movs	r1, #2
 80062c2:	4881      	ldr	r0, [pc, #516]	; (80064c8 <checkAktifCalisma+0xddc>)
 80062c4:	f002 fad8 	bl	8008878 <HAL_GPIO_ReadPin>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <checkAktifCalisma+0xbf2>
						&&(makineStop==1)) {
 80062ce:	4b80      	ldr	r3, [pc, #512]	; (80064d0 <checkAktifCalisma+0xde4>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <checkAktifCalisma+0xbf2>

					kapi1pizzato=1;
 80062d6:	4b7f      	ldr	r3, [pc, #508]	; (80064d4 <checkAktifCalisma+0xde8>)
 80062d8:	2201      	movs	r2, #1
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e002      	b.n	80062e4 <checkAktifCalisma+0xbf8>
				} else {
					kapi1pizzato=0;
 80062de:	4b7d      	ldr	r3, [pc, #500]	; (80064d4 <checkAktifCalisma+0xde8>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80062e4:	4b75      	ldr	r3, [pc, #468]	; (80064bc <checkAktifCalisma+0xdd0>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <checkAktifCalisma+0xc10>
 80062ec:	4b79      	ldr	r3, [pc, #484]	; (80064d4 <checkAktifCalisma+0xde8>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <checkAktifCalisma+0xc10>
 80062f4:	4b78      	ldr	r3, [pc, #480]	; (80064d8 <checkAktifCalisma+0xdec>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <checkAktifCalisma+0xc1c>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80062fc:	2201      	movs	r2, #1
 80062fe:	2180      	movs	r1, #128	; 0x80
 8006300:	4876      	ldr	r0, [pc, #472]	; (80064dc <checkAktifCalisma+0xdf0>)
 8006302:	f002 fad0 	bl	80088a6 <HAL_GPIO_WritePin>
 8006306:	e004      	b.n	8006312 <checkAktifCalisma+0xc26>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006308:	2200      	movs	r2, #0
 800630a:	2180      	movs	r1, #128	; 0x80
 800630c:	4873      	ldr	r0, [pc, #460]	; (80064dc <checkAktifCalisma+0xdf0>)
 800630e:	f002 faca 	bl	80088a6 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006312:	4b73      	ldr	r3, [pc, #460]	; (80064e0 <checkAktifCalisma+0xdf4>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d141      	bne.n	800639e <checkAktifCalisma+0xcb2>
 800631a:	4b6a      	ldr	r3, [pc, #424]	; (80064c4 <checkAktifCalisma+0xdd8>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d003      	beq.n	800632a <checkAktifCalisma+0xc3e>
 8006322:	4b68      	ldr	r3, [pc, #416]	; (80064c4 <checkAktifCalisma+0xdd8>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b03      	cmp	r3, #3
 8006328:	d139      	bne.n	800639e <checkAktifCalisma+0xcb2>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800632a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800632e:	4866      	ldr	r0, [pc, #408]	; (80064c8 <checkAktifCalisma+0xddc>)
 8006330:	f002 faa2 	bl	8008878 <HAL_GPIO_ReadPin>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <checkAktifCalisma+0xc56>
 800633a:	4b6a      	ldr	r3, [pc, #424]	; (80064e4 <checkAktifCalisma+0xdf8>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <checkAktifCalisma+0xc6e>
 8006342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006346:	4868      	ldr	r0, [pc, #416]	; (80064e8 <checkAktifCalisma+0xdfc>)
 8006348:	f002 fa96 	bl	8008878 <HAL_GPIO_ReadPin>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d125      	bne.n	800639e <checkAktifCalisma+0xcb2>
 8006352:	4b64      	ldr	r3, [pc, #400]	; (80064e4 <checkAktifCalisma+0xdf8>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d121      	bne.n	800639e <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800635a:	2102      	movs	r1, #2
 800635c:	485a      	ldr	r0, [pc, #360]	; (80064c8 <checkAktifCalisma+0xddc>)
 800635e:	f002 fa8b 	bl	8008878 <HAL_GPIO_ReadPin>
 8006362:	4603      	mov	r3, r0
 8006364:	2b01      	cmp	r3, #1
 8006366:	d11a      	bne.n	800639e <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006368:	2104      	movs	r1, #4
 800636a:	4857      	ldr	r0, [pc, #348]	; (80064c8 <checkAktifCalisma+0xddc>)
 800636c:	f002 fa84 	bl	8008878 <HAL_GPIO_ReadPin>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d113      	bne.n	800639e <checkAktifCalisma+0xcb2>
						&&(makineStop==1)
 8006376:	4b56      	ldr	r3, [pc, #344]	; (80064d0 <checkAktifCalisma+0xde4>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00f      	beq.n	800639e <checkAktifCalisma+0xcb2>
						&&(butonKontrol==0)) {
 800637e:	4b5b      	ldr	r3, [pc, #364]	; (80064ec <checkAktifCalisma+0xe00>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f083 0301 	eor.w	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <checkAktifCalisma+0xcb2>

					kapi2prudhome=1;
 800638c:	4b58      	ldr	r3, [pc, #352]	; (80064f0 <checkAktifCalisma+0xe04>)
 800638e:	2201      	movs	r2, #1
 8006390:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006392:	4b58      	ldr	r3, [pc, #352]	; (80064f4 <checkAktifCalisma+0xe08>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a58      	ldr	r2, [pc, #352]	; (80064f8 <checkAktifCalisma+0xe0c>)
 8006398:	6013      	str	r3, [r2, #0]
					bekle();
 800639a:	f7fe fc65 	bl	8004c68 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800639e:	4b55      	ldr	r3, [pc, #340]	; (80064f4 <checkAktifCalisma+0xe08>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4b55      	ldr	r3, [pc, #340]	; (80064f8 <checkAktifCalisma+0xe0c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	4a54      	ldr	r2, [pc, #336]	; (80064fc <checkAktifCalisma+0xe10>)
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d20d      	bcs.n	80063cc <checkAktifCalisma+0xce0>
 80063b0:	2102      	movs	r1, #2
 80063b2:	4845      	ldr	r0, [pc, #276]	; (80064c8 <checkAktifCalisma+0xddc>)
 80063b4:	f002 fa60 	bl	8008878 <HAL_GPIO_ReadPin>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d006      	beq.n	80063cc <checkAktifCalisma+0xce0>
 80063be:	4b44      	ldr	r3, [pc, #272]	; (80064d0 <checkAktifCalisma+0xde4>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f083 0301 	eor.w	r3, r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <checkAktifCalisma+0xce6>
					kapi2prudhome=0;
 80063cc:	4b48      	ldr	r3, [pc, #288]	; (80064f0 <checkAktifCalisma+0xe04>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80063d2:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <checkAktifCalisma+0xdf4>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d135      	bne.n	8006446 <checkAktifCalisma+0xd5a>
 80063da:	4b3a      	ldr	r3, [pc, #232]	; (80064c4 <checkAktifCalisma+0xdd8>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d003      	beq.n	80063ea <checkAktifCalisma+0xcfe>
 80063e2:	4b38      	ldr	r3, [pc, #224]	; (80064c4 <checkAktifCalisma+0xdd8>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d12d      	bne.n	8006446 <checkAktifCalisma+0xd5a>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80063ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063ee:	4836      	ldr	r0, [pc, #216]	; (80064c8 <checkAktifCalisma+0xddc>)
 80063f0:	f002 fa42 	bl	8008878 <HAL_GPIO_ReadPin>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d103      	bne.n	8006402 <checkAktifCalisma+0xd16>
 80063fa:	4b3a      	ldr	r3, [pc, #232]	; (80064e4 <checkAktifCalisma+0xdf8>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <checkAktifCalisma+0xd2e>
 8006402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006406:	4838      	ldr	r0, [pc, #224]	; (80064e8 <checkAktifCalisma+0xdfc>)
 8006408:	f002 fa36 	bl	8008878 <HAL_GPIO_ReadPin>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d119      	bne.n	8006446 <checkAktifCalisma+0xd5a>
 8006412:	4b34      	ldr	r3, [pc, #208]	; (80064e4 <checkAktifCalisma+0xdf8>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d115      	bne.n	8006446 <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800641a:	2102      	movs	r1, #2
 800641c:	482a      	ldr	r0, [pc, #168]	; (80064c8 <checkAktifCalisma+0xddc>)
 800641e:	f002 fa2b 	bl	8008878 <HAL_GPIO_ReadPin>
 8006422:	4603      	mov	r3, r0
 8006424:	2b01      	cmp	r3, #1
 8006426:	d10e      	bne.n	8006446 <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006428:	2104      	movs	r1, #4
 800642a:	4827      	ldr	r0, [pc, #156]	; (80064c8 <checkAktifCalisma+0xddc>)
 800642c:	f002 fa24 	bl	8008878 <HAL_GPIO_ReadPin>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d107      	bne.n	8006446 <checkAktifCalisma+0xd5a>
						&&(makineStop==1)) {
 8006436:	4b26      	ldr	r3, [pc, #152]	; (80064d0 <checkAktifCalisma+0xde4>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <checkAktifCalisma+0xd5a>

					kapi2butonkontrol=1;
 800643e:	4b30      	ldr	r3, [pc, #192]	; (8006500 <checkAktifCalisma+0xe14>)
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e002      	b.n	800644c <checkAktifCalisma+0xd60>
				} else {
					kapi2butonkontrol=0;
 8006446:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <checkAktifCalisma+0xe14>)
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800644c:	4b24      	ldr	r3, [pc, #144]	; (80064e0 <checkAktifCalisma+0xdf4>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d11d      	bne.n	8006490 <checkAktifCalisma+0xda4>
 8006454:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <checkAktifCalisma+0xdd8>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d003      	beq.n	8006464 <checkAktifCalisma+0xd78>
 800645c:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <checkAktifCalisma+0xdd8>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b03      	cmp	r3, #3
 8006462:	d115      	bne.n	8006490 <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006464:	2102      	movs	r1, #2
 8006466:	4818      	ldr	r0, [pc, #96]	; (80064c8 <checkAktifCalisma+0xddc>)
 8006468:	f002 fa06 	bl	8008878 <HAL_GPIO_ReadPin>
 800646c:	4603      	mov	r3, r0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d10e      	bne.n	8006490 <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006472:	2104      	movs	r1, #4
 8006474:	4814      	ldr	r0, [pc, #80]	; (80064c8 <checkAktifCalisma+0xddc>)
 8006476:	f002 f9ff 	bl	8008878 <HAL_GPIO_ReadPin>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d107      	bne.n	8006490 <checkAktifCalisma+0xda4>
						&&(makineStop==1)) {
 8006480:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <checkAktifCalisma+0xde4>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <checkAktifCalisma+0xda4>

					kapi2pizzato=1;
 8006488:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <checkAktifCalisma+0xe18>)
 800648a:	2201      	movs	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e002      	b.n	8006496 <checkAktifCalisma+0xdaa>
				} else {
					kapi2pizzato=0;
 8006490:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <checkAktifCalisma+0xe18>)
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <checkAktifCalisma+0xe14>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d107      	bne.n	80064ae <checkAktifCalisma+0xdc2>
 800649e:	4b19      	ldr	r3, [pc, #100]	; (8006504 <checkAktifCalisma+0xe18>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d103      	bne.n	80064ae <checkAktifCalisma+0xdc2>
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <checkAktifCalisma+0xe04>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d02c      	beq.n	8006508 <checkAktifCalisma+0xe1c>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80064ae:	2201      	movs	r2, #1
 80064b0:	2140      	movs	r1, #64	; 0x40
 80064b2:	480a      	ldr	r0, [pc, #40]	; (80064dc <checkAktifCalisma+0xdf0>)
 80064b4:	f002 f9f7 	bl	80088a6 <HAL_GPIO_WritePin>
 80064b8:	e02b      	b.n	8006512 <checkAktifCalisma+0xe26>
 80064ba:	bf00      	nop
 80064bc:	20000cc7 	.word	0x20000cc7
 80064c0:	20000c8d 	.word	0x20000c8d
 80064c4:	20000c8c 	.word	0x20000c8c
 80064c8:	40011000 	.word	0x40011000
 80064cc:	20000c8a 	.word	0x20000c8a
 80064d0:	20000cc5 	.word	0x20000cc5
 80064d4:	20000cc8 	.word	0x20000cc8
 80064d8:	20000cc6 	.word	0x20000cc6
 80064dc:	40010800 	.word	0x40010800
 80064e0:	20000c8e 	.word	0x20000c8e
 80064e4:	20000c90 	.word	0x20000c90
 80064e8:	40010c00 	.word	0x40010c00
 80064ec:	20000cb2 	.word	0x20000cb2
 80064f0:	20000cc9 	.word	0x20000cc9
 80064f4:	20000c60 	.word	0x20000c60
 80064f8:	20000c64 	.word	0x20000c64
 80064fc:	20000c9e 	.word	0x20000c9e
 8006500:	20000cca 	.word	0x20000cca
 8006504:	20000ccb 	.word	0x20000ccb
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006508:	2200      	movs	r2, #0
 800650a:	2140      	movs	r1, #64	; 0x40
 800650c:	488d      	ldr	r0, [pc, #564]	; (8006744 <checkAktifCalisma+0x1058>)
 800650e:	f002 f9ca 	bl	80088a6 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006512:	4b8d      	ldr	r3, [pc, #564]	; (8006748 <checkAktifCalisma+0x105c>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <checkAktifCalisma+0xe36>
 800651a:	4b8b      	ldr	r3, [pc, #556]	; (8006748 <checkAktifCalisma+0x105c>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d115      	bne.n	800654e <checkAktifCalisma+0xe62>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006522:	2104      	movs	r1, #4
 8006524:	4889      	ldr	r0, [pc, #548]	; (800674c <checkAktifCalisma+0x1060>)
 8006526:	f002 f9a7 	bl	8008878 <HAL_GPIO_ReadPin>
 800652a:	4603      	mov	r3, r0
 800652c:	2b01      	cmp	r3, #1
 800652e:	d003      	beq.n	8006538 <checkAktifCalisma+0xe4c>
 8006530:	4b87      	ldr	r3, [pc, #540]	; (8006750 <checkAktifCalisma+0x1064>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <checkAktifCalisma+0xe62>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006538:	2102      	movs	r1, #2
 800653a:	4884      	ldr	r0, [pc, #528]	; (800674c <checkAktifCalisma+0x1060>)
 800653c:	f002 f99c 	bl	8008878 <HAL_GPIO_ReadPin>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <checkAktifCalisma+0xe62>

					kapiTablaAcKonumKat1=1;
 8006546:	4b83      	ldr	r3, [pc, #524]	; (8006754 <checkAktifCalisma+0x1068>)
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	e002      	b.n	8006554 <checkAktifCalisma+0xe68>
				} else {
					kapiTablaAcKonumKat1=0;
 800654e:	4b81      	ldr	r3, [pc, #516]	; (8006754 <checkAktifCalisma+0x1068>)
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006554:	4b7c      	ldr	r3, [pc, #496]	; (8006748 <checkAktifCalisma+0x105c>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d003      	beq.n	8006564 <checkAktifCalisma+0xe78>
 800655c:	4b7a      	ldr	r3, [pc, #488]	; (8006748 <checkAktifCalisma+0x105c>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d111      	bne.n	8006588 <checkAktifCalisma+0xe9c>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006564:	2102      	movs	r1, #2
 8006566:	4879      	ldr	r0, [pc, #484]	; (800674c <checkAktifCalisma+0x1060>)
 8006568:	f002 f986 	bl	8008878 <HAL_GPIO_ReadPin>
 800656c:	4603      	mov	r3, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10a      	bne.n	8006588 <checkAktifCalisma+0xe9c>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006572:	2104      	movs	r1, #4
 8006574:	4875      	ldr	r0, [pc, #468]	; (800674c <checkAktifCalisma+0x1060>)
 8006576:	f002 f97f 	bl	8008878 <HAL_GPIO_ReadPin>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d103      	bne.n	8006588 <checkAktifCalisma+0xe9c>

					kapiTablaAcKonumKat2=1;
 8006580:	4b75      	ldr	r3, [pc, #468]	; (8006758 <checkAktifCalisma+0x106c>)
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	e002      	b.n	800658e <checkAktifCalisma+0xea2>
				} else {
					kapiTablaAcKonumKat2=0;
 8006588:	4b73      	ldr	r3, [pc, #460]	; (8006758 <checkAktifCalisma+0x106c>)
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800658e:	4b71      	ldr	r3, [pc, #452]	; (8006754 <checkAktifCalisma+0x1068>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00f      	beq.n	80065b6 <checkAktifCalisma+0xeca>
						&& kapiAcTipi==1
 8006596:	4b71      	ldr	r3, [pc, #452]	; (800675c <checkAktifCalisma+0x1070>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d10b      	bne.n	80065b6 <checkAktifCalisma+0xeca>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800659e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065a2:	486f      	ldr	r0, [pc, #444]	; (8006760 <checkAktifCalisma+0x1074>)
 80065a4:	f002 f968 	bl	8008878 <HAL_GPIO_ReadPin>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <checkAktifCalisma+0xeca>

					kapiactablaesp1=1;
 80065ae:	4b6d      	ldr	r3, [pc, #436]	; (8006764 <checkAktifCalisma+0x1078>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	e002      	b.n	80065bc <checkAktifCalisma+0xed0>
				} else {
					kapiactablaesp1=0;
 80065b6:	4b6b      	ldr	r3, [pc, #428]	; (8006764 <checkAktifCalisma+0x1078>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80065bc:	4b66      	ldr	r3, [pc, #408]	; (8006758 <checkAktifCalisma+0x106c>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00f      	beq.n	80065e4 <checkAktifCalisma+0xef8>
						&& kapiAcTipi==1
 80065c4:	4b65      	ldr	r3, [pc, #404]	; (800675c <checkAktifCalisma+0x1070>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10b      	bne.n	80065e4 <checkAktifCalisma+0xef8>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80065cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065d0:	4863      	ldr	r0, [pc, #396]	; (8006760 <checkAktifCalisma+0x1074>)
 80065d2:	f002 f951 	bl	8008878 <HAL_GPIO_ReadPin>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d103      	bne.n	80065e4 <checkAktifCalisma+0xef8>

					kapiactablaesp2=1;
 80065dc:	4b62      	ldr	r3, [pc, #392]	; (8006768 <checkAktifCalisma+0x107c>)
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	e002      	b.n	80065ea <checkAktifCalisma+0xefe>
				} else {
					kapiactablaesp2=0;
 80065e4:	4b60      	ldr	r3, [pc, #384]	; (8006768 <checkAktifCalisma+0x107c>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80065ea:	4b60      	ldr	r3, [pc, #384]	; (800676c <checkAktifCalisma+0x1080>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d137      	bne.n	8006662 <checkAktifCalisma+0xf76>
 80065f2:	4b5f      	ldr	r3, [pc, #380]	; (8006770 <checkAktifCalisma+0x1084>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d003      	beq.n	8006602 <checkAktifCalisma+0xf16>
 80065fa:	4b5d      	ldr	r3, [pc, #372]	; (8006770 <checkAktifCalisma+0x1084>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d12f      	bne.n	8006662 <checkAktifCalisma+0xf76>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006602:	4b54      	ldr	r3, [pc, #336]	; (8006754 <checkAktifCalisma+0x1068>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <checkAktifCalisma+0xf26>
 800660a:	4b53      	ldr	r3, [pc, #332]	; (8006758 <checkAktifCalisma+0x106c>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d027      	beq.n	8006662 <checkAktifCalisma+0xf76>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006616:	484d      	ldr	r0, [pc, #308]	; (800674c <checkAktifCalisma+0x1060>)
 8006618:	f002 f92e 	bl	8008878 <HAL_GPIO_ReadPin>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <checkAktifCalisma+0xf3e>
 8006622:	4b4e      	ldr	r3, [pc, #312]	; (800675c <checkAktifCalisma+0x1070>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <checkAktifCalisma+0xf4e>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800662a:	4b4e      	ldr	r3, [pc, #312]	; (8006764 <checkAktifCalisma+0x1078>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <checkAktifCalisma+0xf4e>
 8006632:	4b4d      	ldr	r3, [pc, #308]	; (8006768 <checkAktifCalisma+0x107c>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d013      	beq.n	8006662 <checkAktifCalisma+0xf76>
						&&(makineStop==1)
 800663a:	4b4e      	ldr	r3, [pc, #312]	; (8006774 <checkAktifCalisma+0x1088>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00f      	beq.n	8006662 <checkAktifCalisma+0xf76>
						&&(butonKontrol==0)) {
 8006642:	4b4d      	ldr	r3, [pc, #308]	; (8006778 <checkAktifCalisma+0x108c>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	f083 0301 	eor.w	r3, r3, #1
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <checkAktifCalisma+0xf76>

					kapiTablaprudhome=1;
 8006650:	4b4a      	ldr	r3, [pc, #296]	; (800677c <checkAktifCalisma+0x1090>)
 8006652:	2201      	movs	r2, #1
 8006654:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8006656:	4b4a      	ldr	r3, [pc, #296]	; (8006780 <checkAktifCalisma+0x1094>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a4a      	ldr	r2, [pc, #296]	; (8006784 <checkAktifCalisma+0x1098>)
 800665c:	6013      	str	r3, [r2, #0]
					bekle();
 800665e:	f7fe fb03 	bl	8004c68 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006662:	4b47      	ldr	r3, [pc, #284]	; (8006780 <checkAktifCalisma+0x1094>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b47      	ldr	r3, [pc, #284]	; (8006784 <checkAktifCalisma+0x1098>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	4a46      	ldr	r2, [pc, #280]	; (8006788 <checkAktifCalisma+0x109c>)
 800666e:	7812      	ldrb	r2, [r2, #0]
 8006670:	4293      	cmp	r3, r2
 8006672:	d214      	bcs.n	800669e <checkAktifCalisma+0xfb2>
 8006674:	4b37      	ldr	r3, [pc, #220]	; (8006754 <checkAktifCalisma+0x1068>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f083 0301 	eor.w	r3, r3, #1
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d006      	beq.n	8006690 <checkAktifCalisma+0xfa4>
 8006682:	4b35      	ldr	r3, [pc, #212]	; (8006758 <checkAktifCalisma+0x106c>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f083 0301 	eor.w	r3, r3, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <checkAktifCalisma+0xfb2>
 8006690:	4b38      	ldr	r3, [pc, #224]	; (8006774 <checkAktifCalisma+0x1088>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	f083 0301 	eor.w	r3, r3, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <checkAktifCalisma+0xfb8>
					kapiTablaprudhome=0;
 800669e:	4b37      	ldr	r3, [pc, #220]	; (800677c <checkAktifCalisma+0x1090>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80066a4:	4b31      	ldr	r3, [pc, #196]	; (800676c <checkAktifCalisma+0x1080>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d12b      	bne.n	8006704 <checkAktifCalisma+0x1018>
 80066ac:	4b30      	ldr	r3, [pc, #192]	; (8006770 <checkAktifCalisma+0x1084>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d003      	beq.n	80066bc <checkAktifCalisma+0xfd0>
 80066b4:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <checkAktifCalisma+0x1084>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d123      	bne.n	8006704 <checkAktifCalisma+0x1018>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80066bc:	4b25      	ldr	r3, [pc, #148]	; (8006754 <checkAktifCalisma+0x1068>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d103      	bne.n	80066cc <checkAktifCalisma+0xfe0>
 80066c4:	4b24      	ldr	r3, [pc, #144]	; (8006758 <checkAktifCalisma+0x106c>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01b      	beq.n	8006704 <checkAktifCalisma+0x1018>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80066cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066d0:	481e      	ldr	r0, [pc, #120]	; (800674c <checkAktifCalisma+0x1060>)
 80066d2:	f002 f8d1 	bl	8008878 <HAL_GPIO_ReadPin>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <checkAktifCalisma+0xff8>
 80066dc:	4b1f      	ldr	r3, [pc, #124]	; (800675c <checkAktifCalisma+0x1070>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <checkAktifCalisma+0x1008>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80066e4:	4b1f      	ldr	r3, [pc, #124]	; (8006764 <checkAktifCalisma+0x1078>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <checkAktifCalisma+0x1008>
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <checkAktifCalisma+0x107c>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <checkAktifCalisma+0x1018>
						&&(makineStop==1)) {
 80066f4:	4b1f      	ldr	r3, [pc, #124]	; (8006774 <checkAktifCalisma+0x1088>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <checkAktifCalisma+0x1018>

					kapiTablabutonkontrol=1;
 80066fc:	4b23      	ldr	r3, [pc, #140]	; (800678c <checkAktifCalisma+0x10a0>)
 80066fe:	2201      	movs	r2, #1
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	e002      	b.n	800670a <checkAktifCalisma+0x101e>
				} else {
					kapiTablabutonkontrol=0;
 8006704:	4b21      	ldr	r3, [pc, #132]	; (800678c <checkAktifCalisma+0x10a0>)
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <checkAktifCalisma+0x1080>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d140      	bne.n	8006794 <checkAktifCalisma+0x10a8>
 8006712:	4b17      	ldr	r3, [pc, #92]	; (8006770 <checkAktifCalisma+0x1084>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d003      	beq.n	8006722 <checkAktifCalisma+0x1036>
 800671a:	4b15      	ldr	r3, [pc, #84]	; (8006770 <checkAktifCalisma+0x1084>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b03      	cmp	r3, #3
 8006720:	d138      	bne.n	8006794 <checkAktifCalisma+0x10a8>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <checkAktifCalisma+0x1068>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <checkAktifCalisma+0x1046>
 800672a:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <checkAktifCalisma+0x106c>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d030      	beq.n	8006794 <checkAktifCalisma+0x10a8>
						&&(makineStop==1)) {
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <checkAktifCalisma+0x1088>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d02c      	beq.n	8006794 <checkAktifCalisma+0x10a8>

					kapiTablapizzato=1;
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <checkAktifCalisma+0x10a4>)
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e02b      	b.n	800679a <checkAktifCalisma+0x10ae>
 8006742:	bf00      	nop
 8006744:	40010800 	.word	0x40010800
 8006748:	20000c91 	.word	0x20000c91
 800674c:	40011000 	.word	0x40011000
 8006750:	20000c8a 	.word	0x20000c8a
 8006754:	20000ccf 	.word	0x20000ccf
 8006758:	20000cd0 	.word	0x20000cd0
 800675c:	20000c90 	.word	0x20000c90
 8006760:	40010c00 	.word	0x40010c00
 8006764:	20000cdf 	.word	0x20000cdf
 8006768:	20000ce0 	.word	0x20000ce0
 800676c:	20000c8f 	.word	0x20000c8f
 8006770:	20000c8c 	.word	0x20000c8c
 8006774:	20000cc5 	.word	0x20000cc5
 8006778:	20000cb2 	.word	0x20000cb2
 800677c:	20000ccc 	.word	0x20000ccc
 8006780:	20000c60 	.word	0x20000c60
 8006784:	20000c64 	.word	0x20000c64
 8006788:	20000c9f 	.word	0x20000c9f
 800678c:	20000ccd 	.word	0x20000ccd
 8006790:	20000cce 	.word	0x20000cce
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8006794:	4b89      	ldr	r3, [pc, #548]	; (80069bc <checkAktifCalisma+0x12d0>)
 8006796:	2200      	movs	r2, #0
 8006798:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800679a:	4b89      	ldr	r3, [pc, #548]	; (80069c0 <checkAktifCalisma+0x12d4>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d107      	bne.n	80067b2 <checkAktifCalisma+0x10c6>
 80067a2:	4b88      	ldr	r3, [pc, #544]	; (80069c4 <checkAktifCalisma+0x12d8>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <checkAktifCalisma+0x10c6>
 80067aa:	4b84      	ldr	r3, [pc, #528]	; (80069bc <checkAktifCalisma+0x12d0>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <checkAktifCalisma+0x10d2>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80067b2:	2201      	movs	r2, #1
 80067b4:	2120      	movs	r1, #32
 80067b6:	4884      	ldr	r0, [pc, #528]	; (80069c8 <checkAktifCalisma+0x12dc>)
 80067b8:	f002 f875 	bl	80088a6 <HAL_GPIO_WritePin>
 80067bc:	e004      	b.n	80067c8 <checkAktifCalisma+0x10dc>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067be:	2200      	movs	r2, #0
 80067c0:	2120      	movs	r1, #32
 80067c2:	4881      	ldr	r0, [pc, #516]	; (80069c8 <checkAktifCalisma+0x12dc>)
 80067c4:	f002 f86f 	bl	80088a6 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80067c8:	4b80      	ldr	r3, [pc, #512]	; (80069cc <checkAktifCalisma+0x12e0>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00e      	beq.n	80067ee <checkAktifCalisma+0x1102>
 80067d0:	2102      	movs	r1, #2
 80067d2:	487f      	ldr	r0, [pc, #508]	; (80069d0 <checkAktifCalisma+0x12e4>)
 80067d4:	f002 f850 	bl	8008878 <HAL_GPIO_ReadPin>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d107      	bne.n	80067ee <checkAktifCalisma+0x1102>
 80067de:	4b7d      	ldr	r3, [pc, #500]	; (80069d4 <checkAktifCalisma+0x12e8>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <checkAktifCalisma+0x1102>
 80067e6:	4b7c      	ldr	r3, [pc, #496]	; (80069d8 <checkAktifCalisma+0x12ec>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d112      	bne.n	8006814 <checkAktifCalisma+0x1128>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80067ee:	4b7b      	ldr	r3, [pc, #492]	; (80069dc <checkAktifCalisma+0x12f0>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d066      	beq.n	80068c4 <checkAktifCalisma+0x11d8>
 80067f6:	2104      	movs	r1, #4
 80067f8:	4875      	ldr	r0, [pc, #468]	; (80069d0 <checkAktifCalisma+0x12e4>)
 80067fa:	f002 f83d 	bl	8008878 <HAL_GPIO_ReadPin>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d15f      	bne.n	80068c4 <checkAktifCalisma+0x11d8>
 8006804:	4b73      	ldr	r3, [pc, #460]	; (80069d4 <checkAktifCalisma+0x12e8>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d05b      	beq.n	80068c4 <checkAktifCalisma+0x11d8>
 800680c:	4b72      	ldr	r3, [pc, #456]	; (80069d8 <checkAktifCalisma+0x12ec>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d057      	beq.n	80068c4 <checkAktifCalisma+0x11d8>


					calismaSayisi1=calismaSayisi1+1;
 8006814:	4b72      	ldr	r3, [pc, #456]	; (80069e0 <checkAktifCalisma+0x12f4>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	4b70      	ldr	r3, [pc, #448]	; (80069e0 <checkAktifCalisma+0x12f4>)
 800681e:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi1>9) {
 8006820:	4b6f      	ldr	r3, [pc, #444]	; (80069e0 <checkAktifCalisma+0x12f4>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b09      	cmp	r3, #9
 8006826:	d908      	bls.n	800683a <checkAktifCalisma+0x114e>
					  	calismaSayisi1=0;
 8006828:	4b6d      	ldr	r3, [pc, #436]	; (80069e0 <checkAktifCalisma+0x12f4>)
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10=calismaSayisi10+1;
 800682e:	4b6d      	ldr	r3, [pc, #436]	; (80069e4 <checkAktifCalisma+0x12f8>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	b2da      	uxtb	r2, r3
 8006836:	4b6b      	ldr	r3, [pc, #428]	; (80069e4 <checkAktifCalisma+0x12f8>)
 8006838:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi10>9) {
 800683a:	4b6a      	ldr	r3, [pc, #424]	; (80069e4 <checkAktifCalisma+0x12f8>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b09      	cmp	r3, #9
 8006840:	d908      	bls.n	8006854 <checkAktifCalisma+0x1168>
					  	calismaSayisi10=0;
 8006842:	4b68      	ldr	r3, [pc, #416]	; (80069e4 <checkAktifCalisma+0x12f8>)
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi100=calismaSayisi100+1;
 8006848:	4b67      	ldr	r3, [pc, #412]	; (80069e8 <checkAktifCalisma+0x12fc>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	b2da      	uxtb	r2, r3
 8006850:	4b65      	ldr	r3, [pc, #404]	; (80069e8 <checkAktifCalisma+0x12fc>)
 8006852:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi100>9) {
 8006854:	4b64      	ldr	r3, [pc, #400]	; (80069e8 <checkAktifCalisma+0x12fc>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b09      	cmp	r3, #9
 800685a:	d908      	bls.n	800686e <checkAktifCalisma+0x1182>
					  	calismaSayisi100=0;
 800685c:	4b62      	ldr	r3, [pc, #392]	; (80069e8 <checkAktifCalisma+0x12fc>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi1000=calismaSayisi1000+1;
 8006862:	4b62      	ldr	r3, [pc, #392]	; (80069ec <checkAktifCalisma+0x1300>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b60      	ldr	r3, [pc, #384]	; (80069ec <checkAktifCalisma+0x1300>)
 800686c:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi1000>9) {
 800686e:	4b5f      	ldr	r3, [pc, #380]	; (80069ec <checkAktifCalisma+0x1300>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b09      	cmp	r3, #9
 8006874:	d908      	bls.n	8006888 <checkAktifCalisma+0x119c>
					  	calismaSayisi1000=0;
 8006876:	4b5d      	ldr	r3, [pc, #372]	; (80069ec <checkAktifCalisma+0x1300>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10000=calismaSayisi10000+1;
 800687c:	4b5c      	ldr	r3, [pc, #368]	; (80069f0 <checkAktifCalisma+0x1304>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	b2da      	uxtb	r2, r3
 8006884:	4b5a      	ldr	r3, [pc, #360]	; (80069f0 <checkAktifCalisma+0x1304>)
 8006886:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 8006888:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <checkAktifCalisma+0x1304>)
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	4b59      	ldr	r3, [pc, #356]	; (80069f4 <checkAktifCalisma+0x1308>)
 800688e:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 8006892:	4b56      	ldr	r3, [pc, #344]	; (80069ec <checkAktifCalisma+0x1300>)
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	4b57      	ldr	r3, [pc, #348]	; (80069f4 <checkAktifCalisma+0x1308>)
 8006898:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 800689a:	4b53      	ldr	r3, [pc, #332]	; (80069e8 <checkAktifCalisma+0x12fc>)
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	4b55      	ldr	r3, [pc, #340]	; (80069f4 <checkAktifCalisma+0x1308>)
 80068a0:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 80068a2:	4b50      	ldr	r3, [pc, #320]	; (80069e4 <checkAktifCalisma+0x12f8>)
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	4b53      	ldr	r3, [pc, #332]	; (80069f4 <checkAktifCalisma+0x1308>)
 80068a8:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 80068aa:	4b4d      	ldr	r3, [pc, #308]	; (80069e0 <checkAktifCalisma+0x12f4>)
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	4b51      	ldr	r3, [pc, #324]	; (80069f4 <checkAktifCalisma+0x1308>)
 80068b0:	771a      	strb	r2, [r3, #28]

					hafizaYaz=1;
 80068b2:	4b51      	ldr	r3, [pc, #324]	; (80069f8 <checkAktifCalisma+0x130c>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80068b8:	4b44      	ldr	r3, [pc, #272]	; (80069cc <checkAktifCalisma+0x12e0>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80068be:	4b47      	ldr	r3, [pc, #284]	; (80069dc <checkAktifCalisma+0x12f0>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80068c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068c8:	484c      	ldr	r0, [pc, #304]	; (80069fc <checkAktifCalisma+0x1310>)
 80068ca:	f001 ffd5 	bl	8008878 <HAL_GPIO_ReadPin>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d016      	beq.n	8006902 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80068d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068d8:	4848      	ldr	r0, [pc, #288]	; (80069fc <checkAktifCalisma+0x1310>)
 80068da:	f001 ffcd 	bl	8008878 <HAL_GPIO_ReadPin>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80068e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068e8:	4844      	ldr	r0, [pc, #272]	; (80069fc <checkAktifCalisma+0x1310>)
 80068ea:	f001 ffc5 	bl	8008878 <HAL_GPIO_ReadPin>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d006      	beq.n	8006902 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80068f4:	2140      	movs	r1, #64	; 0x40
 80068f6:	4836      	ldr	r0, [pc, #216]	; (80069d0 <checkAktifCalisma+0x12e4>)
 80068f8:	f001 ffbe 	bl	8008878 <HAL_GPIO_ReadPin>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <checkAktifCalisma+0x121e>

					startBasili=1;
 8006902:	4b3f      	ldr	r3, [pc, #252]	; (8006a00 <checkAktifCalisma+0x1314>)
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	e002      	b.n	8006910 <checkAktifCalisma+0x1224>
				} else {
					startBasili=0;
 800690a:	4b3d      	ldr	r3, [pc, #244]	; (8006a00 <checkAktifCalisma+0x1314>)
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006910:	4b3b      	ldr	r3, [pc, #236]	; (8006a00 <checkAktifCalisma+0x1314>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d014      	beq.n	8006942 <checkAktifCalisma+0x1256>
 8006918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800691c:	4837      	ldr	r0, [pc, #220]	; (80069fc <checkAktifCalisma+0x1310>)
 800691e:	f001 ffab 	bl	8008878 <HAL_GPIO_ReadPin>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10c      	bne.n	8006942 <checkAktifCalisma+0x1256>

					hataVar=1;
 8006928:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <checkAktifCalisma+0x1318>)
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 800692e:	2001      	movs	r0, #1
 8006930:	f7fd fdde 	bl	80044f0 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8006934:	2001      	movs	r0, #1
 8006936:	f7fe f91d 	bl	8004b74 <hata2EEPROM>
					acilstophatasi=1;
 800693a:	4b33      	ldr	r3, [pc, #204]	; (8006a08 <checkAktifCalisma+0x131c>)
 800693c:	2201      	movs	r2, #1
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	e018      	b.n	8006974 <checkAktifCalisma+0x1288>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006942:	4b31      	ldr	r3, [pc, #196]	; (8006a08 <checkAktifCalisma+0x131c>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d014      	beq.n	8006974 <checkAktifCalisma+0x1288>
 800694a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800694e:	482b      	ldr	r0, [pc, #172]	; (80069fc <checkAktifCalisma+0x1310>)
 8006950:	f001 ff92 	bl	8008878 <HAL_GPIO_ReadPin>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <checkAktifCalisma+0x1288>
 800695a:	4b29      	ldr	r3, [pc, #164]	; (8006a00 <checkAktifCalisma+0x1314>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f083 0301 	eor.w	r3, r3, #1
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <checkAktifCalisma+0x1288>
					acilstophatasi=0;
 8006968:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <checkAktifCalisma+0x131c>)
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800696e:	2001      	movs	r0, #1
 8006970:	f7fd fd6a 	bl	8004448 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <checkAktifCalisma+0x1320>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	f083 0301 	eor.w	r3, r3, #1
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d04c      	beq.n	8006a1c <checkAktifCalisma+0x1330>
 8006982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006986:	481d      	ldr	r0, [pc, #116]	; (80069fc <checkAktifCalisma+0x1310>)
 8006988:	f001 ff76 	bl	8008878 <HAL_GPIO_ReadPin>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <checkAktifCalisma+0x12ae>
 8006992:	4b1f      	ldr	r3, [pc, #124]	; (8006a10 <checkAktifCalisma+0x1324>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d040      	beq.n	8006a1c <checkAktifCalisma+0x1330>
 800699a:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <checkAktifCalisma+0x1328>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d13c      	bne.n	8006a1c <checkAktifCalisma+0x1330>
					hataVar=1;
 80069a2:	4b18      	ldr	r3, [pc, #96]	; (8006a04 <checkAktifCalisma+0x1318>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80069a8:	2002      	movs	r0, #2
 80069aa:	f7fd fda1 	bl	80044f0 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80069ae:	2002      	movs	r0, #2
 80069b0:	f7fe f8e0 	bl	8004b74 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80069b4:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <checkAktifCalisma+0x132c>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	e047      	b.n	8006a4c <checkAktifCalisma+0x1360>
 80069bc:	20000cce 	.word	0x20000cce
 80069c0:	20000ccd 	.word	0x20000ccd
 80069c4:	20000ccc 	.word	0x20000ccc
 80069c8:	40010800 	.word	0x40010800
 80069cc:	20000cc2 	.word	0x20000cc2
 80069d0:	40011000 	.word	0x40011000
 80069d4:	20000c8a 	.word	0x20000c8a
 80069d8:	20000cc5 	.word	0x20000cc5
 80069dc:	20000cc3 	.word	0x20000cc3
 80069e0:	20000c81 	.word	0x20000c81
 80069e4:	20000c82 	.word	0x20000c82
 80069e8:	20000941 	.word	0x20000941
 80069ec:	20000942 	.word	0x20000942
 80069f0:	20000c83 	.word	0x20000c83
 80069f4:	20000c18 	.word	0x20000c18
 80069f8:	20000caf 	.word	0x20000caf
 80069fc:	40010c00 	.word	0x40010c00
 8006a00:	20000cd1 	.word	0x20000cd1
 8006a04:	20000cd8 	.word	0x20000cd8
 8006a08:	20000cd3 	.word	0x20000cd3
 8006a0c:	20000cda 	.word	0x20000cda
 8006a10:	20000ce4 	.word	0x20000ce4
 8006a14:	20000c88 	.word	0x20000c88
 8006a18:	20000cd4 	.word	0x20000cd4
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006a1c:	4b97      	ldr	r3, [pc, #604]	; (8006c7c <checkAktifCalisma+0x1590>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d013      	beq.n	8006a4c <checkAktifCalisma+0x1360>
 8006a24:	4b96      	ldr	r3, [pc, #600]	; (8006c80 <checkAktifCalisma+0x1594>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00f      	beq.n	8006a4c <checkAktifCalisma+0x1360>
 8006a2c:	4b95      	ldr	r3, [pc, #596]	; (8006c84 <checkAktifCalisma+0x1598>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f083 0301 	eor.w	r3, r3, #1
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 8006a3a:	4b90      	ldr	r3, [pc, #576]	; (8006c7c <checkAktifCalisma+0x1590>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006a40:	4b91      	ldr	r3, [pc, #580]	; (8006c88 <checkAktifCalisma+0x159c>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8006a46:	2002      	movs	r0, #2
 8006a48:	f7fd fcfe 	bl	8004448 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006a4c:	4b8f      	ldr	r3, [pc, #572]	; (8006c8c <checkAktifCalisma+0x15a0>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11c      	bne.n	8006a8e <checkAktifCalisma+0x13a2>
 8006a54:	4b8e      	ldr	r3, [pc, #568]	; (8006c90 <checkAktifCalisma+0x15a4>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d118      	bne.n	8006a8e <checkAktifCalisma+0x13a2>
 8006a5c:	4b8d      	ldr	r3, [pc, #564]	; (8006c94 <checkAktifCalisma+0x15a8>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d014      	beq.n	8006a8e <checkAktifCalisma+0x13a2>
 8006a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a68:	488b      	ldr	r0, [pc, #556]	; (8006c98 <checkAktifCalisma+0x15ac>)
 8006a6a:	f001 ff05 	bl	8008878 <HAL_GPIO_ReadPin>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10c      	bne.n	8006a8e <checkAktifCalisma+0x13a2>
					hataVar=1;
 8006a74:	4b89      	ldr	r3, [pc, #548]	; (8006c9c <checkAktifCalisma+0x15b0>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8006a7a:	2003      	movs	r0, #3
 8006a7c:	f7fd fd38 	bl	80044f0 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006a80:	2003      	movs	r0, #3
 8006a82:	f7fe f877 	bl	8004b74 <hata2EEPROM>
					basinchatasi=1;
 8006a86:	4b86      	ldr	r3, [pc, #536]	; (8006ca0 <checkAktifCalisma+0x15b4>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	e015      	b.n	8006aba <checkAktifCalisma+0x13ce>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006a8e:	4b84      	ldr	r3, [pc, #528]	; (8006ca0 <checkAktifCalisma+0x15b4>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d011      	beq.n	8006aba <checkAktifCalisma+0x13ce>
 8006a96:	4b7d      	ldr	r3, [pc, #500]	; (8006c8c <checkAktifCalisma+0x15a0>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10d      	bne.n	8006aba <checkAktifCalisma+0x13ce>
 8006a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006aa2:	4880      	ldr	r0, [pc, #512]	; (8006ca4 <checkAktifCalisma+0x15b8>)
 8006aa4:	f001 fee8 	bl	8008878 <HAL_GPIO_ReadPin>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d105      	bne.n	8006aba <checkAktifCalisma+0x13ce>
					basinchatasi=0;
 8006aae:	4b7c      	ldr	r3, [pc, #496]	; (8006ca0 <checkAktifCalisma+0x15b4>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8006ab4:	2003      	movs	r0, #3
 8006ab6:	f7fd fcc7 	bl	8004448 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006aba:	4b7b      	ldr	r3, [pc, #492]	; (8006ca8 <checkAktifCalisma+0x15bc>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <checkAktifCalisma+0x13de>
 8006ac2:	4b7a      	ldr	r3, [pc, #488]	; (8006cac <checkAktifCalisma+0x15c0>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01c      	beq.n	8006b04 <checkAktifCalisma+0x1418>
 8006aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ace:	4878      	ldr	r0, [pc, #480]	; (8006cb0 <checkAktifCalisma+0x15c4>)
 8006ad0:	f001 fed2 	bl	8008878 <HAL_GPIO_ReadPin>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d114      	bne.n	8006b04 <checkAktifCalisma+0x1418>
 8006ada:	4b76      	ldr	r3, [pc, #472]	; (8006cb4 <checkAktifCalisma+0x15c8>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d003      	beq.n	8006aea <checkAktifCalisma+0x13fe>
 8006ae2:	4b74      	ldr	r3, [pc, #464]	; (8006cb4 <checkAktifCalisma+0x15c8>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d10c      	bne.n	8006b04 <checkAktifCalisma+0x1418>
					hataVar=1;
 8006aea:	4b6c      	ldr	r3, [pc, #432]	; (8006c9c <checkAktifCalisma+0x15b0>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006af0:	2004      	movs	r0, #4
 8006af2:	f7fd fcfd 	bl	80044f0 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8006af6:	2004      	movs	r0, #4
 8006af8:	f7fe f83c 	bl	8004b74 <hata2EEPROM>
					katkapisivicihatasi=1;
 8006afc:	4b6e      	ldr	r3, [pc, #440]	; (8006cb8 <checkAktifCalisma+0x15cc>)
 8006afe:	2201      	movs	r2, #1
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e01f      	b.n	8006b44 <checkAktifCalisma+0x1458>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006b04:	4b6c      	ldr	r3, [pc, #432]	; (8006cb8 <checkAktifCalisma+0x15cc>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01b      	beq.n	8006b44 <checkAktifCalisma+0x1458>
 8006b0c:	4b6b      	ldr	r3, [pc, #428]	; (8006cbc <checkAktifCalisma+0x15d0>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <checkAktifCalisma+0x1458>
 8006b14:	4b64      	ldr	r3, [pc, #400]	; (8006ca8 <checkAktifCalisma+0x15bc>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f083 0301 	eor.w	r3, r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d010      	beq.n	8006b44 <checkAktifCalisma+0x1458>
 8006b22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b26:	4862      	ldr	r0, [pc, #392]	; (8006cb0 <checkAktifCalisma+0x15c4>)
 8006b28:	f001 fea6 	bl	8008878 <HAL_GPIO_ReadPin>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d108      	bne.n	8006b44 <checkAktifCalisma+0x1458>

					katkapisivicihatasi=0;
 8006b32:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <checkAktifCalisma+0x15cc>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8006b38:	4b5c      	ldr	r3, [pc, #368]	; (8006cac <checkAktifCalisma+0x15c0>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8006b3e:	2004      	movs	r0, #4
 8006b40:	f7fd fc82 	bl	8004448 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006b44:	4b58      	ldr	r3, [pc, #352]	; (8006ca8 <checkAktifCalisma+0x15bc>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <checkAktifCalisma+0x1468>
 8006b4c:	4b5c      	ldr	r3, [pc, #368]	; (8006cc0 <checkAktifCalisma+0x15d4>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01c      	beq.n	8006b8e <checkAktifCalisma+0x14a2>
 8006b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b58:	4855      	ldr	r0, [pc, #340]	; (8006cb0 <checkAktifCalisma+0x15c4>)
 8006b5a:	f001 fe8d 	bl	8008878 <HAL_GPIO_ReadPin>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d114      	bne.n	8006b8e <checkAktifCalisma+0x14a2>
 8006b64:	4b53      	ldr	r3, [pc, #332]	; (8006cb4 <checkAktifCalisma+0x15c8>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d003      	beq.n	8006b74 <checkAktifCalisma+0x1488>
 8006b6c:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <checkAktifCalisma+0x15c8>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d10c      	bne.n	8006b8e <checkAktifCalisma+0x14a2>

					hataVar=1;
 8006b74:	4b49      	ldr	r3, [pc, #292]	; (8006c9c <checkAktifCalisma+0x15b0>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8006b7a:	2005      	movs	r0, #5
 8006b7c:	f7fd fcb8 	bl	80044f0 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8006b80:	2005      	movs	r0, #5
 8006b82:	f7fd fff7 	bl	8004b74 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8006b86:	4b4f      	ldr	r3, [pc, #316]	; (8006cc4 <checkAktifCalisma+0x15d8>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e023      	b.n	8006bd6 <checkAktifCalisma+0x14ea>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006b8e:	4b4d      	ldr	r3, [pc, #308]	; (8006cc4 <checkAktifCalisma+0x15d8>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01f      	beq.n	8006bd6 <checkAktifCalisma+0x14ea>
 8006b96:	4b49      	ldr	r3, [pc, #292]	; (8006cbc <checkAktifCalisma+0x15d0>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d01b      	beq.n	8006bd6 <checkAktifCalisma+0x14ea>
 8006b9e:	4b42      	ldr	r3, [pc, #264]	; (8006ca8 <checkAktifCalisma+0x15bc>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	f083 0301 	eor.w	r3, r3, #1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d014      	beq.n	8006bd6 <checkAktifCalisma+0x14ea>
 8006bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bb0:	483f      	ldr	r0, [pc, #252]	; (8006cb0 <checkAktifCalisma+0x15c4>)
 8006bb2:	f001 fe61 	bl	8008878 <HAL_GPIO_ReadPin>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10c      	bne.n	8006bd6 <checkAktifCalisma+0x14ea>
 8006bbc:	4b3f      	ldr	r3, [pc, #252]	; (8006cbc <checkAktifCalisma+0x15d0>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d008      	beq.n	8006bd6 <checkAktifCalisma+0x14ea>
					tablakapisivicihatasi=0;
 8006bc4:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <checkAktifCalisma+0x15d8>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006bca:	4b3d      	ldr	r3, [pc, #244]	; (8006cc0 <checkAktifCalisma+0x15d4>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006bd0:	2005      	movs	r0, #5
 8006bd2:	f7fd fc39 	bl	8004448 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006bd6:	4b2f      	ldr	r3, [pc, #188]	; (8006c94 <checkAktifCalisma+0x15a8>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d107      	bne.n	8006bee <checkAktifCalisma+0x1502>
 8006bde:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <checkAktifCalisma+0x1598>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d103      	bne.n	8006bee <checkAktifCalisma+0x1502>
 8006be6:	4b38      	ldr	r3, [pc, #224]	; (8006cc8 <checkAktifCalisma+0x15dc>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d014      	beq.n	8006c18 <checkAktifCalisma+0x152c>
				    if(millis-timer4>=makineCalismaTmr) {
 8006bee:	4b37      	ldr	r3, [pc, #220]	; (8006ccc <checkAktifCalisma+0x15e0>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b37      	ldr	r3, [pc, #220]	; (8006cd0 <checkAktifCalisma+0x15e4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	4a36      	ldr	r2, [pc, #216]	; (8006cd4 <checkAktifCalisma+0x15e8>)
 8006bfa:	7812      	ldrb	r2, [r2, #0]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d30b      	bcc.n	8006c18 <checkAktifCalisma+0x152c>
					  	hataVar=1;
 8006c00:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <checkAktifCalisma+0x15b0>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8006c06:	2006      	movs	r0, #6
 8006c08:	f7fd fc72 	bl	80044f0 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006c0c:	2006      	movs	r0, #6
 8006c0e:	f7fd ffb1 	bl	8004b74 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006c12:	4b31      	ldr	r3, [pc, #196]	; (8006cd8 <checkAktifCalisma+0x15ec>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006c18:	4b2f      	ldr	r3, [pc, #188]	; (8006cd8 <checkAktifCalisma+0x15ec>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d013      	beq.n	8006c48 <checkAktifCalisma+0x155c>
 8006c20:	2108      	movs	r1, #8
 8006c22:	4823      	ldr	r0, [pc, #140]	; (8006cb0 <checkAktifCalisma+0x15c4>)
 8006c24:	f001 fe28 	bl	8008878 <HAL_GPIO_ReadPin>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <checkAktifCalisma+0x155c>
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <checkAktifCalisma+0x15bc>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	f083 0301 	eor.w	r3, r3, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <checkAktifCalisma+0x155c>
					maksimumcalismahatasi=0;
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <checkAktifCalisma+0x15ec>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006c42:	2006      	movs	r0, #6
 8006c44:	f7fd fc00 	bl	8004448 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006c48:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <checkAktifCalisma+0x15f0>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <checkAktifCalisma+0x157c>
 8006c50:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <checkAktifCalisma+0x1598>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <checkAktifCalisma+0x157c>
 8006c58:	4b21      	ldr	r3, [pc, #132]	; (8006ce0 <checkAktifCalisma+0x15f4>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d103      	bne.n	8006c68 <checkAktifCalisma+0x157c>
 8006c60:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <checkAktifCalisma+0x15dc>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d03f      	beq.n	8006ce8 <checkAktifCalisma+0x15fc>
					makineCalisiyor=0;
 8006c68:	4b1e      	ldr	r3, [pc, #120]	; (8006ce4 <checkAktifCalisma+0x15f8>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <checkAktifCalisma+0x15c0>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006c74:	4b12      	ldr	r3, [pc, #72]	; (8006cc0 <checkAktifCalisma+0x15d4>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	e03c      	b.n	8006cf6 <checkAktifCalisma+0x160a>
 8006c7c:	20000cd4 	.word	0x20000cd4
 8006c80:	20000cda 	.word	0x20000cda
 8006c84:	20000cbb 	.word	0x20000cbb
 8006c88:	20000ce4 	.word	0x20000ce4
 8006c8c:	20000c87 	.word	0x20000c87
 8006c90:	20000c8b 	.word	0x20000c8b
 8006c94:	20000cd7 	.word	0x20000cd7
 8006c98:	40011000 	.word	0x40011000
 8006c9c:	20000cd8 	.word	0x20000cd8
 8006ca0:	20000ce1 	.word	0x20000ce1
 8006ca4:	40010c00 	.word	0x40010c00
 8006ca8:	20000cd1 	.word	0x20000cd1
 8006cac:	20000ce5 	.word	0x20000ce5
 8006cb0:	40010800 	.word	0x40010800
 8006cb4:	20000c8c 	.word	0x20000c8c
 8006cb8:	20000ce2 	.word	0x20000ce2
 8006cbc:	20000cc5 	.word	0x20000cc5
 8006cc0:	20000ce6 	.word	0x20000ce6
 8006cc4:	20000ce3 	.word	0x20000ce3
 8006cc8:	20000cba 	.word	0x20000cba
 8006ccc:	20000c60 	.word	0x20000c60
 8006cd0:	20000c74 	.word	0x20000c74
 8006cd4:	20000c9c 	.word	0x20000c9c
 8006cd8:	20000cd2 	.word	0x20000cd2
 8006cdc:	20000cb8 	.word	0x20000cb8
 8006ce0:	20000cb9 	.word	0x20000cb9
 8006ce4:	20000cd9 	.word	0x20000cd9
				} else {
					makineCalisiyor=1;
 8006ce8:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <checkAktifCalisma+0x1678>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006cee:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <checkAktifCalisma+0x167c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <checkAktifCalisma+0x1680>)
 8006cf4:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006cf6:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <checkAktifCalisma+0x1684>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02f      	beq.n	8006d5e <checkAktifCalisma+0x1672>
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <checkAktifCalisma+0x1688>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	f083 0301 	eor.w	r3, r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d028      	beq.n	8006d5e <checkAktifCalisma+0x1672>
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <checkAktifCalisma+0x168c>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	f083 0301 	eor.w	r3, r3, #1
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d021      	beq.n	8006d5e <checkAktifCalisma+0x1672>
 8006d1a:	4b18      	ldr	r3, [pc, #96]	; (8006d7c <checkAktifCalisma+0x1690>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	f083 0301 	eor.w	r3, r3, #1
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01a      	beq.n	8006d5e <checkAktifCalisma+0x1672>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006d28:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <checkAktifCalisma+0x1694>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	f083 0301 	eor.w	r3, r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d013      	beq.n	8006d5e <checkAktifCalisma+0x1672>
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <checkAktifCalisma+0x1698>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	f083 0301 	eor.w	r3, r3, #1
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00c      	beq.n	8006d5e <checkAktifCalisma+0x1672>
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <checkAktifCalisma+0x169c>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f083 0301 	eor.w	r3, r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <checkAktifCalisma+0x1672>

					hataVar=0;
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <checkAktifCalisma+0x1684>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006d58:	2007      	movs	r0, #7
 8006d5a:	f7fd fb75 	bl	8004448 <lcdUpdate>
				}


				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8006d5e:	bf00      	nop
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000cd9 	.word	0x20000cd9
 8006d68:	20000c60 	.word	0x20000c60
 8006d6c:	20000c74 	.word	0x20000c74
 8006d70:	20000cd8 	.word	0x20000cd8
 8006d74:	20000cd3 	.word	0x20000cd3
 8006d78:	20000cd4 	.word	0x20000cd4
 8006d7c:	20000ce1 	.word	0x20000ce1
 8006d80:	20000ce2 	.word	0x20000ce2
 8006d84:	20000ce3 	.word	0x20000ce3
 8006d88:	20000cd2 	.word	0x20000cd2

08006d8c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006d90:	4b8b      	ldr	r3, [pc, #556]	; (8006fc0 <checkDemoModCalisma+0x234>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	f040 8229 	bne.w	80071ec <checkDemoModCalisma+0x460>
 8006d9a:	4b8a      	ldr	r3, [pc, #552]	; (8006fc4 <checkDemoModCalisma+0x238>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8224 	beq.w	80071ec <checkDemoModCalisma+0x460>
 8006da4:	4b88      	ldr	r3, [pc, #544]	; (8006fc8 <checkDemoModCalisma+0x23c>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 821f 	bne.w	80071ec <checkDemoModCalisma+0x460>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006dae:	2102      	movs	r1, #2
 8006db0:	4886      	ldr	r0, [pc, #536]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006db2:	f001 fd61 	bl	8008878 <HAL_GPIO_ReadPin>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d11d      	bne.n	8006df8 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8006dbc:	4b84      	ldr	r3, [pc, #528]	; (8006fd0 <checkDemoModCalisma+0x244>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	f083 0301 	eor.w	r3, r3, #1
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d016      	beq.n	8006df8 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8006dca:	4b82      	ldr	r3, [pc, #520]	; (8006fd4 <checkDemoModCalisma+0x248>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f083 0301 	eor.w	r3, r3, #1
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00f      	beq.n	8006df8 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8006dd8:	4b7f      	ldr	r3, [pc, #508]	; (8006fd8 <checkDemoModCalisma+0x24c>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f083 0301 	eor.w	r3, r3, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d008      	beq.n	8006df8 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006de6:	2201      	movs	r2, #1
 8006de8:	2104      	movs	r1, #4
 8006dea:	487c      	ldr	r0, [pc, #496]	; (8006fdc <checkDemoModCalisma+0x250>)
 8006dec:	f001 fd5b 	bl	80088a6 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006df0:	4b7b      	ldr	r3, [pc, #492]	; (8006fe0 <checkDemoModCalisma+0x254>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	e00e      	b.n	8006e16 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006df8:	2102      	movs	r1, #2
 8006dfa:	4874      	ldr	r0, [pc, #464]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006dfc:	f001 fd3c 	bl	8008878 <HAL_GPIO_ReadPin>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d107      	bne.n	8006e16 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006e06:	2200      	movs	r2, #0
 8006e08:	2104      	movs	r1, #4
 8006e0a:	4874      	ldr	r0, [pc, #464]	; (8006fdc <checkDemoModCalisma+0x250>)
 8006e0c:	f001 fd4b 	bl	80088a6 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006e10:	4b73      	ldr	r3, [pc, #460]	; (8006fe0 <checkDemoModCalisma+0x254>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006e16:	4b72      	ldr	r3, [pc, #456]	; (8006fe0 <checkDemoModCalisma+0x254>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <checkDemoModCalisma+0xaa>
 8006e1e:	4b6d      	ldr	r3, [pc, #436]	; (8006fd4 <checkDemoModCalisma+0x248>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d107      	bne.n	8006e36 <checkDemoModCalisma+0xaa>
 8006e26:	4b6c      	ldr	r3, [pc, #432]	; (8006fd8 <checkDemoModCalisma+0x24c>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <checkDemoModCalisma+0xaa>
 8006e2e:	4b68      	ldr	r3, [pc, #416]	; (8006fd0 <checkDemoModCalisma+0x244>)
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00c      	beq.n	8006e50 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006e36:	2201      	movs	r2, #1
 8006e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e3c:	4867      	ldr	r0, [pc, #412]	; (8006fdc <checkDemoModCalisma+0x250>)
 8006e3e:	f001 fd32 	bl	80088a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006e42:	2201      	movs	r2, #1
 8006e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e48:	4864      	ldr	r0, [pc, #400]	; (8006fdc <checkDemoModCalisma+0x250>)
 8006e4a:	f001 fd2c 	bl	80088a6 <HAL_GPIO_WritePin>
 8006e4e:	e00b      	b.n	8006e68 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006e50:	2200      	movs	r2, #0
 8006e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e56:	4861      	ldr	r0, [pc, #388]	; (8006fdc <checkDemoModCalisma+0x250>)
 8006e58:	f001 fd25 	bl	80088a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e62:	485e      	ldr	r0, [pc, #376]	; (8006fdc <checkDemoModCalisma+0x250>)
 8006e64:	f001 fd1f 	bl	80088a6 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e68:	2102      	movs	r1, #2
 8006e6a:	4858      	ldr	r0, [pc, #352]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006e6c:	f001 fd04 	bl	8008878 <HAL_GPIO_ReadPin>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d10d      	bne.n	8006e92 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e7a:	4854      	ldr	r0, [pc, #336]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006e7c:	f001 fcfc 	bl	8008878 <HAL_GPIO_ReadPin>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d105      	bne.n	8006e92 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8006e86:	4b56      	ldr	r3, [pc, #344]	; (8006fe0 <checkDemoModCalisma+0x254>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f083 0301 	eor.w	r3, r3, #1
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e92:	2102      	movs	r1, #2
 8006e94:	484d      	ldr	r0, [pc, #308]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006e96:	f001 fcef 	bl	8008878 <HAL_GPIO_ReadPin>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d125      	bne.n	8006eec <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ea4:	4849      	ldr	r0, [pc, #292]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006ea6:	f001 fce7 	bl	8008878 <HAL_GPIO_ReadPin>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d11d      	bne.n	8006eec <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8006eb0:	4b4b      	ldr	r3, [pc, #300]	; (8006fe0 <checkDemoModCalisma+0x254>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f083 0301 	eor.w	r3, r3, #1
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d016      	beq.n	8006eec <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8006ebe:	4b44      	ldr	r3, [pc, #272]	; (8006fd0 <checkDemoModCalisma+0x244>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f083 0301 	eor.w	r3, r3, #1
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00f      	beq.n	8006eec <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8006ecc:	4b42      	ldr	r3, [pc, #264]	; (8006fd8 <checkDemoModCalisma+0x24c>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f083 0301 	eor.w	r3, r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d008      	beq.n	8006eec <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006eda:	2201      	movs	r2, #1
 8006edc:	2120      	movs	r1, #32
 8006ede:	483b      	ldr	r0, [pc, #236]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006ee0:	f001 fce1 	bl	80088a6 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006ee4:	4b3b      	ldr	r3, [pc, #236]	; (8006fd4 <checkDemoModCalisma+0x248>)
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e007      	b.n	8006efc <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006eec:	2200      	movs	r2, #0
 8006eee:	2120      	movs	r1, #32
 8006ef0:	4836      	ldr	r0, [pc, #216]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006ef2:	f001 fcd8 	bl	80088a6 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006ef6:	4b37      	ldr	r3, [pc, #220]	; (8006fd4 <checkDemoModCalisma+0x248>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006efc:	2102      	movs	r1, #2
 8006efe:	4833      	ldr	r0, [pc, #204]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006f00:	f001 fcba 	bl	8008878 <HAL_GPIO_ReadPin>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d125      	bne.n	8006f56 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f0e:	482f      	ldr	r0, [pc, #188]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006f10:	f001 fcb2 	bl	8008878 <HAL_GPIO_ReadPin>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d11d      	bne.n	8006f56 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8006f1a:	4b31      	ldr	r3, [pc, #196]	; (8006fe0 <checkDemoModCalisma+0x254>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f083 0301 	eor.w	r3, r3, #1
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d016      	beq.n	8006f56 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8006f28:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <checkDemoModCalisma+0x248>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f083 0301 	eor.w	r3, r3, #1
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00f      	beq.n	8006f56 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8006f36:	4b26      	ldr	r3, [pc, #152]	; (8006fd0 <checkDemoModCalisma+0x244>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	f083 0301 	eor.w	r3, r3, #1
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006f44:	2201      	movs	r2, #1
 8006f46:	2110      	movs	r1, #16
 8006f48:	4820      	ldr	r0, [pc, #128]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006f4a:	f001 fcac 	bl	80088a6 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006f4e:	4b22      	ldr	r3, [pc, #136]	; (8006fd8 <checkDemoModCalisma+0x24c>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	e007      	b.n	8006f66 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006f56:	2200      	movs	r2, #0
 8006f58:	2110      	movs	r1, #16
 8006f5a:	481c      	ldr	r0, [pc, #112]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006f5c:	f001 fca3 	bl	80088a6 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006f60:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <checkDemoModCalisma+0x24c>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006f66:	2104      	movs	r1, #4
 8006f68:	4818      	ldr	r0, [pc, #96]	; (8006fcc <checkDemoModCalisma+0x240>)
 8006f6a:	f001 fc85 	bl	8008878 <HAL_GPIO_ReadPin>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d139      	bne.n	8006fe8 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8006f74:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <checkDemoModCalisma+0x254>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f083 0301 	eor.w	r3, r3, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d032      	beq.n	8006fe8 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8006f82:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <checkDemoModCalisma+0x24c>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	f083 0301 	eor.w	r3, r3, #1
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d02b      	beq.n	8006fe8 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8006f90:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <checkDemoModCalisma+0x248>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f083 0301 	eor.w	r3, r3, #1
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d024      	beq.n	8006fe8 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	2102      	movs	r1, #2
 8006fa2:	480e      	ldr	r0, [pc, #56]	; (8006fdc <checkDemoModCalisma+0x250>)
 8006fa4:	f001 fc7f 	bl	80088a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006fa8:	2201      	movs	r2, #1
 8006faa:	2101      	movs	r1, #1
 8006fac:	480b      	ldr	r0, [pc, #44]	; (8006fdc <checkDemoModCalisma+0x250>)
 8006fae:	f001 fc7a 	bl	80088a6 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <checkDemoModCalisma+0x244>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <checkDemoModCalisma+0x258>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e027      	b.n	8007010 <checkDemoModCalisma+0x284>
 8006fc0:	20000ca2 	.word	0x20000ca2
 8006fc4:	20000cd5 	.word	0x20000cd5
 8006fc8:	20000ca1 	.word	0x20000ca1
 8006fcc:	40011000 	.word	0x40011000
 8006fd0:	20000cdc 	.word	0x20000cdc
 8006fd4:	20000cdd 	.word	0x20000cdd
 8006fd8:	20000cde 	.word	0x20000cde
 8006fdc:	40010c00 	.word	0x40010c00
 8006fe0:	20000cdb 	.word	0x20000cdb
 8006fe4:	20000cc1 	.word	0x20000cc1
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006fe8:	2104      	movs	r1, #4
 8006fea:	48a0      	ldr	r0, [pc, #640]	; (800726c <checkDemoModCalisma+0x4e0>)
 8006fec:	f001 fc44 	bl	8008878 <HAL_GPIO_ReadPin>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10c      	bne.n	8007010 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	489d      	ldr	r0, [pc, #628]	; (8007270 <checkDemoModCalisma+0x4e4>)
 8006ffc:	f001 fc53 	bl	80088a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007000:	2200      	movs	r2, #0
 8007002:	2101      	movs	r1, #1
 8007004:	489a      	ldr	r0, [pc, #616]	; (8007270 <checkDemoModCalisma+0x4e4>)
 8007006:	f001 fc4e 	bl	80088a6 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 800700a:	4b9a      	ldr	r3, [pc, #616]	; (8007274 <checkDemoModCalisma+0x4e8>)
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007010:	2104      	movs	r1, #4
 8007012:	4896      	ldr	r0, [pc, #600]	; (800726c <checkDemoModCalisma+0x4e0>)
 8007014:	f001 fc30 	bl	8008878 <HAL_GPIO_ReadPin>
 8007018:	4603      	mov	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d10d      	bne.n	800703a <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800701e:	2201      	movs	r2, #1
 8007020:	2180      	movs	r1, #128	; 0x80
 8007022:	4895      	ldr	r0, [pc, #596]	; (8007278 <checkDemoModCalisma+0x4ec>)
 8007024:	f001 fc3f 	bl	80088a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007028:	2201      	movs	r2, #1
 800702a:	2120      	movs	r1, #32
 800702c:	4892      	ldr	r0, [pc, #584]	; (8007278 <checkDemoModCalisma+0x4ec>)
 800702e:	f001 fc3a 	bl	80088a6 <HAL_GPIO_WritePin>
					timer3 = millis;
 8007032:	4b92      	ldr	r3, [pc, #584]	; (800727c <checkDemoModCalisma+0x4f0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a92      	ldr	r2, [pc, #584]	; (8007280 <checkDemoModCalisma+0x4f4>)
 8007038:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 800703a:	4b90      	ldr	r3, [pc, #576]	; (800727c <checkDemoModCalisma+0x4f0>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b90      	ldr	r3, [pc, #576]	; (8007280 <checkDemoModCalisma+0x4f4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b04      	cmp	r3, #4
 8007046:	d909      	bls.n	800705c <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007048:	2200      	movs	r2, #0
 800704a:	2180      	movs	r1, #128	; 0x80
 800704c:	488a      	ldr	r0, [pc, #552]	; (8007278 <checkDemoModCalisma+0x4ec>)
 800704e:	f001 fc2a 	bl	80088a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007052:	2200      	movs	r2, #0
 8007054:	2120      	movs	r1, #32
 8007056:	4888      	ldr	r0, [pc, #544]	; (8007278 <checkDemoModCalisma+0x4ec>)
 8007058:	f001 fc25 	bl	80088a6 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800705c:	2102      	movs	r1, #2
 800705e:	4883      	ldr	r0, [pc, #524]	; (800726c <checkDemoModCalisma+0x4e0>)
 8007060:	f001 fc0a 	bl	8008878 <HAL_GPIO_ReadPin>
 8007064:	4603      	mov	r3, r0
 8007066:	2b01      	cmp	r3, #1
 8007068:	d108      	bne.n	800707c <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800706a:	2201      	movs	r2, #1
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	4882      	ldr	r0, [pc, #520]	; (8007278 <checkDemoModCalisma+0x4ec>)
 8007070:	f001 fc19 	bl	80088a6 <HAL_GPIO_WritePin>
					timer3 = millis;
 8007074:	4b81      	ldr	r3, [pc, #516]	; (800727c <checkDemoModCalisma+0x4f0>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a81      	ldr	r2, [pc, #516]	; (8007280 <checkDemoModCalisma+0x4f4>)
 800707a:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 800707c:	4b7f      	ldr	r3, [pc, #508]	; (800727c <checkDemoModCalisma+0x4f0>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4b7f      	ldr	r3, [pc, #508]	; (8007280 <checkDemoModCalisma+0x4f4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b04      	cmp	r3, #4
 8007088:	d904      	bls.n	8007094 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800708a:	2200      	movs	r2, #0
 800708c:	2140      	movs	r1, #64	; 0x40
 800708e:	487a      	ldr	r0, [pc, #488]	; (8007278 <checkDemoModCalisma+0x4ec>)
 8007090:	f001 fc09 	bl	80088a6 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007094:	4b7b      	ldr	r3, [pc, #492]	; (8007284 <checkDemoModCalisma+0x4f8>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d058      	beq.n	800714e <checkDemoModCalisma+0x3c2>
 800709c:	4b7a      	ldr	r3, [pc, #488]	; (8007288 <checkDemoModCalisma+0x4fc>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d054      	beq.n	800714e <checkDemoModCalisma+0x3c2>
					//mesajYazildi=0;
					calismaSayisi1=calismaSayisi1+1;
 80070a4:	4b79      	ldr	r3, [pc, #484]	; (800728c <checkDemoModCalisma+0x500>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	3301      	adds	r3, #1
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	4b77      	ldr	r3, [pc, #476]	; (800728c <checkDemoModCalisma+0x500>)
 80070ae:	701a      	strb	r2, [r3, #0]

					if(calismaSayisi1>9) {
 80070b0:	4b76      	ldr	r3, [pc, #472]	; (800728c <checkDemoModCalisma+0x500>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b09      	cmp	r3, #9
 80070b6:	d908      	bls.n	80070ca <checkDemoModCalisma+0x33e>
						calismaSayisi1=0;
 80070b8:	4b74      	ldr	r3, [pc, #464]	; (800728c <checkDemoModCalisma+0x500>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
						calismaSayisi10=calismaSayisi10+1;
 80070be:	4b74      	ldr	r3, [pc, #464]	; (8007290 <checkDemoModCalisma+0x504>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	4b72      	ldr	r3, [pc, #456]	; (8007290 <checkDemoModCalisma+0x504>)
 80070c8:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi10>9) {
 80070ca:	4b71      	ldr	r3, [pc, #452]	; (8007290 <checkDemoModCalisma+0x504>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	d908      	bls.n	80070e4 <checkDemoModCalisma+0x358>
						calismaSayisi10=0;
 80070d2:	4b6f      	ldr	r3, [pc, #444]	; (8007290 <checkDemoModCalisma+0x504>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
						calismaSayisi100=calismaSayisi100+1;
 80070d8:	4b6e      	ldr	r3, [pc, #440]	; (8007294 <checkDemoModCalisma+0x508>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	3301      	adds	r3, #1
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	4b6c      	ldr	r3, [pc, #432]	; (8007294 <checkDemoModCalisma+0x508>)
 80070e2:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi100>9) {
 80070e4:	4b6b      	ldr	r3, [pc, #428]	; (8007294 <checkDemoModCalisma+0x508>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b09      	cmp	r3, #9
 80070ea:	d908      	bls.n	80070fe <checkDemoModCalisma+0x372>
						calismaSayisi100=0;
 80070ec:	4b69      	ldr	r3, [pc, #420]	; (8007294 <checkDemoModCalisma+0x508>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
						calismaSayisi1000=calismaSayisi1000+1;
 80070f2:	4b69      	ldr	r3, [pc, #420]	; (8007298 <checkDemoModCalisma+0x50c>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	3301      	adds	r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	4b67      	ldr	r3, [pc, #412]	; (8007298 <checkDemoModCalisma+0x50c>)
 80070fc:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi1000>9) {
 80070fe:	4b66      	ldr	r3, [pc, #408]	; (8007298 <checkDemoModCalisma+0x50c>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b09      	cmp	r3, #9
 8007104:	d908      	bls.n	8007118 <checkDemoModCalisma+0x38c>
						calismaSayisi1000=0;
 8007106:	4b64      	ldr	r3, [pc, #400]	; (8007298 <checkDemoModCalisma+0x50c>)
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
						calismaSayisi10000=calismaSayisi10000+1;
 800710c:	4b63      	ldr	r3, [pc, #396]	; (800729c <checkDemoModCalisma+0x510>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	3301      	adds	r3, #1
 8007112:	b2da      	uxtb	r2, r3
 8007114:	4b61      	ldr	r3, [pc, #388]	; (800729c <checkDemoModCalisma+0x510>)
 8007116:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 8007118:	4b60      	ldr	r3, [pc, #384]	; (800729c <checkDemoModCalisma+0x510>)
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	4b60      	ldr	r3, [pc, #384]	; (80072a0 <checkDemoModCalisma+0x514>)
 800711e:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 8007122:	4b5d      	ldr	r3, [pc, #372]	; (8007298 <checkDemoModCalisma+0x50c>)
 8007124:	781a      	ldrb	r2, [r3, #0]
 8007126:	4b5e      	ldr	r3, [pc, #376]	; (80072a0 <checkDemoModCalisma+0x514>)
 8007128:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 800712a:	4b5a      	ldr	r3, [pc, #360]	; (8007294 <checkDemoModCalisma+0x508>)
 800712c:	781a      	ldrb	r2, [r3, #0]
 800712e:	4b5c      	ldr	r3, [pc, #368]	; (80072a0 <checkDemoModCalisma+0x514>)
 8007130:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 8007132:	4b57      	ldr	r3, [pc, #348]	; (8007290 <checkDemoModCalisma+0x504>)
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	4b5a      	ldr	r3, [pc, #360]	; (80072a0 <checkDemoModCalisma+0x514>)
 8007138:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 800713a:	4b54      	ldr	r3, [pc, #336]	; (800728c <checkDemoModCalisma+0x500>)
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	4b58      	ldr	r3, [pc, #352]	; (80072a0 <checkDemoModCalisma+0x514>)
 8007140:	771a      	strb	r2, [r3, #28]
					hafizaYaz=1;
 8007142:	4b58      	ldr	r3, [pc, #352]	; (80072a4 <checkDemoModCalisma+0x518>)
 8007144:	2201      	movs	r2, #1
 8007146:	701a      	strb	r2, [r3, #0]
			   		//mesajYazildi=0;
					demoCalismaSayisiYar=0;
 8007148:	4b4f      	ldr	r3, [pc, #316]	; (8007288 <checkDemoModCalisma+0x4fc>)
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 800714e:	4b56      	ldr	r3, [pc, #344]	; (80072a8 <checkDemoModCalisma+0x51c>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 8087 	bne.w	8007266 <checkDemoModCalisma+0x4da>
					lcd_print(2,1,"Cycle      ");
 8007158:	4a54      	ldr	r2, [pc, #336]	; (80072ac <checkDemoModCalisma+0x520>)
 800715a:	2101      	movs	r1, #1
 800715c:	2002      	movs	r0, #2
 800715e:	f7f9 f9ae 	bl	80004be <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8007162:	4a53      	ldr	r2, [pc, #332]	; (80072b0 <checkDemoModCalisma+0x524>)
 8007164:	2101      	movs	r1, #1
 8007166:	2001      	movs	r0, #1
 8007168:	f7f9 f9a9 	bl	80004be <lcd_print>
					itoa(calismaSayisi10000, snum, 10);
 800716c:	4b4b      	ldr	r3, [pc, #300]	; (800729c <checkDemoModCalisma+0x510>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	220a      	movs	r2, #10
 8007172:	4950      	ldr	r1, [pc, #320]	; (80072b4 <checkDemoModCalisma+0x528>)
 8007174:	4618      	mov	r0, r3
 8007176:	f005 fef3 	bl	800cf60 <itoa>
					lcd_print(2,12,snum);
 800717a:	4a4e      	ldr	r2, [pc, #312]	; (80072b4 <checkDemoModCalisma+0x528>)
 800717c:	210c      	movs	r1, #12
 800717e:	2002      	movs	r0, #2
 8007180:	f7f9 f99d 	bl	80004be <lcd_print>
					itoa(calismaSayisi1000, snum, 10);
 8007184:	4b44      	ldr	r3, [pc, #272]	; (8007298 <checkDemoModCalisma+0x50c>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	220a      	movs	r2, #10
 800718a:	494a      	ldr	r1, [pc, #296]	; (80072b4 <checkDemoModCalisma+0x528>)
 800718c:	4618      	mov	r0, r3
 800718e:	f005 fee7 	bl	800cf60 <itoa>
					lcd_print(2,13,snum);
 8007192:	4a48      	ldr	r2, [pc, #288]	; (80072b4 <checkDemoModCalisma+0x528>)
 8007194:	210d      	movs	r1, #13
 8007196:	2002      	movs	r0, #2
 8007198:	f7f9 f991 	bl	80004be <lcd_print>
					itoa(calismaSayisi100, snum, 10);
 800719c:	4b3d      	ldr	r3, [pc, #244]	; (8007294 <checkDemoModCalisma+0x508>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	220a      	movs	r2, #10
 80071a2:	4944      	ldr	r1, [pc, #272]	; (80072b4 <checkDemoModCalisma+0x528>)
 80071a4:	4618      	mov	r0, r3
 80071a6:	f005 fedb 	bl	800cf60 <itoa>
					lcd_print(2,14,snum);
 80071aa:	4a42      	ldr	r2, [pc, #264]	; (80072b4 <checkDemoModCalisma+0x528>)
 80071ac:	210e      	movs	r1, #14
 80071ae:	2002      	movs	r0, #2
 80071b0:	f7f9 f985 	bl	80004be <lcd_print>
					itoa(calismaSayisi10, snum, 10);
 80071b4:	4b36      	ldr	r3, [pc, #216]	; (8007290 <checkDemoModCalisma+0x504>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	220a      	movs	r2, #10
 80071ba:	493e      	ldr	r1, [pc, #248]	; (80072b4 <checkDemoModCalisma+0x528>)
 80071bc:	4618      	mov	r0, r3
 80071be:	f005 fecf 	bl	800cf60 <itoa>
					lcd_print(2,15,snum);
 80071c2:	4a3c      	ldr	r2, [pc, #240]	; (80072b4 <checkDemoModCalisma+0x528>)
 80071c4:	210f      	movs	r1, #15
 80071c6:	2002      	movs	r0, #2
 80071c8:	f7f9 f979 	bl	80004be <lcd_print>
					itoa(calismaSayisi1, snum, 10);
 80071cc:	4b2f      	ldr	r3, [pc, #188]	; (800728c <checkDemoModCalisma+0x500>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	220a      	movs	r2, #10
 80071d2:	4938      	ldr	r1, [pc, #224]	; (80072b4 <checkDemoModCalisma+0x528>)
 80071d4:	4618      	mov	r0, r3
 80071d6:	f005 fec3 	bl	800cf60 <itoa>
					lcd_print(2,16,snum);
 80071da:	4a36      	ldr	r2, [pc, #216]	; (80072b4 <checkDemoModCalisma+0x528>)
 80071dc:	2110      	movs	r1, #16
 80071de:	2002      	movs	r0, #2
 80071e0:	f7f9 f96d 	bl	80004be <lcd_print>
					mesajYazildi=1;
 80071e4:	4b34      	ldr	r3, [pc, #208]	; (80072b8 <checkDemoModCalisma+0x52c>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 80071ea:	e03c      	b.n	8007266 <checkDemoModCalisma+0x4da>
				}
			} else if(demoMode==1 || menuGiris==1) {
 80071ec:	4b33      	ldr	r3, [pc, #204]	; (80072bc <checkDemoModCalisma+0x530>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d003      	beq.n	80071fc <checkDemoModCalisma+0x470>
 80071f4:	4b2c      	ldr	r3, [pc, #176]	; (80072a8 <checkDemoModCalisma+0x51c>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d134      	bne.n	8007266 <checkDemoModCalisma+0x4da>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80071fc:	2200      	movs	r2, #0
 80071fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007202:	481b      	ldr	r0, [pc, #108]	; (8007270 <checkDemoModCalisma+0x4e4>)
 8007204:	f001 fb4f 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007208:	2200      	movs	r2, #0
 800720a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800720e:	4818      	ldr	r0, [pc, #96]	; (8007270 <checkDemoModCalisma+0x4e4>)
 8007210:	f001 fb49 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007214:	2200      	movs	r2, #0
 8007216:	2104      	movs	r1, #4
 8007218:	4815      	ldr	r0, [pc, #84]	; (8007270 <checkDemoModCalisma+0x4e4>)
 800721a:	f001 fb44 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800721e:	2200      	movs	r2, #0
 8007220:	2102      	movs	r1, #2
 8007222:	4813      	ldr	r0, [pc, #76]	; (8007270 <checkDemoModCalisma+0x4e4>)
 8007224:	f001 fb3f 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007228:	2200      	movs	r2, #0
 800722a:	2101      	movs	r1, #1
 800722c:	4810      	ldr	r0, [pc, #64]	; (8007270 <checkDemoModCalisma+0x4e4>)
 800722e:	f001 fb3a 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007232:	2200      	movs	r2, #0
 8007234:	2120      	movs	r1, #32
 8007236:	480d      	ldr	r0, [pc, #52]	; (800726c <checkDemoModCalisma+0x4e0>)
 8007238:	f001 fb35 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800723c:	2200      	movs	r2, #0
 800723e:	2110      	movs	r1, #16
 8007240:	480a      	ldr	r0, [pc, #40]	; (800726c <checkDemoModCalisma+0x4e0>)
 8007242:	f001 fb30 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007246:	2200      	movs	r2, #0
 8007248:	2180      	movs	r1, #128	; 0x80
 800724a:	480b      	ldr	r0, [pc, #44]	; (8007278 <checkDemoModCalisma+0x4ec>)
 800724c:	f001 fb2b 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007250:	2200      	movs	r2, #0
 8007252:	2140      	movs	r1, #64	; 0x40
 8007254:	4808      	ldr	r0, [pc, #32]	; (8007278 <checkDemoModCalisma+0x4ec>)
 8007256:	f001 fb26 	bl	80088a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800725a:	2200      	movs	r2, #0
 800725c:	2120      	movs	r1, #32
 800725e:	4806      	ldr	r0, [pc, #24]	; (8007278 <checkDemoModCalisma+0x4ec>)
 8007260:	f001 fb21 	bl	80088a6 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8007264:	e7ff      	b.n	8007266 <checkDemoModCalisma+0x4da>
 8007266:	bf00      	nop
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40011000 	.word	0x40011000
 8007270:	40010c00 	.word	0x40010c00
 8007274:	20000cdc 	.word	0x20000cdc
 8007278:	40010800 	.word	0x40010800
 800727c:	20000c60 	.word	0x20000c60
 8007280:	20000c70 	.word	0x20000c70
 8007284:	20000cdb 	.word	0x20000cdb
 8007288:	20000cc1 	.word	0x20000cc1
 800728c:	20000c81 	.word	0x20000c81
 8007290:	20000c82 	.word	0x20000c82
 8007294:	20000941 	.word	0x20000941
 8007298:	20000942 	.word	0x20000942
 800729c:	20000c83 	.word	0x20000c83
 80072a0:	20000c18 	.word	0x20000c18
 80072a4:	20000caf 	.word	0x20000caf
 80072a8:	20000ca1 	.word	0x20000ca1
 80072ac:	0800e7d0 	.word	0x0800e7d0
 80072b0:	0800e7dc 	.word	0x0800e7dc
 80072b4:	20000c58 	.word	0x20000c58
 80072b8:	20000cb7 	.word	0x20000cb7
 80072bc:	20000ca2 	.word	0x20000ca2

080072c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3301      	adds	r3, #1
 80072ce:	4a03      	ldr	r2, [pc, #12]	; (80072dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80072d0:	6013      	str	r3, [r2, #0]
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr
 80072dc:	20000c60 	.word	0x20000c60

080072e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80072e0:	b5b0      	push	{r4, r5, r7, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80072e6:	f000 fc95 	bl	8007c14 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80072ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072ee:	f000 fcf3 	bl	8007cd8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80072f2:	f000 f8bd 	bl	8007470 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80072f6:	f000 f9df 	bl	80076b8 <MX_GPIO_Init>
  MX_CAN_Init();
 80072fa:	f000 f8ff 	bl	80074fc <MX_CAN_Init>
  MX_I2C1_Init();
 80072fe:	f000 f931 	bl	8007564 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007302:	f000 f95d 	bl	80075c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007306:	f000 f9ad 	bl	8007664 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800730a:	2201      	movs	r2, #1
 800730c:	2140      	movs	r1, #64	; 0x40
 800730e:	484b      	ldr	r0, [pc, #300]	; (800743c <main+0x15c>)
 8007310:	f001 fac9 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007314:	2201      	movs	r2, #1
 8007316:	2180      	movs	r1, #128	; 0x80
 8007318:	4848      	ldr	r0, [pc, #288]	; (800743c <main+0x15c>)
 800731a:	f001 fac4 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800731e:	200a      	movs	r0, #10
 8007320:	f000 fcda 	bl	8007cd8 <HAL_Delay>
  lcd_init();
 8007324:	f7f9 f899 	bl	800045a <lcd_init>
  HAL_Delay(10);
 8007328:	200a      	movs	r0, #10
 800732a:	f000 fcd5 	bl	8007cd8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800732e:	4844      	ldr	r0, [pc, #272]	; (8007440 <main+0x160>)
 8007330:	f003 f96c 	bl	800a60c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007334:	bf00      	nop
 8007336:	4843      	ldr	r0, [pc, #268]	; (8007444 <main+0x164>)
 8007338:	f002 f8c7 	bl	80094ca <HAL_I2C_GetError>
 800733c:	4603      	mov	r3, r0
 800733e:	2b04      	cmp	r3, #4
 8007340:	d0f9      	beq.n	8007336 <main+0x56>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007342:	bf00      	nop
 8007344:	483f      	ldr	r0, [pc, #252]	; (8007444 <main+0x164>)
 8007346:	f002 f8b3 	bl	80094b0 <HAL_I2C_GetState>
 800734a:	4603      	mov	r3, r0
 800734c:	2b20      	cmp	r3, #32
 800734e:	d1f9      	bne.n	8007344 <main+0x64>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007350:	2200      	movs	r2, #0
 8007352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007356:	4839      	ldr	r0, [pc, #228]	; (800743c <main+0x15c>)
 8007358:	f001 faa5 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800735c:	2200      	movs	r2, #0
 800735e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007362:	4836      	ldr	r0, [pc, #216]	; (800743c <main+0x15c>)
 8007364:	f001 fa9f 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007368:	2200      	movs	r2, #0
 800736a:	2104      	movs	r1, #4
 800736c:	4833      	ldr	r0, [pc, #204]	; (800743c <main+0x15c>)
 800736e:	f001 fa9a 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007372:	2200      	movs	r2, #0
 8007374:	2102      	movs	r1, #2
 8007376:	4831      	ldr	r0, [pc, #196]	; (800743c <main+0x15c>)
 8007378:	f001 fa95 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800737c:	2200      	movs	r2, #0
 800737e:	2101      	movs	r1, #1
 8007380:	482e      	ldr	r0, [pc, #184]	; (800743c <main+0x15c>)
 8007382:	f001 fa90 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007386:	2200      	movs	r2, #0
 8007388:	2120      	movs	r1, #32
 800738a:	482f      	ldr	r0, [pc, #188]	; (8007448 <main+0x168>)
 800738c:	f001 fa8b 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007390:	2200      	movs	r2, #0
 8007392:	2110      	movs	r1, #16
 8007394:	482c      	ldr	r0, [pc, #176]	; (8007448 <main+0x168>)
 8007396:	f001 fa86 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800739a:	2200      	movs	r2, #0
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	482b      	ldr	r0, [pc, #172]	; (800744c <main+0x16c>)
 80073a0:	f001 fa81 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80073a4:	2200      	movs	r2, #0
 80073a6:	2140      	movs	r1, #64	; 0x40
 80073a8:	4828      	ldr	r0, [pc, #160]	; (800744c <main+0x16c>)
 80073aa:	f001 fa7c 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80073ae:	2200      	movs	r2, #0
 80073b0:	2120      	movs	r1, #32
 80073b2:	4826      	ldr	r0, [pc, #152]	; (800744c <main+0x16c>)
 80073b4:	f001 fa77 	bl	80088a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80073b8:	2200      	movs	r2, #0
 80073ba:	2110      	movs	r1, #16
 80073bc:	4823      	ldr	r0, [pc, #140]	; (800744c <main+0x16c>)
 80073be:	f001 fa72 	bl	80088a6 <HAL_GPIO_WritePin>

  i2cTest();
 80073c2:	f7fd fced 	bl	8004da0 <i2cTest>
  HAL_Delay(100);
 80073c6:	2064      	movs	r0, #100	; 0x64
 80073c8:	f000 fc86 	bl	8007cd8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80073cc:	4a20      	ldr	r2, [pc, #128]	; (8007450 <main+0x170>)
 80073ce:	2101      	movs	r1, #1
 80073d0:	2001      	movs	r0, #1
 80073d2:	f7f9 f874 	bl	80004be <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80073d6:	4a1f      	ldr	r2, [pc, #124]	; (8007454 <main+0x174>)
 80073d8:	2101      	movs	r1, #1
 80073da:	2002      	movs	r0, #2
 80073dc:	f7f9 f86f 	bl	80004be <lcd_print>
  HAL_Delay(1000);
 80073e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073e4:	f000 fc78 	bl	8007cd8 <HAL_Delay>
  lcd_clear();
 80073e8:	f7f9 f87e 	bl	80004e8 <lcd_clear>

  eepromKontrol();
 80073ec:	f7fd f962 	bl	80046b4 <eepromKontrol>

  resetUSART();
 80073f0:	f7fd fd84 	bl	8004efc <resetUSART>
  lcd_clear();
 80073f4:	f7f9 f878 	bl	80004e8 <lcd_clear>

  backLightTimer = millis;
 80073f8:	4b17      	ldr	r3, [pc, #92]	; (8007458 <main+0x178>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a17      	ldr	r2, [pc, #92]	; (800745c <main+0x17c>)
 80073fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007400:	4b17      	ldr	r3, [pc, #92]	; (8007460 <main+0x180>)
 8007402:	1d3c      	adds	r4, r7, #4
 8007404:	461d      	mov	r5, r3
 8007406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800740a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800740e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f004 fbae 	bl	800bb78 <osThreadCreate>
 800741c:	4603      	mov	r3, r0
 800741e:	4a11      	ldr	r2, [pc, #68]	; (8007464 <main+0x184>)
 8007420:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(mainTask, "mainTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8007422:	2300      	movs	r3, #0
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	2301      	movs	r3, #1
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	2300      	movs	r3, #0
 800742c:	2280      	movs	r2, #128	; 0x80
 800742e:	490e      	ldr	r1, [pc, #56]	; (8007468 <main+0x188>)
 8007430:	480e      	ldr	r0, [pc, #56]	; (800746c <main+0x18c>)
 8007432:	f004 fd0c 	bl	800be4e <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007436:	f004 fb98 	bl	800bb6a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800743a:	e7fe      	b.n	800743a <main+0x15a>
 800743c:	40010c00 	.word	0x40010c00
 8007440:	20000e94 	.word	0x20000e94
 8007444:	20000e40 	.word	0x20000e40
 8007448:	40011000 	.word	0x40011000
 800744c:	40010800 	.word	0x40010800
 8007450:	0800e7f4 	.word	0x0800e7f4
 8007454:	0800e808 	.word	0x0800e808
 8007458:	20000c60 	.word	0x20000c60
 800745c:	20000c7c 	.word	0x20000c7c
 8007460:	0800e834 	.word	0x0800e834
 8007464:	20000f24 	.word	0x20000f24
 8007468:	0800e81c 	.word	0x0800e81c
 800746c:	080051d5 	.word	0x080051d5

08007470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b090      	sub	sp, #64	; 0x40
 8007474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007476:	f107 0318 	add.w	r3, r7, #24
 800747a:	2228      	movs	r2, #40	; 0x28
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f005 fe86 	bl	800d190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007484:	1d3b      	adds	r3, r7, #4
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	605a      	str	r2, [r3, #4]
 800748c:	609a      	str	r2, [r3, #8]
 800748e:	60da      	str	r2, [r3, #12]
 8007490:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007492:	2301      	movs	r3, #1
 8007494:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800749a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800749c:	2300      	movs	r3, #0
 800749e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80074a0:	2301      	movs	r3, #1
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80074a4:	2302      	movs	r3, #2
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80074a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80074ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80074b4:	f107 0318 	add.w	r3, r7, #24
 80074b8:	4618      	mov	r0, r3
 80074ba:	f002 fc47 	bl	8009d4c <HAL_RCC_OscConfig>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80074c4:	f000 f9aa 	bl	800781c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80074c8:	230f      	movs	r3, #15
 80074ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80074cc:	2302      	movs	r3, #2
 80074ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80074d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80074de:	1d3b      	adds	r3, r7, #4
 80074e0:	2102      	movs	r1, #2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f002 feb4 	bl	800a250 <HAL_RCC_ClockConfig>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80074ee:	f000 f995 	bl	800781c <Error_Handler>
  }
}
 80074f2:	bf00      	nop
 80074f4:	3740      	adds	r7, #64	; 0x40
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007500:	4b16      	ldr	r3, [pc, #88]	; (800755c <MX_CAN_Init+0x60>)
 8007502:	4a17      	ldr	r2, [pc, #92]	; (8007560 <MX_CAN_Init+0x64>)
 8007504:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007506:	4b15      	ldr	r3, [pc, #84]	; (800755c <MX_CAN_Init+0x60>)
 8007508:	2210      	movs	r2, #16
 800750a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800750c:	4b13      	ldr	r3, [pc, #76]	; (800755c <MX_CAN_Init+0x60>)
 800750e:	2200      	movs	r2, #0
 8007510:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <MX_CAN_Init+0x60>)
 8007514:	2200      	movs	r2, #0
 8007516:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007518:	4b10      	ldr	r3, [pc, #64]	; (800755c <MX_CAN_Init+0x60>)
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800751e:	4b0f      	ldr	r3, [pc, #60]	; (800755c <MX_CAN_Init+0x60>)
 8007520:	2200      	movs	r2, #0
 8007522:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007524:	4b0d      	ldr	r3, [pc, #52]	; (800755c <MX_CAN_Init+0x60>)
 8007526:	2200      	movs	r2, #0
 8007528:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800752a:	4b0c      	ldr	r3, [pc, #48]	; (800755c <MX_CAN_Init+0x60>)
 800752c:	2200      	movs	r2, #0
 800752e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007530:	4b0a      	ldr	r3, [pc, #40]	; (800755c <MX_CAN_Init+0x60>)
 8007532:	2200      	movs	r2, #0
 8007534:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007536:	4b09      	ldr	r3, [pc, #36]	; (800755c <MX_CAN_Init+0x60>)
 8007538:	2200      	movs	r2, #0
 800753a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <MX_CAN_Init+0x60>)
 800753e:	2200      	movs	r2, #0
 8007540:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007542:	4b06      	ldr	r3, [pc, #24]	; (800755c <MX_CAN_Init+0x60>)
 8007544:	2200      	movs	r2, #0
 8007546:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007548:	4804      	ldr	r0, [pc, #16]	; (800755c <MX_CAN_Init+0x60>)
 800754a:	f000 fbe9 	bl	8007d20 <HAL_CAN_Init>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007554:	f000 f962 	bl	800781c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007558:	bf00      	nop
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000e18 	.word	0x20000e18
 8007560:	40006400 	.word	0x40006400

08007564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007568:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <MX_I2C1_Init+0x50>)
 800756a:	4a13      	ldr	r2, [pc, #76]	; (80075b8 <MX_I2C1_Init+0x54>)
 800756c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800756e:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <MX_I2C1_Init+0x50>)
 8007570:	4a12      	ldr	r2, [pc, #72]	; (80075bc <MX_I2C1_Init+0x58>)
 8007572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007574:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <MX_I2C1_Init+0x50>)
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800757a:	4b0e      	ldr	r3, [pc, #56]	; (80075b4 <MX_I2C1_Init+0x50>)
 800757c:	2200      	movs	r2, #0
 800757e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007580:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <MX_I2C1_Init+0x50>)
 8007582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007588:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <MX_I2C1_Init+0x50>)
 800758a:	2200      	movs	r2, #0
 800758c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800758e:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <MX_I2C1_Init+0x50>)
 8007590:	2200      	movs	r2, #0
 8007592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007594:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <MX_I2C1_Init+0x50>)
 8007596:	2200      	movs	r2, #0
 8007598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800759a:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <MX_I2C1_Init+0x50>)
 800759c:	2200      	movs	r2, #0
 800759e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80075a0:	4804      	ldr	r0, [pc, #16]	; (80075b4 <MX_I2C1_Init+0x50>)
 80075a2:	f001 f9b1 	bl	8008908 <HAL_I2C_Init>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80075ac:	f000 f936 	bl	800781c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80075b0:	bf00      	nop
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000e40 	.word	0x20000e40
 80075b8:	40005400 	.word	0x40005400
 80075bc:	00061a80 	.word	0x00061a80

080075c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80075c6:	f107 0308 	add.w	r3, r7, #8
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	605a      	str	r2, [r3, #4]
 80075d0:	609a      	str	r2, [r3, #8]
 80075d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075d4:	463b      	mov	r3, r7
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80075dc:	4b1f      	ldr	r3, [pc, #124]	; (800765c <MX_TIM1_Init+0x9c>)
 80075de:	4a20      	ldr	r2, [pc, #128]	; (8007660 <MX_TIM1_Init+0xa0>)
 80075e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80075e2:	4b1e      	ldr	r3, [pc, #120]	; (800765c <MX_TIM1_Init+0x9c>)
 80075e4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80075e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075ea:	4b1c      	ldr	r3, [pc, #112]	; (800765c <MX_TIM1_Init+0x9c>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <MX_TIM1_Init+0x9c>)
 80075f2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80075f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075f8:	4b18      	ldr	r3, [pc, #96]	; (800765c <MX_TIM1_Init+0x9c>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80075fe:	4b17      	ldr	r3, [pc, #92]	; (800765c <MX_TIM1_Init+0x9c>)
 8007600:	2200      	movs	r2, #0
 8007602:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007604:	4b15      	ldr	r3, [pc, #84]	; (800765c <MX_TIM1_Init+0x9c>)
 8007606:	2200      	movs	r2, #0
 8007608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800760a:	4814      	ldr	r0, [pc, #80]	; (800765c <MX_TIM1_Init+0x9c>)
 800760c:	f002 ffae 	bl	800a56c <HAL_TIM_Base_Init>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007616:	f000 f901 	bl	800781c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800761a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800761e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	4619      	mov	r1, r3
 8007626:	480d      	ldr	r0, [pc, #52]	; (800765c <MX_TIM1_Init+0x9c>)
 8007628:	f003 f958 	bl	800a8dc <HAL_TIM_ConfigClockSource>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007632:	f000 f8f3 	bl	800781c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007636:	2300      	movs	r3, #0
 8007638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800763a:	2300      	movs	r3, #0
 800763c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800763e:	463b      	mov	r3, r7
 8007640:	4619      	mov	r1, r3
 8007642:	4806      	ldr	r0, [pc, #24]	; (800765c <MX_TIM1_Init+0x9c>)
 8007644:	f003 fb46 	bl	800acd4 <HAL_TIMEx_MasterConfigSynchronization>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800764e:	f000 f8e5 	bl	800781c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007652:	bf00      	nop
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000e94 	.word	0x20000e94
 8007660:	40012c00 	.word	0x40012c00

08007664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007668:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 800766a:	4a12      	ldr	r2, [pc, #72]	; (80076b4 <MX_USART1_UART_Init+0x50>)
 800766c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800766e:	4b10      	ldr	r3, [pc, #64]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 8007670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 8007678:	2200      	movs	r2, #0
 800767a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800767c:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 800767e:	2200      	movs	r2, #0
 8007680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007682:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 8007684:	2200      	movs	r2, #0
 8007686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007688:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 800768a:	220c      	movs	r2, #12
 800768c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800768e:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 8007690:	2200      	movs	r2, #0
 8007692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007694:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 8007696:	2200      	movs	r2, #0
 8007698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800769a:	4805      	ldr	r0, [pc, #20]	; (80076b0 <MX_USART1_UART_Init+0x4c>)
 800769c:	f003 fb98 	bl	800add0 <HAL_UART_Init>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80076a6:	f000 f8b9 	bl	800781c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80076aa:	bf00      	nop
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20000edc 	.word	0x20000edc
 80076b4:	40013800 	.word	0x40013800

080076b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076be:	f107 0310 	add.w	r3, r7, #16
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076cc:	4b4b      	ldr	r3, [pc, #300]	; (80077fc <MX_GPIO_Init+0x144>)
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	4a4a      	ldr	r2, [pc, #296]	; (80077fc <MX_GPIO_Init+0x144>)
 80076d2:	f043 0310 	orr.w	r3, r3, #16
 80076d6:	6193      	str	r3, [r2, #24]
 80076d8:	4b48      	ldr	r3, [pc, #288]	; (80077fc <MX_GPIO_Init+0x144>)
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80076e4:	4b45      	ldr	r3, [pc, #276]	; (80077fc <MX_GPIO_Init+0x144>)
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	4a44      	ldr	r2, [pc, #272]	; (80077fc <MX_GPIO_Init+0x144>)
 80076ea:	f043 0320 	orr.w	r3, r3, #32
 80076ee:	6193      	str	r3, [r2, #24]
 80076f0:	4b42      	ldr	r3, [pc, #264]	; (80077fc <MX_GPIO_Init+0x144>)
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076fc:	4b3f      	ldr	r3, [pc, #252]	; (80077fc <MX_GPIO_Init+0x144>)
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	4a3e      	ldr	r2, [pc, #248]	; (80077fc <MX_GPIO_Init+0x144>)
 8007702:	f043 0304 	orr.w	r3, r3, #4
 8007706:	6193      	str	r3, [r2, #24]
 8007708:	4b3c      	ldr	r3, [pc, #240]	; (80077fc <MX_GPIO_Init+0x144>)
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	607b      	str	r3, [r7, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007714:	4b39      	ldr	r3, [pc, #228]	; (80077fc <MX_GPIO_Init+0x144>)
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	4a38      	ldr	r2, [pc, #224]	; (80077fc <MX_GPIO_Init+0x144>)
 800771a:	f043 0308 	orr.w	r3, r3, #8
 800771e:	6193      	str	r3, [r2, #24]
 8007720:	4b36      	ldr	r3, [pc, #216]	; (80077fc <MX_GPIO_Init+0x144>)
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800772c:	2200      	movs	r2, #0
 800772e:	21f0      	movs	r1, #240	; 0xf0
 8007730:	4833      	ldr	r0, [pc, #204]	; (8007800 <MX_GPIO_Init+0x148>)
 8007732:	f001 f8b8 	bl	80088a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007736:	2200      	movs	r2, #0
 8007738:	f241 0130 	movw	r1, #4144	; 0x1030
 800773c:	4831      	ldr	r0, [pc, #196]	; (8007804 <MX_GPIO_Init+0x14c>)
 800773e:	f001 f8b2 	bl	80088a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007742:	2200      	movs	r2, #0
 8007744:	f640 4107 	movw	r1, #3079	; 0xc07
 8007748:	482f      	ldr	r0, [pc, #188]	; (8007808 <MX_GPIO_Init+0x150>)
 800774a:	f001 f8ac 	bl	80088a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800774e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007752:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007758:	2300      	movs	r3, #0
 800775a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800775c:	f107 0310 	add.w	r3, r7, #16
 8007760:	4619      	mov	r1, r3
 8007762:	4828      	ldr	r0, [pc, #160]	; (8007804 <MX_GPIO_Init+0x14c>)
 8007764:	f000 fe28 	bl	80083b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007768:	f248 130f 	movw	r3, #33039	; 0x810f
 800776c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007772:	2300      	movs	r3, #0
 8007774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007776:	f107 0310 	add.w	r3, r7, #16
 800777a:	4619      	mov	r1, r3
 800777c:	4820      	ldr	r0, [pc, #128]	; (8007800 <MX_GPIO_Init+0x148>)
 800777e:	f000 fe1b 	bl	80083b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007782:	23f0      	movs	r3, #240	; 0xf0
 8007784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007786:	2301      	movs	r3, #1
 8007788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800778e:	2302      	movs	r3, #2
 8007790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007792:	f107 0310 	add.w	r3, r7, #16
 8007796:	4619      	mov	r1, r3
 8007798:	4819      	ldr	r0, [pc, #100]	; (8007800 <MX_GPIO_Init+0x148>)
 800779a:	f000 fe0d 	bl	80083b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800779e:	f241 0330 	movw	r3, #4144	; 0x1030
 80077a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077ac:	2302      	movs	r3, #2
 80077ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077b0:	f107 0310 	add.w	r3, r7, #16
 80077b4:	4619      	mov	r1, r3
 80077b6:	4813      	ldr	r0, [pc, #76]	; (8007804 <MX_GPIO_Init+0x14c>)
 80077b8:	f000 fdfe 	bl	80083b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80077bc:	f640 4307 	movw	r3, #3079	; 0xc07
 80077c0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077c2:	2301      	movs	r3, #1
 80077c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077ca:	2302      	movs	r3, #2
 80077cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077ce:	f107 0310 	add.w	r3, r7, #16
 80077d2:	4619      	mov	r1, r3
 80077d4:	480c      	ldr	r0, [pc, #48]	; (8007808 <MX_GPIO_Init+0x150>)
 80077d6:	f000 fdef 	bl	80083b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80077da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80077de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077e8:	f107 0310 	add.w	r3, r7, #16
 80077ec:	4619      	mov	r1, r3
 80077ee:	4806      	ldr	r0, [pc, #24]	; (8007808 <MX_GPIO_Init+0x150>)
 80077f0:	f000 fde2 	bl	80083b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80077f4:	bf00      	nop
 80077f6:	3720      	adds	r7, #32
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40021000 	.word	0x40021000
 8007800:	40010800 	.word	0x40010800
 8007804:	40011000 	.word	0x40011000
 8007808:	40010c00 	.word	0x40010c00

0800780c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007814:	2001      	movs	r0, #1
 8007816:	f004 f9fb 	bl	800bc10 <osDelay>
 800781a:	e7fb      	b.n	8007814 <StartDefaultTask+0x8>

0800781c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007820:	bf00      	nop
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr

08007828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800782e:	4b18      	ldr	r3, [pc, #96]	; (8007890 <HAL_MspInit+0x68>)
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	4a17      	ldr	r2, [pc, #92]	; (8007890 <HAL_MspInit+0x68>)
 8007834:	f043 0301 	orr.w	r3, r3, #1
 8007838:	6193      	str	r3, [r2, #24]
 800783a:	4b15      	ldr	r3, [pc, #84]	; (8007890 <HAL_MspInit+0x68>)
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	60bb      	str	r3, [r7, #8]
 8007844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007846:	4b12      	ldr	r3, [pc, #72]	; (8007890 <HAL_MspInit+0x68>)
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	4a11      	ldr	r2, [pc, #68]	; (8007890 <HAL_MspInit+0x68>)
 800784c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007850:	61d3      	str	r3, [r2, #28]
 8007852:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <HAL_MspInit+0x68>)
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800785a:	607b      	str	r3, [r7, #4]
 800785c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800785e:	2200      	movs	r2, #0
 8007860:	210f      	movs	r1, #15
 8007862:	f06f 0001 	mvn.w	r0, #1
 8007866:	f000 fc2e 	bl	80080c6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800786a:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <HAL_MspInit+0x6c>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	4a04      	ldr	r2, [pc, #16]	; (8007894 <HAL_MspInit+0x6c>)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40021000 	.word	0x40021000
 8007894:	40010000 	.word	0x40010000

08007898 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a0:	f107 0310 	add.w	r3, r7, #16
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1c      	ldr	r2, [pc, #112]	; (8007924 <HAL_CAN_MspInit+0x8c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d131      	bne.n	800791c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80078b8:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <HAL_CAN_MspInit+0x90>)
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	4a1a      	ldr	r2, [pc, #104]	; (8007928 <HAL_CAN_MspInit+0x90>)
 80078be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80078c2:	61d3      	str	r3, [r2, #28]
 80078c4:	4b18      	ldr	r3, [pc, #96]	; (8007928 <HAL_CAN_MspInit+0x90>)
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078d0:	4b15      	ldr	r3, [pc, #84]	; (8007928 <HAL_CAN_MspInit+0x90>)
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	4a14      	ldr	r2, [pc, #80]	; (8007928 <HAL_CAN_MspInit+0x90>)
 80078d6:	f043 0304 	orr.w	r3, r3, #4
 80078da:	6193      	str	r3, [r2, #24]
 80078dc:	4b12      	ldr	r3, [pc, #72]	; (8007928 <HAL_CAN_MspInit+0x90>)
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80078e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	4619      	mov	r1, r3
 80078fc:	480b      	ldr	r0, [pc, #44]	; (800792c <HAL_CAN_MspInit+0x94>)
 80078fe:	f000 fd5b 	bl	80083b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007908:	2302      	movs	r3, #2
 800790a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800790c:	2303      	movs	r3, #3
 800790e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007910:	f107 0310 	add.w	r3, r7, #16
 8007914:	4619      	mov	r1, r3
 8007916:	4805      	ldr	r0, [pc, #20]	; (800792c <HAL_CAN_MspInit+0x94>)
 8007918:	f000 fd4e 	bl	80083b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800791c:	bf00      	nop
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40006400 	.word	0x40006400
 8007928:	40021000 	.word	0x40021000
 800792c:	40010800 	.word	0x40010800

08007930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007938:	f107 0310 	add.w	r3, r7, #16
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	609a      	str	r2, [r3, #8]
 8007944:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <HAL_I2C_MspInit+0x70>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d123      	bne.n	8007998 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007950:	4b14      	ldr	r3, [pc, #80]	; (80079a4 <HAL_I2C_MspInit+0x74>)
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <HAL_I2C_MspInit+0x74>)
 8007956:	f043 0308 	orr.w	r3, r3, #8
 800795a:	6193      	str	r3, [r2, #24]
 800795c:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <HAL_I2C_MspInit+0x74>)
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007968:	23c0      	movs	r3, #192	; 0xc0
 800796a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800796c:	2312      	movs	r3, #18
 800796e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007970:	2303      	movs	r3, #3
 8007972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007974:	f107 0310 	add.w	r3, r7, #16
 8007978:	4619      	mov	r1, r3
 800797a:	480b      	ldr	r0, [pc, #44]	; (80079a8 <HAL_I2C_MspInit+0x78>)
 800797c:	f000 fd1c 	bl	80083b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007980:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <HAL_I2C_MspInit+0x74>)
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	4a07      	ldr	r2, [pc, #28]	; (80079a4 <HAL_I2C_MspInit+0x74>)
 8007986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800798a:	61d3      	str	r3, [r2, #28]
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <HAL_I2C_MspInit+0x74>)
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007994:	60bb      	str	r3, [r7, #8]
 8007996:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007998:	bf00      	nop
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40005400 	.word	0x40005400
 80079a4:	40021000 	.word	0x40021000
 80079a8:	40010c00 	.word	0x40010c00

080079ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a0a      	ldr	r2, [pc, #40]	; (80079e4 <HAL_I2C_MspDeInit+0x38>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d10d      	bne.n	80079da <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80079be:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <HAL_I2C_MspDeInit+0x3c>)
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	4a09      	ldr	r2, [pc, #36]	; (80079e8 <HAL_I2C_MspDeInit+0x3c>)
 80079c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079c8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80079ca:	2140      	movs	r1, #64	; 0x40
 80079cc:	4807      	ldr	r0, [pc, #28]	; (80079ec <HAL_I2C_MspDeInit+0x40>)
 80079ce:	f000 fe87 	bl	80086e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80079d2:	2180      	movs	r1, #128	; 0x80
 80079d4:	4805      	ldr	r0, [pc, #20]	; (80079ec <HAL_I2C_MspDeInit+0x40>)
 80079d6:	f000 fe83 	bl	80086e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40005400 	.word	0x40005400
 80079e8:	40021000 	.word	0x40021000
 80079ec:	40010c00 	.word	0x40010c00

080079f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a0d      	ldr	r2, [pc, #52]	; (8007a34 <HAL_TIM_Base_MspInit+0x44>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d113      	bne.n	8007a2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <HAL_TIM_Base_MspInit+0x48>)
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <HAL_TIM_Base_MspInit+0x48>)
 8007a08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a0c:	6193      	str	r3, [r2, #24]
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <HAL_TIM_Base_MspInit+0x48>)
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2105      	movs	r1, #5
 8007a1e:	2019      	movs	r0, #25
 8007a20:	f000 fb51 	bl	80080c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007a24:	2019      	movs	r0, #25
 8007a26:	f000 fb6a 	bl	80080fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40012c00 	.word	0x40012c00
 8007a38:	40021000 	.word	0x40021000

08007a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a44:	f107 0310 	add.w	r3, r7, #16
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	609a      	str	r2, [r3, #8]
 8007a50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a20      	ldr	r2, [pc, #128]	; (8007ad8 <HAL_UART_MspInit+0x9c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d139      	bne.n	8007ad0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007a5c:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <HAL_UART_MspInit+0xa0>)
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	4a1e      	ldr	r2, [pc, #120]	; (8007adc <HAL_UART_MspInit+0xa0>)
 8007a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a66:	6193      	str	r3, [r2, #24]
 8007a68:	4b1c      	ldr	r3, [pc, #112]	; (8007adc <HAL_UART_MspInit+0xa0>)
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a74:	4b19      	ldr	r3, [pc, #100]	; (8007adc <HAL_UART_MspInit+0xa0>)
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	4a18      	ldr	r2, [pc, #96]	; (8007adc <HAL_UART_MspInit+0xa0>)
 8007a7a:	f043 0304 	orr.w	r3, r3, #4
 8007a7e:	6193      	str	r3, [r2, #24]
 8007a80:	4b16      	ldr	r3, [pc, #88]	; (8007adc <HAL_UART_MspInit+0xa0>)
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	60bb      	str	r3, [r7, #8]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a92:	2302      	movs	r3, #2
 8007a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a96:	2303      	movs	r3, #3
 8007a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a9a:	f107 0310 	add.w	r3, r7, #16
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	480f      	ldr	r0, [pc, #60]	; (8007ae0 <HAL_UART_MspInit+0xa4>)
 8007aa2:	f000 fc89 	bl	80083b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ab4:	f107 0310 	add.w	r3, r7, #16
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4809      	ldr	r0, [pc, #36]	; (8007ae0 <HAL_UART_MspInit+0xa4>)
 8007abc:	f000 fc7c 	bl	80083b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2105      	movs	r1, #5
 8007ac4:	2025      	movs	r0, #37	; 0x25
 8007ac6:	f000 fafe 	bl	80080c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007aca:	2025      	movs	r0, #37	; 0x25
 8007acc:	f000 fb17 	bl	80080fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007ad0:	bf00      	nop
 8007ad2:	3720      	adds	r7, #32
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	40013800 	.word	0x40013800
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	40010800 	.word	0x40010800

08007ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007ae8:	e7fe      	b.n	8007ae8 <NMI_Handler+0x4>

08007aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007aea:	b480      	push	{r7}
 8007aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007aee:	e7fe      	b.n	8007aee <HardFault_Handler+0x4>

08007af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007af4:	e7fe      	b.n	8007af4 <MemManage_Handler+0x4>

08007af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007af6:	b480      	push	{r7}
 8007af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007afa:	e7fe      	b.n	8007afa <BusFault_Handler+0x4>

08007afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b00:	e7fe      	b.n	8007b00 <UsageFault_Handler+0x4>

08007b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b02:	b480      	push	{r7}
 8007b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b06:	bf00      	nop
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007b12:	f000 f8c5 	bl	8007ca0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007b16:	f004 fdf9 	bl	800c70c <xTaskGetSchedulerState>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d001      	beq.n	8007b24 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8007b20:	f004 ffea 	bl	800caf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007b24:	bf00      	nop
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007b2c:	4802      	ldr	r0, [pc, #8]	; (8007b38 <TIM1_UP_IRQHandler+0x10>)
 8007b2e:	f002 fdcd 	bl	800a6cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007b32:	bf00      	nop
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000e94 	.word	0x20000e94

08007b3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007b40:	4802      	ldr	r0, [pc, #8]	; (8007b4c <USART1_IRQHandler+0x10>)
 8007b42:	f003 faab 	bl	800b09c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007b46:	bf00      	nop
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000edc 	.word	0x20000edc

08007b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b58:	4a14      	ldr	r2, [pc, #80]	; (8007bac <_sbrk+0x5c>)
 8007b5a:	4b15      	ldr	r3, [pc, #84]	; (8007bb0 <_sbrk+0x60>)
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b64:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <_sbrk+0x64>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b6c:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <_sbrk+0x64>)
 8007b6e:	4a12      	ldr	r2, [pc, #72]	; (8007bb8 <_sbrk+0x68>)
 8007b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b72:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <_sbrk+0x64>)
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4413      	add	r3, r2
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d207      	bcs.n	8007b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007b80:	f005 fb30 	bl	800d1e4 <__errno>
 8007b84:	4603      	mov	r3, r0
 8007b86:	220c      	movs	r2, #12
 8007b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8e:	e009      	b.n	8007ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007b90:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <_sbrk+0x64>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <_sbrk+0x64>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	4a05      	ldr	r2, [pc, #20]	; (8007bb4 <_sbrk+0x64>)
 8007ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	2000c000 	.word	0x2000c000
 8007bb0:	00000400 	.word	0x00000400
 8007bb4:	20000f28 	.word	0x20000f28
 8007bb8:	20001dc8 	.word	0x20001dc8

08007bbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007bc0:	bf00      	nop
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007bc8:	480c      	ldr	r0, [pc, #48]	; (8007bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007bca:	490d      	ldr	r1, [pc, #52]	; (8007c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007bcc:	4a0d      	ldr	r2, [pc, #52]	; (8007c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007bd0:	e002      	b.n	8007bd8 <LoopCopyDataInit>

08007bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007bd6:	3304      	adds	r3, #4

08007bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007bdc:	d3f9      	bcc.n	8007bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007bde:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007be0:	4c0a      	ldr	r4, [pc, #40]	; (8007c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007be4:	e001      	b.n	8007bea <LoopFillZerobss>

08007be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007be8:	3204      	adds	r2, #4

08007bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007bec:	d3fb      	bcc.n	8007be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007bee:	f7ff ffe5 	bl	8007bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bf2:	f005 fafd 	bl	800d1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007bf6:	f7ff fb73 	bl	80072e0 <main>
  bx lr
 8007bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8007bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c00:	200009a4 	.word	0x200009a4
  ldr r2, =_sidata
 8007c04:	0800e8e4 	.word	0x0800e8e4
  ldr r2, =_sbss
 8007c08:	200009a4 	.word	0x200009a4
  ldr r4, =_ebss
 8007c0c:	20001dc4 	.word	0x20001dc4

08007c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007c10:	e7fe      	b.n	8007c10 <ADC1_2_IRQHandler>
	...

08007c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c18:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <HAL_Init+0x28>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <HAL_Init+0x28>)
 8007c1e:	f043 0310 	orr.w	r3, r3, #16
 8007c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c24:	2003      	movs	r0, #3
 8007c26:	f000 fa43 	bl	80080b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c2a:	200f      	movs	r0, #15
 8007c2c:	f000 f808 	bl	8007c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c30:	f7ff fdfa 	bl	8007828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40022000 	.word	0x40022000

08007c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c48:	4b12      	ldr	r3, [pc, #72]	; (8007c94 <HAL_InitTick+0x54>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <HAL_InitTick+0x58>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	4619      	mov	r1, r3
 8007c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fa5b 	bl	800811a <HAL_SYSTICK_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e00e      	b.n	8007c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b0f      	cmp	r3, #15
 8007c72:	d80a      	bhi.n	8007c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c74:	2200      	movs	r2, #0
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	f000 fa23 	bl	80080c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007c80:	4a06      	ldr	r2, [pc, #24]	; (8007c9c <HAL_InitTick+0x5c>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e000      	b.n	8007c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	20000944 	.word	0x20000944
 8007c98:	2000094c 	.word	0x2000094c
 8007c9c:	20000948 	.word	0x20000948

08007ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <HAL_IncTick+0x1c>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <HAL_IncTick+0x20>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4413      	add	r3, r2
 8007cb0:	4a03      	ldr	r2, [pc, #12]	; (8007cc0 <HAL_IncTick+0x20>)
 8007cb2:	6013      	str	r3, [r2, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	2000094c 	.word	0x2000094c
 8007cc0:	20000f2c 	.word	0x20000f2c

08007cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8007cc8:	4b02      	ldr	r3, [pc, #8]	; (8007cd4 <HAL_GetTick+0x10>)
 8007cca:	681b      	ldr	r3, [r3, #0]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr
 8007cd4:	20000f2c 	.word	0x20000f2c

08007cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ce0:	f7ff fff0 	bl	8007cc4 <HAL_GetTick>
 8007ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d005      	beq.n	8007cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <HAL_Delay+0x44>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007cfe:	bf00      	nop
 8007d00:	f7ff ffe0 	bl	8007cc4 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d8f7      	bhi.n	8007d00 <HAL_Delay+0x28>
  {
  }
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	2000094c 	.word	0x2000094c

08007d20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e0ed      	b.n	8007f0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff fdaa 	bl	8007898 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 0201 	orr.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d54:	f7ff ffb6 	bl	8007cc4 <HAL_GetTick>
 8007d58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007d5a:	e012      	b.n	8007d82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007d5c:	f7ff ffb2 	bl	8007cc4 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b0a      	cmp	r3, #10
 8007d68:	d90b      	bls.n	8007d82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2205      	movs	r2, #5
 8007d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e0c5      	b.n	8007f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0e5      	beq.n	8007d5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0202 	bic.w	r2, r2, #2
 8007d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007da0:	f7ff ff90 	bl	8007cc4 <HAL_GetTick>
 8007da4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007da6:	e012      	b.n	8007dce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007da8:	f7ff ff8c 	bl	8007cc4 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b0a      	cmp	r3, #10
 8007db4:	d90b      	bls.n	8007dce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2205      	movs	r2, #5
 8007dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e09f      	b.n	8007f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e5      	bne.n	8007da8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	7e1b      	ldrb	r3, [r3, #24]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d108      	bne.n	8007df6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e007      	b.n	8007e06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7e5b      	ldrb	r3, [r3, #25]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d108      	bne.n	8007e20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	e007      	b.n	8007e30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7e9b      	ldrb	r3, [r3, #26]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d108      	bne.n	8007e4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0220 	orr.w	r2, r2, #32
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	e007      	b.n	8007e5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0220 	bic.w	r2, r2, #32
 8007e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	7edb      	ldrb	r3, [r3, #27]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d108      	bne.n	8007e74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0210 	bic.w	r2, r2, #16
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	e007      	b.n	8007e84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0210 	orr.w	r2, r2, #16
 8007e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7f1b      	ldrb	r3, [r3, #28]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d108      	bne.n	8007e9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0208 	orr.w	r2, r2, #8
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e007      	b.n	8007eae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0208 	bic.w	r2, r2, #8
 8007eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	7f5b      	ldrb	r3, [r3, #29]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d108      	bne.n	8007ec8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f042 0204 	orr.w	r2, r2, #4
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	e007      	b.n	8007ed8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0204 	bic.w	r2, r2, #4
 8007ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	ea42 0103 	orr.w	r1, r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	1e5a      	subs	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <__NVIC_SetPriorityGrouping>:
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <__NVIC_SetPriorityGrouping+0x44>)
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f34:	4013      	ands	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f4a:	4a04      	ldr	r2, [pc, #16]	; (8007f5c <__NVIC_SetPriorityGrouping+0x44>)
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	60d3      	str	r3, [r2, #12]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	e000ed00 	.word	0xe000ed00

08007f60 <__NVIC_GetPriorityGrouping>:
{
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f64:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <__NVIC_GetPriorityGrouping+0x18>)
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	0a1b      	lsrs	r3, r3, #8
 8007f6a:	f003 0307 	and.w	r3, r3, #7
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	e000ed00 	.word	0xe000ed00

08007f7c <__NVIC_EnableIRQ>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	db0b      	blt.n	8007fa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	f003 021f 	and.w	r2, r3, #31
 8007f94:	4906      	ldr	r1, [pc, #24]	; (8007fb0 <__NVIC_EnableIRQ+0x34>)
 8007f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8007fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr
 8007fb0:	e000e100 	.word	0xe000e100

08007fb4 <__NVIC_SetPriority>:
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	6039      	str	r1, [r7, #0]
 8007fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	db0a      	blt.n	8007fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	490c      	ldr	r1, [pc, #48]	; (8008000 <__NVIC_SetPriority+0x4c>)
 8007fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd2:	0112      	lsls	r2, r2, #4
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fdc:	e00a      	b.n	8007ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	4908      	ldr	r1, [pc, #32]	; (8008004 <__NVIC_SetPriority+0x50>)
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	3b04      	subs	r3, #4
 8007fec:	0112      	lsls	r2, r2, #4
 8007fee:	b2d2      	uxtb	r2, r2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	761a      	strb	r2, [r3, #24]
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	e000e100 	.word	0xe000e100
 8008004:	e000ed00 	.word	0xe000ed00

08008008 <NVIC_EncodePriority>:
{
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	; 0x24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	f1c3 0307 	rsb	r3, r3, #7
 8008022:	2b04      	cmp	r3, #4
 8008024:	bf28      	it	cs
 8008026:	2304      	movcs	r3, #4
 8008028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	3304      	adds	r3, #4
 800802e:	2b06      	cmp	r3, #6
 8008030:	d902      	bls.n	8008038 <NVIC_EncodePriority+0x30>
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	3b03      	subs	r3, #3
 8008036:	e000      	b.n	800803a <NVIC_EncodePriority+0x32>
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800803c:	f04f 32ff 	mov.w	r2, #4294967295
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	43da      	mvns	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	401a      	ands	r2, r3
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008050:	f04f 31ff 	mov.w	r1, #4294967295
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	fa01 f303 	lsl.w	r3, r1, r3
 800805a:	43d9      	mvns	r1, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008060:	4313      	orrs	r3, r2
}
 8008062:	4618      	mov	r0, r3
 8008064:	3724      	adds	r7, #36	; 0x24
 8008066:	46bd      	mov	sp, r7
 8008068:	bc80      	pop	{r7}
 800806a:	4770      	bx	lr

0800806c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3b01      	subs	r3, #1
 8008078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800807c:	d301      	bcc.n	8008082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800807e:	2301      	movs	r3, #1
 8008080:	e00f      	b.n	80080a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008082:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <SysTick_Config+0x40>)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3b01      	subs	r3, #1
 8008088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800808a:	210f      	movs	r1, #15
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	f7ff ff90 	bl	8007fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <SysTick_Config+0x40>)
 8008096:	2200      	movs	r2, #0
 8008098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800809a:	4b04      	ldr	r3, [pc, #16]	; (80080ac <SysTick_Config+0x40>)
 800809c:	2207      	movs	r2, #7
 800809e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	e000e010 	.word	0xe000e010

080080b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ff2d 	bl	8007f18 <__NVIC_SetPriorityGrouping>
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	4603      	mov	r3, r0
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080d8:	f7ff ff42 	bl	8007f60 <__NVIC_GetPriorityGrouping>
 80080dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	6978      	ldr	r0, [r7, #20]
 80080e4:	f7ff ff90 	bl	8008008 <NVIC_EncodePriority>
 80080e8:	4602      	mov	r2, r0
 80080ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ee:	4611      	mov	r1, r2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff ff5f 	bl	8007fb4 <__NVIC_SetPriority>
}
 80080f6:	bf00      	nop
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	4603      	mov	r3, r0
 8008106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff35 	bl	8007f7c <__NVIC_EnableIRQ>
}
 8008112:	bf00      	nop
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff ffa2 	bl	800806c <SysTick_Config>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d008      	beq.n	800815c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2204      	movs	r2, #4
 800814e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e020      	b.n	800819e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 020e 	bic.w	r2, r2, #14
 800816a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008184:	2101      	movs	r1, #1
 8008186:	fa01 f202 	lsl.w	r2, r1, r2
 800818a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr

080081a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d005      	beq.n	80081cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2204      	movs	r2, #4
 80081c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	73fb      	strb	r3, [r7, #15]
 80081ca:	e0d6      	b.n	800837a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 020e 	bic.w	r2, r2, #14
 80081da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0201 	bic.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	4b64      	ldr	r3, [pc, #400]	; (8008384 <HAL_DMA_Abort_IT+0x1dc>)
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d958      	bls.n	80082aa <HAL_DMA_Abort_IT+0x102>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a62      	ldr	r2, [pc, #392]	; (8008388 <HAL_DMA_Abort_IT+0x1e0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d04f      	beq.n	80082a2 <HAL_DMA_Abort_IT+0xfa>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a61      	ldr	r2, [pc, #388]	; (800838c <HAL_DMA_Abort_IT+0x1e4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d048      	beq.n	800829e <HAL_DMA_Abort_IT+0xf6>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a5f      	ldr	r2, [pc, #380]	; (8008390 <HAL_DMA_Abort_IT+0x1e8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d040      	beq.n	8008298 <HAL_DMA_Abort_IT+0xf0>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a5e      	ldr	r2, [pc, #376]	; (8008394 <HAL_DMA_Abort_IT+0x1ec>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d038      	beq.n	8008292 <HAL_DMA_Abort_IT+0xea>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a5c      	ldr	r2, [pc, #368]	; (8008398 <HAL_DMA_Abort_IT+0x1f0>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d030      	beq.n	800828c <HAL_DMA_Abort_IT+0xe4>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a5b      	ldr	r2, [pc, #364]	; (800839c <HAL_DMA_Abort_IT+0x1f4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d028      	beq.n	8008286 <HAL_DMA_Abort_IT+0xde>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a52      	ldr	r2, [pc, #328]	; (8008384 <HAL_DMA_Abort_IT+0x1dc>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d020      	beq.n	8008280 <HAL_DMA_Abort_IT+0xd8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a57      	ldr	r2, [pc, #348]	; (80083a0 <HAL_DMA_Abort_IT+0x1f8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d019      	beq.n	800827c <HAL_DMA_Abort_IT+0xd4>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a55      	ldr	r2, [pc, #340]	; (80083a4 <HAL_DMA_Abort_IT+0x1fc>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d012      	beq.n	8008278 <HAL_DMA_Abort_IT+0xd0>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a54      	ldr	r2, [pc, #336]	; (80083a8 <HAL_DMA_Abort_IT+0x200>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d00a      	beq.n	8008272 <HAL_DMA_Abort_IT+0xca>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a52      	ldr	r2, [pc, #328]	; (80083ac <HAL_DMA_Abort_IT+0x204>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d102      	bne.n	800826c <HAL_DMA_Abort_IT+0xc4>
 8008266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800826a:	e01b      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 800826c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008270:	e018      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 8008272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008276:	e015      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 8008278:	2310      	movs	r3, #16
 800827a:	e013      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 800827c:	2301      	movs	r3, #1
 800827e:	e011      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 8008280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008284:	e00e      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 8008286:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800828a:	e00b      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 800828c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008290:	e008      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 8008292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008296:	e005      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 8008298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800829c:	e002      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 800829e:	2310      	movs	r3, #16
 80082a0:	e000      	b.n	80082a4 <HAL_DMA_Abort_IT+0xfc>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4a42      	ldr	r2, [pc, #264]	; (80083b0 <HAL_DMA_Abort_IT+0x208>)
 80082a6:	6053      	str	r3, [r2, #4]
 80082a8:	e057      	b.n	800835a <HAL_DMA_Abort_IT+0x1b2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a36      	ldr	r2, [pc, #216]	; (8008388 <HAL_DMA_Abort_IT+0x1e0>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d04f      	beq.n	8008354 <HAL_DMA_Abort_IT+0x1ac>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a34      	ldr	r2, [pc, #208]	; (800838c <HAL_DMA_Abort_IT+0x1e4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d048      	beq.n	8008350 <HAL_DMA_Abort_IT+0x1a8>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a33      	ldr	r2, [pc, #204]	; (8008390 <HAL_DMA_Abort_IT+0x1e8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d040      	beq.n	800834a <HAL_DMA_Abort_IT+0x1a2>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a31      	ldr	r2, [pc, #196]	; (8008394 <HAL_DMA_Abort_IT+0x1ec>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d038      	beq.n	8008344 <HAL_DMA_Abort_IT+0x19c>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a30      	ldr	r2, [pc, #192]	; (8008398 <HAL_DMA_Abort_IT+0x1f0>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d030      	beq.n	800833e <HAL_DMA_Abort_IT+0x196>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a2e      	ldr	r2, [pc, #184]	; (800839c <HAL_DMA_Abort_IT+0x1f4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d028      	beq.n	8008338 <HAL_DMA_Abort_IT+0x190>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a26      	ldr	r2, [pc, #152]	; (8008384 <HAL_DMA_Abort_IT+0x1dc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d020      	beq.n	8008332 <HAL_DMA_Abort_IT+0x18a>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a2a      	ldr	r2, [pc, #168]	; (80083a0 <HAL_DMA_Abort_IT+0x1f8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d019      	beq.n	800832e <HAL_DMA_Abort_IT+0x186>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a29      	ldr	r2, [pc, #164]	; (80083a4 <HAL_DMA_Abort_IT+0x1fc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d012      	beq.n	800832a <HAL_DMA_Abort_IT+0x182>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a27      	ldr	r2, [pc, #156]	; (80083a8 <HAL_DMA_Abort_IT+0x200>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00a      	beq.n	8008324 <HAL_DMA_Abort_IT+0x17c>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a26      	ldr	r2, [pc, #152]	; (80083ac <HAL_DMA_Abort_IT+0x204>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d102      	bne.n	800831e <HAL_DMA_Abort_IT+0x176>
 8008318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800831c:	e01b      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 800831e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008322:	e018      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 8008324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008328:	e015      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 800832a:	2310      	movs	r3, #16
 800832c:	e013      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 800832e:	2301      	movs	r3, #1
 8008330:	e011      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 8008332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008336:	e00e      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 8008338:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800833c:	e00b      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 800833e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008342:	e008      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 8008344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008348:	e005      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 800834a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800834e:	e002      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 8008350:	2310      	movs	r3, #16
 8008352:	e000      	b.n	8008356 <HAL_DMA_Abort_IT+0x1ae>
 8008354:	2301      	movs	r3, #1
 8008356:	4a17      	ldr	r2, [pc, #92]	; (80083b4 <HAL_DMA_Abort_IT+0x20c>)
 8008358:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
    } 
  }
  return status;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40020080 	.word	0x40020080
 8008388:	40020008 	.word	0x40020008
 800838c:	4002001c 	.word	0x4002001c
 8008390:	40020030 	.word	0x40020030
 8008394:	40020044 	.word	0x40020044
 8008398:	40020058 	.word	0x40020058
 800839c:	4002006c 	.word	0x4002006c
 80083a0:	40020408 	.word	0x40020408
 80083a4:	4002041c 	.word	0x4002041c
 80083a8:	40020430 	.word	0x40020430
 80083ac:	40020444 	.word	0x40020444
 80083b0:	40020400 	.word	0x40020400
 80083b4:	40020000 	.word	0x40020000

080083b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b08b      	sub	sp, #44	; 0x2c
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80083c2:	2300      	movs	r3, #0
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80083c6:	2300      	movs	r3, #0
 80083c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083ca:	e179      	b.n	80086c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80083cc:	2201      	movs	r2, #1
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	fa02 f303 	lsl.w	r3, r2, r3
 80083d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	4013      	ands	r3, r2
 80083de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	f040 8168 	bne.w	80086ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	4a96      	ldr	r2, [pc, #600]	; (8008648 <HAL_GPIO_Init+0x290>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d05e      	beq.n	80084b2 <HAL_GPIO_Init+0xfa>
 80083f4:	4a94      	ldr	r2, [pc, #592]	; (8008648 <HAL_GPIO_Init+0x290>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d875      	bhi.n	80084e6 <HAL_GPIO_Init+0x12e>
 80083fa:	4a94      	ldr	r2, [pc, #592]	; (800864c <HAL_GPIO_Init+0x294>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d058      	beq.n	80084b2 <HAL_GPIO_Init+0xfa>
 8008400:	4a92      	ldr	r2, [pc, #584]	; (800864c <HAL_GPIO_Init+0x294>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d86f      	bhi.n	80084e6 <HAL_GPIO_Init+0x12e>
 8008406:	4a92      	ldr	r2, [pc, #584]	; (8008650 <HAL_GPIO_Init+0x298>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d052      	beq.n	80084b2 <HAL_GPIO_Init+0xfa>
 800840c:	4a90      	ldr	r2, [pc, #576]	; (8008650 <HAL_GPIO_Init+0x298>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d869      	bhi.n	80084e6 <HAL_GPIO_Init+0x12e>
 8008412:	4a90      	ldr	r2, [pc, #576]	; (8008654 <HAL_GPIO_Init+0x29c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d04c      	beq.n	80084b2 <HAL_GPIO_Init+0xfa>
 8008418:	4a8e      	ldr	r2, [pc, #568]	; (8008654 <HAL_GPIO_Init+0x29c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d863      	bhi.n	80084e6 <HAL_GPIO_Init+0x12e>
 800841e:	4a8e      	ldr	r2, [pc, #568]	; (8008658 <HAL_GPIO_Init+0x2a0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d046      	beq.n	80084b2 <HAL_GPIO_Init+0xfa>
 8008424:	4a8c      	ldr	r2, [pc, #560]	; (8008658 <HAL_GPIO_Init+0x2a0>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d85d      	bhi.n	80084e6 <HAL_GPIO_Init+0x12e>
 800842a:	2b12      	cmp	r3, #18
 800842c:	d82a      	bhi.n	8008484 <HAL_GPIO_Init+0xcc>
 800842e:	2b12      	cmp	r3, #18
 8008430:	d859      	bhi.n	80084e6 <HAL_GPIO_Init+0x12e>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <HAL_GPIO_Init+0x80>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	080084b3 	.word	0x080084b3
 800843c:	0800848d 	.word	0x0800848d
 8008440:	0800849f 	.word	0x0800849f
 8008444:	080084e1 	.word	0x080084e1
 8008448:	080084e7 	.word	0x080084e7
 800844c:	080084e7 	.word	0x080084e7
 8008450:	080084e7 	.word	0x080084e7
 8008454:	080084e7 	.word	0x080084e7
 8008458:	080084e7 	.word	0x080084e7
 800845c:	080084e7 	.word	0x080084e7
 8008460:	080084e7 	.word	0x080084e7
 8008464:	080084e7 	.word	0x080084e7
 8008468:	080084e7 	.word	0x080084e7
 800846c:	080084e7 	.word	0x080084e7
 8008470:	080084e7 	.word	0x080084e7
 8008474:	080084e7 	.word	0x080084e7
 8008478:	080084e7 	.word	0x080084e7
 800847c:	08008495 	.word	0x08008495
 8008480:	080084a9 	.word	0x080084a9
 8008484:	4a75      	ldr	r2, [pc, #468]	; (800865c <HAL_GPIO_Init+0x2a4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d013      	beq.n	80084b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800848a:	e02c      	b.n	80084e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	623b      	str	r3, [r7, #32]
          break;
 8008492:	e029      	b.n	80084e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	3304      	adds	r3, #4
 800849a:	623b      	str	r3, [r7, #32]
          break;
 800849c:	e024      	b.n	80084e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	3308      	adds	r3, #8
 80084a4:	623b      	str	r3, [r7, #32]
          break;
 80084a6:	e01f      	b.n	80084e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	330c      	adds	r3, #12
 80084ae:	623b      	str	r3, [r7, #32]
          break;
 80084b0:	e01a      	b.n	80084e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d102      	bne.n	80084c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80084ba:	2304      	movs	r3, #4
 80084bc:	623b      	str	r3, [r7, #32]
          break;
 80084be:	e013      	b.n	80084e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d105      	bne.n	80084d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80084c8:	2308      	movs	r3, #8
 80084ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	611a      	str	r2, [r3, #16]
          break;
 80084d2:	e009      	b.n	80084e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80084d4:	2308      	movs	r3, #8
 80084d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	615a      	str	r2, [r3, #20]
          break;
 80084de:	e003      	b.n	80084e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80084e0:	2300      	movs	r3, #0
 80084e2:	623b      	str	r3, [r7, #32]
          break;
 80084e4:	e000      	b.n	80084e8 <HAL_GPIO_Init+0x130>
          break;
 80084e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2bff      	cmp	r3, #255	; 0xff
 80084ec:	d801      	bhi.n	80084f2 <HAL_GPIO_Init+0x13a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	e001      	b.n	80084f6 <HAL_GPIO_Init+0x13e>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3304      	adds	r3, #4
 80084f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2bff      	cmp	r3, #255	; 0xff
 80084fc:	d802      	bhi.n	8008504 <HAL_GPIO_Init+0x14c>
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	e002      	b.n	800850a <HAL_GPIO_Init+0x152>
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	3b08      	subs	r3, #8
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	210f      	movs	r1, #15
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	fa01 f303 	lsl.w	r3, r1, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	401a      	ands	r2, r3
 800851c:	6a39      	ldr	r1, [r7, #32]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	fa01 f303 	lsl.w	r3, r1, r3
 8008524:	431a      	orrs	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80c1 	beq.w	80086ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008538:	4b49      	ldr	r3, [pc, #292]	; (8008660 <HAL_GPIO_Init+0x2a8>)
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	4a48      	ldr	r2, [pc, #288]	; (8008660 <HAL_GPIO_Init+0x2a8>)
 800853e:	f043 0301 	orr.w	r3, r3, #1
 8008542:	6193      	str	r3, [r2, #24]
 8008544:	4b46      	ldr	r3, [pc, #280]	; (8008660 <HAL_GPIO_Init+0x2a8>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	60bb      	str	r3, [r7, #8]
 800854e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008550:	4a44      	ldr	r2, [pc, #272]	; (8008664 <HAL_GPIO_Init+0x2ac>)
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	089b      	lsrs	r3, r3, #2
 8008556:	3302      	adds	r3, #2
 8008558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800855c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	220f      	movs	r2, #15
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	43db      	mvns	r3, r3
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	4013      	ands	r3, r2
 8008572:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a3c      	ldr	r2, [pc, #240]	; (8008668 <HAL_GPIO_Init+0x2b0>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d01f      	beq.n	80085bc <HAL_GPIO_Init+0x204>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a3b      	ldr	r2, [pc, #236]	; (800866c <HAL_GPIO_Init+0x2b4>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d019      	beq.n	80085b8 <HAL_GPIO_Init+0x200>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a3a      	ldr	r2, [pc, #232]	; (8008670 <HAL_GPIO_Init+0x2b8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d013      	beq.n	80085b4 <HAL_GPIO_Init+0x1fc>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a39      	ldr	r2, [pc, #228]	; (8008674 <HAL_GPIO_Init+0x2bc>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00d      	beq.n	80085b0 <HAL_GPIO_Init+0x1f8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a38      	ldr	r2, [pc, #224]	; (8008678 <HAL_GPIO_Init+0x2c0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d007      	beq.n	80085ac <HAL_GPIO_Init+0x1f4>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a37      	ldr	r2, [pc, #220]	; (800867c <HAL_GPIO_Init+0x2c4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d101      	bne.n	80085a8 <HAL_GPIO_Init+0x1f0>
 80085a4:	2305      	movs	r3, #5
 80085a6:	e00a      	b.n	80085be <HAL_GPIO_Init+0x206>
 80085a8:	2306      	movs	r3, #6
 80085aa:	e008      	b.n	80085be <HAL_GPIO_Init+0x206>
 80085ac:	2304      	movs	r3, #4
 80085ae:	e006      	b.n	80085be <HAL_GPIO_Init+0x206>
 80085b0:	2303      	movs	r3, #3
 80085b2:	e004      	b.n	80085be <HAL_GPIO_Init+0x206>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e002      	b.n	80085be <HAL_GPIO_Init+0x206>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <HAL_GPIO_Init+0x206>
 80085bc:	2300      	movs	r3, #0
 80085be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c0:	f002 0203 	and.w	r2, r2, #3
 80085c4:	0092      	lsls	r2, r2, #2
 80085c6:	4093      	lsls	r3, r2
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80085ce:	4925      	ldr	r1, [pc, #148]	; (8008664 <HAL_GPIO_Init+0x2ac>)
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	089b      	lsrs	r3, r3, #2
 80085d4:	3302      	adds	r3, #2
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80085e8:	4b25      	ldr	r3, [pc, #148]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	4924      	ldr	r1, [pc, #144]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	608b      	str	r3, [r1, #8]
 80085f4:	e006      	b.n	8008604 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80085f6:	4b22      	ldr	r3, [pc, #136]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	43db      	mvns	r3, r3
 80085fe:	4920      	ldr	r1, [pc, #128]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 8008600:	4013      	ands	r3, r2
 8008602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d006      	beq.n	800861e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008610:	4b1b      	ldr	r3, [pc, #108]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	491a      	ldr	r1, [pc, #104]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	4313      	orrs	r3, r2
 800861a:	60cb      	str	r3, [r1, #12]
 800861c:	e006      	b.n	800862c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800861e:	4b18      	ldr	r3, [pc, #96]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	43db      	mvns	r3, r3
 8008626:	4916      	ldr	r1, [pc, #88]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 8008628:	4013      	ands	r3, r2
 800862a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d025      	beq.n	8008684 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008638:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	4910      	ldr	r1, [pc, #64]	; (8008680 <HAL_GPIO_Init+0x2c8>)
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	4313      	orrs	r3, r2
 8008642:	604b      	str	r3, [r1, #4]
 8008644:	e025      	b.n	8008692 <HAL_GPIO_Init+0x2da>
 8008646:	bf00      	nop
 8008648:	10320000 	.word	0x10320000
 800864c:	10310000 	.word	0x10310000
 8008650:	10220000 	.word	0x10220000
 8008654:	10210000 	.word	0x10210000
 8008658:	10120000 	.word	0x10120000
 800865c:	10110000 	.word	0x10110000
 8008660:	40021000 	.word	0x40021000
 8008664:	40010000 	.word	0x40010000
 8008668:	40010800 	.word	0x40010800
 800866c:	40010c00 	.word	0x40010c00
 8008670:	40011000 	.word	0x40011000
 8008674:	40011400 	.word	0x40011400
 8008678:	40011800 	.word	0x40011800
 800867c:	40011c00 	.word	0x40011c00
 8008680:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008684:	4b15      	ldr	r3, [pc, #84]	; (80086dc <HAL_GPIO_Init+0x324>)
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	43db      	mvns	r3, r3
 800868c:	4913      	ldr	r1, [pc, #76]	; (80086dc <HAL_GPIO_Init+0x324>)
 800868e:	4013      	ands	r3, r2
 8008690:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d006      	beq.n	80086ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800869e:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <HAL_GPIO_Init+0x324>)
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	490e      	ldr	r1, [pc, #56]	; (80086dc <HAL_GPIO_Init+0x324>)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	600b      	str	r3, [r1, #0]
 80086aa:	e006      	b.n	80086ba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80086ac:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <HAL_GPIO_Init+0x324>)
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	43db      	mvns	r3, r3
 80086b4:	4909      	ldr	r1, [pc, #36]	; (80086dc <HAL_GPIO_Init+0x324>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	3301      	adds	r3, #1
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f47f ae7e 	bne.w	80083cc <HAL_GPIO_Init+0x14>
  }
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	372c      	adds	r7, #44	; 0x2c
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr
 80086dc:	40010400 	.word	0x40010400

080086e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b089      	sub	sp, #36	; 0x24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80086ee:	e0a6      	b.n	800883e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80086f0:	2201      	movs	r2, #1
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	4013      	ands	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 8099 	beq.w	8008838 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008706:	4a54      	ldr	r2, [pc, #336]	; (8008858 <HAL_GPIO_DeInit+0x178>)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	089b      	lsrs	r3, r3, #2
 800870c:	3302      	adds	r3, #2
 800870e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008712:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	220f      	movs	r2, #15
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4013      	ands	r3, r2
 8008726:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a4c      	ldr	r2, [pc, #304]	; (800885c <HAL_GPIO_DeInit+0x17c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d01f      	beq.n	8008770 <HAL_GPIO_DeInit+0x90>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a4b      	ldr	r2, [pc, #300]	; (8008860 <HAL_GPIO_DeInit+0x180>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d019      	beq.n	800876c <HAL_GPIO_DeInit+0x8c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a4a      	ldr	r2, [pc, #296]	; (8008864 <HAL_GPIO_DeInit+0x184>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d013      	beq.n	8008768 <HAL_GPIO_DeInit+0x88>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a49      	ldr	r2, [pc, #292]	; (8008868 <HAL_GPIO_DeInit+0x188>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00d      	beq.n	8008764 <HAL_GPIO_DeInit+0x84>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a48      	ldr	r2, [pc, #288]	; (800886c <HAL_GPIO_DeInit+0x18c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <HAL_GPIO_DeInit+0x80>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a47      	ldr	r2, [pc, #284]	; (8008870 <HAL_GPIO_DeInit+0x190>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d101      	bne.n	800875c <HAL_GPIO_DeInit+0x7c>
 8008758:	2305      	movs	r3, #5
 800875a:	e00a      	b.n	8008772 <HAL_GPIO_DeInit+0x92>
 800875c:	2306      	movs	r3, #6
 800875e:	e008      	b.n	8008772 <HAL_GPIO_DeInit+0x92>
 8008760:	2304      	movs	r3, #4
 8008762:	e006      	b.n	8008772 <HAL_GPIO_DeInit+0x92>
 8008764:	2303      	movs	r3, #3
 8008766:	e004      	b.n	8008772 <HAL_GPIO_DeInit+0x92>
 8008768:	2302      	movs	r3, #2
 800876a:	e002      	b.n	8008772 <HAL_GPIO_DeInit+0x92>
 800876c:	2301      	movs	r3, #1
 800876e:	e000      	b.n	8008772 <HAL_GPIO_DeInit+0x92>
 8008770:	2300      	movs	r3, #0
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	f002 0203 	and.w	r2, r2, #3
 8008778:	0092      	lsls	r2, r2, #2
 800877a:	4093      	lsls	r3, r2
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	429a      	cmp	r2, r3
 8008780:	d132      	bne.n	80087e8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008782:	4b3c      	ldr	r3, [pc, #240]	; (8008874 <HAL_GPIO_DeInit+0x194>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	43db      	mvns	r3, r3
 800878a:	493a      	ldr	r1, [pc, #232]	; (8008874 <HAL_GPIO_DeInit+0x194>)
 800878c:	4013      	ands	r3, r2
 800878e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008790:	4b38      	ldr	r3, [pc, #224]	; (8008874 <HAL_GPIO_DeInit+0x194>)
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	43db      	mvns	r3, r3
 8008798:	4936      	ldr	r1, [pc, #216]	; (8008874 <HAL_GPIO_DeInit+0x194>)
 800879a:	4013      	ands	r3, r2
 800879c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800879e:	4b35      	ldr	r3, [pc, #212]	; (8008874 <HAL_GPIO_DeInit+0x194>)
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	43db      	mvns	r3, r3
 80087a6:	4933      	ldr	r1, [pc, #204]	; (8008874 <HAL_GPIO_DeInit+0x194>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80087ac:	4b31      	ldr	r3, [pc, #196]	; (8008874 <HAL_GPIO_DeInit+0x194>)
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	43db      	mvns	r3, r3
 80087b4:	492f      	ldr	r1, [pc, #188]	; (8008874 <HAL_GPIO_DeInit+0x194>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	f003 0303 	and.w	r3, r3, #3
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	220f      	movs	r2, #15
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80087ca:	4a23      	ldr	r2, [pc, #140]	; (8008858 <HAL_GPIO_DeInit+0x178>)
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	089b      	lsrs	r3, r3, #2
 80087d0:	3302      	adds	r3, #2
 80087d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	43da      	mvns	r2, r3
 80087da:	481f      	ldr	r0, [pc, #124]	; (8008858 <HAL_GPIO_DeInit+0x178>)
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	089b      	lsrs	r3, r3, #2
 80087e0:	400a      	ands	r2, r1
 80087e2:	3302      	adds	r3, #2
 80087e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	2bff      	cmp	r3, #255	; 0xff
 80087ec:	d801      	bhi.n	80087f2 <HAL_GPIO_DeInit+0x112>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	e001      	b.n	80087f6 <HAL_GPIO_DeInit+0x116>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3304      	adds	r3, #4
 80087f6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	2bff      	cmp	r3, #255	; 0xff
 80087fc:	d802      	bhi.n	8008804 <HAL_GPIO_DeInit+0x124>
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	e002      	b.n	800880a <HAL_GPIO_DeInit+0x12a>
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	3b08      	subs	r3, #8
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	210f      	movs	r1, #15
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	fa01 f303 	lsl.w	r3, r1, r3
 8008818:	43db      	mvns	r3, r3
 800881a:	401a      	ands	r2, r3
 800881c:	2104      	movs	r1, #4
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	fa01 f303 	lsl.w	r3, r1, r3
 8008824:	431a      	orrs	r2, r3
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	43db      	mvns	r3, r3
 8008832:	401a      	ands	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	3301      	adds	r3, #1
 800883c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	fa22 f303 	lsr.w	r3, r2, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	f47f af52 	bne.w	80086f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	3724      	adds	r7, #36	; 0x24
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr
 8008858:	40010000 	.word	0x40010000
 800885c:	40010800 	.word	0x40010800
 8008860:	40010c00 	.word	0x40010c00
 8008864:	40011000 	.word	0x40011000
 8008868:	40011400 	.word	0x40011400
 800886c:	40011800 	.word	0x40011800
 8008870:	40011c00 	.word	0x40011c00
 8008874:	40010400 	.word	0x40010400

08008878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	887b      	ldrh	r3, [r7, #2]
 800888a:	4013      	ands	r3, r2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
 8008894:	e001      	b.n	800889a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr

080088a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	807b      	strh	r3, [r7, #2]
 80088b2:	4613      	mov	r3, r2
 80088b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80088b6:	787b      	ldrb	r3, [r7, #1]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088bc:	887a      	ldrh	r2, [r7, #2]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80088c2:	e003      	b.n	80088cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80088c4:	887b      	ldrh	r3, [r7, #2]
 80088c6:	041a      	lsls	r2, r3, #16
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	611a      	str	r2, [r3, #16]
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bc80      	pop	{r7}
 80088d4:	4770      	bx	lr

080088d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80088e8:	887a      	ldrh	r2, [r7, #2]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4013      	ands	r3, r2
 80088ee:	041a      	lsls	r2, r3, #16
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	43d9      	mvns	r1, r3
 80088f4:	887b      	ldrh	r3, [r7, #2]
 80088f6:	400b      	ands	r3, r1
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	611a      	str	r2, [r3, #16]
}
 80088fe:	bf00      	nop
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e12b      	b.n	8008b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fe fffe 	bl	8007930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2224      	movs	r2, #36	; 0x24
 8008938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0201 	bic.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800895a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800896a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800896c:	f001 fdb8 	bl	800a4e0 <HAL_RCC_GetPCLK1Freq>
 8008970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	4a81      	ldr	r2, [pc, #516]	; (8008b7c <HAL_I2C_Init+0x274>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d807      	bhi.n	800898c <HAL_I2C_Init+0x84>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4a80      	ldr	r2, [pc, #512]	; (8008b80 <HAL_I2C_Init+0x278>)
 8008980:	4293      	cmp	r3, r2
 8008982:	bf94      	ite	ls
 8008984:	2301      	movls	r3, #1
 8008986:	2300      	movhi	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	e006      	b.n	800899a <HAL_I2C_Init+0x92>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4a7d      	ldr	r2, [pc, #500]	; (8008b84 <HAL_I2C_Init+0x27c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	bf94      	ite	ls
 8008994:	2301      	movls	r3, #1
 8008996:	2300      	movhi	r3, #0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e0e7      	b.n	8008b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4a78      	ldr	r2, [pc, #480]	; (8008b88 <HAL_I2C_Init+0x280>)
 80089a6:	fba2 2303 	umull	r2, r3, r2, r3
 80089aa:	0c9b      	lsrs	r3, r3, #18
 80089ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	4a6a      	ldr	r2, [pc, #424]	; (8008b7c <HAL_I2C_Init+0x274>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d802      	bhi.n	80089dc <HAL_I2C_Init+0xd4>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	3301      	adds	r3, #1
 80089da:	e009      	b.n	80089f0 <HAL_I2C_Init+0xe8>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80089e2:	fb02 f303 	mul.w	r3, r2, r3
 80089e6:	4a69      	ldr	r2, [pc, #420]	; (8008b8c <HAL_I2C_Init+0x284>)
 80089e8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ec:	099b      	lsrs	r3, r3, #6
 80089ee:	3301      	adds	r3, #1
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	430b      	orrs	r3, r1
 80089f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	495c      	ldr	r1, [pc, #368]	; (8008b7c <HAL_I2C_Init+0x274>)
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	d819      	bhi.n	8008a44 <HAL_I2C_Init+0x13c>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	1e59      	subs	r1, r3, #1
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a1e:	1c59      	adds	r1, r3, #1
 8008a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a24:	400b      	ands	r3, r1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <HAL_I2C_Init+0x138>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1e59      	subs	r1, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a38:	3301      	adds	r3, #1
 8008a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a3e:	e051      	b.n	8008ae4 <HAL_I2C_Init+0x1dc>
 8008a40:	2304      	movs	r3, #4
 8008a42:	e04f      	b.n	8008ae4 <HAL_I2C_Init+0x1dc>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d111      	bne.n	8008a70 <HAL_I2C_Init+0x168>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	1e58      	subs	r0, r3, #1
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6859      	ldr	r1, [r3, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	440b      	add	r3, r1
 8008a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a5e:	3301      	adds	r3, #1
 8008a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	e012      	b.n	8008a96 <HAL_I2C_Init+0x18e>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	1e58      	subs	r0, r3, #1
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6859      	ldr	r1, [r3, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	0099      	lsls	r1, r3, #2
 8008a80:	440b      	add	r3, r1
 8008a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a86:	3301      	adds	r3, #1
 8008a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	bf0c      	ite	eq
 8008a90:	2301      	moveq	r3, #1
 8008a92:	2300      	movne	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <HAL_I2C_Init+0x196>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e022      	b.n	8008ae4 <HAL_I2C_Init+0x1dc>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10e      	bne.n	8008ac4 <HAL_I2C_Init+0x1bc>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	1e58      	subs	r0, r3, #1
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6859      	ldr	r1, [r3, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	440b      	add	r3, r1
 8008ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ab8:	3301      	adds	r3, #1
 8008aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac2:	e00f      	b.n	8008ae4 <HAL_I2C_Init+0x1dc>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	1e58      	subs	r0, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6859      	ldr	r1, [r3, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	440b      	add	r3, r1
 8008ad2:	0099      	lsls	r1, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ada:	3301      	adds	r3, #1
 8008adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	6809      	ldr	r1, [r1, #0]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69da      	ldr	r2, [r3, #28]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6911      	ldr	r1, [r2, #16]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	68d2      	ldr	r2, [r2, #12]
 8008b1e:	4311      	orrs	r1, r2
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	430b      	orrs	r3, r1
 8008b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	695a      	ldr	r2, [r3, #20]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f042 0201 	orr.w	r2, r2, #1
 8008b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	000186a0 	.word	0x000186a0
 8008b80:	001e847f 	.word	0x001e847f
 8008b84:	003d08ff 	.word	0x003d08ff
 8008b88:	431bde83 	.word	0x431bde83
 8008b8c:	10624dd3 	.word	0x10624dd3

08008b90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e021      	b.n	8008be6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2224      	movs	r2, #36	; 0x24
 8008ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fe fef6 	bl	80079ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	607a      	str	r2, [r7, #4]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	817b      	strh	r3, [r7, #10]
 8008c00:	4613      	mov	r3, r2
 8008c02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c04:	f7ff f85e 	bl	8007cc4 <HAL_GetTick>
 8008c08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	f040 80e0 	bne.w	8008dd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	2319      	movs	r3, #25
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4970      	ldr	r1, [pc, #448]	; (8008de4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fe5c 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008c2e:	2302      	movs	r3, #2
 8008c30:	e0d3      	b.n	8008dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_I2C_Master_Transmit+0x50>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e0cc      	b.n	8008dda <HAL_I2C_Master_Transmit+0x1ea>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d007      	beq.n	8008c66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 0201 	orr.w	r2, r2, #1
 8008c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2221      	movs	r2, #33	; 0x21
 8008c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2210      	movs	r2, #16
 8008c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	893a      	ldrh	r2, [r7, #8]
 8008c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4a50      	ldr	r2, [pc, #320]	; (8008de8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008ca6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008ca8:	8979      	ldrh	r1, [r7, #10]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	6a3a      	ldr	r2, [r7, #32]
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 fc16 	bl	80094e0 <I2C_MasterRequestWrite>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e08d      	b.n	8008dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	613b      	str	r3, [r7, #16]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	613b      	str	r3, [r7, #16]
 8008cd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008cd4:	e066      	b.n	8008da4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	6a39      	ldr	r1, [r7, #32]
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 ff1a 	bl	8009b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00d      	beq.n	8008d02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d107      	bne.n	8008cfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e06b      	b.n	8008dda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d11b      	bne.n	8008d78 <HAL_I2C_Master_Transmit+0x188>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d017      	beq.n	8008d78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	6a39      	ldr	r1, [r7, #32]
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 ff11 	bl	8009ba4 <I2C_WaitOnBTFFlagUntilTimeout>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00d      	beq.n	8008da4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d107      	bne.n	8008da0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e01a      	b.n	8008dda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d194      	bne.n	8008cd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e000      	b.n	8008dda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008dd8:	2302      	movs	r3, #2
  }
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	00100002 	.word	0x00100002
 8008de8:	ffff0000 	.word	0xffff0000

08008dec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	817b      	strh	r3, [r7, #10]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	813b      	strh	r3, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e06:	f7fe ff5d 	bl	8007cc4 <HAL_GetTick>
 8008e0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	f040 80d9 	bne.w	8008fcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	2319      	movs	r3, #25
 8008e20:	2201      	movs	r2, #1
 8008e22:	496d      	ldr	r1, [pc, #436]	; (8008fd8 <HAL_I2C_Mem_Write+0x1ec>)
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 fd5b 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008e30:	2302      	movs	r3, #2
 8008e32:	e0cc      	b.n	8008fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_I2C_Mem_Write+0x56>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e0c5      	b.n	8008fce <HAL_I2C_Mem_Write+0x1e2>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d007      	beq.n	8008e68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0201 	orr.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2221      	movs	r2, #33	; 0x21
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2240      	movs	r2, #64	; 0x40
 8008e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6a3a      	ldr	r2, [r7, #32]
 8008e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4a4d      	ldr	r2, [pc, #308]	; (8008fdc <HAL_I2C_Mem_Write+0x1f0>)
 8008ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008eaa:	88f8      	ldrh	r0, [r7, #6]
 8008eac:	893a      	ldrh	r2, [r7, #8]
 8008eae:	8979      	ldrh	r1, [r7, #10]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4603      	mov	r3, r0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fb92 	bl	80095e4 <I2C_RequestMemoryWrite>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d052      	beq.n	8008f6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e081      	b.n	8008fce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 fe20 	bl	8009b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00d      	beq.n	8008ef6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d107      	bne.n	8008ef2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e06b      	b.n	8008fce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d11b      	bne.n	8008f6c <HAL_I2C_Mem_Write+0x180>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d017      	beq.n	8008f6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f56:	3b01      	subs	r3, #1
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1aa      	bne.n	8008eca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 fe13 	bl	8009ba4 <I2C_WaitOnBTFFlagUntilTimeout>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00d      	beq.n	8008fa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f88:	2b04      	cmp	r3, #4
 8008f8a:	d107      	bne.n	8008f9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e016      	b.n	8008fce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e000      	b.n	8008fce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008fcc:	2302      	movs	r3, #2
  }
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	00100002 	.word	0x00100002
 8008fdc:	ffff0000 	.word	0xffff0000

08008fe0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08c      	sub	sp, #48	; 0x30
 8008fe4:	af02      	add	r7, sp, #8
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	4608      	mov	r0, r1
 8008fea:	4611      	mov	r1, r2
 8008fec:	461a      	mov	r2, r3
 8008fee:	4603      	mov	r3, r0
 8008ff0:	817b      	strh	r3, [r7, #10]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	813b      	strh	r3, [r7, #8]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ffe:	f7fe fe61 	bl	8007cc4 <HAL_GetTick>
 8009002:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b20      	cmp	r3, #32
 800900e:	f040 8244 	bne.w	800949a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	2319      	movs	r3, #25
 8009018:	2201      	movs	r2, #1
 800901a:	4982      	ldr	r1, [pc, #520]	; (8009224 <HAL_I2C_Mem_Read+0x244>)
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fc5f 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009028:	2302      	movs	r3, #2
 800902a:	e237      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009032:	2b01      	cmp	r3, #1
 8009034:	d101      	bne.n	800903a <HAL_I2C_Mem_Read+0x5a>
 8009036:	2302      	movs	r3, #2
 8009038:	e230      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b01      	cmp	r3, #1
 800904e:	d007      	beq.n	8009060 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0201 	orr.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800906e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2222      	movs	r2, #34	; 0x22
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2240      	movs	r2, #64	; 0x40
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009096:	b29a      	uxth	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4a62      	ldr	r2, [pc, #392]	; (8009228 <HAL_I2C_Mem_Read+0x248>)
 80090a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090a2:	88f8      	ldrh	r0, [r7, #6]
 80090a4:	893a      	ldrh	r2, [r7, #8]
 80090a6:	8979      	ldrh	r1, [r7, #10]
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	4603      	mov	r3, r0
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 fb2c 	bl	8009710 <I2C_RequestMemoryRead>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e1ec      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d113      	bne.n	80090f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	61fb      	str	r3, [r7, #28]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	e1c0      	b.n	8009474 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d11e      	bne.n	8009138 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009108:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800910a:	b672      	cpsid	i
}
 800910c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800910e:	2300      	movs	r3, #0
 8009110:	61bb      	str	r3, [r7, #24]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	61bb      	str	r3, [r7, #24]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009132:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009134:	b662      	cpsie	i
}
 8009136:	e035      	b.n	80091a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913c:	2b02      	cmp	r3, #2
 800913e:	d11e      	bne.n	800917e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800914e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009150:	b672      	cpsid	i
}
 8009152:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009178:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800917a:	b662      	cpsie	i
}
 800917c:	e012      	b.n	80091a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800918c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	613b      	str	r3, [r7, #16]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80091a4:	e166      	b.n	8009474 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	f200 811f 	bhi.w	80093ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d123      	bne.n	8009200 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fd39 	bl	8009c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e167      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	691a      	ldr	r2, [r3, #16]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	b2d2      	uxtb	r2, r2
 80091d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	3b01      	subs	r3, #1
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091fe:	e139      	b.n	8009474 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009204:	2b02      	cmp	r3, #2
 8009206:	d152      	bne.n	80092ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	2200      	movs	r2, #0
 8009210:	4906      	ldr	r1, [pc, #24]	; (800922c <HAL_I2C_Mem_Read+0x24c>)
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fb64 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d008      	beq.n	8009230 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e13c      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
 8009222:	bf00      	nop
 8009224:	00100002 	.word	0x00100002
 8009228:	ffff0000 	.word	0xffff0000
 800922c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009230:	b672      	cpsid	i
}
 8009232:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691a      	ldr	r2, [r3, #16]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	b2d2      	uxtb	r2, r2
 8009250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009260:	3b01      	subs	r3, #1
 8009262:	b29a      	uxth	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926c:	b29b      	uxth	r3, r3
 800926e:	3b01      	subs	r3, #1
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009276:	b662      	cpsie	i
}
 8009278:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009296:	3b01      	subs	r3, #1
 8009298:	b29a      	uxth	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	3b01      	subs	r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092ac:	e0e2      	b.n	8009474 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	2200      	movs	r2, #0
 80092b6:	497b      	ldr	r1, [pc, #492]	; (80094a4 <HAL_I2C_Mem_Read+0x4c4>)
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 fb11 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e0e9      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80092d8:	b672      	cpsid	i
}
 80092da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691a      	ldr	r2, [r3, #16]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800930e:	4b66      	ldr	r3, [pc, #408]	; (80094a8 <HAL_I2C_Mem_Read+0x4c8>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	08db      	lsrs	r3, r3, #3
 8009314:	4a65      	ldr	r2, [pc, #404]	; (80094ac <HAL_I2C_Mem_Read+0x4cc>)
 8009316:	fba2 2303 	umull	r2, r3, r2, r3
 800931a:	0a1a      	lsrs	r2, r3, #8
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	00da      	lsls	r2, r3, #3
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	3b01      	subs	r3, #1
 800932c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d118      	bne.n	8009366 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2220      	movs	r2, #32
 800933e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934e:	f043 0220 	orr.w	r2, r3, #32
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009356:	b662      	cpsie	i
}
 8009358:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e09a      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b04      	cmp	r3, #4
 8009372:	d1d9      	bne.n	8009328 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	3b01      	subs	r3, #1
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80093b6:	b662      	cpsie	i
}
 80093b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c4:	b2d2      	uxtb	r2, r2
 80093c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b29a      	uxth	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093ec:	e042      	b.n	8009474 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 fc1e 	bl	8009c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e04c      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691a      	ldr	r2, [r3, #16]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	b2d2      	uxtb	r2, r2
 800940e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941e:	3b01      	subs	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800942a:	b29b      	uxth	r3, r3
 800942c:	3b01      	subs	r3, #1
 800942e:	b29a      	uxth	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	f003 0304 	and.w	r3, r3, #4
 800943e:	2b04      	cmp	r3, #4
 8009440:	d118      	bne.n	8009474 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	691a      	ldr	r2, [r3, #16]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800945e:	3b01      	subs	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946a:	b29b      	uxth	r3, r3
 800946c:	3b01      	subs	r3, #1
 800946e:	b29a      	uxth	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009478:	2b00      	cmp	r3, #0
 800947a:	f47f ae94 	bne.w	80091a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2220      	movs	r2, #32
 8009482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	e000      	b.n	800949c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800949a:	2302      	movs	r3, #2
  }
}
 800949c:	4618      	mov	r0, r3
 800949e:	3728      	adds	r7, #40	; 0x28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	00010004 	.word	0x00010004
 80094a8:	20000944 	.word	0x20000944
 80094ac:	14f8b589 	.word	0x14f8b589

080094b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094be:	b2db      	uxtb	r3, r3
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bc80      	pop	{r7}
 80094c8:	4770      	bx	lr

080094ca <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	bc80      	pop	{r7}
 80094de:	4770      	bx	lr

080094e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af02      	add	r7, sp, #8
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	460b      	mov	r3, r1
 80094ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d006      	beq.n	800950a <I2C_MasterRequestWrite+0x2a>
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d003      	beq.n	800950a <I2C_MasterRequestWrite+0x2a>
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009508:	d108      	bne.n	800951c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e00b      	b.n	8009534 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009520:	2b12      	cmp	r3, #18
 8009522:	d107      	bne.n	8009534 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 f9cd 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00d      	beq.n	8009568 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955a:	d103      	bne.n	8009564 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e035      	b.n	80095d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009570:	d108      	bne.n	8009584 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009572:	897b      	ldrh	r3, [r7, #10]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	461a      	mov	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009580:	611a      	str	r2, [r3, #16]
 8009582:	e01b      	b.n	80095bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009584:	897b      	ldrh	r3, [r7, #10]
 8009586:	11db      	asrs	r3, r3, #7
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0306 	and.w	r3, r3, #6
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f063 030f 	orn	r3, r3, #15
 8009594:	b2da      	uxtb	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	490e      	ldr	r1, [pc, #56]	; (80095dc <I2C_MasterRequestWrite+0xfc>)
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f000 fa16 	bl	80099d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e010      	b.n	80095d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80095b2:	897b      	ldrh	r3, [r7, #10]
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	4907      	ldr	r1, [pc, #28]	; (80095e0 <I2C_MasterRequestWrite+0x100>)
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f000 fa06 	bl	80099d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e000      	b.n	80095d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	00010008 	.word	0x00010008
 80095e0:	00010002 	.word	0x00010002

080095e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af02      	add	r7, sp, #8
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	4608      	mov	r0, r1
 80095ee:	4611      	mov	r1, r2
 80095f0:	461a      	mov	r2, r3
 80095f2:	4603      	mov	r3, r0
 80095f4:	817b      	strh	r3, [r7, #10]
 80095f6:	460b      	mov	r3, r1
 80095f8:	813b      	strh	r3, [r7, #8]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800960c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	2200      	movs	r2, #0
 8009616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 f960 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00d      	beq.n	8009642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009634:	d103      	bne.n	800963e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800963c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e05f      	b.n	8009702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009642:	897b      	ldrh	r3, [r7, #10]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	6a3a      	ldr	r2, [r7, #32]
 8009656:	492d      	ldr	r1, [pc, #180]	; (800970c <I2C_RequestMemoryWrite+0x128>)
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 f9bb 	bl	80099d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e04c      	b.n	8009702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009668:	2300      	movs	r3, #0
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800967e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009680:	6a39      	ldr	r1, [r7, #32]
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fa46 	bl	8009b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00d      	beq.n	80096aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	2b04      	cmp	r3, #4
 8009694:	d107      	bne.n	80096a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e02b      	b.n	8009702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d105      	bne.n	80096bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096b0:	893b      	ldrh	r3, [r7, #8]
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	611a      	str	r2, [r3, #16]
 80096ba:	e021      	b.n	8009700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80096bc:	893b      	ldrh	r3, [r7, #8]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096cc:	6a39      	ldr	r1, [r7, #32]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fa20 	bl	8009b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00d      	beq.n	80096f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	2b04      	cmp	r3, #4
 80096e0:	d107      	bne.n	80096f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e005      	b.n	8009702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096f6:	893b      	ldrh	r3, [r7, #8]
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	00010002 	.word	0x00010002

08009710 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af02      	add	r7, sp, #8
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	4608      	mov	r0, r1
 800971a:	4611      	mov	r1, r2
 800971c:	461a      	mov	r2, r3
 800971e:	4603      	mov	r3, r0
 8009720:	817b      	strh	r3, [r7, #10]
 8009722:	460b      	mov	r3, r1
 8009724:	813b      	strh	r3, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009738:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	2200      	movs	r2, #0
 8009752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 f8c2 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00d      	beq.n	800977e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009770:	d103      	bne.n	800977a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009778:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e0aa      	b.n	80098d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800977e:	897b      	ldrh	r3, [r7, #10]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	461a      	mov	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800978c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	6a3a      	ldr	r2, [r7, #32]
 8009792:	4952      	ldr	r1, [pc, #328]	; (80098dc <I2C_RequestMemoryRead+0x1cc>)
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f91d 	bl	80099d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e097      	b.n	80098d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097bc:	6a39      	ldr	r1, [r7, #32]
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 f9a8 	bl	8009b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00d      	beq.n	80097e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ce:	2b04      	cmp	r3, #4
 80097d0:	d107      	bne.n	80097e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e076      	b.n	80098d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097e6:	88fb      	ldrh	r3, [r7, #6]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d105      	bne.n	80097f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80097ec:	893b      	ldrh	r3, [r7, #8]
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	611a      	str	r2, [r3, #16]
 80097f6:	e021      	b.n	800983c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80097f8:	893b      	ldrh	r3, [r7, #8]
 80097fa:	0a1b      	lsrs	r3, r3, #8
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009808:	6a39      	ldr	r1, [r7, #32]
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 f982 	bl	8009b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00d      	beq.n	8009832 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	2b04      	cmp	r3, #4
 800981c:	d107      	bne.n	800982e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800982c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e050      	b.n	80098d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009832:	893b      	ldrh	r3, [r7, #8]
 8009834:	b2da      	uxtb	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800983c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983e:	6a39      	ldr	r1, [r7, #32]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f967 	bl	8009b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00d      	beq.n	8009868 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009850:	2b04      	cmp	r3, #4
 8009852:	d107      	bne.n	8009864 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e035      	b.n	80098d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009876:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	2200      	movs	r2, #0
 8009880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 f82b 	bl	80098e0 <I2C_WaitOnFlagUntilTimeout>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00d      	beq.n	80098ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989e:	d103      	bne.n	80098a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e013      	b.n	80098d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80098ac:	897b      	ldrh	r3, [r7, #10]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f043 0301 	orr.w	r3, r3, #1
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	6a3a      	ldr	r2, [r7, #32]
 80098c0:	4906      	ldr	r1, [pc, #24]	; (80098dc <I2C_RequestMemoryRead+0x1cc>)
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 f886 	bl	80099d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	00010002 	.word	0x00010002

080098e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	4613      	mov	r3, r2
 80098ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098f0:	e048      	b.n	8009984 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f8:	d044      	beq.n	8009984 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098fa:	f7fe f9e3 	bl	8007cc4 <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d302      	bcc.n	8009910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d139      	bne.n	8009984 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	0c1b      	lsrs	r3, r3, #16
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b01      	cmp	r3, #1
 8009918:	d10d      	bne.n	8009936 <I2C_WaitOnFlagUntilTimeout+0x56>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	43da      	mvns	r2, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	4013      	ands	r3, r2
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	bf0c      	ite	eq
 800992c:	2301      	moveq	r3, #1
 800992e:	2300      	movne	r3, #0
 8009930:	b2db      	uxtb	r3, r3
 8009932:	461a      	mov	r2, r3
 8009934:	e00c      	b.n	8009950 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	43da      	mvns	r2, r3
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	4013      	ands	r3, r2
 8009942:	b29b      	uxth	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	bf0c      	ite	eq
 8009948:	2301      	moveq	r3, #1
 800994a:	2300      	movne	r3, #0
 800994c:	b2db      	uxtb	r3, r3
 800994e:	461a      	mov	r2, r3
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	429a      	cmp	r2, r3
 8009954:	d116      	bne.n	8009984 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2220      	movs	r2, #32
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009970:	f043 0220 	orr.w	r2, r3, #32
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e023      	b.n	80099cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b01      	cmp	r3, #1
 800998c:	d10d      	bne.n	80099aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	43da      	mvns	r2, r3
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	4013      	ands	r3, r2
 800999a:	b29b      	uxth	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	bf0c      	ite	eq
 80099a0:	2301      	moveq	r3, #1
 80099a2:	2300      	movne	r3, #0
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	461a      	mov	r2, r3
 80099a8:	e00c      	b.n	80099c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	43da      	mvns	r2, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	4013      	ands	r3, r2
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bf0c      	ite	eq
 80099bc:	2301      	moveq	r3, #1
 80099be:	2300      	movne	r3, #0
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	461a      	mov	r2, r3
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d093      	beq.n	80098f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099e2:	e071      	b.n	8009ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099f2:	d123      	bne.n	8009a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	f043 0204 	orr.w	r2, r3, #4
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e067      	b.n	8009b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a42:	d041      	beq.n	8009ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a44:	f7fe f93e 	bl	8007cc4 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d302      	bcc.n	8009a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d136      	bne.n	8009ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	0c1b      	lsrs	r3, r3, #16
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d10c      	bne.n	8009a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	43da      	mvns	r2, r3
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bf14      	ite	ne
 8009a76:	2301      	movne	r3, #1
 8009a78:	2300      	moveq	r3, #0
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	e00b      	b.n	8009a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	43da      	mvns	r2, r3
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	4013      	ands	r3, r2
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bf14      	ite	ne
 8009a90:	2301      	movne	r3, #1
 8009a92:	2300      	moveq	r3, #0
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d016      	beq.n	8009ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab4:	f043 0220 	orr.w	r2, r3, #32
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e021      	b.n	8009b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	0c1b      	lsrs	r3, r3, #16
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d10c      	bne.n	8009aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	43da      	mvns	r2, r3
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	4013      	ands	r3, r2
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bf14      	ite	ne
 8009ae4:	2301      	movne	r3, #1
 8009ae6:	2300      	moveq	r3, #0
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	e00b      	b.n	8009b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	43da      	mvns	r2, r3
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4013      	ands	r3, r2
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	bf14      	ite	ne
 8009afe:	2301      	movne	r3, #1
 8009b00:	2300      	moveq	r3, #0
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f47f af6d 	bne.w	80099e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b20:	e034      	b.n	8009b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f8e3 	bl	8009cee <I2C_IsAcknowledgeFailed>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e034      	b.n	8009b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b38:	d028      	beq.n	8009b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b3a:	f7fe f8c3 	bl	8007cc4 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d302      	bcc.n	8009b50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d11d      	bne.n	8009b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b5a:	2b80      	cmp	r3, #128	; 0x80
 8009b5c:	d016      	beq.n	8009b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2220      	movs	r2, #32
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b78:	f043 0220 	orr.w	r2, r3, #32
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e007      	b.n	8009b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b96:	2b80      	cmp	r3, #128	; 0x80
 8009b98:	d1c3      	bne.n	8009b22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bb0:	e034      	b.n	8009c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 f89b 	bl	8009cee <I2C_IsAcknowledgeFailed>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e034      	b.n	8009c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc8:	d028      	beq.n	8009c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bca:	f7fe f87b 	bl	8007cc4 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d302      	bcc.n	8009be0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d11d      	bne.n	8009c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	f003 0304 	and.w	r3, r3, #4
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	d016      	beq.n	8009c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c08:	f043 0220 	orr.w	r2, r3, #32
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e007      	b.n	8009c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d1c3      	bne.n	8009bb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009c40:	e049      	b.n	8009cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d119      	bne.n	8009c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f06f 0210 	mvn.w	r2, #16
 8009c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e030      	b.n	8009ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c84:	f7fe f81e 	bl	8007cc4 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d302      	bcc.n	8009c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d11d      	bne.n	8009cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	695b      	ldr	r3, [r3, #20]
 8009ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca4:	2b40      	cmp	r3, #64	; 0x40
 8009ca6:	d016      	beq.n	8009cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	f043 0220 	orr.w	r2, r3, #32
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e007      	b.n	8009ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce0:	2b40      	cmp	r3, #64	; 0x40
 8009ce2:	d1ae      	bne.n	8009c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d04:	d11b      	bne.n	8009d3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	f043 0204 	orr.w	r2, r3, #4
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e000      	b.n	8009d40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr
	...

08009d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e272      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 8087 	beq.w	8009e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d6c:	4b92      	ldr	r3, [pc, #584]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f003 030c 	and.w	r3, r3, #12
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	d00c      	beq.n	8009d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009d78:	4b8f      	ldr	r3, [pc, #572]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f003 030c 	and.w	r3, r3, #12
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d112      	bne.n	8009daa <HAL_RCC_OscConfig+0x5e>
 8009d84:	4b8c      	ldr	r3, [pc, #560]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d90:	d10b      	bne.n	8009daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d92:	4b89      	ldr	r3, [pc, #548]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d06c      	beq.n	8009e78 <HAL_RCC_OscConfig+0x12c>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d168      	bne.n	8009e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e24c      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db2:	d106      	bne.n	8009dc2 <HAL_RCC_OscConfig+0x76>
 8009db4:	4b80      	ldr	r3, [pc, #512]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a7f      	ldr	r2, [pc, #508]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e02e      	b.n	8009e20 <HAL_RCC_OscConfig+0xd4>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10c      	bne.n	8009de4 <HAL_RCC_OscConfig+0x98>
 8009dca:	4b7b      	ldr	r3, [pc, #492]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a7a      	ldr	r2, [pc, #488]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	4b78      	ldr	r3, [pc, #480]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a77      	ldr	r2, [pc, #476]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	e01d      	b.n	8009e20 <HAL_RCC_OscConfig+0xd4>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dec:	d10c      	bne.n	8009e08 <HAL_RCC_OscConfig+0xbc>
 8009dee:	4b72      	ldr	r3, [pc, #456]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a71      	ldr	r2, [pc, #452]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	4b6f      	ldr	r3, [pc, #444]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a6e      	ldr	r2, [pc, #440]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	e00b      	b.n	8009e20 <HAL_RCC_OscConfig+0xd4>
 8009e08:	4b6b      	ldr	r3, [pc, #428]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a6a      	ldr	r2, [pc, #424]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	4b68      	ldr	r3, [pc, #416]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a67      	ldr	r2, [pc, #412]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d013      	beq.n	8009e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e28:	f7fd ff4c 	bl	8007cc4 <HAL_GetTick>
 8009e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e30:	f7fd ff48 	bl	8007cc4 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b64      	cmp	r3, #100	; 0x64
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e200      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e42:	4b5d      	ldr	r3, [pc, #372]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <HAL_RCC_OscConfig+0xe4>
 8009e4e:	e014      	b.n	8009e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e50:	f7fd ff38 	bl	8007cc4 <HAL_GetTick>
 8009e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e56:	e008      	b.n	8009e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e58:	f7fd ff34 	bl	8007cc4 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b64      	cmp	r3, #100	; 0x64
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e1ec      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e6a:	4b53      	ldr	r3, [pc, #332]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1f0      	bne.n	8009e58 <HAL_RCC_OscConfig+0x10c>
 8009e76:	e000      	b.n	8009e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d063      	beq.n	8009f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e86:	4b4c      	ldr	r3, [pc, #304]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f003 030c 	and.w	r3, r3, #12
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00b      	beq.n	8009eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009e92:	4b49      	ldr	r3, [pc, #292]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f003 030c 	and.w	r3, r3, #12
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	d11c      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x18c>
 8009e9e:	4b46      	ldr	r3, [pc, #280]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d116      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009eaa:	4b43      	ldr	r3, [pc, #268]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x176>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d001      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e1c0      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ec2:	4b3d      	ldr	r3, [pc, #244]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	4939      	ldr	r1, [pc, #228]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ed6:	e03a      	b.n	8009f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d020      	beq.n	8009f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ee0:	4b36      	ldr	r3, [pc, #216]	; (8009fbc <HAL_RCC_OscConfig+0x270>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ee6:	f7fd feed 	bl	8007cc4 <HAL_GetTick>
 8009eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eec:	e008      	b.n	8009f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009eee:	f7fd fee9 	bl	8007cc4 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d901      	bls.n	8009f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e1a1      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f00:	4b2d      	ldr	r3, [pc, #180]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0f0      	beq.n	8009eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f0c:	4b2a      	ldr	r3, [pc, #168]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	4927      	ldr	r1, [pc, #156]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	600b      	str	r3, [r1, #0]
 8009f20:	e015      	b.n	8009f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f22:	4b26      	ldr	r3, [pc, #152]	; (8009fbc <HAL_RCC_OscConfig+0x270>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f28:	f7fd fecc 	bl	8007cc4 <HAL_GetTick>
 8009f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f30:	f7fd fec8 	bl	8007cc4 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e180      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f42:	4b1d      	ldr	r3, [pc, #116]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f0      	bne.n	8009f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d03a      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d019      	beq.n	8009f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f62:	4b17      	ldr	r3, [pc, #92]	; (8009fc0 <HAL_RCC_OscConfig+0x274>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f68:	f7fd feac 	bl	8007cc4 <HAL_GetTick>
 8009f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f6e:	e008      	b.n	8009f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f70:	f7fd fea8 	bl	8007cc4 <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e160      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f82:	4b0d      	ldr	r3, [pc, #52]	; (8009fb8 <HAL_RCC_OscConfig+0x26c>)
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f0      	beq.n	8009f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009f8e:	2001      	movs	r0, #1
 8009f90:	f000 face 	bl	800a530 <RCC_Delay>
 8009f94:	e01c      	b.n	8009fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f96:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <HAL_RCC_OscConfig+0x274>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f9c:	f7fd fe92 	bl	8007cc4 <HAL_GetTick>
 8009fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fa2:	e00f      	b.n	8009fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fa4:	f7fd fe8e 	bl	8007cc4 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d908      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e146      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
 8009fb6:	bf00      	nop
 8009fb8:	40021000 	.word	0x40021000
 8009fbc:	42420000 	.word	0x42420000
 8009fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fc4:	4b92      	ldr	r3, [pc, #584]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e9      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80a6 	beq.w	800a12a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fe2:	4b8b      	ldr	r3, [pc, #556]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10d      	bne.n	800a00a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fee:	4b88      	ldr	r3, [pc, #544]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	4a87      	ldr	r2, [pc, #540]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ff8:	61d3      	str	r3, [r2, #28]
 8009ffa:	4b85      	ldr	r3, [pc, #532]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a002:	60bb      	str	r3, [r7, #8]
 800a004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a006:	2301      	movs	r3, #1
 800a008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a00a:	4b82      	ldr	r3, [pc, #520]	; (800a214 <HAL_RCC_OscConfig+0x4c8>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a012:	2b00      	cmp	r3, #0
 800a014:	d118      	bne.n	800a048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a016:	4b7f      	ldr	r3, [pc, #508]	; (800a214 <HAL_RCC_OscConfig+0x4c8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a7e      	ldr	r2, [pc, #504]	; (800a214 <HAL_RCC_OscConfig+0x4c8>)
 800a01c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a022:	f7fd fe4f 	bl	8007cc4 <HAL_GetTick>
 800a026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a028:	e008      	b.n	800a03c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a02a:	f7fd fe4b 	bl	8007cc4 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b64      	cmp	r3, #100	; 0x64
 800a036:	d901      	bls.n	800a03c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e103      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a03c:	4b75      	ldr	r3, [pc, #468]	; (800a214 <HAL_RCC_OscConfig+0x4c8>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0f0      	beq.n	800a02a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d106      	bne.n	800a05e <HAL_RCC_OscConfig+0x312>
 800a050:	4b6f      	ldr	r3, [pc, #444]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	4a6e      	ldr	r2, [pc, #440]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	6213      	str	r3, [r2, #32]
 800a05c:	e02d      	b.n	800a0ba <HAL_RCC_OscConfig+0x36e>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10c      	bne.n	800a080 <HAL_RCC_OscConfig+0x334>
 800a066:	4b6a      	ldr	r3, [pc, #424]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	4a69      	ldr	r2, [pc, #420]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a06c:	f023 0301 	bic.w	r3, r3, #1
 800a070:	6213      	str	r3, [r2, #32]
 800a072:	4b67      	ldr	r3, [pc, #412]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	4a66      	ldr	r2, [pc, #408]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a078:	f023 0304 	bic.w	r3, r3, #4
 800a07c:	6213      	str	r3, [r2, #32]
 800a07e:	e01c      	b.n	800a0ba <HAL_RCC_OscConfig+0x36e>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	2b05      	cmp	r3, #5
 800a086:	d10c      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x356>
 800a088:	4b61      	ldr	r3, [pc, #388]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	4a60      	ldr	r2, [pc, #384]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a08e:	f043 0304 	orr.w	r3, r3, #4
 800a092:	6213      	str	r3, [r2, #32]
 800a094:	4b5e      	ldr	r3, [pc, #376]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	4a5d      	ldr	r2, [pc, #372]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a09a:	f043 0301 	orr.w	r3, r3, #1
 800a09e:	6213      	str	r3, [r2, #32]
 800a0a0:	e00b      	b.n	800a0ba <HAL_RCC_OscConfig+0x36e>
 800a0a2:	4b5b      	ldr	r3, [pc, #364]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	4a5a      	ldr	r2, [pc, #360]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0a8:	f023 0301 	bic.w	r3, r3, #1
 800a0ac:	6213      	str	r3, [r2, #32]
 800a0ae:	4b58      	ldr	r3, [pc, #352]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	4a57      	ldr	r2, [pc, #348]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0b4:	f023 0304 	bic.w	r3, r3, #4
 800a0b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d015      	beq.n	800a0ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0c2:	f7fd fdff 	bl	8007cc4 <HAL_GetTick>
 800a0c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0c8:	e00a      	b.n	800a0e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0ca:	f7fd fdfb 	bl	8007cc4 <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d901      	bls.n	800a0e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e0b1      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0e0:	4b4b      	ldr	r3, [pc, #300]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0ee      	beq.n	800a0ca <HAL_RCC_OscConfig+0x37e>
 800a0ec:	e014      	b.n	800a118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0ee:	f7fd fde9 	bl	8007cc4 <HAL_GetTick>
 800a0f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0f4:	e00a      	b.n	800a10c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0f6:	f7fd fde5 	bl	8007cc4 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	f241 3288 	movw	r2, #5000	; 0x1388
 800a104:	4293      	cmp	r3, r2
 800a106:	d901      	bls.n	800a10c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e09b      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a10c:	4b40      	ldr	r3, [pc, #256]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1ee      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d105      	bne.n	800a12a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a11e:	4b3c      	ldr	r3, [pc, #240]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	4a3b      	ldr	r2, [pc, #236]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 8087 	beq.w	800a242 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a134:	4b36      	ldr	r3, [pc, #216]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f003 030c 	and.w	r3, r3, #12
 800a13c:	2b08      	cmp	r3, #8
 800a13e:	d061      	beq.n	800a204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d146      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a148:	4b33      	ldr	r3, [pc, #204]	; (800a218 <HAL_RCC_OscConfig+0x4cc>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a14e:	f7fd fdb9 	bl	8007cc4 <HAL_GetTick>
 800a152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a154:	e008      	b.n	800a168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a156:	f7fd fdb5 	bl	8007cc4 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d901      	bls.n	800a168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e06d      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a168:	4b29      	ldr	r3, [pc, #164]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1f0      	bne.n	800a156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a17c:	d108      	bne.n	800a190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a17e:	4b24      	ldr	r3, [pc, #144]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	4921      	ldr	r1, [pc, #132]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a190:	4b1f      	ldr	r3, [pc, #124]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a19      	ldr	r1, [r3, #32]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	491b      	ldr	r1, [pc, #108]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1a8:	4b1b      	ldr	r3, [pc, #108]	; (800a218 <HAL_RCC_OscConfig+0x4cc>)
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1ae:	f7fd fd89 	bl	8007cc4 <HAL_GetTick>
 800a1b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1b6:	f7fd fd85 	bl	8007cc4 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e03d      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a1c8:	4b11      	ldr	r3, [pc, #68]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0f0      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x46a>
 800a1d4:	e035      	b.n	800a242 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1d6:	4b10      	ldr	r3, [pc, #64]	; (800a218 <HAL_RCC_OscConfig+0x4cc>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1dc:	f7fd fd72 	bl	8007cc4 <HAL_GetTick>
 800a1e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a1e2:	e008      	b.n	800a1f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1e4:	f7fd fd6e 	bl	8007cc4 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d901      	bls.n	800a1f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e026      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a1f6:	4b06      	ldr	r3, [pc, #24]	; (800a210 <HAL_RCC_OscConfig+0x4c4>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f0      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x498>
 800a202:	e01e      	b.n	800a242 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d107      	bne.n	800a21c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e019      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
 800a210:	40021000 	.word	0x40021000
 800a214:	40007000 	.word	0x40007000
 800a218:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a21c:	4b0b      	ldr	r3, [pc, #44]	; (800a24c <HAL_RCC_OscConfig+0x500>)
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d106      	bne.n	800a23e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d001      	beq.n	800a242 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	40021000 	.word	0x40021000

0800a250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e0d0      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a264:	4b6a      	ldr	r3, [pc, #424]	; (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d910      	bls.n	800a294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a272:	4b67      	ldr	r3, [pc, #412]	; (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f023 0207 	bic.w	r2, r3, #7
 800a27a:	4965      	ldr	r1, [pc, #404]	; (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	4313      	orrs	r3, r2
 800a280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a282:	4b63      	ldr	r3, [pc, #396]	; (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d001      	beq.n	800a294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e0b8      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d020      	beq.n	800a2e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2ac:	4b59      	ldr	r3, [pc, #356]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	4a58      	ldr	r2, [pc, #352]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a2b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0308 	and.w	r3, r3, #8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a2c4:	4b53      	ldr	r3, [pc, #332]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	4a52      	ldr	r2, [pc, #328]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a2ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2d0:	4b50      	ldr	r3, [pc, #320]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	494d      	ldr	r1, [pc, #308]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d040      	beq.n	800a370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d107      	bne.n	800a306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2f6:	4b47      	ldr	r3, [pc, #284]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d115      	bne.n	800a32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e07f      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d107      	bne.n	800a31e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a30e:	4b41      	ldr	r3, [pc, #260]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d109      	bne.n	800a32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e073      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a31e:	4b3d      	ldr	r3, [pc, #244]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e06b      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a32e:	4b39      	ldr	r3, [pc, #228]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f023 0203 	bic.w	r2, r3, #3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	4936      	ldr	r1, [pc, #216]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a340:	f7fd fcc0 	bl	8007cc4 <HAL_GetTick>
 800a344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a346:	e00a      	b.n	800a35e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a348:	f7fd fcbc 	bl	8007cc4 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	f241 3288 	movw	r2, #5000	; 0x1388
 800a356:	4293      	cmp	r3, r2
 800a358:	d901      	bls.n	800a35e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e053      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a35e:	4b2d      	ldr	r3, [pc, #180]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f003 020c 	and.w	r2, r3, #12
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d1eb      	bne.n	800a348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0307 	and.w	r3, r3, #7
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d210      	bcs.n	800a3a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a37e:	4b24      	ldr	r3, [pc, #144]	; (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f023 0207 	bic.w	r2, r3, #7
 800a386:	4922      	ldr	r1, [pc, #136]	; (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a38e:	4b20      	ldr	r3, [pc, #128]	; (800a410 <HAL_RCC_ClockConfig+0x1c0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d001      	beq.n	800a3a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e032      	b.n	800a406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d008      	beq.n	800a3be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3ac:	4b19      	ldr	r3, [pc, #100]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	4916      	ldr	r1, [pc, #88]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d009      	beq.n	800a3de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a3ca:	4b12      	ldr	r3, [pc, #72]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	490e      	ldr	r1, [pc, #56]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a3de:	f000 f821 	bl	800a424 <HAL_RCC_GetSysClockFreq>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	4b0b      	ldr	r3, [pc, #44]	; (800a414 <HAL_RCC_ClockConfig+0x1c4>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	091b      	lsrs	r3, r3, #4
 800a3ea:	f003 030f 	and.w	r3, r3, #15
 800a3ee:	490a      	ldr	r1, [pc, #40]	; (800a418 <HAL_RCC_ClockConfig+0x1c8>)
 800a3f0:	5ccb      	ldrb	r3, [r1, r3]
 800a3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f6:	4a09      	ldr	r2, [pc, #36]	; (800a41c <HAL_RCC_ClockConfig+0x1cc>)
 800a3f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a3fa:	4b09      	ldr	r3, [pc, #36]	; (800a420 <HAL_RCC_ClockConfig+0x1d0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fd fc1e 	bl	8007c40 <HAL_InitTick>

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	40022000 	.word	0x40022000
 800a414:	40021000 	.word	0x40021000
 800a418:	0800e858 	.word	0x0800e858
 800a41c:	20000944 	.word	0x20000944
 800a420:	20000948 	.word	0x20000948

0800a424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	2300      	movs	r3, #0
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	2300      	movs	r3, #0
 800a438:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a43e:	4b1e      	ldr	r3, [pc, #120]	; (800a4b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 030c 	and.w	r3, r3, #12
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	d002      	beq.n	800a454 <HAL_RCC_GetSysClockFreq+0x30>
 800a44e:	2b08      	cmp	r3, #8
 800a450:	d003      	beq.n	800a45a <HAL_RCC_GetSysClockFreq+0x36>
 800a452:	e027      	b.n	800a4a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a454:	4b19      	ldr	r3, [pc, #100]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a456:	613b      	str	r3, [r7, #16]
      break;
 800a458:	e027      	b.n	800a4aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	0c9b      	lsrs	r3, r3, #18
 800a45e:	f003 030f 	and.w	r3, r3, #15
 800a462:	4a17      	ldr	r2, [pc, #92]	; (800a4c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a464:	5cd3      	ldrb	r3, [r2, r3]
 800a466:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d010      	beq.n	800a494 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a472:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	0c5b      	lsrs	r3, r3, #17
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	4a11      	ldr	r2, [pc, #68]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a47e:	5cd3      	ldrb	r3, [r2, r3]
 800a480:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a0d      	ldr	r2, [pc, #52]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a486:	fb03 f202 	mul.w	r2, r3, r2
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	e004      	b.n	800a49e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a0c      	ldr	r2, [pc, #48]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a498:	fb02 f303 	mul.w	r3, r2, r3
 800a49c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	613b      	str	r3, [r7, #16]
      break;
 800a4a2:	e002      	b.n	800a4aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a4a4:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a4a6:	613b      	str	r3, [r7, #16]
      break;
 800a4a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4aa:	693b      	ldr	r3, [r7, #16]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	371c      	adds	r7, #28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bc80      	pop	{r7}
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	40021000 	.word	0x40021000
 800a4bc:	007a1200 	.word	0x007a1200
 800a4c0:	0800e870 	.word	0x0800e870
 800a4c4:	0800e880 	.word	0x0800e880
 800a4c8:	003d0900 	.word	0x003d0900

0800a4cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4d0:	4b02      	ldr	r3, [pc, #8]	; (800a4dc <HAL_RCC_GetHCLKFreq+0x10>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bc80      	pop	{r7}
 800a4da:	4770      	bx	lr
 800a4dc:	20000944 	.word	0x20000944

0800a4e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a4e4:	f7ff fff2 	bl	800a4cc <HAL_RCC_GetHCLKFreq>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	4b05      	ldr	r3, [pc, #20]	; (800a500 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	0a1b      	lsrs	r3, r3, #8
 800a4f0:	f003 0307 	and.w	r3, r3, #7
 800a4f4:	4903      	ldr	r1, [pc, #12]	; (800a504 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4f6:	5ccb      	ldrb	r3, [r1, r3]
 800a4f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	40021000 	.word	0x40021000
 800a504:	0800e868 	.word	0x0800e868

0800a508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a50c:	f7ff ffde 	bl	800a4cc <HAL_RCC_GetHCLKFreq>
 800a510:	4602      	mov	r2, r0
 800a512:	4b05      	ldr	r3, [pc, #20]	; (800a528 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	0adb      	lsrs	r3, r3, #11
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	4903      	ldr	r1, [pc, #12]	; (800a52c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a51e:	5ccb      	ldrb	r3, [r1, r3]
 800a520:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a524:	4618      	mov	r0, r3
 800a526:	bd80      	pop	{r7, pc}
 800a528:	40021000 	.word	0x40021000
 800a52c:	0800e868 	.word	0x0800e868

0800a530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a538:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <RCC_Delay+0x34>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a0a      	ldr	r2, [pc, #40]	; (800a568 <RCC_Delay+0x38>)
 800a53e:	fba2 2303 	umull	r2, r3, r2, r3
 800a542:	0a5b      	lsrs	r3, r3, #9
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	fb02 f303 	mul.w	r3, r2, r3
 800a54a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a54c:	bf00      	nop
  }
  while (Delay --);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1e5a      	subs	r2, r3, #1
 800a552:	60fa      	str	r2, [r7, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1f9      	bne.n	800a54c <RCC_Delay+0x1c>
}
 800a558:	bf00      	nop
 800a55a:	bf00      	nop
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	bc80      	pop	{r7}
 800a562:	4770      	bx	lr
 800a564:	20000944 	.word	0x20000944
 800a568:	10624dd3 	.word	0x10624dd3

0800a56c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e041      	b.n	800a602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d106      	bne.n	800a598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7fd fa2c 	bl	80079f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2202      	movs	r2, #2
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f000 fa82 	bl	800aab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d001      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e044      	b.n	800a6ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2202      	movs	r2, #2
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f042 0201 	orr.w	r2, r2, #1
 800a63a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a1d      	ldr	r2, [pc, #116]	; (800a6b8 <HAL_TIM_Base_Start_IT+0xac>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d018      	beq.n	800a678 <HAL_TIM_Base_Start_IT+0x6c>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a1c      	ldr	r2, [pc, #112]	; (800a6bc <HAL_TIM_Base_Start_IT+0xb0>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d013      	beq.n	800a678 <HAL_TIM_Base_Start_IT+0x6c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a658:	d00e      	beq.n	800a678 <HAL_TIM_Base_Start_IT+0x6c>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a18      	ldr	r2, [pc, #96]	; (800a6c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d009      	beq.n	800a678 <HAL_TIM_Base_Start_IT+0x6c>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a16      	ldr	r2, [pc, #88]	; (800a6c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d004      	beq.n	800a678 <HAL_TIM_Base_Start_IT+0x6c>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a15      	ldr	r2, [pc, #84]	; (800a6c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d111      	bne.n	800a69c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f003 0307 	and.w	r3, r3, #7
 800a682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b06      	cmp	r3, #6
 800a688:	d010      	beq.n	800a6ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f042 0201 	orr.w	r2, r2, #1
 800a698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a69a:	e007      	b.n	800a6ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f042 0201 	orr.w	r2, r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bc80      	pop	{r7}
 800a6b6:	4770      	bx	lr
 800a6b8:	40012c00 	.word	0x40012c00
 800a6bc:	40013400 	.word	0x40013400
 800a6c0:	40000400 	.word	0x40000400
 800a6c4:	40000800 	.word	0x40000800
 800a6c8:	40000c00 	.word	0x40000c00

0800a6cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d122      	bne.n	800a728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d11b      	bne.n	800a728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f06f 0202 	mvn.w	r2, #2
 800a6f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	f003 0303 	and.w	r3, r3, #3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f9b4 	bl	800aa7c <HAL_TIM_IC_CaptureCallback>
 800a714:	e005      	b.n	800a722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f9a7 	bl	800aa6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f9b6 	bl	800aa8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	f003 0304 	and.w	r3, r3, #4
 800a732:	2b04      	cmp	r3, #4
 800a734:	d122      	bne.n	800a77c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b04      	cmp	r3, #4
 800a742:	d11b      	bne.n	800a77c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f06f 0204 	mvn.w	r2, #4
 800a74c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2202      	movs	r2, #2
 800a752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f98a 	bl	800aa7c <HAL_TIM_IC_CaptureCallback>
 800a768:	e005      	b.n	800a776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f97d 	bl	800aa6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f98c 	bl	800aa8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f003 0308 	and.w	r3, r3, #8
 800a786:	2b08      	cmp	r3, #8
 800a788:	d122      	bne.n	800a7d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	f003 0308 	and.w	r3, r3, #8
 800a794:	2b08      	cmp	r3, #8
 800a796:	d11b      	bne.n	800a7d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f06f 0208 	mvn.w	r2, #8
 800a7a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2204      	movs	r2, #4
 800a7a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	f003 0303 	and.w	r3, r3, #3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f960 	bl	800aa7c <HAL_TIM_IC_CaptureCallback>
 800a7bc:	e005      	b.n	800a7ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f953 	bl	800aa6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f962 	bl	800aa8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	f003 0310 	and.w	r3, r3, #16
 800a7da:	2b10      	cmp	r3, #16
 800a7dc:	d122      	bne.n	800a824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f003 0310 	and.w	r3, r3, #16
 800a7e8:	2b10      	cmp	r3, #16
 800a7ea:	d11b      	bne.n	800a824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f06f 0210 	mvn.w	r2, #16
 800a7f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2208      	movs	r2, #8
 800a7fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f936 	bl	800aa7c <HAL_TIM_IC_CaptureCallback>
 800a810:	e005      	b.n	800a81e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f929 	bl	800aa6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f938 	bl	800aa8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d10e      	bne.n	800a850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d107      	bne.n	800a850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f06f 0201 	mvn.w	r2, #1
 800a848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7fc fd38 	bl	80072c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85a:	2b80      	cmp	r3, #128	; 0x80
 800a85c:	d10e      	bne.n	800a87c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a868:	2b80      	cmp	r3, #128	; 0x80
 800a86a:	d107      	bne.n	800a87c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 faa1 	bl	800adbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a886:	2b40      	cmp	r3, #64	; 0x40
 800a888:	d10e      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a894:	2b40      	cmp	r3, #64	; 0x40
 800a896:	d107      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f8fc 	bl	800aaa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d10e      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f003 0320 	and.w	r3, r3, #32
 800a8c0:	2b20      	cmp	r3, #32
 800a8c2:	d107      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f06f 0220 	mvn.w	r2, #32
 800a8cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fa6c 	bl	800adac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <HAL_TIM_ConfigClockSource+0x1c>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e0b4      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x186>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a91e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a930:	d03e      	beq.n	800a9b0 <HAL_TIM_ConfigClockSource+0xd4>
 800a932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a936:	f200 8087 	bhi.w	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
 800a93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a93e:	f000 8086 	beq.w	800aa4e <HAL_TIM_ConfigClockSource+0x172>
 800a942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a946:	d87f      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
 800a948:	2b70      	cmp	r3, #112	; 0x70
 800a94a:	d01a      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0xa6>
 800a94c:	2b70      	cmp	r3, #112	; 0x70
 800a94e:	d87b      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
 800a950:	2b60      	cmp	r3, #96	; 0x60
 800a952:	d050      	beq.n	800a9f6 <HAL_TIM_ConfigClockSource+0x11a>
 800a954:	2b60      	cmp	r3, #96	; 0x60
 800a956:	d877      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
 800a958:	2b50      	cmp	r3, #80	; 0x50
 800a95a:	d03c      	beq.n	800a9d6 <HAL_TIM_ConfigClockSource+0xfa>
 800a95c:	2b50      	cmp	r3, #80	; 0x50
 800a95e:	d873      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
 800a960:	2b40      	cmp	r3, #64	; 0x40
 800a962:	d058      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x13a>
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d86f      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
 800a968:	2b30      	cmp	r3, #48	; 0x30
 800a96a:	d064      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x15a>
 800a96c:	2b30      	cmp	r3, #48	; 0x30
 800a96e:	d86b      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
 800a970:	2b20      	cmp	r3, #32
 800a972:	d060      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x15a>
 800a974:	2b20      	cmp	r3, #32
 800a976:	d867      	bhi.n	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d05c      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x15a>
 800a97c:	2b10      	cmp	r3, #16
 800a97e:	d05a      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x15a>
 800a980:	e062      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a992:	f000 f980 	bl	800ac96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	609a      	str	r2, [r3, #8]
      break;
 800a9ae:	e04f      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9c0:	f000 f969 	bl	800ac96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689a      	ldr	r2, [r3, #8]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9d2:	609a      	str	r2, [r3, #8]
      break;
 800a9d4:	e03c      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f000 f8e0 	bl	800aba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2150      	movs	r1, #80	; 0x50
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 f937 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800a9f4:	e02c      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa02:	461a      	mov	r2, r3
 800aa04:	f000 f8fe 	bl	800ac04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2160      	movs	r1, #96	; 0x60
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f927 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800aa14:	e01c      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa22:	461a      	mov	r2, r3
 800aa24:	f000 f8c0 	bl	800aba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2140      	movs	r1, #64	; 0x40
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 f917 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800aa34:	e00c      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4610      	mov	r0, r2
 800aa42:	f000 f90e 	bl	800ac62 <TIM_ITRx_SetConfig>
      break;
 800aa46:	e003      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa4c:	e000      	b.n	800aa50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aa4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa72:	bf00      	nop
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bc80      	pop	{r7}
 800aa8c:	4770      	bx	lr

0800aa8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bc80      	pop	{r7}
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bc80      	pop	{r7}
 800aab0:	4770      	bx	lr
	...

0800aab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a33      	ldr	r2, [pc, #204]	; (800ab94 <TIM_Base_SetConfig+0xe0>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d013      	beq.n	800aaf4 <TIM_Base_SetConfig+0x40>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a32      	ldr	r2, [pc, #200]	; (800ab98 <TIM_Base_SetConfig+0xe4>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00f      	beq.n	800aaf4 <TIM_Base_SetConfig+0x40>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aada:	d00b      	beq.n	800aaf4 <TIM_Base_SetConfig+0x40>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a2f      	ldr	r2, [pc, #188]	; (800ab9c <TIM_Base_SetConfig+0xe8>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d007      	beq.n	800aaf4 <TIM_Base_SetConfig+0x40>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a2e      	ldr	r2, [pc, #184]	; (800aba0 <TIM_Base_SetConfig+0xec>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d003      	beq.n	800aaf4 <TIM_Base_SetConfig+0x40>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a2d      	ldr	r2, [pc, #180]	; (800aba4 <TIM_Base_SetConfig+0xf0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d108      	bne.n	800ab06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a22      	ldr	r2, [pc, #136]	; (800ab94 <TIM_Base_SetConfig+0xe0>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d013      	beq.n	800ab36 <TIM_Base_SetConfig+0x82>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a21      	ldr	r2, [pc, #132]	; (800ab98 <TIM_Base_SetConfig+0xe4>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d00f      	beq.n	800ab36 <TIM_Base_SetConfig+0x82>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab1c:	d00b      	beq.n	800ab36 <TIM_Base_SetConfig+0x82>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a1e      	ldr	r2, [pc, #120]	; (800ab9c <TIM_Base_SetConfig+0xe8>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d007      	beq.n	800ab36 <TIM_Base_SetConfig+0x82>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a1d      	ldr	r2, [pc, #116]	; (800aba0 <TIM_Base_SetConfig+0xec>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d003      	beq.n	800ab36 <TIM_Base_SetConfig+0x82>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a1c      	ldr	r2, [pc, #112]	; (800aba4 <TIM_Base_SetConfig+0xf0>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d108      	bne.n	800ab48 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	689a      	ldr	r2, [r3, #8]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a09      	ldr	r2, [pc, #36]	; (800ab94 <TIM_Base_SetConfig+0xe0>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d003      	beq.n	800ab7c <TIM_Base_SetConfig+0xc8>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a08      	ldr	r2, [pc, #32]	; (800ab98 <TIM_Base_SetConfig+0xe4>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d103      	bne.n	800ab84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	691a      	ldr	r2, [r3, #16]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	615a      	str	r2, [r3, #20]
}
 800ab8a:	bf00      	nop
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bc80      	pop	{r7}
 800ab92:	4770      	bx	lr
 800ab94:	40012c00 	.word	0x40012c00
 800ab98:	40013400 	.word	0x40013400
 800ab9c:	40000400 	.word	0x40000400
 800aba0:	40000800 	.word	0x40000800
 800aba4:	40000c00 	.word	0x40000c00

0800aba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	f023 0201 	bic.w	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	011b      	lsls	r3, r3, #4
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f023 030a 	bic.w	r3, r3, #10
 800abe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bc80      	pop	{r7}
 800ac02:	4770      	bx	lr

0800ac04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a1b      	ldr	r3, [r3, #32]
 800ac14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	f023 0210 	bic.w	r2, r3, #16
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	031b      	lsls	r3, r3, #12
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	011b      	lsls	r3, r3, #4
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	621a      	str	r2, [r3, #32]
}
 800ac58:	bf00      	nop
 800ac5a:	371c      	adds	r7, #28
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bc80      	pop	{r7}
 800ac60:	4770      	bx	lr

0800ac62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	f043 0307 	orr.w	r3, r3, #7
 800ac84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	609a      	str	r2, [r3, #8]
}
 800ac8c:	bf00      	nop
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bc80      	pop	{r7}
 800ac94:	4770      	bx	lr

0800ac96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b087      	sub	sp, #28
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
 800aca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	021a      	lsls	r2, r3, #8
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	431a      	orrs	r2, r3
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	609a      	str	r2, [r3, #8]
}
 800acca:	bf00      	nop
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	bc80      	pop	{r7}
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d101      	bne.n	800acec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ace8:	2302      	movs	r3, #2
 800acea:	e050      	b.n	800ad8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a1b      	ldr	r2, [pc, #108]	; (800ad98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d018      	beq.n	800ad62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a19      	ldr	r2, [pc, #100]	; (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d013      	beq.n	800ad62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad42:	d00e      	beq.n	800ad62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a15      	ldr	r2, [pc, #84]	; (800ada0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d009      	beq.n	800ad62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a14      	ldr	r2, [pc, #80]	; (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d004      	beq.n	800ad62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a12      	ldr	r2, [pc, #72]	; (800ada8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d10c      	bne.n	800ad7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bc80      	pop	{r7}
 800ad96:	4770      	bx	lr
 800ad98:	40012c00 	.word	0x40012c00
 800ad9c:	40013400 	.word	0x40013400
 800ada0:	40000400 	.word	0x40000400
 800ada4:	40000800 	.word	0x40000800
 800ada8:	40000c00 	.word	0x40000c00

0800adac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	bc80      	pop	{r7}
 800adbc:	4770      	bx	lr

0800adbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	bc80      	pop	{r7}
 800adce:	4770      	bx	lr

0800add0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e042      	b.n	800ae68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7fc fe20 	bl	8007a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2224      	movs	r2, #36	; 0x24
 800ae00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fe03 	bl	800ba20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	691a      	ldr	r2, [r3, #16]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	695a      	ldr	r2, [r3, #20]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68da      	ldr	r2, [r3, #12]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2220      	movs	r2, #32
 800ae54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08a      	sub	sp, #40	; 0x28
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	603b      	str	r3, [r7, #0]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b20      	cmp	r3, #32
 800ae8e:	d16d      	bne.n	800af6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <HAL_UART_Transmit+0x2c>
 800ae96:	88fb      	ldrh	r3, [r7, #6]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e066      	b.n	800af6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2221      	movs	r2, #33	; 0x21
 800aeaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aeae:	f7fc ff09 	bl	8007cc4 <HAL_GetTick>
 800aeb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	88fa      	ldrh	r2, [r7, #6]
 800aeb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	88fa      	ldrh	r2, [r7, #6]
 800aebe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec8:	d108      	bne.n	800aedc <HAL_UART_Transmit+0x6c>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d104      	bne.n	800aedc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	61bb      	str	r3, [r7, #24]
 800aeda:	e003      	b.n	800aee4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aee0:	2300      	movs	r3, #0
 800aee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aee4:	e02a      	b.n	800af3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2200      	movs	r2, #0
 800aeee:	2180      	movs	r1, #128	; 0x80
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 fb8b 	bl	800b60c <UART_WaitOnFlagUntilTimeout>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e036      	b.n	800af6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10b      	bne.n	800af1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	3302      	adds	r3, #2
 800af1a:	61bb      	str	r3, [r7, #24]
 800af1c:	e007      	b.n	800af2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	781a      	ldrb	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	3301      	adds	r3, #1
 800af2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af32:	b29b      	uxth	r3, r3
 800af34:	3b01      	subs	r3, #1
 800af36:	b29a      	uxth	r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af40:	b29b      	uxth	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1cf      	bne.n	800aee6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2200      	movs	r2, #0
 800af4e:	2140      	movs	r1, #64	; 0x40
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 fb5b 	bl	800b60c <UART_WaitOnFlagUntilTimeout>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e006      	b.n	800af6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2220      	movs	r2, #32
 800af64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	e000      	b.n	800af6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800af6c:	2302      	movs	r3, #2
  }
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b08a      	sub	sp, #40	; 0x28
 800af7a:	af02      	add	r7, sp, #8
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	603b      	str	r3, [r7, #0]
 800af82:	4613      	mov	r3, r2
 800af84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b20      	cmp	r3, #32
 800af94:	d17c      	bne.n	800b090 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <HAL_UART_Receive+0x2c>
 800af9c:	88fb      	ldrh	r3, [r7, #6]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e075      	b.n	800b092 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2222      	movs	r2, #34	; 0x22
 800afb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afba:	f7fc fe83 	bl	8007cc4 <HAL_GetTick>
 800afbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	88fa      	ldrh	r2, [r7, #6]
 800afc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	88fa      	ldrh	r2, [r7, #6]
 800afca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afd4:	d108      	bne.n	800afe8 <HAL_UART_Receive+0x72>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d104      	bne.n	800afe8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	61bb      	str	r3, [r7, #24]
 800afe6:	e003      	b.n	800aff0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800aff0:	e043      	b.n	800b07a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2200      	movs	r2, #0
 800affa:	2120      	movs	r1, #32
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fb05 	bl	800b60c <UART_WaitOnFlagUntilTimeout>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d001      	beq.n	800b00c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e042      	b.n	800b092 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10c      	bne.n	800b02c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	b29b      	uxth	r3, r3
 800b01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01e:	b29a      	uxth	r2, r3
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	3302      	adds	r3, #2
 800b028:	61bb      	str	r3, [r7, #24]
 800b02a:	e01f      	b.n	800b06c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b034:	d007      	beq.n	800b046 <HAL_UART_Receive+0xd0>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <HAL_UART_Receive+0xde>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d106      	bne.n	800b054 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	701a      	strb	r2, [r3, #0]
 800b052:	e008      	b.n	800b066 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b060:	b2da      	uxtb	r2, r3
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	3301      	adds	r3, #1
 800b06a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b070:	b29b      	uxth	r3, r3
 800b072:	3b01      	subs	r3, #1
 800b074:	b29a      	uxth	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b07e:	b29b      	uxth	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1b6      	bne.n	800aff2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2220      	movs	r2, #32
 800b088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e000      	b.n	800b092 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b090:	2302      	movs	r3, #2
  }
}
 800b092:	4618      	mov	r0, r3
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b0ba      	sub	sp, #232	; 0xe8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0d2:	f003 030f 	and.w	r3, r3, #15
 800b0d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b0da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10f      	bne.n	800b102 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e6:	f003 0320 	and.w	r3, r3, #32
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d009      	beq.n	800b102 <HAL_UART_IRQHandler+0x66>
 800b0ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f2:	f003 0320 	and.w	r3, r3, #32
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fbd1 	bl	800b8a2 <UART_Receive_IT>
      return;
 800b100:	e25b      	b.n	800b5ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 80de 	beq.w	800b2c8 <HAL_UART_IRQHandler+0x22c>
 800b10c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b11c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 80d1 	beq.w	800b2c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00b      	beq.n	800b14a <HAL_UART_IRQHandler+0xae>
 800b132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d005      	beq.n	800b14a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b142:	f043 0201 	orr.w	r2, r3, #1
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00b      	beq.n	800b16e <HAL_UART_IRQHandler+0xd2>
 800b156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b15a:	f003 0301 	and.w	r3, r3, #1
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d005      	beq.n	800b16e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b166:	f043 0202 	orr.w	r2, r3, #2
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b16e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b172:	f003 0302 	and.w	r3, r3, #2
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00b      	beq.n	800b192 <HAL_UART_IRQHandler+0xf6>
 800b17a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	d005      	beq.n	800b192 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18a:	f043 0204 	orr.w	r2, r3, #4
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b196:	f003 0308 	and.w	r3, r3, #8
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d011      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x126>
 800b19e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1a2:	f003 0320 	and.w	r3, r3, #32
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d105      	bne.n	800b1b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d005      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ba:	f043 0208 	orr.w	r2, r3, #8
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 81f2 	beq.w	800b5b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1d0:	f003 0320 	and.w	r3, r3, #32
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d008      	beq.n	800b1ea <HAL_UART_IRQHandler+0x14e>
 800b1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1dc:	f003 0320 	and.w	r3, r3, #32
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fb5c 	bl	800b8a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bf14      	ite	ne
 800b1f8:	2301      	movne	r3, #1
 800b1fa:	2300      	moveq	r3, #0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b206:	f003 0308 	and.w	r3, r3, #8
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d103      	bne.n	800b216 <HAL_UART_IRQHandler+0x17a>
 800b20e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b212:	2b00      	cmp	r3, #0
 800b214:	d04f      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fa66 	bl	800b6e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d041      	beq.n	800b2ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3314      	adds	r3, #20
 800b230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b240:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3314      	adds	r3, #20
 800b252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b256:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b25a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b26e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1d9      	bne.n	800b22a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d013      	beq.n	800b2a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b282:	4a7e      	ldr	r2, [pc, #504]	; (800b47c <HAL_UART_IRQHandler+0x3e0>)
 800b284:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fc ff8c 	bl	80081a8 <HAL_DMA_Abort_IT>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d016      	beq.n	800b2c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a4:	e00e      	b.n	800b2c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f99c 	bl	800b5e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ac:	e00a      	b.n	800b2c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f998 	bl	800b5e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b4:	e006      	b.n	800b2c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f994 	bl	800b5e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b2c2:	e175      	b.n	800b5b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c4:	bf00      	nop
    return;
 800b2c6:	e173      	b.n	800b5b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	f040 814f 	bne.w	800b570 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d6:	f003 0310 	and.w	r3, r3, #16
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 8148 	beq.w	800b570 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e4:	f003 0310 	and.w	r3, r3, #16
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 8141 	beq.w	800b570 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60bb      	str	r3, [r7, #8]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	60bb      	str	r3, [r7, #8]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	60bb      	str	r3, [r7, #8]
 800b302:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 80b6 	beq.w	800b480 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b320:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 8145 	beq.w	800b5b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b32e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b332:	429a      	cmp	r2, r3
 800b334:	f080 813e 	bcs.w	800b5b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b33e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	2b20      	cmp	r3, #32
 800b348:	f000 8088 	beq.w	800b45c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	330c      	adds	r3, #12
 800b352:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b356:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b35a:	e853 3f00 	ldrex	r3, [r3]
 800b35e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b362:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b36a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	330c      	adds	r3, #12
 800b374:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b378:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b37c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b384:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b388:	e841 2300 	strex	r3, r2, [r1]
 800b38c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1d9      	bne.n	800b34c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3314      	adds	r3, #20
 800b39e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3a2:	e853 3f00 	ldrex	r3, [r3]
 800b3a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b3a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3aa:	f023 0301 	bic.w	r3, r3, #1
 800b3ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3314      	adds	r3, #20
 800b3b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b3bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b3c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3c8:	e841 2300 	strex	r3, r2, [r1]
 800b3cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1e1      	bne.n	800b398 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3314      	adds	r3, #20
 800b3da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3de:	e853 3f00 	ldrex	r3, [r3]
 800b3e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3314      	adds	r3, #20
 800b3f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b400:	e841 2300 	strex	r3, r2, [r1]
 800b404:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e3      	bne.n	800b3d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2220      	movs	r2, #32
 800b410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	330c      	adds	r3, #12
 800b420:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b424:	e853 3f00 	ldrex	r3, [r3]
 800b428:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b42a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b42c:	f023 0310 	bic.w	r3, r3, #16
 800b430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	330c      	adds	r3, #12
 800b43a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b43e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b440:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b442:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b446:	e841 2300 	strex	r3, r2, [r1]
 800b44a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b44c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e3      	bne.n	800b41a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b456:	4618      	mov	r0, r3
 800b458:	f7fc fe6b 	bl	8008132 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	b29b      	uxth	r3, r3
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f8bf 	bl	800b5f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b478:	e09c      	b.n	800b5b4 <HAL_UART_IRQHandler+0x518>
 800b47a:	bf00      	nop
 800b47c:	0800b7ad 	.word	0x0800b7ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b488:	b29b      	uxth	r3, r3
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b494:	b29b      	uxth	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 808e 	beq.w	800b5b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b49c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 8089 	beq.w	800b5b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	330c      	adds	r3, #12
 800b4ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b4ca:	647a      	str	r2, [r7, #68]	; 0x44
 800b4cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e3      	bne.n	800b4a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	3314      	adds	r3, #20
 800b4e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	f023 0301 	bic.w	r3, r3, #1
 800b4f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3314      	adds	r3, #20
 800b4fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b502:	633a      	str	r2, [r7, #48]	; 0x30
 800b504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e3      	bne.n	800b4de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2220      	movs	r2, #32
 800b51a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	330c      	adds	r3, #12
 800b52a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	60fb      	str	r3, [r7, #12]
   return(result);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 0310 	bic.w	r3, r3, #16
 800b53a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	330c      	adds	r3, #12
 800b544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b548:	61fa      	str	r2, [r7, #28]
 800b54a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	69b9      	ldr	r1, [r7, #24]
 800b54e:	69fa      	ldr	r2, [r7, #28]
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	617b      	str	r3, [r7, #20]
   return(result);
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e3      	bne.n	800b524 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2202      	movs	r2, #2
 800b560:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f844 	bl	800b5f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b56e:	e023      	b.n	800b5b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d009      	beq.n	800b590 <HAL_UART_IRQHandler+0x4f4>
 800b57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f923 	bl	800b7d4 <UART_Transmit_IT>
    return;
 800b58e:	e014      	b.n	800b5ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00e      	beq.n	800b5ba <HAL_UART_IRQHandler+0x51e>
 800b59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d008      	beq.n	800b5ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 f962 	bl	800b872 <UART_EndTransmit_IT>
    return;
 800b5ae:	e004      	b.n	800b5ba <HAL_UART_IRQHandler+0x51e>
    return;
 800b5b0:	bf00      	nop
 800b5b2:	e002      	b.n	800b5ba <HAL_UART_IRQHandler+0x51e>
      return;
 800b5b4:	bf00      	nop
 800b5b6:	e000      	b.n	800b5ba <HAL_UART_IRQHandler+0x51e>
      return;
 800b5b8:	bf00      	nop
  }
}
 800b5ba:	37e8      	adds	r7, #232	; 0xe8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bc80      	pop	{r7}
 800b5d0:	4770      	bx	lr

0800b5d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5d2:	b480      	push	{r7}
 800b5d4:	b083      	sub	sp, #12
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b5da:	bf00      	nop
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bc80      	pop	{r7}
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bc80      	pop	{r7}
 800b5f4:	4770      	bx	lr

0800b5f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	460b      	mov	r3, r1
 800b600:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b602:	bf00      	nop
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	bc80      	pop	{r7}
 800b60a:	4770      	bx	lr

0800b60c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b090      	sub	sp, #64	; 0x40
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	603b      	str	r3, [r7, #0]
 800b618:	4613      	mov	r3, r2
 800b61a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b61c:	e050      	b.n	800b6c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b61e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b624:	d04c      	beq.n	800b6c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d007      	beq.n	800b63c <UART_WaitOnFlagUntilTimeout+0x30>
 800b62c:	f7fc fb4a 	bl	8007cc4 <HAL_GetTick>
 800b630:	4602      	mov	r2, r0
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b638:	429a      	cmp	r2, r3
 800b63a:	d241      	bcs.n	800b6c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	330c      	adds	r3, #12
 800b642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	330c      	adds	r3, #12
 800b65a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b65c:	637a      	str	r2, [r7, #52]	; 0x34
 800b65e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e5      	bne.n	800b63c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3314      	adds	r3, #20
 800b676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	e853 3f00 	ldrex	r3, [r3]
 800b67e:	613b      	str	r3, [r7, #16]
   return(result);
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f023 0301 	bic.w	r3, r3, #1
 800b686:	63bb      	str	r3, [r7, #56]	; 0x38
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3314      	adds	r3, #20
 800b68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b690:	623a      	str	r2, [r7, #32]
 800b692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	69f9      	ldr	r1, [r7, #28]
 800b696:	6a3a      	ldr	r2, [r7, #32]
 800b698:	e841 2300 	strex	r3, r2, [r1]
 800b69c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e5      	bne.n	800b670 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2220      	movs	r2, #32
 800b6b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e00f      	b.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	bf0c      	ite	eq
 800b6d0:	2301      	moveq	r3, #1
 800b6d2:	2300      	movne	r3, #0
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d09f      	beq.n	800b61e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3740      	adds	r7, #64	; 0x40
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b095      	sub	sp, #84	; 0x54
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	330c      	adds	r3, #12
 800b6f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b706:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	330c      	adds	r3, #12
 800b70e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b710:	643a      	str	r2, [r7, #64]	; 0x40
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e5      	bne.n	800b6f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3314      	adds	r3, #20
 800b72a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	e853 3f00 	ldrex	r3, [r3]
 800b732:	61fb      	str	r3, [r7, #28]
   return(result);
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	f023 0301 	bic.w	r3, r3, #1
 800b73a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3314      	adds	r3, #20
 800b742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b744:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74c:	e841 2300 	strex	r3, r2, [r1]
 800b750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e5      	bne.n	800b724 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d119      	bne.n	800b794 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	330c      	adds	r3, #12
 800b766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	e853 3f00 	ldrex	r3, [r3]
 800b76e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	f023 0310 	bic.w	r3, r3, #16
 800b776:	647b      	str	r3, [r7, #68]	; 0x44
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	330c      	adds	r3, #12
 800b77e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b780:	61ba      	str	r2, [r7, #24]
 800b782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b784:	6979      	ldr	r1, [r7, #20]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	e841 2300 	strex	r3, r2, [r1]
 800b78c:	613b      	str	r3, [r7, #16]
   return(result);
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1e5      	bne.n	800b760 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2220      	movs	r2, #32
 800b798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b7a2:	bf00      	nop
 800b7a4:	3754      	adds	r7, #84	; 0x54
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bc80      	pop	{r7}
 800b7aa:	4770      	bx	lr

0800b7ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f7ff ff0c 	bl	800b5e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7cc:	bf00      	nop
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b21      	cmp	r3, #33	; 0x21
 800b7e6:	d13e      	bne.n	800b866 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f0:	d114      	bne.n	800b81c <UART_Transmit_IT+0x48>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d110      	bne.n	800b81c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b80e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a1b      	ldr	r3, [r3, #32]
 800b814:	1c9a      	adds	r2, r3, #2
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	621a      	str	r2, [r3, #32]
 800b81a:	e008      	b.n	800b82e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	1c59      	adds	r1, r3, #1
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	6211      	str	r1, [r2, #32]
 800b826:	781a      	ldrb	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b832:	b29b      	uxth	r3, r3
 800b834:	3b01      	subs	r3, #1
 800b836:	b29b      	uxth	r3, r3
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	4619      	mov	r1, r3
 800b83c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10f      	bne.n	800b862 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b850:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68da      	ldr	r2, [r3, #12]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b860:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	e000      	b.n	800b868 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b866:	2302      	movs	r3, #2
  }
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bc80      	pop	{r7}
 800b870:	4770      	bx	lr

0800b872 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b082      	sub	sp, #8
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68da      	ldr	r2, [r3, #12]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b888:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fe94 	bl	800b5c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b08c      	sub	sp, #48	; 0x30
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b22      	cmp	r3, #34	; 0x22
 800b8b4:	f040 80ae 	bne.w	800ba14 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8c0:	d117      	bne.n	800b8f2 <UART_Receive_IT+0x50>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d113      	bne.n	800b8f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ea:	1c9a      	adds	r2, r3, #2
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	629a      	str	r2, [r3, #40]	; 0x28
 800b8f0:	e026      	b.n	800b940 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b904:	d007      	beq.n	800b916 <UART_Receive_IT+0x74>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <UART_Receive_IT+0x82>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	b2da      	uxtb	r2, r3
 800b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b920:	701a      	strb	r2, [r3, #0]
 800b922:	e008      	b.n	800b936 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b930:	b2da      	uxtb	r2, r3
 800b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b934:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	1c5a      	adds	r2, r3, #1
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b944:	b29b      	uxth	r3, r3
 800b946:	3b01      	subs	r3, #1
 800b948:	b29b      	uxth	r3, r3
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	4619      	mov	r1, r3
 800b94e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b950:	2b00      	cmp	r3, #0
 800b952:	d15d      	bne.n	800ba10 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68da      	ldr	r2, [r3, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f022 0220 	bic.w	r2, r2, #32
 800b962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b972:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695a      	ldr	r2, [r3, #20]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f022 0201 	bic.w	r2, r2, #1
 800b982:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2220      	movs	r2, #32
 800b988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b996:	2b01      	cmp	r3, #1
 800b998:	d135      	bne.n	800ba06 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	330c      	adds	r3, #12
 800b9a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	e853 3f00 	ldrex	r3, [r3]
 800b9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f023 0310 	bic.w	r3, r3, #16
 800b9b6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	330c      	adds	r3, #12
 800b9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c0:	623a      	str	r2, [r7, #32]
 800b9c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c4:	69f9      	ldr	r1, [r7, #28]
 800b9c6:	6a3a      	ldr	r2, [r7, #32]
 800b9c8:	e841 2300 	strex	r3, r2, [r1]
 800b9cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1e5      	bne.n	800b9a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0310 	and.w	r3, r3, #16
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	d10a      	bne.n	800b9f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60fb      	str	r3, [r7, #12]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7ff fdf9 	bl	800b5f6 <HAL_UARTEx_RxEventCallback>
 800ba04:	e002      	b.n	800ba0c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fde3 	bl	800b5d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e002      	b.n	800ba16 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	e000      	b.n	800ba16 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ba14:	2302      	movs	r3, #2
  }
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3730      	adds	r7, #48	; 0x30
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	689a      	ldr	r2, [r3, #8]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	431a      	orrs	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	695b      	ldr	r3, [r3, #20]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ba5a:	f023 030c 	bic.w	r3, r3, #12
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	68b9      	ldr	r1, [r7, #8]
 800ba64:	430b      	orrs	r3, r1
 800ba66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	699a      	ldr	r2, [r3, #24]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a2c      	ldr	r2, [pc, #176]	; (800bb34 <UART_SetConfig+0x114>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d103      	bne.n	800ba90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ba88:	f7fe fd3e 	bl	800a508 <HAL_RCC_GetPCLK2Freq>
 800ba8c:	60f8      	str	r0, [r7, #12]
 800ba8e:	e002      	b.n	800ba96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ba90:	f7fe fd26 	bl	800a4e0 <HAL_RCC_GetPCLK1Freq>
 800ba94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009a      	lsls	r2, r3, #2
 800baa0:	441a      	add	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800baac:	4a22      	ldr	r2, [pc, #136]	; (800bb38 <UART_SetConfig+0x118>)
 800baae:	fba2 2303 	umull	r2, r3, r2, r3
 800bab2:	095b      	lsrs	r3, r3, #5
 800bab4:	0119      	lsls	r1, r3, #4
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	4613      	mov	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	009a      	lsls	r2, r3, #2
 800bac0:	441a      	add	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	fbb2 f2f3 	udiv	r2, r2, r3
 800bacc:	4b1a      	ldr	r3, [pc, #104]	; (800bb38 <UART_SetConfig+0x118>)
 800bace:	fba3 0302 	umull	r0, r3, r3, r2
 800bad2:	095b      	lsrs	r3, r3, #5
 800bad4:	2064      	movs	r0, #100	; 0x64
 800bad6:	fb00 f303 	mul.w	r3, r0, r3
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	011b      	lsls	r3, r3, #4
 800bade:	3332      	adds	r3, #50	; 0x32
 800bae0:	4a15      	ldr	r2, [pc, #84]	; (800bb38 <UART_SetConfig+0x118>)
 800bae2:	fba2 2303 	umull	r2, r3, r2, r3
 800bae6:	095b      	lsrs	r3, r3, #5
 800bae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baec:	4419      	add	r1, r3
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	009a      	lsls	r2, r3, #2
 800baf8:	441a      	add	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	fbb2 f2f3 	udiv	r2, r2, r3
 800bb04:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <UART_SetConfig+0x118>)
 800bb06:	fba3 0302 	umull	r0, r3, r3, r2
 800bb0a:	095b      	lsrs	r3, r3, #5
 800bb0c:	2064      	movs	r0, #100	; 0x64
 800bb0e:	fb00 f303 	mul.w	r3, r0, r3
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	011b      	lsls	r3, r3, #4
 800bb16:	3332      	adds	r3, #50	; 0x32
 800bb18:	4a07      	ldr	r2, [pc, #28]	; (800bb38 <UART_SetConfig+0x118>)
 800bb1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb1e:	095b      	lsrs	r3, r3, #5
 800bb20:	f003 020f 	and.w	r2, r3, #15
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	440a      	add	r2, r1
 800bb2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bb2c:	bf00      	nop
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	40013800 	.word	0x40013800
 800bb38:	51eb851f 	.word	0x51eb851f

0800bb3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bb46:	2300      	movs	r3, #0
 800bb48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bb4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb4e:	2b84      	cmp	r3, #132	; 0x84
 800bb50:	d005      	beq.n	800bb5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bb52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	4413      	add	r3, r2
 800bb5a:	3303      	adds	r3, #3
 800bb5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bc80      	pop	{r7}
 800bb68:	4770      	bx	lr

0800bb6a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bb6e:	f000 fad1 	bl	800c114 <vTaskStartScheduler>
  
  return osOK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb7a:	b089      	sub	sp, #36	; 0x24
 800bb7c:	af04      	add	r7, sp, #16
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d020      	beq.n	800bbcc <osThreadCreate+0x54>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d01c      	beq.n	800bbcc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685c      	ldr	r4, [r3, #4]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	691e      	ldr	r6, [r3, #16]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7ff ffc9 	bl	800bb3c <makeFreeRtosPriority>
 800bbaa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbb4:	9202      	str	r2, [sp, #8]
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	9100      	str	r1, [sp, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 f8e8 	bl	800bd96 <xTaskCreateStatic>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	e01c      	b.n	800bc06 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685c      	ldr	r4, [r3, #4]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbd8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7ff ffab 	bl	800bb3c <makeFreeRtosPriority>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	f107 030c 	add.w	r3, r7, #12
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	9200      	str	r2, [sp, #0]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	4632      	mov	r2, r6
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f000 f929 	bl	800be4e <xTaskCreate>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d001      	beq.n	800bc06 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bc02:	2300      	movs	r3, #0
 800bc04:	e000      	b.n	800bc08 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bc06:	68fb      	ldr	r3, [r7, #12]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc10 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <osDelay+0x16>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	e000      	b.n	800bc28 <osDelay+0x18>
 800bc26:	2301      	movs	r3, #1
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 fa3f 	bl	800c0ac <vTaskDelay>
  
  return osOK;
 800bc2e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f103 0208 	add.w	r2, r3, #8
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f103 0208 	add.w	r2, r3, #8
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f103 0208 	add.w	r2, r3, #8
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc6c:	bf00      	nop
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bc80      	pop	{r7}
 800bc74:	4770      	bx	lr

0800bc76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bc80      	pop	{r7}
 800bc8c:	4770      	bx	lr

0800bc8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b085      	sub	sp, #20
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	689a      	ldr	r2, [r3, #8]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	601a      	str	r2, [r3, #0]
}
 800bcca:	bf00      	nop
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bc80      	pop	{r7}
 800bcd2:	4770      	bx	lr

0800bcd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcea:	d103      	bne.n	800bcf4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	60fb      	str	r3, [r7, #12]
 800bcf2:	e00c      	b.n	800bd0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	e002      	b.n	800bd02 <vListInsert+0x2e>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d2f6      	bcs.n	800bcfc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	601a      	str	r2, [r3, #0]
}
 800bd3a:	bf00      	nop
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bc80      	pop	{r7}
 800bd42:	4770      	bx	lr

0800bd44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	6892      	ldr	r2, [r2, #8]
 800bd5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	6852      	ldr	r2, [r2, #4]
 800bd64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d103      	bne.n	800bd78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689a      	ldr	r2, [r3, #8]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	1e5a      	subs	r2, r3, #1
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bc80      	pop	{r7}
 800bd94:	4770      	bx	lr

0800bd96 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b08e      	sub	sp, #56	; 0x38
 800bd9a:	af04      	add	r7, sp, #16
 800bd9c:	60f8      	str	r0, [r7, #12]
 800bd9e:	60b9      	str	r1, [r7, #8]
 800bda0:	607a      	str	r2, [r7, #4]
 800bda2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10a      	bne.n	800bdc0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bdbc:	bf00      	nop
 800bdbe:	e7fe      	b.n	800bdbe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10a      	bne.n	800bddc <xTaskCreateStatic+0x46>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	61fb      	str	r3, [r7, #28]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bddc:	2354      	movs	r3, #84	; 0x54
 800bdde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2b54      	cmp	r3, #84	; 0x54
 800bde4:	d00a      	beq.n	800bdfc <xTaskCreateStatic+0x66>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	61bb      	str	r3, [r7, #24]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01e      	beq.n	800be40 <xTaskCreateStatic+0xaa>
 800be02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be04:	2b00      	cmp	r3, #0
 800be06:	d01b      	beq.n	800be40 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	2202      	movs	r2, #2
 800be16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be1a:	2300      	movs	r3, #0
 800be1c:	9303      	str	r3, [sp, #12]
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	9302      	str	r3, [sp, #8]
 800be22:	f107 0314 	add.w	r3, r7, #20
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	68b9      	ldr	r1, [r7, #8]
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f000 f850 	bl	800bed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be3a:	f000 f8cd 	bl	800bfd8 <prvAddNewTaskToReadyList>
 800be3e:	e001      	b.n	800be44 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be44:	697b      	ldr	r3, [r7, #20]
	}
 800be46:	4618      	mov	r0, r3
 800be48:	3728      	adds	r7, #40	; 0x28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b08c      	sub	sp, #48	; 0x30
 800be52:	af04      	add	r7, sp, #16
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	603b      	str	r3, [r7, #0]
 800be5a:	4613      	mov	r3, r2
 800be5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be5e:	88fb      	ldrh	r3, [r7, #6]
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4618      	mov	r0, r3
 800be64:	f000 fe8c 	bl	800cb80 <pvPortMalloc>
 800be68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00e      	beq.n	800be8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800be70:	2054      	movs	r0, #84	; 0x54
 800be72:	f000 fe85 	bl	800cb80 <pvPortMalloc>
 800be76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	631a      	str	r2, [r3, #48]	; 0x30
 800be84:	e005      	b.n	800be92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be86:	6978      	ldr	r0, [r7, #20]
 800be88:	f000 ff3e 	bl	800cd08 <vPortFree>
 800be8c:	e001      	b.n	800be92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d017      	beq.n	800bec8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bea0:	88fa      	ldrh	r2, [r7, #6]
 800bea2:	2300      	movs	r3, #0
 800bea4:	9303      	str	r3, [sp, #12]
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	9302      	str	r3, [sp, #8]
 800beaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	68b9      	ldr	r1, [r7, #8]
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f000 f80e 	bl	800bed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bebc:	69f8      	ldr	r0, [r7, #28]
 800bebe:	f000 f88b 	bl	800bfd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bec2:	2301      	movs	r3, #1
 800bec4:	61bb      	str	r3, [r7, #24]
 800bec6:	e002      	b.n	800bece <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bec8:	f04f 33ff 	mov.w	r3, #4294967295
 800becc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bece:	69bb      	ldr	r3, [r7, #24]
	}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3720      	adds	r7, #32
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
 800bee4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bef0:	3b01      	subs	r3, #1
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4413      	add	r3, r2
 800bef6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	f023 0307 	bic.w	r3, r3, #7
 800befe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	617b      	str	r3, [r7, #20]
}
 800bf1c:	bf00      	nop
 800bf1e:	e7fe      	b.n	800bf1e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf20:	2300      	movs	r3, #0
 800bf22:	61fb      	str	r3, [r7, #28]
 800bf24:	e012      	b.n	800bf4c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	7819      	ldrb	r1, [r3, #0]
 800bf2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	4413      	add	r3, r2
 800bf34:	3334      	adds	r3, #52	; 0x34
 800bf36:	460a      	mov	r2, r1
 800bf38:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	4413      	add	r3, r2
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d006      	beq.n	800bf54 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	61fb      	str	r3, [r7, #28]
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	2b0f      	cmp	r3, #15
 800bf50:	d9e9      	bls.n	800bf26 <prvInitialiseNewTask+0x4e>
 800bf52:	e000      	b.n	800bf56 <prvInitialiseNewTask+0x7e>
		{
			break;
 800bf54:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf60:	2b06      	cmp	r3, #6
 800bf62:	d901      	bls.n	800bf68 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf64:	2306      	movs	r3, #6
 800bf66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	2200      	movs	r2, #0
 800bf78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff fe79 	bl	800bc76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	3318      	adds	r3, #24
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7ff fe74 	bl	800bc76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf96:	f1c3 0207 	rsb	r2, r3, #7
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	68f9      	ldr	r1, [r7, #12]
 800bfb6:	69b8      	ldr	r0, [r7, #24]
 800bfb8:	f000 fc2c 	bl	800c814 <pxPortInitialiseStack>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfce:	bf00      	nop
 800bfd0:	3720      	adds	r7, #32
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfe0:	f000 fd0c 	bl	800c9fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfe4:	4b2a      	ldr	r3, [pc, #168]	; (800c090 <prvAddNewTaskToReadyList+0xb8>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	4a29      	ldr	r2, [pc, #164]	; (800c090 <prvAddNewTaskToReadyList+0xb8>)
 800bfec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfee:	4b29      	ldr	r3, [pc, #164]	; (800c094 <prvAddNewTaskToReadyList+0xbc>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d109      	bne.n	800c00a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bff6:	4a27      	ldr	r2, [pc, #156]	; (800c094 <prvAddNewTaskToReadyList+0xbc>)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bffc:	4b24      	ldr	r3, [pc, #144]	; (800c090 <prvAddNewTaskToReadyList+0xb8>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d110      	bne.n	800c026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c004:	f000 fac0 	bl	800c588 <prvInitialiseTaskLists>
 800c008:	e00d      	b.n	800c026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c00a:	4b23      	ldr	r3, [pc, #140]	; (800c098 <prvAddNewTaskToReadyList+0xc0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d109      	bne.n	800c026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c012:	4b20      	ldr	r3, [pc, #128]	; (800c094 <prvAddNewTaskToReadyList+0xbc>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d802      	bhi.n	800c026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c020:	4a1c      	ldr	r2, [pc, #112]	; (800c094 <prvAddNewTaskToReadyList+0xbc>)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c026:	4b1d      	ldr	r3, [pc, #116]	; (800c09c <prvAddNewTaskToReadyList+0xc4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3301      	adds	r3, #1
 800c02c:	4a1b      	ldr	r2, [pc, #108]	; (800c09c <prvAddNewTaskToReadyList+0xc4>)
 800c02e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c034:	2201      	movs	r2, #1
 800c036:	409a      	lsls	r2, r3
 800c038:	4b19      	ldr	r3, [pc, #100]	; (800c0a0 <prvAddNewTaskToReadyList+0xc8>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	4a18      	ldr	r2, [pc, #96]	; (800c0a0 <prvAddNewTaskToReadyList+0xc8>)
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c046:	4613      	mov	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	4413      	add	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4a15      	ldr	r2, [pc, #84]	; (800c0a4 <prvAddNewTaskToReadyList+0xcc>)
 800c050:	441a      	add	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3304      	adds	r3, #4
 800c056:	4619      	mov	r1, r3
 800c058:	4610      	mov	r0, r2
 800c05a:	f7ff fe18 	bl	800bc8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c05e:	f000 fcfd 	bl	800ca5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c062:	4b0d      	ldr	r3, [pc, #52]	; (800c098 <prvAddNewTaskToReadyList+0xc0>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00e      	beq.n	800c088 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c06a:	4b0a      	ldr	r3, [pc, #40]	; (800c094 <prvAddNewTaskToReadyList+0xbc>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	429a      	cmp	r2, r3
 800c076:	d207      	bcs.n	800c088 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c078:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <prvAddNewTaskToReadyList+0xd0>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	20001030 	.word	0x20001030
 800c094:	20000f30 	.word	0x20000f30
 800c098:	2000103c 	.word	0x2000103c
 800c09c:	2000104c 	.word	0x2000104c
 800c0a0:	20001038 	.word	0x20001038
 800c0a4:	20000f34 	.word	0x20000f34
 800c0a8:	e000ed04 	.word	0xe000ed04

0800c0ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d017      	beq.n	800c0ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0be:	4b13      	ldr	r3, [pc, #76]	; (800c10c <vTaskDelay+0x60>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00a      	beq.n	800c0dc <vTaskDelay+0x30>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	60bb      	str	r3, [r7, #8]
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0dc:	f000 f87a 	bl	800c1d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fb30 	bl	800c748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0e8:	f000 f882 	bl	800c1f0 <xTaskResumeAll>
 800c0ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d107      	bne.n	800c104 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c0f4:	4b06      	ldr	r3, [pc, #24]	; (800c110 <vTaskDelay+0x64>)
 800c0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c104:	bf00      	nop
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	20001058 	.word	0x20001058
 800c110:	e000ed04 	.word	0xe000ed04

0800c114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b08a      	sub	sp, #40	; 0x28
 800c118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c11a:	2300      	movs	r3, #0
 800c11c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c122:	463a      	mov	r2, r7
 800c124:	1d39      	adds	r1, r7, #4
 800c126:	f107 0308 	add.w	r3, r7, #8
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7f4 f888 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	9202      	str	r2, [sp, #8]
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	2300      	movs	r3, #0
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	2300      	movs	r3, #0
 800c140:	460a      	mov	r2, r1
 800c142:	491e      	ldr	r1, [pc, #120]	; (800c1bc <vTaskStartScheduler+0xa8>)
 800c144:	481e      	ldr	r0, [pc, #120]	; (800c1c0 <vTaskStartScheduler+0xac>)
 800c146:	f7ff fe26 	bl	800bd96 <xTaskCreateStatic>
 800c14a:	4603      	mov	r3, r0
 800c14c:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <vTaskStartScheduler+0xb0>)
 800c14e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c150:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <vTaskStartScheduler+0xb0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c158:	2301      	movs	r3, #1
 800c15a:	617b      	str	r3, [r7, #20]
 800c15c:	e001      	b.n	800c162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c15e:	2300      	movs	r3, #0
 800c160:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d116      	bne.n	800c196 <vTaskStartScheduler+0x82>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	613b      	str	r3, [r7, #16]
}
 800c17a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c17c:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <vTaskStartScheduler+0xb4>)
 800c17e:	f04f 32ff 	mov.w	r2, #4294967295
 800c182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c184:	4b11      	ldr	r3, [pc, #68]	; (800c1cc <vTaskStartScheduler+0xb8>)
 800c186:	2201      	movs	r2, #1
 800c188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c18a:	4b11      	ldr	r3, [pc, #68]	; (800c1d0 <vTaskStartScheduler+0xbc>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c190:	f000 fbc2 	bl	800c918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c194:	e00e      	b.n	800c1b4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19c:	d10a      	bne.n	800c1b4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	60fb      	str	r3, [r7, #12]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <vTaskStartScheduler+0x9e>
}
 800c1b4:	bf00      	nop
 800c1b6:	3718      	adds	r7, #24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	0800e850 	.word	0x0800e850
 800c1c0:	0800c559 	.word	0x0800c559
 800c1c4:	20001054 	.word	0x20001054
 800c1c8:	20001050 	.word	0x20001050
 800c1cc:	2000103c 	.word	0x2000103c
 800c1d0:	20001034 	.word	0x20001034

0800c1d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c1d8:	4b04      	ldr	r3, [pc, #16]	; (800c1ec <vTaskSuspendAll+0x18>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	4a03      	ldr	r2, [pc, #12]	; (800c1ec <vTaskSuspendAll+0x18>)
 800c1e0:	6013      	str	r3, [r2, #0]
}
 800c1e2:	bf00      	nop
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bc80      	pop	{r7}
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	20001058 	.word	0x20001058

0800c1f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c1fe:	4b41      	ldr	r3, [pc, #260]	; (800c304 <xTaskResumeAll+0x114>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10a      	bne.n	800c21c <xTaskResumeAll+0x2c>
	__asm volatile
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	603b      	str	r3, [r7, #0]
}
 800c218:	bf00      	nop
 800c21a:	e7fe      	b.n	800c21a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c21c:	f000 fbee 	bl	800c9fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c220:	4b38      	ldr	r3, [pc, #224]	; (800c304 <xTaskResumeAll+0x114>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	3b01      	subs	r3, #1
 800c226:	4a37      	ldr	r2, [pc, #220]	; (800c304 <xTaskResumeAll+0x114>)
 800c228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c22a:	4b36      	ldr	r3, [pc, #216]	; (800c304 <xTaskResumeAll+0x114>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d161      	bne.n	800c2f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c232:	4b35      	ldr	r3, [pc, #212]	; (800c308 <xTaskResumeAll+0x118>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d05d      	beq.n	800c2f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c23a:	e02e      	b.n	800c29a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c23c:	4b33      	ldr	r3, [pc, #204]	; (800c30c <xTaskResumeAll+0x11c>)
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	3318      	adds	r3, #24
 800c248:	4618      	mov	r0, r3
 800c24a:	f7ff fd7b 	bl	800bd44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3304      	adds	r3, #4
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff fd76 	bl	800bd44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25c:	2201      	movs	r2, #1
 800c25e:	409a      	lsls	r2, r3
 800c260:	4b2b      	ldr	r3, [pc, #172]	; (800c310 <xTaskResumeAll+0x120>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4313      	orrs	r3, r2
 800c266:	4a2a      	ldr	r2, [pc, #168]	; (800c310 <xTaskResumeAll+0x120>)
 800c268:	6013      	str	r3, [r2, #0]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26e:	4613      	mov	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	4a27      	ldr	r2, [pc, #156]	; (800c314 <xTaskResumeAll+0x124>)
 800c278:	441a      	add	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3304      	adds	r3, #4
 800c27e:	4619      	mov	r1, r3
 800c280:	4610      	mov	r0, r2
 800c282:	f7ff fd04 	bl	800bc8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28a:	4b23      	ldr	r3, [pc, #140]	; (800c318 <xTaskResumeAll+0x128>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c290:	429a      	cmp	r2, r3
 800c292:	d302      	bcc.n	800c29a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c294:	4b21      	ldr	r3, [pc, #132]	; (800c31c <xTaskResumeAll+0x12c>)
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c29a:	4b1c      	ldr	r3, [pc, #112]	; (800c30c <xTaskResumeAll+0x11c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1cc      	bne.n	800c23c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2a8:	f000 fa0c 	bl	800c6c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c2ac:	4b1c      	ldr	r3, [pc, #112]	; (800c320 <xTaskResumeAll+0x130>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d010      	beq.n	800c2da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2b8:	f000 f836 	bl	800c328 <xTaskIncrementTick>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c2c2:	4b16      	ldr	r3, [pc, #88]	; (800c31c <xTaskResumeAll+0x12c>)
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1f1      	bne.n	800c2b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c2d4:	4b12      	ldr	r3, [pc, #72]	; (800c320 <xTaskResumeAll+0x130>)
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2da:	4b10      	ldr	r3, [pc, #64]	; (800c31c <xTaskResumeAll+0x12c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d009      	beq.n	800c2f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <xTaskResumeAll+0x134>)
 800c2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2f6:	f000 fbb1 	bl	800ca5c <vPortExitCritical>

	return xAlreadyYielded;
 800c2fa:	68bb      	ldr	r3, [r7, #8]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20001058 	.word	0x20001058
 800c308:	20001030 	.word	0x20001030
 800c30c:	20000ff0 	.word	0x20000ff0
 800c310:	20001038 	.word	0x20001038
 800c314:	20000f34 	.word	0x20000f34
 800c318:	20000f30 	.word	0x20000f30
 800c31c:	20001044 	.word	0x20001044
 800c320:	20001040 	.word	0x20001040
 800c324:	e000ed04 	.word	0xe000ed04

0800c328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c32e:	2300      	movs	r3, #0
 800c330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c332:	4b51      	ldr	r3, [pc, #324]	; (800c478 <xTaskIncrementTick+0x150>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f040 808d 	bne.w	800c456 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c33c:	4b4f      	ldr	r3, [pc, #316]	; (800c47c <xTaskIncrementTick+0x154>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	3301      	adds	r3, #1
 800c342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c344:	4a4d      	ldr	r2, [pc, #308]	; (800c47c <xTaskIncrementTick+0x154>)
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d120      	bne.n	800c392 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c350:	4b4b      	ldr	r3, [pc, #300]	; (800c480 <xTaskIncrementTick+0x158>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00a      	beq.n	800c370 <xTaskIncrementTick+0x48>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	603b      	str	r3, [r7, #0]
}
 800c36c:	bf00      	nop
 800c36e:	e7fe      	b.n	800c36e <xTaskIncrementTick+0x46>
 800c370:	4b43      	ldr	r3, [pc, #268]	; (800c480 <xTaskIncrementTick+0x158>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	4b43      	ldr	r3, [pc, #268]	; (800c484 <xTaskIncrementTick+0x15c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a41      	ldr	r2, [pc, #260]	; (800c480 <xTaskIncrementTick+0x158>)
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	4a41      	ldr	r2, [pc, #260]	; (800c484 <xTaskIncrementTick+0x15c>)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	4b40      	ldr	r3, [pc, #256]	; (800c488 <xTaskIncrementTick+0x160>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	3301      	adds	r3, #1
 800c38a:	4a3f      	ldr	r2, [pc, #252]	; (800c488 <xTaskIncrementTick+0x160>)
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	f000 f999 	bl	800c6c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c392:	4b3e      	ldr	r3, [pc, #248]	; (800c48c <xTaskIncrementTick+0x164>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	693a      	ldr	r2, [r7, #16]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d34d      	bcc.n	800c438 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c39c:	4b38      	ldr	r3, [pc, #224]	; (800c480 <xTaskIncrementTick+0x158>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <xTaskIncrementTick+0x82>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <xTaskIncrementTick+0x84>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d004      	beq.n	800c3ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b0:	4b36      	ldr	r3, [pc, #216]	; (800c48c <xTaskIncrementTick+0x164>)
 800c3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b6:	601a      	str	r2, [r3, #0]
					break;
 800c3b8:	e03e      	b.n	800c438 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c3ba:	4b31      	ldr	r3, [pc, #196]	; (800c480 <xTaskIncrementTick+0x158>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d203      	bcs.n	800c3da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c3d2:	4a2e      	ldr	r2, [pc, #184]	; (800c48c <xTaskIncrementTick+0x164>)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6013      	str	r3, [r2, #0]
						break;
 800c3d8:	e02e      	b.n	800c438 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	3304      	adds	r3, #4
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fcb0 	bl	800bd44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	3318      	adds	r3, #24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7ff fca7 	bl	800bd44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	409a      	lsls	r2, r3
 800c3fe:	4b24      	ldr	r3, [pc, #144]	; (800c490 <xTaskIncrementTick+0x168>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4313      	orrs	r3, r2
 800c404:	4a22      	ldr	r2, [pc, #136]	; (800c490 <xTaskIncrementTick+0x168>)
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4a1f      	ldr	r2, [pc, #124]	; (800c494 <xTaskIncrementTick+0x16c>)
 800c416:	441a      	add	r2, r3
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	3304      	adds	r3, #4
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f7ff fc35 	bl	800bc8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c428:	4b1b      	ldr	r3, [pc, #108]	; (800c498 <xTaskIncrementTick+0x170>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42e:	429a      	cmp	r2, r3
 800c430:	d3b4      	bcc.n	800c39c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c432:	2301      	movs	r3, #1
 800c434:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c436:	e7b1      	b.n	800c39c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c438:	4b17      	ldr	r3, [pc, #92]	; (800c498 <xTaskIncrementTick+0x170>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43e:	4915      	ldr	r1, [pc, #84]	; (800c494 <xTaskIncrementTick+0x16c>)
 800c440:	4613      	mov	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	4413      	add	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	440b      	add	r3, r1
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d907      	bls.n	800c460 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800c450:	2301      	movs	r3, #1
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	e004      	b.n	800c460 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c456:	4b11      	ldr	r3, [pc, #68]	; (800c49c <xTaskIncrementTick+0x174>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3301      	adds	r3, #1
 800c45c:	4a0f      	ldr	r2, [pc, #60]	; (800c49c <xTaskIncrementTick+0x174>)
 800c45e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c460:	4b0f      	ldr	r3, [pc, #60]	; (800c4a0 <xTaskIncrementTick+0x178>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800c468:	2301      	movs	r3, #1
 800c46a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c46c:	697b      	ldr	r3, [r7, #20]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3718      	adds	r7, #24
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20001058 	.word	0x20001058
 800c47c:	20001034 	.word	0x20001034
 800c480:	20000fe8 	.word	0x20000fe8
 800c484:	20000fec 	.word	0x20000fec
 800c488:	20001048 	.word	0x20001048
 800c48c:	20001050 	.word	0x20001050
 800c490:	20001038 	.word	0x20001038
 800c494:	20000f34 	.word	0x20000f34
 800c498:	20000f30 	.word	0x20000f30
 800c49c:	20001040 	.word	0x20001040
 800c4a0:	20001044 	.word	0x20001044

0800c4a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b087      	sub	sp, #28
 800c4a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4aa:	4b26      	ldr	r3, [pc, #152]	; (800c544 <vTaskSwitchContext+0xa0>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4b2:	4b25      	ldr	r3, [pc, #148]	; (800c548 <vTaskSwitchContext+0xa4>)
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4b8:	e03f      	b.n	800c53a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c4ba:	4b23      	ldr	r3, [pc, #140]	; (800c548 <vTaskSwitchContext+0xa4>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c4c0:	4b22      	ldr	r3, [pc, #136]	; (800c54c <vTaskSwitchContext+0xa8>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	fab3 f383 	clz	r3, r3
 800c4cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c4ce:	7afb      	ldrb	r3, [r7, #11]
 800c4d0:	f1c3 031f 	rsb	r3, r3, #31
 800c4d4:	617b      	str	r3, [r7, #20]
 800c4d6:	491e      	ldr	r1, [pc, #120]	; (800c550 <vTaskSwitchContext+0xac>)
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	440b      	add	r3, r1
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10a      	bne.n	800c500 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	607b      	str	r3, [r7, #4]
}
 800c4fc:	bf00      	nop
 800c4fe:	e7fe      	b.n	800c4fe <vTaskSwitchContext+0x5a>
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4a11      	ldr	r2, [pc, #68]	; (800c550 <vTaskSwitchContext+0xac>)
 800c50c:	4413      	add	r3, r2
 800c50e:	613b      	str	r3, [r7, #16]
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	605a      	str	r2, [r3, #4]
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	3308      	adds	r3, #8
 800c522:	429a      	cmp	r2, r3
 800c524:	d104      	bne.n	800c530 <vTaskSwitchContext+0x8c>
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	605a      	str	r2, [r3, #4]
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	4a07      	ldr	r2, [pc, #28]	; (800c554 <vTaskSwitchContext+0xb0>)
 800c538:	6013      	str	r3, [r2, #0]
}
 800c53a:	bf00      	nop
 800c53c:	371c      	adds	r7, #28
 800c53e:	46bd      	mov	sp, r7
 800c540:	bc80      	pop	{r7}
 800c542:	4770      	bx	lr
 800c544:	20001058 	.word	0x20001058
 800c548:	20001044 	.word	0x20001044
 800c54c:	20001038 	.word	0x20001038
 800c550:	20000f34 	.word	0x20000f34
 800c554:	20000f30 	.word	0x20000f30

0800c558 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c560:	f000 f852 	bl	800c608 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c564:	4b06      	ldr	r3, [pc, #24]	; (800c580 <prvIdleTask+0x28>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d9f9      	bls.n	800c560 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c56c:	4b05      	ldr	r3, [pc, #20]	; (800c584 <prvIdleTask+0x2c>)
 800c56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c57c:	e7f0      	b.n	800c560 <prvIdleTask+0x8>
 800c57e:	bf00      	nop
 800c580:	20000f34 	.word	0x20000f34
 800c584:	e000ed04 	.word	0xe000ed04

0800c588 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c58e:	2300      	movs	r3, #0
 800c590:	607b      	str	r3, [r7, #4]
 800c592:	e00c      	b.n	800c5ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	4613      	mov	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4413      	add	r3, r2
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4a12      	ldr	r2, [pc, #72]	; (800c5e8 <prvInitialiseTaskLists+0x60>)
 800c5a0:	4413      	add	r3, r2
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7ff fb48 	bl	800bc38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	607b      	str	r3, [r7, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b06      	cmp	r3, #6
 800c5b2:	d9ef      	bls.n	800c594 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5b4:	480d      	ldr	r0, [pc, #52]	; (800c5ec <prvInitialiseTaskLists+0x64>)
 800c5b6:	f7ff fb3f 	bl	800bc38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5ba:	480d      	ldr	r0, [pc, #52]	; (800c5f0 <prvInitialiseTaskLists+0x68>)
 800c5bc:	f7ff fb3c 	bl	800bc38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5c0:	480c      	ldr	r0, [pc, #48]	; (800c5f4 <prvInitialiseTaskLists+0x6c>)
 800c5c2:	f7ff fb39 	bl	800bc38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5c6:	480c      	ldr	r0, [pc, #48]	; (800c5f8 <prvInitialiseTaskLists+0x70>)
 800c5c8:	f7ff fb36 	bl	800bc38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5cc:	480b      	ldr	r0, [pc, #44]	; (800c5fc <prvInitialiseTaskLists+0x74>)
 800c5ce:	f7ff fb33 	bl	800bc38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5d2:	4b0b      	ldr	r3, [pc, #44]	; (800c600 <prvInitialiseTaskLists+0x78>)
 800c5d4:	4a05      	ldr	r2, [pc, #20]	; (800c5ec <prvInitialiseTaskLists+0x64>)
 800c5d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5d8:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <prvInitialiseTaskLists+0x7c>)
 800c5da:	4a05      	ldr	r2, [pc, #20]	; (800c5f0 <prvInitialiseTaskLists+0x68>)
 800c5dc:	601a      	str	r2, [r3, #0]
}
 800c5de:	bf00      	nop
 800c5e0:	3708      	adds	r7, #8
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20000f34 	.word	0x20000f34
 800c5ec:	20000fc0 	.word	0x20000fc0
 800c5f0:	20000fd4 	.word	0x20000fd4
 800c5f4:	20000ff0 	.word	0x20000ff0
 800c5f8:	20001004 	.word	0x20001004
 800c5fc:	2000101c 	.word	0x2000101c
 800c600:	20000fe8 	.word	0x20000fe8
 800c604:	20000fec 	.word	0x20000fec

0800c608 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c60e:	e019      	b.n	800c644 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c610:	f000 f9f4 	bl	800c9fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c614:	4b10      	ldr	r3, [pc, #64]	; (800c658 <prvCheckTasksWaitingTermination+0x50>)
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3304      	adds	r3, #4
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff fb8f 	bl	800bd44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c626:	4b0d      	ldr	r3, [pc, #52]	; (800c65c <prvCheckTasksWaitingTermination+0x54>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	4a0b      	ldr	r2, [pc, #44]	; (800c65c <prvCheckTasksWaitingTermination+0x54>)
 800c62e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c630:	4b0b      	ldr	r3, [pc, #44]	; (800c660 <prvCheckTasksWaitingTermination+0x58>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	3b01      	subs	r3, #1
 800c636:	4a0a      	ldr	r2, [pc, #40]	; (800c660 <prvCheckTasksWaitingTermination+0x58>)
 800c638:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c63a:	f000 fa0f 	bl	800ca5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f810 	bl	800c664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c644:	4b06      	ldr	r3, [pc, #24]	; (800c660 <prvCheckTasksWaitingTermination+0x58>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1e1      	bne.n	800c610 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c64c:	bf00      	nop
 800c64e:	bf00      	nop
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20001004 	.word	0x20001004
 800c65c:	20001030 	.word	0x20001030
 800c660:	20001018 	.word	0x20001018

0800c664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c672:	2b00      	cmp	r3, #0
 800c674:	d108      	bne.n	800c688 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 fb44 	bl	800cd08 <vPortFree>
				vPortFree( pxTCB );
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fb41 	bl	800cd08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c686:	e018      	b.n	800c6ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d103      	bne.n	800c69a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 fb38 	bl	800cd08 <vPortFree>
	}
 800c698:	e00f      	b.n	800c6ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d00a      	beq.n	800c6ba <prvDeleteTCB+0x56>
	__asm volatile
 800c6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	60fb      	str	r3, [r7, #12]
}
 800c6b6:	bf00      	nop
 800c6b8:	e7fe      	b.n	800c6b8 <prvDeleteTCB+0x54>
	}
 800c6ba:	bf00      	nop
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6ca:	4b0e      	ldr	r3, [pc, #56]	; (800c704 <prvResetNextTaskUnblockTime+0x40>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <prvResetNextTaskUnblockTime+0x14>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e000      	b.n	800c6da <prvResetNextTaskUnblockTime+0x16>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d004      	beq.n	800c6e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c6de:	4b0a      	ldr	r3, [pc, #40]	; (800c708 <prvResetNextTaskUnblockTime+0x44>)
 800c6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c6e6:	e008      	b.n	800c6fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c6e8:	4b06      	ldr	r3, [pc, #24]	; (800c704 <prvResetNextTaskUnblockTime+0x40>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	4a04      	ldr	r2, [pc, #16]	; (800c708 <prvResetNextTaskUnblockTime+0x44>)
 800c6f8:	6013      	str	r3, [r2, #0]
}
 800c6fa:	bf00      	nop
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bc80      	pop	{r7}
 800c702:	4770      	bx	lr
 800c704:	20000fe8 	.word	0x20000fe8
 800c708:	20001050 	.word	0x20001050

0800c70c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c712:	4b0b      	ldr	r3, [pc, #44]	; (800c740 <xTaskGetSchedulerState+0x34>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d102      	bne.n	800c720 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c71a:	2301      	movs	r3, #1
 800c71c:	607b      	str	r3, [r7, #4]
 800c71e:	e008      	b.n	800c732 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c720:	4b08      	ldr	r3, [pc, #32]	; (800c744 <xTaskGetSchedulerState+0x38>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d102      	bne.n	800c72e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c728:	2302      	movs	r3, #2
 800c72a:	607b      	str	r3, [r7, #4]
 800c72c:	e001      	b.n	800c732 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c72e:	2300      	movs	r3, #0
 800c730:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c732:	687b      	ldr	r3, [r7, #4]
	}
 800c734:	4618      	mov	r0, r3
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	bc80      	pop	{r7}
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	2000103c 	.word	0x2000103c
 800c744:	20001058 	.word	0x20001058

0800c748 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c752:	4b29      	ldr	r3, [pc, #164]	; (800c7f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c758:	4b28      	ldr	r3, [pc, #160]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3304      	adds	r3, #4
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff faf0 	bl	800bd44 <uxListRemove>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10b      	bne.n	800c782 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c76a:	4b24      	ldr	r3, [pc, #144]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c770:	2201      	movs	r2, #1
 800c772:	fa02 f303 	lsl.w	r3, r2, r3
 800c776:	43da      	mvns	r2, r3
 800c778:	4b21      	ldr	r3, [pc, #132]	; (800c800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4013      	ands	r3, r2
 800c77e:	4a20      	ldr	r2, [pc, #128]	; (800c800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c780:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c788:	d10a      	bne.n	800c7a0 <prvAddCurrentTaskToDelayedList+0x58>
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d007      	beq.n	800c7a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c790:	4b1a      	ldr	r3, [pc, #104]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3304      	adds	r3, #4
 800c796:	4619      	mov	r1, r3
 800c798:	481a      	ldr	r0, [pc, #104]	; (800c804 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c79a:	f7ff fa78 	bl	800bc8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c79e:	e026      	b.n	800c7ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7a8:	4b14      	ldr	r3, [pc, #80]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d209      	bcs.n	800c7cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7b8:	4b13      	ldr	r3, [pc, #76]	; (800c808 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	f7ff fa85 	bl	800bcd4 <vListInsert>
}
 800c7ca:	e010      	b.n	800c7ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7cc:	4b0f      	ldr	r3, [pc, #60]	; (800c80c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4610      	mov	r0, r2
 800c7da:	f7ff fa7b 	bl	800bcd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7de:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d202      	bcs.n	800c7ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c7e8:	4a09      	ldr	r2, [pc, #36]	; (800c810 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6013      	str	r3, [r2, #0]
}
 800c7ee:	bf00      	nop
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20001034 	.word	0x20001034
 800c7fc:	20000f30 	.word	0x20000f30
 800c800:	20001038 	.word	0x20001038
 800c804:	2000101c 	.word	0x2000101c
 800c808:	20000fec 	.word	0x20000fec
 800c80c:	20000fe8 	.word	0x20000fe8
 800c810:	20001050 	.word	0x20001050

0800c814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	3b04      	subs	r3, #4
 800c824:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c82c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3b04      	subs	r3, #4
 800c832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f023 0201 	bic.w	r2, r3, #1
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3b04      	subs	r3, #4
 800c842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c844:	4a08      	ldr	r2, [pc, #32]	; (800c868 <pxPortInitialiseStack+0x54>)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3b14      	subs	r3, #20
 800c84e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3b20      	subs	r3, #32
 800c85a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c85c:	68fb      	ldr	r3, [r7, #12]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	bc80      	pop	{r7}
 800c866:	4770      	bx	lr
 800c868:	0800c86d 	.word	0x0800c86d

0800c86c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c872:	2300      	movs	r3, #0
 800c874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c876:	4b12      	ldr	r3, [pc, #72]	; (800c8c0 <prvTaskExitError+0x54>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87e:	d00a      	beq.n	800c896 <prvTaskExitError+0x2a>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	60fb      	str	r3, [r7, #12]
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <prvTaskExitError+0x28>
	__asm volatile
 800c896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	60bb      	str	r3, [r7, #8]
}
 800c8a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8aa:	bf00      	nop
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0fc      	beq.n	800c8ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8b2:	bf00      	nop
 800c8b4:	bf00      	nop
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bc80      	pop	{r7}
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	20000950 	.word	0x20000950
	...

0800c8d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <pxCurrentTCBConst2>)
 800c8d2:	6819      	ldr	r1, [r3, #0]
 800c8d4:	6808      	ldr	r0, [r1, #0]
 800c8d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c8da:	f380 8809 	msr	PSP, r0
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f04f 0000 	mov.w	r0, #0
 800c8e6:	f380 8811 	msr	BASEPRI, r0
 800c8ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800c8ee:	4770      	bx	lr

0800c8f0 <pxCurrentTCBConst2>:
 800c8f0:	20000f30 	.word	0x20000f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop

0800c8f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c8f8:	4806      	ldr	r0, [pc, #24]	; (800c914 <prvPortStartFirstTask+0x1c>)
 800c8fa:	6800      	ldr	r0, [r0, #0]
 800c8fc:	6800      	ldr	r0, [r0, #0]
 800c8fe:	f380 8808 	msr	MSP, r0
 800c902:	b662      	cpsie	i
 800c904:	b661      	cpsie	f
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	df00      	svc	0
 800c910:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c912:	bf00      	nop
 800c914:	e000ed08 	.word	0xe000ed08

0800c918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c91e:	4b32      	ldr	r3, [pc, #200]	; (800c9e8 <xPortStartScheduler+0xd0>)
 800c920:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	b2db      	uxtb	r3, r3
 800c928:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	22ff      	movs	r2, #255	; 0xff
 800c92e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	b2db      	uxtb	r3, r3
 800c936:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c938:	78fb      	ldrb	r3, [r7, #3]
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c940:	b2da      	uxtb	r2, r3
 800c942:	4b2a      	ldr	r3, [pc, #168]	; (800c9ec <xPortStartScheduler+0xd4>)
 800c944:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c946:	4b2a      	ldr	r3, [pc, #168]	; (800c9f0 <xPortStartScheduler+0xd8>)
 800c948:	2207      	movs	r2, #7
 800c94a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c94c:	e009      	b.n	800c962 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c94e:	4b28      	ldr	r3, [pc, #160]	; (800c9f0 <xPortStartScheduler+0xd8>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3b01      	subs	r3, #1
 800c954:	4a26      	ldr	r2, [pc, #152]	; (800c9f0 <xPortStartScheduler+0xd8>)
 800c956:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c958:	78fb      	ldrb	r3, [r7, #3]
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	005b      	lsls	r3, r3, #1
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c962:	78fb      	ldrb	r3, [r7, #3]
 800c964:	b2db      	uxtb	r3, r3
 800c966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c96a:	2b80      	cmp	r3, #128	; 0x80
 800c96c:	d0ef      	beq.n	800c94e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c96e:	4b20      	ldr	r3, [pc, #128]	; (800c9f0 <xPortStartScheduler+0xd8>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f1c3 0307 	rsb	r3, r3, #7
 800c976:	2b04      	cmp	r3, #4
 800c978:	d00a      	beq.n	800c990 <xPortStartScheduler+0x78>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	60bb      	str	r3, [r7, #8]
}
 800c98c:	bf00      	nop
 800c98e:	e7fe      	b.n	800c98e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c990:	4b17      	ldr	r3, [pc, #92]	; (800c9f0 <xPortStartScheduler+0xd8>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	021b      	lsls	r3, r3, #8
 800c996:	4a16      	ldr	r2, [pc, #88]	; (800c9f0 <xPortStartScheduler+0xd8>)
 800c998:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c99a:	4b15      	ldr	r3, [pc, #84]	; (800c9f0 <xPortStartScheduler+0xd8>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9a2:	4a13      	ldr	r2, [pc, #76]	; (800c9f0 <xPortStartScheduler+0xd8>)
 800c9a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9ae:	4b11      	ldr	r3, [pc, #68]	; (800c9f4 <xPortStartScheduler+0xdc>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a10      	ldr	r2, [pc, #64]	; (800c9f4 <xPortStartScheduler+0xdc>)
 800c9b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9ba:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <xPortStartScheduler+0xdc>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a0d      	ldr	r2, [pc, #52]	; (800c9f4 <xPortStartScheduler+0xdc>)
 800c9c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c9c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9c6:	f000 f8b9 	bl	800cb3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9ca:	4b0b      	ldr	r3, [pc, #44]	; (800c9f8 <xPortStartScheduler+0xe0>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9d0:	f7ff ff92 	bl	800c8f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9d4:	f7ff fd66 	bl	800c4a4 <vTaskSwitchContext>
	prvTaskExitError();
 800c9d8:	f7ff ff48 	bl	800c86c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	e000e400 	.word	0xe000e400
 800c9ec:	2000105c 	.word	0x2000105c
 800c9f0:	20001060 	.word	0x20001060
 800c9f4:	e000ed20 	.word	0xe000ed20
 800c9f8:	20000950 	.word	0x20000950

0800c9fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	607b      	str	r3, [r7, #4]
}
 800ca14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca16:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <vPortEnterCritical+0x58>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	4a0d      	ldr	r2, [pc, #52]	; (800ca54 <vPortEnterCritical+0x58>)
 800ca1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca20:	4b0c      	ldr	r3, [pc, #48]	; (800ca54 <vPortEnterCritical+0x58>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d10f      	bne.n	800ca48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca28:	4b0b      	ldr	r3, [pc, #44]	; (800ca58 <vPortEnterCritical+0x5c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00a      	beq.n	800ca48 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	603b      	str	r3, [r7, #0]
}
 800ca44:	bf00      	nop
 800ca46:	e7fe      	b.n	800ca46 <vPortEnterCritical+0x4a>
	}
}
 800ca48:	bf00      	nop
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bc80      	pop	{r7}
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20000950 	.word	0x20000950
 800ca58:	e000ed04 	.word	0xe000ed04

0800ca5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca62:	4b11      	ldr	r3, [pc, #68]	; (800caa8 <vPortExitCritical+0x4c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10a      	bne.n	800ca80 <vPortExitCritical+0x24>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	607b      	str	r3, [r7, #4]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca80:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <vPortExitCritical+0x4c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	4a08      	ldr	r2, [pc, #32]	; (800caa8 <vPortExitCritical+0x4c>)
 800ca88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca8a:	4b07      	ldr	r3, [pc, #28]	; (800caa8 <vPortExitCritical+0x4c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d105      	bne.n	800ca9e <vPortExitCritical+0x42>
 800ca92:	2300      	movs	r3, #0
 800ca94:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca9e:	bf00      	nop
 800caa0:	370c      	adds	r7, #12
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bc80      	pop	{r7}
 800caa6:	4770      	bx	lr
 800caa8:	20000950 	.word	0x20000950
 800caac:	00000000 	.word	0x00000000

0800cab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cab0:	f3ef 8009 	mrs	r0, PSP
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	4b0d      	ldr	r3, [pc, #52]	; (800caf0 <pxCurrentTCBConst>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cac0:	6010      	str	r0, [r2, #0]
 800cac2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cac6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800caca:	f380 8811 	msr	BASEPRI, r0
 800cace:	f7ff fce9 	bl	800c4a4 <vTaskSwitchContext>
 800cad2:	f04f 0000 	mov.w	r0, #0
 800cad6:	f380 8811 	msr	BASEPRI, r0
 800cada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cade:	6819      	ldr	r1, [r3, #0]
 800cae0:	6808      	ldr	r0, [r1, #0]
 800cae2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cae6:	f380 8809 	msr	PSP, r0
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	4770      	bx	lr

0800caf0 <pxCurrentTCBConst>:
 800caf0:	20000f30 	.word	0x20000f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop

0800caf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	607b      	str	r3, [r7, #4]
}
 800cb10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb12:	f7ff fc09 	bl	800c328 <xTaskIncrementTick>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb1c:	4b06      	ldr	r3, [pc, #24]	; (800cb38 <xPortSysTickHandler+0x40>)
 800cb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	2300      	movs	r3, #0
 800cb26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	f383 8811 	msr	BASEPRI, r3
}
 800cb2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb40:	4b0a      	ldr	r3, [pc, #40]	; (800cb6c <vPortSetupTimerInterrupt+0x30>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb46:	4b0a      	ldr	r3, [pc, #40]	; (800cb70 <vPortSetupTimerInterrupt+0x34>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <vPortSetupTimerInterrupt+0x38>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a09      	ldr	r2, [pc, #36]	; (800cb78 <vPortSetupTimerInterrupt+0x3c>)
 800cb52:	fba2 2303 	umull	r2, r3, r2, r3
 800cb56:	099b      	lsrs	r3, r3, #6
 800cb58:	4a08      	ldr	r2, [pc, #32]	; (800cb7c <vPortSetupTimerInterrupt+0x40>)
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb5e:	4b03      	ldr	r3, [pc, #12]	; (800cb6c <vPortSetupTimerInterrupt+0x30>)
 800cb60:	2207      	movs	r2, #7
 800cb62:	601a      	str	r2, [r3, #0]
}
 800cb64:	bf00      	nop
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bc80      	pop	{r7}
 800cb6a:	4770      	bx	lr
 800cb6c:	e000e010 	.word	0xe000e010
 800cb70:	e000e018 	.word	0xe000e018
 800cb74:	20000944 	.word	0x20000944
 800cb78:	10624dd3 	.word	0x10624dd3
 800cb7c:	e000e014 	.word	0xe000e014

0800cb80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08a      	sub	sp, #40	; 0x28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb8c:	f7ff fb22 	bl	800c1d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb90:	4b58      	ldr	r3, [pc, #352]	; (800ccf4 <pvPortMalloc+0x174>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb98:	f000 f910 	bl	800cdbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb9c:	4b56      	ldr	r3, [pc, #344]	; (800ccf8 <pvPortMalloc+0x178>)
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4013      	ands	r3, r2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f040 808e 	bne.w	800ccc6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d01d      	beq.n	800cbec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cbb0:	2208      	movs	r2, #8
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d014      	beq.n	800cbec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f023 0307 	bic.w	r3, r3, #7
 800cbc8:	3308      	adds	r3, #8
 800cbca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <pvPortMalloc+0x6c>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	617b      	str	r3, [r7, #20]
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d069      	beq.n	800ccc6 <pvPortMalloc+0x146>
 800cbf2:	4b42      	ldr	r3, [pc, #264]	; (800ccfc <pvPortMalloc+0x17c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d864      	bhi.n	800ccc6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbfc:	4b40      	ldr	r3, [pc, #256]	; (800cd00 <pvPortMalloc+0x180>)
 800cbfe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc00:	4b3f      	ldr	r3, [pc, #252]	; (800cd00 <pvPortMalloc+0x180>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc06:	e004      	b.n	800cc12 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d903      	bls.n	800cc24 <pvPortMalloc+0xa4>
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1f1      	bne.n	800cc08 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc24:	4b33      	ldr	r3, [pc, #204]	; (800ccf4 <pvPortMalloc+0x174>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d04b      	beq.n	800ccc6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc2e:	6a3b      	ldr	r3, [r7, #32]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2208      	movs	r2, #8
 800cc34:	4413      	add	r3, r2
 800cc36:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	1ad2      	subs	r2, r2, r3
 800cc48:	2308      	movs	r3, #8
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d91f      	bls.n	800cc90 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4413      	add	r3, r2
 800cc56:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	f003 0307 	and.w	r3, r3, #7
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00a      	beq.n	800cc78 <pvPortMalloc+0xf8>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	613b      	str	r3, [r7, #16]
}
 800cc74:	bf00      	nop
 800cc76:	e7fe      	b.n	800cc76 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	685a      	ldr	r2, [r3, #4]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	1ad2      	subs	r2, r2, r3
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc8a:	69b8      	ldr	r0, [r7, #24]
 800cc8c:	f000 f8f8 	bl	800ce80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc90:	4b1a      	ldr	r3, [pc, #104]	; (800ccfc <pvPortMalloc+0x17c>)
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	4a18      	ldr	r2, [pc, #96]	; (800ccfc <pvPortMalloc+0x17c>)
 800cc9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc9e:	4b17      	ldr	r3, [pc, #92]	; (800ccfc <pvPortMalloc+0x17c>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	4b18      	ldr	r3, [pc, #96]	; (800cd04 <pvPortMalloc+0x184>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d203      	bcs.n	800ccb2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccaa:	4b14      	ldr	r3, [pc, #80]	; (800ccfc <pvPortMalloc+0x17c>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a15      	ldr	r2, [pc, #84]	; (800cd04 <pvPortMalloc+0x184>)
 800ccb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	4b10      	ldr	r3, [pc, #64]	; (800ccf8 <pvPortMalloc+0x178>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	431a      	orrs	r2, r3
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ccc6:	f7ff fa93 	bl	800c1f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	f003 0307 	and.w	r3, r3, #7
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00a      	beq.n	800ccea <pvPortMalloc+0x16a>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	60fb      	str	r3, [r7, #12]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <pvPortMalloc+0x168>
	return pvReturn;
 800ccea:	69fb      	ldr	r3, [r7, #28]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3728      	adds	r7, #40	; 0x28
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20001c6c 	.word	0x20001c6c
 800ccf8:	20001c78 	.word	0x20001c78
 800ccfc:	20001c70 	.word	0x20001c70
 800cd00:	20001c64 	.word	0x20001c64
 800cd04:	20001c74 	.word	0x20001c74

0800cd08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d048      	beq.n	800cdac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd1a:	2308      	movs	r3, #8
 800cd1c:	425b      	negs	r3, r3
 800cd1e:	697a      	ldr	r2, [r7, #20]
 800cd20:	4413      	add	r3, r2
 800cd22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	4b21      	ldr	r3, [pc, #132]	; (800cdb4 <vPortFree+0xac>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4013      	ands	r3, r2
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10a      	bne.n	800cd4c <vPortFree+0x44>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	60fb      	str	r3, [r7, #12]
}
 800cd48:	bf00      	nop
 800cd4a:	e7fe      	b.n	800cd4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00a      	beq.n	800cd6a <vPortFree+0x62>
	__asm volatile
 800cd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	60bb      	str	r3, [r7, #8]
}
 800cd66:	bf00      	nop
 800cd68:	e7fe      	b.n	800cd68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	685a      	ldr	r2, [r3, #4]
 800cd6e:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <vPortFree+0xac>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4013      	ands	r3, r2
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d019      	beq.n	800cdac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d115      	bne.n	800cdac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	4b0b      	ldr	r3, [pc, #44]	; (800cdb4 <vPortFree+0xac>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	43db      	mvns	r3, r3
 800cd8a:	401a      	ands	r2, r3
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd90:	f7ff fa20 	bl	800c1d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	685a      	ldr	r2, [r3, #4]
 800cd98:	4b07      	ldr	r3, [pc, #28]	; (800cdb8 <vPortFree+0xb0>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	4a06      	ldr	r2, [pc, #24]	; (800cdb8 <vPortFree+0xb0>)
 800cda0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cda2:	6938      	ldr	r0, [r7, #16]
 800cda4:	f000 f86c 	bl	800ce80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cda8:	f7ff fa22 	bl	800c1f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cdac:	bf00      	nop
 800cdae:	3718      	adds	r7, #24
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	20001c78 	.word	0x20001c78
 800cdb8:	20001c70 	.word	0x20001c70

0800cdbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cdc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800cdc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cdc8:	4b27      	ldr	r3, [pc, #156]	; (800ce68 <prvHeapInit+0xac>)
 800cdca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f003 0307 	and.w	r3, r3, #7
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00c      	beq.n	800cdf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3307      	adds	r3, #7
 800cdda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f023 0307 	bic.w	r3, r3, #7
 800cde2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	4a1f      	ldr	r2, [pc, #124]	; (800ce68 <prvHeapInit+0xac>)
 800cdec:	4413      	add	r3, r2
 800cdee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdf4:	4a1d      	ldr	r2, [pc, #116]	; (800ce6c <prvHeapInit+0xb0>)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdfa:	4b1c      	ldr	r3, [pc, #112]	; (800ce6c <prvHeapInit+0xb0>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	4413      	add	r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce08:	2208      	movs	r2, #8
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	1a9b      	subs	r3, r3, r2
 800ce0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f023 0307 	bic.w	r3, r3, #7
 800ce16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4a15      	ldr	r2, [pc, #84]	; (800ce70 <prvHeapInit+0xb4>)
 800ce1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce1e:	4b14      	ldr	r3, [pc, #80]	; (800ce70 <prvHeapInit+0xb4>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2200      	movs	r2, #0
 800ce24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce26:	4b12      	ldr	r3, [pc, #72]	; (800ce70 <prvHeapInit+0xb4>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	1ad2      	subs	r2, r2, r3
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce3c:	4b0c      	ldr	r3, [pc, #48]	; (800ce70 <prvHeapInit+0xb4>)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	4a0a      	ldr	r2, [pc, #40]	; (800ce74 <prvHeapInit+0xb8>)
 800ce4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	4a09      	ldr	r2, [pc, #36]	; (800ce78 <prvHeapInit+0xbc>)
 800ce52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce54:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <prvHeapInit+0xc0>)
 800ce56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce5a:	601a      	str	r2, [r3, #0]
}
 800ce5c:	bf00      	nop
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bc80      	pop	{r7}
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	20001064 	.word	0x20001064
 800ce6c:	20001c64 	.word	0x20001c64
 800ce70:	20001c6c 	.word	0x20001c6c
 800ce74:	20001c74 	.word	0x20001c74
 800ce78:	20001c70 	.word	0x20001c70
 800ce7c:	20001c78 	.word	0x20001c78

0800ce80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce88:	4b27      	ldr	r3, [pc, #156]	; (800cf28 <prvInsertBlockIntoFreeList+0xa8>)
 800ce8a:	60fb      	str	r3, [r7, #12]
 800ce8c:	e002      	b.n	800ce94 <prvInsertBlockIntoFreeList+0x14>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d8f7      	bhi.n	800ce8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	4413      	add	r3, r2
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d108      	bne.n	800cec2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	685a      	ldr	r2, [r3, #4]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	441a      	add	r2, r3
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	441a      	add	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d118      	bne.n	800cf08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	4b14      	ldr	r3, [pc, #80]	; (800cf2c <prvInsertBlockIntoFreeList+0xac>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d00d      	beq.n	800cefe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	685a      	ldr	r2, [r3, #4]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	441a      	add	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	e008      	b.n	800cf10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cefe:	4b0b      	ldr	r3, [pc, #44]	; (800cf2c <prvInsertBlockIntoFreeList+0xac>)
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	e003      	b.n	800cf10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d002      	beq.n	800cf1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf1e:	bf00      	nop
 800cf20:	3714      	adds	r7, #20
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr
 800cf28:	20001c64 	.word	0x20001c64
 800cf2c:	20001c6c 	.word	0x20001c6c

0800cf30 <__itoa>:
 800cf30:	1e93      	subs	r3, r2, #2
 800cf32:	2b22      	cmp	r3, #34	; 0x22
 800cf34:	b510      	push	{r4, lr}
 800cf36:	460c      	mov	r4, r1
 800cf38:	d904      	bls.n	800cf44 <__itoa+0x14>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	461c      	mov	r4, r3
 800cf3e:	700b      	strb	r3, [r1, #0]
 800cf40:	4620      	mov	r0, r4
 800cf42:	bd10      	pop	{r4, pc}
 800cf44:	2a0a      	cmp	r2, #10
 800cf46:	d109      	bne.n	800cf5c <__itoa+0x2c>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	da07      	bge.n	800cf5c <__itoa+0x2c>
 800cf4c:	232d      	movs	r3, #45	; 0x2d
 800cf4e:	700b      	strb	r3, [r1, #0]
 800cf50:	2101      	movs	r1, #1
 800cf52:	4240      	negs	r0, r0
 800cf54:	4421      	add	r1, r4
 800cf56:	f000 f8b9 	bl	800d0cc <__utoa>
 800cf5a:	e7f1      	b.n	800cf40 <__itoa+0x10>
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	e7f9      	b.n	800cf54 <__itoa+0x24>

0800cf60 <itoa>:
 800cf60:	f7ff bfe6 	b.w	800cf30 <__itoa>

0800cf64 <malloc>:
 800cf64:	4b02      	ldr	r3, [pc, #8]	; (800cf70 <malloc+0xc>)
 800cf66:	4601      	mov	r1, r0
 800cf68:	6818      	ldr	r0, [r3, #0]
 800cf6a:	f000 b823 	b.w	800cfb4 <_malloc_r>
 800cf6e:	bf00      	nop
 800cf70:	200009a0 	.word	0x200009a0

0800cf74 <sbrk_aligned>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	4e0e      	ldr	r6, [pc, #56]	; (800cfb0 <sbrk_aligned+0x3c>)
 800cf78:	460c      	mov	r4, r1
 800cf7a:	6831      	ldr	r1, [r6, #0]
 800cf7c:	4605      	mov	r5, r0
 800cf7e:	b911      	cbnz	r1, 800cf86 <sbrk_aligned+0x12>
 800cf80:	f000 f920 	bl	800d1c4 <_sbrk_r>
 800cf84:	6030      	str	r0, [r6, #0]
 800cf86:	4621      	mov	r1, r4
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f000 f91b 	bl	800d1c4 <_sbrk_r>
 800cf8e:	1c43      	adds	r3, r0, #1
 800cf90:	d00a      	beq.n	800cfa8 <sbrk_aligned+0x34>
 800cf92:	1cc4      	adds	r4, r0, #3
 800cf94:	f024 0403 	bic.w	r4, r4, #3
 800cf98:	42a0      	cmp	r0, r4
 800cf9a:	d007      	beq.n	800cfac <sbrk_aligned+0x38>
 800cf9c:	1a21      	subs	r1, r4, r0
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f000 f910 	bl	800d1c4 <_sbrk_r>
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	d101      	bne.n	800cfac <sbrk_aligned+0x38>
 800cfa8:	f04f 34ff 	mov.w	r4, #4294967295
 800cfac:	4620      	mov	r0, r4
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	20001c80 	.word	0x20001c80

0800cfb4 <_malloc_r>:
 800cfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfb8:	1ccd      	adds	r5, r1, #3
 800cfba:	f025 0503 	bic.w	r5, r5, #3
 800cfbe:	3508      	adds	r5, #8
 800cfc0:	2d0c      	cmp	r5, #12
 800cfc2:	bf38      	it	cc
 800cfc4:	250c      	movcc	r5, #12
 800cfc6:	2d00      	cmp	r5, #0
 800cfc8:	4607      	mov	r7, r0
 800cfca:	db01      	blt.n	800cfd0 <_malloc_r+0x1c>
 800cfcc:	42a9      	cmp	r1, r5
 800cfce:	d905      	bls.n	800cfdc <_malloc_r+0x28>
 800cfd0:	230c      	movs	r3, #12
 800cfd2:	2600      	movs	r6, #0
 800cfd4:	603b      	str	r3, [r7, #0]
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d0b0 <_malloc_r+0xfc>
 800cfe0:	f000 f868 	bl	800d0b4 <__malloc_lock>
 800cfe4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfe8:	461c      	mov	r4, r3
 800cfea:	bb5c      	cbnz	r4, 800d044 <_malloc_r+0x90>
 800cfec:	4629      	mov	r1, r5
 800cfee:	4638      	mov	r0, r7
 800cff0:	f7ff ffc0 	bl	800cf74 <sbrk_aligned>
 800cff4:	1c43      	adds	r3, r0, #1
 800cff6:	4604      	mov	r4, r0
 800cff8:	d155      	bne.n	800d0a6 <_malloc_r+0xf2>
 800cffa:	f8d8 4000 	ldr.w	r4, [r8]
 800cffe:	4626      	mov	r6, r4
 800d000:	2e00      	cmp	r6, #0
 800d002:	d145      	bne.n	800d090 <_malloc_r+0xdc>
 800d004:	2c00      	cmp	r4, #0
 800d006:	d048      	beq.n	800d09a <_malloc_r+0xe6>
 800d008:	6823      	ldr	r3, [r4, #0]
 800d00a:	4631      	mov	r1, r6
 800d00c:	4638      	mov	r0, r7
 800d00e:	eb04 0903 	add.w	r9, r4, r3
 800d012:	f000 f8d7 	bl	800d1c4 <_sbrk_r>
 800d016:	4581      	cmp	r9, r0
 800d018:	d13f      	bne.n	800d09a <_malloc_r+0xe6>
 800d01a:	6821      	ldr	r1, [r4, #0]
 800d01c:	4638      	mov	r0, r7
 800d01e:	1a6d      	subs	r5, r5, r1
 800d020:	4629      	mov	r1, r5
 800d022:	f7ff ffa7 	bl	800cf74 <sbrk_aligned>
 800d026:	3001      	adds	r0, #1
 800d028:	d037      	beq.n	800d09a <_malloc_r+0xe6>
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	442b      	add	r3, r5
 800d02e:	6023      	str	r3, [r4, #0]
 800d030:	f8d8 3000 	ldr.w	r3, [r8]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d038      	beq.n	800d0aa <_malloc_r+0xf6>
 800d038:	685a      	ldr	r2, [r3, #4]
 800d03a:	42a2      	cmp	r2, r4
 800d03c:	d12b      	bne.n	800d096 <_malloc_r+0xe2>
 800d03e:	2200      	movs	r2, #0
 800d040:	605a      	str	r2, [r3, #4]
 800d042:	e00f      	b.n	800d064 <_malloc_r+0xb0>
 800d044:	6822      	ldr	r2, [r4, #0]
 800d046:	1b52      	subs	r2, r2, r5
 800d048:	d41f      	bmi.n	800d08a <_malloc_r+0xd6>
 800d04a:	2a0b      	cmp	r2, #11
 800d04c:	d917      	bls.n	800d07e <_malloc_r+0xca>
 800d04e:	1961      	adds	r1, r4, r5
 800d050:	42a3      	cmp	r3, r4
 800d052:	6025      	str	r5, [r4, #0]
 800d054:	bf18      	it	ne
 800d056:	6059      	strne	r1, [r3, #4]
 800d058:	6863      	ldr	r3, [r4, #4]
 800d05a:	bf08      	it	eq
 800d05c:	f8c8 1000 	streq.w	r1, [r8]
 800d060:	5162      	str	r2, [r4, r5]
 800d062:	604b      	str	r3, [r1, #4]
 800d064:	4638      	mov	r0, r7
 800d066:	f104 060b 	add.w	r6, r4, #11
 800d06a:	f000 f829 	bl	800d0c0 <__malloc_unlock>
 800d06e:	f026 0607 	bic.w	r6, r6, #7
 800d072:	1d23      	adds	r3, r4, #4
 800d074:	1af2      	subs	r2, r6, r3
 800d076:	d0ae      	beq.n	800cfd6 <_malloc_r+0x22>
 800d078:	1b9b      	subs	r3, r3, r6
 800d07a:	50a3      	str	r3, [r4, r2]
 800d07c:	e7ab      	b.n	800cfd6 <_malloc_r+0x22>
 800d07e:	42a3      	cmp	r3, r4
 800d080:	6862      	ldr	r2, [r4, #4]
 800d082:	d1dd      	bne.n	800d040 <_malloc_r+0x8c>
 800d084:	f8c8 2000 	str.w	r2, [r8]
 800d088:	e7ec      	b.n	800d064 <_malloc_r+0xb0>
 800d08a:	4623      	mov	r3, r4
 800d08c:	6864      	ldr	r4, [r4, #4]
 800d08e:	e7ac      	b.n	800cfea <_malloc_r+0x36>
 800d090:	4634      	mov	r4, r6
 800d092:	6876      	ldr	r6, [r6, #4]
 800d094:	e7b4      	b.n	800d000 <_malloc_r+0x4c>
 800d096:	4613      	mov	r3, r2
 800d098:	e7cc      	b.n	800d034 <_malloc_r+0x80>
 800d09a:	230c      	movs	r3, #12
 800d09c:	4638      	mov	r0, r7
 800d09e:	603b      	str	r3, [r7, #0]
 800d0a0:	f000 f80e 	bl	800d0c0 <__malloc_unlock>
 800d0a4:	e797      	b.n	800cfd6 <_malloc_r+0x22>
 800d0a6:	6025      	str	r5, [r4, #0]
 800d0a8:	e7dc      	b.n	800d064 <_malloc_r+0xb0>
 800d0aa:	605b      	str	r3, [r3, #4]
 800d0ac:	deff      	udf	#255	; 0xff
 800d0ae:	bf00      	nop
 800d0b0:	20001c7c 	.word	0x20001c7c

0800d0b4 <__malloc_lock>:
 800d0b4:	4801      	ldr	r0, [pc, #4]	; (800d0bc <__malloc_lock+0x8>)
 800d0b6:	f000 b8bf 	b.w	800d238 <__retarget_lock_acquire_recursive>
 800d0ba:	bf00      	nop
 800d0bc:	20001dc0 	.word	0x20001dc0

0800d0c0 <__malloc_unlock>:
 800d0c0:	4801      	ldr	r0, [pc, #4]	; (800d0c8 <__malloc_unlock+0x8>)
 800d0c2:	f000 b8ba 	b.w	800d23a <__retarget_lock_release_recursive>
 800d0c6:	bf00      	nop
 800d0c8:	20001dc0 	.word	0x20001dc0

0800d0cc <__utoa>:
 800d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ce:	b08b      	sub	sp, #44	; 0x2c
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	466e      	mov	r6, sp
 800d0d6:	4c1d      	ldr	r4, [pc, #116]	; (800d14c <__utoa+0x80>)
 800d0d8:	f104 0c20 	add.w	ip, r4, #32
 800d0dc:	4637      	mov	r7, r6
 800d0de:	6820      	ldr	r0, [r4, #0]
 800d0e0:	6861      	ldr	r1, [r4, #4]
 800d0e2:	3408      	adds	r4, #8
 800d0e4:	c703      	stmia	r7!, {r0, r1}
 800d0e6:	4564      	cmp	r4, ip
 800d0e8:	463e      	mov	r6, r7
 800d0ea:	d1f7      	bne.n	800d0dc <__utoa+0x10>
 800d0ec:	7921      	ldrb	r1, [r4, #4]
 800d0ee:	6820      	ldr	r0, [r4, #0]
 800d0f0:	7139      	strb	r1, [r7, #4]
 800d0f2:	1e91      	subs	r1, r2, #2
 800d0f4:	2922      	cmp	r1, #34	; 0x22
 800d0f6:	6038      	str	r0, [r7, #0]
 800d0f8:	f04f 0100 	mov.w	r1, #0
 800d0fc:	d904      	bls.n	800d108 <__utoa+0x3c>
 800d0fe:	7019      	strb	r1, [r3, #0]
 800d100:	460b      	mov	r3, r1
 800d102:	4618      	mov	r0, r3
 800d104:	b00b      	add	sp, #44	; 0x2c
 800d106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d108:	1e58      	subs	r0, r3, #1
 800d10a:	4684      	mov	ip, r0
 800d10c:	fbb5 f7f2 	udiv	r7, r5, r2
 800d110:	fb02 5617 	mls	r6, r2, r7, r5
 800d114:	3628      	adds	r6, #40	; 0x28
 800d116:	446e      	add	r6, sp
 800d118:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d11c:	460c      	mov	r4, r1
 800d11e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d122:	462e      	mov	r6, r5
 800d124:	42b2      	cmp	r2, r6
 800d126:	463d      	mov	r5, r7
 800d128:	f101 0101 	add.w	r1, r1, #1
 800d12c:	d9ee      	bls.n	800d10c <__utoa+0x40>
 800d12e:	2200      	movs	r2, #0
 800d130:	545a      	strb	r2, [r3, r1]
 800d132:	1919      	adds	r1, r3, r4
 800d134:	1aa5      	subs	r5, r4, r2
 800d136:	42aa      	cmp	r2, r5
 800d138:	dae3      	bge.n	800d102 <__utoa+0x36>
 800d13a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d13e:	780e      	ldrb	r6, [r1, #0]
 800d140:	3201      	adds	r2, #1
 800d142:	7006      	strb	r6, [r0, #0]
 800d144:	f801 5901 	strb.w	r5, [r1], #-1
 800d148:	e7f4      	b.n	800d134 <__utoa+0x68>
 800d14a:	bf00      	nop
 800d14c:	0800e882 	.word	0x0800e882

0800d150 <siprintf>:
 800d150:	b40e      	push	{r1, r2, r3}
 800d152:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d156:	b500      	push	{lr}
 800d158:	b09c      	sub	sp, #112	; 0x70
 800d15a:	ab1d      	add	r3, sp, #116	; 0x74
 800d15c:	9002      	str	r0, [sp, #8]
 800d15e:	9006      	str	r0, [sp, #24]
 800d160:	9107      	str	r1, [sp, #28]
 800d162:	9104      	str	r1, [sp, #16]
 800d164:	4808      	ldr	r0, [pc, #32]	; (800d188 <siprintf+0x38>)
 800d166:	4909      	ldr	r1, [pc, #36]	; (800d18c <siprintf+0x3c>)
 800d168:	f853 2b04 	ldr.w	r2, [r3], #4
 800d16c:	9105      	str	r1, [sp, #20]
 800d16e:	6800      	ldr	r0, [r0, #0]
 800d170:	a902      	add	r1, sp, #8
 800d172:	9301      	str	r3, [sp, #4]
 800d174:	f000 f91a 	bl	800d3ac <_svfiprintf_r>
 800d178:	2200      	movs	r2, #0
 800d17a:	9b02      	ldr	r3, [sp, #8]
 800d17c:	701a      	strb	r2, [r3, #0]
 800d17e:	b01c      	add	sp, #112	; 0x70
 800d180:	f85d eb04 	ldr.w	lr, [sp], #4
 800d184:	b003      	add	sp, #12
 800d186:	4770      	bx	lr
 800d188:	200009a0 	.word	0x200009a0
 800d18c:	ffff0208 	.word	0xffff0208

0800d190 <memset>:
 800d190:	4603      	mov	r3, r0
 800d192:	4402      	add	r2, r0
 800d194:	4293      	cmp	r3, r2
 800d196:	d100      	bne.n	800d19a <memset+0xa>
 800d198:	4770      	bx	lr
 800d19a:	f803 1b01 	strb.w	r1, [r3], #1
 800d19e:	e7f9      	b.n	800d194 <memset+0x4>

0800d1a0 <strncmp>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	b16a      	cbz	r2, 800d1c0 <strncmp+0x20>
 800d1a4:	3901      	subs	r1, #1
 800d1a6:	1884      	adds	r4, r0, r2
 800d1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d103      	bne.n	800d1bc <strncmp+0x1c>
 800d1b4:	42a0      	cmp	r0, r4
 800d1b6:	d001      	beq.n	800d1bc <strncmp+0x1c>
 800d1b8:	2a00      	cmp	r2, #0
 800d1ba:	d1f5      	bne.n	800d1a8 <strncmp+0x8>
 800d1bc:	1ad0      	subs	r0, r2, r3
 800d1be:	bd10      	pop	{r4, pc}
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	e7fc      	b.n	800d1be <strncmp+0x1e>

0800d1c4 <_sbrk_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4d05      	ldr	r5, [pc, #20]	; (800d1e0 <_sbrk_r+0x1c>)
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	602b      	str	r3, [r5, #0]
 800d1d0:	f7fa fcbe 	bl	8007b50 <_sbrk>
 800d1d4:	1c43      	adds	r3, r0, #1
 800d1d6:	d102      	bne.n	800d1de <_sbrk_r+0x1a>
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	b103      	cbz	r3, 800d1de <_sbrk_r+0x1a>
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	20001dbc 	.word	0x20001dbc

0800d1e4 <__errno>:
 800d1e4:	4b01      	ldr	r3, [pc, #4]	; (800d1ec <__errno+0x8>)
 800d1e6:	6818      	ldr	r0, [r3, #0]
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	200009a0 	.word	0x200009a0

0800d1f0 <__libc_init_array>:
 800d1f0:	b570      	push	{r4, r5, r6, lr}
 800d1f2:	2600      	movs	r6, #0
 800d1f4:	4d0c      	ldr	r5, [pc, #48]	; (800d228 <__libc_init_array+0x38>)
 800d1f6:	4c0d      	ldr	r4, [pc, #52]	; (800d22c <__libc_init_array+0x3c>)
 800d1f8:	1b64      	subs	r4, r4, r5
 800d1fa:	10a4      	asrs	r4, r4, #2
 800d1fc:	42a6      	cmp	r6, r4
 800d1fe:	d109      	bne.n	800d214 <__libc_init_array+0x24>
 800d200:	f000 fbc6 	bl	800d990 <_init>
 800d204:	2600      	movs	r6, #0
 800d206:	4d0a      	ldr	r5, [pc, #40]	; (800d230 <__libc_init_array+0x40>)
 800d208:	4c0a      	ldr	r4, [pc, #40]	; (800d234 <__libc_init_array+0x44>)
 800d20a:	1b64      	subs	r4, r4, r5
 800d20c:	10a4      	asrs	r4, r4, #2
 800d20e:	42a6      	cmp	r6, r4
 800d210:	d105      	bne.n	800d21e <__libc_init_array+0x2e>
 800d212:	bd70      	pop	{r4, r5, r6, pc}
 800d214:	f855 3b04 	ldr.w	r3, [r5], #4
 800d218:	4798      	blx	r3
 800d21a:	3601      	adds	r6, #1
 800d21c:	e7ee      	b.n	800d1fc <__libc_init_array+0xc>
 800d21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d222:	4798      	blx	r3
 800d224:	3601      	adds	r6, #1
 800d226:	e7f2      	b.n	800d20e <__libc_init_array+0x1e>
 800d228:	0800e8dc 	.word	0x0800e8dc
 800d22c:	0800e8dc 	.word	0x0800e8dc
 800d230:	0800e8dc 	.word	0x0800e8dc
 800d234:	0800e8e0 	.word	0x0800e8e0

0800d238 <__retarget_lock_acquire_recursive>:
 800d238:	4770      	bx	lr

0800d23a <__retarget_lock_release_recursive>:
 800d23a:	4770      	bx	lr

0800d23c <strcpy>:
 800d23c:	4603      	mov	r3, r0
 800d23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d242:	f803 2b01 	strb.w	r2, [r3], #1
 800d246:	2a00      	cmp	r2, #0
 800d248:	d1f9      	bne.n	800d23e <strcpy+0x2>
 800d24a:	4770      	bx	lr

0800d24c <memcpy>:
 800d24c:	440a      	add	r2, r1
 800d24e:	4291      	cmp	r1, r2
 800d250:	f100 33ff 	add.w	r3, r0, #4294967295
 800d254:	d100      	bne.n	800d258 <memcpy+0xc>
 800d256:	4770      	bx	lr
 800d258:	b510      	push	{r4, lr}
 800d25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d25e:	4291      	cmp	r1, r2
 800d260:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d264:	d1f9      	bne.n	800d25a <memcpy+0xe>
 800d266:	bd10      	pop	{r4, pc}

0800d268 <_free_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4605      	mov	r5, r0
 800d26c:	2900      	cmp	r1, #0
 800d26e:	d040      	beq.n	800d2f2 <_free_r+0x8a>
 800d270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d274:	1f0c      	subs	r4, r1, #4
 800d276:	2b00      	cmp	r3, #0
 800d278:	bfb8      	it	lt
 800d27a:	18e4      	addlt	r4, r4, r3
 800d27c:	f7ff ff1a 	bl	800d0b4 <__malloc_lock>
 800d280:	4a1c      	ldr	r2, [pc, #112]	; (800d2f4 <_free_r+0x8c>)
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	b933      	cbnz	r3, 800d294 <_free_r+0x2c>
 800d286:	6063      	str	r3, [r4, #4]
 800d288:	6014      	str	r4, [r2, #0]
 800d28a:	4628      	mov	r0, r5
 800d28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d290:	f7ff bf16 	b.w	800d0c0 <__malloc_unlock>
 800d294:	42a3      	cmp	r3, r4
 800d296:	d908      	bls.n	800d2aa <_free_r+0x42>
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	1821      	adds	r1, r4, r0
 800d29c:	428b      	cmp	r3, r1
 800d29e:	bf01      	itttt	eq
 800d2a0:	6819      	ldreq	r1, [r3, #0]
 800d2a2:	685b      	ldreq	r3, [r3, #4]
 800d2a4:	1809      	addeq	r1, r1, r0
 800d2a6:	6021      	streq	r1, [r4, #0]
 800d2a8:	e7ed      	b.n	800d286 <_free_r+0x1e>
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	b10b      	cbz	r3, 800d2b4 <_free_r+0x4c>
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	d9fa      	bls.n	800d2aa <_free_r+0x42>
 800d2b4:	6811      	ldr	r1, [r2, #0]
 800d2b6:	1850      	adds	r0, r2, r1
 800d2b8:	42a0      	cmp	r0, r4
 800d2ba:	d10b      	bne.n	800d2d4 <_free_r+0x6c>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	4401      	add	r1, r0
 800d2c0:	1850      	adds	r0, r2, r1
 800d2c2:	4283      	cmp	r3, r0
 800d2c4:	6011      	str	r1, [r2, #0]
 800d2c6:	d1e0      	bne.n	800d28a <_free_r+0x22>
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	4408      	add	r0, r1
 800d2ce:	6010      	str	r0, [r2, #0]
 800d2d0:	6053      	str	r3, [r2, #4]
 800d2d2:	e7da      	b.n	800d28a <_free_r+0x22>
 800d2d4:	d902      	bls.n	800d2dc <_free_r+0x74>
 800d2d6:	230c      	movs	r3, #12
 800d2d8:	602b      	str	r3, [r5, #0]
 800d2da:	e7d6      	b.n	800d28a <_free_r+0x22>
 800d2dc:	6820      	ldr	r0, [r4, #0]
 800d2de:	1821      	adds	r1, r4, r0
 800d2e0:	428b      	cmp	r3, r1
 800d2e2:	bf01      	itttt	eq
 800d2e4:	6819      	ldreq	r1, [r3, #0]
 800d2e6:	685b      	ldreq	r3, [r3, #4]
 800d2e8:	1809      	addeq	r1, r1, r0
 800d2ea:	6021      	streq	r1, [r4, #0]
 800d2ec:	6063      	str	r3, [r4, #4]
 800d2ee:	6054      	str	r4, [r2, #4]
 800d2f0:	e7cb      	b.n	800d28a <_free_r+0x22>
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	20001c7c 	.word	0x20001c7c

0800d2f8 <__ssputs_r>:
 800d2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2fc:	461f      	mov	r7, r3
 800d2fe:	688e      	ldr	r6, [r1, #8]
 800d300:	4682      	mov	sl, r0
 800d302:	42be      	cmp	r6, r7
 800d304:	460c      	mov	r4, r1
 800d306:	4690      	mov	r8, r2
 800d308:	680b      	ldr	r3, [r1, #0]
 800d30a:	d82c      	bhi.n	800d366 <__ssputs_r+0x6e>
 800d30c:	898a      	ldrh	r2, [r1, #12]
 800d30e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d312:	d026      	beq.n	800d362 <__ssputs_r+0x6a>
 800d314:	6965      	ldr	r5, [r4, #20]
 800d316:	6909      	ldr	r1, [r1, #16]
 800d318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d31c:	eba3 0901 	sub.w	r9, r3, r1
 800d320:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d324:	1c7b      	adds	r3, r7, #1
 800d326:	444b      	add	r3, r9
 800d328:	106d      	asrs	r5, r5, #1
 800d32a:	429d      	cmp	r5, r3
 800d32c:	bf38      	it	cc
 800d32e:	461d      	movcc	r5, r3
 800d330:	0553      	lsls	r3, r2, #21
 800d332:	d527      	bpl.n	800d384 <__ssputs_r+0x8c>
 800d334:	4629      	mov	r1, r5
 800d336:	f7ff fe3d 	bl	800cfb4 <_malloc_r>
 800d33a:	4606      	mov	r6, r0
 800d33c:	b360      	cbz	r0, 800d398 <__ssputs_r+0xa0>
 800d33e:	464a      	mov	r2, r9
 800d340:	6921      	ldr	r1, [r4, #16]
 800d342:	f7ff ff83 	bl	800d24c <memcpy>
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d350:	81a3      	strh	r3, [r4, #12]
 800d352:	6126      	str	r6, [r4, #16]
 800d354:	444e      	add	r6, r9
 800d356:	6026      	str	r6, [r4, #0]
 800d358:	463e      	mov	r6, r7
 800d35a:	6165      	str	r5, [r4, #20]
 800d35c:	eba5 0509 	sub.w	r5, r5, r9
 800d360:	60a5      	str	r5, [r4, #8]
 800d362:	42be      	cmp	r6, r7
 800d364:	d900      	bls.n	800d368 <__ssputs_r+0x70>
 800d366:	463e      	mov	r6, r7
 800d368:	4632      	mov	r2, r6
 800d36a:	4641      	mov	r1, r8
 800d36c:	6820      	ldr	r0, [r4, #0]
 800d36e:	f000 faaf 	bl	800d8d0 <memmove>
 800d372:	2000      	movs	r0, #0
 800d374:	68a3      	ldr	r3, [r4, #8]
 800d376:	1b9b      	subs	r3, r3, r6
 800d378:	60a3      	str	r3, [r4, #8]
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	4433      	add	r3, r6
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d384:	462a      	mov	r2, r5
 800d386:	f000 facb 	bl	800d920 <_realloc_r>
 800d38a:	4606      	mov	r6, r0
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d1e0      	bne.n	800d352 <__ssputs_r+0x5a>
 800d390:	4650      	mov	r0, sl
 800d392:	6921      	ldr	r1, [r4, #16]
 800d394:	f7ff ff68 	bl	800d268 <_free_r>
 800d398:	230c      	movs	r3, #12
 800d39a:	f8ca 3000 	str.w	r3, [sl]
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	e7e9      	b.n	800d380 <__ssputs_r+0x88>

0800d3ac <_svfiprintf_r>:
 800d3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b0:	4698      	mov	r8, r3
 800d3b2:	898b      	ldrh	r3, [r1, #12]
 800d3b4:	4607      	mov	r7, r0
 800d3b6:	061b      	lsls	r3, r3, #24
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	4614      	mov	r4, r2
 800d3bc:	b09d      	sub	sp, #116	; 0x74
 800d3be:	d50e      	bpl.n	800d3de <_svfiprintf_r+0x32>
 800d3c0:	690b      	ldr	r3, [r1, #16]
 800d3c2:	b963      	cbnz	r3, 800d3de <_svfiprintf_r+0x32>
 800d3c4:	2140      	movs	r1, #64	; 0x40
 800d3c6:	f7ff fdf5 	bl	800cfb4 <_malloc_r>
 800d3ca:	6028      	str	r0, [r5, #0]
 800d3cc:	6128      	str	r0, [r5, #16]
 800d3ce:	b920      	cbnz	r0, 800d3da <_svfiprintf_r+0x2e>
 800d3d0:	230c      	movs	r3, #12
 800d3d2:	603b      	str	r3, [r7, #0]
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d8:	e0d0      	b.n	800d57c <_svfiprintf_r+0x1d0>
 800d3da:	2340      	movs	r3, #64	; 0x40
 800d3dc:	616b      	str	r3, [r5, #20]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e2:	2320      	movs	r3, #32
 800d3e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3e8:	2330      	movs	r3, #48	; 0x30
 800d3ea:	f04f 0901 	mov.w	r9, #1
 800d3ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3f2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d594 <_svfiprintf_r+0x1e8>
 800d3f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3fa:	4623      	mov	r3, r4
 800d3fc:	469a      	mov	sl, r3
 800d3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d402:	b10a      	cbz	r2, 800d408 <_svfiprintf_r+0x5c>
 800d404:	2a25      	cmp	r2, #37	; 0x25
 800d406:	d1f9      	bne.n	800d3fc <_svfiprintf_r+0x50>
 800d408:	ebba 0b04 	subs.w	fp, sl, r4
 800d40c:	d00b      	beq.n	800d426 <_svfiprintf_r+0x7a>
 800d40e:	465b      	mov	r3, fp
 800d410:	4622      	mov	r2, r4
 800d412:	4629      	mov	r1, r5
 800d414:	4638      	mov	r0, r7
 800d416:	f7ff ff6f 	bl	800d2f8 <__ssputs_r>
 800d41a:	3001      	adds	r0, #1
 800d41c:	f000 80a9 	beq.w	800d572 <_svfiprintf_r+0x1c6>
 800d420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d422:	445a      	add	r2, fp
 800d424:	9209      	str	r2, [sp, #36]	; 0x24
 800d426:	f89a 3000 	ldrb.w	r3, [sl]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f000 80a1 	beq.w	800d572 <_svfiprintf_r+0x1c6>
 800d430:	2300      	movs	r3, #0
 800d432:	f04f 32ff 	mov.w	r2, #4294967295
 800d436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d43a:	f10a 0a01 	add.w	sl, sl, #1
 800d43e:	9304      	str	r3, [sp, #16]
 800d440:	9307      	str	r3, [sp, #28]
 800d442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d446:	931a      	str	r3, [sp, #104]	; 0x68
 800d448:	4654      	mov	r4, sl
 800d44a:	2205      	movs	r2, #5
 800d44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d450:	4850      	ldr	r0, [pc, #320]	; (800d594 <_svfiprintf_r+0x1e8>)
 800d452:	f000 fa57 	bl	800d904 <memchr>
 800d456:	9a04      	ldr	r2, [sp, #16]
 800d458:	b9d8      	cbnz	r0, 800d492 <_svfiprintf_r+0xe6>
 800d45a:	06d0      	lsls	r0, r2, #27
 800d45c:	bf44      	itt	mi
 800d45e:	2320      	movmi	r3, #32
 800d460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d464:	0711      	lsls	r1, r2, #28
 800d466:	bf44      	itt	mi
 800d468:	232b      	movmi	r3, #43	; 0x2b
 800d46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d46e:	f89a 3000 	ldrb.w	r3, [sl]
 800d472:	2b2a      	cmp	r3, #42	; 0x2a
 800d474:	d015      	beq.n	800d4a2 <_svfiprintf_r+0xf6>
 800d476:	4654      	mov	r4, sl
 800d478:	2000      	movs	r0, #0
 800d47a:	f04f 0c0a 	mov.w	ip, #10
 800d47e:	9a07      	ldr	r2, [sp, #28]
 800d480:	4621      	mov	r1, r4
 800d482:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d486:	3b30      	subs	r3, #48	; 0x30
 800d488:	2b09      	cmp	r3, #9
 800d48a:	d94d      	bls.n	800d528 <_svfiprintf_r+0x17c>
 800d48c:	b1b0      	cbz	r0, 800d4bc <_svfiprintf_r+0x110>
 800d48e:	9207      	str	r2, [sp, #28]
 800d490:	e014      	b.n	800d4bc <_svfiprintf_r+0x110>
 800d492:	eba0 0308 	sub.w	r3, r0, r8
 800d496:	fa09 f303 	lsl.w	r3, r9, r3
 800d49a:	4313      	orrs	r3, r2
 800d49c:	46a2      	mov	sl, r4
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	e7d2      	b.n	800d448 <_svfiprintf_r+0x9c>
 800d4a2:	9b03      	ldr	r3, [sp, #12]
 800d4a4:	1d19      	adds	r1, r3, #4
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	9103      	str	r1, [sp, #12]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	bfbb      	ittet	lt
 800d4ae:	425b      	neglt	r3, r3
 800d4b0:	f042 0202 	orrlt.w	r2, r2, #2
 800d4b4:	9307      	strge	r3, [sp, #28]
 800d4b6:	9307      	strlt	r3, [sp, #28]
 800d4b8:	bfb8      	it	lt
 800d4ba:	9204      	strlt	r2, [sp, #16]
 800d4bc:	7823      	ldrb	r3, [r4, #0]
 800d4be:	2b2e      	cmp	r3, #46	; 0x2e
 800d4c0:	d10c      	bne.n	800d4dc <_svfiprintf_r+0x130>
 800d4c2:	7863      	ldrb	r3, [r4, #1]
 800d4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d4c6:	d134      	bne.n	800d532 <_svfiprintf_r+0x186>
 800d4c8:	9b03      	ldr	r3, [sp, #12]
 800d4ca:	3402      	adds	r4, #2
 800d4cc:	1d1a      	adds	r2, r3, #4
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	9203      	str	r2, [sp, #12]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	bfb8      	it	lt
 800d4d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4da:	9305      	str	r3, [sp, #20]
 800d4dc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d598 <_svfiprintf_r+0x1ec>
 800d4e0:	2203      	movs	r2, #3
 800d4e2:	4650      	mov	r0, sl
 800d4e4:	7821      	ldrb	r1, [r4, #0]
 800d4e6:	f000 fa0d 	bl	800d904 <memchr>
 800d4ea:	b138      	cbz	r0, 800d4fc <_svfiprintf_r+0x150>
 800d4ec:	2240      	movs	r2, #64	; 0x40
 800d4ee:	9b04      	ldr	r3, [sp, #16]
 800d4f0:	eba0 000a 	sub.w	r0, r0, sl
 800d4f4:	4082      	lsls	r2, r0
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	3401      	adds	r4, #1
 800d4fa:	9304      	str	r3, [sp, #16]
 800d4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d500:	2206      	movs	r2, #6
 800d502:	4826      	ldr	r0, [pc, #152]	; (800d59c <_svfiprintf_r+0x1f0>)
 800d504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d508:	f000 f9fc 	bl	800d904 <memchr>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d038      	beq.n	800d582 <_svfiprintf_r+0x1d6>
 800d510:	4b23      	ldr	r3, [pc, #140]	; (800d5a0 <_svfiprintf_r+0x1f4>)
 800d512:	bb1b      	cbnz	r3, 800d55c <_svfiprintf_r+0x1b0>
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	3307      	adds	r3, #7
 800d518:	f023 0307 	bic.w	r3, r3, #7
 800d51c:	3308      	adds	r3, #8
 800d51e:	9303      	str	r3, [sp, #12]
 800d520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d522:	4433      	add	r3, r6
 800d524:	9309      	str	r3, [sp, #36]	; 0x24
 800d526:	e768      	b.n	800d3fa <_svfiprintf_r+0x4e>
 800d528:	460c      	mov	r4, r1
 800d52a:	2001      	movs	r0, #1
 800d52c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d530:	e7a6      	b.n	800d480 <_svfiprintf_r+0xd4>
 800d532:	2300      	movs	r3, #0
 800d534:	f04f 0c0a 	mov.w	ip, #10
 800d538:	4619      	mov	r1, r3
 800d53a:	3401      	adds	r4, #1
 800d53c:	9305      	str	r3, [sp, #20]
 800d53e:	4620      	mov	r0, r4
 800d540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d544:	3a30      	subs	r2, #48	; 0x30
 800d546:	2a09      	cmp	r2, #9
 800d548:	d903      	bls.n	800d552 <_svfiprintf_r+0x1a6>
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d0c6      	beq.n	800d4dc <_svfiprintf_r+0x130>
 800d54e:	9105      	str	r1, [sp, #20]
 800d550:	e7c4      	b.n	800d4dc <_svfiprintf_r+0x130>
 800d552:	4604      	mov	r4, r0
 800d554:	2301      	movs	r3, #1
 800d556:	fb0c 2101 	mla	r1, ip, r1, r2
 800d55a:	e7f0      	b.n	800d53e <_svfiprintf_r+0x192>
 800d55c:	ab03      	add	r3, sp, #12
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	462a      	mov	r2, r5
 800d562:	4638      	mov	r0, r7
 800d564:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <_svfiprintf_r+0x1f8>)
 800d566:	a904      	add	r1, sp, #16
 800d568:	f3af 8000 	nop.w
 800d56c:	1c42      	adds	r2, r0, #1
 800d56e:	4606      	mov	r6, r0
 800d570:	d1d6      	bne.n	800d520 <_svfiprintf_r+0x174>
 800d572:	89ab      	ldrh	r3, [r5, #12]
 800d574:	065b      	lsls	r3, r3, #25
 800d576:	f53f af2d 	bmi.w	800d3d4 <_svfiprintf_r+0x28>
 800d57a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d57c:	b01d      	add	sp, #116	; 0x74
 800d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d582:	ab03      	add	r3, sp, #12
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	462a      	mov	r2, r5
 800d588:	4638      	mov	r0, r7
 800d58a:	4b06      	ldr	r3, [pc, #24]	; (800d5a4 <_svfiprintf_r+0x1f8>)
 800d58c:	a904      	add	r1, sp, #16
 800d58e:	f000 f87d 	bl	800d68c <_printf_i>
 800d592:	e7eb      	b.n	800d56c <_svfiprintf_r+0x1c0>
 800d594:	0800e8a7 	.word	0x0800e8a7
 800d598:	0800e8ad 	.word	0x0800e8ad
 800d59c:	0800e8b1 	.word	0x0800e8b1
 800d5a0:	00000000 	.word	0x00000000
 800d5a4:	0800d2f9 	.word	0x0800d2f9

0800d5a8 <_printf_common>:
 800d5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ac:	4616      	mov	r6, r2
 800d5ae:	4699      	mov	r9, r3
 800d5b0:	688a      	ldr	r2, [r1, #8]
 800d5b2:	690b      	ldr	r3, [r1, #16]
 800d5b4:	4607      	mov	r7, r0
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	bfb8      	it	lt
 800d5ba:	4613      	movlt	r3, r2
 800d5bc:	6033      	str	r3, [r6, #0]
 800d5be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5c2:	460c      	mov	r4, r1
 800d5c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5c8:	b10a      	cbz	r2, 800d5ce <_printf_common+0x26>
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	6033      	str	r3, [r6, #0]
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	0699      	lsls	r1, r3, #26
 800d5d2:	bf42      	ittt	mi
 800d5d4:	6833      	ldrmi	r3, [r6, #0]
 800d5d6:	3302      	addmi	r3, #2
 800d5d8:	6033      	strmi	r3, [r6, #0]
 800d5da:	6825      	ldr	r5, [r4, #0]
 800d5dc:	f015 0506 	ands.w	r5, r5, #6
 800d5e0:	d106      	bne.n	800d5f0 <_printf_common+0x48>
 800d5e2:	f104 0a19 	add.w	sl, r4, #25
 800d5e6:	68e3      	ldr	r3, [r4, #12]
 800d5e8:	6832      	ldr	r2, [r6, #0]
 800d5ea:	1a9b      	subs	r3, r3, r2
 800d5ec:	42ab      	cmp	r3, r5
 800d5ee:	dc2b      	bgt.n	800d648 <_printf_common+0xa0>
 800d5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5f4:	1e13      	subs	r3, r2, #0
 800d5f6:	6822      	ldr	r2, [r4, #0]
 800d5f8:	bf18      	it	ne
 800d5fa:	2301      	movne	r3, #1
 800d5fc:	0692      	lsls	r2, r2, #26
 800d5fe:	d430      	bmi.n	800d662 <_printf_common+0xba>
 800d600:	4649      	mov	r1, r9
 800d602:	4638      	mov	r0, r7
 800d604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d608:	47c0      	blx	r8
 800d60a:	3001      	adds	r0, #1
 800d60c:	d023      	beq.n	800d656 <_printf_common+0xae>
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	6922      	ldr	r2, [r4, #16]
 800d612:	f003 0306 	and.w	r3, r3, #6
 800d616:	2b04      	cmp	r3, #4
 800d618:	bf14      	ite	ne
 800d61a:	2500      	movne	r5, #0
 800d61c:	6833      	ldreq	r3, [r6, #0]
 800d61e:	f04f 0600 	mov.w	r6, #0
 800d622:	bf08      	it	eq
 800d624:	68e5      	ldreq	r5, [r4, #12]
 800d626:	f104 041a 	add.w	r4, r4, #26
 800d62a:	bf08      	it	eq
 800d62c:	1aed      	subeq	r5, r5, r3
 800d62e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d632:	bf08      	it	eq
 800d634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d638:	4293      	cmp	r3, r2
 800d63a:	bfc4      	itt	gt
 800d63c:	1a9b      	subgt	r3, r3, r2
 800d63e:	18ed      	addgt	r5, r5, r3
 800d640:	42b5      	cmp	r5, r6
 800d642:	d11a      	bne.n	800d67a <_printf_common+0xd2>
 800d644:	2000      	movs	r0, #0
 800d646:	e008      	b.n	800d65a <_printf_common+0xb2>
 800d648:	2301      	movs	r3, #1
 800d64a:	4652      	mov	r2, sl
 800d64c:	4649      	mov	r1, r9
 800d64e:	4638      	mov	r0, r7
 800d650:	47c0      	blx	r8
 800d652:	3001      	adds	r0, #1
 800d654:	d103      	bne.n	800d65e <_printf_common+0xb6>
 800d656:	f04f 30ff 	mov.w	r0, #4294967295
 800d65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d65e:	3501      	adds	r5, #1
 800d660:	e7c1      	b.n	800d5e6 <_printf_common+0x3e>
 800d662:	2030      	movs	r0, #48	; 0x30
 800d664:	18e1      	adds	r1, r4, r3
 800d666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d670:	4422      	add	r2, r4
 800d672:	3302      	adds	r3, #2
 800d674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d678:	e7c2      	b.n	800d600 <_printf_common+0x58>
 800d67a:	2301      	movs	r3, #1
 800d67c:	4622      	mov	r2, r4
 800d67e:	4649      	mov	r1, r9
 800d680:	4638      	mov	r0, r7
 800d682:	47c0      	blx	r8
 800d684:	3001      	adds	r0, #1
 800d686:	d0e6      	beq.n	800d656 <_printf_common+0xae>
 800d688:	3601      	adds	r6, #1
 800d68a:	e7d9      	b.n	800d640 <_printf_common+0x98>

0800d68c <_printf_i>:
 800d68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d690:	7e0f      	ldrb	r7, [r1, #24]
 800d692:	4691      	mov	r9, r2
 800d694:	2f78      	cmp	r7, #120	; 0x78
 800d696:	4680      	mov	r8, r0
 800d698:	460c      	mov	r4, r1
 800d69a:	469a      	mov	sl, r3
 800d69c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d69e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d6a2:	d807      	bhi.n	800d6b4 <_printf_i+0x28>
 800d6a4:	2f62      	cmp	r7, #98	; 0x62
 800d6a6:	d80a      	bhi.n	800d6be <_printf_i+0x32>
 800d6a8:	2f00      	cmp	r7, #0
 800d6aa:	f000 80d5 	beq.w	800d858 <_printf_i+0x1cc>
 800d6ae:	2f58      	cmp	r7, #88	; 0x58
 800d6b0:	f000 80c1 	beq.w	800d836 <_printf_i+0x1aa>
 800d6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6bc:	e03a      	b.n	800d734 <_printf_i+0xa8>
 800d6be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6c2:	2b15      	cmp	r3, #21
 800d6c4:	d8f6      	bhi.n	800d6b4 <_printf_i+0x28>
 800d6c6:	a101      	add	r1, pc, #4	; (adr r1, 800d6cc <_printf_i+0x40>)
 800d6c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6cc:	0800d725 	.word	0x0800d725
 800d6d0:	0800d739 	.word	0x0800d739
 800d6d4:	0800d6b5 	.word	0x0800d6b5
 800d6d8:	0800d6b5 	.word	0x0800d6b5
 800d6dc:	0800d6b5 	.word	0x0800d6b5
 800d6e0:	0800d6b5 	.word	0x0800d6b5
 800d6e4:	0800d739 	.word	0x0800d739
 800d6e8:	0800d6b5 	.word	0x0800d6b5
 800d6ec:	0800d6b5 	.word	0x0800d6b5
 800d6f0:	0800d6b5 	.word	0x0800d6b5
 800d6f4:	0800d6b5 	.word	0x0800d6b5
 800d6f8:	0800d83f 	.word	0x0800d83f
 800d6fc:	0800d765 	.word	0x0800d765
 800d700:	0800d7f9 	.word	0x0800d7f9
 800d704:	0800d6b5 	.word	0x0800d6b5
 800d708:	0800d6b5 	.word	0x0800d6b5
 800d70c:	0800d861 	.word	0x0800d861
 800d710:	0800d6b5 	.word	0x0800d6b5
 800d714:	0800d765 	.word	0x0800d765
 800d718:	0800d6b5 	.word	0x0800d6b5
 800d71c:	0800d6b5 	.word	0x0800d6b5
 800d720:	0800d801 	.word	0x0800d801
 800d724:	682b      	ldr	r3, [r5, #0]
 800d726:	1d1a      	adds	r2, r3, #4
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	602a      	str	r2, [r5, #0]
 800d72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d734:	2301      	movs	r3, #1
 800d736:	e0a0      	b.n	800d87a <_printf_i+0x1ee>
 800d738:	6820      	ldr	r0, [r4, #0]
 800d73a:	682b      	ldr	r3, [r5, #0]
 800d73c:	0607      	lsls	r7, r0, #24
 800d73e:	f103 0104 	add.w	r1, r3, #4
 800d742:	6029      	str	r1, [r5, #0]
 800d744:	d501      	bpl.n	800d74a <_printf_i+0xbe>
 800d746:	681e      	ldr	r6, [r3, #0]
 800d748:	e003      	b.n	800d752 <_printf_i+0xc6>
 800d74a:	0646      	lsls	r6, r0, #25
 800d74c:	d5fb      	bpl.n	800d746 <_printf_i+0xba>
 800d74e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d752:	2e00      	cmp	r6, #0
 800d754:	da03      	bge.n	800d75e <_printf_i+0xd2>
 800d756:	232d      	movs	r3, #45	; 0x2d
 800d758:	4276      	negs	r6, r6
 800d75a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d75e:	230a      	movs	r3, #10
 800d760:	4859      	ldr	r0, [pc, #356]	; (800d8c8 <_printf_i+0x23c>)
 800d762:	e012      	b.n	800d78a <_printf_i+0xfe>
 800d764:	682b      	ldr	r3, [r5, #0]
 800d766:	6820      	ldr	r0, [r4, #0]
 800d768:	1d19      	adds	r1, r3, #4
 800d76a:	6029      	str	r1, [r5, #0]
 800d76c:	0605      	lsls	r5, r0, #24
 800d76e:	d501      	bpl.n	800d774 <_printf_i+0xe8>
 800d770:	681e      	ldr	r6, [r3, #0]
 800d772:	e002      	b.n	800d77a <_printf_i+0xee>
 800d774:	0641      	lsls	r1, r0, #25
 800d776:	d5fb      	bpl.n	800d770 <_printf_i+0xe4>
 800d778:	881e      	ldrh	r6, [r3, #0]
 800d77a:	2f6f      	cmp	r7, #111	; 0x6f
 800d77c:	bf0c      	ite	eq
 800d77e:	2308      	moveq	r3, #8
 800d780:	230a      	movne	r3, #10
 800d782:	4851      	ldr	r0, [pc, #324]	; (800d8c8 <_printf_i+0x23c>)
 800d784:	2100      	movs	r1, #0
 800d786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d78a:	6865      	ldr	r5, [r4, #4]
 800d78c:	2d00      	cmp	r5, #0
 800d78e:	bfa8      	it	ge
 800d790:	6821      	ldrge	r1, [r4, #0]
 800d792:	60a5      	str	r5, [r4, #8]
 800d794:	bfa4      	itt	ge
 800d796:	f021 0104 	bicge.w	r1, r1, #4
 800d79a:	6021      	strge	r1, [r4, #0]
 800d79c:	b90e      	cbnz	r6, 800d7a2 <_printf_i+0x116>
 800d79e:	2d00      	cmp	r5, #0
 800d7a0:	d04b      	beq.n	800d83a <_printf_i+0x1ae>
 800d7a2:	4615      	mov	r5, r2
 800d7a4:	fbb6 f1f3 	udiv	r1, r6, r3
 800d7a8:	fb03 6711 	mls	r7, r3, r1, r6
 800d7ac:	5dc7      	ldrb	r7, [r0, r7]
 800d7ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7b2:	4637      	mov	r7, r6
 800d7b4:	42bb      	cmp	r3, r7
 800d7b6:	460e      	mov	r6, r1
 800d7b8:	d9f4      	bls.n	800d7a4 <_printf_i+0x118>
 800d7ba:	2b08      	cmp	r3, #8
 800d7bc:	d10b      	bne.n	800d7d6 <_printf_i+0x14a>
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	07de      	lsls	r6, r3, #31
 800d7c2:	d508      	bpl.n	800d7d6 <_printf_i+0x14a>
 800d7c4:	6923      	ldr	r3, [r4, #16]
 800d7c6:	6861      	ldr	r1, [r4, #4]
 800d7c8:	4299      	cmp	r1, r3
 800d7ca:	bfde      	ittt	le
 800d7cc:	2330      	movle	r3, #48	; 0x30
 800d7ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7d6:	1b52      	subs	r2, r2, r5
 800d7d8:	6122      	str	r2, [r4, #16]
 800d7da:	464b      	mov	r3, r9
 800d7dc:	4621      	mov	r1, r4
 800d7de:	4640      	mov	r0, r8
 800d7e0:	f8cd a000 	str.w	sl, [sp]
 800d7e4:	aa03      	add	r2, sp, #12
 800d7e6:	f7ff fedf 	bl	800d5a8 <_printf_common>
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	d14a      	bne.n	800d884 <_printf_i+0x1f8>
 800d7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f2:	b004      	add	sp, #16
 800d7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	f043 0320 	orr.w	r3, r3, #32
 800d7fe:	6023      	str	r3, [r4, #0]
 800d800:	2778      	movs	r7, #120	; 0x78
 800d802:	4832      	ldr	r0, [pc, #200]	; (800d8cc <_printf_i+0x240>)
 800d804:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d808:	6823      	ldr	r3, [r4, #0]
 800d80a:	6829      	ldr	r1, [r5, #0]
 800d80c:	061f      	lsls	r7, r3, #24
 800d80e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d812:	d402      	bmi.n	800d81a <_printf_i+0x18e>
 800d814:	065f      	lsls	r7, r3, #25
 800d816:	bf48      	it	mi
 800d818:	b2b6      	uxthmi	r6, r6
 800d81a:	07df      	lsls	r7, r3, #31
 800d81c:	bf48      	it	mi
 800d81e:	f043 0320 	orrmi.w	r3, r3, #32
 800d822:	6029      	str	r1, [r5, #0]
 800d824:	bf48      	it	mi
 800d826:	6023      	strmi	r3, [r4, #0]
 800d828:	b91e      	cbnz	r6, 800d832 <_printf_i+0x1a6>
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	f023 0320 	bic.w	r3, r3, #32
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	2310      	movs	r3, #16
 800d834:	e7a6      	b.n	800d784 <_printf_i+0xf8>
 800d836:	4824      	ldr	r0, [pc, #144]	; (800d8c8 <_printf_i+0x23c>)
 800d838:	e7e4      	b.n	800d804 <_printf_i+0x178>
 800d83a:	4615      	mov	r5, r2
 800d83c:	e7bd      	b.n	800d7ba <_printf_i+0x12e>
 800d83e:	682b      	ldr	r3, [r5, #0]
 800d840:	6826      	ldr	r6, [r4, #0]
 800d842:	1d18      	adds	r0, r3, #4
 800d844:	6961      	ldr	r1, [r4, #20]
 800d846:	6028      	str	r0, [r5, #0]
 800d848:	0635      	lsls	r5, r6, #24
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	d501      	bpl.n	800d852 <_printf_i+0x1c6>
 800d84e:	6019      	str	r1, [r3, #0]
 800d850:	e002      	b.n	800d858 <_printf_i+0x1cc>
 800d852:	0670      	lsls	r0, r6, #25
 800d854:	d5fb      	bpl.n	800d84e <_printf_i+0x1c2>
 800d856:	8019      	strh	r1, [r3, #0]
 800d858:	2300      	movs	r3, #0
 800d85a:	4615      	mov	r5, r2
 800d85c:	6123      	str	r3, [r4, #16]
 800d85e:	e7bc      	b.n	800d7da <_printf_i+0x14e>
 800d860:	682b      	ldr	r3, [r5, #0]
 800d862:	2100      	movs	r1, #0
 800d864:	1d1a      	adds	r2, r3, #4
 800d866:	602a      	str	r2, [r5, #0]
 800d868:	681d      	ldr	r5, [r3, #0]
 800d86a:	6862      	ldr	r2, [r4, #4]
 800d86c:	4628      	mov	r0, r5
 800d86e:	f000 f849 	bl	800d904 <memchr>
 800d872:	b108      	cbz	r0, 800d878 <_printf_i+0x1ec>
 800d874:	1b40      	subs	r0, r0, r5
 800d876:	6060      	str	r0, [r4, #4]
 800d878:	6863      	ldr	r3, [r4, #4]
 800d87a:	6123      	str	r3, [r4, #16]
 800d87c:	2300      	movs	r3, #0
 800d87e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d882:	e7aa      	b.n	800d7da <_printf_i+0x14e>
 800d884:	462a      	mov	r2, r5
 800d886:	4649      	mov	r1, r9
 800d888:	4640      	mov	r0, r8
 800d88a:	6923      	ldr	r3, [r4, #16]
 800d88c:	47d0      	blx	sl
 800d88e:	3001      	adds	r0, #1
 800d890:	d0ad      	beq.n	800d7ee <_printf_i+0x162>
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	079b      	lsls	r3, r3, #30
 800d896:	d413      	bmi.n	800d8c0 <_printf_i+0x234>
 800d898:	68e0      	ldr	r0, [r4, #12]
 800d89a:	9b03      	ldr	r3, [sp, #12]
 800d89c:	4298      	cmp	r0, r3
 800d89e:	bfb8      	it	lt
 800d8a0:	4618      	movlt	r0, r3
 800d8a2:	e7a6      	b.n	800d7f2 <_printf_i+0x166>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	4632      	mov	r2, r6
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	47d0      	blx	sl
 800d8ae:	3001      	adds	r0, #1
 800d8b0:	d09d      	beq.n	800d7ee <_printf_i+0x162>
 800d8b2:	3501      	adds	r5, #1
 800d8b4:	68e3      	ldr	r3, [r4, #12]
 800d8b6:	9903      	ldr	r1, [sp, #12]
 800d8b8:	1a5b      	subs	r3, r3, r1
 800d8ba:	42ab      	cmp	r3, r5
 800d8bc:	dcf2      	bgt.n	800d8a4 <_printf_i+0x218>
 800d8be:	e7eb      	b.n	800d898 <_printf_i+0x20c>
 800d8c0:	2500      	movs	r5, #0
 800d8c2:	f104 0619 	add.w	r6, r4, #25
 800d8c6:	e7f5      	b.n	800d8b4 <_printf_i+0x228>
 800d8c8:	0800e8b8 	.word	0x0800e8b8
 800d8cc:	0800e8c9 	.word	0x0800e8c9

0800d8d0 <memmove>:
 800d8d0:	4288      	cmp	r0, r1
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	eb01 0402 	add.w	r4, r1, r2
 800d8d8:	d902      	bls.n	800d8e0 <memmove+0x10>
 800d8da:	4284      	cmp	r4, r0
 800d8dc:	4623      	mov	r3, r4
 800d8de:	d807      	bhi.n	800d8f0 <memmove+0x20>
 800d8e0:	1e43      	subs	r3, r0, #1
 800d8e2:	42a1      	cmp	r1, r4
 800d8e4:	d008      	beq.n	800d8f8 <memmove+0x28>
 800d8e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8ee:	e7f8      	b.n	800d8e2 <memmove+0x12>
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	4402      	add	r2, r0
 800d8f4:	428a      	cmp	r2, r1
 800d8f6:	d100      	bne.n	800d8fa <memmove+0x2a>
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d902:	e7f7      	b.n	800d8f4 <memmove+0x24>

0800d904 <memchr>:
 800d904:	4603      	mov	r3, r0
 800d906:	b510      	push	{r4, lr}
 800d908:	b2c9      	uxtb	r1, r1
 800d90a:	4402      	add	r2, r0
 800d90c:	4293      	cmp	r3, r2
 800d90e:	4618      	mov	r0, r3
 800d910:	d101      	bne.n	800d916 <memchr+0x12>
 800d912:	2000      	movs	r0, #0
 800d914:	e003      	b.n	800d91e <memchr+0x1a>
 800d916:	7804      	ldrb	r4, [r0, #0]
 800d918:	3301      	adds	r3, #1
 800d91a:	428c      	cmp	r4, r1
 800d91c:	d1f6      	bne.n	800d90c <memchr+0x8>
 800d91e:	bd10      	pop	{r4, pc}

0800d920 <_realloc_r>:
 800d920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d924:	4680      	mov	r8, r0
 800d926:	4614      	mov	r4, r2
 800d928:	460e      	mov	r6, r1
 800d92a:	b921      	cbnz	r1, 800d936 <_realloc_r+0x16>
 800d92c:	4611      	mov	r1, r2
 800d92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d932:	f7ff bb3f 	b.w	800cfb4 <_malloc_r>
 800d936:	b92a      	cbnz	r2, 800d944 <_realloc_r+0x24>
 800d938:	f7ff fc96 	bl	800d268 <_free_r>
 800d93c:	4625      	mov	r5, r4
 800d93e:	4628      	mov	r0, r5
 800d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d944:	f000 f81b 	bl	800d97e <_malloc_usable_size_r>
 800d948:	4284      	cmp	r4, r0
 800d94a:	4607      	mov	r7, r0
 800d94c:	d802      	bhi.n	800d954 <_realloc_r+0x34>
 800d94e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d952:	d812      	bhi.n	800d97a <_realloc_r+0x5a>
 800d954:	4621      	mov	r1, r4
 800d956:	4640      	mov	r0, r8
 800d958:	f7ff fb2c 	bl	800cfb4 <_malloc_r>
 800d95c:	4605      	mov	r5, r0
 800d95e:	2800      	cmp	r0, #0
 800d960:	d0ed      	beq.n	800d93e <_realloc_r+0x1e>
 800d962:	42bc      	cmp	r4, r7
 800d964:	4622      	mov	r2, r4
 800d966:	4631      	mov	r1, r6
 800d968:	bf28      	it	cs
 800d96a:	463a      	movcs	r2, r7
 800d96c:	f7ff fc6e 	bl	800d24c <memcpy>
 800d970:	4631      	mov	r1, r6
 800d972:	4640      	mov	r0, r8
 800d974:	f7ff fc78 	bl	800d268 <_free_r>
 800d978:	e7e1      	b.n	800d93e <_realloc_r+0x1e>
 800d97a:	4635      	mov	r5, r6
 800d97c:	e7df      	b.n	800d93e <_realloc_r+0x1e>

0800d97e <_malloc_usable_size_r>:
 800d97e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d982:	1f18      	subs	r0, r3, #4
 800d984:	2b00      	cmp	r3, #0
 800d986:	bfbc      	itt	lt
 800d988:	580b      	ldrlt	r3, [r1, r0]
 800d98a:	18c0      	addlt	r0, r0, r3
 800d98c:	4770      	bx	lr
	...

0800d990 <_init>:
 800d990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d992:	bf00      	nop
 800d994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d996:	bc08      	pop	{r3}
 800d998:	469e      	mov	lr, r3
 800d99a:	4770      	bx	lr

0800d99c <_fini>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	bf00      	nop
 800d9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a2:	bc08      	pop	{r3}
 800d9a4:	469e      	mov	lr, r3
 800d9a6:	4770      	bx	lr
