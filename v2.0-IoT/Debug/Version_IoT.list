
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d278  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800d45c  0800d45c  0001d45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e360  0800e360  000209bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e360  0800e360  000209bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e360  0800e360  000209bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e360  0800e360  0001e360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e364  0800e364  0001e364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009bc  20000000  0800e368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200009bc  0800ed24  000209bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f84  0800ed24  00020f84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013292  00000000  00000000  00020a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002693  00000000  00000000  00033cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00036350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de6  00000000  00000000  000374e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  000382c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186a8  00000000  00000000  000531c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc51  00000000  00000000  0006b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000510c  00000000  00000000  0010b4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001105d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009bc 	.word	0x200009bc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d444 	.word	0x0800d444

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009c0 	.word	0x200009c0
 8000220:	0800d444 	.word	0x0800d444

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c fce0 	bl	800cc08 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b feae 	bl	800bfb8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 fdde 	bl	8008e20 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c fcce 	bl	800cc08 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b fe9c 	bl	800bfb8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 fdcc 	bl	8008e20 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c fcbc 	bl	800cc08 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b fe8a 	bl	800bfb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 fdba 	bl	8008e20 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c fcaa 	bl	800cc08 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b fe78 	bl	800bfb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 fda8 	bl	8008e20 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c fcb5 	bl	800cc58 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c fca2 	bl	800cc58 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c fc66 	bl	800cc08 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b fe34 	bl	800bfb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 fd64 	bl	8008e20 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d45c 	.word	0x0800d45c
 8000364:	200009d8 	.word	0x200009d8
 8000368:	0800d46c 	.word	0x0800d46c
 800036c:	0800d478 	.word	0x0800d478
 8000370:	0800d480 	.word	0x0800d480
 8000374:	0800d490 	.word	0x0800d490
 8000378:	0800d49c 	.word	0x0800d49c
 800037c:	0800d4a0 	.word	0x0800d4a0
 8000380:	0800d4a4 	.word	0x0800d4a4

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c fc2b 	bl	800cc08 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00b fdf6 	bl	800bfb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 fd26 	bl	8008e20 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c fc09 	bl	800cc08 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c fbf9 	bl	800cc08 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b fdc1 	bl	800bfb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 fcf1 	bl	8008e20 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b fdad 	bl	800bfb8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 fcdd 	bl	8008e20 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800d4a8 	.word	0x0800d4a8
 8000474:	0800d4b8 	.word	0x0800d4b8
 8000478:	200009d8 	.word	0x200009d8
 800047c:	0800d534 	.word	0x0800d534
 8000480:	0800d4d8 	.word	0x0800d4d8
 8000484:	0800d548 	.word	0x0800d548

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f00a f8a1 	bl	800a612 <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f00a f88d 	bl	800a5f8 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 fbf0 	bl	8009d38 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000d50 	.word	0x20000d50
 8000564:	20000ad2 	.word	0x20000ad2

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f00a f831 	bl	800a612 <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f00a f81d 	bl	800a5f8 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 fb80 	bl	8009d38 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000d50 	.word	0x20000d50
 8000644:	20000ad2 	.word	0x20000ad2

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f009 ffab 	bl	800a612 <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f009 ff97 	bl	800a5f8 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f009 fafa 	bl	8009d38 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000d50 	.word	0x20000d50
 8000750:	20000ad2 	.word	0x20000ad2

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f008 fb00 	bl	8008e20 <HAL_Delay>

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000ad2 	.word	0x20000ad2

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fca5 	bl	8000224 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	3301      	adds	r3, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f00c f89c 	bl	800ca1c <malloc>
 80008e4:	4603      	mov	r3, r0
 80008e6:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <copyText+0x2a>
        strcpy(result, text);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f00c f9fd 	bl	800ccf0 <strcpy>
    }
    return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800090a:	20c8      	movs	r0, #200	; 0xc8
 800090c:	f008 fa88 	bl	8008e20 <HAL_Delay>
	lcd_clear();
 8000910:	f7ff ff7e 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d143      	bne.n	80009a2 <printTemplate+0xa2>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d140      	bne.n	80009a2 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000920:	4a9d      	ldr	r2, [pc, #628]	; (8000b98 <printTemplate+0x298>)
 8000922:	2101      	movs	r1, #1
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff ff47 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 800092a:	4a9c      	ldr	r2, [pc, #624]	; (8000b9c <printTemplate+0x29c>)
 800092c:	2103      	movs	r1, #3
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff ff42 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 8000934:	4a9a      	ldr	r2, [pc, #616]	; (8000ba0 <printTemplate+0x2a0>)
 8000936:	2104      	movs	r1, #4
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff ff3d 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 800093e:	4a99      	ldr	r2, [pc, #612]	; (8000ba4 <printTemplate+0x2a4>)
 8000940:	2105      	movs	r1, #5
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff ff38 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000948:	4a97      	ldr	r2, [pc, #604]	; (8000ba8 <printTemplate+0x2a8>)
 800094a:	2106      	movs	r1, #6
 800094c:	2002      	movs	r0, #2
 800094e:	f7ff ff33 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 8000952:	4a96      	ldr	r2, [pc, #600]	; (8000bac <printTemplate+0x2ac>)
 8000954:	2107      	movs	r1, #7
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff ff2e 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 800095c:	4a94      	ldr	r2, [pc, #592]	; (8000bb0 <printTemplate+0x2b0>)
 800095e:	210a      	movs	r1, #10
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff29 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 8000966:	4a93      	ldr	r2, [pc, #588]	; (8000bb4 <printTemplate+0x2b4>)
 8000968:	210b      	movs	r1, #11
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff ff24 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 8000970:	4a91      	ldr	r2, [pc, #580]	; (8000bb8 <printTemplate+0x2b8>)
 8000972:	210c      	movs	r1, #12
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff ff1f 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 800097a:	4a90      	ldr	r2, [pc, #576]	; (8000bbc <printTemplate+0x2bc>)
 800097c:	210d      	movs	r1, #13
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff1a 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 8000984:	4a8e      	ldr	r2, [pc, #568]	; (8000bc0 <printTemplate+0x2c0>)
 8000986:	210e      	movs	r1, #14
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff ff15 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 800098e:	4a8d      	ldr	r2, [pc, #564]	; (8000bc4 <printTemplate+0x2c4>)
 8000990:	2105      	movs	r1, #5
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff10 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000998:	2103      	movs	r1, #3
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff feed 	bl	800077a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80009a0:	e0f5      	b.n	8000b8e <printTemplate+0x28e>
	} else if(type == 2) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d178      	bne.n	8000a9a <printTemplate+0x19a>
		if(page == 1) {
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d114      	bne.n	80009d8 <printTemplate+0xd8>
			lcd_clear();
 80009ae:	f7ff ff2f 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f008 fa34 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009b8:	4a83      	ldr	r2, [pc, #524]	; (8000bc8 <printTemplate+0x2c8>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fefb 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80009c2:	4a82      	ldr	r2, [pc, #520]	; (8000bcc <printTemplate+0x2cc>)
 80009c4:	2107      	movs	r1, #7
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fef6 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80009cc:	4a80      	ldr	r2, [pc, #512]	; (8000bd0 <printTemplate+0x2d0>)
 80009ce:	2101      	movs	r1, #1
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fef1 	bl	80007b8 <lcd_print>
}
 80009d6:	e0da      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 2) {
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d114      	bne.n	8000a08 <printTemplate+0x108>
			lcd_clear();
 80009de:	f7ff ff17 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f008 fa1c 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009e8:	4a77      	ldr	r2, [pc, #476]	; (8000bc8 <printTemplate+0x2c8>)
 80009ea:	2101      	movs	r1, #1
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fee3 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80009f2:	4a76      	ldr	r2, [pc, #472]	; (8000bcc <printTemplate+0x2cc>)
 80009f4:	2107      	movs	r1, #7
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fede 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009fc:	4a75      	ldr	r2, [pc, #468]	; (8000bd4 <printTemplate+0x2d4>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	2002      	movs	r0, #2
 8000a02:	f7ff fed9 	bl	80007b8 <lcd_print>
}
 8000a06:	e0c2      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 3) {
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d114      	bne.n	8000a38 <printTemplate+0x138>
			lcd_clear();
 8000a0e:	f7ff feff 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a12:	2064      	movs	r0, #100	; 0x64
 8000a14:	f008 fa04 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a18:	4a6b      	ldr	r2, [pc, #428]	; (8000bc8 <printTemplate+0x2c8>)
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fecb 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a22:	4a6a      	ldr	r2, [pc, #424]	; (8000bcc <printTemplate+0x2cc>)
 8000a24:	2107      	movs	r1, #7
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff fec6 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000a2c:	4a6a      	ldr	r2, [pc, #424]	; (8000bd8 <printTemplate+0x2d8>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff fec1 	bl	80007b8 <lcd_print>
}
 8000a36:	e0aa      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 4) {
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d114      	bne.n	8000a68 <printTemplate+0x168>
			lcd_clear();
 8000a3e:	f7ff fee7 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a42:	2064      	movs	r0, #100	; 0x64
 8000a44:	f008 f9ec 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a48:	4a5f      	ldr	r2, [pc, #380]	; (8000bc8 <printTemplate+0x2c8>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff feb3 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a52:	4a5e      	ldr	r2, [pc, #376]	; (8000bcc <printTemplate+0x2cc>)
 8000a54:	2107      	movs	r1, #7
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff feae 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a5c:	4a5f      	ldr	r2, [pc, #380]	; (8000bdc <printTemplate+0x2dc>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff fea9 	bl	80007b8 <lcd_print>
}
 8000a66:	e092      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 5) {
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	f040 808f 	bne.w	8000b8e <printTemplate+0x28e>
			lcd_clear();
 8000a70:	f7ff fece 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a74:	2064      	movs	r0, #100	; 0x64
 8000a76:	f008 f9d3 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a7a:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <printTemplate+0x2c8>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff fe9a 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <printTemplate+0x2cc>)
 8000a86:	2107      	movs	r1, #7
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fe95 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a8e:	4a54      	ldr	r2, [pc, #336]	; (8000be0 <printTemplate+0x2e0>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff fe90 	bl	80007b8 <lcd_print>
}
 8000a98:	e079      	b.n	8000b8e <printTemplate+0x28e>
	} else if(type == 3) {
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d176      	bne.n	8000b8e <printTemplate+0x28e>
		if(page == 1) {
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d114      	bne.n	8000ad0 <printTemplate+0x1d0>
			lcd_clear();
 8000aa6:	f7ff feb3 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	; 0x64
 8000aac:	f008 f9b8 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ab0:	4a4c      	ldr	r2, [pc, #304]	; (8000be4 <printTemplate+0x2e4>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fe7f 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000aba:	4a4b      	ldr	r2, [pc, #300]	; (8000be8 <printTemplate+0x2e8>)
 8000abc:	2107      	movs	r1, #7
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff fe7a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ac4:	4a42      	ldr	r2, [pc, #264]	; (8000bd0 <printTemplate+0x2d0>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f7ff fe75 	bl	80007b8 <lcd_print>
}
 8000ace:	e05e      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 2) {
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d114      	bne.n	8000b00 <printTemplate+0x200>
			lcd_clear();
 8000ad6:	f7ff fe9b 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f008 f9a0 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ae0:	4a40      	ldr	r2, [pc, #256]	; (8000be4 <printTemplate+0x2e4>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fe67 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000aea:	4a3f      	ldr	r2, [pc, #252]	; (8000be8 <printTemplate+0x2e8>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fe62 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000af4:	4a37      	ldr	r2, [pc, #220]	; (8000bd4 <printTemplate+0x2d4>)
 8000af6:	2101      	movs	r1, #1
 8000af8:	2002      	movs	r0, #2
 8000afa:	f7ff fe5d 	bl	80007b8 <lcd_print>
}
 8000afe:	e046      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 3) {
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d114      	bne.n	8000b30 <printTemplate+0x230>
			lcd_clear();
 8000b06:	f7ff fe83 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b0a:	2064      	movs	r0, #100	; 0x64
 8000b0c:	f008 f988 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b10:	4a34      	ldr	r2, [pc, #208]	; (8000be4 <printTemplate+0x2e4>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff fe4f 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b1a:	4a33      	ldr	r2, [pc, #204]	; (8000be8 <printTemplate+0x2e8>)
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff fe4a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000b24:	4a2c      	ldr	r2, [pc, #176]	; (8000bd8 <printTemplate+0x2d8>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff fe45 	bl	80007b8 <lcd_print>
}
 8000b2e:	e02e      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 4) {
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d114      	bne.n	8000b60 <printTemplate+0x260>
			lcd_clear();
 8000b36:	f7ff fe6b 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b3a:	2064      	movs	r0, #100	; 0x64
 8000b3c:	f008 f970 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <printTemplate+0x2e4>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fe37 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b4a:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <printTemplate+0x2e8>)
 8000b4c:	2107      	movs	r1, #7
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fe32 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <printTemplate+0x2dc>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fe2d 	bl	80007b8 <lcd_print>
}
 8000b5e:	e016      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 5) {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2b05      	cmp	r3, #5
 8000b64:	d113      	bne.n	8000b8e <printTemplate+0x28e>
			lcd_clear();
 8000b66:	f7ff fe53 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f008 f958 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b70:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <printTemplate+0x2e4>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fe1f 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b7a:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <printTemplate+0x2e8>)
 8000b7c:	2107      	movs	r1, #7
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fe1a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b84:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <printTemplate+0x2e0>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fe15 	bl	80007b8 <lcd_print>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	0800d558 	.word	0x0800d558
 8000b9c:	0800d560 	.word	0x0800d560
 8000ba0:	0800d564 	.word	0x0800d564
 8000ba4:	0800d568 	.word	0x0800d568
 8000ba8:	0800d56c 	.word	0x0800d56c
 8000bac:	0800d570 	.word	0x0800d570
 8000bb0:	0800d574 	.word	0x0800d574
 8000bb4:	0800d578 	.word	0x0800d578
 8000bb8:	0800d57c 	.word	0x0800d57c
 8000bbc:	0800d580 	.word	0x0800d580
 8000bc0:	0800d584 	.word	0x0800d584
 8000bc4:	20000b3c 	.word	0x20000b3c
 8000bc8:	0800d588 	.word	0x0800d588
 8000bcc:	20000b48 	.word	0x20000b48
 8000bd0:	0800d590 	.word	0x0800d590
 8000bd4:	0800d5a4 	.word	0x0800d5a4
 8000bd8:	0800d5b8 	.word	0x0800d5b8
 8000bdc:	0800d5cc 	.word	0x0800d5cc
 8000be0:	0800d5e0 	.word	0x0800d5e0
 8000be4:	0800d5f4 	.word	0x0800d5f4
 8000be8:	20000b6c 	.word	0x20000b6c

08000bec <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b098      	sub	sp, #96	; 0x60
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	char characters[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+=<>? ";
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <getCharFromCursorPosition+0x2c>)
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	2251      	movs	r2, #81	; 0x51
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00c f87e 	bl	800cd00 <memcpy>
    return characters[cursorPosition];
 8000c04:	f107 020c 	add.w	r2, r7, #12
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3760      	adds	r7, #96	; 0x60
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	0800d5fc 	.word	0x0800d5fc

08000c1c <takeMachineID>:

void takeMachineID() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
	lcd_cursor(1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fe26 	bl	8000874 <lcd_cursor>

    int cursorPosition = 3;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8000c30:	2305      	movs	r3, #5
 8000c32:	607b      	str	r3, [r7, #4]

    printTemplate(1, 0);
 8000c34:	2100      	movs	r1, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fe62 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	4879      	ldr	r0, [pc, #484]	; (8000e24 <takeMachineID+0x208>)
 8000c40:	f008 febe 	bl	80099c0 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d103      	bne.n	8000c52 <takeMachineID+0x36>
        	lcd_cursor(0);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fe12 	bl	8000874 <lcd_cursor>

            break;
 8000c50:	e0e4      	b.n	8000e1c <takeMachineID+0x200>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000c52:	2101      	movs	r1, #1
 8000c54:	4873      	ldr	r0, [pc, #460]	; (8000e24 <takeMachineID+0x208>)
 8000c56:	f008 feb3 	bl	80099c0 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d112      	bne.n	8000c86 <takeMachineID+0x6a>
        	if(cursorPosition == 7) {
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	d102      	bne.n	8000c6c <takeMachineID+0x50>
        		cursorPosition = 10;
 8000c66:	230a      	movs	r3, #10
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e008      	b.n	8000c7e <takeMachineID+0x62>
        	} else if (cursorPosition == 14) {
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b0e      	cmp	r3, #14
 8000c70:	d102      	bne.n	8000c78 <takeMachineID+0x5c>
                cursorPosition = 3;
 8000c72:	2303      	movs	r3, #3
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e002      	b.n	8000c7e <takeMachineID+0x62>
            } else {
            	cursorPosition++;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(350);
 8000c7e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c82:	f008 f8cd 	bl	8008e20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000c86:	2108      	movs	r1, #8
 8000c88:	4867      	ldr	r0, [pc, #412]	; (8000e28 <takeMachineID+0x20c>)
 8000c8a:	f008 fe99 	bl	80099c0 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d112      	bne.n	8000cba <takeMachineID+0x9e>
            if (cursorPosition == 3) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d102      	bne.n	8000ca0 <takeMachineID+0x84>
                cursorPosition = 14;
 8000c9a:	230e      	movs	r3, #14
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	e008      	b.n	8000cb2 <takeMachineID+0x96>
            } else if(cursorPosition == 10) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b0a      	cmp	r3, #10
 8000ca4:	d102      	bne.n	8000cac <takeMachineID+0x90>
            	cursorPosition = 7;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	e002      	b.n	8000cb2 <takeMachineID+0x96>
            } else {
            	cursorPosition--;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 8000cb2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000cb6:	f008 f8b3 	bl	8008e20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4859      	ldr	r0, [pc, #356]	; (8000e24 <takeMachineID+0x208>)
 8000cbe:	f008 fe7f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d16c      	bne.n	8000da2 <takeMachineID+0x186>
        	if(cursorPosition == 3) {
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d105      	bne.n	8000cda <takeMachineID+0xbe>
        		machineID[machineIDLoc] = '0';
 8000cce:	4a57      	ldr	r2, [pc, #348]	; (8000e2c <takeMachineID+0x210>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	2230      	movs	r2, #48	; 0x30
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e04f      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 4) {
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d105      	bne.n	8000cec <takeMachineID+0xd0>
        		machineID[machineIDLoc] = '1';
 8000ce0:	4a52      	ldr	r2, [pc, #328]	; (8000e2c <takeMachineID+0x210>)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2231      	movs	r2, #49	; 0x31
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e046      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 5) {
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d105      	bne.n	8000cfe <takeMachineID+0xe2>
        		machineID[machineIDLoc] = '2';
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <takeMachineID+0x210>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	2232      	movs	r2, #50	; 0x32
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e03d      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 6) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b06      	cmp	r3, #6
 8000d02:	d105      	bne.n	8000d10 <takeMachineID+0xf4>
        		machineID[machineIDLoc] = '3';
 8000d04:	4a49      	ldr	r2, [pc, #292]	; (8000e2c <takeMachineID+0x210>)
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	4413      	add	r3, r2
 8000d0a:	2233      	movs	r2, #51	; 0x33
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e034      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 7) {
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d105      	bne.n	8000d22 <takeMachineID+0x106>
        		machineID[machineIDLoc] = '4';
 8000d16:	4a45      	ldr	r2, [pc, #276]	; (8000e2c <takeMachineID+0x210>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	2234      	movs	r2, #52	; 0x34
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e02b      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 10) {
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b0a      	cmp	r3, #10
 8000d26:	d105      	bne.n	8000d34 <takeMachineID+0x118>
        		machineID[machineIDLoc] = '5';
 8000d28:	4a40      	ldr	r2, [pc, #256]	; (8000e2c <takeMachineID+0x210>)
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	2235      	movs	r2, #53	; 0x35
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	e022      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 11) {
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b0b      	cmp	r3, #11
 8000d38:	d105      	bne.n	8000d46 <takeMachineID+0x12a>
        		machineID[machineIDLoc] = '6';
 8000d3a:	4a3c      	ldr	r2, [pc, #240]	; (8000e2c <takeMachineID+0x210>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4413      	add	r3, r2
 8000d40:	2236      	movs	r2, #54	; 0x36
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e019      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 12) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2b0c      	cmp	r3, #12
 8000d4a:	d105      	bne.n	8000d58 <takeMachineID+0x13c>
        		machineID[machineIDLoc] = '7';
 8000d4c:	4a37      	ldr	r2, [pc, #220]	; (8000e2c <takeMachineID+0x210>)
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	4413      	add	r3, r2
 8000d52:	2237      	movs	r2, #55	; 0x37
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e010      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 13) {
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b0d      	cmp	r3, #13
 8000d5c:	d105      	bne.n	8000d6a <takeMachineID+0x14e>
        		machineID[machineIDLoc] = '8';
 8000d5e:	4a33      	ldr	r2, [pc, #204]	; (8000e2c <takeMachineID+0x210>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4413      	add	r3, r2
 8000d64:	2238      	movs	r2, #56	; 0x38
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e007      	b.n	8000d7a <takeMachineID+0x15e>
        	} else if(cursorPosition == 14) {
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2b0e      	cmp	r3, #14
 8000d6e:	d104      	bne.n	8000d7a <takeMachineID+0x15e>
        		machineID[machineIDLoc] = '9';
 8000d70:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <takeMachineID+0x210>)
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	4413      	add	r3, r2
 8000d76:	2239      	movs	r2, #57	; 0x39
 8000d78:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	b2d9      	uxtb	r1, r3
 8000d7e:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <takeMachineID+0x210>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fd2a 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(350);
 8000d9a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d9e:	f008 f83f 	bl	8008e20 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000da2:	2104      	movs	r1, #4
 8000da4:	481f      	ldr	r0, [pc, #124]	; (8000e24 <takeMachineID+0x208>)
 8000da6:	f008 fe0b 	bl	80099c0 <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d12e      	bne.n	8000e0e <takeMachineID+0x1f2>
            if(strlen(machineID) >= 1) {
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <takeMachineID+0x210>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d027      	beq.n	8000e08 <takeMachineID+0x1ec>

                machineID[machineIDLoc] = '\0';
 8000db8:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <takeMachineID+0x210>)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff fd29 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8000dd2:	2032      	movs	r0, #50	; 0x32
 8000dd4:	f008 f824 	bl	8008e20 <HAL_Delay>

                if(writeLoc > 5) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	dd03      	ble.n	8000de6 <takeMachineID+0x1ca>
                	writeLoc--;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	e004      	b.n	8000df0 <takeMachineID+0x1d4>
                } else if(writeLoc < 5) {
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	dc01      	bgt.n	8000df0 <takeMachineID+0x1d4>
                	writeLoc = 5;
 8000dec:	2305      	movs	r3, #5
 8000dee:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dd03      	ble.n	8000dfe <takeMachineID+0x1e2>
                	machineIDLoc--;
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	e004      	b.n	8000e08 <takeMachineID+0x1ec>
                } else if(machineIDLoc < 0) {
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	da01      	bge.n	8000e08 <takeMachineID+0x1ec>
                	machineIDLoc = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(250);
 8000e08:	20fa      	movs	r0, #250	; 0xfa
 8000e0a:	f008 f809 	bl	8008e20 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4619      	mov	r1, r3
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff fcb0 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000e1a:	e70f      	b.n	8000c3c <takeMachineID+0x20>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	20000b3c 	.word	0x20000b3c

08000e30 <takeWifiSSID>:

void takeWifiSSID() {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
    lcd_cursor(1);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fd1c 	bl	8000874 <lcd_cursor>

    int realCharPos = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8000e40:	4ba1      	ldr	r3, [pc, #644]	; (80010c8 <takeWifiSSID+0x298>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
    page = 1;
 8000e46:	4ba1      	ldr	r3, [pc, #644]	; (80010cc <takeWifiSSID+0x29c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8000e50:	2307      	movs	r3, #7
 8000e52:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8000e54:	2101      	movs	r1, #1
 8000e56:	2002      	movs	r0, #2
 8000e58:	f7ff fd52 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	489c      	ldr	r0, [pc, #624]	; (80010d0 <takeWifiSSID+0x2a0>)
 8000e60:	f008 fdae 	bl	80099c0 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d105      	bne.n	8000e76 <takeWifiSSID+0x46>
            lcd_cursor(0);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fd02 	bl	8000874 <lcd_cursor>
            lcd_clear();
 8000e70:	f7ff fcce 	bl	8000810 <lcd_clear>
            break;
 8000e74:	e142      	b.n	80010fc <takeWifiSSID+0x2cc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e76:	2101      	movs	r1, #1
 8000e78:	4895      	ldr	r0, [pc, #596]	; (80010d0 <takeWifiSSID+0x2a0>)
 8000e7a:	f008 fda1 	bl	80099c0 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d166      	bne.n	8000f52 <takeWifiSSID+0x122>
        	realCharPos++;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b50      	cmp	r3, #80	; 0x50
 8000e8e:	dd01      	ble.n	8000e94 <takeWifiSSID+0x64>
        		realCharPos = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8000e94:	4b8c      	ldr	r3, [pc, #560]	; (80010c8 <takeWifiSSID+0x298>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d152      	bne.n	8000f42 <takeWifiSSID+0x112>
            	if(page == 1) {
 8000e9c:	4b8b      	ldr	r3, [pc, #556]	; (80010cc <takeWifiSSID+0x29c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d10c      	bne.n	8000ebe <takeWifiSSID+0x8e>
            		cursorPosition = 1;
 8000ea4:	4b88      	ldr	r3, [pc, #544]	; (80010c8 <takeWifiSSID+0x298>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]
            		page++;
 8000eaa:	4b88      	ldr	r3, [pc, #544]	; (80010cc <takeWifiSSID+0x29c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4a86      	ldr	r2, [pc, #536]	; (80010cc <takeWifiSSID+0x29c>)
 8000eb2:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f7ff fd22 	bl	8000900 <printTemplate>
 8000ebc:	e046      	b.n	8000f4c <takeWifiSSID+0x11c>
            	} else if(page == 2) {
 8000ebe:	4b83      	ldr	r3, [pc, #524]	; (80010cc <takeWifiSSID+0x29c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d10c      	bne.n	8000ee0 <takeWifiSSID+0xb0>
            		cursorPosition = 1;
 8000ec6:	4b80      	ldr	r3, [pc, #512]	; (80010c8 <takeWifiSSID+0x298>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
            		page++;
 8000ecc:	4b7f      	ldr	r3, [pc, #508]	; (80010cc <takeWifiSSID+0x29c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a7e      	ldr	r2, [pc, #504]	; (80010cc <takeWifiSSID+0x29c>)
 8000ed4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff fd11 	bl	8000900 <printTemplate>
 8000ede:	e035      	b.n	8000f4c <takeWifiSSID+0x11c>
            	} else if(page == 3) {
 8000ee0:	4b7a      	ldr	r3, [pc, #488]	; (80010cc <takeWifiSSID+0x29c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d10c      	bne.n	8000f02 <takeWifiSSID+0xd2>
            		cursorPosition = 1;
 8000ee8:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <takeWifiSSID+0x298>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
            		page++;
 8000eee:	4b77      	ldr	r3, [pc, #476]	; (80010cc <takeWifiSSID+0x29c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a75      	ldr	r2, [pc, #468]	; (80010cc <takeWifiSSID+0x29c>)
 8000ef6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000ef8:	2104      	movs	r1, #4
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff fd00 	bl	8000900 <printTemplate>
 8000f00:	e024      	b.n	8000f4c <takeWifiSSID+0x11c>
            	} else if(page == 4) {
 8000f02:	4b72      	ldr	r3, [pc, #456]	; (80010cc <takeWifiSSID+0x29c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d10c      	bne.n	8000f24 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8000f0a:	4b6f      	ldr	r3, [pc, #444]	; (80010c8 <takeWifiSSID+0x298>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
            		page++;
 8000f10:	4b6e      	ldr	r3, [pc, #440]	; (80010cc <takeWifiSSID+0x29c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a6d      	ldr	r2, [pc, #436]	; (80010cc <takeWifiSSID+0x29c>)
 8000f18:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f7ff fcef 	bl	8000900 <printTemplate>
 8000f22:	e013      	b.n	8000f4c <takeWifiSSID+0x11c>
            	} else if(page == 5) {
 8000f24:	4b69      	ldr	r3, [pc, #420]	; (80010cc <takeWifiSSID+0x29c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d10f      	bne.n	8000f4c <takeWifiSSID+0x11c>
            		cursorPosition = 1;
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <takeWifiSSID+0x298>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f32:	4b66      	ldr	r3, [pc, #408]	; (80010cc <takeWifiSSID+0x29c>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f7ff fce0 	bl	8000900 <printTemplate>
 8000f40:	e004      	b.n	8000f4c <takeWifiSSID+0x11c>
            	}
            } else {
            	cursorPosition++;
 8000f42:	4b61      	ldr	r3, [pc, #388]	; (80010c8 <takeWifiSSID+0x298>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a5f      	ldr	r2, [pc, #380]	; (80010c8 <takeWifiSSID+0x298>)
 8000f4a:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f4c:	20fa      	movs	r0, #250	; 0xfa
 8000f4e:	f007 ff67 	bl	8008e20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f52:	2108      	movs	r1, #8
 8000f54:	485f      	ldr	r0, [pc, #380]	; (80010d4 <takeWifiSSID+0x2a4>)
 8000f56:	f008 fd33 	bl	80099c0 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d15e      	bne.n	800101e <takeWifiSSID+0x1ee>
        	realCharPos--;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dc01      	bgt.n	8000f70 <takeWifiSSID+0x140>
        		realCharPos = 80;
 8000f6c:	2350      	movs	r3, #80	; 0x50
 8000f6e:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8000f70:	4b55      	ldr	r3, [pc, #340]	; (80010c8 <takeWifiSSID+0x298>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d14a      	bne.n	800100e <takeWifiSSID+0x1de>
            	if(page == 1) {
 8000f78:	4b54      	ldr	r3, [pc, #336]	; (80010cc <takeWifiSSID+0x29c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d10a      	bne.n	8000f96 <takeWifiSSID+0x166>
            		cursorPosition = 16;
 8000f80:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <takeWifiSSID+0x298>)
 8000f82:	2210      	movs	r2, #16
 8000f84:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <takeWifiSSID+0x29c>)
 8000f88:	2205      	movs	r2, #5
 8000f8a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f7ff fcb6 	bl	8000900 <printTemplate>
 8000f94:	e040      	b.n	8001018 <takeWifiSSID+0x1e8>
            	} else if(page == 2) {
 8000f96:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <takeWifiSSID+0x29c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d10a      	bne.n	8000fb4 <takeWifiSSID+0x184>
            		cursorPosition = 16;
 8000f9e:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <takeWifiSSID+0x298>)
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000fa4:	4b49      	ldr	r3, [pc, #292]	; (80010cc <takeWifiSSID+0x29c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000faa:	2101      	movs	r1, #1
 8000fac:	2002      	movs	r0, #2
 8000fae:	f7ff fca7 	bl	8000900 <printTemplate>
 8000fb2:	e031      	b.n	8001018 <takeWifiSSID+0x1e8>
            	} else if(page == 3) {
 8000fb4:	4b45      	ldr	r3, [pc, #276]	; (80010cc <takeWifiSSID+0x29c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d10a      	bne.n	8000fd2 <takeWifiSSID+0x1a2>
            		cursorPosition = 16;
 8000fbc:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <takeWifiSSID+0x298>)
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000fc2:	4b42      	ldr	r3, [pc, #264]	; (80010cc <takeWifiSSID+0x29c>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000fc8:	2102      	movs	r1, #2
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f7ff fc98 	bl	8000900 <printTemplate>
 8000fd0:	e022      	b.n	8001018 <takeWifiSSID+0x1e8>
            	} else if(page == 4) {
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <takeWifiSSID+0x29c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d10a      	bne.n	8000ff0 <takeWifiSSID+0x1c0>
            		cursorPosition = 16;
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <takeWifiSSID+0x298>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <takeWifiSSID+0x29c>)
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f7ff fc89 	bl	8000900 <printTemplate>
 8000fee:	e013      	b.n	8001018 <takeWifiSSID+0x1e8>
            	} else if(page == 5) {
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <takeWifiSSID+0x29c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b05      	cmp	r3, #5
 8000ff6:	d10f      	bne.n	8001018 <takeWifiSSID+0x1e8>
            		cursorPosition = 16;
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <takeWifiSSID+0x298>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <takeWifiSSID+0x29c>)
 8001000:	2204      	movs	r2, #4
 8001002:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8001004:	2104      	movs	r1, #4
 8001006:	2002      	movs	r0, #2
 8001008:	f7ff fc7a 	bl	8000900 <printTemplate>
 800100c:	e004      	b.n	8001018 <takeWifiSSID+0x1e8>
            	}
            } else {
            	cursorPosition--;
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <takeWifiSSID+0x298>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3b01      	subs	r3, #1
 8001014:	4a2c      	ldr	r2, [pc, #176]	; (80010c8 <takeWifiSSID+0x298>)
 8001016:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001018:	20fa      	movs	r0, #250	; 0xfa
 800101a:	f007 ff01 	bl	8008e20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800101e:	2102      	movs	r1, #2
 8001020:	482b      	ldr	r0, [pc, #172]	; (80010d0 <takeWifiSSID+0x2a0>)
 8001022:	f008 fccd 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d11e      	bne.n	800106a <takeWifiSSID+0x23a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3b01      	subs	r3, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fddb 	bl	8000bec <getCharFromCursorPosition>
 8001036:	4603      	mov	r3, r0
 8001038:	4619      	mov	r1, r3
 800103a:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <takeWifiSSID+0x2a8>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4413      	add	r3, r2
 8001040:	460a      	mov	r2, r1
 8001042:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	b2d9      	uxtb	r1, r3
 8001048:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <takeWifiSSID+0x2a8>)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fbc5 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	3301      	adds	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 8001064:	20fa      	movs	r0, #250	; 0xfa
 8001066:	f007 fedb 	bl	8008e20 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800106a:	2104      	movs	r1, #4
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <takeWifiSSID+0x2a0>)
 800106e:	f008 fca7 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d139      	bne.n	80010ec <takeWifiSSID+0x2bc>
        	if(strlen(wifiSSID) >= 1) {
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <takeWifiSSID+0x2a8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d032      	beq.n	80010e6 <takeWifiSSID+0x2b6>
        		wifiSSID[wifiNameLoc] = '\0';
 8001080:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <takeWifiSSID+0x2a8>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	4413      	add	r3, r2
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	3306      	adds	r3, #6
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fbc5 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 800109a:	2032      	movs	r0, #50	; 0x32
 800109c:	f007 fec0 	bl	8008e20 <HAL_Delay>
        		if(writeLoc > 7) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	dd03      	ble.n	80010ae <takeWifiSSID+0x27e>
        			writeLoc--;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	e004      	b.n	80010b8 <takeWifiSSID+0x288>
        		} else if(writeLoc < 7) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b06      	cmp	r3, #6
 80010b2:	dc01      	bgt.n	80010b8 <takeWifiSSID+0x288>
        			writeLoc = 7;
 80010b4:	2307      	movs	r3, #7
 80010b6:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	dd0e      	ble.n	80010dc <takeWifiSSID+0x2ac>
        			wifiNameLoc--;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	e00f      	b.n	80010e6 <takeWifiSSID+0x2b6>
 80010c6:	bf00      	nop
 80010c8:	20000944 	.word	0x20000944
 80010cc:	20000948 	.word	0x20000948
 80010d0:	40010800 	.word	0x40010800
 80010d4:	40011000 	.word	0x40011000
 80010d8:	20000b48 	.word	0x20000b48
        		} else if(wifiNameLoc < 0) {
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	da01      	bge.n	80010e6 <takeWifiSSID+0x2b6>
        			wifiNameLoc = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(250);
 80010e6:	20fa      	movs	r0, #250	; 0xfa
 80010e8:	f007 fe9a 	bl	8008e20 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <takeWifiSSID+0x2d4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff fb40 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010fa:	e6af      	b.n	8000e5c <takeWifiSSID+0x2c>
    }
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000944 	.word	0x20000944

08001108 <takeWifiPass>:

void takeWifiPass() {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
    lcd_cursor(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff fbb0 	bl	8000874 <lcd_cursor>

    int realCharPos = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8001118:	4ba0      	ldr	r3, [pc, #640]	; (800139c <takeWifiPass+0x294>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
    page = 1;
 800111e:	4ba0      	ldr	r3, [pc, #640]	; (80013a0 <takeWifiPass+0x298>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8001128:	2307      	movs	r3, #7
 800112a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800112c:	2101      	movs	r1, #1
 800112e:	2003      	movs	r0, #3
 8001130:	f7ff fbe6 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001134:	2108      	movs	r1, #8
 8001136:	489b      	ldr	r0, [pc, #620]	; (80013a4 <takeWifiPass+0x29c>)
 8001138:	f008 fc42 	bl	80099c0 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d103      	bne.n	800114a <takeWifiPass+0x42>
            lcd_cursor(0);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fb96 	bl	8000874 <lcd_cursor>
            break;
 8001148:	e142      	b.n	80013d0 <takeWifiPass+0x2c8>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800114a:	2101      	movs	r1, #1
 800114c:	4895      	ldr	r0, [pc, #596]	; (80013a4 <takeWifiPass+0x29c>)
 800114e:	f008 fc37 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d166      	bne.n	8001226 <takeWifiPass+0x11e>
        	realCharPos++;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3301      	adds	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2b50      	cmp	r3, #80	; 0x50
 8001162:	dd01      	ble.n	8001168 <takeWifiPass+0x60>
        	    realCharPos = 1;
 8001164:	2301      	movs	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8001168:	4b8c      	ldr	r3, [pc, #560]	; (800139c <takeWifiPass+0x294>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b10      	cmp	r3, #16
 800116e:	d152      	bne.n	8001216 <takeWifiPass+0x10e>
            	if(page == 1) {
 8001170:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <takeWifiPass+0x298>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10c      	bne.n	8001192 <takeWifiPass+0x8a>
            		cursorPosition = 1;
 8001178:	4b88      	ldr	r3, [pc, #544]	; (800139c <takeWifiPass+0x294>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
            		page++;
 800117e:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <takeWifiPass+0x298>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a86      	ldr	r2, [pc, #536]	; (80013a0 <takeWifiPass+0x298>)
 8001186:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001188:	2102      	movs	r1, #2
 800118a:	2003      	movs	r0, #3
 800118c:	f7ff fbb8 	bl	8000900 <printTemplate>
 8001190:	e046      	b.n	8001220 <takeWifiPass+0x118>
            	} else if(page == 2) {
 8001192:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <takeWifiPass+0x298>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d10c      	bne.n	80011b4 <takeWifiPass+0xac>
            		cursorPosition = 1;
 800119a:	4b80      	ldr	r3, [pc, #512]	; (800139c <takeWifiPass+0x294>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
            		page++;
 80011a0:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <takeWifiPass+0x298>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a7e      	ldr	r2, [pc, #504]	; (80013a0 <takeWifiPass+0x298>)
 80011a8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80011aa:	2103      	movs	r1, #3
 80011ac:	2003      	movs	r0, #3
 80011ae:	f7ff fba7 	bl	8000900 <printTemplate>
 80011b2:	e035      	b.n	8001220 <takeWifiPass+0x118>
            	} else if(page == 3) {
 80011b4:	4b7a      	ldr	r3, [pc, #488]	; (80013a0 <takeWifiPass+0x298>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d10c      	bne.n	80011d6 <takeWifiPass+0xce>
            		cursorPosition = 1;
 80011bc:	4b77      	ldr	r3, [pc, #476]	; (800139c <takeWifiPass+0x294>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
            		page++;
 80011c2:	4b77      	ldr	r3, [pc, #476]	; (80013a0 <takeWifiPass+0x298>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a75      	ldr	r2, [pc, #468]	; (80013a0 <takeWifiPass+0x298>)
 80011ca:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80011cc:	2104      	movs	r1, #4
 80011ce:	2003      	movs	r0, #3
 80011d0:	f7ff fb96 	bl	8000900 <printTemplate>
 80011d4:	e024      	b.n	8001220 <takeWifiPass+0x118>
            	} else if(page == 4) {
 80011d6:	4b72      	ldr	r3, [pc, #456]	; (80013a0 <takeWifiPass+0x298>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d10c      	bne.n	80011f8 <takeWifiPass+0xf0>
            		cursorPosition = 1;
 80011de:	4b6f      	ldr	r3, [pc, #444]	; (800139c <takeWifiPass+0x294>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
            		page++;
 80011e4:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <takeWifiPass+0x298>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a6d      	ldr	r2, [pc, #436]	; (80013a0 <takeWifiPass+0x298>)
 80011ec:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80011ee:	2105      	movs	r1, #5
 80011f0:	2003      	movs	r0, #3
 80011f2:	f7ff fb85 	bl	8000900 <printTemplate>
 80011f6:	e013      	b.n	8001220 <takeWifiPass+0x118>
            	} else if(page == 5) {
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <takeWifiPass+0x298>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d10f      	bne.n	8001220 <takeWifiPass+0x118>
            		cursorPosition = 1;
 8001200:	4b66      	ldr	r3, [pc, #408]	; (800139c <takeWifiPass+0x294>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001206:	4b66      	ldr	r3, [pc, #408]	; (80013a0 <takeWifiPass+0x298>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800120c:	2101      	movs	r1, #1
 800120e:	2003      	movs	r0, #3
 8001210:	f7ff fb76 	bl	8000900 <printTemplate>
 8001214:	e004      	b.n	8001220 <takeWifiPass+0x118>
            	}
            } else {
            	cursorPosition++;
 8001216:	4b61      	ldr	r3, [pc, #388]	; (800139c <takeWifiPass+0x294>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a5f      	ldr	r2, [pc, #380]	; (800139c <takeWifiPass+0x294>)
 800121e:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001220:	20fa      	movs	r0, #250	; 0xfa
 8001222:	f007 fdfd 	bl	8008e20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001226:	2108      	movs	r1, #8
 8001228:	485f      	ldr	r0, [pc, #380]	; (80013a8 <takeWifiPass+0x2a0>)
 800122a:	f008 fbc9 	bl	80099c0 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d15e      	bne.n	80012f2 <takeWifiPass+0x1ea>
        	realCharPos--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3b01      	subs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dc01      	bgt.n	8001244 <takeWifiPass+0x13c>
        	    realCharPos = 80;
 8001240:	2350      	movs	r3, #80	; 0x50
 8001242:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <takeWifiPass+0x294>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d14a      	bne.n	80012e2 <takeWifiPass+0x1da>
            	if(page == 1) {
 800124c:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <takeWifiPass+0x298>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d10a      	bne.n	800126a <takeWifiPass+0x162>
            		cursorPosition = 16;
 8001254:	4b51      	ldr	r3, [pc, #324]	; (800139c <takeWifiPass+0x294>)
 8001256:	2210      	movs	r2, #16
 8001258:	601a      	str	r2, [r3, #0]
            		page = 5;
 800125a:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <takeWifiPass+0x298>)
 800125c:	2205      	movs	r2, #5
 800125e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8001260:	2105      	movs	r1, #5
 8001262:	2003      	movs	r0, #3
 8001264:	f7ff fb4c 	bl	8000900 <printTemplate>
 8001268:	e040      	b.n	80012ec <takeWifiPass+0x1e4>
            	} else if(page == 2) {
 800126a:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <takeWifiPass+0x298>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d10a      	bne.n	8001288 <takeWifiPass+0x180>
            		cursorPosition = 16;
 8001272:	4b4a      	ldr	r3, [pc, #296]	; (800139c <takeWifiPass+0x294>)
 8001274:	2210      	movs	r2, #16
 8001276:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <takeWifiPass+0x298>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800127e:	2101      	movs	r1, #1
 8001280:	2003      	movs	r0, #3
 8001282:	f7ff fb3d 	bl	8000900 <printTemplate>
 8001286:	e031      	b.n	80012ec <takeWifiPass+0x1e4>
            	} else if(page == 3) {
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <takeWifiPass+0x298>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d10a      	bne.n	80012a6 <takeWifiPass+0x19e>
            		cursorPosition = 16;
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <takeWifiPass+0x294>)
 8001292:	2210      	movs	r2, #16
 8001294:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <takeWifiPass+0x298>)
 8001298:	2202      	movs	r2, #2
 800129a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 800129c:	2102      	movs	r1, #2
 800129e:	2003      	movs	r0, #3
 80012a0:	f7ff fb2e 	bl	8000900 <printTemplate>
 80012a4:	e022      	b.n	80012ec <takeWifiPass+0x1e4>
            	} else if(page == 4) {
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <takeWifiPass+0x298>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d10a      	bne.n	80012c4 <takeWifiPass+0x1bc>
            		cursorPosition = 16;
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <takeWifiPass+0x294>)
 80012b0:	2210      	movs	r2, #16
 80012b2:	601a      	str	r2, [r3, #0]
            		page = 3;
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <takeWifiPass+0x298>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80012ba:	2103      	movs	r1, #3
 80012bc:	2003      	movs	r0, #3
 80012be:	f7ff fb1f 	bl	8000900 <printTemplate>
 80012c2:	e013      	b.n	80012ec <takeWifiPass+0x1e4>
            	} else if(page == 5) {
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <takeWifiPass+0x298>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d10f      	bne.n	80012ec <takeWifiPass+0x1e4>
            		cursorPosition = 16;
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <takeWifiPass+0x294>)
 80012ce:	2210      	movs	r2, #16
 80012d0:	601a      	str	r2, [r3, #0]
            		page = 4;
 80012d2:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <takeWifiPass+0x298>)
 80012d4:	2204      	movs	r2, #4
 80012d6:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80012d8:	2104      	movs	r1, #4
 80012da:	2003      	movs	r0, #3
 80012dc:	f7ff fb10 	bl	8000900 <printTemplate>
 80012e0:	e004      	b.n	80012ec <takeWifiPass+0x1e4>
            	}
            } else {
            	cursorPosition--;
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <takeWifiPass+0x294>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	4a2c      	ldr	r2, [pc, #176]	; (800139c <takeWifiPass+0x294>)
 80012ea:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80012ec:	20fa      	movs	r0, #250	; 0xfa
 80012ee:	f007 fd97 	bl	8008e20 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80012f2:	2102      	movs	r1, #2
 80012f4:	482b      	ldr	r0, [pc, #172]	; (80013a4 <takeWifiPass+0x29c>)
 80012f6:	f008 fb63 	bl	80099c0 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d11e      	bne.n	800133e <takeWifiPass+0x236>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3b01      	subs	r3, #1
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc71 	bl	8000bec <getCharFromCursorPosition>
 800130a:	4603      	mov	r3, r0
 800130c:	4619      	mov	r1, r3
 800130e:	4a27      	ldr	r2, [pc, #156]	; (80013ac <takeWifiPass+0x2a4>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	460a      	mov	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	b2d9      	uxtb	r1, r3
 800131c:	4a23      	ldr	r2, [pc, #140]	; (80013ac <takeWifiPass+0x2a4>)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff fa5b 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3301      	adds	r3, #1
 8001330:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3301      	adds	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 8001338:	20fa      	movs	r0, #250	; 0xfa
 800133a:	f007 fd71 	bl	8008e20 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800133e:	2104      	movs	r1, #4
 8001340:	4818      	ldr	r0, [pc, #96]	; (80013a4 <takeWifiPass+0x29c>)
 8001342:	f008 fb3d 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	d139      	bne.n	80013c0 <takeWifiPass+0x2b8>
            if(strlen(wifiPass) >= 1) {
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <takeWifiPass+0x2a4>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d032      	beq.n	80013ba <takeWifiPass+0x2b2>
            	wifiPass[wifiPassLoc] = '\0';
 8001354:	4a15      	ldr	r2, [pc, #84]	; (80013ac <takeWifiPass+0x2a4>)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3306      	adds	r3, #6
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4619      	mov	r1, r3
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff fa5b 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 800136e:	2032      	movs	r0, #50	; 0x32
 8001370:	f007 fd56 	bl	8008e20 <HAL_Delay>

            	if(writeLoc > 7) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b07      	cmp	r3, #7
 8001378:	dd03      	ble.n	8001382 <takeWifiPass+0x27a>
            		writeLoc--;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3b01      	subs	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	e004      	b.n	800138c <takeWifiPass+0x284>
            	} else if(writeLoc < 7) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b06      	cmp	r3, #6
 8001386:	dc01      	bgt.n	800138c <takeWifiPass+0x284>
            		writeLoc = 7;
 8001388:	2307      	movs	r3, #7
 800138a:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	dd0e      	ble.n	80013b0 <takeWifiPass+0x2a8>
            		wifiPassLoc--;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3b01      	subs	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	e00f      	b.n	80013ba <takeWifiPass+0x2b2>
 800139a:	bf00      	nop
 800139c:	20000944 	.word	0x20000944
 80013a0:	20000948 	.word	0x20000948
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40011000 	.word	0x40011000
 80013ac:	20000b6c 	.word	0x20000b6c
            	} else if(wifiPassLoc < 0) {
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da01      	bge.n	80013ba <takeWifiPass+0x2b2>
            		wifiPassLoc = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(250);
 80013ba:	20fa      	movs	r0, #250	; 0xfa
 80013bc:	f007 fd30 	bl	8008e20 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <takeWifiPass+0x2d0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4619      	mov	r1, r3
 80013c8:	2002      	movs	r0, #2
 80013ca:	f7ff f9d6 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80013ce:	e6b1      	b.n	8001134 <takeWifiPass+0x2c>
    }
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000944 	.word	0x20000944

080013dc <menu>:

void menu(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013e0:	2101      	movs	r1, #1
 80013e2:	488f      	ldr	r0, [pc, #572]	; (8001620 <menu+0x244>)
 80013e4:	f008 faec 	bl	80099c0 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f040 808e 	bne.w	800150c <menu+0x130>
 80013f0:	4b8c      	ldr	r3, [pc, #560]	; (8001624 <menu+0x248>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8086 	beq.w	800150c <menu+0x130>
		menuSayac = menuSayac+1;
 8001400:	4b89      	ldr	r3, [pc, #548]	; (8001628 <menu+0x24c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b87      	ldr	r3, [pc, #540]	; (8001628 <menu+0x24c>)
 800140a:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800140c:	4b86      	ldr	r3, [pc, #536]	; (8001628 <menu+0x24c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b24      	cmp	r3, #36	; 0x24
 8001412:	d102      	bne.n	800141a <menu+0x3e>
			menuSayac = 1;
 8001414:	4b84      	ldr	r3, [pc, #528]	; (8001628 <menu+0x24c>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800141a:	4b83      	ldr	r3, [pc, #524]	; (8001628 <menu+0x24c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b12      	cmp	r3, #18
 8001420:	d106      	bne.n	8001430 <menu+0x54>
 8001422:	4b82      	ldr	r3, [pc, #520]	; (800162c <menu+0x250>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <menu+0x54>
			menuSayac = 21;
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <menu+0x24c>)
 800142c:	2215      	movs	r2, #21
 800142e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001430:	4b7d      	ldr	r3, [pc, #500]	; (8001628 <menu+0x24c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d106      	bne.n	8001446 <menu+0x6a>
 8001438:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <menu+0x254>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <menu+0x6a>
			menuSayac = 16;
 8001440:	4b79      	ldr	r3, [pc, #484]	; (8001628 <menu+0x24c>)
 8001442:	2210      	movs	r2, #16
 8001444:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001446:	4b78      	ldr	r3, [pc, #480]	; (8001628 <menu+0x24c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b0d      	cmp	r3, #13
 800144c:	d106      	bne.n	800145c <menu+0x80>
 800144e:	4b78      	ldr	r3, [pc, #480]	; (8001630 <menu+0x254>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d102      	bne.n	800145c <menu+0x80>
			menuSayac = 16;
 8001456:	4b74      	ldr	r3, [pc, #464]	; (8001628 <menu+0x24c>)
 8001458:	2210      	movs	r2, #16
 800145a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800145c:	4b72      	ldr	r3, [pc, #456]	; (8001628 <menu+0x24c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b09      	cmp	r3, #9
 8001462:	d106      	bne.n	8001472 <menu+0x96>
 8001464:	4b72      	ldr	r3, [pc, #456]	; (8001630 <menu+0x254>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d102      	bne.n	8001472 <menu+0x96>
			menuSayac = 13;
 800146c:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <menu+0x24c>)
 800146e:	220d      	movs	r2, #13
 8001470:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001472:	4b6d      	ldr	r3, [pc, #436]	; (8001628 <menu+0x24c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b0a      	cmp	r3, #10
 8001478:	d10a      	bne.n	8001490 <menu+0xb4>
 800147a:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <menu+0x258>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d003      	beq.n	800148a <menu+0xae>
 8001482:	4b6c      	ldr	r3, [pc, #432]	; (8001634 <menu+0x258>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d102      	bne.n	8001490 <menu+0xb4>
			menuSayac = 11;
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <menu+0x24c>)
 800148c:	220b      	movs	r2, #11
 800148e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001490:	4b65      	ldr	r3, [pc, #404]	; (8001628 <menu+0x24c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d10e      	bne.n	80014b6 <menu+0xda>
 8001498:	4b67      	ldr	r3, [pc, #412]	; (8001638 <menu+0x25c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d003      	beq.n	80014a8 <menu+0xcc>
 80014a0:	4b65      	ldr	r3, [pc, #404]	; (8001638 <menu+0x25c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d106      	bne.n	80014b6 <menu+0xda>
 80014a8:	4b61      	ldr	r3, [pc, #388]	; (8001630 <menu+0x254>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d102      	bne.n	80014b6 <menu+0xda>
			menuSayac = 16;
 80014b0:	4b5d      	ldr	r3, [pc, #372]	; (8001628 <menu+0x24c>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80014b6:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <menu+0x24c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d10e      	bne.n	80014dc <menu+0x100>
 80014be:	4b5e      	ldr	r3, [pc, #376]	; (8001638 <menu+0x25c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d003      	beq.n	80014ce <menu+0xf2>
 80014c6:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <menu+0x25c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d106      	bne.n	80014dc <menu+0x100>
 80014ce:	4b58      	ldr	r3, [pc, #352]	; (8001630 <menu+0x254>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d102      	bne.n	80014dc <menu+0x100>
			menuSayac = 13;
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <menu+0x24c>)
 80014d8:	220d      	movs	r2, #13
 80014da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014dc:	4b52      	ldr	r3, [pc, #328]	; (8001628 <menu+0x24c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d106      	bne.n	80014f2 <menu+0x116>
 80014e4:	4b55      	ldr	r3, [pc, #340]	; (800163c <menu+0x260>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d102      	bne.n	80014f2 <menu+0x116>
			menuSayac = 16;
 80014ec:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <menu+0x24c>)
 80014ee:	2210      	movs	r2, #16
 80014f0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80014f2:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <menu+0x24c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b18      	cmp	r3, #24
 80014f8:	d106      	bne.n	8001508 <menu+0x12c>
 80014fa:	4b4c      	ldr	r3, [pc, #304]	; (800162c <menu+0x250>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <menu+0x12c>
			menuSayac = 26;
 8001502:	4b49      	ldr	r3, [pc, #292]	; (8001628 <menu+0x24c>)
 8001504:	221a      	movs	r2, #26
 8001506:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001508:	f004 fc86 	bl	8005e18 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800150c:	2108      	movs	r1, #8
 800150e:	484c      	ldr	r0, [pc, #304]	; (8001640 <menu+0x264>)
 8001510:	f008 fa56 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d175      	bne.n	8001606 <menu+0x22a>
 800151a:	4b42      	ldr	r3, [pc, #264]	; (8001624 <menu+0x248>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f083 0301 	eor.w	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d06e      	beq.n	8001606 <menu+0x22a>
		if (menuSayac <= 1) {
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <menu+0x24c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d802      	bhi.n	8001536 <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <menu+0x24c>)
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <menu+0x24c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	3b01      	subs	r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <menu+0x24c>)
 8001540:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <menu+0x24c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b14      	cmp	r3, #20
 8001548:	d106      	bne.n	8001558 <menu+0x17c>
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <menu+0x250>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <menu+0x17c>
			menuSayac = 17;
 8001552:	4b35      	ldr	r3, [pc, #212]	; (8001628 <menu+0x24c>)
 8001554:	2211      	movs	r2, #17
 8001556:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <menu+0x24c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d106      	bne.n	800156e <menu+0x192>
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <menu+0x254>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <menu+0x192>
			menuSayac = 7;
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <menu+0x24c>)
 800156a:	2207      	movs	r2, #7
 800156c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <menu+0x24c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	d106      	bne.n	8001584 <menu+0x1a8>
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <menu+0x254>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d102      	bne.n	8001584 <menu+0x1a8>
			menuSayac = 12;
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <menu+0x24c>)
 8001580:	220c      	movs	r2, #12
 8001582:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <menu+0x24c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	d106      	bne.n	800159a <menu+0x1be>
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <menu+0x254>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d102      	bne.n	800159a <menu+0x1be>
			menuSayac = 8;
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <menu+0x24c>)
 8001596:	2208      	movs	r2, #8
 8001598:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <menu+0x24c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	d10a      	bne.n	80015b8 <menu+0x1dc>
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <menu+0x258>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d003      	beq.n	80015b2 <menu+0x1d6>
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <menu+0x258>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d102      	bne.n	80015b8 <menu+0x1dc>
			menuSayac = 9;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <menu+0x24c>)
 80015b4:	2209      	movs	r2, #9
 80015b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <menu+0x24c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d10a      	bne.n	80015d6 <menu+0x1fa>
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <menu+0x25c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d003      	beq.n	80015d0 <menu+0x1f4>
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <menu+0x25c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d102      	bne.n	80015d6 <menu+0x1fa>
			menuSayac = 11;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <menu+0x24c>)
 80015d2:	220b      	movs	r2, #11
 80015d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <menu+0x24c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	d106      	bne.n	80015ec <menu+0x210>
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <menu+0x260>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d102      	bne.n	80015ec <menu+0x210>
			menuSayac = 14;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <menu+0x24c>)
 80015e8:	220e      	movs	r2, #14
 80015ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <menu+0x24c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b19      	cmp	r3, #25
 80015f2:	d106      	bne.n	8001602 <menu+0x226>
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <menu+0x250>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <menu+0x226>
			menuSayac = 23;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <menu+0x24c>)
 80015fe:	2217      	movs	r2, #23
 8001600:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001602:	f004 fc09 	bl	8005e18 <bekle>
	}

	if (menuSayac == 0) {
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <menu+0x24c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d134      	bne.n	8001678 <menu+0x29c>
		if(dilSecim == 0) {
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <menu+0x268>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d122      	bne.n	800165c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001616:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <menu+0x26c>)
 8001618:	2101      	movs	r1, #1
 800161a:	2001      	movs	r0, #1
 800161c:	e016      	b.n	800164c <menu+0x270>
 800161e:	bf00      	nop
 8001620:	40010800 	.word	0x40010800
 8001624:	20000bc0 	.word	0x20000bc0
 8001628:	20000b91 	.word	0x20000b91
 800162c:	20000ba0 	.word	0x20000ba0
 8001630:	20000b99 	.word	0x20000b99
 8001634:	20000b9a 	.word	0x20000b9a
 8001638:	20000b9b 	.word	0x20000b9b
 800163c:	20000b9c 	.word	0x20000b9c
 8001640:	40011000 	.word	0x40011000
 8001644:	20000bb2 	.word	0x20000bb2
 8001648:	0800d650 	.word	0x0800d650
 800164c:	f7ff f8b4 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001650:	4a94      	ldr	r2, [pc, #592]	; (80018a4 <menu+0x4c8>)
 8001652:	2101      	movs	r1, #1
 8001654:	2002      	movs	r0, #2
 8001656:	f7ff f8af 	bl	80007b8 <lcd_print>
 800165a:	e00d      	b.n	8001678 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800165c:	4b92      	ldr	r3, [pc, #584]	; (80018a8 <menu+0x4cc>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d109      	bne.n	8001678 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001664:	4a91      	ldr	r2, [pc, #580]	; (80018ac <menu+0x4d0>)
 8001666:	2101      	movs	r1, #1
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff f8a5 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800166e:	4a90      	ldr	r2, [pc, #576]	; (80018b0 <menu+0x4d4>)
 8001670:	2101      	movs	r1, #1
 8001672:	2002      	movs	r0, #2
 8001674:	f7ff f8a0 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001678:	4b8e      	ldr	r3, [pc, #568]	; (80018b4 <menu+0x4d8>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 82b5 	bne.w	8001bec <menu+0x810>
		if(dilSecim == 0) {
 8001682:	4b89      	ldr	r3, [pc, #548]	; (80018a8 <menu+0x4cc>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800168a:	4a8b      	ldr	r2, [pc, #556]	; (80018b8 <menu+0x4dc>)
 800168c:	2101      	movs	r1, #1
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff f892 	bl	80007b8 <lcd_print>
 8001694:	e008      	b.n	80016a8 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001696:	4b84      	ldr	r3, [pc, #528]	; (80018a8 <menu+0x4cc>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d104      	bne.n	80016a8 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800169e:	4a87      	ldr	r2, [pc, #540]	; (80018bc <menu+0x4e0>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff f888 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80016a8:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <menu+0x4e4>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d123      	bne.n	80016f8 <menu+0x31c>
			if(dilSecim == 0) {
 80016b0:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <menu+0x4cc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80016b8:	4a82      	ldr	r2, [pc, #520]	; (80018c4 <menu+0x4e8>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	2002      	movs	r0, #2
 80016be:	f7ff f87b 	bl	80007b8 <lcd_print>
 80016c2:	e008      	b.n	80016d6 <menu+0x2fa>

			} else if(dilSecim == 1) {
 80016c4:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <menu+0x4cc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d104      	bne.n	80016d6 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80016cc:	4a7e      	ldr	r2, [pc, #504]	; (80018c8 <menu+0x4ec>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2002      	movs	r0, #2
 80016d2:	f7ff f871 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80016d6:	4a7d      	ldr	r2, [pc, #500]	; (80018cc <menu+0x4f0>)
 80016d8:	210f      	movs	r1, #15
 80016da:	2002      	movs	r0, #2
 80016dc:	f7ff f86c 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80016e0:	4b7b      	ldr	r3, [pc, #492]	; (80018d0 <menu+0x4f4>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	220a      	movs	r2, #10
 80016e6:	497b      	ldr	r1, [pc, #492]	; (80018d4 <menu+0x4f8>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00b f995 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 80016ee:	4a79      	ldr	r2, [pc, #484]	; (80018d4 <menu+0x4f8>)
 80016f0:	210e      	movs	r1, #14
 80016f2:	2002      	movs	r0, #2
 80016f4:	f7ff f860 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80016f8:	4b71      	ldr	r3, [pc, #452]	; (80018c0 <menu+0x4e4>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d123      	bne.n	8001748 <menu+0x36c>
			if(dilSecim == 0) {
 8001700:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <menu+0x4cc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001708:	4a73      	ldr	r2, [pc, #460]	; (80018d8 <menu+0x4fc>)
 800170a:	2101      	movs	r1, #1
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff f853 	bl	80007b8 <lcd_print>
 8001712:	e008      	b.n	8001726 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001714:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <menu+0x4cc>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d104      	bne.n	8001726 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 800171c:	4a6f      	ldr	r2, [pc, #444]	; (80018dc <menu+0x500>)
 800171e:	2101      	movs	r1, #1
 8001720:	2002      	movs	r0, #2
 8001722:	f7ff f849 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001726:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <menu+0x504>)
 8001728:	210f      	movs	r1, #15
 800172a:	2002      	movs	r0, #2
 800172c:	f7ff f844 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001730:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <menu+0x508>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	220a      	movs	r2, #10
 8001736:	4967      	ldr	r1, [pc, #412]	; (80018d4 <menu+0x4f8>)
 8001738:	4618      	mov	r0, r3
 800173a:	f00b f96d 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 800173e:	4a65      	ldr	r2, [pc, #404]	; (80018d4 <menu+0x4f8>)
 8001740:	210e      	movs	r1, #14
 8001742:	2002      	movs	r0, #2
 8001744:	f7ff f838 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001748:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <menu+0x4e4>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <menu+0x3bc>
			if(dilSecim == 0) {
 8001750:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <menu+0x4cc>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001758:	4a63      	ldr	r2, [pc, #396]	; (80018e8 <menu+0x50c>)
 800175a:	2101      	movs	r1, #1
 800175c:	2002      	movs	r0, #2
 800175e:	f7ff f82b 	bl	80007b8 <lcd_print>
 8001762:	e008      	b.n	8001776 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <menu+0x4cc>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d104      	bne.n	8001776 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 800176c:	4a5f      	ldr	r2, [pc, #380]	; (80018ec <menu+0x510>)
 800176e:	2101      	movs	r1, #1
 8001770:	2002      	movs	r0, #2
 8001772:	f7ff f821 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <menu+0x504>)
 8001778:	210f      	movs	r1, #15
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff f81c 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001780:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <menu+0x514>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	220a      	movs	r2, #10
 8001786:	4953      	ldr	r1, [pc, #332]	; (80018d4 <menu+0x4f8>)
 8001788:	4618      	mov	r0, r3
 800178a:	f00b f945 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 800178e:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <menu+0x4f8>)
 8001790:	210e      	movs	r1, #14
 8001792:	2002      	movs	r0, #2
 8001794:	f7ff f810 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001798:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <menu+0x4e4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d123      	bne.n	80017e8 <menu+0x40c>
			if(dilSecim == 0) {
 80017a0:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <menu+0x4cc>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <menu+0x518>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	2002      	movs	r0, #2
 80017ae:	f7ff f803 	bl	80007b8 <lcd_print>
 80017b2:	e008      	b.n	80017c6 <menu+0x3ea>
			} else if(dilSecim == 1) {
 80017b4:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <menu+0x4cc>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d104      	bne.n	80017c6 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80017bc:	4a4e      	ldr	r2, [pc, #312]	; (80018f8 <menu+0x51c>)
 80017be:	2101      	movs	r1, #1
 80017c0:	2002      	movs	r0, #2
 80017c2:	f7fe fff9 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017c6:	4a46      	ldr	r2, [pc, #280]	; (80018e0 <menu+0x504>)
 80017c8:	210f      	movs	r1, #15
 80017ca:	2002      	movs	r0, #2
 80017cc:	f7fe fff4 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80017d0:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <menu+0x520>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	220a      	movs	r2, #10
 80017d6:	493f      	ldr	r1, [pc, #252]	; (80018d4 <menu+0x4f8>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f00b f91d 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 80017de:	4a3d      	ldr	r2, [pc, #244]	; (80018d4 <menu+0x4f8>)
 80017e0:	210e      	movs	r1, #14
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7fe ffe8 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <menu+0x4e4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d123      	bne.n	8001838 <menu+0x45c>
			if(dilSecim == 0) {
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <menu+0x4cc>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80017f8:	4a41      	ldr	r2, [pc, #260]	; (8001900 <menu+0x524>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	2002      	movs	r0, #2
 80017fe:	f7fe ffdb 	bl	80007b8 <lcd_print>
 8001802:	e008      	b.n	8001816 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <menu+0x4cc>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d104      	bne.n	8001816 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 800180c:	4a3d      	ldr	r2, [pc, #244]	; (8001904 <menu+0x528>)
 800180e:	2101      	movs	r1, #1
 8001810:	2002      	movs	r0, #2
 8001812:	f7fe ffd1 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001816:	4a32      	ldr	r2, [pc, #200]	; (80018e0 <menu+0x504>)
 8001818:	210f      	movs	r1, #15
 800181a:	2002      	movs	r0, #2
 800181c:	f7fe ffcc 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001820:	4b39      	ldr	r3, [pc, #228]	; (8001908 <menu+0x52c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	220a      	movs	r2, #10
 8001826:	492b      	ldr	r1, [pc, #172]	; (80018d4 <menu+0x4f8>)
 8001828:	4618      	mov	r0, r3
 800182a:	f00b f8f5 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 800182e:	4a29      	ldr	r2, [pc, #164]	; (80018d4 <menu+0x4f8>)
 8001830:	210e      	movs	r1, #14
 8001832:	2002      	movs	r0, #2
 8001834:	f7fe ffc0 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <menu+0x4e4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d123      	bne.n	8001888 <menu+0x4ac>
			if(dilSecim == 0) {
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <menu+0x4cc>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001848:	4a30      	ldr	r2, [pc, #192]	; (800190c <menu+0x530>)
 800184a:	2101      	movs	r1, #1
 800184c:	2002      	movs	r0, #2
 800184e:	f7fe ffb3 	bl	80007b8 <lcd_print>
 8001852:	e008      	b.n	8001866 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <menu+0x4cc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d104      	bne.n	8001866 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 800185c:	4a2c      	ldr	r2, [pc, #176]	; (8001910 <menu+0x534>)
 800185e:	2101      	movs	r1, #1
 8001860:	2002      	movs	r0, #2
 8001862:	f7fe ffa9 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <menu+0x504>)
 8001868:	210f      	movs	r1, #15
 800186a:	2002      	movs	r0, #2
 800186c:	f7fe ffa4 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <menu+0x538>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	220a      	movs	r2, #10
 8001876:	4917      	ldr	r1, [pc, #92]	; (80018d4 <menu+0x4f8>)
 8001878:	4618      	mov	r0, r3
 800187a:	f00b f8cd 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <menu+0x4f8>)
 8001880:	210e      	movs	r1, #14
 8001882:	2002      	movs	r0, #2
 8001884:	f7fe ff98 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <menu+0x4e4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b06      	cmp	r3, #6
 800188e:	d15f      	bne.n	8001950 <menu+0x574>
			if(dilSecim == 0) {
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <menu+0x4cc>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d141      	bne.n	800191c <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001898:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <menu+0x53c>)
 800189a:	2101      	movs	r1, #1
 800189c:	2002      	movs	r0, #2
 800189e:	f7fe ff8b 	bl	80007b8 <lcd_print>
 80018a2:	e044      	b.n	800192e <menu+0x552>
 80018a4:	0800d664 	.word	0x0800d664
 80018a8:	20000bb2 	.word	0x20000bb2
 80018ac:	0800d678 	.word	0x0800d678
 80018b0:	0800d68c 	.word	0x0800d68c
 80018b4:	20000b91 	.word	0x20000b91
 80018b8:	0800d6a0 	.word	0x0800d6a0
 80018bc:	0800d6b4 	.word	0x0800d6b4
 80018c0:	20000b93 	.word	0x20000b93
 80018c4:	0800d6c8 	.word	0x0800d6c8
 80018c8:	0800d6d8 	.word	0x0800d6d8
 80018cc:	0800d6e8 	.word	0x0800d6e8
 80018d0:	20000bb3 	.word	0x20000bb3
 80018d4:	20000b14 	.word	0x20000b14
 80018d8:	0800d6ec 	.word	0x0800d6ec
 80018dc:	0800d6fc 	.word	0x0800d6fc
 80018e0:	0800d70c 	.word	0x0800d70c
 80018e4:	20000bb4 	.word	0x20000bb4
 80018e8:	0800d710 	.word	0x0800d710
 80018ec:	0800d720 	.word	0x0800d720
 80018f0:	20000bb5 	.word	0x20000bb5
 80018f4:	0800d730 	.word	0x0800d730
 80018f8:	0800d740 	.word	0x0800d740
 80018fc:	20000bb6 	.word	0x20000bb6
 8001900:	0800d750 	.word	0x0800d750
 8001904:	0800d760 	.word	0x0800d760
 8001908:	20000bb7 	.word	0x20000bb7
 800190c:	0800d770 	.word	0x0800d770
 8001910:	0800d780 	.word	0x0800d780
 8001914:	20000bb8 	.word	0x20000bb8
 8001918:	0800d790 	.word	0x0800d790
			} else if(dilSecim == 1) {
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <menu+0x680>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d104      	bne.n	800192e <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001924:	4a4e      	ldr	r2, [pc, #312]	; (8001a60 <menu+0x684>)
 8001926:	2101      	movs	r1, #1
 8001928:	2002      	movs	r0, #2
 800192a:	f7fe ff45 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800192e:	4a4d      	ldr	r2, [pc, #308]	; (8001a64 <menu+0x688>)
 8001930:	210f      	movs	r1, #15
 8001932:	2002      	movs	r0, #2
 8001934:	f7fe ff40 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <menu+0x68c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	220a      	movs	r2, #10
 800193e:	494b      	ldr	r1, [pc, #300]	; (8001a6c <menu+0x690>)
 8001940:	4618      	mov	r0, r3
 8001942:	f00b f869 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 8001946:	4a49      	ldr	r2, [pc, #292]	; (8001a6c <menu+0x690>)
 8001948:	210e      	movs	r1, #14
 800194a:	2002      	movs	r0, #2
 800194c:	f7fe ff34 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001950:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <menu+0x694>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b07      	cmp	r3, #7
 8001956:	d123      	bne.n	80019a0 <menu+0x5c4>
			if(dilSecim == 0) {
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <menu+0x680>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001960:	4a44      	ldr	r2, [pc, #272]	; (8001a74 <menu+0x698>)
 8001962:	2101      	movs	r1, #1
 8001964:	2002      	movs	r0, #2
 8001966:	f7fe ff27 	bl	80007b8 <lcd_print>
 800196a:	e008      	b.n	800197e <menu+0x5a2>
			} else if(dilSecim == 1) {
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <menu+0x680>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d104      	bne.n	800197e <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001974:	4a40      	ldr	r2, [pc, #256]	; (8001a78 <menu+0x69c>)
 8001976:	2101      	movs	r1, #1
 8001978:	2002      	movs	r0, #2
 800197a:	f7fe ff1d 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800197e:	4a39      	ldr	r2, [pc, #228]	; (8001a64 <menu+0x688>)
 8001980:	210f      	movs	r1, #15
 8001982:	2002      	movs	r0, #2
 8001984:	f7fe ff18 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <menu+0x6a0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	220a      	movs	r2, #10
 800198e:	4937      	ldr	r1, [pc, #220]	; (8001a6c <menu+0x690>)
 8001990:	4618      	mov	r0, r3
 8001992:	f00b f841 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 8001996:	4a35      	ldr	r2, [pc, #212]	; (8001a6c <menu+0x690>)
 8001998:	210e      	movs	r1, #14
 800199a:	2002      	movs	r0, #2
 800199c:	f7fe ff0c 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <menu+0x694>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d123      	bne.n	80019f0 <menu+0x614>
			if(dilSecim == 0) {
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <menu+0x680>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80019b0:	4a33      	ldr	r2, [pc, #204]	; (8001a80 <menu+0x6a4>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	2002      	movs	r0, #2
 80019b6:	f7fe feff 	bl	80007b8 <lcd_print>
 80019ba:	e008      	b.n	80019ce <menu+0x5f2>
			} else if(dilSecim == 1) {
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <menu+0x680>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d104      	bne.n	80019ce <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80019c4:	4a2f      	ldr	r2, [pc, #188]	; (8001a84 <menu+0x6a8>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	2002      	movs	r0, #2
 80019ca:	f7fe fef5 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <menu+0x688>)
 80019d0:	210f      	movs	r1, #15
 80019d2:	2002      	movs	r0, #2
 80019d4:	f7fe fef0 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <menu+0x6ac>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	220a      	movs	r2, #10
 80019de:	4923      	ldr	r1, [pc, #140]	; (8001a6c <menu+0x690>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00b f819 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <menu+0x690>)
 80019e8:	210e      	movs	r1, #14
 80019ea:	2002      	movs	r0, #2
 80019ec:	f7fe fee4 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <menu+0x694>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d123      	bne.n	8001a40 <menu+0x664>
			if(dilSecim == 0) {
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <menu+0x680>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001a00:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <menu+0x6b0>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7fe fed7 	bl	80007b8 <lcd_print>
 8001a0a:	e008      	b.n	8001a1e <menu+0x642>
			} else if(dilSecim == 1) {
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <menu+0x680>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d104      	bne.n	8001a1e <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001a14:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <menu+0x6b4>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7fe fecd 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <menu+0x6b8>)
 8001a20:	2110      	movs	r1, #16
 8001a22:	2002      	movs	r0, #2
 8001a24:	f7fe fec8 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <menu+0x6bc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	220a      	movs	r2, #10
 8001a2e:	490f      	ldr	r1, [pc, #60]	; (8001a6c <menu+0x690>)
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00a fff1 	bl	800ca18 <itoa>
			lcd_print(2, 15, snum);
 8001a36:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <menu+0x690>)
 8001a38:	210f      	movs	r1, #15
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f7fe febc 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <menu+0x694>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b0a      	cmp	r3, #10
 8001a46:	d134      	bne.n	8001ab2 <menu+0x6d6>
			if(dilSecim == 0) {
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <menu+0x680>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d127      	bne.n	8001aa0 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <menu+0x6c0>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	2002      	movs	r0, #2
 8001a56:	f7fe feaf 	bl	80007b8 <lcd_print>
 8001a5a:	e02a      	b.n	8001ab2 <menu+0x6d6>
 8001a5c:	20000bb2 	.word	0x20000bb2
 8001a60:	0800d7a0 	.word	0x0800d7a0
 8001a64:	0800d70c 	.word	0x0800d70c
 8001a68:	20000bb9 	.word	0x20000bb9
 8001a6c:	20000b14 	.word	0x20000b14
 8001a70:	20000b93 	.word	0x20000b93
 8001a74:	0800d7b0 	.word	0x0800d7b0
 8001a78:	0800d7c0 	.word	0x0800d7c0
 8001a7c:	20000bba 	.word	0x20000bba
 8001a80:	0800d7d0 	.word	0x0800d7d0
 8001a84:	0800d7e0 	.word	0x0800d7e0
 8001a88:	20000bbb 	.word	0x20000bbb
 8001a8c:	0800d7f0 	.word	0x0800d7f0
 8001a90:	0800d800 	.word	0x0800d800
 8001a94:	0800d810 	.word	0x0800d810
 8001a98:	20000bbc 	.word	0x20000bbc
 8001a9c:	0800d814 	.word	0x0800d814
			} else if(dilSecim == 1) {
 8001aa0:	4b82      	ldr	r3, [pc, #520]	; (8001cac <menu+0x8d0>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d104      	bne.n	8001ab2 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001aa8:	4a81      	ldr	r2, [pc, #516]	; (8001cb0 <menu+0x8d4>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2002      	movs	r0, #2
 8001aae:	f7fe fe83 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	487f      	ldr	r0, [pc, #508]	; (8001cb4 <menu+0x8d8>)
 8001ab6:	f007 ff83 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d119      	bne.n	8001af4 <menu+0x718>
 8001ac0:	4b7d      	ldr	r3, [pc, #500]	; (8001cb8 <menu+0x8dc>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f083 0301 	eor.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d012      	beq.n	8001af4 <menu+0x718>
 8001ace:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <menu+0x8e0>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10e      	bne.n	8001af4 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <menu+0x8e4>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <menu+0x8e4>)
 8001ae0:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001ae2:	4b77      	ldr	r3, [pc, #476]	; (8001cc0 <menu+0x8e4>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d902      	bls.n	8001af0 <menu+0x714>
				hataGostermeSirasi = 0;
 8001aea:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <menu+0x8e4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001af0:	f004 f992 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001af4:	2104      	movs	r1, #4
 8001af6:	486f      	ldr	r0, [pc, #444]	; (8001cb4 <menu+0x8d8>)
 8001af8:	f007 ff62 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d119      	bne.n	8001b36 <menu+0x75a>
 8001b02:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <menu+0x8dc>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	f083 0301 	eor.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d012      	beq.n	8001b36 <menu+0x75a>
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <menu+0x8e0>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10e      	bne.n	8001b36 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b18:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <menu+0x8e4>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <menu+0x8e4>)
 8001b22:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <menu+0x8e4>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b0b      	cmp	r3, #11
 8001b2a:	d902      	bls.n	8001b32 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <menu+0x8e4>)
 8001b2e:	220a      	movs	r2, #10
 8001b30:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b32:	f004 f971 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b36:	2108      	movs	r1, #8
 8001b38:	485e      	ldr	r0, [pc, #376]	; (8001cb4 <menu+0x8d8>)
 8001b3a:	f007 ff41 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d153      	bne.n	8001bec <menu+0x810>
 8001b44:	4b5c      	ldr	r3, [pc, #368]	; (8001cb8 <menu+0x8dc>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f083 0301 	eor.w	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d04c      	beq.n	8001bec <menu+0x810>
 8001b52:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <menu+0x8e4>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b0a      	cmp	r3, #10
 8001b58:	d148      	bne.n	8001bec <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <menu+0x8e8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <menu+0x8ec>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b68:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <menu+0x8f0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <menu+0x8ec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <menu+0x8f4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <menu+0x8ec>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <menu+0x8f8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <menu+0x8ec>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b92:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <menu+0x8fc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <menu+0x8ec>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001ba0:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <menu+0x900>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	4b48      	ldr	r3, [pc, #288]	; (8001cc8 <menu+0x8ec>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001bae:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <menu+0x904>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <menu+0x8ec>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001bbc:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <menu+0x908>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <menu+0x8ec>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <menu+0x90c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <menu+0x8ec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001bd8:	4b44      	ldr	r3, [pc, #272]	; (8001cec <menu+0x910>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <menu+0x8ec>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001be6:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <menu+0x914>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001bec:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <menu+0x918>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f040 80fc 	bne.w	8001dee <menu+0xa12>
		if(dilSecim == 0) {
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <menu+0x8d0>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001bfe:	4a3e      	ldr	r2, [pc, #248]	; (8001cf8 <menu+0x91c>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7fe fdd8 	bl	80007b8 <lcd_print>
 8001c08:	e008      	b.n	8001c1c <menu+0x840>
		} else if(dilSecim == 1) {
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <menu+0x8d0>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d104      	bne.n	8001c1c <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001c12:	4a3a      	ldr	r2, [pc, #232]	; (8001cfc <menu+0x920>)
 8001c14:	2101      	movs	r1, #1
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7fe fdce 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <menu+0x8e0>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d003      	beq.n	8001c2c <menu+0x850>
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <menu+0x8e0>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d112      	bne.n	8001c52 <menu+0x876>
			if(dilSecim == 0) {
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <menu+0x8d0>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001c34:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <menu+0x924>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f7fe fdbd 	bl	80007b8 <lcd_print>
 8001c3e:	e008      	b.n	8001c52 <menu+0x876>
			} else if(dilSecim == 1) {
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <menu+0x8d0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d104      	bne.n	8001c52 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001c48:	4a2e      	ldr	r2, [pc, #184]	; (8001d04 <menu+0x928>)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f7fe fdb3 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <menu+0x92c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d116      	bne.n	8001c88 <menu+0x8ac>
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <menu+0x8e0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d112      	bne.n	8001c88 <menu+0x8ac>
			if(dilSecim == 0) {
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <menu+0x8d0>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d105      	bne.n	8001c76 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <menu+0x930>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f7fe fda2 	bl	80007b8 <lcd_print>
 8001c74:	e008      	b.n	8001c88 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <menu+0x8d0>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d104      	bne.n	8001c88 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001c7e:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <menu+0x934>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	2002      	movs	r0, #2
 8001c84:	f7fe fd98 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <menu+0x92c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d14c      	bne.n	8001d2a <menu+0x94e>
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <menu+0x8e0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d148      	bne.n	8001d2a <menu+0x94e>
			if(dilSecim == 0) {
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <menu+0x8d0>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d13b      	bne.n	8001d18 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <menu+0x938>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f7fe fd87 	bl	80007b8 <lcd_print>
 8001caa:	e03e      	b.n	8001d2a <menu+0x94e>
 8001cac:	20000bb2 	.word	0x20000bb2
 8001cb0:	0800d828 	.word	0x0800d828
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	20000bc0 	.word	0x20000bc0
 8001cbc:	20000ba0 	.word	0x20000ba0
 8001cc0:	20000b93 	.word	0x20000b93
 8001cc4:	20000bb3 	.word	0x20000bb3
 8001cc8:	20000ad4 	.word	0x20000ad4
 8001ccc:	20000bb4 	.word	0x20000bb4
 8001cd0:	20000bb5 	.word	0x20000bb5
 8001cd4:	20000bb6 	.word	0x20000bb6
 8001cd8:	20000bb7 	.word	0x20000bb7
 8001cdc:	20000bb8 	.word	0x20000bb8
 8001ce0:	20000bb9 	.word	0x20000bb9
 8001ce4:	20000bba 	.word	0x20000bba
 8001ce8:	20000bbb 	.word	0x20000bbb
 8001cec:	20000bbc 	.word	0x20000bbc
 8001cf0:	20000bbd 	.word	0x20000bbd
 8001cf4:	20000b91 	.word	0x20000b91
 8001cf8:	0800d83c 	.word	0x0800d83c
 8001cfc:	0800d850 	.word	0x0800d850
 8001d00:	0800d864 	.word	0x0800d864
 8001d04:	0800d878 	.word	0x0800d878
 8001d08:	20000b92 	.word	0x20000b92
 8001d0c:	0800d88c 	.word	0x0800d88c
 8001d10:	0800d89c 	.word	0x0800d89c
 8001d14:	0800d8ac 	.word	0x0800d8ac
			} else if(dilSecim == 1) {
 8001d18:	4b98      	ldr	r3, [pc, #608]	; (8001f7c <menu+0xba0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d104      	bne.n	8001d2a <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001d20:	4a97      	ldr	r2, [pc, #604]	; (8001f80 <menu+0xba4>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	2002      	movs	r0, #2
 8001d26:	f7fe fd47 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4895      	ldr	r0, [pc, #596]	; (8001f84 <menu+0xba8>)
 8001d2e:	f007 fe47 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d119      	bne.n	8001d6c <menu+0x990>
 8001d38:	4b93      	ldr	r3, [pc, #588]	; (8001f88 <menu+0xbac>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f083 0301 	eor.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d012      	beq.n	8001d6c <menu+0x990>
 8001d46:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <menu+0xbb0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10e      	bne.n	8001d6c <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001d4e:	4b90      	ldr	r3, [pc, #576]	; (8001f90 <menu+0xbb4>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <menu+0xbb4>)
 8001d58:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001d5a:	4b8d      	ldr	r3, [pc, #564]	; (8001f90 <menu+0xbb4>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d902      	bls.n	8001d68 <menu+0x98c>
				calismaSekli = 0;
 8001d62:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <menu+0xbb4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d68:	f004 f856 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	4885      	ldr	r0, [pc, #532]	; (8001f84 <menu+0xba8>)
 8001d70:	f007 fe26 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d119      	bne.n	8001dae <menu+0x9d2>
 8001d7a:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <menu+0xbac>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	f083 0301 	eor.w	r3, r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <menu+0x9d2>
 8001d88:	4b80      	ldr	r3, [pc, #512]	; (8001f8c <menu+0xbb0>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10e      	bne.n	8001dae <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d90:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <menu+0xbb4>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b7d      	ldr	r3, [pc, #500]	; (8001f90 <menu+0xbb4>)
 8001d9a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d9c:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <menu+0xbb4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <menu+0x9ce>
	    		calismaSekli = 1;
 8001da4:	4b7a      	ldr	r3, [pc, #488]	; (8001f90 <menu+0xbb4>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001daa:	f004 f835 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dae:	2108      	movs	r1, #8
 8001db0:	4874      	ldr	r0, [pc, #464]	; (8001f84 <menu+0xba8>)
 8001db2:	f007 fe05 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d118      	bne.n	8001dee <menu+0xa12>
 8001dbc:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <menu+0xbac>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d011      	beq.n	8001dee <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001dca:	4b71      	ldr	r3, [pc, #452]	; (8001f90 <menu+0xbb4>)
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <menu+0xbb8>)
 8001dd0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <menu+0xbb4>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d106      	bne.n	8001de8 <menu+0xa0c>
				altLimit = 1;
 8001dda:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <menu+0xbbc>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001de0:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <menu+0xbbc>)
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <menu+0xbb8>)
 8001de6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001de8:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <menu+0xbc0>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <menu+0xbc4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f040 8083 	bne.w	8001efe <menu+0xb22>
		if(dilSecim == 0) {
 8001df8:	4b60      	ldr	r3, [pc, #384]	; (8001f7c <menu+0xba0>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <menu+0xbc8>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7fe fcd7 	bl	80007b8 <lcd_print>
 8001e0a:	e008      	b.n	8001e1e <menu+0xa42>
		} else if(dilSecim == 1) {
 8001e0c:	4b5b      	ldr	r3, [pc, #364]	; (8001f7c <menu+0xba0>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d104      	bne.n	8001e1e <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001e14:	4a64      	ldr	r2, [pc, #400]	; (8001fa8 <menu+0xbcc>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7fe fccd 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <menu+0xbd0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d113      	bne.n	8001e4e <menu+0xa72>
			if(dilSecim == 0) {
 8001e26:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <menu+0xba0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001e2e:	4a60      	ldr	r2, [pc, #384]	; (8001fb0 <menu+0xbd4>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	2002      	movs	r0, #2
 8001e34:	f7fe fcc0 	bl	80007b8 <lcd_print>
 8001e38:	e012      	b.n	8001e60 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001e3a:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <menu+0xba0>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10e      	bne.n	8001e60 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001e42:	4a5c      	ldr	r2, [pc, #368]	; (8001fb4 <menu+0xbd8>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	2002      	movs	r0, #2
 8001e48:	f7fe fcb6 	bl	80007b8 <lcd_print>
 8001e4c:	e008      	b.n	8001e60 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001e4e:	4b57      	ldr	r3, [pc, #348]	; (8001fac <menu+0xbd0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d104      	bne.n	8001e60 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001e56:	4a58      	ldr	r2, [pc, #352]	; (8001fb8 <menu+0xbdc>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7fe fcac 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e60:	2102      	movs	r1, #2
 8001e62:	4848      	ldr	r0, [pc, #288]	; (8001f84 <menu+0xba8>)
 8001e64:	f007 fdac 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d115      	bne.n	8001e9a <menu+0xabe>
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <menu+0xbac>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00e      	beq.n	8001e9a <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <menu+0xbd0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <menu+0xbd0>)
 8001e86:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e88:	4b48      	ldr	r3, [pc, #288]	; (8001fac <menu+0xbd0>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d902      	bls.n	8001e96 <menu+0xaba>
				emniyetCercevesi = 0;
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <menu+0xbd0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e96:	f003 ffbf 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4839      	ldr	r0, [pc, #228]	; (8001f84 <menu+0xba8>)
 8001e9e:	f007 fd8f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d115      	bne.n	8001ed4 <menu+0xaf8>
 8001ea8:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <menu+0xbac>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00e      	beq.n	8001ed4 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <menu+0xbd0>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <menu+0xbd0>)
 8001ec0:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <menu+0xbd0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <menu+0xbd0>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ed0:	f003 ffa2 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001ed4:	2108      	movs	r1, #8
 8001ed6:	482b      	ldr	r0, [pc, #172]	; (8001f84 <menu+0xba8>)
 8001ed8:	f007 fd72 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10d      	bne.n	8001efe <menu+0xb22>
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <menu+0xbac>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001ef0:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <menu+0xbd0>)
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <menu+0xbb8>)
 8001ef6:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <menu+0xbc0>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <menu+0xbc4>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	f040 80ba 	bne.w	800207c <menu+0xca0>
		if(dilSecim == 0) {
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <menu+0xba0>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001f10:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <menu+0xbe0>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7fe fc4f 	bl	80007b8 <lcd_print>
 8001f1a:	e008      	b.n	8001f2e <menu+0xb52>
		} else if(dilSecim == 1) {
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <menu+0xba0>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d104      	bne.n	8001f2e <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <menu+0xbe4>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7fe fc45 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <menu+0xbe8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d113      	bne.n	8001f5e <menu+0xb82>
			if(dilSecim == 0) {
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <menu+0xba0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <menu+0xbd4>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	2002      	movs	r0, #2
 8001f44:	f7fe fc38 	bl	80007b8 <lcd_print>
 8001f48:	e049      	b.n	8001fde <menu+0xc02>
			} else if(dilSecim == 1) {
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <menu+0xba0>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d145      	bne.n	8001fde <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001f52:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <menu+0xbd8>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	2002      	movs	r0, #2
 8001f58:	f7fe fc2e 	bl	80007b8 <lcd_print>
 8001f5c:	e03f      	b.n	8001fde <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <menu+0xbe8>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d13b      	bne.n	8001fde <menu+0xc02>
			if(dilSecim == 0) {
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <menu+0xba0>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d12e      	bne.n	8001fcc <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <menu+0xbec>)
 8001f70:	2101      	movs	r1, #1
 8001f72:	2002      	movs	r0, #2
 8001f74:	f7fe fc20 	bl	80007b8 <lcd_print>
 8001f78:	e031      	b.n	8001fde <menu+0xc02>
 8001f7a:	bf00      	nop
 8001f7c:	20000bb2 	.word	0x20000bb2
 8001f80:	0800d8bc 	.word	0x0800d8bc
 8001f84:	40010800 	.word	0x40010800
 8001f88:	20000bc0 	.word	0x20000bc0
 8001f8c:	20000ba0 	.word	0x20000ba0
 8001f90:	20000b92 	.word	0x20000b92
 8001f94:	20000ad4 	.word	0x20000ad4
 8001f98:	20000b97 	.word	0x20000b97
 8001f9c:	20000bbd 	.word	0x20000bbd
 8001fa0:	20000b91 	.word	0x20000b91
 8001fa4:	0800d8cc 	.word	0x0800d8cc
 8001fa8:	0800d8e0 	.word	0x0800d8e0
 8001fac:	20000b95 	.word	0x20000b95
 8001fb0:	0800d8f4 	.word	0x0800d8f4
 8001fb4:	0800d908 	.word	0x0800d908
 8001fb8:	0800d91c 	.word	0x0800d91c
 8001fbc:	0800d92c 	.word	0x0800d92c
 8001fc0:	0800d940 	.word	0x0800d940
 8001fc4:	20000b96 	.word	0x20000b96
 8001fc8:	0800d954 	.word	0x0800d954
			} else if(dilSecim == 1) {
 8001fcc:	4b92      	ldr	r3, [pc, #584]	; (8002218 <menu+0xe3c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d104      	bne.n	8001fde <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001fd4:	4a91      	ldr	r2, [pc, #580]	; (800221c <menu+0xe40>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2002      	movs	r0, #2
 8001fda:	f7fe fbed 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fde:	2102      	movs	r1, #2
 8001fe0:	488f      	ldr	r0, [pc, #572]	; (8002220 <menu+0xe44>)
 8001fe2:	f007 fced 	bl	80099c0 <HAL_GPIO_ReadPin>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d115      	bne.n	8002018 <menu+0xc3c>
 8001fec:	4b8d      	ldr	r3, [pc, #564]	; (8002224 <menu+0xe48>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f083 0301 	eor.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00e      	beq.n	8002018 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ffa:	4b8b      	ldr	r3, [pc, #556]	; (8002228 <menu+0xe4c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b89      	ldr	r3, [pc, #548]	; (8002228 <menu+0xe4c>)
 8002004:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <menu+0xe4c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d902      	bls.n	8002014 <menu+0xc38>
				yavaslamaLimit = 0;
 800200e:	4b86      	ldr	r3, [pc, #536]	; (8002228 <menu+0xe4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002014:	f003 ff00 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002018:	2104      	movs	r1, #4
 800201a:	4881      	ldr	r0, [pc, #516]	; (8002220 <menu+0xe44>)
 800201c:	f007 fcd0 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	d115      	bne.n	8002052 <menu+0xc76>
 8002026:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <menu+0xe48>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f083 0301 	eor.w	r3, r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00e      	beq.n	8002052 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002034:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <menu+0xe4c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <menu+0xe4c>)
 800203e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002040:	4b79      	ldr	r3, [pc, #484]	; (8002228 <menu+0xe4c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002048:	4b77      	ldr	r3, [pc, #476]	; (8002228 <menu+0xe4c>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800204e:	f003 fee3 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002052:	2108      	movs	r1, #8
 8002054:	4872      	ldr	r0, [pc, #456]	; (8002220 <menu+0xe44>)
 8002056:	f007 fcb3 	bl	80099c0 <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10d      	bne.n	800207c <menu+0xca0>
 8002060:	4b70      	ldr	r3, [pc, #448]	; (8002224 <menu+0xe48>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	f083 0301 	eor.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800206e:	4b6e      	ldr	r3, [pc, #440]	; (8002228 <menu+0xe4c>)
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	4b6e      	ldr	r3, [pc, #440]	; (800222c <menu+0xe50>)
 8002074:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002076:	4b6e      	ldr	r3, [pc, #440]	; (8002230 <menu+0xe54>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 800207c:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <menu+0xe58>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b05      	cmp	r3, #5
 8002082:	f040 80b9 	bne.w	80021f8 <menu+0xe1c>
		if(dilSecim == 0) {
 8002086:	4b64      	ldr	r3, [pc, #400]	; (8002218 <menu+0xe3c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d105      	bne.n	800209a <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800208e:	4a6a      	ldr	r2, [pc, #424]	; (8002238 <menu+0xe5c>)
 8002090:	2101      	movs	r1, #1
 8002092:	2001      	movs	r0, #1
 8002094:	f7fe fb90 	bl	80007b8 <lcd_print>
 8002098:	e008      	b.n	80020ac <menu+0xcd0>
		} else if(dilSecim == 1) {
 800209a:	4b5f      	ldr	r3, [pc, #380]	; (8002218 <menu+0xe3c>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d104      	bne.n	80020ac <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80020a2:	4a66      	ldr	r2, [pc, #408]	; (800223c <menu+0xe60>)
 80020a4:	2101      	movs	r1, #1
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7fe fb86 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 80020ac:	4b64      	ldr	r3, [pc, #400]	; (8002240 <menu+0xe64>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d113      	bne.n	80020dc <menu+0xd00>
			if(dilSecim == 0) {
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <menu+0xe3c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80020bc:	4a61      	ldr	r2, [pc, #388]	; (8002244 <menu+0xe68>)
 80020be:	2101      	movs	r1, #1
 80020c0:	2002      	movs	r0, #2
 80020c2:	f7fe fb79 	bl	80007b8 <lcd_print>
 80020c6:	e020      	b.n	800210a <menu+0xd2e>
			} else if(dilSecim == 1) {
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <menu+0xe3c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d11c      	bne.n	800210a <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80020d0:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <menu+0xe6c>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7fe fb6f 	bl	80007b8 <lcd_print>
 80020da:	e016      	b.n	800210a <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80020dc:	4b58      	ldr	r3, [pc, #352]	; (8002240 <menu+0xe64>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d112      	bne.n	800210a <menu+0xd2e>
			if(dilSecim == 0){
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <menu+0xe3c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80020ec:	4a57      	ldr	r2, [pc, #348]	; (800224c <menu+0xe70>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	2002      	movs	r0, #2
 80020f2:	f7fe fb61 	bl	80007b8 <lcd_print>
 80020f6:	e008      	b.n	800210a <menu+0xd2e>
			} else if(dilSecim == 1){
 80020f8:	4b47      	ldr	r3, [pc, #284]	; (8002218 <menu+0xe3c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d104      	bne.n	800210a <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002100:	4a46      	ldr	r2, [pc, #280]	; (800221c <menu+0xe40>)
 8002102:	2101      	movs	r1, #1
 8002104:	2002      	movs	r0, #2
 8002106:	f7fe fb57 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800210a:	2102      	movs	r1, #2
 800210c:	4844      	ldr	r0, [pc, #272]	; (8002220 <menu+0xe44>)
 800210e:	f007 fc57 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	2b01      	cmp	r3, #1
 8002116:	d119      	bne.n	800214c <menu+0xd70>
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <menu+0xe48>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f083 0301 	eor.w	r3, r3, #1
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <menu+0xd70>
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <menu+0xe74>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <menu+0xd70>
			altLimit = altLimit + 1;
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <menu+0xe64>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <menu+0xe64>)
 8002138:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <menu+0xe64>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d902      	bls.n	8002148 <menu+0xd6c>
				altLimit = 0;
 8002142:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <menu+0xe64>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002148:	f003 fe66 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800214c:	2104      	movs	r1, #4
 800214e:	4834      	ldr	r0, [pc, #208]	; (8002220 <menu+0xe44>)
 8002150:	f007 fc36 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	d119      	bne.n	800218e <menu+0xdb2>
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <menu+0xe48>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <menu+0xdb2>
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <menu+0xe74>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10e      	bne.n	800218e <menu+0xdb2>
			altLimit = altLimit - 1;
 8002170:	4b33      	ldr	r3, [pc, #204]	; (8002240 <menu+0xe64>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	3b01      	subs	r3, #1
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <menu+0xe64>)
 800217a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <menu+0xe64>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <menu+0xdae>
		   		altLimit = 1;
 8002184:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <menu+0xe64>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800218a:	f003 fe45 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800218e:	2108      	movs	r1, #8
 8002190:	4823      	ldr	r0, [pc, #140]	; (8002220 <menu+0xe44>)
 8002192:	f007 fc15 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	2b01      	cmp	r3, #1
 800219a:	d12d      	bne.n	80021f8 <menu+0xe1c>
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <menu+0xe48>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d026      	beq.n	80021f8 <menu+0xe1c>
			eepromData[5] = altLimit;
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <menu+0xe64>)
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <menu+0xe50>)
 80021b0:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <menu+0xe64>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d110      	bne.n	80021dc <menu+0xe00>
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <menu+0xe78>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <menu+0xdee>
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <menu+0xe78>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d108      	bne.n	80021dc <menu+0xe00>
				kapiTablaAcKonum = 3;
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <menu+0xe78>)
 80021cc:	2203      	movs	r2, #3
 80021ce:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <menu+0xe78>)
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <menu+0xe50>)
 80021d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80021da:	e00a      	b.n	80021f2 <menu+0xe16>
			} else if(altLimit == 0) {
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <menu+0xe64>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <menu+0xe16>
				platformSilindirTipi = 0;
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <menu+0xe7c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <menu+0xe7c>)
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <menu+0xe50>)
 80021f0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <menu+0xe54>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <menu+0xe58>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b06      	cmp	r3, #6
 80021fe:	f040 80b6 	bne.w	800236e <menu+0xf92>
		if(dilSecim == 0) {
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <menu+0xe3c>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d12a      	bne.n	8002260 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <menu+0xe80>)
 800220c:	2101      	movs	r1, #1
 800220e:	2001      	movs	r0, #1
 8002210:	f7fe fad2 	bl	80007b8 <lcd_print>
 8002214:	e02d      	b.n	8002272 <menu+0xe96>
 8002216:	bf00      	nop
 8002218:	20000bb2 	.word	0x20000bb2
 800221c:	0800d968 	.word	0x0800d968
 8002220:	40010800 	.word	0x40010800
 8002224:	20000bc0 	.word	0x20000bc0
 8002228:	20000b96 	.word	0x20000b96
 800222c:	20000ad4 	.word	0x20000ad4
 8002230:	20000bbd 	.word	0x20000bbd
 8002234:	20000b91 	.word	0x20000b91
 8002238:	0800d97c 	.word	0x0800d97c
 800223c:	0800d990 	.word	0x0800d990
 8002240:	20000b97 	.word	0x20000b97
 8002244:	0800d8f4 	.word	0x0800d8f4
 8002248:	0800d908 	.word	0x0800d908
 800224c:	0800d954 	.word	0x0800d954
 8002250:	20000b92 	.word	0x20000b92
 8002254:	20000b9e 	.word	0x20000b9e
 8002258:	20000ba4 	.word	0x20000ba4
 800225c:	0800d9a4 	.word	0x0800d9a4
		} else if(dilSecim == 1){
 8002260:	4b7a      	ldr	r3, [pc, #488]	; (800244c <menu+0x1070>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d104      	bne.n	8002272 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002268:	4a79      	ldr	r2, [pc, #484]	; (8002450 <menu+0x1074>)
 800226a:	2101      	movs	r1, #1
 800226c:	2001      	movs	r0, #1
 800226e:	f7fe faa3 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 8002272:	4b78      	ldr	r3, [pc, #480]	; (8002454 <menu+0x1078>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d113      	bne.n	80022a2 <menu+0xec6>
			if(dilSecim == 0) {
 800227a:	4b74      	ldr	r3, [pc, #464]	; (800244c <menu+0x1070>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002282:	4a75      	ldr	r2, [pc, #468]	; (8002458 <menu+0x107c>)
 8002284:	2101      	movs	r1, #1
 8002286:	2002      	movs	r0, #2
 8002288:	f7fe fa96 	bl	80007b8 <lcd_print>
 800228c:	e020      	b.n	80022d0 <menu+0xef4>
			} else if(dilSecim == 1){
 800228e:	4b6f      	ldr	r3, [pc, #444]	; (800244c <menu+0x1070>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d11c      	bne.n	80022d0 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002296:	4a71      	ldr	r2, [pc, #452]	; (800245c <menu+0x1080>)
 8002298:	2101      	movs	r1, #1
 800229a:	2002      	movs	r0, #2
 800229c:	f7fe fa8c 	bl	80007b8 <lcd_print>
 80022a0:	e016      	b.n	80022d0 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80022a2:	4b6c      	ldr	r3, [pc, #432]	; (8002454 <menu+0x1078>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d112      	bne.n	80022d0 <menu+0xef4>
			if(dilSecim == 0) {
 80022aa:	4b68      	ldr	r3, [pc, #416]	; (800244c <menu+0x1070>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80022b2:	4a6b      	ldr	r2, [pc, #428]	; (8002460 <menu+0x1084>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	2002      	movs	r0, #2
 80022b8:	f7fe fa7e 	bl	80007b8 <lcd_print>
 80022bc:	e008      	b.n	80022d0 <menu+0xef4>
			} else if(dilSecim == 1) {
 80022be:	4b63      	ldr	r3, [pc, #396]	; (800244c <menu+0x1070>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d104      	bne.n	80022d0 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80022c6:	4a67      	ldr	r2, [pc, #412]	; (8002464 <menu+0x1088>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	2002      	movs	r0, #2
 80022cc:	f7fe fa74 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d0:	2102      	movs	r1, #2
 80022d2:	4865      	ldr	r0, [pc, #404]	; (8002468 <menu+0x108c>)
 80022d4:	f007 fb74 	bl	80099c0 <HAL_GPIO_ReadPin>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d115      	bne.n	800230a <menu+0xf2e>
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <menu+0x1090>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f083 0301 	eor.w	r3, r3, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <menu+0x1078>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b57      	ldr	r3, [pc, #348]	; (8002454 <menu+0x1078>)
 80022f6:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80022f8:	4b56      	ldr	r3, [pc, #344]	; (8002454 <menu+0x1078>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d902      	bls.n	8002306 <menu+0xf2a>
				basincSalteri = 0;
 8002300:	4b54      	ldr	r3, [pc, #336]	; (8002454 <menu+0x1078>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002306:	f003 fd87 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800230a:	2104      	movs	r1, #4
 800230c:	4856      	ldr	r0, [pc, #344]	; (8002468 <menu+0x108c>)
 800230e:	f007 fb57 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d115      	bne.n	8002344 <menu+0xf68>
 8002318:	4b54      	ldr	r3, [pc, #336]	; (800246c <menu+0x1090>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f083 0301 	eor.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00e      	beq.n	8002344 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002326:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <menu+0x1078>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	3b01      	subs	r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b49      	ldr	r3, [pc, #292]	; (8002454 <menu+0x1078>)
 8002330:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002332:	4b48      	ldr	r3, [pc, #288]	; (8002454 <menu+0x1078>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <menu+0xf64>
		   		basincSalteri = 1;
 800233a:	4b46      	ldr	r3, [pc, #280]	; (8002454 <menu+0x1078>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002340:	f003 fd6a 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002344:	2108      	movs	r1, #8
 8002346:	4848      	ldr	r0, [pc, #288]	; (8002468 <menu+0x108c>)
 8002348:	f007 fb3a 	bl	80099c0 <HAL_GPIO_ReadPin>
 800234c:	4603      	mov	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10d      	bne.n	800236e <menu+0xf92>
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <menu+0x1090>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f083 0301 	eor.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002360:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <menu+0x1078>)
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <menu+0x1094>)
 8002366:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002368:	4b42      	ldr	r3, [pc, #264]	; (8002474 <menu+0x1098>)
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800236e:	4b42      	ldr	r3, [pc, #264]	; (8002478 <menu+0x109c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b07      	cmp	r3, #7
 8002374:	f040 80f5 	bne.w	8002562 <menu+0x1186>
		if(dilSecim == 0) {
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <menu+0x1070>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002380:	4a3e      	ldr	r2, [pc, #248]	; (800247c <menu+0x10a0>)
 8002382:	2101      	movs	r1, #1
 8002384:	2001      	movs	r0, #1
 8002386:	f7fe fa17 	bl	80007b8 <lcd_print>
 800238a:	e008      	b.n	800239e <menu+0xfc2>
		} else if(dilSecim == 1){
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <menu+0x1070>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d104      	bne.n	800239e <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002394:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <menu+0x10a4>)
 8002396:	2101      	movs	r1, #1
 8002398:	2001      	movs	r0, #1
 800239a:	f7fe fa0d 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <menu+0x10a8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d113      	bne.n	80023ce <menu+0xff2>
			if(dilSecim == 0) {
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <menu+0x1070>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80023ae:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <menu+0x107c>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	2002      	movs	r0, #2
 80023b4:	f7fe fa00 	bl	80007b8 <lcd_print>
 80023b8:	e079      	b.n	80024ae <menu+0x10d2>
			} else if(dilSecim == 1){
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <menu+0x1070>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d175      	bne.n	80024ae <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80023c2:	4a26      	ldr	r2, [pc, #152]	; (800245c <menu+0x1080>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	2002      	movs	r0, #2
 80023c8:	f7fe f9f6 	bl	80007b8 <lcd_print>
 80023cc:	e06f      	b.n	80024ae <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <menu+0x10a8>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d113      	bne.n	80023fe <menu+0x1022>
			if(dilSecim == 0) {
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <menu+0x1070>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80023de:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <menu+0x10ac>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	2002      	movs	r0, #2
 80023e4:	f7fe f9e8 	bl	80007b8 <lcd_print>
 80023e8:	e061      	b.n	80024ae <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <menu+0x1070>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d15d      	bne.n	80024ae <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80023f2:	4a26      	ldr	r2, [pc, #152]	; (800248c <menu+0x10b0>)
 80023f4:	2101      	movs	r1, #1
 80023f6:	2002      	movs	r0, #2
 80023f8:	f7fe f9de 	bl	80007b8 <lcd_print>
 80023fc:	e057      	b.n	80024ae <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <menu+0x10a8>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d113      	bne.n	800242e <menu+0x1052>
			if(dilSecim == 0) {
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <menu+0x1070>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800240e:	4a20      	ldr	r2, [pc, #128]	; (8002490 <menu+0x10b4>)
 8002410:	2101      	movs	r1, #1
 8002412:	2002      	movs	r0, #2
 8002414:	f7fe f9d0 	bl	80007b8 <lcd_print>
 8002418:	e049      	b.n	80024ae <menu+0x10d2>
			} else if(dilSecim == 1) {
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <menu+0x1070>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d145      	bne.n	80024ae <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002422:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <menu+0x10b8>)
 8002424:	2101      	movs	r1, #1
 8002426:	2002      	movs	r0, #2
 8002428:	f7fe f9c6 	bl	80007b8 <lcd_print>
 800242c:	e03f      	b.n	80024ae <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <menu+0x10a8>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d13b      	bne.n	80024ae <menu+0x10d2>
			if(dilSecim == 0) {
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <menu+0x1070>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d12e      	bne.n	800249c <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800243e:	4a16      	ldr	r2, [pc, #88]	; (8002498 <menu+0x10bc>)
 8002440:	2101      	movs	r1, #1
 8002442:	2002      	movs	r0, #2
 8002444:	f7fe f9b8 	bl	80007b8 <lcd_print>
 8002448:	e031      	b.n	80024ae <menu+0x10d2>
 800244a:	bf00      	nop
 800244c:	20000bb2 	.word	0x20000bb2
 8002450:	0800d9b4 	.word	0x0800d9b4
 8002454:	20000b98 	.word	0x20000b98
 8002458:	0800d8f4 	.word	0x0800d8f4
 800245c:	0800d908 	.word	0x0800d908
 8002460:	0800d954 	.word	0x0800d954
 8002464:	0800d968 	.word	0x0800d968
 8002468:	40010800 	.word	0x40010800
 800246c:	20000bc0 	.word	0x20000bc0
 8002470:	20000ad4 	.word	0x20000ad4
 8002474:	20000bbd 	.word	0x20000bbd
 8002478:	20000b91 	.word	0x20000b91
 800247c:	0800d9c4 	.word	0x0800d9c4
 8002480:	0800d9d8 	.word	0x0800d9d8
 8002484:	20000b99 	.word	0x20000b99
 8002488:	0800d9ec 	.word	0x0800d9ec
 800248c:	0800da00 	.word	0x0800da00
 8002490:	0800da14 	.word	0x0800da14
 8002494:	0800da28 	.word	0x0800da28
 8002498:	0800da3c 	.word	0x0800da3c
			} else if(dilSecim == 1){
 800249c:	4b99      	ldr	r3, [pc, #612]	; (8002704 <menu+0x1328>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d104      	bne.n	80024ae <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80024a4:	4a98      	ldr	r2, [pc, #608]	; (8002708 <menu+0x132c>)
 80024a6:	2101      	movs	r1, #1
 80024a8:	2002      	movs	r0, #2
 80024aa:	f7fe f985 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ae:	2102      	movs	r1, #2
 80024b0:	4896      	ldr	r0, [pc, #600]	; (800270c <menu+0x1330>)
 80024b2:	f007 fa85 	bl	80099c0 <HAL_GPIO_ReadPin>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d115      	bne.n	80024e8 <menu+0x110c>
 80024bc:	4b94      	ldr	r3, [pc, #592]	; (8002710 <menu+0x1334>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f083 0301 	eor.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00e      	beq.n	80024e8 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80024ca:	4b92      	ldr	r3, [pc, #584]	; (8002714 <menu+0x1338>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b90      	ldr	r3, [pc, #576]	; (8002714 <menu+0x1338>)
 80024d4:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80024d6:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <menu+0x1338>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d902      	bls.n	80024e4 <menu+0x1108>
				kapiSecimleri = 0;
 80024de:	4b8d      	ldr	r3, [pc, #564]	; (8002714 <menu+0x1338>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024e4:	f003 fc98 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024e8:	2104      	movs	r1, #4
 80024ea:	4888      	ldr	r0, [pc, #544]	; (800270c <menu+0x1330>)
 80024ec:	f007 fa68 	bl	80099c0 <HAL_GPIO_ReadPin>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d115      	bne.n	8002522 <menu+0x1146>
 80024f6:	4b86      	ldr	r3, [pc, #536]	; (8002710 <menu+0x1334>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f083 0301 	eor.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00e      	beq.n	8002522 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002504:	4b83      	ldr	r3, [pc, #524]	; (8002714 <menu+0x1338>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	3b01      	subs	r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b81      	ldr	r3, [pc, #516]	; (8002714 <menu+0x1338>)
 800250e:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002510:	4b80      	ldr	r3, [pc, #512]	; (8002714 <menu+0x1338>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d902      	bls.n	800251e <menu+0x1142>
		   		kapiSecimleri = 3;
 8002518:	4b7e      	ldr	r3, [pc, #504]	; (8002714 <menu+0x1338>)
 800251a:	2203      	movs	r2, #3
 800251c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800251e:	f003 fc7b 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002522:	2108      	movs	r1, #8
 8002524:	4879      	ldr	r0, [pc, #484]	; (800270c <menu+0x1330>)
 8002526:	f007 fa4b 	bl	80099c0 <HAL_GPIO_ReadPin>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d118      	bne.n	8002562 <menu+0x1186>
 8002530:	4b77      	ldr	r3, [pc, #476]	; (8002710 <menu+0x1334>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d011      	beq.n	8002562 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800253e:	4b75      	ldr	r3, [pc, #468]	; (8002714 <menu+0x1338>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	4b75      	ldr	r3, [pc, #468]	; (8002718 <menu+0x133c>)
 8002544:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002546:	4b73      	ldr	r3, [pc, #460]	; (8002714 <menu+0x1338>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <menu+0x1180>
				altLimit = 1;
 800254e:	4b73      	ldr	r3, [pc, #460]	; (800271c <menu+0x1340>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002554:	4b71      	ldr	r3, [pc, #452]	; (800271c <menu+0x1340>)
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <menu+0x133c>)
 800255a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800255c:	4b70      	ldr	r3, [pc, #448]	; (8002720 <menu+0x1344>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002562:	4b70      	ldr	r3, [pc, #448]	; (8002724 <menu+0x1348>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b08      	cmp	r3, #8
 8002568:	f040 8092 	bne.w	8002690 <menu+0x12b4>
		if(dilSecim == 0) {
 800256c:	4b65      	ldr	r3, [pc, #404]	; (8002704 <menu+0x1328>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002574:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <menu+0x134c>)
 8002576:	2101      	movs	r1, #1
 8002578:	2001      	movs	r0, #1
 800257a:	f7fe f91d 	bl	80007b8 <lcd_print>
 800257e:	e008      	b.n	8002592 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002580:	4b60      	ldr	r3, [pc, #384]	; (8002704 <menu+0x1328>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d104      	bne.n	8002592 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002588:	4a68      	ldr	r2, [pc, #416]	; (800272c <menu+0x1350>)
 800258a:	2101      	movs	r1, #1
 800258c:	2001      	movs	r0, #1
 800258e:	f7fe f913 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <menu+0x1354>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d113      	bne.n	80025c2 <menu+0x11e6>
			if(dilSecim == 0) {
 800259a:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <menu+0x1328>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80025a2:	4a64      	ldr	r2, [pc, #400]	; (8002734 <menu+0x1358>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	2002      	movs	r0, #2
 80025a8:	f7fe f906 	bl	80007b8 <lcd_print>
 80025ac:	e020      	b.n	80025f0 <menu+0x1214>
			} else if(dilSecim == 1) {
 80025ae:	4b55      	ldr	r3, [pc, #340]	; (8002704 <menu+0x1328>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d11c      	bne.n	80025f0 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80025b6:	4a60      	ldr	r2, [pc, #384]	; (8002738 <menu+0x135c>)
 80025b8:	2101      	movs	r1, #1
 80025ba:	2002      	movs	r0, #2
 80025bc:	f7fe f8fc 	bl	80007b8 <lcd_print>
 80025c0:	e016      	b.n	80025f0 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80025c2:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <menu+0x1354>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d112      	bne.n	80025f0 <menu+0x1214>
			if(dilSecim == 0){
 80025ca:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <menu+0x1328>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80025d2:	4a5a      	ldr	r2, [pc, #360]	; (800273c <menu+0x1360>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	2002      	movs	r0, #2
 80025d8:	f7fe f8ee 	bl	80007b8 <lcd_print>
 80025dc:	e008      	b.n	80025f0 <menu+0x1214>
			} else if(dilSecim == 1){
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <menu+0x1328>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d104      	bne.n	80025f0 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80025e6:	4a56      	ldr	r2, [pc, #344]	; (8002740 <menu+0x1364>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	2002      	movs	r0, #2
 80025ec:	f7fe f8e4 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025f0:	2102      	movs	r1, #2
 80025f2:	4846      	ldr	r0, [pc, #280]	; (800270c <menu+0x1330>)
 80025f4:	f007 f9e4 	bl	80099c0 <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d115      	bne.n	800262a <menu+0x124e>
 80025fe:	4b44      	ldr	r3, [pc, #272]	; (8002710 <menu+0x1334>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 800260c:	4b48      	ldr	r3, [pc, #288]	; (8002730 <menu+0x1354>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b46      	ldr	r3, [pc, #280]	; (8002730 <menu+0x1354>)
 8002616:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002618:	4b45      	ldr	r3, [pc, #276]	; (8002730 <menu+0x1354>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d902      	bls.n	8002626 <menu+0x124a>
				kapiAcTipi = 0;
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <menu+0x1354>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002626:	f003 fbf7 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800262a:	2104      	movs	r1, #4
 800262c:	4837      	ldr	r0, [pc, #220]	; (800270c <menu+0x1330>)
 800262e:	f007 f9c7 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d115      	bne.n	8002664 <menu+0x1288>
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <menu+0x1334>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	f083 0301 	eor.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00e      	beq.n	8002664 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <menu+0x1354>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3b01      	subs	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <menu+0x1354>)
 8002650:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <menu+0x1354>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <menu+0x1284>
		   		kapiAcTipi = 1;
 800265a:	4b35      	ldr	r3, [pc, #212]	; (8002730 <menu+0x1354>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002660:	f003 fbda 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002664:	2108      	movs	r1, #8
 8002666:	4829      	ldr	r0, [pc, #164]	; (800270c <menu+0x1330>)
 8002668:	f007 f9aa 	bl	80099c0 <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d10e      	bne.n	8002690 <menu+0x12b4>
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <menu+0x1334>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002680:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <menu+0x1354>)
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <menu+0x133c>)
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <menu+0x1344>)
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <menu+0x1348>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b09      	cmp	r3, #9
 8002696:	f040 80b9 	bne.w	800280c <menu+0x1430>
		if(dilSecim == 0){
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <menu+0x1328>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80026a2:	4a28      	ldr	r2, [pc, #160]	; (8002744 <menu+0x1368>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	2001      	movs	r0, #1
 80026a8:	f7fe f886 	bl	80007b8 <lcd_print>
 80026ac:	e008      	b.n	80026c0 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <menu+0x1328>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d104      	bne.n	80026c0 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80026b6:	4a24      	ldr	r2, [pc, #144]	; (8002748 <menu+0x136c>)
 80026b8:	2101      	movs	r1, #1
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7fe f87c 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <menu+0x1370>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80026c8:	4a21      	ldr	r2, [pc, #132]	; (8002750 <menu+0x1374>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	2002      	movs	r0, #2
 80026ce:	f7fe f873 	bl	80007b8 <lcd_print>
 80026d2:	e04c      	b.n	800276e <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <menu+0x1370>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d13f      	bne.n	800275c <menu+0x1380>
			if(dilSecim == 0){
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <menu+0x1328>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <menu+0x1378>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	2002      	movs	r0, #2
 80026ea:	f7fe f865 	bl	80007b8 <lcd_print>
 80026ee:	e03e      	b.n	800276e <menu+0x1392>
			} else if(dilSecim == 1) {
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <menu+0x1328>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d13a      	bne.n	800276e <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <menu+0x137c>)
 80026fa:	2101      	movs	r1, #1
 80026fc:	2002      	movs	r0, #2
 80026fe:	f7fe f85b 	bl	80007b8 <lcd_print>
 8002702:	e034      	b.n	800276e <menu+0x1392>
 8002704:	20000bb2 	.word	0x20000bb2
 8002708:	0800da50 	.word	0x0800da50
 800270c:	40010800 	.word	0x40010800
 8002710:	20000bc0 	.word	0x20000bc0
 8002714:	20000b99 	.word	0x20000b99
 8002718:	20000ad4 	.word	0x20000ad4
 800271c:	20000b97 	.word	0x20000b97
 8002720:	20000bbd 	.word	0x20000bbd
 8002724:	20000b91 	.word	0x20000b91
 8002728:	0800da64 	.word	0x0800da64
 800272c:	0800da78 	.word	0x0800da78
 8002730:	20000b9d 	.word	0x20000b9d
 8002734:	0800da8c 	.word	0x0800da8c
 8002738:	0800da9c 	.word	0x0800da9c
 800273c:	0800daac 	.word	0x0800daac
 8002740:	0800dac0 	.word	0x0800dac0
 8002744:	0800dad4 	.word	0x0800dad4
 8002748:	0800dae8 	.word	0x0800dae8
 800274c:	20000b9a 	.word	0x20000b9a
 8002750:	0800dafc 	.word	0x0800dafc
 8002754:	0800db10 	.word	0x0800db10
 8002758:	0800db20 	.word	0x0800db20
			}
		} else if(kapi1Tip == 2) {
 800275c:	4b8a      	ldr	r3, [pc, #552]	; (8002988 <menu+0x15ac>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d104      	bne.n	800276e <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002764:	4a89      	ldr	r2, [pc, #548]	; (800298c <menu+0x15b0>)
 8002766:	2101      	movs	r1, #1
 8002768:	2002      	movs	r0, #2
 800276a:	f7fe f825 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800276e:	2102      	movs	r1, #2
 8002770:	4887      	ldr	r0, [pc, #540]	; (8002990 <menu+0x15b4>)
 8002772:	f007 f925 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d115      	bne.n	80027a8 <menu+0x13cc>
 800277c:	4b85      	ldr	r3, [pc, #532]	; (8002994 <menu+0x15b8>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00e      	beq.n	80027a8 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800278a:	4b7f      	ldr	r3, [pc, #508]	; (8002988 <menu+0x15ac>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b7d      	ldr	r3, [pc, #500]	; (8002988 <menu+0x15ac>)
 8002794:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002796:	4b7c      	ldr	r3, [pc, #496]	; (8002988 <menu+0x15ac>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d902      	bls.n	80027a4 <menu+0x13c8>
				kapi1Tip = 0;
 800279e:	4b7a      	ldr	r3, [pc, #488]	; (8002988 <menu+0x15ac>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027a4:	f003 fb38 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a8:	2104      	movs	r1, #4
 80027aa:	4879      	ldr	r0, [pc, #484]	; (8002990 <menu+0x15b4>)
 80027ac:	f007 f908 	bl	80099c0 <HAL_GPIO_ReadPin>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d115      	bne.n	80027e2 <menu+0x1406>
 80027b6:	4b77      	ldr	r3, [pc, #476]	; (8002994 <menu+0x15b8>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	f083 0301 	eor.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00e      	beq.n	80027e2 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80027c4:	4b70      	ldr	r3, [pc, #448]	; (8002988 <menu+0x15ac>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	4b6e      	ldr	r3, [pc, #440]	; (8002988 <menu+0x15ac>)
 80027ce:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80027d0:	4b6d      	ldr	r3, [pc, #436]	; (8002988 <menu+0x15ac>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d902      	bls.n	80027de <menu+0x1402>
		   		kapi1Tip = 2;
 80027d8:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <menu+0x15ac>)
 80027da:	2202      	movs	r2, #2
 80027dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027de:	f003 fb1b 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e2:	2108      	movs	r1, #8
 80027e4:	486a      	ldr	r0, [pc, #424]	; (8002990 <menu+0x15b4>)
 80027e6:	f007 f8eb 	bl	80099c0 <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10d      	bne.n	800280c <menu+0x1430>
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <menu+0x15b8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	f083 0301 	eor.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80027fe:	4b62      	ldr	r3, [pc, #392]	; (8002988 <menu+0x15ac>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <menu+0x15bc>)
 8002804:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <menu+0x15c0>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 800280c:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <menu+0x15c4>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b0a      	cmp	r3, #10
 8002812:	d17f      	bne.n	8002914 <menu+0x1538>
		if(dilSecim == 0) {
 8002814:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <menu+0x15c8>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 800281c:	4a62      	ldr	r2, [pc, #392]	; (80029a8 <menu+0x15cc>)
 800281e:	2101      	movs	r1, #1
 8002820:	2001      	movs	r0, #1
 8002822:	f7fd ffc9 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002826:	4a61      	ldr	r2, [pc, #388]	; (80029ac <menu+0x15d0>)
 8002828:	2101      	movs	r1, #1
 800282a:	2002      	movs	r0, #2
 800282c:	f7fd ffc4 	bl	80007b8 <lcd_print>
 8002830:	e00d      	b.n	800284e <menu+0x1472>
		} else if(dilSecim == 1) {
 8002832:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <menu+0x15c8>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d109      	bne.n	800284e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800283a:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <menu+0x15d4>)
 800283c:	2101      	movs	r1, #1
 800283e:	2001      	movs	r0, #1
 8002840:	f7fd ffba 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002844:	4a5b      	ldr	r2, [pc, #364]	; (80029b4 <menu+0x15d8>)
 8002846:	2101      	movs	r1, #1
 8002848:	2002      	movs	r0, #2
 800284a:	f7fd ffb5 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800284e:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <menu+0x15dc>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	220a      	movs	r2, #10
 8002854:	4959      	ldr	r1, [pc, #356]	; (80029bc <menu+0x15e0>)
 8002856:	4618      	mov	r0, r3
 8002858:	f00a f8de 	bl	800ca18 <itoa>
		lcd_print(2,16,snum);
 800285c:	4a57      	ldr	r2, [pc, #348]	; (80029bc <menu+0x15e0>)
 800285e:	2110      	movs	r1, #16
 8002860:	2002      	movs	r0, #2
 8002862:	f7fd ffa9 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002866:	2102      	movs	r1, #2
 8002868:	4849      	ldr	r0, [pc, #292]	; (8002990 <menu+0x15b4>)
 800286a:	f007 f8a9 	bl	80099c0 <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	d119      	bne.n	80028a8 <menu+0x14cc>
 8002874:	4b47      	ldr	r3, [pc, #284]	; (8002994 <menu+0x15b8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f083 0301 	eor.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <menu+0x14cc>
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <menu+0x15ac>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10e      	bne.n	80028a8 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800288a:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <menu+0x15dc>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <menu+0x15dc>)
 8002894:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002896:	4b48      	ldr	r3, [pc, #288]	; (80029b8 <menu+0x15dc>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d902      	bls.n	80028a4 <menu+0x14c8>
				kapi1AcSure = 0;
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <menu+0x15dc>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028a4:	f003 fab8 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80028a8:	2104      	movs	r1, #4
 80028aa:	4839      	ldr	r0, [pc, #228]	; (8002990 <menu+0x15b4>)
 80028ac:	f007 f888 	bl	80099c0 <HAL_GPIO_ReadPin>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d119      	bne.n	80028ea <menu+0x150e>
 80028b6:	4b37      	ldr	r3, [pc, #220]	; (8002994 <menu+0x15b8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	f083 0301 	eor.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d012      	beq.n	80028ea <menu+0x150e>
 80028c4:	4b30      	ldr	r3, [pc, #192]	; (8002988 <menu+0x15ac>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10e      	bne.n	80028ea <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80028cc:	4b3a      	ldr	r3, [pc, #232]	; (80029b8 <menu+0x15dc>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <menu+0x15dc>)
 80028d6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80028d8:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <menu+0x15dc>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d902      	bls.n	80028e6 <menu+0x150a>
		   		kapi1AcSure = 5;
 80028e0:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <menu+0x15dc>)
 80028e2:	2205      	movs	r2, #5
 80028e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028e6:	f003 fa97 	bl	8005e18 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028ea:	2108      	movs	r1, #8
 80028ec:	4828      	ldr	r0, [pc, #160]	; (8002990 <menu+0x15b4>)
 80028ee:	f007 f867 	bl	80099c0 <HAL_GPIO_ReadPin>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d10d      	bne.n	8002914 <menu+0x1538>
 80028f8:	4b26      	ldr	r3, [pc, #152]	; (8002994 <menu+0x15b8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	f083 0301 	eor.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <menu+0x15dc>)
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <menu+0x15bc>)
 800290c:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <menu+0x15c0>)
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <menu+0x15c4>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b0b      	cmp	r3, #11
 800291a:	f040 80b5 	bne.w	8002a88 <menu+0x16ac>
		if(dilSecim == 0) {
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <menu+0x15c8>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002926:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <menu+0x15e4>)
 8002928:	2101      	movs	r1, #1
 800292a:	2001      	movs	r0, #1
 800292c:	f7fd ff44 	bl	80007b8 <lcd_print>
 8002930:	e008      	b.n	8002944 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <menu+0x15c8>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d104      	bne.n	8002944 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <menu+0x15e8>)
 800293c:	2101      	movs	r1, #1
 800293e:	2001      	movs	r0, #1
 8002940:	f7fd ff3a 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <menu+0x15ec>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <menu+0x15f0>)
 800294e:	2101      	movs	r1, #1
 8002950:	2002      	movs	r0, #2
 8002952:	f7fd ff31 	bl	80007b8 <lcd_print>
 8002956:	e048      	b.n	80029ea <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <menu+0x15ec>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d13b      	bne.n	80029d8 <menu+0x15fc>
			if(dilSecim == 0) {
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <menu+0x15c8>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <menu+0x15f4>)
 800296a:	2101      	movs	r1, #1
 800296c:	2002      	movs	r0, #2
 800296e:	f7fd ff23 	bl	80007b8 <lcd_print>
 8002972:	e03a      	b.n	80029ea <menu+0x160e>
			} else if(dilSecim == 1) {
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <menu+0x15c8>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d136      	bne.n	80029ea <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 800297c:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <menu+0x15f8>)
 800297e:	2101      	movs	r1, #1
 8002980:	2002      	movs	r0, #2
 8002982:	f7fd ff19 	bl	80007b8 <lcd_print>
 8002986:	e030      	b.n	80029ea <menu+0x160e>
 8002988:	20000b9a 	.word	0x20000b9a
 800298c:	0800db34 	.word	0x0800db34
 8002990:	40010800 	.word	0x40010800
 8002994:	20000bc0 	.word	0x20000bc0
 8002998:	20000ad4 	.word	0x20000ad4
 800299c:	20000bbd 	.word	0x20000bbd
 80029a0:	20000b91 	.word	0x20000b91
 80029a4:	20000bb2 	.word	0x20000bb2
 80029a8:	0800db44 	.word	0x0800db44
 80029ac:	0800db58 	.word	0x0800db58
 80029b0:	0800db68 	.word	0x0800db68
 80029b4:	0800db7c 	.word	0x0800db7c
 80029b8:	20000baa 	.word	0x20000baa
 80029bc:	20000b14 	.word	0x20000b14
 80029c0:	0800db8c 	.word	0x0800db8c
 80029c4:	0800dba0 	.word	0x0800dba0
 80029c8:	20000b9b 	.word	0x20000b9b
 80029cc:	0800dafc 	.word	0x0800dafc
 80029d0:	0800db10 	.word	0x0800db10
 80029d4:	0800db20 	.word	0x0800db20
			}
		} else if(kapi2Tip == 2) {
 80029d8:	4b8a      	ldr	r3, [pc, #552]	; (8002c04 <menu+0x1828>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d104      	bne.n	80029ea <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80029e0:	4a89      	ldr	r2, [pc, #548]	; (8002c08 <menu+0x182c>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	2002      	movs	r0, #2
 80029e6:	f7fd fee7 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ea:	2102      	movs	r1, #2
 80029ec:	4887      	ldr	r0, [pc, #540]	; (8002c0c <menu+0x1830>)
 80029ee:	f006 ffe7 	bl	80099c0 <HAL_GPIO_ReadPin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d115      	bne.n	8002a24 <menu+0x1648>
 80029f8:	4b85      	ldr	r3, [pc, #532]	; (8002c10 <menu+0x1834>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002a06:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <menu+0x1828>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4b7d      	ldr	r3, [pc, #500]	; (8002c04 <menu+0x1828>)
 8002a10:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002a12:	4b7c      	ldr	r3, [pc, #496]	; (8002c04 <menu+0x1828>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <menu+0x1644>
				kapi2Tip = 0;
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <menu+0x1828>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a20:	f003 f9fa 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a24:	2104      	movs	r1, #4
 8002a26:	4879      	ldr	r0, [pc, #484]	; (8002c0c <menu+0x1830>)
 8002a28:	f006 ffca 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d115      	bne.n	8002a5e <menu+0x1682>
 8002a32:	4b77      	ldr	r3, [pc, #476]	; (8002c10 <menu+0x1834>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	f083 0301 	eor.w	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002a40:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <menu+0x1828>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b6e      	ldr	r3, [pc, #440]	; (8002c04 <menu+0x1828>)
 8002a4a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002a4c:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <menu+0x1828>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d902      	bls.n	8002a5a <menu+0x167e>
		   		kapi2Tip = 2;
 8002a54:	4b6b      	ldr	r3, [pc, #428]	; (8002c04 <menu+0x1828>)
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a5a:	f003 f9dd 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a5e:	2108      	movs	r1, #8
 8002a60:	486a      	ldr	r0, [pc, #424]	; (8002c0c <menu+0x1830>)
 8002a62:	f006 ffad 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10d      	bne.n	8002a88 <menu+0x16ac>
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <menu+0x1834>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002a7a:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <menu+0x1828>)
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <menu+0x1838>)
 8002a80:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002a82:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <menu+0x183c>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002a88:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <menu+0x1840>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d17f      	bne.n	8002b90 <menu+0x17b4>
		if(dilSecim == 0) {
 8002a90:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <menu+0x1844>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a98:	4a62      	ldr	r2, [pc, #392]	; (8002c24 <menu+0x1848>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f7fd fe8b 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002aa2:	4a61      	ldr	r2, [pc, #388]	; (8002c28 <menu+0x184c>)
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	f7fd fe86 	bl	80007b8 <lcd_print>
 8002aac:	e00d      	b.n	8002aca <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002aae:	4b5c      	ldr	r3, [pc, #368]	; (8002c20 <menu+0x1844>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d109      	bne.n	8002aca <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002ab6:	4a5d      	ldr	r2, [pc, #372]	; (8002c2c <menu+0x1850>)
 8002ab8:	2101      	movs	r1, #1
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7fd fe7c 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ac0:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <menu+0x1854>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f7fd fe77 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002aca:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <menu+0x1858>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	220a      	movs	r2, #10
 8002ad0:	4959      	ldr	r1, [pc, #356]	; (8002c38 <menu+0x185c>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f009 ffa0 	bl	800ca18 <itoa>
		lcd_print(2,16,snum);
 8002ad8:	4a57      	ldr	r2, [pc, #348]	; (8002c38 <menu+0x185c>)
 8002ada:	2110      	movs	r1, #16
 8002adc:	2002      	movs	r0, #2
 8002ade:	f7fd fe6b 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	4849      	ldr	r0, [pc, #292]	; (8002c0c <menu+0x1830>)
 8002ae6:	f006 ff6b 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d119      	bne.n	8002b24 <menu+0x1748>
 8002af0:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <menu+0x1834>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	f083 0301 	eor.w	r3, r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <menu+0x1748>
 8002afe:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <menu+0x1828>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10e      	bne.n	8002b24 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002b06:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <menu+0x1858>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <menu+0x1858>)
 8002b10:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002b12:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <menu+0x1858>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d902      	bls.n	8002b20 <menu+0x1744>
				kapi2AcSure = 0;
 8002b1a:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <menu+0x1858>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b20:	f003 f97a 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b24:	2104      	movs	r1, #4
 8002b26:	4839      	ldr	r0, [pc, #228]	; (8002c0c <menu+0x1830>)
 8002b28:	f006 ff4a 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d119      	bne.n	8002b66 <menu+0x178a>
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <menu+0x1834>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	f083 0301 	eor.w	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d012      	beq.n	8002b66 <menu+0x178a>
 8002b40:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <menu+0x1828>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10e      	bne.n	8002b66 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002b48:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <menu+0x1858>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <menu+0x1858>)
 8002b52:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002b54:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <menu+0x1858>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d902      	bls.n	8002b62 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002b5c:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <menu+0x1858>)
 8002b5e:	2205      	movs	r2, #5
 8002b60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b62:	f003 f959 	bl	8005e18 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b66:	2108      	movs	r1, #8
 8002b68:	4828      	ldr	r0, [pc, #160]	; (8002c0c <menu+0x1830>)
 8002b6a:	f006 ff29 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d10d      	bne.n	8002b90 <menu+0x17b4>
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <menu+0x1834>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	f083 0301 	eor.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d006      	beq.n	8002b90 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <menu+0x1858>)
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <menu+0x1838>)
 8002b88:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <menu+0x183c>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b90:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <menu+0x1840>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b0d      	cmp	r3, #13
 8002b96:	f040 80b5 	bne.w	8002d04 <menu+0x1928>
		if(dilSecim == 0) {
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <menu+0x1844>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002ba2:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <menu+0x1860>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f7fd fe06 	bl	80007b8 <lcd_print>
 8002bac:	e008      	b.n	8002bc0 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <menu+0x1844>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d104      	bne.n	8002bc0 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <menu+0x1864>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f7fd fdfc 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002bc0:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <menu+0x1868>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <menu+0x186c>)
 8002bca:	2101      	movs	r1, #1
 8002bcc:	2002      	movs	r0, #2
 8002bce:	f7fd fdf3 	bl	80007b8 <lcd_print>
 8002bd2:	e048      	b.n	8002c66 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <menu+0x1868>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d13b      	bne.n	8002c54 <menu+0x1878>
			if(dilSecim == 0) {
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <menu+0x1844>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002be4:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <menu+0x1870>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	2002      	movs	r0, #2
 8002bea:	f7fd fde5 	bl	80007b8 <lcd_print>
 8002bee:	e03a      	b.n	8002c66 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <menu+0x1844>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d136      	bne.n	8002c66 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <menu+0x1874>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	f7fd fddb 	bl	80007b8 <lcd_print>
 8002c02:	e030      	b.n	8002c66 <menu+0x188a>
 8002c04:	20000b9b 	.word	0x20000b9b
 8002c08:	0800db34 	.word	0x0800db34
 8002c0c:	40010800 	.word	0x40010800
 8002c10:	20000bc0 	.word	0x20000bc0
 8002c14:	20000ad4 	.word	0x20000ad4
 8002c18:	20000bbd 	.word	0x20000bbd
 8002c1c:	20000b91 	.word	0x20000b91
 8002c20:	20000bb2 	.word	0x20000bb2
 8002c24:	0800dbb4 	.word	0x0800dbb4
 8002c28:	0800db58 	.word	0x0800db58
 8002c2c:	0800dbc8 	.word	0x0800dbc8
 8002c30:	0800db7c 	.word	0x0800db7c
 8002c34:	20000bab 	.word	0x20000bab
 8002c38:	20000b14 	.word	0x20000b14
 8002c3c:	0800dbdc 	.word	0x0800dbdc
 8002c40:	0800dbf0 	.word	0x0800dbf0
 8002c44:	20000b9c 	.word	0x20000b9c
 8002c48:	0800dafc 	.word	0x0800dafc
 8002c4c:	0800db10 	.word	0x0800db10
 8002c50:	0800db20 	.word	0x0800db20
			}
		} else if(kapitablaTip == 2) {
 8002c54:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <menu+0x19e8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d104      	bne.n	8002c66 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002c5c:	4a5a      	ldr	r2, [pc, #360]	; (8002dc8 <menu+0x19ec>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	2002      	movs	r0, #2
 8002c62:	f7fd fda9 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c66:	2102      	movs	r1, #2
 8002c68:	4858      	ldr	r0, [pc, #352]	; (8002dcc <menu+0x19f0>)
 8002c6a:	f006 fea9 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d115      	bne.n	8002ca0 <menu+0x18c4>
 8002c74:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <menu+0x19f4>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	f083 0301 	eor.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00e      	beq.n	8002ca0 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002c82:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <menu+0x19e8>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <menu+0x19e8>)
 8002c8c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	; (8002dc4 <menu+0x19e8>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <menu+0x18c0>
				kapitablaTip = 0;
 8002c96:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <menu+0x19e8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c9c:	f003 f8bc 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	484a      	ldr	r0, [pc, #296]	; (8002dcc <menu+0x19f0>)
 8002ca4:	f006 fe8c 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d115      	bne.n	8002cda <menu+0x18fe>
 8002cae:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <menu+0x19f4>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f083 0301 	eor.w	r3, r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <menu+0x19e8>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <menu+0x19e8>)
 8002cc6:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002cc8:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <menu+0x19e8>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d902      	bls.n	8002cd6 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002cd0:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <menu+0x19e8>)
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cd6:	f003 f89f 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cda:	2108      	movs	r1, #8
 8002cdc:	483b      	ldr	r0, [pc, #236]	; (8002dcc <menu+0x19f0>)
 8002cde:	f006 fe6f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10d      	bne.n	8002d04 <menu+0x1928>
 8002ce8:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <menu+0x19f4>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	f083 0301 	eor.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002cf6:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <menu+0x19e8>)
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <menu+0x19f8>)
 8002cfc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002cfe:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <menu+0x19fc>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002d04:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <menu+0x1a00>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b0e      	cmp	r3, #14
 8002d0a:	f040 80f2 	bne.w	8002ef2 <menu+0x1b16>
		if(dilSecim == 0) {
 8002d0e:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <menu+0x1a04>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002d16:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <menu+0x1a08>)
 8002d18:	2101      	movs	r1, #1
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fd fd4c 	bl	80007b8 <lcd_print>
 8002d20:	e008      	b.n	8002d34 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <menu+0x1a04>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d104      	bne.n	8002d34 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002d2a:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <menu+0x1a0c>)
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f7fd fd42 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <menu+0x1a10>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d113      	bne.n	8002d64 <menu+0x1988>
			if(dilSecim == 0){
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <menu+0x1a04>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <menu+0x1a14>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	2002      	movs	r0, #2
 8002d4a:	f7fd fd35 	bl	80007b8 <lcd_print>
 8002d4e:	e071      	b.n	8002e34 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d50:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <menu+0x1a04>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d16d      	bne.n	8002e34 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <menu+0x1a18>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	f7fd fd2b 	bl	80007b8 <lcd_print>
 8002d62:	e067      	b.n	8002e34 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <menu+0x1a10>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d112      	bne.n	8002d92 <menu+0x19b6>
			if(dilSecim == 0){
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <menu+0x1a04>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002d74:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <menu+0x1a1c>)
 8002d76:	2101      	movs	r1, #1
 8002d78:	2002      	movs	r0, #2
 8002d7a:	f7fd fd1d 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <menu+0x1a04>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d156      	bne.n	8002e34 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002d86:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <menu+0x1a20>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2002      	movs	r0, #2
 8002d8c:	f7fd fd14 	bl	80007b8 <lcd_print>
 8002d90:	e050      	b.n	8002e34 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <menu+0x1a10>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d136      	bne.n	8002e08 <menu+0x1a2c>
			if(dilSecim == 0){
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <menu+0x1a04>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002da2:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <menu+0x1a24>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fd fd06 	bl	80007b8 <lcd_print>
 8002dac:	e042      	b.n	8002e34 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <menu+0x1a04>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d13e      	bne.n	8002e34 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002db6:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <menu+0x1a28>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2002      	movs	r0, #2
 8002dbc:	f7fd fcfc 	bl	80007b8 <lcd_print>
 8002dc0:	e038      	b.n	8002e34 <menu+0x1a58>
 8002dc2:	bf00      	nop
 8002dc4:	20000b9c 	.word	0x20000b9c
 8002dc8:	0800db34 	.word	0x0800db34
 8002dcc:	40010800 	.word	0x40010800
 8002dd0:	20000bc0 	.word	0x20000bc0
 8002dd4:	20000ad4 	.word	0x20000ad4
 8002dd8:	20000bbd 	.word	0x20000bbd
 8002ddc:	20000b91 	.word	0x20000b91
 8002de0:	20000bb2 	.word	0x20000bb2
 8002de4:	0800dc04 	.word	0x0800dc04
 8002de8:	0800dc18 	.word	0x0800dc18
 8002dec:	20000b9e 	.word	0x20000b9e
 8002df0:	0800dc2c 	.word	0x0800dc2c
 8002df4:	0800dc3c 	.word	0x0800dc3c
 8002df8:	0800dc4c 	.word	0x0800dc4c
 8002dfc:	0800dc5c 	.word	0x0800dc5c
 8002e00:	0800dc6c 	.word	0x0800dc6c
 8002e04:	0800dc80 	.word	0x0800dc80
			}
		} else if(kapiTablaAcKonum == 3) {
 8002e08:	4b9b      	ldr	r3, [pc, #620]	; (8003078 <menu+0x1c9c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d111      	bne.n	8002e34 <menu+0x1a58>
			if(dilSecim == 0) {
 8002e10:	4b9a      	ldr	r3, [pc, #616]	; (800307c <menu+0x1ca0>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002e18:	4a99      	ldr	r2, [pc, #612]	; (8003080 <menu+0x1ca4>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f7fd fccb 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002e22:	4b96      	ldr	r3, [pc, #600]	; (800307c <menu+0x1ca0>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d104      	bne.n	8002e34 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002e2a:	4a96      	ldr	r2, [pc, #600]	; (8003084 <menu+0x1ca8>)
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	2002      	movs	r0, #2
 8002e30:	f7fd fcc2 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e34:	2102      	movs	r1, #2
 8002e36:	4894      	ldr	r0, [pc, #592]	; (8003088 <menu+0x1cac>)
 8002e38:	f006 fdc2 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d115      	bne.n	8002e6e <menu+0x1a92>
 8002e42:	4b92      	ldr	r3, [pc, #584]	; (800308c <menu+0x1cb0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00e      	beq.n	8002e6e <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002e50:	4b89      	ldr	r3, [pc, #548]	; (8003078 <menu+0x1c9c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b87      	ldr	r3, [pc, #540]	; (8003078 <menu+0x1c9c>)
 8002e5a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002e5c:	4b86      	ldr	r3, [pc, #536]	; (8003078 <menu+0x1c9c>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d902      	bls.n	8002e6a <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002e64:	4b84      	ldr	r3, [pc, #528]	; (8003078 <menu+0x1c9c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e6a:	f002 ffd5 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6e:	2104      	movs	r1, #4
 8002e70:	4885      	ldr	r0, [pc, #532]	; (8003088 <menu+0x1cac>)
 8002e72:	f006 fda5 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d115      	bne.n	8002ea8 <menu+0x1acc>
 8002e7c:	4b83      	ldr	r3, [pc, #524]	; (800308c <menu+0x1cb0>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002e8a:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <menu+0x1c9c>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b79      	ldr	r3, [pc, #484]	; (8003078 <menu+0x1c9c>)
 8002e94:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e96:	4b78      	ldr	r3, [pc, #480]	; (8003078 <menu+0x1c9c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d902      	bls.n	8002ea4 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <menu+0x1c9c>)
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ea4:	f002 ffb8 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea8:	2108      	movs	r1, #8
 8002eaa:	4877      	ldr	r0, [pc, #476]	; (8003088 <menu+0x1cac>)
 8002eac:	f006 fd88 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d11d      	bne.n	8002ef2 <menu+0x1b16>
 8002eb6:	4b75      	ldr	r3, [pc, #468]	; (800308c <menu+0x1cb0>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	f083 0301 	eor.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d016      	beq.n	8002ef2 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002ec4:	4b6c      	ldr	r3, [pc, #432]	; (8003078 <menu+0x1c9c>)
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	4b71      	ldr	r3, [pc, #452]	; (8003090 <menu+0x1cb4>)
 8002eca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002ece:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <menu+0x1c9c>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <menu+0x1b02>
 8002ed6:	4b68      	ldr	r3, [pc, #416]	; (8003078 <menu+0x1c9c>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d106      	bne.n	8002eec <menu+0x1b10>
				altLimit = 1;
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <menu+0x1cb8>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <menu+0x1cb8>)
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	4b69      	ldr	r3, [pc, #420]	; (8003090 <menu+0x1cb4>)
 8002eea:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <menu+0x1cbc>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002ef2:	4b6a      	ldr	r3, [pc, #424]	; (800309c <menu+0x1cc0>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	d17f      	bne.n	8002ffa <menu+0x1c1e>
		if(dilSecim == 0) {
 8002efa:	4b60      	ldr	r3, [pc, #384]	; (800307c <menu+0x1ca0>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002f02:	4a67      	ldr	r2, [pc, #412]	; (80030a0 <menu+0x1cc4>)
 8002f04:	2101      	movs	r1, #1
 8002f06:	2001      	movs	r0, #1
 8002f08:	f7fd fc56 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002f0c:	4a65      	ldr	r2, [pc, #404]	; (80030a4 <menu+0x1cc8>)
 8002f0e:	2101      	movs	r1, #1
 8002f10:	2002      	movs	r0, #2
 8002f12:	f7fd fc51 	bl	80007b8 <lcd_print>
 8002f16:	e00d      	b.n	8002f34 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002f18:	4b58      	ldr	r3, [pc, #352]	; (800307c <menu+0x1ca0>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d109      	bne.n	8002f34 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002f20:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <menu+0x1ccc>)
 8002f22:	2101      	movs	r1, #1
 8002f24:	2001      	movs	r0, #1
 8002f26:	f7fd fc47 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002f2a:	4a60      	ldr	r2, [pc, #384]	; (80030ac <menu+0x1cd0>)
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	2002      	movs	r0, #2
 8002f30:	f7fd fc42 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002f34:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <menu+0x1cd4>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	220a      	movs	r2, #10
 8002f3a:	495e      	ldr	r1, [pc, #376]	; (80030b4 <menu+0x1cd8>)
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f009 fd6b 	bl	800ca18 <itoa>
		lcd_print(2,16,snum);
 8002f42:	4a5c      	ldr	r2, [pc, #368]	; (80030b4 <menu+0x1cd8>)
 8002f44:	2110      	movs	r1, #16
 8002f46:	2002      	movs	r0, #2
 8002f48:	f7fd fc36 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	484e      	ldr	r0, [pc, #312]	; (8003088 <menu+0x1cac>)
 8002f50:	f006 fd36 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d119      	bne.n	8002f8e <menu+0x1bb2>
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	; (800308c <menu+0x1cb0>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	f083 0301 	eor.w	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <menu+0x1bb2>
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <menu+0x1cdc>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10e      	bne.n	8002f8e <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002f70:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <menu+0x1cd4>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <menu+0x1cd4>)
 8002f7a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002f7c:	4b4c      	ldr	r3, [pc, #304]	; (80030b0 <menu+0x1cd4>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d902      	bls.n	8002f8a <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002f84:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <menu+0x1cd4>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f8a:	f002 ff45 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f8e:	2104      	movs	r1, #4
 8002f90:	483d      	ldr	r0, [pc, #244]	; (8003088 <menu+0x1cac>)
 8002f92:	f006 fd15 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d119      	bne.n	8002fd0 <menu+0x1bf4>
 8002f9c:	4b3b      	ldr	r3, [pc, #236]	; (800308c <menu+0x1cb0>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	f083 0301 	eor.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <menu+0x1bf4>
 8002faa:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <menu+0x1cdc>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10e      	bne.n	8002fd0 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <menu+0x1cd4>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <menu+0x1cd4>)
 8002fbc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002fbe:	4b3c      	ldr	r3, [pc, #240]	; (80030b0 <menu+0x1cd4>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <menu+0x1cd4>)
 8002fc8:	2205      	movs	r2, #5
 8002fca:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002fcc:	f002 ff24 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fd0:	2108      	movs	r1, #8
 8002fd2:	482d      	ldr	r0, [pc, #180]	; (8003088 <menu+0x1cac>)
 8002fd4:	f006 fcf4 	bl	80099c0 <HAL_GPIO_ReadPin>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d10d      	bne.n	8002ffa <menu+0x1c1e>
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <menu+0x1cb0>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	f083 0301 	eor.w	r3, r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <menu+0x1cd4>)
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <menu+0x1cb4>)
 8002ff2:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <menu+0x1cbc>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <menu+0x1cc0>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	f040 80bc 	bne.w	800317c <menu+0x1da0>
		if(dilSecim == 0) {
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <menu+0x1ca0>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 800300c:	4a2b      	ldr	r2, [pc, #172]	; (80030bc <menu+0x1ce0>)
 800300e:	2101      	movs	r1, #1
 8003010:	2001      	movs	r0, #1
 8003012:	f7fd fbd1 	bl	80007b8 <lcd_print>
 8003016:	e008      	b.n	800302a <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <menu+0x1ca0>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d104      	bne.n	800302a <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <menu+0x1ce4>)
 8003022:	2101      	movs	r1, #1
 8003024:	2001      	movs	r0, #1
 8003026:	f7fd fbc7 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <menu+0x1ce8>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d113      	bne.n	800305a <menu+0x1c7e>
			if(dilSecim == 0) {
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <menu+0x1ca0>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800303a:	4a11      	ldr	r2, [pc, #68]	; (8003080 <menu+0x1ca4>)
 800303c:	2101      	movs	r1, #1
 800303e:	2002      	movs	r0, #2
 8003040:	f7fd fbba 	bl	80007b8 <lcd_print>
 8003044:	e04b      	b.n	80030de <menu+0x1d02>
			} else if(dilSecim == 1) {
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <menu+0x1ca0>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d147      	bne.n	80030de <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800304e:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <menu+0x1ca8>)
 8003050:	2101      	movs	r1, #1
 8003052:	2002      	movs	r0, #2
 8003054:	f7fd fbb0 	bl	80007b8 <lcd_print>
 8003058:	e041      	b.n	80030de <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <menu+0x1ce8>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d13d      	bne.n	80030de <menu+0x1d02>
			if(dilSecim == 0) {
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <menu+0x1ca0>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d130      	bne.n	80030cc <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <menu+0x1cec>)
 800306c:	2101      	movs	r1, #1
 800306e:	2002      	movs	r0, #2
 8003070:	f7fd fba2 	bl	80007b8 <lcd_print>
 8003074:	e033      	b.n	80030de <menu+0x1d02>
 8003076:	bf00      	nop
 8003078:	20000b9e 	.word	0x20000b9e
 800307c:	20000bb2 	.word	0x20000bb2
 8003080:	0800d8f4 	.word	0x0800d8f4
 8003084:	0800d908 	.word	0x0800d908
 8003088:	40010800 	.word	0x40010800
 800308c:	20000bc0 	.word	0x20000bc0
 8003090:	20000ad4 	.word	0x20000ad4
 8003094:	20000b97 	.word	0x20000b97
 8003098:	20000bbd 	.word	0x20000bbd
 800309c:	20000b91 	.word	0x20000b91
 80030a0:	0800dc94 	.word	0x0800dc94
 80030a4:	0800db58 	.word	0x0800db58
 80030a8:	0800dca8 	.word	0x0800dca8
 80030ac:	0800db7c 	.word	0x0800db7c
 80030b0:	20000bac 	.word	0x20000bac
 80030b4:	20000b14 	.word	0x20000b14
 80030b8:	20000b9c 	.word	0x20000b9c
 80030bc:	0800dcbc 	.word	0x0800dcbc
 80030c0:	0800dcd0 	.word	0x0800dcd0
 80030c4:	20000b9f 	.word	0x20000b9f
 80030c8:	0800d954 	.word	0x0800d954
			} else if(dilSecim == 1) {
 80030cc:	4b99      	ldr	r3, [pc, #612]	; (8003334 <menu+0x1f58>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d104      	bne.n	80030de <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80030d4:	4a98      	ldr	r2, [pc, #608]	; (8003338 <menu+0x1f5c>)
 80030d6:	2101      	movs	r1, #1
 80030d8:	2002      	movs	r0, #2
 80030da:	f7fd fb6d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030de:	2102      	movs	r1, #2
 80030e0:	4896      	ldr	r0, [pc, #600]	; (800333c <menu+0x1f60>)
 80030e2:	f006 fc6d 	bl	80099c0 <HAL_GPIO_ReadPin>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d115      	bne.n	8003118 <menu+0x1d3c>
 80030ec:	4b94      	ldr	r3, [pc, #592]	; (8003340 <menu+0x1f64>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f083 0301 	eor.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00e      	beq.n	8003118 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80030fa:	4b92      	ldr	r3, [pc, #584]	; (8003344 <menu+0x1f68>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b90      	ldr	r3, [pc, #576]	; (8003344 <menu+0x1f68>)
 8003104:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003106:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <menu+0x1f68>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d902      	bls.n	8003114 <menu+0x1d38>
				yukariYavasLimit = 0;
 800310e:	4b8d      	ldr	r3, [pc, #564]	; (8003344 <menu+0x1f68>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003114:	f002 fe80 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003118:	2104      	movs	r1, #4
 800311a:	4888      	ldr	r0, [pc, #544]	; (800333c <menu+0x1f60>)
 800311c:	f006 fc50 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d115      	bne.n	8003152 <menu+0x1d76>
 8003126:	4b86      	ldr	r3, [pc, #536]	; (8003340 <menu+0x1f64>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f083 0301 	eor.w	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003134:	4b83      	ldr	r3, [pc, #524]	; (8003344 <menu+0x1f68>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3b01      	subs	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b81      	ldr	r3, [pc, #516]	; (8003344 <menu+0x1f68>)
 800313e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003140:	4b80      	ldr	r3, [pc, #512]	; (8003344 <menu+0x1f68>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003148:	4b7e      	ldr	r3, [pc, #504]	; (8003344 <menu+0x1f68>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800314e:	f002 fe63 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003152:	2108      	movs	r1, #8
 8003154:	4879      	ldr	r0, [pc, #484]	; (800333c <menu+0x1f60>)
 8003156:	f006 fc33 	bl	80099c0 <HAL_GPIO_ReadPin>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10d      	bne.n	800317c <menu+0x1da0>
 8003160:	4b77      	ldr	r3, [pc, #476]	; (8003340 <menu+0x1f64>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800316e:	4b75      	ldr	r3, [pc, #468]	; (8003344 <menu+0x1f68>)
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	4b75      	ldr	r3, [pc, #468]	; (8003348 <menu+0x1f6c>)
 8003174:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003176:	4b75      	ldr	r3, [pc, #468]	; (800334c <menu+0x1f70>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800317c:	4b74      	ldr	r3, [pc, #464]	; (8003350 <menu+0x1f74>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b11      	cmp	r3, #17
 8003182:	f040 80c3 	bne.w	800330c <menu+0x1f30>
		if(dilSecim == 0) {
 8003186:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <menu+0x1f58>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800318e:	4a71      	ldr	r2, [pc, #452]	; (8003354 <menu+0x1f78>)
 8003190:	2101      	movs	r1, #1
 8003192:	2001      	movs	r0, #1
 8003194:	f7fd fb10 	bl	80007b8 <lcd_print>
 8003198:	e008      	b.n	80031ac <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800319a:	4b66      	ldr	r3, [pc, #408]	; (8003334 <menu+0x1f58>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d104      	bne.n	80031ac <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80031a2:	4a6d      	ldr	r2, [pc, #436]	; (8003358 <menu+0x1f7c>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7fd fb06 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80031ac:	4b6b      	ldr	r3, [pc, #428]	; (800335c <menu+0x1f80>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d113      	bne.n	80031dc <menu+0x1e00>
			if(dilSecim == 0){
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <menu+0x1f58>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80031bc:	4a68      	ldr	r2, [pc, #416]	; (8003360 <menu+0x1f84>)
 80031be:	2101      	movs	r1, #1
 80031c0:	2002      	movs	r0, #2
 80031c2:	f7fd faf9 	bl	80007b8 <lcd_print>
 80031c6:	e038      	b.n	800323a <menu+0x1e5e>
			} else if(dilSecim == 1){
 80031c8:	4b5a      	ldr	r3, [pc, #360]	; (8003334 <menu+0x1f58>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d134      	bne.n	800323a <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80031d0:	4a64      	ldr	r2, [pc, #400]	; (8003364 <menu+0x1f88>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	2002      	movs	r0, #2
 80031d6:	f7fd faef 	bl	80007b8 <lcd_print>
 80031da:	e02e      	b.n	800323a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031dc:	4b5f      	ldr	r3, [pc, #380]	; (800335c <menu+0x1f80>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d113      	bne.n	800320c <menu+0x1e30>
			if(dilSecim == 0){
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <menu+0x1f58>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80031ec:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <menu+0x1f8c>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	2002      	movs	r0, #2
 80031f2:	f7fd fae1 	bl	80007b8 <lcd_print>
 80031f6:	e020      	b.n	800323a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031f8:	4b4e      	ldr	r3, [pc, #312]	; (8003334 <menu+0x1f58>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d11c      	bne.n	800323a <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003200:	4a5a      	ldr	r2, [pc, #360]	; (800336c <menu+0x1f90>)
 8003202:	2101      	movs	r1, #1
 8003204:	2002      	movs	r0, #2
 8003206:	f7fd fad7 	bl	80007b8 <lcd_print>
 800320a:	e016      	b.n	800323a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 800320c:	4b53      	ldr	r3, [pc, #332]	; (800335c <menu+0x1f80>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d112      	bne.n	800323a <menu+0x1e5e>
			if(dilSecim == 0) {
 8003214:	4b47      	ldr	r3, [pc, #284]	; (8003334 <menu+0x1f58>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 800321c:	4a54      	ldr	r2, [pc, #336]	; (8003370 <menu+0x1f94>)
 800321e:	2101      	movs	r1, #1
 8003220:	2002      	movs	r0, #2
 8003222:	f7fd fac9 	bl	80007b8 <lcd_print>
 8003226:	e008      	b.n	800323a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003228:	4b42      	ldr	r3, [pc, #264]	; (8003334 <menu+0x1f58>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d104      	bne.n	800323a <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003230:	4a50      	ldr	r2, [pc, #320]	; (8003374 <menu+0x1f98>)
 8003232:	2101      	movs	r1, #1
 8003234:	2002      	movs	r0, #2
 8003236:	f7fd fabf 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800323a:	2102      	movs	r1, #2
 800323c:	483f      	ldr	r0, [pc, #252]	; (800333c <menu+0x1f60>)
 800323e:	f006 fbbf 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003242:	4603      	mov	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d115      	bne.n	8003274 <menu+0x1e98>
 8003248:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <menu+0x1f64>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f083 0301 	eor.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <menu+0x1f80>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b3f      	ldr	r3, [pc, #252]	; (800335c <menu+0x1f80>)
 8003260:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003262:	4b3e      	ldr	r3, [pc, #248]	; (800335c <menu+0x1f80>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800326a:	4b3c      	ldr	r3, [pc, #240]	; (800335c <menu+0x1f80>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003270:	f002 fdd2 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003274:	2104      	movs	r1, #4
 8003276:	4831      	ldr	r0, [pc, #196]	; (800333c <menu+0x1f60>)
 8003278:	f006 fba2 	bl	80099c0 <HAL_GPIO_ReadPin>
 800327c:	4603      	mov	r3, r0
 800327e:	2b01      	cmp	r3, #1
 8003280:	d115      	bne.n	80032ae <menu+0x1ed2>
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <menu+0x1f64>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	f083 0301 	eor.w	r3, r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003290:	4b32      	ldr	r3, [pc, #200]	; (800335c <menu+0x1f80>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	3b01      	subs	r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b30      	ldr	r3, [pc, #192]	; (800335c <menu+0x1f80>)
 800329a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800329c:	4b2f      	ldr	r3, [pc, #188]	; (800335c <menu+0x1f80>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d902      	bls.n	80032aa <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80032a4:	4b2d      	ldr	r3, [pc, #180]	; (800335c <menu+0x1f80>)
 80032a6:	2202      	movs	r2, #2
 80032a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032aa:	f002 fdb5 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ae:	2108      	movs	r1, #8
 80032b0:	4822      	ldr	r0, [pc, #136]	; (800333c <menu+0x1f60>)
 80032b2:	f006 fb85 	bl	80099c0 <HAL_GPIO_ReadPin>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d127      	bne.n	800330c <menu+0x1f30>
 80032bc:	4b20      	ldr	r3, [pc, #128]	; (8003340 <menu+0x1f64>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f083 0301 	eor.w	r3, r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d020      	beq.n	800330c <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <menu+0x1f80>)
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <menu+0x1f6c>)
 80032d0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <menu+0x1f80>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d003      	beq.n	80032e2 <menu+0x1f06>
 80032da:	4b20      	ldr	r3, [pc, #128]	; (800335c <menu+0x1f80>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d106      	bne.n	80032f0 <menu+0x1f14>
				calismaSekli = 0;
 80032e2:	4b25      	ldr	r3, [pc, #148]	; (8003378 <menu+0x1f9c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80032e8:	4b23      	ldr	r3, [pc, #140]	; (8003378 <menu+0x1f9c>)
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <menu+0x1f6c>)
 80032ee:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80032f0:	4b1a      	ldr	r3, [pc, #104]	; (800335c <menu+0x1f80>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d106      	bne.n	8003306 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80032f8:	4b20      	ldr	r3, [pc, #128]	; (800337c <menu+0x1fa0>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80032fe:	4b1f      	ldr	r3, [pc, #124]	; (800337c <menu+0x1fa0>)
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <menu+0x1f6c>)
 8003304:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <menu+0x1f70>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <menu+0x1f74>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b12      	cmp	r3, #18
 8003312:	f040 80d5 	bne.w	80034c0 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <menu+0x1f80>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d13c      	bne.n	8003398 <menu+0x1fbc>
			if(dilSecim == 0) {
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <menu+0x1f58>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d12e      	bne.n	8003384 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003326:	4a16      	ldr	r2, [pc, #88]	; (8003380 <menu+0x1fa4>)
 8003328:	2101      	movs	r1, #1
 800332a:	2001      	movs	r0, #1
 800332c:	f7fd fa44 	bl	80007b8 <lcd_print>
 8003330:	e048      	b.n	80033c4 <menu+0x1fe8>
 8003332:	bf00      	nop
 8003334:	20000bb2 	.word	0x20000bb2
 8003338:	0800d968 	.word	0x0800d968
 800333c:	40010800 	.word	0x40010800
 8003340:	20000bc0 	.word	0x20000bc0
 8003344:	20000b9f 	.word	0x20000b9f
 8003348:	20000ad4 	.word	0x20000ad4
 800334c:	20000bbd 	.word	0x20000bbd
 8003350:	20000b91 	.word	0x20000b91
 8003354:	0800dce4 	.word	0x0800dce4
 8003358:	0800dcf8 	.word	0x0800dcf8
 800335c:	20000ba0 	.word	0x20000ba0
 8003360:	0800dd0c 	.word	0x0800dd0c
 8003364:	0800dd1c 	.word	0x0800dd1c
 8003368:	0800dd2c 	.word	0x0800dd2c
 800336c:	0800dd3c 	.word	0x0800dd3c
 8003370:	0800d8f4 	.word	0x0800d8f4
 8003374:	0800d908 	.word	0x0800d908
 8003378:	20000b92 	.word	0x20000b92
 800337c:	20000ba3 	.word	0x20000ba3
 8003380:	0800dd4c 	.word	0x0800dd4c
			} else if(dilSecim == 1) {
 8003384:	4b7b      	ldr	r3, [pc, #492]	; (8003574 <menu+0x2198>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d11b      	bne.n	80033c4 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 800338c:	4a7a      	ldr	r2, [pc, #488]	; (8003578 <menu+0x219c>)
 800338e:	2101      	movs	r1, #1
 8003390:	2001      	movs	r0, #1
 8003392:	f7fd fa11 	bl	80007b8 <lcd_print>
 8003396:	e015      	b.n	80033c4 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003398:	4b78      	ldr	r3, [pc, #480]	; (800357c <menu+0x21a0>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d111      	bne.n	80033c4 <menu+0x1fe8>
			if(dilSecim == 0){
 80033a0:	4b74      	ldr	r3, [pc, #464]	; (8003574 <menu+0x2198>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80033a8:	4a75      	ldr	r2, [pc, #468]	; (8003580 <menu+0x21a4>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	2001      	movs	r0, #1
 80033ae:	f7fd fa03 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80033b2:	4b70      	ldr	r3, [pc, #448]	; (8003574 <menu+0x2198>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d104      	bne.n	80033c4 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80033ba:	4a72      	ldr	r2, [pc, #456]	; (8003584 <menu+0x21a8>)
 80033bc:	2101      	movs	r1, #1
 80033be:	2001      	movs	r0, #1
 80033c0:	f7fd f9fa 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80033c4:	4b70      	ldr	r3, [pc, #448]	; (8003588 <menu+0x21ac>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d113      	bne.n	80033f4 <menu+0x2018>
			if(dilSecim == 0) {
 80033cc:	4b69      	ldr	r3, [pc, #420]	; (8003574 <menu+0x2198>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80033d4:	4a6d      	ldr	r2, [pc, #436]	; (800358c <menu+0x21b0>)
 80033d6:	2101      	movs	r1, #1
 80033d8:	2002      	movs	r0, #2
 80033da:	f7fd f9ed 	bl	80007b8 <lcd_print>
 80033de:	e020      	b.n	8003422 <menu+0x2046>
			} else if(dilSecim == 1){
 80033e0:	4b64      	ldr	r3, [pc, #400]	; (8003574 <menu+0x2198>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d11c      	bne.n	8003422 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80033e8:	4a69      	ldr	r2, [pc, #420]	; (8003590 <menu+0x21b4>)
 80033ea:	2101      	movs	r1, #1
 80033ec:	2002      	movs	r0, #2
 80033ee:	f7fd f9e3 	bl	80007b8 <lcd_print>
 80033f2:	e016      	b.n	8003422 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80033f4:	4b64      	ldr	r3, [pc, #400]	; (8003588 <menu+0x21ac>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d112      	bne.n	8003422 <menu+0x2046>
			if(dilSecim == 0){
 80033fc:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <menu+0x2198>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003404:	4a63      	ldr	r2, [pc, #396]	; (8003594 <menu+0x21b8>)
 8003406:	2101      	movs	r1, #1
 8003408:	2002      	movs	r0, #2
 800340a:	f7fd f9d5 	bl	80007b8 <lcd_print>
 800340e:	e008      	b.n	8003422 <menu+0x2046>
			} else if(dilSecim == 1){
 8003410:	4b58      	ldr	r3, [pc, #352]	; (8003574 <menu+0x2198>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d104      	bne.n	8003422 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003418:	4a5f      	ldr	r2, [pc, #380]	; (8003598 <menu+0x21bc>)
 800341a:	2101      	movs	r1, #1
 800341c:	2002      	movs	r0, #2
 800341e:	f7fd f9cb 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003422:	2102      	movs	r1, #2
 8003424:	485d      	ldr	r0, [pc, #372]	; (800359c <menu+0x21c0>)
 8003426:	f006 facb 	bl	80099c0 <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d115      	bne.n	800345c <menu+0x2080>
 8003430:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <menu+0x21c4>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800343e:	4b52      	ldr	r3, [pc, #328]	; (8003588 <menu+0x21ac>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b50      	ldr	r3, [pc, #320]	; (8003588 <menu+0x21ac>)
 8003448:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800344a:	4b4f      	ldr	r3, [pc, #316]	; (8003588 <menu+0x21ac>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d902      	bls.n	8003458 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003452:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <menu+0x21ac>)
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003458:	f002 fcde 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800345c:	2104      	movs	r1, #4
 800345e:	484f      	ldr	r0, [pc, #316]	; (800359c <menu+0x21c0>)
 8003460:	f006 faae 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d115      	bne.n	8003496 <menu+0x20ba>
 800346a:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <menu+0x21c4>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	f083 0301 	eor.w	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003478:	4b43      	ldr	r3, [pc, #268]	; (8003588 <menu+0x21ac>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	3b01      	subs	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b41      	ldr	r3, [pc, #260]	; (8003588 <menu+0x21ac>)
 8003482:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <menu+0x21ac>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 800348c:	4b3e      	ldr	r3, [pc, #248]	; (8003588 <menu+0x21ac>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003492:	f002 fcc1 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003496:	2108      	movs	r1, #8
 8003498:	4840      	ldr	r0, [pc, #256]	; (800359c <menu+0x21c0>)
 800349a:	f006 fa91 	bl	80099c0 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10d      	bne.n	80034c0 <menu+0x20e4>
 80034a4:	4b3e      	ldr	r3, [pc, #248]	; (80035a0 <menu+0x21c4>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80034b2:	4b35      	ldr	r3, [pc, #212]	; (8003588 <menu+0x21ac>)
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <menu+0x21c8>)
 80034b8:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <menu+0x21cc>)
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80034c0:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <menu+0x21d0>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b13      	cmp	r3, #19
 80034c6:	f040 80d5 	bne.w	8003674 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <menu+0x21a0>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d113      	bne.n	80034fa <menu+0x211e>
			if(dilSecim == 0) {
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <menu+0x2198>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80034da:	4a35      	ldr	r2, [pc, #212]	; (80035b0 <menu+0x21d4>)
 80034dc:	2101      	movs	r1, #1
 80034de:	2001      	movs	r0, #1
 80034e0:	f7fd f96a 	bl	80007b8 <lcd_print>
 80034e4:	e01f      	b.n	8003526 <menu+0x214a>
			} else if(dilSecim == 1) {
 80034e6:	4b23      	ldr	r3, [pc, #140]	; (8003574 <menu+0x2198>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d11b      	bne.n	8003526 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80034ee:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <menu+0x21d8>)
 80034f0:	2101      	movs	r1, #1
 80034f2:	2001      	movs	r0, #1
 80034f4:	f7fd f960 	bl	80007b8 <lcd_print>
 80034f8:	e015      	b.n	8003526 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <menu+0x21a0>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d111      	bne.n	8003526 <menu+0x214a>
			if(dilSecim == 0) {
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <menu+0x2198>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800350a:	4a2b      	ldr	r2, [pc, #172]	; (80035b8 <menu+0x21dc>)
 800350c:	2101      	movs	r1, #1
 800350e:	2001      	movs	r0, #1
 8003510:	f7fd f952 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003514:	4b17      	ldr	r3, [pc, #92]	; (8003574 <menu+0x2198>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d104      	bne.n	8003526 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 800351c:	4a27      	ldr	r2, [pc, #156]	; (80035bc <menu+0x21e0>)
 800351e:	2101      	movs	r1, #1
 8003520:	2001      	movs	r0, #1
 8003522:	f7fd f949 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <menu+0x21e4>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d113      	bne.n	8003556 <menu+0x217a>
			if(dilSecim == 0) {
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <menu+0x2198>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003536:	4a15      	ldr	r2, [pc, #84]	; (800358c <menu+0x21b0>)
 8003538:	2101      	movs	r1, #1
 800353a:	2002      	movs	r0, #2
 800353c:	f7fd f93c 	bl	80007b8 <lcd_print>
 8003540:	e049      	b.n	80035d6 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <menu+0x2198>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d145      	bne.n	80035d6 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800354a:	4a11      	ldr	r2, [pc, #68]	; (8003590 <menu+0x21b4>)
 800354c:	2101      	movs	r1, #1
 800354e:	2002      	movs	r0, #2
 8003550:	f7fd f932 	bl	80007b8 <lcd_print>
 8003554:	e03f      	b.n	80035d6 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <menu+0x21e4>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d13b      	bne.n	80035d6 <menu+0x21fa>
			if(dilSecim == 0) {
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <menu+0x2198>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d12e      	bne.n	80035c4 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003566:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <menu+0x21b8>)
 8003568:	2101      	movs	r1, #1
 800356a:	2002      	movs	r0, #2
 800356c:	f7fd f924 	bl	80007b8 <lcd_print>
 8003570:	e031      	b.n	80035d6 <menu+0x21fa>
 8003572:	bf00      	nop
 8003574:	20000bb2 	.word	0x20000bb2
 8003578:	0800dd60 	.word	0x0800dd60
 800357c:	20000ba0 	.word	0x20000ba0
 8003580:	0800dd70 	.word	0x0800dd70
 8003584:	0800dd84 	.word	0x0800dd84
 8003588:	20000ba1 	.word	0x20000ba1
 800358c:	0800d8f4 	.word	0x0800d8f4
 8003590:	0800d908 	.word	0x0800d908
 8003594:	0800d954 	.word	0x0800d954
 8003598:	0800d968 	.word	0x0800d968
 800359c:	40010800 	.word	0x40010800
 80035a0:	20000bc0 	.word	0x20000bc0
 80035a4:	20000ad4 	.word	0x20000ad4
 80035a8:	20000bbd 	.word	0x20000bbd
 80035ac:	20000b91 	.word	0x20000b91
 80035b0:	0800dd98 	.word	0x0800dd98
 80035b4:	0800ddac 	.word	0x0800ddac
 80035b8:	0800ddc0 	.word	0x0800ddc0
 80035bc:	0800ddd4 	.word	0x0800ddd4
 80035c0:	20000ba2 	.word	0x20000ba2
			} else if(dilSecim == 1) {
 80035c4:	4b90      	ldr	r3, [pc, #576]	; (8003808 <menu+0x242c>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d104      	bne.n	80035d6 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80035cc:	4a8f      	ldr	r2, [pc, #572]	; (800380c <menu+0x2430>)
 80035ce:	2101      	movs	r1, #1
 80035d0:	2002      	movs	r0, #2
 80035d2:	f7fd f8f1 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035d6:	2102      	movs	r1, #2
 80035d8:	488d      	ldr	r0, [pc, #564]	; (8003810 <menu+0x2434>)
 80035da:	f006 f9f1 	bl	80099c0 <HAL_GPIO_ReadPin>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d115      	bne.n	8003610 <menu+0x2234>
 80035e4:	4b8b      	ldr	r3, [pc, #556]	; (8003814 <menu+0x2438>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80035f2:	4b89      	ldr	r3, [pc, #548]	; (8003818 <menu+0x243c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4b87      	ldr	r3, [pc, #540]	; (8003818 <menu+0x243c>)
 80035fc:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80035fe:	4b86      	ldr	r3, [pc, #536]	; (8003818 <menu+0x243c>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d902      	bls.n	800360c <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003606:	4b84      	ldr	r3, [pc, #528]	; (8003818 <menu+0x243c>)
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800360c:	f002 fc04 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003610:	2104      	movs	r1, #4
 8003612:	487f      	ldr	r0, [pc, #508]	; (8003810 <menu+0x2434>)
 8003614:	f006 f9d4 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d115      	bne.n	800364a <menu+0x226e>
 800361e:	4b7d      	ldr	r3, [pc, #500]	; (8003814 <menu+0x2438>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f083 0301 	eor.w	r3, r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00e      	beq.n	800364a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800362c:	4b7a      	ldr	r3, [pc, #488]	; (8003818 <menu+0x243c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	3b01      	subs	r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	4b78      	ldr	r3, [pc, #480]	; (8003818 <menu+0x243c>)
 8003636:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003638:	4b77      	ldr	r3, [pc, #476]	; (8003818 <menu+0x243c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003640:	4b75      	ldr	r3, [pc, #468]	; (8003818 <menu+0x243c>)
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003646:	f002 fbe7 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800364a:	2108      	movs	r1, #8
 800364c:	4870      	ldr	r0, [pc, #448]	; (8003810 <menu+0x2434>)
 800364e:	f006 f9b7 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003652:	4603      	mov	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10d      	bne.n	8003674 <menu+0x2298>
 8003658:	4b6e      	ldr	r3, [pc, #440]	; (8003814 <menu+0x2438>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	f083 0301 	eor.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003666:	4b6c      	ldr	r3, [pc, #432]	; (8003818 <menu+0x243c>)
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	4b6c      	ldr	r3, [pc, #432]	; (800381c <menu+0x2440>)
 800366c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800366e:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <menu+0x2444>)
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003674:	4b6b      	ldr	r3, [pc, #428]	; (8003824 <menu+0x2448>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b14      	cmp	r3, #20
 800367a:	f040 80b5 	bne.w	80037e8 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800367e:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <menu+0x244c>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d113      	bne.n	80036ae <menu+0x22d2>
			if(dilSecim == 0) {
 8003686:	4b60      	ldr	r3, [pc, #384]	; (8003808 <menu+0x242c>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800368e:	4a67      	ldr	r2, [pc, #412]	; (800382c <menu+0x2450>)
 8003690:	2101      	movs	r1, #1
 8003692:	2001      	movs	r0, #1
 8003694:	f7fd f890 	bl	80007b8 <lcd_print>
 8003698:	e020      	b.n	80036dc <menu+0x2300>
			} else if(dilSecim == 1) {
 800369a:	4b5b      	ldr	r3, [pc, #364]	; (8003808 <menu+0x242c>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d11c      	bne.n	80036dc <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80036a2:	4a63      	ldr	r2, [pc, #396]	; (8003830 <menu+0x2454>)
 80036a4:	2101      	movs	r1, #1
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7fd f886 	bl	80007b8 <lcd_print>
 80036ac:	e016      	b.n	80036dc <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80036ae:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <menu+0x244c>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d112      	bne.n	80036dc <menu+0x2300>
			if(dilSecim == 0) {
 80036b6:	4b54      	ldr	r3, [pc, #336]	; (8003808 <menu+0x242c>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80036be:	4a5d      	ldr	r2, [pc, #372]	; (8003834 <menu+0x2458>)
 80036c0:	2101      	movs	r1, #1
 80036c2:	2001      	movs	r0, #1
 80036c4:	f7fd f878 	bl	80007b8 <lcd_print>
 80036c8:	e008      	b.n	80036dc <menu+0x2300>
			} else if(dilSecim == 1) {
 80036ca:	4b4f      	ldr	r3, [pc, #316]	; (8003808 <menu+0x242c>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d104      	bne.n	80036dc <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80036d2:	4a59      	ldr	r2, [pc, #356]	; (8003838 <menu+0x245c>)
 80036d4:	2101      	movs	r1, #1
 80036d6:	2001      	movs	r0, #1
 80036d8:	f7fd f86e 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80036dc:	4b57      	ldr	r3, [pc, #348]	; (800383c <menu+0x2460>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d113      	bne.n	800370c <menu+0x2330>
			if(dilSecim == 0) {
 80036e4:	4b48      	ldr	r3, [pc, #288]	; (8003808 <menu+0x242c>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <menu+0x2464>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	2002      	movs	r0, #2
 80036f2:	f7fd f861 	bl	80007b8 <lcd_print>
 80036f6:	e020      	b.n	800373a <menu+0x235e>
			} else if(dilSecim == 1) {
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <menu+0x242c>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d11c      	bne.n	800373a <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003700:	4a50      	ldr	r2, [pc, #320]	; (8003844 <menu+0x2468>)
 8003702:	2101      	movs	r1, #1
 8003704:	2002      	movs	r0, #2
 8003706:	f7fd f857 	bl	80007b8 <lcd_print>
 800370a:	e016      	b.n	800373a <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 800370c:	4b4b      	ldr	r3, [pc, #300]	; (800383c <menu+0x2460>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d112      	bne.n	800373a <menu+0x235e>
			if(dilSecim == 0) {
 8003714:	4b3c      	ldr	r3, [pc, #240]	; (8003808 <menu+0x242c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 800371c:	4a4a      	ldr	r2, [pc, #296]	; (8003848 <menu+0x246c>)
 800371e:	2101      	movs	r1, #1
 8003720:	2002      	movs	r0, #2
 8003722:	f7fd f849 	bl	80007b8 <lcd_print>
 8003726:	e008      	b.n	800373a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003728:	4b37      	ldr	r3, [pc, #220]	; (8003808 <menu+0x242c>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d104      	bne.n	800373a <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003730:	4a46      	ldr	r2, [pc, #280]	; (800384c <menu+0x2470>)
 8003732:	2101      	movs	r1, #1
 8003734:	2002      	movs	r0, #2
 8003736:	f7fd f83f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800373a:	2102      	movs	r1, #2
 800373c:	4834      	ldr	r0, [pc, #208]	; (8003810 <menu+0x2434>)
 800373e:	f006 f93f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003742:	4603      	mov	r3, r0
 8003744:	2b01      	cmp	r3, #1
 8003746:	d119      	bne.n	800377c <menu+0x23a0>
 8003748:	4b32      	ldr	r3, [pc, #200]	; (8003814 <menu+0x2438>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	f083 0301 	eor.w	r3, r3, #1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <menu+0x23a0>
 8003756:	4b34      	ldr	r3, [pc, #208]	; (8003828 <menu+0x244c>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d10e      	bne.n	800377c <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <menu+0x2460>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b35      	ldr	r3, [pc, #212]	; (800383c <menu+0x2460>)
 8003768:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800376a:	4b34      	ldr	r3, [pc, #208]	; (800383c <menu+0x2460>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d902      	bls.n	8003778 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003772:	4b32      	ldr	r3, [pc, #200]	; (800383c <menu+0x2460>)
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003778:	f002 fb4e 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800377c:	2104      	movs	r1, #4
 800377e:	4824      	ldr	r0, [pc, #144]	; (8003810 <menu+0x2434>)
 8003780:	f006 f91e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003784:	4603      	mov	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d119      	bne.n	80037be <menu+0x23e2>
 800378a:	4b22      	ldr	r3, [pc, #136]	; (8003814 <menu+0x2438>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	f083 0301 	eor.w	r3, r3, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <menu+0x23e2>
 8003798:	4b23      	ldr	r3, [pc, #140]	; (8003828 <menu+0x244c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d10e      	bne.n	80037be <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <menu+0x2460>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <menu+0x2460>)
 80037aa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80037ac:	4b23      	ldr	r3, [pc, #140]	; (800383c <menu+0x2460>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <menu+0x2460>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037ba:	f002 fb2d 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037be:	2108      	movs	r1, #8
 80037c0:	4813      	ldr	r0, [pc, #76]	; (8003810 <menu+0x2434>)
 80037c2:	f006 f8fd 	bl	80099c0 <HAL_GPIO_ReadPin>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10d      	bne.n	80037e8 <menu+0x240c>
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <menu+0x2438>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	f083 0301 	eor.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <menu+0x2460>)
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <menu+0x2440>)
 80037e0:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <menu+0x2444>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <menu+0x2448>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b15      	cmp	r3, #21
 80037ee:	f040 80c2 	bne.w	8003976 <menu+0x259a>
		if(dilSecim == 0) {
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <menu+0x242c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d12c      	bne.n	8003854 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80037fa:	4a15      	ldr	r2, [pc, #84]	; (8003850 <menu+0x2474>)
 80037fc:	2101      	movs	r1, #1
 80037fe:	2001      	movs	r0, #1
 8003800:	f7fc ffda 	bl	80007b8 <lcd_print>
 8003804:	e02f      	b.n	8003866 <menu+0x248a>
 8003806:	bf00      	nop
 8003808:	20000bb2 	.word	0x20000bb2
 800380c:	0800d968 	.word	0x0800d968
 8003810:	40010800 	.word	0x40010800
 8003814:	20000bc0 	.word	0x20000bc0
 8003818:	20000ba2 	.word	0x20000ba2
 800381c:	20000ad4 	.word	0x20000ad4
 8003820:	20000bbd 	.word	0x20000bbd
 8003824:	20000b91 	.word	0x20000b91
 8003828:	20000ba0 	.word	0x20000ba0
 800382c:	0800dde8 	.word	0x0800dde8
 8003830:	0800ddfc 	.word	0x0800ddfc
 8003834:	0800de10 	.word	0x0800de10
 8003838:	0800de24 	.word	0x0800de24
 800383c:	20000ba3 	.word	0x20000ba3
 8003840:	0800de38 	.word	0x0800de38
 8003844:	0800de4c 	.word	0x0800de4c
 8003848:	0800de5c 	.word	0x0800de5c
 800384c:	0800de70 	.word	0x0800de70
 8003850:	0800de80 	.word	0x0800de80
		} else if(dilSecim == 1) {
 8003854:	4b9c      	ldr	r3, [pc, #624]	; (8003ac8 <menu+0x26ec>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d104      	bne.n	8003866 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800385c:	4a9b      	ldr	r2, [pc, #620]	; (8003acc <menu+0x26f0>)
 800385e:	2101      	movs	r1, #1
 8003860:	2001      	movs	r0, #1
 8003862:	f7fc ffa9 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003866:	4b9a      	ldr	r3, [pc, #616]	; (8003ad0 <menu+0x26f4>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d112      	bne.n	8003894 <menu+0x24b8>
			if(dilSecim == 0) {
 800386e:	4b96      	ldr	r3, [pc, #600]	; (8003ac8 <menu+0x26ec>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003876:	4a97      	ldr	r2, [pc, #604]	; (8003ad4 <menu+0x26f8>)
 8003878:	2101      	movs	r1, #1
 800387a:	2002      	movs	r0, #2
 800387c:	f7fc ff9c 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003880:	4b91      	ldr	r3, [pc, #580]	; (8003ac8 <menu+0x26ec>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d11c      	bne.n	80038c2 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003888:	4a93      	ldr	r2, [pc, #588]	; (8003ad8 <menu+0x26fc>)
 800388a:	2101      	movs	r1, #1
 800388c:	2002      	movs	r0, #2
 800388e:	f7fc ff93 	bl	80007b8 <lcd_print>
 8003892:	e016      	b.n	80038c2 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003894:	4b8e      	ldr	r3, [pc, #568]	; (8003ad0 <menu+0x26f4>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d112      	bne.n	80038c2 <menu+0x24e6>
			if(dilSecim == 0) {
 800389c:	4b8a      	ldr	r3, [pc, #552]	; (8003ac8 <menu+0x26ec>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80038a4:	4a8d      	ldr	r2, [pc, #564]	; (8003adc <menu+0x2700>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	2002      	movs	r0, #2
 80038aa:	f7fc ff85 	bl	80007b8 <lcd_print>
 80038ae:	e008      	b.n	80038c2 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80038b0:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <menu+0x26ec>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d104      	bne.n	80038c2 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80038b8:	4a89      	ldr	r2, [pc, #548]	; (8003ae0 <menu+0x2704>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	2002      	movs	r0, #2
 80038be:	f7fc ff7b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c2:	2102      	movs	r1, #2
 80038c4:	4887      	ldr	r0, [pc, #540]	; (8003ae4 <menu+0x2708>)
 80038c6:	f006 f87b 	bl	80099c0 <HAL_GPIO_ReadPin>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d115      	bne.n	80038fc <menu+0x2520>
 80038d0:	4b85      	ldr	r3, [pc, #532]	; (8003ae8 <menu+0x270c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f083 0301 	eor.w	r3, r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00e      	beq.n	80038fc <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80038de:	4b7c      	ldr	r3, [pc, #496]	; (8003ad0 <menu+0x26f4>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	3301      	adds	r3, #1
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4b7a      	ldr	r3, [pc, #488]	; (8003ad0 <menu+0x26f4>)
 80038e8:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80038ea:	4b79      	ldr	r3, [pc, #484]	; (8003ad0 <menu+0x26f4>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d902      	bls.n	80038f8 <menu+0x251c>
				platformSilindirTipi = 0;
 80038f2:	4b77      	ldr	r3, [pc, #476]	; (8003ad0 <menu+0x26f4>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038f8:	f002 fa8e 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038fc:	2104      	movs	r1, #4
 80038fe:	4879      	ldr	r0, [pc, #484]	; (8003ae4 <menu+0x2708>)
 8003900:	f006 f85e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003904:	4603      	mov	r3, r0
 8003906:	2b01      	cmp	r3, #1
 8003908:	d115      	bne.n	8003936 <menu+0x255a>
 800390a:	4b77      	ldr	r3, [pc, #476]	; (8003ae8 <menu+0x270c>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	f083 0301 	eor.w	r3, r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003918:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <menu+0x26f4>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	3b01      	subs	r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b6b      	ldr	r3, [pc, #428]	; (8003ad0 <menu+0x26f4>)
 8003922:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <menu+0x26f4>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <menu+0x2556>
		   		platformSilindirTipi = 1;
 800392c:	4b68      	ldr	r3, [pc, #416]	; (8003ad0 <menu+0x26f4>)
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003932:	f002 fa71 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003936:	2108      	movs	r1, #8
 8003938:	486a      	ldr	r0, [pc, #424]	; (8003ae4 <menu+0x2708>)
 800393a:	f006 f841 	bl	80099c0 <HAL_GPIO_ReadPin>
 800393e:	4603      	mov	r3, r0
 8003940:	2b01      	cmp	r3, #1
 8003942:	d118      	bne.n	8003976 <menu+0x259a>
 8003944:	4b68      	ldr	r3, [pc, #416]	; (8003ae8 <menu+0x270c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003952:	4b5f      	ldr	r3, [pc, #380]	; (8003ad0 <menu+0x26f4>)
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <menu+0x2710>)
 8003958:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800395a:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <menu+0x26f4>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d106      	bne.n	8003970 <menu+0x2594>
				altLimit = 1;
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <menu+0x2714>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003968:	4b61      	ldr	r3, [pc, #388]	; (8003af0 <menu+0x2714>)
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <menu+0x2710>)
 800396e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003970:	4b60      	ldr	r3, [pc, #384]	; (8003af4 <menu+0x2718>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003976:	4b60      	ldr	r3, [pc, #384]	; (8003af8 <menu+0x271c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b16      	cmp	r3, #22
 800397c:	f040 8081 	bne.w	8003a82 <menu+0x26a6>
		if(dilSecim == 0) {
 8003980:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <menu+0x26ec>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003988:	4a5c      	ldr	r2, [pc, #368]	; (8003afc <menu+0x2720>)
 800398a:	2101      	movs	r1, #1
 800398c:	2001      	movs	r0, #1
 800398e:	f7fc ff13 	bl	80007b8 <lcd_print>
 8003992:	e008      	b.n	80039a6 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003994:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <menu+0x26ec>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d104      	bne.n	80039a6 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 800399c:	4a58      	ldr	r2, [pc, #352]	; (8003b00 <menu+0x2724>)
 800399e:	2101      	movs	r1, #1
 80039a0:	2001      	movs	r0, #1
 80039a2:	f7fc ff09 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80039a6:	4b48      	ldr	r3, [pc, #288]	; (8003ac8 <menu+0x26ec>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d105      	bne.n	80039ba <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80039ae:	4a55      	ldr	r2, [pc, #340]	; (8003b04 <menu+0x2728>)
 80039b0:	2101      	movs	r1, #1
 80039b2:	2002      	movs	r0, #2
 80039b4:	f7fc ff00 	bl	80007b8 <lcd_print>
 80039b8:	e008      	b.n	80039cc <menu+0x25f0>
			} else if(dilSecim == 1){
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <menu+0x26ec>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d104      	bne.n	80039cc <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80039c2:	4a51      	ldr	r2, [pc, #324]	; (8003b08 <menu+0x272c>)
 80039c4:	2101      	movs	r1, #1
 80039c6:	2002      	movs	r0, #2
 80039c8:	f7fc fef6 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80039cc:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <menu+0x2730>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	220a      	movs	r2, #10
 80039d2:	494f      	ldr	r1, [pc, #316]	; (8003b10 <menu+0x2734>)
 80039d4:	4618      	mov	r0, r3
 80039d6:	f009 f81f 	bl	800ca18 <itoa>
		lcd_print(2,16,snum);
 80039da:	4a4d      	ldr	r2, [pc, #308]	; (8003b10 <menu+0x2734>)
 80039dc:	2110      	movs	r1, #16
 80039de:	2002      	movs	r0, #2
 80039e0:	f7fc feea 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e4:	2102      	movs	r1, #2
 80039e6:	483f      	ldr	r0, [pc, #252]	; (8003ae4 <menu+0x2708>)
 80039e8:	f005 ffea 	bl	80099c0 <HAL_GPIO_ReadPin>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d115      	bne.n	8003a1e <menu+0x2642>
 80039f2:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <menu+0x270c>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	f083 0301 	eor.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003a00:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <menu+0x2730>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <menu+0x2730>)
 8003a0a:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <menu+0x2730>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d902      	bls.n	8003a1a <menu+0x263e>
				yukariValfTmr = 0;
 8003a14:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <menu+0x2730>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a1a:	f002 f9fd 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a1e:	2104      	movs	r1, #4
 8003a20:	4830      	ldr	r0, [pc, #192]	; (8003ae4 <menu+0x2708>)
 8003a22:	f005 ffcd 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d115      	bne.n	8003a58 <menu+0x267c>
 8003a2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <menu+0x270c>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f083 0301 	eor.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00e      	beq.n	8003a58 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003a3a:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <menu+0x2730>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <menu+0x2730>)
 8003a44:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <menu+0x2730>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d902      	bls.n	8003a54 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <menu+0x2730>)
 8003a50:	2205      	movs	r2, #5
 8003a52:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a54:	f002 f9e0 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a58:	2108      	movs	r1, #8
 8003a5a:	4822      	ldr	r0, [pc, #136]	; (8003ae4 <menu+0x2708>)
 8003a5c:	f005 ffb0 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10d      	bne.n	8003a82 <menu+0x26a6>
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <menu+0x270c>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	f083 0301 	eor.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <menu+0x2730>)
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <menu+0x2710>)
 8003a7a:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <menu+0x2718>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <menu+0x271c>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b17      	cmp	r3, #23
 8003a88:	f040 80ac 	bne.w	8003be4 <menu+0x2808>
		if(dilSecim == 0) {
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <menu+0x26ec>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a94:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <menu+0x2738>)
 8003a96:	2101      	movs	r1, #1
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f7fc fe8d 	bl	80007b8 <lcd_print>
 8003a9e:	e008      	b.n	8003ab2 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <menu+0x26ec>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d104      	bne.n	8003ab2 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	; (8003b18 <menu+0x273c>)
 8003aaa:	2101      	movs	r1, #1
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7fc fe83 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <menu+0x26ec>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d130      	bne.n	8003b1c <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <menu+0x2728>)
 8003abc:	2101      	movs	r1, #1
 8003abe:	2002      	movs	r0, #2
 8003ac0:	f7fc fe7a 	bl	80007b8 <lcd_print>
 8003ac4:	e033      	b.n	8003b2e <menu+0x2752>
 8003ac6:	bf00      	nop
 8003ac8:	20000bb2 	.word	0x20000bb2
 8003acc:	0800de94 	.word	0x0800de94
 8003ad0:	20000ba4 	.word	0x20000ba4
 8003ad4:	0800de38 	.word	0x0800de38
 8003ad8:	0800de4c 	.word	0x0800de4c
 8003adc:	0800de5c 	.word	0x0800de5c
 8003ae0:	0800de70 	.word	0x0800de70
 8003ae4:	40010800 	.word	0x40010800
 8003ae8:	20000bc0 	.word	0x20000bc0
 8003aec:	20000ad4 	.word	0x20000ad4
 8003af0:	20000b97 	.word	0x20000b97
 8003af4:	20000bbd 	.word	0x20000bbd
 8003af8:	20000b91 	.word	0x20000b91
 8003afc:	0800dea4 	.word	0x0800dea4
 8003b00:	0800deb8 	.word	0x0800deb8
 8003b04:	0800db58 	.word	0x0800db58
 8003b08:	0800decc 	.word	0x0800decc
 8003b0c:	20000ba5 	.word	0x20000ba5
 8003b10:	20000b14 	.word	0x20000b14
 8003b14:	0800dedc 	.word	0x0800dedc
 8003b18:	0800def0 	.word	0x0800def0
			} else if(dilSecim == 1) {
 8003b1c:	4b98      	ldr	r3, [pc, #608]	; (8003d80 <menu+0x29a4>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d104      	bne.n	8003b2e <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003b24:	4a97      	ldr	r2, [pc, #604]	; (8003d84 <menu+0x29a8>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f7fc fe45 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003b2e:	4b96      	ldr	r3, [pc, #600]	; (8003d88 <menu+0x29ac>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	220a      	movs	r2, #10
 8003b34:	4995      	ldr	r1, [pc, #596]	; (8003d8c <menu+0x29b0>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f008 ff6e 	bl	800ca18 <itoa>
		lcd_print(2,16,snum);
 8003b3c:	4a93      	ldr	r2, [pc, #588]	; (8003d8c <menu+0x29b0>)
 8003b3e:	2110      	movs	r1, #16
 8003b40:	2002      	movs	r0, #2
 8003b42:	f7fc fe39 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b46:	2102      	movs	r1, #2
 8003b48:	4891      	ldr	r0, [pc, #580]	; (8003d90 <menu+0x29b4>)
 8003b4a:	f005 ff39 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d115      	bne.n	8003b80 <menu+0x27a4>
 8003b54:	4b8f      	ldr	r3, [pc, #572]	; (8003d94 <menu+0x29b8>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f083 0301 	eor.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003b62:	4b89      	ldr	r3, [pc, #548]	; (8003d88 <menu+0x29ac>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	3301      	adds	r3, #1
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4b87      	ldr	r3, [pc, #540]	; (8003d88 <menu+0x29ac>)
 8003b6c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003b6e:	4b86      	ldr	r3, [pc, #536]	; (8003d88 <menu+0x29ac>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d902      	bls.n	8003b7c <menu+0x27a0>
				asagiValfTmr = 0;
 8003b76:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <menu+0x29ac>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b7c:	f002 f94c 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b80:	2104      	movs	r1, #4
 8003b82:	4883      	ldr	r0, [pc, #524]	; (8003d90 <menu+0x29b4>)
 8003b84:	f005 ff1c 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d115      	bne.n	8003bba <menu+0x27de>
 8003b8e:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <menu+0x29b8>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	f083 0301 	eor.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00e      	beq.n	8003bba <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b9c:	4b7a      	ldr	r3, [pc, #488]	; (8003d88 <menu+0x29ac>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b78      	ldr	r3, [pc, #480]	; (8003d88 <menu+0x29ac>)
 8003ba6:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003ba8:	4b77      	ldr	r3, [pc, #476]	; (8003d88 <menu+0x29ac>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b06      	cmp	r3, #6
 8003bae:	d902      	bls.n	8003bb6 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003bb0:	4b75      	ldr	r3, [pc, #468]	; (8003d88 <menu+0x29ac>)
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003bb6:	f002 f92f 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bba:	2108      	movs	r1, #8
 8003bbc:	4874      	ldr	r0, [pc, #464]	; (8003d90 <menu+0x29b4>)
 8003bbe:	f005 feff 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d10d      	bne.n	8003be4 <menu+0x2808>
 8003bc8:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <menu+0x29b8>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f083 0301 	eor.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <menu+0x29ac>)
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <menu+0x29bc>)
 8003bdc:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003bde:	4b6f      	ldr	r3, [pc, #444]	; (8003d9c <menu+0x29c0>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003be4:	4b6e      	ldr	r3, [pc, #440]	; (8003da0 <menu+0x29c4>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b18      	cmp	r3, #24
 8003bea:	f040 809d 	bne.w	8003d28 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003bee:	4b6d      	ldr	r3, [pc, #436]	; (8003da4 <menu+0x29c8>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d113      	bne.n	8003c1e <menu+0x2842>
			if(dilSecim == 0) {
 8003bf6:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <menu+0x29a4>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003bfe:	4a6a      	ldr	r2, [pc, #424]	; (8003da8 <menu+0x29cc>)
 8003c00:	2101      	movs	r1, #1
 8003c02:	2001      	movs	r0, #1
 8003c04:	f7fc fdd8 	bl	80007b8 <lcd_print>
 8003c08:	e020      	b.n	8003c4c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c0a:	4b5d      	ldr	r3, [pc, #372]	; (8003d80 <menu+0x29a4>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d11c      	bne.n	8003c4c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003c12:	4a66      	ldr	r2, [pc, #408]	; (8003dac <menu+0x29d0>)
 8003c14:	2101      	movs	r1, #1
 8003c16:	2001      	movs	r0, #1
 8003c18:	f7fc fdce 	bl	80007b8 <lcd_print>
 8003c1c:	e016      	b.n	8003c4c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c1e:	4b61      	ldr	r3, [pc, #388]	; (8003da4 <menu+0x29c8>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d112      	bne.n	8003c4c <menu+0x2870>
			if(dilSecim == 0) {
 8003c26:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <menu+0x29a4>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d105      	bne.n	8003c3a <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003c2e:	4a60      	ldr	r2, [pc, #384]	; (8003db0 <menu+0x29d4>)
 8003c30:	2101      	movs	r1, #1
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7fc fdc0 	bl	80007b8 <lcd_print>
 8003c38:	e008      	b.n	8003c4c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <menu+0x29a4>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d104      	bne.n	8003c4c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003c42:	4a5c      	ldr	r2, [pc, #368]	; (8003db4 <menu+0x29d8>)
 8003c44:	2101      	movs	r1, #1
 8003c46:	2001      	movs	r0, #1
 8003c48:	f7fc fdb6 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <menu+0x29a4>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c54:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <menu+0x29dc>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f7fc fdad 	bl	80007b8 <lcd_print>
 8003c5e:	e008      	b.n	8003c72 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003c60:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <menu+0x29a4>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d104      	bne.n	8003c72 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003c68:	4a46      	ldr	r2, [pc, #280]	; (8003d84 <menu+0x29a8>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	f7fc fda3 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003c72:	4b52      	ldr	r3, [pc, #328]	; (8003dbc <menu+0x29e0>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	220a      	movs	r2, #10
 8003c78:	4944      	ldr	r1, [pc, #272]	; (8003d8c <menu+0x29b0>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f008 fecc 	bl	800ca18 <itoa>
		lcd_print(2, 16, snum);
 8003c80:	4a42      	ldr	r2, [pc, #264]	; (8003d8c <menu+0x29b0>)
 8003c82:	2110      	movs	r1, #16
 8003c84:	2002      	movs	r0, #2
 8003c86:	f7fc fd97 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	4840      	ldr	r0, [pc, #256]	; (8003d90 <menu+0x29b4>)
 8003c8e:	f005 fe97 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d115      	bne.n	8003cc4 <menu+0x28e8>
 8003c98:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <menu+0x29b8>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	f083 0301 	eor.w	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00e      	beq.n	8003cc4 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003ca6:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <menu+0x29e0>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	3301      	adds	r3, #1
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <menu+0x29e0>)
 8003cb0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <menu+0x29e0>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d902      	bls.n	8003cc0 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003cba:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <menu+0x29e0>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cc0:	f002 f8aa 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc4:	2104      	movs	r1, #4
 8003cc6:	4832      	ldr	r0, [pc, #200]	; (8003d90 <menu+0x29b4>)
 8003cc8:	f005 fe7a 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d115      	bne.n	8003cfe <menu+0x2922>
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <menu+0x29b8>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f083 0301 	eor.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00e      	beq.n	8003cfe <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003ce0:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <menu+0x29e0>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <menu+0x29e0>)
 8003cea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003cec:	4b33      	ldr	r3, [pc, #204]	; (8003dbc <menu+0x29e0>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b06      	cmp	r3, #6
 8003cf2:	d902      	bls.n	8003cfa <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003cf4:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <menu+0x29e0>)
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cfa:	f002 f88d 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cfe:	2108      	movs	r1, #8
 8003d00:	4823      	ldr	r0, [pc, #140]	; (8003d90 <menu+0x29b4>)
 8003d02:	f005 fe5d 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d10d      	bne.n	8003d28 <menu+0x294c>
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <menu+0x29b8>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	f083 0301 	eor.w	r3, r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003d1a:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <menu+0x29e0>)
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <menu+0x29bc>)
 8003d20:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <menu+0x29c0>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <menu+0x29c4>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b19      	cmp	r3, #25
 8003d2e:	f040 80c4 	bne.w	8003eba <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003d32:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <menu+0x29c8>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d113      	bne.n	8003d62 <menu+0x2986>
			if(dilSecim == 0) {
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <menu+0x29a4>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003d42:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <menu+0x29e4>)
 8003d44:	2101      	movs	r1, #1
 8003d46:	2001      	movs	r0, #1
 8003d48:	f7fc fd36 	bl	80007b8 <lcd_print>
 8003d4c:	e047      	b.n	8003dde <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <menu+0x29a4>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d143      	bne.n	8003dde <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003d56:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <menu+0x29e8>)
 8003d58:	2101      	movs	r1, #1
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f7fc fd2c 	bl	80007b8 <lcd_print>
 8003d60:	e03d      	b.n	8003dde <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <menu+0x29c8>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d139      	bne.n	8003dde <menu+0x2a02>
			if(dilSecim == 0) {
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <menu+0x29a4>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d12c      	bne.n	8003dcc <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <menu+0x29ec>)
 8003d74:	2101      	movs	r1, #1
 8003d76:	2001      	movs	r0, #1
 8003d78:	f7fc fd1e 	bl	80007b8 <lcd_print>
 8003d7c:	e02f      	b.n	8003dde <menu+0x2a02>
 8003d7e:	bf00      	nop
 8003d80:	20000bb2 	.word	0x20000bb2
 8003d84:	0800decc 	.word	0x0800decc
 8003d88:	20000ba6 	.word	0x20000ba6
 8003d8c:	20000b14 	.word	0x20000b14
 8003d90:	40010800 	.word	0x40010800
 8003d94:	20000bc0 	.word	0x20000bc0
 8003d98:	20000ad4 	.word	0x20000ad4
 8003d9c:	20000bbd 	.word	0x20000bbd
 8003da0:	20000b91 	.word	0x20000b91
 8003da4:	20000ba0 	.word	0x20000ba0
 8003da8:	0800df04 	.word	0x0800df04
 8003dac:	0800df18 	.word	0x0800df18
 8003db0:	0800df2c 	.word	0x0800df2c
 8003db4:	0800df40 	.word	0x0800df40
 8003db8:	0800db58 	.word	0x0800db58
 8003dbc:	20000ba7 	.word	0x20000ba7
 8003dc0:	0800df54 	.word	0x0800df54
 8003dc4:	0800df68 	.word	0x0800df68
 8003dc8:	0800df7c 	.word	0x0800df7c
			} else if(dilSecim == 1) {
 8003dcc:	4b73      	ldr	r3, [pc, #460]	; (8003f9c <menu+0x2bc0>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d104      	bne.n	8003dde <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003dd4:	4a72      	ldr	r2, [pc, #456]	; (8003fa0 <menu+0x2bc4>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7fc fced 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003dde:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <menu+0x2bc0>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003de6:	4a6f      	ldr	r2, [pc, #444]	; (8003fa4 <menu+0x2bc8>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	2002      	movs	r0, #2
 8003dec:	f7fc fce4 	bl	80007b8 <lcd_print>
 8003df0:	e008      	b.n	8003e04 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003df2:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <menu+0x2bc0>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d104      	bne.n	8003e04 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003dfa:	4a6b      	ldr	r2, [pc, #428]	; (8003fa8 <menu+0x2bcc>)
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	2002      	movs	r0, #2
 8003e00:	f7fc fcda 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003e04:	4b69      	ldr	r3, [pc, #420]	; (8003fac <menu+0x2bd0>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	220a      	movs	r2, #10
 8003e0a:	4969      	ldr	r1, [pc, #420]	; (8003fb0 <menu+0x2bd4>)
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f008 fe03 	bl	800ca18 <itoa>
		lcd_print(2,16,snum);
 8003e12:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <menu+0x2bd4>)
 8003e14:	2110      	movs	r1, #16
 8003e16:	2002      	movs	r0, #2
 8003e18:	f7fc fcce 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4865      	ldr	r0, [pc, #404]	; (8003fb4 <menu+0x2bd8>)
 8003e20:	f005 fdce 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d115      	bne.n	8003e56 <menu+0x2a7a>
 8003e2a:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <menu+0x2bdc>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	f083 0301 	eor.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003e38:	4b5c      	ldr	r3, [pc, #368]	; (8003fac <menu+0x2bd0>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <menu+0x2bd0>)
 8003e42:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003e44:	4b59      	ldr	r3, [pc, #356]	; (8003fac <menu+0x2bd0>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d902      	bls.n	8003e52 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003e4c:	4b57      	ldr	r3, [pc, #348]	; (8003fac <menu+0x2bd0>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e52:	f001 ffe1 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e56:	2104      	movs	r1, #4
 8003e58:	4856      	ldr	r0, [pc, #344]	; (8003fb4 <menu+0x2bd8>)
 8003e5a:	f005 fdb1 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d115      	bne.n	8003e90 <menu+0x2ab4>
 8003e64:	4b54      	ldr	r3, [pc, #336]	; (8003fb8 <menu+0x2bdc>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	f083 0301 	eor.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00e      	beq.n	8003e90 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003e72:	4b4e      	ldr	r3, [pc, #312]	; (8003fac <menu+0x2bd0>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b4c      	ldr	r3, [pc, #304]	; (8003fac <menu+0x2bd0>)
 8003e7c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <menu+0x2bd0>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d902      	bls.n	8003e8c <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003e86:	4b49      	ldr	r3, [pc, #292]	; (8003fac <menu+0x2bd0>)
 8003e88:	2205      	movs	r2, #5
 8003e8a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e8c:	f001 ffc4 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e90:	2108      	movs	r1, #8
 8003e92:	4848      	ldr	r0, [pc, #288]	; (8003fb4 <menu+0x2bd8>)
 8003e94:	f005 fd94 	bl	80099c0 <HAL_GPIO_ReadPin>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d10d      	bne.n	8003eba <menu+0x2ade>
 8003e9e:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <menu+0x2bdc>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	f083 0301 	eor.w	r3, r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003eac:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <menu+0x2bd0>)
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <menu+0x2be0>)
 8003eb2:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003eb4:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <menu+0x2be4>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003eba:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <menu+0x2be8>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b1a      	cmp	r3, #26
 8003ec0:	f040 80ec 	bne.w	800409c <menu+0x2cc0>
		if(dilSecim == 0) {
 8003ec4:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <menu+0x2bc0>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003ecc:	4a3e      	ldr	r2, [pc, #248]	; (8003fc8 <menu+0x2bec>)
 8003ece:	2101      	movs	r1, #1
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f7fc fc71 	bl	80007b8 <lcd_print>
 8003ed6:	e008      	b.n	8003eea <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003ed8:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <menu+0x2bc0>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d104      	bne.n	8003eea <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003ee0:	4a3a      	ldr	r2, [pc, #232]	; (8003fcc <menu+0x2bf0>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7fc fc67 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003eea:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <menu+0x2bf4>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b63      	cmp	r3, #99	; 0x63
 8003ef0:	d91e      	bls.n	8003f30 <menu+0x2b54>
			if(dilSecim == 0) {
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <menu+0x2bc0>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003efa:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <menu+0x2bc8>)
 8003efc:	2101      	movs	r1, #1
 8003efe:	2002      	movs	r0, #2
 8003f00:	f7fc fc5a 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <menu+0x2bc0>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d104      	bne.n	8003f16 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003f0c:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <menu+0x2bcc>)
 8003f0e:	2101      	movs	r1, #1
 8003f10:	2002      	movs	r0, #2
 8003f12:	f7fc fc51 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f16:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <menu+0x2bf4>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	220a      	movs	r2, #10
 8003f1c:	4924      	ldr	r1, [pc, #144]	; (8003fb0 <menu+0x2bd4>)
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f008 fd7a 	bl	800ca18 <itoa>
			lcd_print(2,14,snum);
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <menu+0x2bd4>)
 8003f26:	210e      	movs	r1, #14
 8003f28:	2002      	movs	r0, #2
 8003f2a:	f7fc fc45 	bl	80007b8 <lcd_print>
 8003f2e:	e066      	b.n	8003ffe <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <menu+0x2bf4>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b09      	cmp	r3, #9
 8003f36:	d923      	bls.n	8003f80 <menu+0x2ba4>
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <menu+0x2bf4>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b63      	cmp	r3, #99	; 0x63
 8003f3e:	d81f      	bhi.n	8003f80 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003f40:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <menu+0x2bc0>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <menu+0x2bc8>)
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f7fc fc33 	bl	80007b8 <lcd_print>
 8003f52:	e008      	b.n	8003f66 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <menu+0x2bc0>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d104      	bne.n	8003f66 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003f5c:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <menu+0x2bcc>)
 8003f5e:	2101      	movs	r1, #1
 8003f60:	2002      	movs	r0, #2
 8003f62:	f7fc fc29 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <menu+0x2bf4>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	220a      	movs	r2, #10
 8003f6c:	4910      	ldr	r1, [pc, #64]	; (8003fb0 <menu+0x2bd4>)
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f008 fd52 	bl	800ca18 <itoa>
			lcd_print(2, 15, snum);
 8003f74:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <menu+0x2bd4>)
 8003f76:	210f      	movs	r1, #15
 8003f78:	2002      	movs	r0, #2
 8003f7a:	f7fc fc1d 	bl	80007b8 <lcd_print>
 8003f7e:	e03e      	b.n	8003ffe <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <menu+0x2bf4>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	d83a      	bhi.n	8003ffe <menu+0x2c22>
			if(dilSecim == 0) {
 8003f88:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <menu+0x2bc0>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d121      	bne.n	8003fd4 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <menu+0x2bc8>)
 8003f92:	2101      	movs	r1, #1
 8003f94:	2002      	movs	r0, #2
 8003f96:	f7fc fc0f 	bl	80007b8 <lcd_print>
 8003f9a:	e024      	b.n	8003fe6 <menu+0x2c0a>
 8003f9c:	20000bb2 	.word	0x20000bb2
 8003fa0:	0800df90 	.word	0x0800df90
 8003fa4:	0800db58 	.word	0x0800db58
 8003fa8:	0800decc 	.word	0x0800decc
 8003fac:	20000ba8 	.word	0x20000ba8
 8003fb0:	20000b14 	.word	0x20000b14
 8003fb4:	40010800 	.word	0x40010800
 8003fb8:	20000bc0 	.word	0x20000bc0
 8003fbc:	20000ad4 	.word	0x20000ad4
 8003fc0:	20000bbd 	.word	0x20000bbd
 8003fc4:	20000b91 	.word	0x20000b91
 8003fc8:	0800dfa4 	.word	0x0800dfa4
 8003fcc:	0800dfb8 	.word	0x0800dfb8
 8003fd0:	20000ba9 	.word	0x20000ba9
			} else if(dilSecim == 1) {
 8003fd4:	4b8f      	ldr	r3, [pc, #572]	; (8004214 <menu+0x2e38>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d104      	bne.n	8003fe6 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003fdc:	4a8e      	ldr	r2, [pc, #568]	; (8004218 <menu+0x2e3c>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	2002      	movs	r0, #2
 8003fe2:	f7fc fbe9 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fe6:	4b8d      	ldr	r3, [pc, #564]	; (800421c <menu+0x2e40>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	220a      	movs	r2, #10
 8003fec:	498c      	ldr	r1, [pc, #560]	; (8004220 <menu+0x2e44>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f008 fd12 	bl	800ca18 <itoa>
			lcd_print(2, 16, snum);
 8003ff4:	4a8a      	ldr	r2, [pc, #552]	; (8004220 <menu+0x2e44>)
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	f7fc fbdd 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ffe:	2102      	movs	r1, #2
 8004000:	4888      	ldr	r0, [pc, #544]	; (8004224 <menu+0x2e48>)
 8004002:	f005 fcdd 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004006:	4603      	mov	r3, r0
 8004008:	2b01      	cmp	r3, #1
 800400a:	d115      	bne.n	8004038 <menu+0x2c5c>
 800400c:	4b86      	ldr	r3, [pc, #536]	; (8004228 <menu+0x2e4c>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f083 0301 	eor.w	r3, r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00e      	beq.n	8004038 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 800401a:	4b80      	ldr	r3, [pc, #512]	; (800421c <menu+0x2e40>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	b2da      	uxtb	r2, r3
 8004022:	4b7e      	ldr	r3, [pc, #504]	; (800421c <menu+0x2e40>)
 8004024:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004026:	4b7d      	ldr	r3, [pc, #500]	; (800421c <menu+0x2e40>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2bb4      	cmp	r3, #180	; 0xb4
 800402c:	d902      	bls.n	8004034 <menu+0x2c58>
				makineCalismaTmr = 0;
 800402e:	4b7b      	ldr	r3, [pc, #492]	; (800421c <menu+0x2e40>)
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004034:	f001 fef0 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004038:	2104      	movs	r1, #4
 800403a:	487a      	ldr	r0, [pc, #488]	; (8004224 <menu+0x2e48>)
 800403c:	f005 fcc0 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004040:	4603      	mov	r3, r0
 8004042:	2b01      	cmp	r3, #1
 8004044:	d115      	bne.n	8004072 <menu+0x2c96>
 8004046:	4b78      	ldr	r3, [pc, #480]	; (8004228 <menu+0x2e4c>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	f083 0301 	eor.w	r3, r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004054:	4b71      	ldr	r3, [pc, #452]	; (800421c <menu+0x2e40>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	3b01      	subs	r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	4b6f      	ldr	r3, [pc, #444]	; (800421c <menu+0x2e40>)
 800405e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004060:	4b6e      	ldr	r3, [pc, #440]	; (800421c <menu+0x2e40>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2bb5      	cmp	r3, #181	; 0xb5
 8004066:	d902      	bls.n	800406e <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8004068:	4b6c      	ldr	r3, [pc, #432]	; (800421c <menu+0x2e40>)
 800406a:	22b4      	movs	r2, #180	; 0xb4
 800406c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800406e:	f001 fed3 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004072:	2108      	movs	r1, #8
 8004074:	486b      	ldr	r0, [pc, #428]	; (8004224 <menu+0x2e48>)
 8004076:	f005 fca3 	bl	80099c0 <HAL_GPIO_ReadPin>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d10d      	bne.n	800409c <menu+0x2cc0>
 8004080:	4b69      	ldr	r3, [pc, #420]	; (8004228 <menu+0x2e4c>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	f083 0301 	eor.w	r3, r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <menu+0x2e40>)
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	4b66      	ldr	r3, [pc, #408]	; (800422c <menu+0x2e50>)
 8004094:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004096:	4b66      	ldr	r3, [pc, #408]	; (8004230 <menu+0x2e54>)
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 800409c:	4b65      	ldr	r3, [pc, #404]	; (8004234 <menu+0x2e58>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b1b      	cmp	r3, #27
 80040a2:	f040 8083 	bne.w	80041ac <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 80040a6:	4a64      	ldr	r2, [pc, #400]	; (8004238 <menu+0x2e5c>)
 80040a8:	2101      	movs	r1, #1
 80040aa:	2001      	movs	r0, #1
 80040ac:	f7fc fb84 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <menu+0x2e60>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d113      	bne.n	80040e0 <menu+0x2d04>
			if(dilSecim == 0) {
 80040b8:	4b56      	ldr	r3, [pc, #344]	; (8004214 <menu+0x2e38>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80040c0:	4a5f      	ldr	r2, [pc, #380]	; (8004240 <menu+0x2e64>)
 80040c2:	2101      	movs	r1, #1
 80040c4:	2002      	movs	r0, #2
 80040c6:	f7fc fb77 	bl	80007b8 <lcd_print>
 80040ca:	e020      	b.n	800410e <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040cc:	4b51      	ldr	r3, [pc, #324]	; (8004214 <menu+0x2e38>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d11c      	bne.n	800410e <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80040d4:	4a5b      	ldr	r2, [pc, #364]	; (8004244 <menu+0x2e68>)
 80040d6:	2101      	movs	r1, #1
 80040d8:	2002      	movs	r0, #2
 80040da:	f7fc fb6d 	bl	80007b8 <lcd_print>
 80040de:	e016      	b.n	800410e <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80040e0:	4b56      	ldr	r3, [pc, #344]	; (800423c <menu+0x2e60>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d112      	bne.n	800410e <menu+0x2d32>
			if(dilSecim == 0) {
 80040e8:	4b4a      	ldr	r3, [pc, #296]	; (8004214 <menu+0x2e38>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80040f0:	4a55      	ldr	r2, [pc, #340]	; (8004248 <menu+0x2e6c>)
 80040f2:	2101      	movs	r1, #1
 80040f4:	2002      	movs	r0, #2
 80040f6:	f7fc fb5f 	bl	80007b8 <lcd_print>
 80040fa:	e008      	b.n	800410e <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040fc:	4b45      	ldr	r3, [pc, #276]	; (8004214 <menu+0x2e38>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d104      	bne.n	800410e <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004104:	4a51      	ldr	r2, [pc, #324]	; (800424c <menu+0x2e70>)
 8004106:	2101      	movs	r1, #1
 8004108:	2002      	movs	r0, #2
 800410a:	f7fc fb55 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800410e:	2102      	movs	r1, #2
 8004110:	4844      	ldr	r0, [pc, #272]	; (8004224 <menu+0x2e48>)
 8004112:	f005 fc55 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d115      	bne.n	8004148 <menu+0x2d6c>
 800411c:	4b42      	ldr	r3, [pc, #264]	; (8004228 <menu+0x2e4c>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	f083 0301 	eor.w	r3, r3, #1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00e      	beq.n	8004148 <menu+0x2d6c>
			buzzer = buzzer + 1;
 800412a:	4b44      	ldr	r3, [pc, #272]	; (800423c <menu+0x2e60>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	b2da      	uxtb	r2, r3
 8004132:	4b42      	ldr	r3, [pc, #264]	; (800423c <menu+0x2e60>)
 8004134:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004136:	4b41      	ldr	r3, [pc, #260]	; (800423c <menu+0x2e60>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d902      	bls.n	8004144 <menu+0x2d68>
				buzzer = 0;
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <menu+0x2e60>)
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004144:	f001 fe68 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004148:	2104      	movs	r1, #4
 800414a:	4836      	ldr	r0, [pc, #216]	; (8004224 <menu+0x2e48>)
 800414c:	f005 fc38 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004150:	4603      	mov	r3, r0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d115      	bne.n	8004182 <menu+0x2da6>
 8004156:	4b34      	ldr	r3, [pc, #208]	; (8004228 <menu+0x2e4c>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	f083 0301 	eor.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00e      	beq.n	8004182 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004164:	4b35      	ldr	r3, [pc, #212]	; (800423c <menu+0x2e60>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	3b01      	subs	r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	4b33      	ldr	r3, [pc, #204]	; (800423c <menu+0x2e60>)
 800416e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <menu+0x2e60>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <menu+0x2da2>
		   		buzzer = 1;
 8004178:	4b30      	ldr	r3, [pc, #192]	; (800423c <menu+0x2e60>)
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800417e:	f001 fe4b 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004182:	2108      	movs	r1, #8
 8004184:	4827      	ldr	r0, [pc, #156]	; (8004224 <menu+0x2e48>)
 8004186:	f005 fc1b 	bl	80099c0 <HAL_GPIO_ReadPin>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10d      	bne.n	80041ac <menu+0x2dd0>
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <menu+0x2e4c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f083 0301 	eor.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <menu+0x2dd0>
			eepromData[25] = buzzer;
 800419e:	4b27      	ldr	r3, [pc, #156]	; (800423c <menu+0x2e60>)
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <menu+0x2e50>)
 80041a4:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <menu+0x2e54>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80041ac:	4b21      	ldr	r3, [pc, #132]	; (8004234 <menu+0x2e58>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b1c      	cmp	r3, #28
 80041b2:	f040 80ab 	bne.w	800430c <menu+0x2f30>
		calismaSayModu = 0;
 80041b6:	4b26      	ldr	r3, [pc, #152]	; (8004250 <menu+0x2e74>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80041bc:	4a25      	ldr	r2, [pc, #148]	; (8004254 <menu+0x2e78>)
 80041be:	2101      	movs	r1, #1
 80041c0:	2001      	movs	r0, #1
 80041c2:	f7fc faf9 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <menu+0x2e7c>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d113      	bne.n	80041f6 <menu+0x2e1a>
			if(dilSecim == 0) {
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <menu+0x2e38>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80041d6:	4a1a      	ldr	r2, [pc, #104]	; (8004240 <menu+0x2e64>)
 80041d8:	2101      	movs	r1, #1
 80041da:	2002      	movs	r0, #2
 80041dc:	f7fc faec 	bl	80007b8 <lcd_print>
 80041e0:	e045      	b.n	800426e <menu+0x2e92>
			} else if(dilSecim == 1) {
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <menu+0x2e38>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d141      	bne.n	800426e <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80041ea:	4a16      	ldr	r2, [pc, #88]	; (8004244 <menu+0x2e68>)
 80041ec:	2101      	movs	r1, #1
 80041ee:	2002      	movs	r0, #2
 80041f0:	f7fc fae2 	bl	80007b8 <lcd_print>
 80041f4:	e03b      	b.n	800426e <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <menu+0x2e7c>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d137      	bne.n	800426e <menu+0x2e92>
			if(dilSecim == 0){
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <menu+0x2e38>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d12a      	bne.n	800425c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <menu+0x2e6c>)
 8004208:	2101      	movs	r1, #1
 800420a:	2002      	movs	r0, #2
 800420c:	f7fc fad4 	bl	80007b8 <lcd_print>
 8004210:	e02d      	b.n	800426e <menu+0x2e92>
 8004212:	bf00      	nop
 8004214:	20000bb2 	.word	0x20000bb2
 8004218:	0800decc 	.word	0x0800decc
 800421c:	20000ba9 	.word	0x20000ba9
 8004220:	20000b14 	.word	0x20000b14
 8004224:	40010800 	.word	0x40010800
 8004228:	20000bc0 	.word	0x20000bc0
 800422c:	20000ad4 	.word	0x20000ad4
 8004230:	20000bbd 	.word	0x20000bbd
 8004234:	20000b91 	.word	0x20000b91
 8004238:	0800dfcc 	.word	0x0800dfcc
 800423c:	20000bad 	.word	0x20000bad
 8004240:	0800d8f4 	.word	0x0800d8f4
 8004244:	0800d908 	.word	0x0800d908
 8004248:	0800d954 	.word	0x0800d954
 800424c:	0800d968 	.word	0x0800d968
 8004250:	20000bb1 	.word	0x20000bb1
 8004254:	0800dfe0 	.word	0x0800dfe0
 8004258:	20000baf 	.word	0x20000baf
			} else if(dilSecim == 1) {
 800425c:	4b71      	ldr	r3, [pc, #452]	; (8004424 <menu+0x3048>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d104      	bne.n	800426e <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004264:	4a70      	ldr	r2, [pc, #448]	; (8004428 <menu+0x304c>)
 8004266:	2101      	movs	r1, #1
 8004268:	2002      	movs	r0, #2
 800426a:	f7fc faa5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800426e:	2102      	movs	r1, #2
 8004270:	486e      	ldr	r0, [pc, #440]	; (800442c <menu+0x3050>)
 8004272:	f005 fba5 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d115      	bne.n	80042a8 <menu+0x2ecc>
 800427c:	4b6c      	ldr	r3, [pc, #432]	; (8004430 <menu+0x3054>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	f083 0301 	eor.w	r3, r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00e      	beq.n	80042a8 <menu+0x2ecc>
			demoMode = demoMode + 1;
 800428a:	4b6a      	ldr	r3, [pc, #424]	; (8004434 <menu+0x3058>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	3301      	adds	r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b68      	ldr	r3, [pc, #416]	; (8004434 <menu+0x3058>)
 8004294:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004296:	4b67      	ldr	r3, [pc, #412]	; (8004434 <menu+0x3058>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d902      	bls.n	80042a4 <menu+0x2ec8>
				demoMode = 0;
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <menu+0x3058>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042a4:	f001 fdb8 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042a8:	2104      	movs	r1, #4
 80042aa:	4860      	ldr	r0, [pc, #384]	; (800442c <menu+0x3050>)
 80042ac:	f005 fb88 	bl	80099c0 <HAL_GPIO_ReadPin>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d115      	bne.n	80042e2 <menu+0x2f06>
 80042b6:	4b5e      	ldr	r3, [pc, #376]	; (8004430 <menu+0x3054>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f083 0301 	eor.w	r3, r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <menu+0x2f06>
			demoMode = demoMode - 1;
 80042c4:	4b5b      	ldr	r3, [pc, #364]	; (8004434 <menu+0x3058>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <menu+0x3058>)
 80042ce:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80042d0:	4b58      	ldr	r3, [pc, #352]	; (8004434 <menu+0x3058>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <menu+0x2f02>
		   		demoMode = 1;
 80042d8:	4b56      	ldr	r3, [pc, #344]	; (8004434 <menu+0x3058>)
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042de:	f001 fd9b 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042e2:	2108      	movs	r1, #8
 80042e4:	4851      	ldr	r0, [pc, #324]	; (800442c <menu+0x3050>)
 80042e6:	f005 fb6b 	bl	80099c0 <HAL_GPIO_ReadPin>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10d      	bne.n	800430c <menu+0x2f30>
 80042f0:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <menu+0x3054>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f083 0301 	eor.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <menu+0x2f30>
			eepromData[26] = demoMode;
 80042fe:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <menu+0x3058>)
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	4b4d      	ldr	r3, [pc, #308]	; (8004438 <menu+0x305c>)
 8004304:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004306:	4b4d      	ldr	r3, [pc, #308]	; (800443c <menu+0x3060>)
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800430c:	4b4c      	ldr	r3, [pc, #304]	; (8004440 <menu+0x3064>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b1d      	cmp	r3, #29
 8004312:	f040 8132 	bne.w	800457a <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004316:	4b4b      	ldr	r3, [pc, #300]	; (8004444 <menu+0x3068>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d113      	bne.n	8004346 <menu+0x2f6a>
 800431e:	4b4a      	ldr	r3, [pc, #296]	; (8004448 <menu+0x306c>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <menu+0x2f6a>
 8004326:	4b49      	ldr	r3, [pc, #292]	; (800444c <menu+0x3070>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <menu+0x2f6a>
 800432e:	4b48      	ldr	r3, [pc, #288]	; (8004450 <menu+0x3074>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d107      	bne.n	8004346 <menu+0x2f6a>
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <menu+0x3078>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800433e:	4b46      	ldr	r3, [pc, #280]	; (8004458 <menu+0x307c>)
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e002      	b.n	800434c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <menu+0x307c>)
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800434c:	4b43      	ldr	r3, [pc, #268]	; (800445c <menu+0x3080>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d154      	bne.n	80043fe <menu+0x3022>
			if(dilSecim == 0) {
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <menu+0x3048>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800435c:	4a40      	ldr	r2, [pc, #256]	; (8004460 <menu+0x3084>)
 800435e:	2101      	movs	r1, #1
 8004360:	2001      	movs	r0, #1
 8004362:	f7fc fa29 	bl	80007b8 <lcd_print>
 8004366:	e008      	b.n	800437a <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004368:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <menu+0x3048>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d104      	bne.n	800437a <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004370:	4a3c      	ldr	r2, [pc, #240]	; (8004464 <menu+0x3088>)
 8004372:	2101      	movs	r1, #1
 8004374:	2001      	movs	r0, #1
 8004376:	f7fc fa1f 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800437a:	4b36      	ldr	r3, [pc, #216]	; (8004454 <menu+0x3078>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	220a      	movs	r2, #10
 8004380:	4939      	ldr	r1, [pc, #228]	; (8004468 <menu+0x308c>)
 8004382:	4618      	mov	r0, r3
 8004384:	f008 fb48 	bl	800ca18 <itoa>
			lcd_print(2, 12, snum);
 8004388:	4a37      	ldr	r2, [pc, #220]	; (8004468 <menu+0x308c>)
 800438a:	210c      	movs	r1, #12
 800438c:	2002      	movs	r0, #2
 800438e:	f7fc fa13 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004392:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <menu+0x3074>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	220a      	movs	r2, #10
 8004398:	4933      	ldr	r1, [pc, #204]	; (8004468 <menu+0x308c>)
 800439a:	4618      	mov	r0, r3
 800439c:	f008 fb3c 	bl	800ca18 <itoa>
			lcd_print(2, 13, snum);
 80043a0:	4a31      	ldr	r2, [pc, #196]	; (8004468 <menu+0x308c>)
 80043a2:	210d      	movs	r1, #13
 80043a4:	2002      	movs	r0, #2
 80043a6:	f7fc fa07 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80043aa:	4b28      	ldr	r3, [pc, #160]	; (800444c <menu+0x3070>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	220a      	movs	r2, #10
 80043b0:	492d      	ldr	r1, [pc, #180]	; (8004468 <menu+0x308c>)
 80043b2:	4618      	mov	r0, r3
 80043b4:	f008 fb30 	bl	800ca18 <itoa>
			lcd_print(2, 14, snum);
 80043b8:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <menu+0x308c>)
 80043ba:	210e      	movs	r1, #14
 80043bc:	2002      	movs	r0, #2
 80043be:	f7fc f9fb 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80043c2:	4b21      	ldr	r3, [pc, #132]	; (8004448 <menu+0x306c>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	220a      	movs	r2, #10
 80043c8:	4927      	ldr	r1, [pc, #156]	; (8004468 <menu+0x308c>)
 80043ca:	4618      	mov	r0, r3
 80043cc:	f008 fb24 	bl	800ca18 <itoa>
			lcd_print(2, 15, snum);
 80043d0:	4a25      	ldr	r2, [pc, #148]	; (8004468 <menu+0x308c>)
 80043d2:	210f      	movs	r1, #15
 80043d4:	2002      	movs	r0, #2
 80043d6:	f7fc f9ef 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <menu+0x3068>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	220a      	movs	r2, #10
 80043e0:	4921      	ldr	r1, [pc, #132]	; (8004468 <menu+0x308c>)
 80043e2:	4618      	mov	r0, r3
 80043e4:	f008 fb18 	bl	800ca18 <itoa>
			lcd_print(2, 16, snum);
 80043e8:	4a1f      	ldr	r2, [pc, #124]	; (8004468 <menu+0x308c>)
 80043ea:	2110      	movs	r1, #16
 80043ec:	2002      	movs	r0, #2
 80043ee:	f7fc f9e3 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 80043f2:	4a1e      	ldr	r2, [pc, #120]	; (800446c <menu+0x3090>)
 80043f4:	2101      	movs	r1, #1
 80043f6:	2002      	movs	r0, #2
 80043f8:	f7fc f9de 	bl	80007b8 <lcd_print>
 80043fc:	e048      	b.n	8004490 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <menu+0x3080>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d144      	bne.n	8004490 <menu+0x30b4>
			if(dilSecim == 0) {
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <menu+0x3048>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d132      	bne.n	8004474 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800440e:	4a14      	ldr	r2, [pc, #80]	; (8004460 <menu+0x3084>)
 8004410:	2101      	movs	r1, #1
 8004412:	2001      	movs	r0, #1
 8004414:	f7fc f9d0 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <menu+0x3094>)
 800441a:	2101      	movs	r1, #1
 800441c:	2002      	movs	r0, #2
 800441e:	f7fc f9cb 	bl	80007b8 <lcd_print>
 8004422:	e035      	b.n	8004490 <menu+0x30b4>
 8004424:	20000bb2 	.word	0x20000bb2
 8004428:	0800d968 	.word	0x0800d968
 800442c:	40010800 	.word	0x40010800
 8004430:	20000bc0 	.word	0x20000bc0
 8004434:	20000baf 	.word	0x20000baf
 8004438:	20000ad4 	.word	0x20000ad4
 800443c:	20000bbd 	.word	0x20000bbd
 8004440:	20000b91 	.word	0x20000b91
 8004444:	20000b8e 	.word	0x20000b8e
 8004448:	20000b8f 	.word	0x20000b8f
 800444c:	2000095d 	.word	0x2000095d
 8004450:	2000095e 	.word	0x2000095e
 8004454:	20000b90 	.word	0x20000b90
 8004458:	20000bd2 	.word	0x20000bd2
 800445c:	20000bb1 	.word	0x20000bb1
 8004460:	0800dff0 	.word	0x0800dff0
 8004464:	0800e004 	.word	0x0800e004
 8004468:	20000b14 	.word	0x20000b14
 800446c:	0800e018 	.word	0x0800e018
 8004470:	0800e024 	.word	0x0800e024
			} else if(dilSecim == 1) {
 8004474:	4b94      	ldr	r3, [pc, #592]	; (80046c8 <menu+0x32ec>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d109      	bne.n	8004490 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 800447c:	4a93      	ldr	r2, [pc, #588]	; (80046cc <menu+0x32f0>)
 800447e:	2101      	movs	r1, #1
 8004480:	2001      	movs	r0, #1
 8004482:	f7fc f999 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004486:	4a92      	ldr	r2, [pc, #584]	; (80046d0 <menu+0x32f4>)
 8004488:	2101      	movs	r1, #1
 800448a:	2002      	movs	r0, #2
 800448c:	f7fc f994 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004490:	2102      	movs	r1, #2
 8004492:	4890      	ldr	r0, [pc, #576]	; (80046d4 <menu+0x32f8>)
 8004494:	f005 fa94 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d119      	bne.n	80044d2 <menu+0x30f6>
 800449e:	4b8e      	ldr	r3, [pc, #568]	; (80046d8 <menu+0x32fc>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	f083 0301 	eor.w	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d012      	beq.n	80044d2 <menu+0x30f6>
 80044ac:	4b8b      	ldr	r3, [pc, #556]	; (80046dc <menu+0x3300>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00e      	beq.n	80044d2 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80044b4:	4b8a      	ldr	r3, [pc, #552]	; (80046e0 <menu+0x3304>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	4b88      	ldr	r3, [pc, #544]	; (80046e0 <menu+0x3304>)
 80044be:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80044c0:	4b87      	ldr	r3, [pc, #540]	; (80046e0 <menu+0x3304>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d902      	bls.n	80044ce <menu+0x30f2>
				calismaSayModu = 0;
 80044c8:	4b85      	ldr	r3, [pc, #532]	; (80046e0 <menu+0x3304>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044ce:	f001 fca3 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80044d2:	2104      	movs	r1, #4
 80044d4:	487f      	ldr	r0, [pc, #508]	; (80046d4 <menu+0x32f8>)
 80044d6:	f005 fa73 	bl	80099c0 <HAL_GPIO_ReadPin>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d119      	bne.n	8004514 <menu+0x3138>
 80044e0:	4b7d      	ldr	r3, [pc, #500]	; (80046d8 <menu+0x32fc>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f083 0301 	eor.w	r3, r3, #1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d012      	beq.n	8004514 <menu+0x3138>
 80044ee:	4b7b      	ldr	r3, [pc, #492]	; (80046dc <menu+0x3300>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00e      	beq.n	8004514 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80044f6:	4b7a      	ldr	r3, [pc, #488]	; (80046e0 <menu+0x3304>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4b78      	ldr	r3, [pc, #480]	; (80046e0 <menu+0x3304>)
 8004500:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004502:	4b77      	ldr	r3, [pc, #476]	; (80046e0 <menu+0x3304>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <menu+0x3134>
		   		calismaSayModu = 1;
 800450a:	4b75      	ldr	r3, [pc, #468]	; (80046e0 <menu+0x3304>)
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004510:	f001 fc82 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004514:	2108      	movs	r1, #8
 8004516:	486f      	ldr	r0, [pc, #444]	; (80046d4 <menu+0x32f8>)
 8004518:	f005 fa52 	bl	80099c0 <HAL_GPIO_ReadPin>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d12b      	bne.n	800457a <menu+0x319e>
 8004522:	4b6d      	ldr	r3, [pc, #436]	; (80046d8 <menu+0x32fc>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	f083 0301 	eor.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d024      	beq.n	800457a <menu+0x319e>
			eepromData[32] = 0;
 8004530:	4b6c      	ldr	r3, [pc, #432]	; (80046e4 <menu+0x3308>)
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004538:	4b6a      	ldr	r3, [pc, #424]	; (80046e4 <menu+0x3308>)
 800453a:	2200      	movs	r2, #0
 800453c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800453e:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <menu+0x3308>)
 8004540:	2200      	movs	r2, #0
 8004542:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004544:	4b67      	ldr	r3, [pc, #412]	; (80046e4 <menu+0x3308>)
 8004546:	2200      	movs	r2, #0
 8004548:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800454a:	4b66      	ldr	r3, [pc, #408]	; (80046e4 <menu+0x3308>)
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004550:	4b65      	ldr	r3, [pc, #404]	; (80046e8 <menu+0x330c>)
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004556:	4b65      	ldr	r3, [pc, #404]	; (80046ec <menu+0x3310>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800455c:	4b64      	ldr	r3, [pc, #400]	; (80046f0 <menu+0x3314>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004562:	4b64      	ldr	r3, [pc, #400]	; (80046f4 <menu+0x3318>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004568:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <menu+0x331c>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800456e:	4b5c      	ldr	r3, [pc, #368]	; (80046e0 <menu+0x3304>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004574:	4b61      	ldr	r3, [pc, #388]	; (80046fc <menu+0x3320>)
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800457a:	4b61      	ldr	r3, [pc, #388]	; (8004700 <menu+0x3324>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b1e      	cmp	r3, #30
 8004580:	d16f      	bne.n	8004662 <menu+0x3286>
		calismaSayModu = 0;
 8004582:	4b57      	ldr	r3, [pc, #348]	; (80046e0 <menu+0x3304>)
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004588:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <menu+0x32ec>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004590:	4a5c      	ldr	r2, [pc, #368]	; (8004704 <menu+0x3328>)
 8004592:	2101      	movs	r1, #1
 8004594:	2001      	movs	r0, #1
 8004596:	f7fc f90f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800459a:	4a5b      	ldr	r2, [pc, #364]	; (8004708 <menu+0x332c>)
 800459c:	2101      	movs	r1, #1
 800459e:	2002      	movs	r0, #2
 80045a0:	f7fc f90a 	bl	80007b8 <lcd_print>
 80045a4:	e00d      	b.n	80045c2 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80045a6:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <menu+0x32ec>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d109      	bne.n	80045c2 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80045ae:	4a57      	ldr	r2, [pc, #348]	; (800470c <menu+0x3330>)
 80045b0:	2101      	movs	r1, #1
 80045b2:	2001      	movs	r0, #1
 80045b4:	f7fc f900 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80045b8:	4a55      	ldr	r2, [pc, #340]	; (8004710 <menu+0x3334>)
 80045ba:	2101      	movs	r1, #1
 80045bc:	2002      	movs	r0, #2
 80045be:	f7fc f8fb 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80045c2:	2102      	movs	r1, #2
 80045c4:	4843      	ldr	r0, [pc, #268]	; (80046d4 <menu+0x32f8>)
 80045c6:	f005 f9fb 	bl	80099c0 <HAL_GPIO_ReadPin>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d115      	bne.n	80045fc <menu+0x3220>
 80045d0:	4b41      	ldr	r3, [pc, #260]	; (80046d8 <menu+0x32fc>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f083 0301 	eor.w	r3, r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00e      	beq.n	80045fc <menu+0x3220>
			dilSecim = dilSecim + 1;
 80045de:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <menu+0x32ec>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <menu+0x32ec>)
 80045e8:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80045ea:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <menu+0x32ec>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d902      	bls.n	80045f8 <menu+0x321c>
				dilSecim = 0;
 80045f2:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <menu+0x32ec>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80045f8:	f001 fc0e 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045fc:	2104      	movs	r1, #4
 80045fe:	4835      	ldr	r0, [pc, #212]	; (80046d4 <menu+0x32f8>)
 8004600:	f005 f9de 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d115      	bne.n	8004636 <menu+0x325a>
 800460a:	4b33      	ldr	r3, [pc, #204]	; (80046d8 <menu+0x32fc>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f083 0301 	eor.w	r3, r3, #1
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004618:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <menu+0x32ec>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	3b01      	subs	r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <menu+0x32ec>)
 8004622:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004624:	4b28      	ldr	r3, [pc, #160]	; (80046c8 <menu+0x32ec>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <menu+0x3256>
		   		dilSecim = 1;
 800462c:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <menu+0x32ec>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004632:	f001 fbf1 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004636:	2108      	movs	r1, #8
 8004638:	4826      	ldr	r0, [pc, #152]	; (80046d4 <menu+0x32f8>)
 800463a:	f005 f9c1 	bl	80099c0 <HAL_GPIO_ReadPin>
 800463e:	4603      	mov	r3, r0
 8004640:	2b01      	cmp	r3, #1
 8004642:	d10e      	bne.n	8004662 <menu+0x3286>
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <menu+0x32fc>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f083 0301 	eor.w	r3, r3, #1
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004652:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <menu+0x32ec>)
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <menu+0x3308>)
 8004658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800465c:	4b27      	ldr	r3, [pc, #156]	; (80046fc <menu+0x3320>)
 800465e:	2201      	movs	r2, #1
 8004660:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004662:	4b27      	ldr	r3, [pc, #156]	; (8004700 <menu+0x3324>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b1f      	cmp	r3, #31
 8004668:	f040 80b7 	bne.w	80047da <menu+0x33fe>
		calismaSayModu = 0;
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <menu+0x3304>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004672:	4a28      	ldr	r2, [pc, #160]	; (8004714 <menu+0x3338>)
 8004674:	2101      	movs	r1, #1
 8004676:	2001      	movs	r0, #1
 8004678:	f7fc f89e 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 800467c:	4b26      	ldr	r3, [pc, #152]	; (8004718 <menu+0x333c>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d113      	bne.n	80046ac <menu+0x32d0>
			if(dilSecim == 0) {
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <menu+0x32ec>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 800468c:	4a23      	ldr	r2, [pc, #140]	; (800471c <menu+0x3340>)
 800468e:	2101      	movs	r1, #1
 8004690:	2002      	movs	r0, #2
 8004692:	f7fc f891 	bl	80007b8 <lcd_print>
 8004696:	e050      	b.n	800473a <menu+0x335e>
			} else if(dilSecim == 1) {
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <menu+0x32ec>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d14c      	bne.n	800473a <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80046a0:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <menu+0x3344>)
 80046a2:	2101      	movs	r1, #1
 80046a4:	2002      	movs	r0, #2
 80046a6:	f7fc f887 	bl	80007b8 <lcd_print>
 80046aa:	e046      	b.n	800473a <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80046ac:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <menu+0x333c>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d142      	bne.n	800473a <menu+0x335e>
			if(dilSecim == 0){
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <menu+0x32ec>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d135      	bne.n	8004728 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80046bc:	4a19      	ldr	r2, [pc, #100]	; (8004724 <menu+0x3348>)
 80046be:	2101      	movs	r1, #1
 80046c0:	2002      	movs	r0, #2
 80046c2:	f7fc f879 	bl	80007b8 <lcd_print>
 80046c6:	e038      	b.n	800473a <menu+0x335e>
 80046c8:	20000bb2 	.word	0x20000bb2
 80046cc:	0800e004 	.word	0x0800e004
 80046d0:	0800e038 	.word	0x0800e038
 80046d4:	40010800 	.word	0x40010800
 80046d8:	20000bc0 	.word	0x20000bc0
 80046dc:	20000bd2 	.word	0x20000bd2
 80046e0:	20000bb1 	.word	0x20000bb1
 80046e4:	20000ad4 	.word	0x20000ad4
 80046e8:	20000b90 	.word	0x20000b90
 80046ec:	2000095e 	.word	0x2000095e
 80046f0:	2000095d 	.word	0x2000095d
 80046f4:	20000b8f 	.word	0x20000b8f
 80046f8:	20000b8e 	.word	0x20000b8e
 80046fc:	20000bbd 	.word	0x20000bbd
 8004700:	20000b91 	.word	0x20000b91
 8004704:	0800e04c 	.word	0x0800e04c
 8004708:	0800e060 	.word	0x0800e060
 800470c:	0800e074 	.word	0x0800e074
 8004710:	0800e088 	.word	0x0800e088
 8004714:	0800e09c 	.word	0x0800e09c
 8004718:	20000bb0 	.word	0x20000bb0
 800471c:	0800d8f4 	.word	0x0800d8f4
 8004720:	0800d908 	.word	0x0800d908
 8004724:	0800d954 	.word	0x0800d954
			} else if(dilSecim == 1) {
 8004728:	4b97      	ldr	r3, [pc, #604]	; (8004988 <menu+0x35ac>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d104      	bne.n	800473a <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004730:	4a96      	ldr	r2, [pc, #600]	; (800498c <menu+0x35b0>)
 8004732:	2101      	movs	r1, #1
 8004734:	2002      	movs	r0, #2
 8004736:	f7fc f83f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800473a:	2102      	movs	r1, #2
 800473c:	4894      	ldr	r0, [pc, #592]	; (8004990 <menu+0x35b4>)
 800473e:	f005 f93f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d115      	bne.n	8004774 <menu+0x3398>
 8004748:	4b92      	ldr	r3, [pc, #584]	; (8004994 <menu+0x35b8>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	f083 0301 	eor.w	r3, r3, #1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00e      	beq.n	8004774 <menu+0x3398>
			iotMode = iotMode + 1;
 8004756:	4b90      	ldr	r3, [pc, #576]	; (8004998 <menu+0x35bc>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	b2da      	uxtb	r2, r3
 800475e:	4b8e      	ldr	r3, [pc, #568]	; (8004998 <menu+0x35bc>)
 8004760:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004762:	4b8d      	ldr	r3, [pc, #564]	; (8004998 <menu+0x35bc>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d902      	bls.n	8004770 <menu+0x3394>
				iotMode = 0;
 800476a:	4b8b      	ldr	r3, [pc, #556]	; (8004998 <menu+0x35bc>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004770:	f001 fb52 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004774:	2104      	movs	r1, #4
 8004776:	4886      	ldr	r0, [pc, #536]	; (8004990 <menu+0x35b4>)
 8004778:	f005 f922 	bl	80099c0 <HAL_GPIO_ReadPin>
 800477c:	4603      	mov	r3, r0
 800477e:	2b01      	cmp	r3, #1
 8004780:	d115      	bne.n	80047ae <menu+0x33d2>
 8004782:	4b84      	ldr	r3, [pc, #528]	; (8004994 <menu+0x35b8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f083 0301 	eor.w	r3, r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00e      	beq.n	80047ae <menu+0x33d2>
			iotMode = iotMode - 1;
 8004790:	4b81      	ldr	r3, [pc, #516]	; (8004998 <menu+0x35bc>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	3b01      	subs	r3, #1
 8004796:	b2da      	uxtb	r2, r3
 8004798:	4b7f      	ldr	r3, [pc, #508]	; (8004998 <menu+0x35bc>)
 800479a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 800479c:	4b7e      	ldr	r3, [pc, #504]	; (8004998 <menu+0x35bc>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <menu+0x33ce>
		   		iotMode = 1;
 80047a4:	4b7c      	ldr	r3, [pc, #496]	; (8004998 <menu+0x35bc>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80047aa:	f001 fb35 	bl	8005e18 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ae:	2108      	movs	r1, #8
 80047b0:	4877      	ldr	r0, [pc, #476]	; (8004990 <menu+0x35b4>)
 80047b2:	f005 f905 	bl	80099c0 <HAL_GPIO_ReadPin>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d10e      	bne.n	80047da <menu+0x33fe>
 80047bc:	4b75      	ldr	r3, [pc, #468]	; (8004994 <menu+0x35b8>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f083 0301 	eor.w	r3, r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <menu+0x33fe>
			eepromData[37] = iotMode;
 80047ca:	4b73      	ldr	r3, [pc, #460]	; (8004998 <menu+0x35bc>)
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	4b73      	ldr	r3, [pc, #460]	; (800499c <menu+0x35c0>)
 80047d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 80047d4:	4b72      	ldr	r3, [pc, #456]	; (80049a0 <menu+0x35c4>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80047da:	4b72      	ldr	r3, [pc, #456]	; (80049a4 <menu+0x35c8>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d131      	bne.n	8004846 <menu+0x346a>
		calismaSayModu = 0;
 80047e2:	4b71      	ldr	r3, [pc, #452]	; (80049a8 <menu+0x35cc>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80047e8:	4a70      	ldr	r2, [pc, #448]	; (80049ac <menu+0x35d0>)
 80047ea:	2101      	movs	r1, #1
 80047ec:	2001      	movs	r0, #1
 80047ee:	f7fb ffe3 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 80047f2:	4a6f      	ldr	r2, [pc, #444]	; (80049b0 <menu+0x35d4>)
 80047f4:	2101      	movs	r1, #1
 80047f6:	2002      	movs	r0, #2
 80047f8:	f7fb ffde 	bl	80007b8 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 80047fc:	486c      	ldr	r0, [pc, #432]	; (80049b0 <menu+0x35d4>)
 80047fe:	f7fb fd11 	bl	8000224 <strlen>
 8004802:	4603      	mov	r3, r0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	3301      	adds	r3, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	4a6a      	ldr	r2, [pc, #424]	; (80049b4 <menu+0x35d8>)
 800480c:	4619      	mov	r1, r3
 800480e:	2002      	movs	r0, #2
 8004810:	f7fb ffd2 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004814:	2102      	movs	r1, #2
 8004816:	485e      	ldr	r0, [pc, #376]	; (8004990 <menu+0x35b4>)
 8004818:	f005 f8d2 	bl	80099c0 <HAL_GPIO_ReadPin>
 800481c:	4603      	mov	r3, r0
 800481e:	2b01      	cmp	r3, #1
 8004820:	d111      	bne.n	8004846 <menu+0x346a>
 8004822:	2104      	movs	r1, #4
 8004824:	485a      	ldr	r0, [pc, #360]	; (8004990 <menu+0x35b4>)
 8004826:	f005 f8cb 	bl	80099c0 <HAL_GPIO_ReadPin>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10a      	bne.n	8004846 <menu+0x346a>
 8004830:	4b58      	ldr	r3, [pc, #352]	; (8004994 <menu+0x35b8>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <menu+0x346a>
			takeMachineID();
 800483e:	f7fc f9ed 	bl	8000c1c <takeMachineID>

			bekle();
 8004842:	f001 fae9 	bl	8005e18 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004846:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <menu+0x35c8>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b21      	cmp	r3, #33	; 0x21
 800484c:	d131      	bne.n	80048b2 <menu+0x34d6>
		calismaSayModu = 0;
 800484e:	4b56      	ldr	r3, [pc, #344]	; (80049a8 <menu+0x35cc>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004854:	4a58      	ldr	r2, [pc, #352]	; (80049b8 <menu+0x35dc>)
 8004856:	2101      	movs	r1, #1
 8004858:	2001      	movs	r0, #1
 800485a:	f7fb ffad 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, wifiSSID);
 800485e:	4a57      	ldr	r2, [pc, #348]	; (80049bc <menu+0x35e0>)
 8004860:	2101      	movs	r1, #1
 8004862:	2002      	movs	r0, #2
 8004864:	f7fb ffa8 	bl	80007b8 <lcd_print>
		lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004868:	4854      	ldr	r0, [pc, #336]	; (80049bc <menu+0x35e0>)
 800486a:	f7fb fcdb 	bl	8000224 <strlen>
 800486e:	4603      	mov	r3, r0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	3301      	adds	r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	4a4f      	ldr	r2, [pc, #316]	; (80049b4 <menu+0x35d8>)
 8004878:	4619      	mov	r1, r3
 800487a:	2002      	movs	r0, #2
 800487c:	f7fb ff9c 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004880:	2102      	movs	r1, #2
 8004882:	4843      	ldr	r0, [pc, #268]	; (8004990 <menu+0x35b4>)
 8004884:	f005 f89c 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d111      	bne.n	80048b2 <menu+0x34d6>
 800488e:	2104      	movs	r1, #4
 8004890:	483f      	ldr	r0, [pc, #252]	; (8004990 <menu+0x35b4>)
 8004892:	f005 f895 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004896:	4603      	mov	r3, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10a      	bne.n	80048b2 <menu+0x34d6>
 800489c:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <menu+0x35b8>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	f083 0301 	eor.w	r3, r3, #1
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <menu+0x34d6>
			takeWifiSSID();
 80048aa:	f7fc fac1 	bl	8000e30 <takeWifiSSID>

			bekle();
 80048ae:	f001 fab3 	bl	8005e18 <bekle>
		}
	}

	if (menuSayac == 34) {
 80048b2:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <menu+0x35c8>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b22      	cmp	r3, #34	; 0x22
 80048b8:	d131      	bne.n	800491e <menu+0x3542>
		calismaSayModu = 0;
 80048ba:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <menu+0x35cc>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80048c0:	4a3f      	ldr	r2, [pc, #252]	; (80049c0 <menu+0x35e4>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	2001      	movs	r0, #1
 80048c6:	f7fb ff77 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, wifiPass);
 80048ca:	4a3e      	ldr	r2, [pc, #248]	; (80049c4 <menu+0x35e8>)
 80048cc:	2101      	movs	r1, #1
 80048ce:	2002      	movs	r0, #2
 80048d0:	f7fb ff72 	bl	80007b8 <lcd_print>
		lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80048d4:	483b      	ldr	r0, [pc, #236]	; (80049c4 <menu+0x35e8>)
 80048d6:	f7fb fca5 	bl	8000224 <strlen>
 80048da:	4603      	mov	r3, r0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	3301      	adds	r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4a34      	ldr	r2, [pc, #208]	; (80049b4 <menu+0x35d8>)
 80048e4:	4619      	mov	r1, r3
 80048e6:	2002      	movs	r0, #2
 80048e8:	f7fb ff66 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048ec:	2102      	movs	r1, #2
 80048ee:	4828      	ldr	r0, [pc, #160]	; (8004990 <menu+0x35b4>)
 80048f0:	f005 f866 	bl	80099c0 <HAL_GPIO_ReadPin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d111      	bne.n	800491e <menu+0x3542>
 80048fa:	2104      	movs	r1, #4
 80048fc:	4824      	ldr	r0, [pc, #144]	; (8004990 <menu+0x35b4>)
 80048fe:	f005 f85f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10a      	bne.n	800491e <menu+0x3542>
 8004908:	4b22      	ldr	r3, [pc, #136]	; (8004994 <menu+0x35b8>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f083 0301 	eor.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <menu+0x3542>
			takeWifiPass();
 8004916:	f7fc fbf7 	bl	8001108 <takeWifiPass>

			bekle();
 800491a:	f001 fa7d 	bl	8005e18 <bekle>
		}
	}

	if (menuSayac == 35) {
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <menu+0x35c8>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b23      	cmp	r3, #35	; 0x23
 8004924:	d12e      	bne.n	8004984 <menu+0x35a8>
		if(dilSecim == 0) {
 8004926:	4b18      	ldr	r3, [pc, #96]	; (8004988 <menu+0x35ac>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <menu+0x3568>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800492e:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <menu+0x35ec>)
 8004930:	2101      	movs	r1, #1
 8004932:	2001      	movs	r0, #1
 8004934:	f7fb ff40 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <menu+0x35f0>)
 800493a:	2101      	movs	r1, #1
 800493c:	2002      	movs	r0, #2
 800493e:	f7fb ff3b 	bl	80007b8 <lcd_print>
 8004942:	e00d      	b.n	8004960 <menu+0x3584>
		} else if(dilSecim == 1) {
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <menu+0x35ac>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d109      	bne.n	8004960 <menu+0x3584>
			lcd_print(1, 1, " EXIT THE MENU  ");
 800494c:	4a20      	ldr	r2, [pc, #128]	; (80049d0 <menu+0x35f4>)
 800494e:	2101      	movs	r1, #1
 8004950:	2001      	movs	r0, #1
 8004952:	f7fb ff31 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004956:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <menu+0x35f8>)
 8004958:	2101      	movs	r1, #1
 800495a:	2002      	movs	r0, #2
 800495c:	f7fb ff2c 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004960:	2108      	movs	r1, #8
 8004962:	480b      	ldr	r0, [pc, #44]	; (8004990 <menu+0x35b4>)
 8004964:	f005 f82c 	bl	80099c0 <HAL_GPIO_ReadPin>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d10a      	bne.n	8004984 <menu+0x35a8>
			menuGiris = 0;
 800496e:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <menu+0x35fc>)
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004974:	f7fb ff4c 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8004978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800497c:	f004 fa50 	bl	8008e20 <HAL_Delay>
			NVIC_SystemReset();
 8004980:	f7fb ff8e 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 8004984:	bf00      	nop
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000bb2 	.word	0x20000bb2
 800498c:	0800d968 	.word	0x0800d968
 8004990:	40010800 	.word	0x40010800
 8004994:	20000bc0 	.word	0x20000bc0
 8004998:	20000bb0 	.word	0x20000bb0
 800499c:	20000ad4 	.word	0x20000ad4
 80049a0:	20000bbd 	.word	0x20000bbd
 80049a4:	20000b91 	.word	0x20000b91
 80049a8:	20000bb1 	.word	0x20000bb1
 80049ac:	0800e0b0 	.word	0x0800e0b0
 80049b0:	20000b3c 	.word	0x20000b3c
 80049b4:	2000094c 	.word	0x2000094c
 80049b8:	0800e0c4 	.word	0x0800e0c4
 80049bc:	20000b48 	.word	0x20000b48
 80049c0:	0800e0d8 	.word	0x0800e0d8
 80049c4:	20000b6c 	.word	0x20000b6c
 80049c8:	0800e0ec 	.word	0x0800e0ec
 80049cc:	0800e100 	.word	0x0800e100
 80049d0:	0800e114 	.word	0x0800e114
 80049d4:	0800e128 	.word	0x0800e128
 80049d8:	20000bae 	.word	0x20000bae

080049dc <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 80049e6:	48a9      	ldr	r0, [pc, #676]	; (8004c8c <loadMenuTexts+0x2b0>)
 80049e8:	f7fb ff70 	bl	80008cc <copyText>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4aa8      	ldr	r2, [pc, #672]	; (8004c90 <loadMenuTexts+0x2b4>)
 80049f0:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 80049f2:	48a8      	ldr	r0, [pc, #672]	; (8004c94 <loadMenuTexts+0x2b8>)
 80049f4:	f7fb ff6a 	bl	80008cc <copyText>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4aa7      	ldr	r2, [pc, #668]	; (8004c98 <loadMenuTexts+0x2bc>)
 80049fc:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 80049fe:	48a7      	ldr	r0, [pc, #668]	; (8004c9c <loadMenuTexts+0x2c0>)
 8004a00:	f7fb ff64 	bl	80008cc <copyText>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4aa6      	ldr	r2, [pc, #664]	; (8004ca0 <loadMenuTexts+0x2c4>)
 8004a08:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004a0a:	48a6      	ldr	r0, [pc, #664]	; (8004ca4 <loadMenuTexts+0x2c8>)
 8004a0c:	f7fb ff5e 	bl	80008cc <copyText>
 8004a10:	4603      	mov	r3, r0
 8004a12:	4aa5      	ldr	r2, [pc, #660]	; (8004ca8 <loadMenuTexts+0x2cc>)
 8004a14:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004a16:	48a5      	ldr	r0, [pc, #660]	; (8004cac <loadMenuTexts+0x2d0>)
 8004a18:	f7fb ff58 	bl	80008cc <copyText>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4aa4      	ldr	r2, [pc, #656]	; (8004cb0 <loadMenuTexts+0x2d4>)
 8004a20:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004a22:	48a4      	ldr	r0, [pc, #656]	; (8004cb4 <loadMenuTexts+0x2d8>)
 8004a24:	f7fb ff52 	bl	80008cc <copyText>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	4aa3      	ldr	r2, [pc, #652]	; (8004cb8 <loadMenuTexts+0x2dc>)
 8004a2c:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004a2e:	48a3      	ldr	r0, [pc, #652]	; (8004cbc <loadMenuTexts+0x2e0>)
 8004a30:	f7fb ff4c 	bl	80008cc <copyText>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4aa2      	ldr	r2, [pc, #648]	; (8004cc0 <loadMenuTexts+0x2e4>)
 8004a38:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 82d1 	bne.w	8004fe4 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004a42:	48a0      	ldr	r0, [pc, #640]	; (8004cc4 <loadMenuTexts+0x2e8>)
 8004a44:	f7fb ff42 	bl	80008cc <copyText>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4a9f      	ldr	r2, [pc, #636]	; (8004cc8 <loadMenuTexts+0x2ec>)
 8004a4c:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004a4e:	489f      	ldr	r0, [pc, #636]	; (8004ccc <loadMenuTexts+0x2f0>)
 8004a50:	f7fb ff3c 	bl	80008cc <copyText>
 8004a54:	4603      	mov	r3, r0
 8004a56:	4a9e      	ldr	r2, [pc, #632]	; (8004cd0 <loadMenuTexts+0x2f4>)
 8004a58:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004a5a:	489e      	ldr	r0, [pc, #632]	; (8004cd4 <loadMenuTexts+0x2f8>)
 8004a5c:	f7fb ff36 	bl	80008cc <copyText>
 8004a60:	4603      	mov	r3, r0
 8004a62:	4a9d      	ldr	r2, [pc, #628]	; (8004cd8 <loadMenuTexts+0x2fc>)
 8004a64:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004a66:	489d      	ldr	r0, [pc, #628]	; (8004cdc <loadMenuTexts+0x300>)
 8004a68:	f7fb ff30 	bl	80008cc <copyText>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4a9c      	ldr	r2, [pc, #624]	; (8004ce0 <loadMenuTexts+0x304>)
 8004a70:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004a72:	489c      	ldr	r0, [pc, #624]	; (8004ce4 <loadMenuTexts+0x308>)
 8004a74:	f7fb ff2a 	bl	80008cc <copyText>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4a9b      	ldr	r2, [pc, #620]	; (8004ce8 <loadMenuTexts+0x30c>)
 8004a7c:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004a7e:	489b      	ldr	r0, [pc, #620]	; (8004cec <loadMenuTexts+0x310>)
 8004a80:	f7fb ff24 	bl	80008cc <copyText>
 8004a84:	4603      	mov	r3, r0
 8004a86:	4a9a      	ldr	r2, [pc, #616]	; (8004cf0 <loadMenuTexts+0x314>)
 8004a88:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004a8a:	489a      	ldr	r0, [pc, #616]	; (8004cf4 <loadMenuTexts+0x318>)
 8004a8c:	f7fb ff1e 	bl	80008cc <copyText>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4a99      	ldr	r2, [pc, #612]	; (8004cf8 <loadMenuTexts+0x31c>)
 8004a94:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004a96:	4899      	ldr	r0, [pc, #612]	; (8004cfc <loadMenuTexts+0x320>)
 8004a98:	f7fb ff18 	bl	80008cc <copyText>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4a98      	ldr	r2, [pc, #608]	; (8004d00 <loadMenuTexts+0x324>)
 8004aa0:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004aa2:	4898      	ldr	r0, [pc, #608]	; (8004d04 <loadMenuTexts+0x328>)
 8004aa4:	f7fb ff12 	bl	80008cc <copyText>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4a97      	ldr	r2, [pc, #604]	; (8004d08 <loadMenuTexts+0x32c>)
 8004aac:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004aae:	4897      	ldr	r0, [pc, #604]	; (8004d0c <loadMenuTexts+0x330>)
 8004ab0:	f7fb ff0c 	bl	80008cc <copyText>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4a96      	ldr	r2, [pc, #600]	; (8004d10 <loadMenuTexts+0x334>)
 8004ab8:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004aba:	4896      	ldr	r0, [pc, #600]	; (8004d14 <loadMenuTexts+0x338>)
 8004abc:	f7fb ff06 	bl	80008cc <copyText>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4a95      	ldr	r2, [pc, #596]	; (8004d18 <loadMenuTexts+0x33c>)
 8004ac4:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004ac6:	4895      	ldr	r0, [pc, #596]	; (8004d1c <loadMenuTexts+0x340>)
 8004ac8:	f7fb ff00 	bl	80008cc <copyText>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4a94      	ldr	r2, [pc, #592]	; (8004d20 <loadMenuTexts+0x344>)
 8004ad0:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004ad2:	4894      	ldr	r0, [pc, #592]	; (8004d24 <loadMenuTexts+0x348>)
 8004ad4:	f7fb fefa 	bl	80008cc <copyText>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4a93      	ldr	r2, [pc, #588]	; (8004d28 <loadMenuTexts+0x34c>)
 8004adc:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004ade:	4893      	ldr	r0, [pc, #588]	; (8004d2c <loadMenuTexts+0x350>)
 8004ae0:	f7fb fef4 	bl	80008cc <copyText>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4a92      	ldr	r2, [pc, #584]	; (8004d30 <loadMenuTexts+0x354>)
 8004ae8:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004aea:	4892      	ldr	r0, [pc, #584]	; (8004d34 <loadMenuTexts+0x358>)
 8004aec:	f7fb feee 	bl	80008cc <copyText>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4a91      	ldr	r2, [pc, #580]	; (8004d38 <loadMenuTexts+0x35c>)
 8004af4:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004af6:	4891      	ldr	r0, [pc, #580]	; (8004d3c <loadMenuTexts+0x360>)
 8004af8:	f7fb fee8 	bl	80008cc <copyText>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4a90      	ldr	r2, [pc, #576]	; (8004d40 <loadMenuTexts+0x364>)
 8004b00:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004b02:	4890      	ldr	r0, [pc, #576]	; (8004d44 <loadMenuTexts+0x368>)
 8004b04:	f7fb fee2 	bl	80008cc <copyText>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4a8f      	ldr	r2, [pc, #572]	; (8004d48 <loadMenuTexts+0x36c>)
 8004b0c:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004b0e:	488f      	ldr	r0, [pc, #572]	; (8004d4c <loadMenuTexts+0x370>)
 8004b10:	f7fb fedc 	bl	80008cc <copyText>
 8004b14:	4603      	mov	r3, r0
 8004b16:	4a8e      	ldr	r2, [pc, #568]	; (8004d50 <loadMenuTexts+0x374>)
 8004b18:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004b1a:	488e      	ldr	r0, [pc, #568]	; (8004d54 <loadMenuTexts+0x378>)
 8004b1c:	f7fb fed6 	bl	80008cc <copyText>
 8004b20:	4603      	mov	r3, r0
 8004b22:	4a8d      	ldr	r2, [pc, #564]	; (8004d58 <loadMenuTexts+0x37c>)
 8004b24:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004b26:	488d      	ldr	r0, [pc, #564]	; (8004d5c <loadMenuTexts+0x380>)
 8004b28:	f7fb fed0 	bl	80008cc <copyText>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4a8c      	ldr	r2, [pc, #560]	; (8004d60 <loadMenuTexts+0x384>)
 8004b30:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004b32:	488c      	ldr	r0, [pc, #560]	; (8004d64 <loadMenuTexts+0x388>)
 8004b34:	f7fb feca 	bl	80008cc <copyText>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	4a8b      	ldr	r2, [pc, #556]	; (8004d68 <loadMenuTexts+0x38c>)
 8004b3c:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004b3e:	488b      	ldr	r0, [pc, #556]	; (8004d6c <loadMenuTexts+0x390>)
 8004b40:	f7fb fec4 	bl	80008cc <copyText>
 8004b44:	4603      	mov	r3, r0
 8004b46:	4a8a      	ldr	r2, [pc, #552]	; (8004d70 <loadMenuTexts+0x394>)
 8004b48:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004b4a:	488a      	ldr	r0, [pc, #552]	; (8004d74 <loadMenuTexts+0x398>)
 8004b4c:	f7fb febe 	bl	80008cc <copyText>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4a89      	ldr	r2, [pc, #548]	; (8004d78 <loadMenuTexts+0x39c>)
 8004b54:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004b56:	4889      	ldr	r0, [pc, #548]	; (8004d7c <loadMenuTexts+0x3a0>)
 8004b58:	f7fb feb8 	bl	80008cc <copyText>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4a88      	ldr	r2, [pc, #544]	; (8004d80 <loadMenuTexts+0x3a4>)
 8004b60:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004b62:	4888      	ldr	r0, [pc, #544]	; (8004d84 <loadMenuTexts+0x3a8>)
 8004b64:	f7fb feb2 	bl	80008cc <copyText>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4a87      	ldr	r2, [pc, #540]	; (8004d88 <loadMenuTexts+0x3ac>)
 8004b6c:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004b6e:	4887      	ldr	r0, [pc, #540]	; (8004d8c <loadMenuTexts+0x3b0>)
 8004b70:	f7fb feac 	bl	80008cc <copyText>
 8004b74:	4603      	mov	r3, r0
 8004b76:	4a86      	ldr	r2, [pc, #536]	; (8004d90 <loadMenuTexts+0x3b4>)
 8004b78:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004b7a:	4886      	ldr	r0, [pc, #536]	; (8004d94 <loadMenuTexts+0x3b8>)
 8004b7c:	f7fb fea6 	bl	80008cc <copyText>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4a85      	ldr	r2, [pc, #532]	; (8004d98 <loadMenuTexts+0x3bc>)
 8004b84:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004b86:	4885      	ldr	r0, [pc, #532]	; (8004d9c <loadMenuTexts+0x3c0>)
 8004b88:	f7fb fea0 	bl	80008cc <copyText>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4a84      	ldr	r2, [pc, #528]	; (8004da0 <loadMenuTexts+0x3c4>)
 8004b90:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004b92:	4884      	ldr	r0, [pc, #528]	; (8004da4 <loadMenuTexts+0x3c8>)
 8004b94:	f7fb fe9a 	bl	80008cc <copyText>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4a83      	ldr	r2, [pc, #524]	; (8004da8 <loadMenuTexts+0x3cc>)
 8004b9c:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004b9e:	4883      	ldr	r0, [pc, #524]	; (8004dac <loadMenuTexts+0x3d0>)
 8004ba0:	f7fb fe94 	bl	80008cc <copyText>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4a82      	ldr	r2, [pc, #520]	; (8004db0 <loadMenuTexts+0x3d4>)
 8004ba8:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004baa:	4882      	ldr	r0, [pc, #520]	; (8004db4 <loadMenuTexts+0x3d8>)
 8004bac:	f7fb fe8e 	bl	80008cc <copyText>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4a81      	ldr	r2, [pc, #516]	; (8004db8 <loadMenuTexts+0x3dc>)
 8004bb4:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004bb6:	4881      	ldr	r0, [pc, #516]	; (8004dbc <loadMenuTexts+0x3e0>)
 8004bb8:	f7fb fe88 	bl	80008cc <copyText>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4a80      	ldr	r2, [pc, #512]	; (8004dc0 <loadMenuTexts+0x3e4>)
 8004bc0:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004bc2:	4880      	ldr	r0, [pc, #512]	; (8004dc4 <loadMenuTexts+0x3e8>)
 8004bc4:	f7fb fe82 	bl	80008cc <copyText>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4a7f      	ldr	r2, [pc, #508]	; (8004dc8 <loadMenuTexts+0x3ec>)
 8004bcc:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004bce:	487f      	ldr	r0, [pc, #508]	; (8004dcc <loadMenuTexts+0x3f0>)
 8004bd0:	f7fb fe7c 	bl	80008cc <copyText>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4a7e      	ldr	r2, [pc, #504]	; (8004dd0 <loadMenuTexts+0x3f4>)
 8004bd8:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004bda:	487e      	ldr	r0, [pc, #504]	; (8004dd4 <loadMenuTexts+0x3f8>)
 8004bdc:	f7fb fe76 	bl	80008cc <copyText>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4a7d      	ldr	r2, [pc, #500]	; (8004dd8 <loadMenuTexts+0x3fc>)
 8004be4:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004be6:	487d      	ldr	r0, [pc, #500]	; (8004ddc <loadMenuTexts+0x400>)
 8004be8:	f7fb fe70 	bl	80008cc <copyText>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4a7c      	ldr	r2, [pc, #496]	; (8004de0 <loadMenuTexts+0x404>)
 8004bf0:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004bf2:	487c      	ldr	r0, [pc, #496]	; (8004de4 <loadMenuTexts+0x408>)
 8004bf4:	f7fb fe6a 	bl	80008cc <copyText>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4a7b      	ldr	r2, [pc, #492]	; (8004de8 <loadMenuTexts+0x40c>)
 8004bfc:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004bfe:	487b      	ldr	r0, [pc, #492]	; (8004dec <loadMenuTexts+0x410>)
 8004c00:	f7fb fe64 	bl	80008cc <copyText>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4a7a      	ldr	r2, [pc, #488]	; (8004df0 <loadMenuTexts+0x414>)
 8004c08:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004c0a:	487a      	ldr	r0, [pc, #488]	; (8004df4 <loadMenuTexts+0x418>)
 8004c0c:	f7fb fe5e 	bl	80008cc <copyText>
 8004c10:	4603      	mov	r3, r0
 8004c12:	4a79      	ldr	r2, [pc, #484]	; (8004df8 <loadMenuTexts+0x41c>)
 8004c14:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004c16:	4879      	ldr	r0, [pc, #484]	; (8004dfc <loadMenuTexts+0x420>)
 8004c18:	f7fb fe58 	bl	80008cc <copyText>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4a78      	ldr	r2, [pc, #480]	; (8004e00 <loadMenuTexts+0x424>)
 8004c20:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004c22:	4878      	ldr	r0, [pc, #480]	; (8004e04 <loadMenuTexts+0x428>)
 8004c24:	f7fb fe52 	bl	80008cc <copyText>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4a77      	ldr	r2, [pc, #476]	; (8004e08 <loadMenuTexts+0x42c>)
 8004c2c:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004c2e:	4877      	ldr	r0, [pc, #476]	; (8004e0c <loadMenuTexts+0x430>)
 8004c30:	f7fb fe4c 	bl	80008cc <copyText>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4a76      	ldr	r2, [pc, #472]	; (8004e10 <loadMenuTexts+0x434>)
 8004c38:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004c3a:	4876      	ldr	r0, [pc, #472]	; (8004e14 <loadMenuTexts+0x438>)
 8004c3c:	f7fb fe46 	bl	80008cc <copyText>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4a75      	ldr	r2, [pc, #468]	; (8004e18 <loadMenuTexts+0x43c>)
 8004c44:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004c46:	4875      	ldr	r0, [pc, #468]	; (8004e1c <loadMenuTexts+0x440>)
 8004c48:	f7fb fe40 	bl	80008cc <copyText>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4a74      	ldr	r2, [pc, #464]	; (8004e20 <loadMenuTexts+0x444>)
 8004c50:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004c52:	4874      	ldr	r0, [pc, #464]	; (8004e24 <loadMenuTexts+0x448>)
 8004c54:	f7fb fe3a 	bl	80008cc <copyText>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a73      	ldr	r2, [pc, #460]	; (8004e28 <loadMenuTexts+0x44c>)
 8004c5c:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004c5e:	4873      	ldr	r0, [pc, #460]	; (8004e2c <loadMenuTexts+0x450>)
 8004c60:	f7fb fe34 	bl	80008cc <copyText>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4a72      	ldr	r2, [pc, #456]	; (8004e30 <loadMenuTexts+0x454>)
 8004c68:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004c6a:	4872      	ldr	r0, [pc, #456]	; (8004e34 <loadMenuTexts+0x458>)
 8004c6c:	f7fb fe2e 	bl	80008cc <copyText>
 8004c70:	4603      	mov	r3, r0
 8004c72:	4a71      	ldr	r2, [pc, #452]	; (8004e38 <loadMenuTexts+0x45c>)
 8004c74:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004c76:	4871      	ldr	r0, [pc, #452]	; (8004e3c <loadMenuTexts+0x460>)
 8004c78:	f7fb fe28 	bl	80008cc <copyText>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4a70      	ldr	r2, [pc, #448]	; (8004e40 <loadMenuTexts+0x464>)
 8004c80:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004c82:	4870      	ldr	r0, [pc, #448]	; (8004e44 <loadMenuTexts+0x468>)
 8004c84:	f7fb fe22 	bl	80008cc <copyText>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	e0dd      	b.n	8004e48 <loadMenuTexts+0x46c>
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	20000bf8 	.word	0x20000bf8
 8004c94:	20000010 	.word	0x20000010
 8004c98:	20000bfc 	.word	0x20000bfc
 8004c9c:	20000020 	.word	0x20000020
 8004ca0:	20000c54 	.word	0x20000c54
 8004ca4:	20000030 	.word	0x20000030
 8004ca8:	20000c84 	.word	0x20000c84
 8004cac:	20000040 	.word	0x20000040
 8004cb0:	20000c8c 	.word	0x20000c8c
 8004cb4:	20000050 	.word	0x20000050
 8004cb8:	20000d04 	.word	0x20000d04
 8004cbc:	20000060 	.word	0x20000060
 8004cc0:	20000d08 	.word	0x20000d08
 8004cc4:	20000070 	.word	0x20000070
 8004cc8:	20000c00 	.word	0x20000c00
 8004ccc:	20000080 	.word	0x20000080
 8004cd0:	20000c04 	.word	0x20000c04
 8004cd4:	20000090 	.word	0x20000090
 8004cd8:	20000c08 	.word	0x20000c08
 8004cdc:	200000a0 	.word	0x200000a0
 8004ce0:	20000c0c 	.word	0x20000c0c
 8004ce4:	200000b0 	.word	0x200000b0
 8004ce8:	20000c10 	.word	0x20000c10
 8004cec:	200000c0 	.word	0x200000c0
 8004cf0:	20000c14 	.word	0x20000c14
 8004cf4:	200000d0 	.word	0x200000d0
 8004cf8:	20000c18 	.word	0x20000c18
 8004cfc:	200000e0 	.word	0x200000e0
 8004d00:	20000c1c 	.word	0x20000c1c
 8004d04:	200000f0 	.word	0x200000f0
 8004d08:	20000c20 	.word	0x20000c20
 8004d0c:	20000100 	.word	0x20000100
 8004d10:	20000c24 	.word	0x20000c24
 8004d14:	20000110 	.word	0x20000110
 8004d18:	20000c28 	.word	0x20000c28
 8004d1c:	20000120 	.word	0x20000120
 8004d20:	20000c2c 	.word	0x20000c2c
 8004d24:	20000130 	.word	0x20000130
 8004d28:	20000c30 	.word	0x20000c30
 8004d2c:	20000140 	.word	0x20000140
 8004d30:	20000c34 	.word	0x20000c34
 8004d34:	20000150 	.word	0x20000150
 8004d38:	20000c38 	.word	0x20000c38
 8004d3c:	20000160 	.word	0x20000160
 8004d40:	20000c3c 	.word	0x20000c3c
 8004d44:	20000170 	.word	0x20000170
 8004d48:	20000c40 	.word	0x20000c40
 8004d4c:	20000180 	.word	0x20000180
 8004d50:	20000c44 	.word	0x20000c44
 8004d54:	20000190 	.word	0x20000190
 8004d58:	20000c48 	.word	0x20000c48
 8004d5c:	200001a0 	.word	0x200001a0
 8004d60:	20000c4c 	.word	0x20000c4c
 8004d64:	200001b0 	.word	0x200001b0
 8004d68:	20000c50 	.word	0x20000c50
 8004d6c:	200001c0 	.word	0x200001c0
 8004d70:	20000c58 	.word	0x20000c58
 8004d74:	200001d0 	.word	0x200001d0
 8004d78:	20000c5c 	.word	0x20000c5c
 8004d7c:	200001e0 	.word	0x200001e0
 8004d80:	20000c60 	.word	0x20000c60
 8004d84:	200001f0 	.word	0x200001f0
 8004d88:	20000c64 	.word	0x20000c64
 8004d8c:	20000200 	.word	0x20000200
 8004d90:	20000c68 	.word	0x20000c68
 8004d94:	20000210 	.word	0x20000210
 8004d98:	20000c6c 	.word	0x20000c6c
 8004d9c:	20000220 	.word	0x20000220
 8004da0:	20000c70 	.word	0x20000c70
 8004da4:	20000230 	.word	0x20000230
 8004da8:	20000c74 	.word	0x20000c74
 8004dac:	20000240 	.word	0x20000240
 8004db0:	20000c78 	.word	0x20000c78
 8004db4:	20000250 	.word	0x20000250
 8004db8:	20000c7c 	.word	0x20000c7c
 8004dbc:	20000260 	.word	0x20000260
 8004dc0:	20000c80 	.word	0x20000c80
 8004dc4:	20000270 	.word	0x20000270
 8004dc8:	20000c88 	.word	0x20000c88
 8004dcc:	20000280 	.word	0x20000280
 8004dd0:	20000c90 	.word	0x20000c90
 8004dd4:	20000290 	.word	0x20000290
 8004dd8:	20000c94 	.word	0x20000c94
 8004ddc:	200002a0 	.word	0x200002a0
 8004de0:	20000c98 	.word	0x20000c98
 8004de4:	200002b0 	.word	0x200002b0
 8004de8:	20000c9c 	.word	0x20000c9c
 8004dec:	200002c0 	.word	0x200002c0
 8004df0:	20000ca0 	.word	0x20000ca0
 8004df4:	200002d0 	.word	0x200002d0
 8004df8:	20000ca4 	.word	0x20000ca4
 8004dfc:	200002e0 	.word	0x200002e0
 8004e00:	20000ca8 	.word	0x20000ca8
 8004e04:	200002f0 	.word	0x200002f0
 8004e08:	20000cac 	.word	0x20000cac
 8004e0c:	20000300 	.word	0x20000300
 8004e10:	20000cb0 	.word	0x20000cb0
 8004e14:	20000310 	.word	0x20000310
 8004e18:	20000cb4 	.word	0x20000cb4
 8004e1c:	20000320 	.word	0x20000320
 8004e20:	20000cb8 	.word	0x20000cb8
 8004e24:	20000330 	.word	0x20000330
 8004e28:	20000cbc 	.word	0x20000cbc
 8004e2c:	20000340 	.word	0x20000340
 8004e30:	20000cc0 	.word	0x20000cc0
 8004e34:	20000350 	.word	0x20000350
 8004e38:	20000cc4 	.word	0x20000cc4
 8004e3c:	20000360 	.word	0x20000360
 8004e40:	20000cc8 	.word	0x20000cc8
 8004e44:	20000370 	.word	0x20000370
 8004e48:	4a3d      	ldr	r2, [pc, #244]	; (8004f40 <loadMenuTexts+0x564>)
 8004e4a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8004e4c:	483d      	ldr	r0, [pc, #244]	; (8004f44 <loadMenuTexts+0x568>)
 8004e4e:	f7fb fd3d 	bl	80008cc <copyText>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <loadMenuTexts+0x56c>)
 8004e56:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8004e58:	483c      	ldr	r0, [pc, #240]	; (8004f4c <loadMenuTexts+0x570>)
 8004e5a:	f7fb fd37 	bl	80008cc <copyText>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4a3b      	ldr	r2, [pc, #236]	; (8004f50 <loadMenuTexts+0x574>)
 8004e62:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8004e64:	483b      	ldr	r0, [pc, #236]	; (8004f54 <loadMenuTexts+0x578>)
 8004e66:	f7fb fd31 	bl	80008cc <copyText>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4a3a      	ldr	r2, [pc, #232]	; (8004f58 <loadMenuTexts+0x57c>)
 8004e6e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8004e70:	483a      	ldr	r0, [pc, #232]	; (8004f5c <loadMenuTexts+0x580>)
 8004e72:	f7fb fd2b 	bl	80008cc <copyText>
 8004e76:	4603      	mov	r3, r0
 8004e78:	4a39      	ldr	r2, [pc, #228]	; (8004f60 <loadMenuTexts+0x584>)
 8004e7a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8004e7c:	4839      	ldr	r0, [pc, #228]	; (8004f64 <loadMenuTexts+0x588>)
 8004e7e:	f7fb fd25 	bl	80008cc <copyText>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <loadMenuTexts+0x58c>)
 8004e86:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8004e88:	4838      	ldr	r0, [pc, #224]	; (8004f6c <loadMenuTexts+0x590>)
 8004e8a:	f7fb fd1f 	bl	80008cc <copyText>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4a37      	ldr	r2, [pc, #220]	; (8004f70 <loadMenuTexts+0x594>)
 8004e92:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8004e94:	4837      	ldr	r0, [pc, #220]	; (8004f74 <loadMenuTexts+0x598>)
 8004e96:	f7fb fd19 	bl	80008cc <copyText>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4a36      	ldr	r2, [pc, #216]	; (8004f78 <loadMenuTexts+0x59c>)
 8004e9e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8004ea0:	4836      	ldr	r0, [pc, #216]	; (8004f7c <loadMenuTexts+0x5a0>)
 8004ea2:	f7fb fd13 	bl	80008cc <copyText>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4a35      	ldr	r2, [pc, #212]	; (8004f80 <loadMenuTexts+0x5a4>)
 8004eaa:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8004eac:	4835      	ldr	r0, [pc, #212]	; (8004f84 <loadMenuTexts+0x5a8>)
 8004eae:	f7fb fd0d 	bl	80008cc <copyText>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <loadMenuTexts+0x5ac>)
 8004eb6:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8004eb8:	4834      	ldr	r0, [pc, #208]	; (8004f8c <loadMenuTexts+0x5b0>)
 8004eba:	f7fb fd07 	bl	80008cc <copyText>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4a33      	ldr	r2, [pc, #204]	; (8004f90 <loadMenuTexts+0x5b4>)
 8004ec2:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8004ec4:	4833      	ldr	r0, [pc, #204]	; (8004f94 <loadMenuTexts+0x5b8>)
 8004ec6:	f7fb fd01 	bl	80008cc <copyText>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4a32      	ldr	r2, [pc, #200]	; (8004f98 <loadMenuTexts+0x5bc>)
 8004ece:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8004ed0:	4832      	ldr	r0, [pc, #200]	; (8004f9c <loadMenuTexts+0x5c0>)
 8004ed2:	f7fb fcfb 	bl	80008cc <copyText>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4a31      	ldr	r2, [pc, #196]	; (8004fa0 <loadMenuTexts+0x5c4>)
 8004eda:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8004edc:	4831      	ldr	r0, [pc, #196]	; (8004fa4 <loadMenuTexts+0x5c8>)
 8004ede:	f7fb fcf5 	bl	80008cc <copyText>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4a30      	ldr	r2, [pc, #192]	; (8004fa8 <loadMenuTexts+0x5cc>)
 8004ee6:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8004ee8:	4830      	ldr	r0, [pc, #192]	; (8004fac <loadMenuTexts+0x5d0>)
 8004eea:	f7fb fcef 	bl	80008cc <copyText>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4a2f      	ldr	r2, [pc, #188]	; (8004fb0 <loadMenuTexts+0x5d4>)
 8004ef2:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8004ef4:	482f      	ldr	r0, [pc, #188]	; (8004fb4 <loadMenuTexts+0x5d8>)
 8004ef6:	f7fb fce9 	bl	80008cc <copyText>
 8004efa:	4603      	mov	r3, r0
 8004efc:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <loadMenuTexts+0x5dc>)
 8004efe:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8004f00:	482e      	ldr	r0, [pc, #184]	; (8004fbc <loadMenuTexts+0x5e0>)
 8004f02:	f7fb fce3 	bl	80008cc <copyText>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4a2d      	ldr	r2, [pc, #180]	; (8004fc0 <loadMenuTexts+0x5e4>)
 8004f0a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8004f0c:	482d      	ldr	r0, [pc, #180]	; (8004fc4 <loadMenuTexts+0x5e8>)
 8004f0e:	f7fb fcdd 	bl	80008cc <copyText>
 8004f12:	4603      	mov	r3, r0
 8004f14:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <loadMenuTexts+0x5ec>)
 8004f16:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8004f18:	482c      	ldr	r0, [pc, #176]	; (8004fcc <loadMenuTexts+0x5f0>)
 8004f1a:	f7fb fcd7 	bl	80008cc <copyText>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <loadMenuTexts+0x5f4>)
 8004f22:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8004f24:	482b      	ldr	r0, [pc, #172]	; (8004fd4 <loadMenuTexts+0x5f8>)
 8004f26:	f7fb fcd1 	bl	80008cc <copyText>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <loadMenuTexts+0x5fc>)
 8004f2e:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8004f30:	482a      	ldr	r0, [pc, #168]	; (8004fdc <loadMenuTexts+0x600>)
 8004f32:	f7fb fccb 	bl	80008cc <copyText>
 8004f36:	4603      	mov	r3, r0
 8004f38:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <loadMenuTexts+0x604>)
 8004f3a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8004f3c:	e2d3      	b.n	80054e6 <loadMenuTexts+0xb0a>
 8004f3e:	bf00      	nop
 8004f40:	20000ccc 	.word	0x20000ccc
 8004f44:	20000380 	.word	0x20000380
 8004f48:	20000cd0 	.word	0x20000cd0
 8004f4c:	20000390 	.word	0x20000390
 8004f50:	20000cd4 	.word	0x20000cd4
 8004f54:	200003a0 	.word	0x200003a0
 8004f58:	20000cd8 	.word	0x20000cd8
 8004f5c:	200003b0 	.word	0x200003b0
 8004f60:	20000cdc 	.word	0x20000cdc
 8004f64:	200003c0 	.word	0x200003c0
 8004f68:	20000ce0 	.word	0x20000ce0
 8004f6c:	200003d0 	.word	0x200003d0
 8004f70:	20000ce4 	.word	0x20000ce4
 8004f74:	200003e0 	.word	0x200003e0
 8004f78:	20000ce8 	.word	0x20000ce8
 8004f7c:	200003f0 	.word	0x200003f0
 8004f80:	20000cec 	.word	0x20000cec
 8004f84:	20000400 	.word	0x20000400
 8004f88:	20000cf0 	.word	0x20000cf0
 8004f8c:	20000410 	.word	0x20000410
 8004f90:	20000cf4 	.word	0x20000cf4
 8004f94:	20000420 	.word	0x20000420
 8004f98:	20000cf8 	.word	0x20000cf8
 8004f9c:	20000430 	.word	0x20000430
 8004fa0:	20000cfc 	.word	0x20000cfc
 8004fa4:	20000440 	.word	0x20000440
 8004fa8:	20000d00 	.word	0x20000d00
 8004fac:	20000450 	.word	0x20000450
 8004fb0:	20000d0c 	.word	0x20000d0c
 8004fb4:	20000460 	.word	0x20000460
 8004fb8:	20000d10 	.word	0x20000d10
 8004fbc:	20000470 	.word	0x20000470
 8004fc0:	20000d14 	.word	0x20000d14
 8004fc4:	20000480 	.word	0x20000480
 8004fc8:	20000d18 	.word	0x20000d18
 8004fcc:	20000490 	.word	0x20000490
 8004fd0:	20000d1c 	.word	0x20000d1c
 8004fd4:	200004a0 	.word	0x200004a0
 8004fd8:	20000d20 	.word	0x20000d20
 8004fdc:	200004b0 	.word	0x200004b0
 8004fe0:	20000d24 	.word	0x20000d24
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8004fe4:	48a9      	ldr	r0, [pc, #676]	; (800528c <loadMenuTexts+0x8b0>)
 8004fe6:	f7fb fc71 	bl	80008cc <copyText>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4aa8      	ldr	r2, [pc, #672]	; (8005290 <loadMenuTexts+0x8b4>)
 8004fee:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8004ff0:	48a8      	ldr	r0, [pc, #672]	; (8005294 <loadMenuTexts+0x8b8>)
 8004ff2:	f7fb fc6b 	bl	80008cc <copyText>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4aa7      	ldr	r2, [pc, #668]	; (8005298 <loadMenuTexts+0x8bc>)
 8004ffa:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8004ffc:	48a7      	ldr	r0, [pc, #668]	; (800529c <loadMenuTexts+0x8c0>)
 8004ffe:	f7fb fc65 	bl	80008cc <copyText>
 8005002:	4603      	mov	r3, r0
 8005004:	4aa6      	ldr	r2, [pc, #664]	; (80052a0 <loadMenuTexts+0x8c4>)
 8005006:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005008:	48a6      	ldr	r0, [pc, #664]	; (80052a4 <loadMenuTexts+0x8c8>)
 800500a:	f7fb fc5f 	bl	80008cc <copyText>
 800500e:	4603      	mov	r3, r0
 8005010:	4aa5      	ldr	r2, [pc, #660]	; (80052a8 <loadMenuTexts+0x8cc>)
 8005012:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8005014:	48a5      	ldr	r0, [pc, #660]	; (80052ac <loadMenuTexts+0x8d0>)
 8005016:	f7fb fc59 	bl	80008cc <copyText>
 800501a:	4603      	mov	r3, r0
 800501c:	4aa4      	ldr	r2, [pc, #656]	; (80052b0 <loadMenuTexts+0x8d4>)
 800501e:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005020:	48a4      	ldr	r0, [pc, #656]	; (80052b4 <loadMenuTexts+0x8d8>)
 8005022:	f7fb fc53 	bl	80008cc <copyText>
 8005026:	4603      	mov	r3, r0
 8005028:	4aa3      	ldr	r2, [pc, #652]	; (80052b8 <loadMenuTexts+0x8dc>)
 800502a:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 800502c:	48a3      	ldr	r0, [pc, #652]	; (80052bc <loadMenuTexts+0x8e0>)
 800502e:	f7fb fc4d 	bl	80008cc <copyText>
 8005032:	4603      	mov	r3, r0
 8005034:	4aa2      	ldr	r2, [pc, #648]	; (80052c0 <loadMenuTexts+0x8e4>)
 8005036:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005038:	48a2      	ldr	r0, [pc, #648]	; (80052c4 <loadMenuTexts+0x8e8>)
 800503a:	f7fb fc47 	bl	80008cc <copyText>
 800503e:	4603      	mov	r3, r0
 8005040:	4aa1      	ldr	r2, [pc, #644]	; (80052c8 <loadMenuTexts+0x8ec>)
 8005042:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8005044:	48a1      	ldr	r0, [pc, #644]	; (80052cc <loadMenuTexts+0x8f0>)
 8005046:	f7fb fc41 	bl	80008cc <copyText>
 800504a:	4603      	mov	r3, r0
 800504c:	4aa0      	ldr	r2, [pc, #640]	; (80052d0 <loadMenuTexts+0x8f4>)
 800504e:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8005050:	48a0      	ldr	r0, [pc, #640]	; (80052d4 <loadMenuTexts+0x8f8>)
 8005052:	f7fb fc3b 	bl	80008cc <copyText>
 8005056:	4603      	mov	r3, r0
 8005058:	4a9f      	ldr	r2, [pc, #636]	; (80052d8 <loadMenuTexts+0x8fc>)
 800505a:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 800505c:	489f      	ldr	r0, [pc, #636]	; (80052dc <loadMenuTexts+0x900>)
 800505e:	f7fb fc35 	bl	80008cc <copyText>
 8005062:	4603      	mov	r3, r0
 8005064:	4a9e      	ldr	r2, [pc, #632]	; (80052e0 <loadMenuTexts+0x904>)
 8005066:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005068:	489e      	ldr	r0, [pc, #632]	; (80052e4 <loadMenuTexts+0x908>)
 800506a:	f7fb fc2f 	bl	80008cc <copyText>
 800506e:	4603      	mov	r3, r0
 8005070:	4a9d      	ldr	r2, [pc, #628]	; (80052e8 <loadMenuTexts+0x90c>)
 8005072:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005074:	489d      	ldr	r0, [pc, #628]	; (80052ec <loadMenuTexts+0x910>)
 8005076:	f7fb fc29 	bl	80008cc <copyText>
 800507a:	4603      	mov	r3, r0
 800507c:	4a9c      	ldr	r2, [pc, #624]	; (80052f0 <loadMenuTexts+0x914>)
 800507e:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005080:	489c      	ldr	r0, [pc, #624]	; (80052f4 <loadMenuTexts+0x918>)
 8005082:	f7fb fc23 	bl	80008cc <copyText>
 8005086:	4603      	mov	r3, r0
 8005088:	4a9b      	ldr	r2, [pc, #620]	; (80052f8 <loadMenuTexts+0x91c>)
 800508a:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 800508c:	489b      	ldr	r0, [pc, #620]	; (80052fc <loadMenuTexts+0x920>)
 800508e:	f7fb fc1d 	bl	80008cc <copyText>
 8005092:	4603      	mov	r3, r0
 8005094:	4a9a      	ldr	r2, [pc, #616]	; (8005300 <loadMenuTexts+0x924>)
 8005096:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005098:	489a      	ldr	r0, [pc, #616]	; (8005304 <loadMenuTexts+0x928>)
 800509a:	f7fb fc17 	bl	80008cc <copyText>
 800509e:	4603      	mov	r3, r0
 80050a0:	4a99      	ldr	r2, [pc, #612]	; (8005308 <loadMenuTexts+0x92c>)
 80050a2:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80050a4:	4899      	ldr	r0, [pc, #612]	; (800530c <loadMenuTexts+0x930>)
 80050a6:	f7fb fc11 	bl	80008cc <copyText>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4a98      	ldr	r2, [pc, #608]	; (8005310 <loadMenuTexts+0x934>)
 80050ae:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80050b0:	4898      	ldr	r0, [pc, #608]	; (8005314 <loadMenuTexts+0x938>)
 80050b2:	f7fb fc0b 	bl	80008cc <copyText>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4a97      	ldr	r2, [pc, #604]	; (8005318 <loadMenuTexts+0x93c>)
 80050ba:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80050bc:	4897      	ldr	r0, [pc, #604]	; (800531c <loadMenuTexts+0x940>)
 80050be:	f7fb fc05 	bl	80008cc <copyText>
 80050c2:	4603      	mov	r3, r0
 80050c4:	4a96      	ldr	r2, [pc, #600]	; (8005320 <loadMenuTexts+0x944>)
 80050c6:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 80050c8:	4896      	ldr	r0, [pc, #600]	; (8005324 <loadMenuTexts+0x948>)
 80050ca:	f7fb fbff 	bl	80008cc <copyText>
 80050ce:	4603      	mov	r3, r0
 80050d0:	4a95      	ldr	r2, [pc, #596]	; (8005328 <loadMenuTexts+0x94c>)
 80050d2:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80050d4:	4895      	ldr	r0, [pc, #596]	; (800532c <loadMenuTexts+0x950>)
 80050d6:	f7fb fbf9 	bl	80008cc <copyText>
 80050da:	4603      	mov	r3, r0
 80050dc:	4a94      	ldr	r2, [pc, #592]	; (8005330 <loadMenuTexts+0x954>)
 80050de:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80050e0:	4894      	ldr	r0, [pc, #592]	; (8005334 <loadMenuTexts+0x958>)
 80050e2:	f7fb fbf3 	bl	80008cc <copyText>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4a93      	ldr	r2, [pc, #588]	; (8005338 <loadMenuTexts+0x95c>)
 80050ea:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80050ec:	4893      	ldr	r0, [pc, #588]	; (800533c <loadMenuTexts+0x960>)
 80050ee:	f7fb fbed 	bl	80008cc <copyText>
 80050f2:	4603      	mov	r3, r0
 80050f4:	4a92      	ldr	r2, [pc, #584]	; (8005340 <loadMenuTexts+0x964>)
 80050f6:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80050f8:	4892      	ldr	r0, [pc, #584]	; (8005344 <loadMenuTexts+0x968>)
 80050fa:	f7fb fbe7 	bl	80008cc <copyText>
 80050fe:	4603      	mov	r3, r0
 8005100:	4a91      	ldr	r2, [pc, #580]	; (8005348 <loadMenuTexts+0x96c>)
 8005102:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005104:	4891      	ldr	r0, [pc, #580]	; (800534c <loadMenuTexts+0x970>)
 8005106:	f7fb fbe1 	bl	80008cc <copyText>
 800510a:	4603      	mov	r3, r0
 800510c:	4a90      	ldr	r2, [pc, #576]	; (8005350 <loadMenuTexts+0x974>)
 800510e:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005110:	4890      	ldr	r0, [pc, #576]	; (8005354 <loadMenuTexts+0x978>)
 8005112:	f7fb fbdb 	bl	80008cc <copyText>
 8005116:	4603      	mov	r3, r0
 8005118:	4a8f      	ldr	r2, [pc, #572]	; (8005358 <loadMenuTexts+0x97c>)
 800511a:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 800511c:	488f      	ldr	r0, [pc, #572]	; (800535c <loadMenuTexts+0x980>)
 800511e:	f7fb fbd5 	bl	80008cc <copyText>
 8005122:	4603      	mov	r3, r0
 8005124:	4a8e      	ldr	r2, [pc, #568]	; (8005360 <loadMenuTexts+0x984>)
 8005126:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005128:	488e      	ldr	r0, [pc, #568]	; (8005364 <loadMenuTexts+0x988>)
 800512a:	f7fb fbcf 	bl	80008cc <copyText>
 800512e:	4603      	mov	r3, r0
 8005130:	4a8d      	ldr	r2, [pc, #564]	; (8005368 <loadMenuTexts+0x98c>)
 8005132:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005134:	488d      	ldr	r0, [pc, #564]	; (800536c <loadMenuTexts+0x990>)
 8005136:	f7fb fbc9 	bl	80008cc <copyText>
 800513a:	4603      	mov	r3, r0
 800513c:	4a8c      	ldr	r2, [pc, #560]	; (8005370 <loadMenuTexts+0x994>)
 800513e:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8005140:	488c      	ldr	r0, [pc, #560]	; (8005374 <loadMenuTexts+0x998>)
 8005142:	f7fb fbc3 	bl	80008cc <copyText>
 8005146:	4603      	mov	r3, r0
 8005148:	4a8b      	ldr	r2, [pc, #556]	; (8005378 <loadMenuTexts+0x99c>)
 800514a:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 800514c:	488b      	ldr	r0, [pc, #556]	; (800537c <loadMenuTexts+0x9a0>)
 800514e:	f7fb fbbd 	bl	80008cc <copyText>
 8005152:	4603      	mov	r3, r0
 8005154:	4a8a      	ldr	r2, [pc, #552]	; (8005380 <loadMenuTexts+0x9a4>)
 8005156:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005158:	488a      	ldr	r0, [pc, #552]	; (8005384 <loadMenuTexts+0x9a8>)
 800515a:	f7fb fbb7 	bl	80008cc <copyText>
 800515e:	4603      	mov	r3, r0
 8005160:	4a89      	ldr	r2, [pc, #548]	; (8005388 <loadMenuTexts+0x9ac>)
 8005162:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005164:	4889      	ldr	r0, [pc, #548]	; (800538c <loadMenuTexts+0x9b0>)
 8005166:	f7fb fbb1 	bl	80008cc <copyText>
 800516a:	4603      	mov	r3, r0
 800516c:	4a88      	ldr	r2, [pc, #544]	; (8005390 <loadMenuTexts+0x9b4>)
 800516e:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005170:	4888      	ldr	r0, [pc, #544]	; (8005394 <loadMenuTexts+0x9b8>)
 8005172:	f7fb fbab 	bl	80008cc <copyText>
 8005176:	4603      	mov	r3, r0
 8005178:	4a87      	ldr	r2, [pc, #540]	; (8005398 <loadMenuTexts+0x9bc>)
 800517a:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 800517c:	4887      	ldr	r0, [pc, #540]	; (800539c <loadMenuTexts+0x9c0>)
 800517e:	f7fb fba5 	bl	80008cc <copyText>
 8005182:	4603      	mov	r3, r0
 8005184:	4a86      	ldr	r2, [pc, #536]	; (80053a0 <loadMenuTexts+0x9c4>)
 8005186:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005188:	4886      	ldr	r0, [pc, #536]	; (80053a4 <loadMenuTexts+0x9c8>)
 800518a:	f7fb fb9f 	bl	80008cc <copyText>
 800518e:	4603      	mov	r3, r0
 8005190:	4a85      	ldr	r2, [pc, #532]	; (80053a8 <loadMenuTexts+0x9cc>)
 8005192:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005194:	4885      	ldr	r0, [pc, #532]	; (80053ac <loadMenuTexts+0x9d0>)
 8005196:	f7fb fb99 	bl	80008cc <copyText>
 800519a:	4603      	mov	r3, r0
 800519c:	4a84      	ldr	r2, [pc, #528]	; (80053b0 <loadMenuTexts+0x9d4>)
 800519e:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 80051a0:	4884      	ldr	r0, [pc, #528]	; (80053b4 <loadMenuTexts+0x9d8>)
 80051a2:	f7fb fb93 	bl	80008cc <copyText>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4a83      	ldr	r2, [pc, #524]	; (80053b8 <loadMenuTexts+0x9dc>)
 80051aa:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80051ac:	4883      	ldr	r0, [pc, #524]	; (80053bc <loadMenuTexts+0x9e0>)
 80051ae:	f7fb fb8d 	bl	80008cc <copyText>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a82      	ldr	r2, [pc, #520]	; (80053c0 <loadMenuTexts+0x9e4>)
 80051b6:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80051b8:	4882      	ldr	r0, [pc, #520]	; (80053c4 <loadMenuTexts+0x9e8>)
 80051ba:	f7fb fb87 	bl	80008cc <copyText>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a81      	ldr	r2, [pc, #516]	; (80053c8 <loadMenuTexts+0x9ec>)
 80051c2:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80051c4:	4881      	ldr	r0, [pc, #516]	; (80053cc <loadMenuTexts+0x9f0>)
 80051c6:	f7fb fb81 	bl	80008cc <copyText>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a80      	ldr	r2, [pc, #512]	; (80053d0 <loadMenuTexts+0x9f4>)
 80051ce:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80051d0:	4880      	ldr	r0, [pc, #512]	; (80053d4 <loadMenuTexts+0x9f8>)
 80051d2:	f7fb fb7b 	bl	80008cc <copyText>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a7f      	ldr	r2, [pc, #508]	; (80053d8 <loadMenuTexts+0x9fc>)
 80051da:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80051dc:	487f      	ldr	r0, [pc, #508]	; (80053dc <loadMenuTexts+0xa00>)
 80051de:	f7fb fb75 	bl	80008cc <copyText>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a7e      	ldr	r2, [pc, #504]	; (80053e0 <loadMenuTexts+0xa04>)
 80051e6:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80051e8:	487e      	ldr	r0, [pc, #504]	; (80053e4 <loadMenuTexts+0xa08>)
 80051ea:	f7fb fb6f 	bl	80008cc <copyText>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4a7d      	ldr	r2, [pc, #500]	; (80053e8 <loadMenuTexts+0xa0c>)
 80051f2:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80051f4:	487d      	ldr	r0, [pc, #500]	; (80053ec <loadMenuTexts+0xa10>)
 80051f6:	f7fb fb69 	bl	80008cc <copyText>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4a7c      	ldr	r2, [pc, #496]	; (80053f0 <loadMenuTexts+0xa14>)
 80051fe:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005200:	487c      	ldr	r0, [pc, #496]	; (80053f4 <loadMenuTexts+0xa18>)
 8005202:	f7fb fb63 	bl	80008cc <copyText>
 8005206:	4603      	mov	r3, r0
 8005208:	4a7b      	ldr	r2, [pc, #492]	; (80053f8 <loadMenuTexts+0xa1c>)
 800520a:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 800520c:	487b      	ldr	r0, [pc, #492]	; (80053fc <loadMenuTexts+0xa20>)
 800520e:	f7fb fb5d 	bl	80008cc <copyText>
 8005212:	4603      	mov	r3, r0
 8005214:	4a7a      	ldr	r2, [pc, #488]	; (8005400 <loadMenuTexts+0xa24>)
 8005216:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005218:	487a      	ldr	r0, [pc, #488]	; (8005404 <loadMenuTexts+0xa28>)
 800521a:	f7fb fb57 	bl	80008cc <copyText>
 800521e:	4603      	mov	r3, r0
 8005220:	4a79      	ldr	r2, [pc, #484]	; (8005408 <loadMenuTexts+0xa2c>)
 8005222:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8005224:	4879      	ldr	r0, [pc, #484]	; (800540c <loadMenuTexts+0xa30>)
 8005226:	f7fb fb51 	bl	80008cc <copyText>
 800522a:	4603      	mov	r3, r0
 800522c:	4a78      	ldr	r2, [pc, #480]	; (8005410 <loadMenuTexts+0xa34>)
 800522e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005230:	4878      	ldr	r0, [pc, #480]	; (8005414 <loadMenuTexts+0xa38>)
 8005232:	f7fb fb4b 	bl	80008cc <copyText>
 8005236:	4603      	mov	r3, r0
 8005238:	4a77      	ldr	r2, [pc, #476]	; (8005418 <loadMenuTexts+0xa3c>)
 800523a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 800523c:	4877      	ldr	r0, [pc, #476]	; (800541c <loadMenuTexts+0xa40>)
 800523e:	f7fb fb45 	bl	80008cc <copyText>
 8005242:	4603      	mov	r3, r0
 8005244:	4a76      	ldr	r2, [pc, #472]	; (8005420 <loadMenuTexts+0xa44>)
 8005246:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005248:	4876      	ldr	r0, [pc, #472]	; (8005424 <loadMenuTexts+0xa48>)
 800524a:	f7fb fb3f 	bl	80008cc <copyText>
 800524e:	4603      	mov	r3, r0
 8005250:	4a75      	ldr	r2, [pc, #468]	; (8005428 <loadMenuTexts+0xa4c>)
 8005252:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005254:	4875      	ldr	r0, [pc, #468]	; (800542c <loadMenuTexts+0xa50>)
 8005256:	f7fb fb39 	bl	80008cc <copyText>
 800525a:	4603      	mov	r3, r0
 800525c:	4a74      	ldr	r2, [pc, #464]	; (8005430 <loadMenuTexts+0xa54>)
 800525e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005260:	4874      	ldr	r0, [pc, #464]	; (8005434 <loadMenuTexts+0xa58>)
 8005262:	f7fb fb33 	bl	80008cc <copyText>
 8005266:	4603      	mov	r3, r0
 8005268:	4a73      	ldr	r2, [pc, #460]	; (8005438 <loadMenuTexts+0xa5c>)
 800526a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 800526c:	4873      	ldr	r0, [pc, #460]	; (800543c <loadMenuTexts+0xa60>)
 800526e:	f7fb fb2d 	bl	80008cc <copyText>
 8005272:	4603      	mov	r3, r0
 8005274:	4a72      	ldr	r2, [pc, #456]	; (8005440 <loadMenuTexts+0xa64>)
 8005276:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005278:	4872      	ldr	r0, [pc, #456]	; (8005444 <loadMenuTexts+0xa68>)
 800527a:	f7fb fb27 	bl	80008cc <copyText>
 800527e:	4603      	mov	r3, r0
 8005280:	4a71      	ldr	r2, [pc, #452]	; (8005448 <loadMenuTexts+0xa6c>)
 8005282:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005284:	4871      	ldr	r0, [pc, #452]	; (800544c <loadMenuTexts+0xa70>)
 8005286:	f7fb fb21 	bl	80008cc <copyText>
 800528a:	e0e1      	b.n	8005450 <loadMenuTexts+0xa74>
 800528c:	200004c0 	.word	0x200004c0
 8005290:	20000c00 	.word	0x20000c00
 8005294:	200004d0 	.word	0x200004d0
 8005298:	20000c04 	.word	0x20000c04
 800529c:	200004e0 	.word	0x200004e0
 80052a0:	20000c08 	.word	0x20000c08
 80052a4:	200004f0 	.word	0x200004f0
 80052a8:	20000c0c 	.word	0x20000c0c
 80052ac:	20000500 	.word	0x20000500
 80052b0:	20000c10 	.word	0x20000c10
 80052b4:	20000510 	.word	0x20000510
 80052b8:	20000c14 	.word	0x20000c14
 80052bc:	20000520 	.word	0x20000520
 80052c0:	20000c18 	.word	0x20000c18
 80052c4:	20000530 	.word	0x20000530
 80052c8:	20000c1c 	.word	0x20000c1c
 80052cc:	20000540 	.word	0x20000540
 80052d0:	20000c20 	.word	0x20000c20
 80052d4:	20000550 	.word	0x20000550
 80052d8:	20000c24 	.word	0x20000c24
 80052dc:	20000560 	.word	0x20000560
 80052e0:	20000c28 	.word	0x20000c28
 80052e4:	20000570 	.word	0x20000570
 80052e8:	20000c2c 	.word	0x20000c2c
 80052ec:	20000580 	.word	0x20000580
 80052f0:	20000c30 	.word	0x20000c30
 80052f4:	20000590 	.word	0x20000590
 80052f8:	20000c34 	.word	0x20000c34
 80052fc:	200005a0 	.word	0x200005a0
 8005300:	20000c38 	.word	0x20000c38
 8005304:	200005b0 	.word	0x200005b0
 8005308:	20000c3c 	.word	0x20000c3c
 800530c:	200005c0 	.word	0x200005c0
 8005310:	20000c40 	.word	0x20000c40
 8005314:	200005d0 	.word	0x200005d0
 8005318:	20000c44 	.word	0x20000c44
 800531c:	200005e0 	.word	0x200005e0
 8005320:	20000c48 	.word	0x20000c48
 8005324:	200005f0 	.word	0x200005f0
 8005328:	20000c4c 	.word	0x20000c4c
 800532c:	20000600 	.word	0x20000600
 8005330:	20000c50 	.word	0x20000c50
 8005334:	20000610 	.word	0x20000610
 8005338:	20000c58 	.word	0x20000c58
 800533c:	20000620 	.word	0x20000620
 8005340:	20000c5c 	.word	0x20000c5c
 8005344:	20000630 	.word	0x20000630
 8005348:	20000c60 	.word	0x20000c60
 800534c:	20000640 	.word	0x20000640
 8005350:	20000c64 	.word	0x20000c64
 8005354:	20000650 	.word	0x20000650
 8005358:	20000c68 	.word	0x20000c68
 800535c:	20000660 	.word	0x20000660
 8005360:	20000c6c 	.word	0x20000c6c
 8005364:	20000670 	.word	0x20000670
 8005368:	20000c70 	.word	0x20000c70
 800536c:	20000680 	.word	0x20000680
 8005370:	20000c74 	.word	0x20000c74
 8005374:	20000690 	.word	0x20000690
 8005378:	20000c78 	.word	0x20000c78
 800537c:	200006a0 	.word	0x200006a0
 8005380:	20000c7c 	.word	0x20000c7c
 8005384:	200006b0 	.word	0x200006b0
 8005388:	20000c80 	.word	0x20000c80
 800538c:	200006c0 	.word	0x200006c0
 8005390:	20000c88 	.word	0x20000c88
 8005394:	200006d0 	.word	0x200006d0
 8005398:	20000c90 	.word	0x20000c90
 800539c:	200006e0 	.word	0x200006e0
 80053a0:	20000c94 	.word	0x20000c94
 80053a4:	200006f0 	.word	0x200006f0
 80053a8:	20000c98 	.word	0x20000c98
 80053ac:	20000700 	.word	0x20000700
 80053b0:	20000c9c 	.word	0x20000c9c
 80053b4:	20000710 	.word	0x20000710
 80053b8:	20000ca0 	.word	0x20000ca0
 80053bc:	20000720 	.word	0x20000720
 80053c0:	20000ca4 	.word	0x20000ca4
 80053c4:	20000730 	.word	0x20000730
 80053c8:	20000ca8 	.word	0x20000ca8
 80053cc:	20000740 	.word	0x20000740
 80053d0:	20000cac 	.word	0x20000cac
 80053d4:	20000750 	.word	0x20000750
 80053d8:	20000cb0 	.word	0x20000cb0
 80053dc:	20000760 	.word	0x20000760
 80053e0:	20000cb4 	.word	0x20000cb4
 80053e4:	20000770 	.word	0x20000770
 80053e8:	20000cb8 	.word	0x20000cb8
 80053ec:	20000780 	.word	0x20000780
 80053f0:	20000cbc 	.word	0x20000cbc
 80053f4:	20000790 	.word	0x20000790
 80053f8:	20000cc0 	.word	0x20000cc0
 80053fc:	200007a0 	.word	0x200007a0
 8005400:	20000cc4 	.word	0x20000cc4
 8005404:	200007b0 	.word	0x200007b0
 8005408:	20000cc8 	.word	0x20000cc8
 800540c:	200007c0 	.word	0x200007c0
 8005410:	20000ccc 	.word	0x20000ccc
 8005414:	200007d0 	.word	0x200007d0
 8005418:	20000cd0 	.word	0x20000cd0
 800541c:	200007e0 	.word	0x200007e0
 8005420:	20000cd4 	.word	0x20000cd4
 8005424:	200007f0 	.word	0x200007f0
 8005428:	20000cd8 	.word	0x20000cd8
 800542c:	20000800 	.word	0x20000800
 8005430:	20000cdc 	.word	0x20000cdc
 8005434:	20000810 	.word	0x20000810
 8005438:	20000ce0 	.word	0x20000ce0
 800543c:	20000820 	.word	0x20000820
 8005440:	20000ce4 	.word	0x20000ce4
 8005444:	20000830 	.word	0x20000830
 8005448:	20000ce8 	.word	0x20000ce8
 800544c:	20000840 	.word	0x20000840
 8005450:	4603      	mov	r3, r0
 8005452:	4a27      	ldr	r2, [pc, #156]	; (80054f0 <loadMenuTexts+0xb14>)
 8005454:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005456:	4827      	ldr	r0, [pc, #156]	; (80054f4 <loadMenuTexts+0xb18>)
 8005458:	f7fb fa38 	bl	80008cc <copyText>
 800545c:	4603      	mov	r3, r0
 800545e:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <loadMenuTexts+0xb1c>)
 8005460:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8005462:	4826      	ldr	r0, [pc, #152]	; (80054fc <loadMenuTexts+0xb20>)
 8005464:	f7fb fa32 	bl	80008cc <copyText>
 8005468:	4603      	mov	r3, r0
 800546a:	4a25      	ldr	r2, [pc, #148]	; (8005500 <loadMenuTexts+0xb24>)
 800546c:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800546e:	4825      	ldr	r0, [pc, #148]	; (8005504 <loadMenuTexts+0xb28>)
 8005470:	f7fb fa2c 	bl	80008cc <copyText>
 8005474:	4603      	mov	r3, r0
 8005476:	4a24      	ldr	r2, [pc, #144]	; (8005508 <loadMenuTexts+0xb2c>)
 8005478:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800547a:	4824      	ldr	r0, [pc, #144]	; (800550c <loadMenuTexts+0xb30>)
 800547c:	f7fb fa26 	bl	80008cc <copyText>
 8005480:	4603      	mov	r3, r0
 8005482:	4a23      	ldr	r2, [pc, #140]	; (8005510 <loadMenuTexts+0xb34>)
 8005484:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005486:	4823      	ldr	r0, [pc, #140]	; (8005514 <loadMenuTexts+0xb38>)
 8005488:	f7fb fa20 	bl	80008cc <copyText>
 800548c:	4603      	mov	r3, r0
 800548e:	4a22      	ldr	r2, [pc, #136]	; (8005518 <loadMenuTexts+0xb3c>)
 8005490:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005492:	4822      	ldr	r0, [pc, #136]	; (800551c <loadMenuTexts+0xb40>)
 8005494:	f7fb fa1a 	bl	80008cc <copyText>
 8005498:	4603      	mov	r3, r0
 800549a:	4a21      	ldr	r2, [pc, #132]	; (8005520 <loadMenuTexts+0xb44>)
 800549c:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800549e:	4821      	ldr	r0, [pc, #132]	; (8005524 <loadMenuTexts+0xb48>)
 80054a0:	f7fb fa14 	bl	80008cc <copyText>
 80054a4:	4603      	mov	r3, r0
 80054a6:	4a20      	ldr	r2, [pc, #128]	; (8005528 <loadMenuTexts+0xb4c>)
 80054a8:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80054aa:	4820      	ldr	r0, [pc, #128]	; (800552c <loadMenuTexts+0xb50>)
 80054ac:	f7fb fa0e 	bl	80008cc <copyText>
 80054b0:	4603      	mov	r3, r0
 80054b2:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <loadMenuTexts+0xb54>)
 80054b4:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80054b6:	481f      	ldr	r0, [pc, #124]	; (8005534 <loadMenuTexts+0xb58>)
 80054b8:	f7fb fa08 	bl	80008cc <copyText>
 80054bc:	4603      	mov	r3, r0
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <loadMenuTexts+0xb5c>)
 80054c0:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80054c2:	481e      	ldr	r0, [pc, #120]	; (800553c <loadMenuTexts+0xb60>)
 80054c4:	f7fb fa02 	bl	80008cc <copyText>
 80054c8:	4603      	mov	r3, r0
 80054ca:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <loadMenuTexts+0xb64>)
 80054cc:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80054ce:	481d      	ldr	r0, [pc, #116]	; (8005544 <loadMenuTexts+0xb68>)
 80054d0:	f7fb f9fc 	bl	80008cc <copyText>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <loadMenuTexts+0xb6c>)
 80054d8:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80054da:	481c      	ldr	r0, [pc, #112]	; (800554c <loadMenuTexts+0xb70>)
 80054dc:	f7fb f9f6 	bl	80008cc <copyText>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <loadMenuTexts+0xb74>)
 80054e4:	6013      	str	r3, [r2, #0]
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000cec 	.word	0x20000cec
 80054f4:	20000850 	.word	0x20000850
 80054f8:	20000cf0 	.word	0x20000cf0
 80054fc:	20000860 	.word	0x20000860
 8005500:	20000cf4 	.word	0x20000cf4
 8005504:	20000870 	.word	0x20000870
 8005508:	20000cf8 	.word	0x20000cf8
 800550c:	20000880 	.word	0x20000880
 8005510:	20000cfc 	.word	0x20000cfc
 8005514:	20000890 	.word	0x20000890
 8005518:	20000d00 	.word	0x20000d00
 800551c:	200008a0 	.word	0x200008a0
 8005520:	20000d0c 	.word	0x20000d0c
 8005524:	200008b0 	.word	0x200008b0
 8005528:	20000d10 	.word	0x20000d10
 800552c:	200008c0 	.word	0x200008c0
 8005530:	20000d14 	.word	0x20000d14
 8005534:	200008d0 	.word	0x200008d0
 8005538:	20000d18 	.word	0x20000d18
 800553c:	200008e0 	.word	0x200008e0
 8005540:	20000d1c 	.word	0x20000d1c
 8005544:	200008f0 	.word	0x200008f0
 8005548:	20000d20 	.word	0x20000d20
 800554c:	20000900 	.word	0x20000900
 8005550:	20000d24 	.word	0x20000d24

08005554 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005564:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <lcdUpdate+0x9c>)
 8005566:	2101      	movs	r1, #1
 8005568:	2002      	movs	r0, #2
 800556a:	f7fb f925 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 800556e:	e03b      	b.n	80055e8 <lcdUpdate+0x94>
	} else if(y==2) {
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d105      	bne.n	8005582 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005576:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <lcdUpdate+0x9c>)
 8005578:	2102      	movs	r1, #2
 800557a:	2002      	movs	r0, #2
 800557c:	f7fb f91c 	bl	80007b8 <lcd_print>
}
 8005580:	e032      	b.n	80055e8 <lcdUpdate+0x94>
	} else if(y==3) {
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d105      	bne.n	8005594 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005588:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <lcdUpdate+0x9c>)
 800558a:	2103      	movs	r1, #3
 800558c:	2002      	movs	r0, #2
 800558e:	f7fb f913 	bl	80007b8 <lcd_print>
}
 8005592:	e029      	b.n	80055e8 <lcdUpdate+0x94>
	} else if(y==4) {
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	2b04      	cmp	r3, #4
 8005598:	d105      	bne.n	80055a6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800559a:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <lcdUpdate+0x9c>)
 800559c:	2104      	movs	r1, #4
 800559e:	2002      	movs	r0, #2
 80055a0:	f7fb f90a 	bl	80007b8 <lcd_print>
}
 80055a4:	e020      	b.n	80055e8 <lcdUpdate+0x94>
	} else if(y==5) {
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	d105      	bne.n	80055b8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80055ac:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <lcdUpdate+0x9c>)
 80055ae:	2105      	movs	r1, #5
 80055b0:	2002      	movs	r0, #2
 80055b2:	f7fb f901 	bl	80007b8 <lcd_print>
}
 80055b6:	e017      	b.n	80055e8 <lcdUpdate+0x94>
	} else if(y==6) {
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d105      	bne.n	80055ca <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <lcdUpdate+0x9c>)
 80055c0:	2106      	movs	r1, #6
 80055c2:	2002      	movs	r0, #2
 80055c4:	f7fb f8f8 	bl	80007b8 <lcd_print>
}
 80055c8:	e00e      	b.n	80055e8 <lcdUpdate+0x94>
	} else if (y==7) {
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	2b07      	cmp	r3, #7
 80055ce:	d10b      	bne.n	80055e8 <lcdUpdate+0x94>
		lcd_clear();
 80055d0:	f7fb f91e 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 80055d4:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <lcdUpdate+0xa0>)
 80055d6:	2101      	movs	r1, #1
 80055d8:	2001      	movs	r0, #1
 80055da:	f7fb f8ed 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80055de:	4a06      	ldr	r2, [pc, #24]	; (80055f8 <lcdUpdate+0xa4>)
 80055e0:	2101      	movs	r1, #1
 80055e2:	2002      	movs	r0, #2
 80055e4:	f7fb f8e8 	bl	80007b8 <lcd_print>
}
 80055e8:	bf00      	nop
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	0800d810 	.word	0x0800d810
 80055f4:	0800e13c 	.word	0x0800e13c
 80055f8:	0800e150 	.word	0x0800e150

080055fc <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d11d      	bne.n	8005648 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 800560c:	4b62      	ldr	r3, [pc, #392]	; (8005798 <hataKoduLcdGoster+0x19c>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005614:	4a61      	ldr	r2, [pc, #388]	; (800579c <hataKoduLcdGoster+0x1a0>)
 8005616:	2101      	movs	r1, #1
 8005618:	2001      	movs	r0, #1
 800561a:	f7fb f8cd 	bl	80007b8 <lcd_print>
 800561e:	e008      	b.n	8005632 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005620:	4b5d      	ldr	r3, [pc, #372]	; (8005798 <hataKoduLcdGoster+0x19c>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d104      	bne.n	8005632 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005628:	4a5d      	ldr	r2, [pc, #372]	; (80057a0 <hataKoduLcdGoster+0x1a4>)
 800562a:	2101      	movs	r1, #1
 800562c:	2001      	movs	r0, #1
 800562e:	f7fb f8c3 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8005632:	4a5c      	ldr	r2, [pc, #368]	; (80057a4 <hataKoduLcdGoster+0x1a8>)
 8005634:	2101      	movs	r1, #1
 8005636:	2002      	movs	r0, #2
 8005638:	f7fb f8be 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 800563c:	4a5a      	ldr	r2, [pc, #360]	; (80057a8 <hataKoduLcdGoster+0x1ac>)
 800563e:	2107      	movs	r1, #7
 8005640:	2002      	movs	r0, #2
 8005642:	f7fb f8b9 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005646:	e0a3      	b.n	8005790 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d11d      	bne.n	800568a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800564e:	4b52      	ldr	r3, [pc, #328]	; (8005798 <hataKoduLcdGoster+0x19c>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005656:	4a51      	ldr	r2, [pc, #324]	; (800579c <hataKoduLcdGoster+0x1a0>)
 8005658:	2101      	movs	r1, #1
 800565a:	2001      	movs	r0, #1
 800565c:	f7fb f8ac 	bl	80007b8 <lcd_print>
 8005660:	e008      	b.n	8005674 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005662:	4b4d      	ldr	r3, [pc, #308]	; (8005798 <hataKoduLcdGoster+0x19c>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d104      	bne.n	8005674 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 800566a:	4a4d      	ldr	r2, [pc, #308]	; (80057a0 <hataKoduLcdGoster+0x1a4>)
 800566c:	2101      	movs	r1, #1
 800566e:	2001      	movs	r0, #1
 8005670:	f7fb f8a2 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 8005674:	4a4d      	ldr	r2, [pc, #308]	; (80057ac <hataKoduLcdGoster+0x1b0>)
 8005676:	2102      	movs	r1, #2
 8005678:	2002      	movs	r0, #2
 800567a:	f7fb f89d 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 800567e:	4a4a      	ldr	r2, [pc, #296]	; (80057a8 <hataKoduLcdGoster+0x1ac>)
 8005680:	2107      	movs	r1, #7
 8005682:	2002      	movs	r0, #2
 8005684:	f7fb f898 	bl	80007b8 <lcd_print>
}
 8005688:	e082      	b.n	8005790 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d11d      	bne.n	80056cc <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005690:	4b41      	ldr	r3, [pc, #260]	; (8005798 <hataKoduLcdGoster+0x19c>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d105      	bne.n	80056a4 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005698:	4a40      	ldr	r2, [pc, #256]	; (800579c <hataKoduLcdGoster+0x1a0>)
 800569a:	2101      	movs	r1, #1
 800569c:	2001      	movs	r0, #1
 800569e:	f7fb f88b 	bl	80007b8 <lcd_print>
 80056a2:	e008      	b.n	80056b6 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80056a4:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <hataKoduLcdGoster+0x19c>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d104      	bne.n	80056b6 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80056ac:	4a3c      	ldr	r2, [pc, #240]	; (80057a0 <hataKoduLcdGoster+0x1a4>)
 80056ae:	2101      	movs	r1, #1
 80056b0:	2001      	movs	r0, #1
 80056b2:	f7fb f881 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 80056b6:	4a3e      	ldr	r2, [pc, #248]	; (80057b0 <hataKoduLcdGoster+0x1b4>)
 80056b8:	2103      	movs	r1, #3
 80056ba:	2002      	movs	r0, #2
 80056bc:	f7fb f87c 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80056c0:	4a39      	ldr	r2, [pc, #228]	; (80057a8 <hataKoduLcdGoster+0x1ac>)
 80056c2:	2107      	movs	r1, #7
 80056c4:	2002      	movs	r0, #2
 80056c6:	f7fb f877 	bl	80007b8 <lcd_print>
}
 80056ca:	e061      	b.n	8005790 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d11d      	bne.n	800570e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <hataKoduLcdGoster+0x19c>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 80056da:	4a30      	ldr	r2, [pc, #192]	; (800579c <hataKoduLcdGoster+0x1a0>)
 80056dc:	2101      	movs	r1, #1
 80056de:	2001      	movs	r0, #1
 80056e0:	f7fb f86a 	bl	80007b8 <lcd_print>
 80056e4:	e008      	b.n	80056f8 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 80056e6:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <hataKoduLcdGoster+0x19c>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d104      	bne.n	80056f8 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80056ee:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <hataKoduLcdGoster+0x1a4>)
 80056f0:	2101      	movs	r1, #1
 80056f2:	2001      	movs	r0, #1
 80056f4:	f7fb f860 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 80056f8:	4a2e      	ldr	r2, [pc, #184]	; (80057b4 <hataKoduLcdGoster+0x1b8>)
 80056fa:	2104      	movs	r1, #4
 80056fc:	2002      	movs	r0, #2
 80056fe:	f7fb f85b 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005702:	4a29      	ldr	r2, [pc, #164]	; (80057a8 <hataKoduLcdGoster+0x1ac>)
 8005704:	2107      	movs	r1, #7
 8005706:	2002      	movs	r0, #2
 8005708:	f7fb f856 	bl	80007b8 <lcd_print>
}
 800570c:	e040      	b.n	8005790 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	2b05      	cmp	r3, #5
 8005712:	d11d      	bne.n	8005750 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005714:	4b20      	ldr	r3, [pc, #128]	; (8005798 <hataKoduLcdGoster+0x19c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 800571c:	4a1f      	ldr	r2, [pc, #124]	; (800579c <hataKoduLcdGoster+0x1a0>)
 800571e:	2101      	movs	r1, #1
 8005720:	2001      	movs	r0, #1
 8005722:	f7fb f849 	bl	80007b8 <lcd_print>
 8005726:	e008      	b.n	800573a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <hataKoduLcdGoster+0x19c>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d104      	bne.n	800573a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <hataKoduLcdGoster+0x1a4>)
 8005732:	2101      	movs	r1, #1
 8005734:	2001      	movs	r0, #1
 8005736:	f7fb f83f 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 800573a:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <hataKoduLcdGoster+0x1bc>)
 800573c:	2105      	movs	r1, #5
 800573e:	2002      	movs	r0, #2
 8005740:	f7fb f83a 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005744:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <hataKoduLcdGoster+0x1ac>)
 8005746:	2107      	movs	r1, #7
 8005748:	2002      	movs	r0, #2
 800574a:	f7fb f835 	bl	80007b8 <lcd_print>
}
 800574e:	e01f      	b.n	8005790 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	2b06      	cmp	r3, #6
 8005754:	d11c      	bne.n	8005790 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <hataKoduLcdGoster+0x19c>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800575e:	4a0f      	ldr	r2, [pc, #60]	; (800579c <hataKoduLcdGoster+0x1a0>)
 8005760:	2101      	movs	r1, #1
 8005762:	2001      	movs	r0, #1
 8005764:	f7fb f828 	bl	80007b8 <lcd_print>
 8005768:	e008      	b.n	800577c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <hataKoduLcdGoster+0x19c>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d104      	bne.n	800577c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005772:	4a0b      	ldr	r2, [pc, #44]	; (80057a0 <hataKoduLcdGoster+0x1a4>)
 8005774:	2101      	movs	r1, #1
 8005776:	2001      	movs	r0, #1
 8005778:	f7fb f81e 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 800577c:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <hataKoduLcdGoster+0x1c0>)
 800577e:	2106      	movs	r1, #6
 8005780:	2002      	movs	r0, #2
 8005782:	f7fb f819 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <hataKoduLcdGoster+0x1ac>)
 8005788:	2107      	movs	r1, #7
 800578a:	2002      	movs	r0, #2
 800578c:	f7fb f814 	bl	80007b8 <lcd_print>
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000bb2 	.word	0x20000bb2
 800579c:	0800e164 	.word	0x0800e164
 80057a0:	0800e178 	.word	0x0800e178
 80057a4:	0800d564 	.word	0x0800d564
 80057a8:	0800e18c 	.word	0x0800e18c
 80057ac:	0800d568 	.word	0x0800d568
 80057b0:	0800d56c 	.word	0x0800d56c
 80057b4:	0800d570 	.word	0x0800d570
 80057b8:	0800d574 	.word	0x0800d574
 80057bc:	0800d578 	.word	0x0800d578

080057c0 <convertAndSendData>:

void convertAndSendData() {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 80057c6:	4a14      	ldr	r2, [pc, #80]	; (8005818 <convertAndSendData+0x58>)
 80057c8:	2101      	movs	r1, #1
 80057ca:	2001      	movs	r0, #1
 80057cc:	f7fa fff4 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 80057d0:	4a12      	ldr	r2, [pc, #72]	; (800581c <convertAndSendData+0x5c>)
 80057d2:	2101      	movs	r1, #1
 80057d4:	2002      	movs	r0, #2
 80057d6:	f7fa ffef 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 80057da:	2300      	movs	r3, #0
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	e00a      	b.n	80057f6 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80057e0:	f002 fb3a 	bl	8007e58 <mergeData>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	490d      	ldr	r1, [pc, #52]	; (8005820 <convertAndSendData+0x60>)
 80057ea:	480e      	ldr	r0, [pc, #56]	; (8005824 <convertAndSendData+0x64>)
 80057ec:	f7fa fdca 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3301      	adds	r3, #1
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	ddf1      	ble.n	80057e0 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 80057fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005800:	f003 fb0e 	bl	8008e20 <HAL_Delay>
	lcd_clear();
 8005804:	f7fb f804 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800580c:	f003 fb08 	bl	8008e20 <HAL_Delay>
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	0800e198 	.word	0x0800e198
 800581c:	0800e1a4 	.word	0x0800e1a4
 8005820:	20000b3c 	.word	0x20000b3c
 8005824:	20000dec 	.word	0x20000dec

08005828 <eepromKontrol>:

void eepromKontrol(int type) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af04      	add	r7, sp, #16
 800582e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8005830:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	233f      	movs	r3, #63	; 0x3f
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	4b9c      	ldr	r3, [pc, #624]	; (8005aac <eepromKontrol+0x284>)
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	233f      	movs	r3, #63	; 0x3f
 8005840:	2200      	movs	r2, #0
 8005842:	21a0      	movs	r1, #160	; 0xa0
 8005844:	489a      	ldr	r0, [pc, #616]	; (8005ab0 <eepromKontrol+0x288>)
 8005846:	f004 fc6f 	bl	800a128 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 800584a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800584e:	f003 fae7 	bl	8008e20 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005852:	4b96      	ldr	r3, [pc, #600]	; (8005aac <eepromKontrol+0x284>)
 8005854:	78da      	ldrb	r2, [r3, #3]
 8005856:	4b97      	ldr	r3, [pc, #604]	; (8005ab4 <eepromKontrol+0x28c>)
 8005858:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800585a:	4b94      	ldr	r3, [pc, #592]	; (8005aac <eepromKontrol+0x284>)
 800585c:	785a      	ldrb	r2, [r3, #1]
 800585e:	4b96      	ldr	r3, [pc, #600]	; (8005ab8 <eepromKontrol+0x290>)
 8005860:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005862:	4b92      	ldr	r3, [pc, #584]	; (8005aac <eepromKontrol+0x284>)
 8005864:	789a      	ldrb	r2, [r3, #2]
 8005866:	4b95      	ldr	r3, [pc, #596]	; (8005abc <eepromKontrol+0x294>)
 8005868:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800586a:	4b90      	ldr	r3, [pc, #576]	; (8005aac <eepromKontrol+0x284>)
 800586c:	791a      	ldrb	r2, [r3, #4]
 800586e:	4b94      	ldr	r3, [pc, #592]	; (8005ac0 <eepromKontrol+0x298>)
 8005870:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005872:	4b8e      	ldr	r3, [pc, #568]	; (8005aac <eepromKontrol+0x284>)
 8005874:	795a      	ldrb	r2, [r3, #5]
 8005876:	4b93      	ldr	r3, [pc, #588]	; (8005ac4 <eepromKontrol+0x29c>)
 8005878:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800587a:	4b8c      	ldr	r3, [pc, #560]	; (8005aac <eepromKontrol+0x284>)
 800587c:	799a      	ldrb	r2, [r3, #6]
 800587e:	4b92      	ldr	r3, [pc, #584]	; (8005ac8 <eepromKontrol+0x2a0>)
 8005880:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005882:	4b8a      	ldr	r3, [pc, #552]	; (8005aac <eepromKontrol+0x284>)
 8005884:	79da      	ldrb	r2, [r3, #7]
 8005886:	4b91      	ldr	r3, [pc, #580]	; (8005acc <eepromKontrol+0x2a4>)
 8005888:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800588a:	4b88      	ldr	r3, [pc, #544]	; (8005aac <eepromKontrol+0x284>)
 800588c:	7a1a      	ldrb	r2, [r3, #8]
 800588e:	4b90      	ldr	r3, [pc, #576]	; (8005ad0 <eepromKontrol+0x2a8>)
 8005890:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005892:	4b86      	ldr	r3, [pc, #536]	; (8005aac <eepromKontrol+0x284>)
 8005894:	7a5a      	ldrb	r2, [r3, #9]
 8005896:	4b8f      	ldr	r3, [pc, #572]	; (8005ad4 <eepromKontrol+0x2ac>)
 8005898:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800589a:	4b84      	ldr	r3, [pc, #528]	; (8005aac <eepromKontrol+0x284>)
 800589c:	7a9a      	ldrb	r2, [r3, #10]
 800589e:	4b8e      	ldr	r3, [pc, #568]	; (8005ad8 <eepromKontrol+0x2b0>)
 80058a0:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80058a2:	4b82      	ldr	r3, [pc, #520]	; (8005aac <eepromKontrol+0x284>)
 80058a4:	7ada      	ldrb	r2, [r3, #11]
 80058a6:	4b8d      	ldr	r3, [pc, #564]	; (8005adc <eepromKontrol+0x2b4>)
 80058a8:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80058aa:	4b80      	ldr	r3, [pc, #512]	; (8005aac <eepromKontrol+0x284>)
 80058ac:	7b1a      	ldrb	r2, [r3, #12]
 80058ae:	4b8c      	ldr	r3, [pc, #560]	; (8005ae0 <eepromKontrol+0x2b8>)
 80058b0:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80058b2:	4b7e      	ldr	r3, [pc, #504]	; (8005aac <eepromKontrol+0x284>)
 80058b4:	7b5a      	ldrb	r2, [r3, #13]
 80058b6:	4b8b      	ldr	r3, [pc, #556]	; (8005ae4 <eepromKontrol+0x2bc>)
 80058b8:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80058ba:	4b7c      	ldr	r3, [pc, #496]	; (8005aac <eepromKontrol+0x284>)
 80058bc:	7b9a      	ldrb	r2, [r3, #14]
 80058be:	4b8a      	ldr	r3, [pc, #552]	; (8005ae8 <eepromKontrol+0x2c0>)
 80058c0:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80058c2:	4b7a      	ldr	r3, [pc, #488]	; (8005aac <eepromKontrol+0x284>)
 80058c4:	7bda      	ldrb	r2, [r3, #15]
 80058c6:	4b89      	ldr	r3, [pc, #548]	; (8005aec <eepromKontrol+0x2c4>)
 80058c8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80058ca:	4b78      	ldr	r3, [pc, #480]	; (8005aac <eepromKontrol+0x284>)
 80058cc:	7c1a      	ldrb	r2, [r3, #16]
 80058ce:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <eepromKontrol+0x2c8>)
 80058d0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80058d2:	4b76      	ldr	r3, [pc, #472]	; (8005aac <eepromKontrol+0x284>)
 80058d4:	7c5a      	ldrb	r2, [r3, #17]
 80058d6:	4b87      	ldr	r3, [pc, #540]	; (8005af4 <eepromKontrol+0x2cc>)
 80058d8:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80058da:	4b74      	ldr	r3, [pc, #464]	; (8005aac <eepromKontrol+0x284>)
 80058dc:	7c9a      	ldrb	r2, [r3, #18]
 80058de:	4b86      	ldr	r3, [pc, #536]	; (8005af8 <eepromKontrol+0x2d0>)
 80058e0:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80058e2:	4b72      	ldr	r3, [pc, #456]	; (8005aac <eepromKontrol+0x284>)
 80058e4:	7cda      	ldrb	r2, [r3, #19]
 80058e6:	4b85      	ldr	r3, [pc, #532]	; (8005afc <eepromKontrol+0x2d4>)
 80058e8:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80058ea:	4b70      	ldr	r3, [pc, #448]	; (8005aac <eepromKontrol+0x284>)
 80058ec:	7d1a      	ldrb	r2, [r3, #20]
 80058ee:	4b84      	ldr	r3, [pc, #528]	; (8005b00 <eepromKontrol+0x2d8>)
 80058f0:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80058f2:	4b6e      	ldr	r3, [pc, #440]	; (8005aac <eepromKontrol+0x284>)
 80058f4:	7d5a      	ldrb	r2, [r3, #21]
 80058f6:	4b83      	ldr	r3, [pc, #524]	; (8005b04 <eepromKontrol+0x2dc>)
 80058f8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <eepromKontrol+0x284>)
 80058fc:	7d9a      	ldrb	r2, [r3, #22]
 80058fe:	4b82      	ldr	r3, [pc, #520]	; (8005b08 <eepromKontrol+0x2e0>)
 8005900:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005902:	4b6a      	ldr	r3, [pc, #424]	; (8005aac <eepromKontrol+0x284>)
 8005904:	7dda      	ldrb	r2, [r3, #23]
 8005906:	4b81      	ldr	r3, [pc, #516]	; (8005b0c <eepromKontrol+0x2e4>)
 8005908:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800590a:	4b68      	ldr	r3, [pc, #416]	; (8005aac <eepromKontrol+0x284>)
 800590c:	7e1a      	ldrb	r2, [r3, #24]
 800590e:	4b80      	ldr	r3, [pc, #512]	; (8005b10 <eepromKontrol+0x2e8>)
 8005910:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005912:	4b66      	ldr	r3, [pc, #408]	; (8005aac <eepromKontrol+0x284>)
 8005914:	7e5a      	ldrb	r2, [r3, #25]
 8005916:	4b7f      	ldr	r3, [pc, #508]	; (8005b14 <eepromKontrol+0x2ec>)
 8005918:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800591a:	4b64      	ldr	r3, [pc, #400]	; (8005aac <eepromKontrol+0x284>)
 800591c:	7e9a      	ldrb	r2, [r3, #26]
 800591e:	4b7e      	ldr	r3, [pc, #504]	; (8005b18 <eepromKontrol+0x2f0>)
 8005920:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005922:	4b62      	ldr	r3, [pc, #392]	; (8005aac <eepromKontrol+0x284>)
 8005924:	7eda      	ldrb	r2, [r3, #27]
 8005926:	4b7d      	ldr	r3, [pc, #500]	; (8005b1c <eepromKontrol+0x2f4>)
 8005928:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 800592a:	4b60      	ldr	r3, [pc, #384]	; (8005aac <eepromKontrol+0x284>)
 800592c:	7f1a      	ldrb	r2, [r3, #28]
 800592e:	4b7c      	ldr	r3, [pc, #496]	; (8005b20 <eepromKontrol+0x2f8>)
 8005930:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005932:	4b5e      	ldr	r3, [pc, #376]	; (8005aac <eepromKontrol+0x284>)
 8005934:	7f5a      	ldrb	r2, [r3, #29]
 8005936:	4b7b      	ldr	r3, [pc, #492]	; (8005b24 <eepromKontrol+0x2fc>)
 8005938:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 800593a:	4b5c      	ldr	r3, [pc, #368]	; (8005aac <eepromKontrol+0x284>)
 800593c:	7f9a      	ldrb	r2, [r3, #30]
 800593e:	4b7a      	ldr	r3, [pc, #488]	; (8005b28 <eepromKontrol+0x300>)
 8005940:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005942:	4b5a      	ldr	r3, [pc, #360]	; (8005aac <eepromKontrol+0x284>)
 8005944:	7fda      	ldrb	r2, [r3, #31]
 8005946:	4b79      	ldr	r3, [pc, #484]	; (8005b2c <eepromKontrol+0x304>)
 8005948:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 800594a:	4b58      	ldr	r3, [pc, #352]	; (8005aac <eepromKontrol+0x284>)
 800594c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005950:	4b77      	ldr	r3, [pc, #476]	; (8005b30 <eepromKontrol+0x308>)
 8005952:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005954:	4b55      	ldr	r3, [pc, #340]	; (8005aac <eepromKontrol+0x284>)
 8005956:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800595a:	4b76      	ldr	r3, [pc, #472]	; (8005b34 <eepromKontrol+0x30c>)
 800595c:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 800595e:	4b53      	ldr	r3, [pc, #332]	; (8005aac <eepromKontrol+0x284>)
 8005960:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005964:	4b74      	ldr	r3, [pc, #464]	; (8005b38 <eepromKontrol+0x310>)
 8005966:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005968:	4b50      	ldr	r3, [pc, #320]	; (8005aac <eepromKontrol+0x284>)
 800596a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800596e:	4b73      	ldr	r3, [pc, #460]	; (8005b3c <eepromKontrol+0x314>)
 8005970:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005972:	4b4e      	ldr	r3, [pc, #312]	; (8005aac <eepromKontrol+0x284>)
 8005974:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005978:	4b71      	ldr	r3, [pc, #452]	; (8005b40 <eepromKontrol+0x318>)
 800597a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800597c:	4b4b      	ldr	r3, [pc, #300]	; (8005aac <eepromKontrol+0x284>)
 800597e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005982:	4b70      	ldr	r3, [pc, #448]	; (8005b44 <eepromKontrol+0x31c>)
 8005984:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005986:	4b49      	ldr	r3, [pc, #292]	; (8005aac <eepromKontrol+0x284>)
 8005988:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800598c:	4b6e      	ldr	r3, [pc, #440]	; (8005b48 <eepromKontrol+0x320>)
 800598e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005990:	4b46      	ldr	r3, [pc, #280]	; (8005aac <eepromKontrol+0x284>)
 8005992:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005996:	4b6d      	ldr	r3, [pc, #436]	; (8005b4c <eepromKontrol+0x324>)
 8005998:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800599a:	4b44      	ldr	r3, [pc, #272]	; (8005aac <eepromKontrol+0x284>)
 800599c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80059a0:	4b6b      	ldr	r3, [pc, #428]	; (8005b50 <eepromKontrol+0x328>)
 80059a2:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80059a4:	4b41      	ldr	r3, [pc, #260]	; (8005aac <eepromKontrol+0x284>)
 80059a6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80059aa:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <eepromKontrol+0x32c>)
 80059ac:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80059ae:	4b3f      	ldr	r3, [pc, #252]	; (8005aac <eepromKontrol+0x284>)
 80059b0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80059b4:	4b68      	ldr	r3, [pc, #416]	; (8005b58 <eepromKontrol+0x330>)
 80059b6:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80059b8:	4b3c      	ldr	r3, [pc, #240]	; (8005aac <eepromKontrol+0x284>)
 80059ba:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80059be:	4b67      	ldr	r3, [pc, #412]	; (8005b5c <eepromKontrol+0x334>)
 80059c0:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80059c2:	4b3a      	ldr	r3, [pc, #232]	; (8005aac <eepromKontrol+0x284>)
 80059c4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80059c8:	4b65      	ldr	r3, [pc, #404]	; (8005b60 <eepromKontrol+0x338>)
 80059ca:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80059cc:	4b37      	ldr	r3, [pc, #220]	; (8005aac <eepromKontrol+0x284>)
 80059ce:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80059d2:	4b64      	ldr	r3, [pc, #400]	; (8005b64 <eepromKontrol+0x33c>)
 80059d4:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80059d6:	4b35      	ldr	r3, [pc, #212]	; (8005aac <eepromKontrol+0x284>)
 80059d8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80059dc:	4b62      	ldr	r3, [pc, #392]	; (8005b68 <eepromKontrol+0x340>)
 80059de:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80059e0:	4b32      	ldr	r3, [pc, #200]	; (8005aac <eepromKontrol+0x284>)
 80059e2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80059e6:	4b61      	ldr	r3, [pc, #388]	; (8005b6c <eepromKontrol+0x344>)
 80059e8:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 80059ea:	4b52      	ldr	r3, [pc, #328]	; (8005b34 <eepromKontrol+0x30c>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fff4 	bl	80049dc <loadMenuTexts>

	if(calismaSayisi10000>9) {
 80059f4:	4b4e      	ldr	r3, [pc, #312]	; (8005b30 <eepromKontrol+0x308>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b09      	cmp	r3, #9
 80059fa:	d902      	bls.n	8005a02 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 80059fc:	4b4c      	ldr	r3, [pc, #304]	; (8005b30 <eepromKontrol+0x308>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005a02:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <eepromKontrol+0x304>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b09      	cmp	r3, #9
 8005a08:	d902      	bls.n	8005a10 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005a0a:	4b48      	ldr	r3, [pc, #288]	; (8005b2c <eepromKontrol+0x304>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005a10:	4b45      	ldr	r3, [pc, #276]	; (8005b28 <eepromKontrol+0x300>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d902      	bls.n	8005a1e <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005a18:	4b43      	ldr	r3, [pc, #268]	; (8005b28 <eepromKontrol+0x300>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005a1e:	4b41      	ldr	r3, [pc, #260]	; (8005b24 <eepromKontrol+0x2fc>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b09      	cmp	r3, #9
 8005a24:	d902      	bls.n	8005a2c <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005a26:	4b3f      	ldr	r3, [pc, #252]	; (8005b24 <eepromKontrol+0x2fc>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005a2c:	4b3c      	ldr	r3, [pc, #240]	; (8005b20 <eepromKontrol+0x2f8>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b09      	cmp	r3, #9
 8005a32:	d902      	bls.n	8005a3a <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005a34:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <eepromKontrol+0x2f8>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005a3a:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <eepromKontrol+0x290>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d902      	bls.n	8005a48 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005a42:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <eepromKontrol+0x290>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <eepromKontrol+0x294>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d902      	bls.n	8005a56 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005a50:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <eepromKontrol+0x294>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005a56:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <eepromKontrol+0x298>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d902      	bls.n	8005a64 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005a5e:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <eepromKontrol+0x298>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005a64:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <eepromKontrol+0x29c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d902      	bls.n	8005a72 <eepromKontrol+0x24a>
	    altLimit=1;
 8005a6c:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <eepromKontrol+0x29c>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <eepromKontrol+0x2a0>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d902      	bls.n	8005a80 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <eepromKontrol+0x2a0>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <eepromKontrol+0x2a4>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d902      	bls.n	8005a8e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005a88:	4b10      	ldr	r3, [pc, #64]	; (8005acc <eepromKontrol+0x2a4>)
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005a8e:	4b2d      	ldr	r3, [pc, #180]	; (8005b44 <eepromKontrol+0x31c>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d902      	bls.n	8005a9c <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005a96:	4b2b      	ldr	r3, [pc, #172]	; (8005b44 <eepromKontrol+0x31c>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <eepromKontrol+0x2a8>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d965      	bls.n	8005b70 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <eepromKontrol+0x2a8>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e061      	b.n	8005b70 <eepromKontrol+0x348>
 8005aac:	20000ad4 	.word	0x20000ad4
 8005ab0:	20000d50 	.word	0x20000d50
 8005ab4:	20000b13 	.word	0x20000b13
 8005ab8:	20000b92 	.word	0x20000b92
 8005abc:	20000b95 	.word	0x20000b95
 8005ac0:	20000b96 	.word	0x20000b96
 8005ac4:	20000b97 	.word	0x20000b97
 8005ac8:	20000b98 	.word	0x20000b98
 8005acc:	20000b99 	.word	0x20000b99
 8005ad0:	20000b9a 	.word	0x20000b9a
 8005ad4:	20000baa 	.word	0x20000baa
 8005ad8:	20000b9b 	.word	0x20000b9b
 8005adc:	20000bab 	.word	0x20000bab
 8005ae0:	20000b9c 	.word	0x20000b9c
 8005ae4:	20000bac 	.word	0x20000bac
 8005ae8:	20000b9f 	.word	0x20000b9f
 8005aec:	20000ba0 	.word	0x20000ba0
 8005af0:	20000ba1 	.word	0x20000ba1
 8005af4:	20000ba2 	.word	0x20000ba2
 8005af8:	20000ba3 	.word	0x20000ba3
 8005afc:	20000ba4 	.word	0x20000ba4
 8005b00:	20000ba5 	.word	0x20000ba5
 8005b04:	20000ba6 	.word	0x20000ba6
 8005b08:	20000ba7 	.word	0x20000ba7
 8005b0c:	20000ba8 	.word	0x20000ba8
 8005b10:	20000ba9 	.word	0x20000ba9
 8005b14:	20000bad 	.word	0x20000bad
 8005b18:	20000baf 	.word	0x20000baf
 8005b1c:	20000b8d 	.word	0x20000b8d
 8005b20:	20000b8e 	.word	0x20000b8e
 8005b24:	20000b8f 	.word	0x20000b8f
 8005b28:	2000095d 	.word	0x2000095d
 8005b2c:	2000095e 	.word	0x2000095e
 8005b30:	20000b90 	.word	0x20000b90
 8005b34:	20000bb2 	.word	0x20000bb2
 8005b38:	20000bb0 	.word	0x20000bb0
 8005b3c:	20000b9e 	.word	0x20000b9e
 8005b40:	20000bb1 	.word	0x20000bb1
 8005b44:	20000b9d 	.word	0x20000b9d
 8005b48:	20000bb3 	.word	0x20000bb3
 8005b4c:	20000bb4 	.word	0x20000bb4
 8005b50:	20000bb5 	.word	0x20000bb5
 8005b54:	20000bb6 	.word	0x20000bb6
 8005b58:	20000bb7 	.word	0x20000bb7
 8005b5c:	20000bb8 	.word	0x20000bb8
 8005b60:	20000bb9 	.word	0x20000bb9
 8005b64:	20000bba 	.word	0x20000bba
 8005b68:	20000bbb 	.word	0x20000bbb
 8005b6c:	20000bbc 	.word	0x20000bbc
	}

	if(kapi1AcSure>5) {
 8005b70:	4b55      	ldr	r3, [pc, #340]	; (8005cc8 <eepromKontrol+0x4a0>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b05      	cmp	r3, #5
 8005b76:	d902      	bls.n	8005b7e <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005b78:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <eepromKontrol+0x4a0>)
 8005b7a:	2205      	movs	r2, #5
 8005b7c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005b7e:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <eepromKontrol+0x4a4>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d902      	bls.n	8005b8c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005b86:	4b51      	ldr	r3, [pc, #324]	; (8005ccc <eepromKontrol+0x4a4>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005b8c:	4b50      	ldr	r3, [pc, #320]	; (8005cd0 <eepromKontrol+0x4a8>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b05      	cmp	r3, #5
 8005b92:	d902      	bls.n	8005b9a <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005b94:	4b4e      	ldr	r3, [pc, #312]	; (8005cd0 <eepromKontrol+0x4a8>)
 8005b96:	2205      	movs	r2, #5
 8005b98:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005b9a:	4b4e      	ldr	r3, [pc, #312]	; (8005cd4 <eepromKontrol+0x4ac>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d902      	bls.n	8005ba8 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005ba2:	4b4c      	ldr	r3, [pc, #304]	; (8005cd4 <eepromKontrol+0x4ac>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005ba8:	4b4b      	ldr	r3, [pc, #300]	; (8005cd8 <eepromKontrol+0x4b0>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d902      	bls.n	8005bb6 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <eepromKontrol+0x4b0>)
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005bb6:	4b49      	ldr	r3, [pc, #292]	; (8005cdc <eepromKontrol+0x4b4>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d902      	bls.n	8005bc4 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005bbe:	4b47      	ldr	r3, [pc, #284]	; (8005cdc <eepromKontrol+0x4b4>)
 8005bc0:	2205      	movs	r2, #5
 8005bc2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005bc4:	4b46      	ldr	r3, [pc, #280]	; (8005ce0 <eepromKontrol+0x4b8>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d902      	bls.n	8005bd2 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005bcc:	4b44      	ldr	r3, [pc, #272]	; (8005ce0 <eepromKontrol+0x4b8>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005bd2:	4b44      	ldr	r3, [pc, #272]	; (8005ce4 <eepromKontrol+0x4bc>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d902      	bls.n	8005be0 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005bda:	4b42      	ldr	r3, [pc, #264]	; (8005ce4 <eepromKontrol+0x4bc>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005be0:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <eepromKontrol+0x4c0>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d902      	bls.n	8005bee <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005be8:	4b3f      	ldr	r3, [pc, #252]	; (8005ce8 <eepromKontrol+0x4c0>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005bee:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <eepromKontrol+0x4c4>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d902      	bls.n	8005bfc <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005bf6:	4b3d      	ldr	r3, [pc, #244]	; (8005cec <eepromKontrol+0x4c4>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005bfc:	4b3c      	ldr	r3, [pc, #240]	; (8005cf0 <eepromKontrol+0x4c8>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d902      	bls.n	8005c0a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005c04:	4b3a      	ldr	r3, [pc, #232]	; (8005cf0 <eepromKontrol+0x4c8>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005c0a:	4b3a      	ldr	r3, [pc, #232]	; (8005cf4 <eepromKontrol+0x4cc>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d902      	bls.n	8005c18 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005c12:	4b38      	ldr	r3, [pc, #224]	; (8005cf4 <eepromKontrol+0x4cc>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005c18:	4b37      	ldr	r3, [pc, #220]	; (8005cf8 <eepromKontrol+0x4d0>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b05      	cmp	r3, #5
 8005c1e:	d902      	bls.n	8005c26 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005c20:	4b35      	ldr	r3, [pc, #212]	; (8005cf8 <eepromKontrol+0x4d0>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005c26:	4b35      	ldr	r3, [pc, #212]	; (8005cfc <eepromKontrol+0x4d4>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	d902      	bls.n	8005c34 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005c2e:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <eepromKontrol+0x4d4>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005c34:	4b32      	ldr	r3, [pc, #200]	; (8005d00 <eepromKontrol+0x4d8>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b05      	cmp	r3, #5
 8005c3a:	d902      	bls.n	8005c42 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005c3c:	4b30      	ldr	r3, [pc, #192]	; (8005d00 <eepromKontrol+0x4d8>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005c42:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <eepromKontrol+0x4dc>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d902      	bls.n	8005c50 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005c4a:	4b2e      	ldr	r3, [pc, #184]	; (8005d04 <eepromKontrol+0x4dc>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005c50:	4b2d      	ldr	r3, [pc, #180]	; (8005d08 <eepromKontrol+0x4e0>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2bb4      	cmp	r3, #180	; 0xb4
 8005c56:	d902      	bls.n	8005c5e <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005c58:	4b2b      	ldr	r3, [pc, #172]	; (8005d08 <eepromKontrol+0x4e0>)
 8005c5a:	223c      	movs	r2, #60	; 0x3c
 8005c5c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005c5e:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <eepromKontrol+0x4e4>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d902      	bls.n	8005c6c <eepromKontrol+0x444>
	    buzzer=0;
 8005c66:	4b29      	ldr	r3, [pc, #164]	; (8005d0c <eepromKontrol+0x4e4>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005c6c:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <eepromKontrol+0x4e8>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d902      	bls.n	8005c7a <eepromKontrol+0x452>
	    demoMode=0;
 8005c74:	4b26      	ldr	r3, [pc, #152]	; (8005d10 <eepromKontrol+0x4e8>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005c7a:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <eepromKontrol+0x4ec>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d902      	bls.n	8005c88 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <eepromKontrol+0x4ec>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005c88:	4b23      	ldr	r3, [pc, #140]	; (8005d18 <eepromKontrol+0x4f0>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d902      	bls.n	8005c96 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005c90:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <eepromKontrol+0x4f0>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005c96:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <eepromKontrol+0x4f4>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d902      	bls.n	8005ca4 <eepromKontrol+0x47c>
		iotMode=0;
 8005c9e:	4b1f      	ldr	r3, [pc, #124]	; (8005d1c <eepromKontrol+0x4f4>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ca8:	f003 f8ba 	bl	8008e20 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <eepromKontrol+0x4f4>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d104      	bne.n	8005cbe <eepromKontrol+0x496>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <eepromKontrol+0x496>
		convertAndSendData();
 8005cba:	f7ff fd81 	bl	80057c0 <convertAndSendData>
	}
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000baa 	.word	0x20000baa
 8005ccc:	20000b9b 	.word	0x20000b9b
 8005cd0:	20000bab 	.word	0x20000bab
 8005cd4:	20000b9c 	.word	0x20000b9c
 8005cd8:	20000b9e 	.word	0x20000b9e
 8005cdc:	20000bac 	.word	0x20000bac
 8005ce0:	20000b9f 	.word	0x20000b9f
 8005ce4:	20000ba0 	.word	0x20000ba0
 8005ce8:	20000ba1 	.word	0x20000ba1
 8005cec:	20000ba2 	.word	0x20000ba2
 8005cf0:	20000ba3 	.word	0x20000ba3
 8005cf4:	20000ba4 	.word	0x20000ba4
 8005cf8:	20000ba5 	.word	0x20000ba5
 8005cfc:	20000ba6 	.word	0x20000ba6
 8005d00:	20000ba7 	.word	0x20000ba7
 8005d04:	20000ba8 	.word	0x20000ba8
 8005d08:	20000ba9 	.word	0x20000ba9
 8005d0c:	20000bad 	.word	0x20000bad
 8005d10:	20000baf 	.word	0x20000baf
 8005d14:	20000bb1 	.word	0x20000bb1
 8005d18:	20000bb2 	.word	0x20000bb2
 8005d1c:	20000bb0 	.word	0x20000bb0

08005d20 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b089      	sub	sp, #36	; 0x24
 8005d24:	af04      	add	r7, sp, #16
 8005d26:	4603      	mov	r3, r0
 8005d28:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005d2a:	4b26      	ldr	r3, [pc, #152]	; (8005dc4 <hata2EEPROM+0xa4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <hata2EEPROM+0xa8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <hata2EEPROM+0xac>)
 8005d38:	5cd3      	ldrb	r3, [r2, r3]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005d3e:	f000 f849 	bl	8005dd4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005d42:	e000      	b.n	8005d46 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005d44:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e012      	b.n	8005d72 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005d4c:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <hata2EEPROM+0xa8>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	4a1d      	ldr	r2, [pc, #116]	; (8005dcc <hata2EEPROM+0xac>)
 8005d56:	5cd3      	ldrb	r3, [r2, r3]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <hata2EEPROM+0xa8>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	4919      	ldr	r1, [pc, #100]	; (8005dcc <hata2EEPROM+0xac>)
 8005d66:	79fa      	ldrb	r2, [r7, #7]
 8005d68:	54ca      	strb	r2, [r1, r3]
					break;
 8005d6a:	e007      	b.n	8005d7c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <hata2EEPROM+0xa4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	dbe7      	blt.n	8005d4c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <hata2EEPROM+0xa8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	b299      	uxth	r1, r3
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <hata2EEPROM+0xa4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	b298      	uxth	r0, r3
 8005d88:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <hata2EEPROM+0xa8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0f      	ldr	r2, [pc, #60]	; (8005dcc <hata2EEPROM+0xac>)
 8005d8e:	4413      	add	r3, r2
 8005d90:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <hata2EEPROM+0xa4>)
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	b292      	uxth	r2, r2
 8005d96:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005d9a:	9402      	str	r4, [sp, #8]
 8005d9c:	9201      	str	r2, [sp, #4]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	4603      	mov	r3, r0
 8005da2:	460a      	mov	r2, r1
 8005da4:	21a0      	movs	r1, #160	; 0xa0
 8005da6:	480a      	ldr	r0, [pc, #40]	; (8005dd0 <hata2EEPROM+0xb0>)
 8005da8:	f004 f8c4 	bl	8009f34 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005db0:	f003 f836 	bl	8008e20 <HAL_Delay>
	eepromKontrol(1);
 8005db4:	2001      	movs	r0, #1
 8005db6:	f7ff fd37 	bl	8005828 <eepromKontrol>
}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd90      	pop	{r4, r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000938 	.word	0x20000938
 8005dc8:	2000093c 	.word	0x2000093c
 8005dcc:	20000ad4 	.word	0x20000ad4
 8005dd0:	20000d50 	.word	0x20000d50

08005dd4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	e009      	b.n	8005df4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <eepromDataFillWithEmpty+0x38>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <eepromDataFillWithEmpty+0x3c>)
 8005dea:	2100      	movs	r1, #0
 8005dec:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3301      	adds	r3, #1
 8005df2:	607b      	str	r3, [r7, #4]
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <eepromDataFillWithEmpty+0x40>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	dbf0      	blt.n	8005de0 <eepromDataFillWithEmpty+0xc>
	}
}
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bc80      	pop	{r7}
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000910 	.word	0x20000910
 8005e10:	20000ad4 	.word	0x20000ad4
 8005e14:	20000938 	.word	0x20000938

08005e18 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
	timer1=millis;
 8005e1c:	4b47      	ldr	r3, [pc, #284]	; (8005f3c <bekle+0x124>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a47      	ldr	r2, [pc, #284]	; (8005f40 <bekle+0x128>)
 8005e22:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005e24:	e002      	b.n	8005e2c <bekle+0x14>
    	butonKontrol = 1;
 8005e26:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <bekle+0x12c>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	4846      	ldr	r0, [pc, #280]	; (8005f48 <bekle+0x130>)
 8005e30:	f003 fdc6 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d109      	bne.n	8005e4e <bekle+0x36>
 8005e3a:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <bekle+0x124>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b40      	ldr	r3, [pc, #256]	; (8005f40 <bekle+0x128>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d0ef      	beq.n	8005e26 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005e46:	e002      	b.n	8005e4e <bekle+0x36>
    	butonKontrol = 1;
 8005e48:	4b3e      	ldr	r3, [pc, #248]	; (8005f44 <bekle+0x12c>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005e4e:	2108      	movs	r1, #8
 8005e50:	483e      	ldr	r0, [pc, #248]	; (8005f4c <bekle+0x134>)
 8005e52:	f003 fdb5 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d109      	bne.n	8005e70 <bekle+0x58>
 8005e5c:	4b37      	ldr	r3, [pc, #220]	; (8005f3c <bekle+0x124>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	4b37      	ldr	r3, [pc, #220]	; (8005f40 <bekle+0x128>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d0ef      	beq.n	8005e48 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005e68:	e002      	b.n	8005e70 <bekle+0x58>
    	butonKontrol = 1;
 8005e6a:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <bekle+0x12c>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005e70:	2102      	movs	r1, #2
 8005e72:	4835      	ldr	r0, [pc, #212]	; (8005f48 <bekle+0x130>)
 8005e74:	f003 fda4 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d109      	bne.n	8005e92 <bekle+0x7a>
 8005e7e:	4b2f      	ldr	r3, [pc, #188]	; (8005f3c <bekle+0x124>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b2f      	ldr	r3, [pc, #188]	; (8005f40 <bekle+0x128>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d0ef      	beq.n	8005e6a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005e8a:	e002      	b.n	8005e92 <bekle+0x7a>
    	butonKontrol = 1;
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <bekle+0x12c>)
 8005e8e:	2201      	movs	r2, #1
 8005e90:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005e92:	2104      	movs	r1, #4
 8005e94:	482c      	ldr	r0, [pc, #176]	; (8005f48 <bekle+0x130>)
 8005e96:	f003 fd93 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d109      	bne.n	8005eb4 <bekle+0x9c>
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <bekle+0x124>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b26      	ldr	r3, [pc, #152]	; (8005f40 <bekle+0x128>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d0ef      	beq.n	8005e8c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005eac:	e002      	b.n	8005eb4 <bekle+0x9c>
    	butonKontrol = 1;
 8005eae:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <bekle+0x12c>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005eb4:	2108      	movs	r1, #8
 8005eb6:	4824      	ldr	r0, [pc, #144]	; (8005f48 <bekle+0x130>)
 8005eb8:	f003 fd82 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d109      	bne.n	8005ed6 <bekle+0xbe>
 8005ec2:	4b1e      	ldr	r3, [pc, #120]	; (8005f3c <bekle+0x124>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4b1e      	ldr	r3, [pc, #120]	; (8005f40 <bekle+0x128>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d0ef      	beq.n	8005eae <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005ece:	e002      	b.n	8005ed6 <bekle+0xbe>
    	butonKontrol = 1;
 8005ed0:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <bekle+0x12c>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	481c      	ldr	r0, [pc, #112]	; (8005f4c <bekle+0x134>)
 8005eda:	f003 fd71 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <bekle+0xe0>
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <bekle+0x124>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <bekle+0x128>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d0ef      	beq.n	8005ed0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005ef0:	e002      	b.n	8005ef8 <bekle+0xe0>
    	butonKontrol = 1;
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <bekle+0x12c>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005efc:	4813      	ldr	r0, [pc, #76]	; (8005f4c <bekle+0x134>)
 8005efe:	f003 fd5f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <bekle+0x104>
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <bekle+0x124>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <bekle+0x128>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d0ee      	beq.n	8005ef2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005f14:	e002      	b.n	8005f1c <bekle+0x104>
    	butonKontrol = 1;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <bekle+0x12c>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f20:	480a      	ldr	r0, [pc, #40]	; (8005f4c <bekle+0x134>)
 8005f22:	f003 fd4d 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <bekle+0x120>
 8005f2c:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <bekle+0x124>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <bekle+0x128>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d0ee      	beq.n	8005f16 <bekle+0xfe>
    }

}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000b1c 	.word	0x20000b1c
 8005f40:	20000b24 	.word	0x20000b24
 8005f44:	20000bc0 	.word	0x20000bc0
 8005f48:	40010800 	.word	0x40010800
 8005f4c:	40011000 	.word	0x40011000

08005f50 <i2cTest>:

void i2cTest() {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8005f56:	463b      	mov	r3, r7
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8005f62:	4b50      	ldr	r3, [pc, #320]	; (80060a4 <i2cTest+0x154>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	4b4e      	ldr	r3, [pc, #312]	; (80060a4 <i2cTest+0x154>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8005f72:	484c      	ldr	r0, [pc, #304]	; (80060a4 <i2cTest+0x154>)
 8005f74:	f003 feb0 	bl	8009cd8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f78:	23c0      	movs	r3, #192	; 0xc0
 8005f7a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005f7c:	2311      	movs	r3, #17
 8005f7e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005f80:	2301      	movs	r3, #1
 8005f82:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005f84:	2303      	movs	r3, #3
 8005f86:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005f88:	463b      	mov	r3, r7
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4846      	ldr	r0, [pc, #280]	; (80060a8 <i2cTest+0x158>)
 8005f8e:	f003 fab7 	bl	8009500 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005f92:	2201      	movs	r2, #1
 8005f94:	2140      	movs	r1, #64	; 0x40
 8005f96:	4844      	ldr	r0, [pc, #272]	; (80060a8 <i2cTest+0x158>)
 8005f98:	f003 fd29 	bl	80099ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	2180      	movs	r1, #128	; 0x80
 8005fa0:	4841      	ldr	r0, [pc, #260]	; (80060a8 <i2cTest+0x158>)
 8005fa2:	f003 fd24 	bl	80099ee <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8005fa6:	200a      	movs	r0, #10
 8005fa8:	f002 ff3a 	bl	8008e20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005fac:	bf00      	nop
 8005fae:	2140      	movs	r1, #64	; 0x40
 8005fb0:	483d      	ldr	r0, [pc, #244]	; (80060a8 <i2cTest+0x158>)
 8005fb2:	f003 fd05 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d006      	beq.n	8005fca <i2cTest+0x7a>
 8005fbc:	2180      	movs	r1, #128	; 0x80
 8005fbe:	483a      	ldr	r0, [pc, #232]	; (80060a8 <i2cTest+0x158>)
 8005fc0:	f003 fcfe 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d1f1      	bne.n	8005fae <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2180      	movs	r1, #128	; 0x80
 8005fce:	4836      	ldr	r0, [pc, #216]	; (80060a8 <i2cTest+0x158>)
 8005fd0:	f003 fd0d 	bl	80099ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005fd4:	200a      	movs	r0, #10
 8005fd6:	f002 ff23 	bl	8008e20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8005fda:	bf00      	nop
 8005fdc:	2180      	movs	r1, #128	; 0x80
 8005fde:	4832      	ldr	r0, [pc, #200]	; (80060a8 <i2cTest+0x158>)
 8005fe0:	f003 fcee 	bl	80099c0 <HAL_GPIO_ReadPin>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d0f8      	beq.n	8005fdc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005fea:	2200      	movs	r2, #0
 8005fec:	2140      	movs	r1, #64	; 0x40
 8005fee:	482e      	ldr	r0, [pc, #184]	; (80060a8 <i2cTest+0x158>)
 8005ff0:	f003 fcfd 	bl	80099ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005ff4:	200a      	movs	r0, #10
 8005ff6:	f002 ff13 	bl	8008e20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8005ffa:	bf00      	nop
 8005ffc:	2140      	movs	r1, #64	; 0x40
 8005ffe:	482a      	ldr	r0, [pc, #168]	; (80060a8 <i2cTest+0x158>)
 8006000:	f003 fcde 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006004:	4603      	mov	r3, r0
 8006006:	2b01      	cmp	r3, #1
 8006008:	d0f8      	beq.n	8005ffc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800600a:	2201      	movs	r2, #1
 800600c:	2140      	movs	r1, #64	; 0x40
 800600e:	4826      	ldr	r0, [pc, #152]	; (80060a8 <i2cTest+0x158>)
 8006010:	f003 fced 	bl	80099ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006014:	200a      	movs	r0, #10
 8006016:	f002 ff03 	bl	8008e20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800601a:	bf00      	nop
 800601c:	2140      	movs	r1, #64	; 0x40
 800601e:	4822      	ldr	r0, [pc, #136]	; (80060a8 <i2cTest+0x158>)
 8006020:	f003 fcce 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006024:	4603      	mov	r3, r0
 8006026:	2b01      	cmp	r3, #1
 8006028:	d1f8      	bne.n	800601c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800602a:	2201      	movs	r2, #1
 800602c:	2180      	movs	r1, #128	; 0x80
 800602e:	481e      	ldr	r0, [pc, #120]	; (80060a8 <i2cTest+0x158>)
 8006030:	f003 fcdd 	bl	80099ee <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006034:	200a      	movs	r0, #10
 8006036:	f002 fef3 	bl	8008e20 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800603a:	bf00      	nop
 800603c:	2180      	movs	r1, #128	; 0x80
 800603e:	481a      	ldr	r0, [pc, #104]	; (80060a8 <i2cTest+0x158>)
 8006040:	f003 fcbe 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006044:	4603      	mov	r3, r0
 8006046:	2b01      	cmp	r3, #1
 8006048:	d1f8      	bne.n	800603c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800604a:	23c0      	movs	r3, #192	; 0xc0
 800604c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800604e:	2312      	movs	r3, #18
 8006050:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006052:	2301      	movs	r3, #1
 8006054:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006056:	2303      	movs	r3, #3
 8006058:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800605a:	463b      	mov	r3, r7
 800605c:	4619      	mov	r1, r3
 800605e:	4812      	ldr	r0, [pc, #72]	; (80060a8 <i2cTest+0x158>)
 8006060:	f003 fa4e 	bl	8009500 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <i2cTest+0x154>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <i2cTest+0x154>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006072:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006074:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <i2cTest+0x154>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <i2cTest+0x154>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006082:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006084:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <i2cTest+0x154>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <i2cTest+0x154>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006094:	4803      	ldr	r0, [pc, #12]	; (80060a4 <i2cTest+0x154>)
 8006096:	f003 fcdb 	bl	8009a50 <HAL_I2C_Init>
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000d50 	.word	0x20000d50
 80060a8:	40010c00 	.word	0x40010c00

080060ac <checkLCDBacklight>:

void checkLCDBacklight() {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <checkLCDBacklight+0x34>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <checkLCDBacklight+0x38>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <checkLCDBacklight+0x3c>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	4619      	mov	r1, r3
 80060c0:	460b      	mov	r3, r1
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d303      	bcc.n	80060d4 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80060cc:	2000      	movs	r0, #0
 80060ce:	f7fa fbbf 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80060d2:	e002      	b.n	80060da <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80060d4:	2001      	movs	r0, #1
 80060d6:	f7fa fbbb 	bl	8000850 <lcd_backlight>
}
 80060da:	bf00      	nop
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000b1c 	.word	0x20000b1c
 80060e4:	20000b38 	.word	0x20000b38
 80060e8:	20000940 	.word	0x20000940

080060ec <checkBasincSalteri>:

void checkBasincSalteri() {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80060f0:	4b13      	ldr	r3, [pc, #76]	; (8006140 <checkBasincSalteri+0x54>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <checkBasincSalteri+0x12>
		basincVar=1;
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <checkBasincSalteri+0x58>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <checkBasincSalteri+0x54>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d119      	bne.n	800613a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8006106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800610a:	480f      	ldr	r0, [pc, #60]	; (8006148 <checkBasincSalteri+0x5c>)
 800610c:	f003 fc58 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006116:	4b0d      	ldr	r3, [pc, #52]	; (800614c <checkBasincSalteri+0x60>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <checkBasincSalteri+0x64>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d90a      	bls.n	800613a <checkBasincSalteri+0x4e>
				basincVar=1;
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <checkBasincSalteri+0x58>)
 8006126:	2201      	movs	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800612a:	e006      	b.n	800613a <checkBasincSalteri+0x4e>
			timer5=millis;
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <checkBasincSalteri+0x60>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a07      	ldr	r2, [pc, #28]	; (8006150 <checkBasincSalteri+0x64>)
 8006132:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006134:	4b03      	ldr	r3, [pc, #12]	; (8006144 <checkBasincSalteri+0x58>)
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
}
 800613a:	bf00      	nop
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000b98 	.word	0x20000b98
 8006144:	20000b94 	.word	0x20000b94
 8006148:	40011000 	.word	0x40011000
 800614c:	20000b1c 	.word	0x20000b1c
 8006150:	20000b34 	.word	0x20000b34

08006154 <checkBasGonder>:

void checkBasGonder() {
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <checkBasGonder+0x74>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d10b      	bne.n	8006178 <checkBasGonder+0x24>
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <checkBasGonder+0x78>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <checkBasGonder+0x24>
 8006168:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <checkBasGonder+0x7c>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006170:	4b18      	ldr	r3, [pc, #96]	; (80061d4 <checkBasGonder+0x80>)
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	e009      	b.n	800618c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006178:	4b14      	ldr	r3, [pc, #80]	; (80061cc <checkBasGonder+0x78>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f083 0301 	eor.w	r3, r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006186:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <checkBasGonder+0x80>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800618c:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <checkBasGonder+0x74>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10b      	bne.n	80061ac <checkBasGonder+0x58>
 8006194:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <checkBasGonder+0x84>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <checkBasGonder+0x58>
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <checkBasGonder+0x7c>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <checkBasGonder+0x88>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80061aa:	e009      	b.n	80061c0 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <checkBasGonder+0x84>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	f083 0301 	eor.w	r3, r3, #1
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80061ba:	4b08      	ldr	r3, [pc, #32]	; (80061dc <checkBasGonder+0x88>)
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
}
 80061c0:	bf00      	nop
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr
 80061c8:	20000b92 	.word	0x20000b92
 80061cc:	20000bc6 	.word	0x20000bc6
 80061d0:	20000ba0 	.word	0x20000ba0
 80061d4:	20000bcd 	.word	0x20000bcd
 80061d8:	20000bc9 	.word	0x20000bc9
 80061dc:	20000bce 	.word	0x20000bce

080061e0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80061e4:	4b24      	ldr	r3, [pc, #144]	; (8006278 <checkKapiSecimleri+0x98>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80061ec:	4b23      	ldr	r3, [pc, #140]	; (800627c <checkKapiSecimleri+0x9c>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80061f2:	4b21      	ldr	r3, [pc, #132]	; (8006278 <checkKapiSecimleri+0x98>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d10e      	bne.n	8006218 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80061fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061fe:	4820      	ldr	r0, [pc, #128]	; (8006280 <checkKapiSecimleri+0xa0>)
 8006200:	f003 fbde 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <checkKapiSecimleri+0x9c>)
 800620c:	2201      	movs	r2, #1
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	e002      	b.n	8006218 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8006212:	4b1a      	ldr	r3, [pc, #104]	; (800627c <checkKapiSecimleri+0x9c>)
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006218:	4b17      	ldr	r3, [pc, #92]	; (8006278 <checkKapiSecimleri+0x98>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d10e      	bne.n	800623e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006224:	4816      	ldr	r0, [pc, #88]	; (8006280 <checkKapiSecimleri+0xa0>)
 8006226:	f003 fbcb 	bl	80099c0 <HAL_GPIO_ReadPin>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <checkKapiSecimleri+0x9c>)
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	e002      	b.n	800623e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006238:	4b10      	ldr	r3, [pc, #64]	; (800627c <checkKapiSecimleri+0x9c>)
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <checkKapiSecimleri+0x98>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b03      	cmp	r3, #3
 8006244:	d116      	bne.n	8006274 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8006246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800624a:	480d      	ldr	r0, [pc, #52]	; (8006280 <checkKapiSecimleri+0xa0>)
 800624c:	f003 fbb8 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <checkKapiSecimleri+0x8e>
 8006256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800625a:	4809      	ldr	r0, [pc, #36]	; (8006280 <checkKapiSecimleri+0xa0>)
 800625c:	f003 fbb0 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006266:	4b05      	ldr	r3, [pc, #20]	; (800627c <checkKapiSecimleri+0x9c>)
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800626c:	e002      	b.n	8006274 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800626e:	4b03      	ldr	r3, [pc, #12]	; (800627c <checkKapiSecimleri+0x9c>)
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000b99 	.word	0x20000b99
 800627c:	20000be4 	.word	0x20000be4
 8006280:	40010800 	.word	0x40010800

08006284 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006288:	4b62      	ldr	r3, [pc, #392]	; (8006414 <checkAktifCalisma+0x190>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f041 8332 	bne.w	80078f6 <checkAktifCalisma+0x1672>
 8006292:	4b61      	ldr	r3, [pc, #388]	; (8006418 <checkAktifCalisma+0x194>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f041 832d 	bne.w	80078f6 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800629c:	4b5f      	ldr	r3, [pc, #380]	; (800641c <checkAktifCalisma+0x198>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d11a      	bne.n	80062da <checkAktifCalisma+0x56>
 80062a4:	4b5e      	ldr	r3, [pc, #376]	; (8006420 <checkAktifCalisma+0x19c>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d116      	bne.n	80062da <checkAktifCalisma+0x56>
 80062ac:	4b5d      	ldr	r3, [pc, #372]	; (8006424 <checkAktifCalisma+0x1a0>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <checkAktifCalisma+0x46>
 80062b4:	4b5c      	ldr	r3, [pc, #368]	; (8006428 <checkAktifCalisma+0x1a4>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	f083 0301 	eor.w	r3, r3, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <checkAktifCalisma+0x46>
 80062c2:	4b5a      	ldr	r3, [pc, #360]	; (800642c <checkAktifCalisma+0x1a8>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d007      	beq.n	80062da <checkAktifCalisma+0x56>
 80062ca:	4b59      	ldr	r3, [pc, #356]	; (8006430 <checkAktifCalisma+0x1ac>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d018      	beq.n	8006304 <checkAktifCalisma+0x80>
 80062d2:	4b58      	ldr	r3, [pc, #352]	; (8006434 <checkAktifCalisma+0x1b0>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d114      	bne.n	8006304 <checkAktifCalisma+0x80>
 80062da:	4b57      	ldr	r3, [pc, #348]	; (8006438 <checkAktifCalisma+0x1b4>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d010      	beq.n	8006304 <checkAktifCalisma+0x80>
 80062e2:	4b56      	ldr	r3, [pc, #344]	; (800643c <checkAktifCalisma+0x1b8>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80062ea:	2201      	movs	r2, #1
 80062ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062f0:	4853      	ldr	r0, [pc, #332]	; (8006440 <checkAktifCalisma+0x1bc>)
 80062f2:	f003 fb7c 	bl	80099ee <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80062f6:	4b53      	ldr	r3, [pc, #332]	; (8006444 <checkAktifCalisma+0x1c0>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80062fc:	4b52      	ldr	r3, [pc, #328]	; (8006448 <checkAktifCalisma+0x1c4>)
 80062fe:	2201      	movs	r2, #1
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	e008      	b.n	8006316 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006304:	2200      	movs	r2, #0
 8006306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800630a:	484d      	ldr	r0, [pc, #308]	; (8006440 <checkAktifCalisma+0x1bc>)
 800630c:	f003 fb6f 	bl	80099ee <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006310:	4b4c      	ldr	r3, [pc, #304]	; (8006444 <checkAktifCalisma+0x1c0>)
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006316:	4b40      	ldr	r3, [pc, #256]	; (8006418 <checkAktifCalisma+0x194>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d160      	bne.n	80063e0 <checkAktifCalisma+0x15c>
 800631e:	4b46      	ldr	r3, [pc, #280]	; (8006438 <checkAktifCalisma+0x1b4>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d05c      	beq.n	80063e0 <checkAktifCalisma+0x15c>
 8006326:	4b45      	ldr	r3, [pc, #276]	; (800643c <checkAktifCalisma+0x1b8>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d058      	beq.n	80063e0 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800632e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006332:	4843      	ldr	r0, [pc, #268]	; (8006440 <checkAktifCalisma+0x1bc>)
 8006334:	f003 fb44 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <checkAktifCalisma+0xc2>
 800633e:	4b43      	ldr	r3, [pc, #268]	; (800644c <checkAktifCalisma+0x1c8>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d04c      	beq.n	80063e0 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006346:	2102      	movs	r1, #2
 8006348:	4841      	ldr	r0, [pc, #260]	; (8006450 <checkAktifCalisma+0x1cc>)
 800634a:	f003 fb39 	bl	80099c0 <HAL_GPIO_ReadPin>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d145      	bne.n	80063e0 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006354:	4b3f      	ldr	r3, [pc, #252]	; (8006454 <checkAktifCalisma+0x1d0>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d041      	beq.n	80063e0 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800635c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006360:	4837      	ldr	r0, [pc, #220]	; (8006440 <checkAktifCalisma+0x1bc>)
 8006362:	f003 fb2d 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d10e      	bne.n	800638a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800636c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006370:	4833      	ldr	r0, [pc, #204]	; (8006440 <checkAktifCalisma+0x1bc>)
 8006372:	f003 fb25 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006376:	4603      	mov	r3, r0
 8006378:	2b01      	cmp	r3, #1
 800637a:	d106      	bne.n	800638a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800637c:	2140      	movs	r1, #64	; 0x40
 800637e:	4834      	ldr	r0, [pc, #208]	; (8006450 <checkAktifCalisma+0x1cc>)
 8006380:	f003 fb1e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	d003      	beq.n	8006392 <checkAktifCalisma+0x10e>
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <checkAktifCalisma+0x198>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d026      	beq.n	80063e0 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006392:	4b24      	ldr	r3, [pc, #144]	; (8006424 <checkAktifCalisma+0x1a0>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	f083 0301 	eor.w	r3, r3, #1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01f      	beq.n	80063e0 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80063a0:	4b1f      	ldr	r3, [pc, #124]	; (8006420 <checkAktifCalisma+0x19c>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f083 0301 	eor.w	r3, r3, #1
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d018      	beq.n	80063e0 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <checkAktifCalisma+0x1ac>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	f083 0301 	eor.w	r3, r3, #1
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d011      	beq.n	80063e0 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80063bc:	4b26      	ldr	r3, [pc, #152]	; (8006458 <checkAktifCalisma+0x1d4>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f083 0301 	eor.w	r3, r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80063ca:	4b24      	ldr	r3, [pc, #144]	; (800645c <checkAktifCalisma+0x1d8>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f083 0301 	eor.w	r3, r3, #1
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <checkAktifCalisma+0x198>)
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e002      	b.n	80063e6 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80063e0:	4b0e      	ldr	r3, [pc, #56]	; (800641c <checkAktifCalisma+0x198>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80063e6:	4b0d      	ldr	r3, [pc, #52]	; (800641c <checkAktifCalisma+0x198>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d03a      	beq.n	8006464 <checkAktifCalisma+0x1e0>
 80063ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063f2:	4817      	ldr	r0, [pc, #92]	; (8006450 <checkAktifCalisma+0x1cc>)
 80063f4:	f003 fae4 	bl	80099c0 <HAL_GPIO_ReadPin>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d132      	bne.n	8006464 <checkAktifCalisma+0x1e0>
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <checkAktifCalisma+0x1dc>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d02e      	beq.n	8006464 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006406:	2201      	movs	r2, #1
 8006408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800640c:	480c      	ldr	r0, [pc, #48]	; (8006440 <checkAktifCalisma+0x1bc>)
 800640e:	f003 faee 	bl	80099ee <HAL_GPIO_WritePin>
 8006412:	e02d      	b.n	8006470 <checkAktifCalisma+0x1ec>
 8006414:	20000baf 	.word	0x20000baf
 8006418:	20000bae 	.word	0x20000bae
 800641c:	20000bc6 	.word	0x20000bc6
 8006420:	20000bc7 	.word	0x20000bc7
 8006424:	20000bc9 	.word	0x20000bc9
 8006428:	20000bc1 	.word	0x20000bc1
 800642c:	20000ba4 	.word	0x20000ba4
 8006430:	20000bc8 	.word	0x20000bc8
 8006434:	20000ba3 	.word	0x20000ba3
 8006438:	20000be3 	.word	0x20000be3
 800643c:	20000be4 	.word	0x20000be4
 8006440:	40010c00 	.word	0x40010c00
 8006444:	20000be5 	.word	0x20000be5
 8006448:	20000bd0 	.word	0x20000bd0
 800644c:	20000bcd 	.word	0x20000bcd
 8006450:	40011000 	.word	0x40011000
 8006454:	20000b94 	.word	0x20000b94
 8006458:	20000bcb 	.word	0x20000bcb
 800645c:	20000bcc 	.word	0x20000bcc
 8006460:	20000b9f 	.word	0x20000b9f
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006464:	2200      	movs	r2, #0
 8006466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800646a:	4860      	ldr	r0, [pc, #384]	; (80065ec <checkAktifCalisma+0x368>)
 800646c:	f003 fabf 	bl	80099ee <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006470:	4b5f      	ldr	r3, [pc, #380]	; (80065f0 <checkAktifCalisma+0x36c>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d013      	beq.n	80064a0 <checkAktifCalisma+0x21c>
 8006478:	4b5e      	ldr	r3, [pc, #376]	; (80065f4 <checkAktifCalisma+0x370>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d007      	beq.n	8006490 <checkAktifCalisma+0x20c>
 8006480:	4b5c      	ldr	r3, [pc, #368]	; (80065f4 <checkAktifCalisma+0x370>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d003      	beq.n	8006490 <checkAktifCalisma+0x20c>
 8006488:	4b5b      	ldr	r3, [pc, #364]	; (80065f8 <checkAktifCalisma+0x374>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d107      	bne.n	80064a0 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006490:	2201      	movs	r2, #1
 8006492:	2104      	movs	r1, #4
 8006494:	4855      	ldr	r0, [pc, #340]	; (80065ec <checkAktifCalisma+0x368>)
 8006496:	f003 faaa 	bl	80099ee <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800649a:	4b58      	ldr	r3, [pc, #352]	; (80065fc <checkAktifCalisma+0x378>)
 800649c:	2201      	movs	r2, #1
 800649e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80064a0:	4b56      	ldr	r3, [pc, #344]	; (80065fc <checkAktifCalisma+0x378>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02f      	beq.n	8006508 <checkAktifCalisma+0x284>
 80064a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064ac:	484f      	ldr	r0, [pc, #316]	; (80065ec <checkAktifCalisma+0x368>)
 80064ae:	f003 fa87 	bl	80099c0 <HAL_GPIO_ReadPin>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d106      	bne.n	80064c6 <checkAktifCalisma+0x242>
 80064b8:	4b51      	ldr	r3, [pc, #324]	; (8006600 <checkAktifCalisma+0x37c>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f083 0301 	eor.w	r3, r3, #1
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <checkAktifCalisma+0x250>
 80064c6:	2102      	movs	r1, #2
 80064c8:	484e      	ldr	r0, [pc, #312]	; (8006604 <checkAktifCalisma+0x380>)
 80064ca:	f003 fa79 	bl	80099c0 <HAL_GPIO_ReadPin>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d119      	bne.n	8006508 <checkAktifCalisma+0x284>
 80064d4:	4b4c      	ldr	r3, [pc, #304]	; (8006608 <checkAktifCalisma+0x384>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d015      	beq.n	8006508 <checkAktifCalisma+0x284>
 80064dc:	4b4b      	ldr	r3, [pc, #300]	; (800660c <checkAktifCalisma+0x388>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d011      	beq.n	8006508 <checkAktifCalisma+0x284>
 80064e4:	4b4a      	ldr	r3, [pc, #296]	; (8006610 <checkAktifCalisma+0x38c>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00d      	beq.n	8006508 <checkAktifCalisma+0x284>
 80064ec:	4b49      	ldr	r3, [pc, #292]	; (8006614 <checkAktifCalisma+0x390>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f083 0301 	eor.w	r3, r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <checkAktifCalisma+0x284>
			timer2=millis;
 80064fa:	4b47      	ldr	r3, [pc, #284]	; (8006618 <checkAktifCalisma+0x394>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a47      	ldr	r2, [pc, #284]	; (800661c <checkAktifCalisma+0x398>)
 8006500:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006502:	4b44      	ldr	r3, [pc, #272]	; (8006614 <checkAktifCalisma+0x390>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006508:	4b43      	ldr	r3, [pc, #268]	; (8006618 <checkAktifCalisma+0x394>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b43      	ldr	r3, [pc, #268]	; (800661c <checkAktifCalisma+0x398>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	4a43      	ldr	r2, [pc, #268]	; (8006620 <checkAktifCalisma+0x39c>)
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	4293      	cmp	r3, r2
 8006518:	d303      	bcc.n	8006522 <checkAktifCalisma+0x29e>
 800651a:	4b3e      	ldr	r3, [pc, #248]	; (8006614 <checkAktifCalisma+0x390>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d111      	bne.n	8006546 <checkAktifCalisma+0x2c2>
 8006522:	4b39      	ldr	r3, [pc, #228]	; (8006608 <checkAktifCalisma+0x384>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f083 0301 	eor.w	r3, r3, #1
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <checkAktifCalisma+0x2c2>
 8006530:	4b36      	ldr	r3, [pc, #216]	; (800660c <checkAktifCalisma+0x388>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f083 0301 	eor.w	r3, r3, #1
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <checkAktifCalisma+0x2c2>
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <checkAktifCalisma+0x38c>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006546:	2200      	movs	r2, #0
 8006548:	2104      	movs	r1, #4
 800654a:	4828      	ldr	r0, [pc, #160]	; (80065ec <checkAktifCalisma+0x368>)
 800654c:	f003 fa4f 	bl	80099ee <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006550:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <checkAktifCalisma+0x378>)
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006556:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <checkAktifCalisma+0x390>)
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800655c:	4b31      	ldr	r3, [pc, #196]	; (8006624 <checkAktifCalisma+0x3a0>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006564:	4b30      	ldr	r3, [pc, #192]	; (8006628 <checkAktifCalisma+0x3a4>)
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800656a:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <checkAktifCalisma+0x3a0>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d116      	bne.n	80065a0 <checkAktifCalisma+0x31c>
 8006572:	4b2e      	ldr	r3, [pc, #184]	; (800662c <checkAktifCalisma+0x3a8>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d112      	bne.n	80065a0 <checkAktifCalisma+0x31c>
 800657a:	2101      	movs	r1, #1
 800657c:	4821      	ldr	r0, [pc, #132]	; (8006604 <checkAktifCalisma+0x380>)
 800657e:	f003 fa1f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <checkAktifCalisma+0x31c>
 8006588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800658c:	4817      	ldr	r0, [pc, #92]	; (80065ec <checkAktifCalisma+0x368>)
 800658e:	f003 fa17 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006598:	4b23      	ldr	r3, [pc, #140]	; (8006628 <checkAktifCalisma+0x3a4>)
 800659a:	2201      	movs	r2, #1
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	e011      	b.n	80065c4 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80065a0:	4b20      	ldr	r3, [pc, #128]	; (8006624 <checkAktifCalisma+0x3a0>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10d      	bne.n	80065c4 <checkAktifCalisma+0x340>
 80065a8:	2101      	movs	r1, #1
 80065aa:	4816      	ldr	r0, [pc, #88]	; (8006604 <checkAktifCalisma+0x380>)
 80065ac:	f003 fa08 	bl	80099c0 <HAL_GPIO_ReadPin>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d106      	bne.n	80065c4 <checkAktifCalisma+0x340>
 80065b6:	4b1d      	ldr	r3, [pc, #116]	; (800662c <checkAktifCalisma+0x3a8>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d102      	bne.n	80065c4 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80065be:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <checkAktifCalisma+0x3a4>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80065c4:	4b17      	ldr	r3, [pc, #92]	; (8006624 <checkAktifCalisma+0x3a0>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d134      	bne.n	8006636 <checkAktifCalisma+0x3b2>
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <checkAktifCalisma+0x3a8>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d130      	bne.n	8006636 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80065d4:	2101      	movs	r1, #1
 80065d6:	480b      	ldr	r0, [pc, #44]	; (8006604 <checkAktifCalisma+0x380>)
 80065d8:	f003 f9f2 	bl	80099c0 <HAL_GPIO_ReadPin>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d126      	bne.n	8006630 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80065e2:	4b11      	ldr	r3, [pc, #68]	; (8006628 <checkAktifCalisma+0x3a4>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e025      	b.n	8006636 <checkAktifCalisma+0x3b2>
 80065ea:	bf00      	nop
 80065ec:	40010c00 	.word	0x40010c00
 80065f0:	20000bc6 	.word	0x20000bc6
 80065f4:	20000ba0 	.word	0x20000ba0
 80065f8:	20000ba4 	.word	0x20000ba4
 80065fc:	20000bca 	.word	0x20000bca
 8006600:	20000bcd 	.word	0x20000bcd
 8006604:	40011000 	.word	0x40011000
 8006608:	20000be3 	.word	0x20000be3
 800660c:	20000be4 	.word	0x20000be4
 8006610:	20000b94 	.word	0x20000b94
 8006614:	20000bc2 	.word	0x20000bc2
 8006618:	20000b1c 	.word	0x20000b1c
 800661c:	20000b28 	.word	0x20000b28
 8006620:	20000ba5 	.word	0x20000ba5
 8006624:	20000b95 	.word	0x20000b95
 8006628:	20000be8 	.word	0x20000be8
 800662c:	20000b92 	.word	0x20000b92
			} else {
				cerceveVar=0;
 8006630:	4b7f      	ldr	r3, [pc, #508]	; (8006830 <checkAktifCalisma+0x5ac>)
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006636:	4b7f      	ldr	r3, [pc, #508]	; (8006834 <checkAktifCalisma+0x5b0>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d17c      	bne.n	8006738 <checkAktifCalisma+0x4b4>
 800663e:	4b7e      	ldr	r3, [pc, #504]	; (8006838 <checkAktifCalisma+0x5b4>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d078      	beq.n	8006738 <checkAktifCalisma+0x4b4>
 8006646:	4b7d      	ldr	r3, [pc, #500]	; (800683c <checkAktifCalisma+0x5b8>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d074      	beq.n	8006738 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800664e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006652:	487b      	ldr	r0, [pc, #492]	; (8006840 <checkAktifCalisma+0x5bc>)
 8006654:	f003 f9b4 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <checkAktifCalisma+0x3e2>
 800665e:	4b79      	ldr	r3, [pc, #484]	; (8006844 <checkAktifCalisma+0x5c0>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d068      	beq.n	8006738 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006666:	4b72      	ldr	r3, [pc, #456]	; (8006830 <checkAktifCalisma+0x5ac>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d064      	beq.n	8006738 <checkAktifCalisma+0x4b4>
 800666e:	4b76      	ldr	r3, [pc, #472]	; (8006848 <checkAktifCalisma+0x5c4>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	f083 0301 	eor.w	r3, r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05d      	beq.n	8006738 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800667c:	2104      	movs	r1, #4
 800667e:	4873      	ldr	r0, [pc, #460]	; (800684c <checkAktifCalisma+0x5c8>)
 8006680:	f003 f99e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <checkAktifCalisma+0x40e>
 800668a:	4b71      	ldr	r3, [pc, #452]	; (8006850 <checkAktifCalisma+0x5cc>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d152      	bne.n	8006738 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006696:	486a      	ldr	r0, [pc, #424]	; (8006840 <checkAktifCalisma+0x5bc>)
 8006698:	f003 f992 	bl	80099c0 <HAL_GPIO_ReadPin>
 800669c:	4603      	mov	r3, r0
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d10e      	bne.n	80066c0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80066a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066a6:	4866      	ldr	r0, [pc, #408]	; (8006840 <checkAktifCalisma+0x5bc>)
 80066a8:	f003 f98a 	bl	80099c0 <HAL_GPIO_ReadPin>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d106      	bne.n	80066c0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80066b2:	2140      	movs	r1, #64	; 0x40
 80066b4:	4865      	ldr	r0, [pc, #404]	; (800684c <checkAktifCalisma+0x5c8>)
 80066b6:	f003 f983 	bl	80099c0 <HAL_GPIO_ReadPin>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d003      	beq.n	80066c8 <checkAktifCalisma+0x444>
 80066c0:	4b64      	ldr	r3, [pc, #400]	; (8006854 <checkAktifCalisma+0x5d0>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d037      	beq.n	8006738 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80066c8:	4b63      	ldr	r3, [pc, #396]	; (8006858 <checkAktifCalisma+0x5d4>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f083 0301 	eor.w	r3, r3, #1
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d030      	beq.n	8006738 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80066d6:	4b61      	ldr	r3, [pc, #388]	; (800685c <checkAktifCalisma+0x5d8>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f083 0301 	eor.w	r3, r3, #1
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d029      	beq.n	8006738 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80066e4:	4b5e      	ldr	r3, [pc, #376]	; (8006860 <checkAktifCalisma+0x5dc>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f083 0301 	eor.w	r3, r3, #1
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d022      	beq.n	8006738 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80066f2:	4b5c      	ldr	r3, [pc, #368]	; (8006864 <checkAktifCalisma+0x5e0>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f083 0301 	eor.w	r3, r3, #1
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01b      	beq.n	8006738 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006700:	4b59      	ldr	r3, [pc, #356]	; (8006868 <checkAktifCalisma+0x5e4>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f083 0301 	eor.w	r3, r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d014      	beq.n	8006738 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800670e:	4b57      	ldr	r3, [pc, #348]	; (800686c <checkAktifCalisma+0x5e8>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f083 0301 	eor.w	r3, r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00d      	beq.n	8006738 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800671c:	2201      	movs	r2, #1
 800671e:	2102      	movs	r1, #2
 8006720:	4847      	ldr	r0, [pc, #284]	; (8006840 <checkAktifCalisma+0x5bc>)
 8006722:	f003 f964 	bl	80099ee <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006726:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <checkAktifCalisma+0x5d0>)
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800672c:	4b50      	ldr	r3, [pc, #320]	; (8006870 <checkAktifCalisma+0x5ec>)
 800672e:	2201      	movs	r2, #1
 8006730:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006732:	4b50      	ldr	r3, [pc, #320]	; (8006874 <checkAktifCalisma+0x5f0>)
 8006734:	2201      	movs	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006738:	4b46      	ldr	r3, [pc, #280]	; (8006854 <checkAktifCalisma+0x5d0>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d033      	beq.n	80067a8 <checkAktifCalisma+0x524>
 8006740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006744:	483e      	ldr	r0, [pc, #248]	; (8006840 <checkAktifCalisma+0x5bc>)
 8006746:	f003 f93b 	bl	80099c0 <HAL_GPIO_ReadPin>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d106      	bne.n	800675e <checkAktifCalisma+0x4da>
 8006750:	4b3c      	ldr	r3, [pc, #240]	; (8006844 <checkAktifCalisma+0x5c0>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f083 0301 	eor.w	r3, r3, #1
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <checkAktifCalisma+0x4f0>
 800675e:	2104      	movs	r1, #4
 8006760:	483a      	ldr	r0, [pc, #232]	; (800684c <checkAktifCalisma+0x5c8>)
 8006762:	f003 f92d 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d11d      	bne.n	80067a8 <checkAktifCalisma+0x524>
 800676c:	4b38      	ldr	r3, [pc, #224]	; (8006850 <checkAktifCalisma+0x5cc>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d019      	beq.n	80067a8 <checkAktifCalisma+0x524>
 8006774:	4b30      	ldr	r3, [pc, #192]	; (8006838 <checkAktifCalisma+0x5b4>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d015      	beq.n	80067a8 <checkAktifCalisma+0x524>
 800677c:	4b2f      	ldr	r3, [pc, #188]	; (800683c <checkAktifCalisma+0x5b8>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d011      	beq.n	80067a8 <checkAktifCalisma+0x524>
 8006784:	4b2a      	ldr	r3, [pc, #168]	; (8006830 <checkAktifCalisma+0x5ac>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00d      	beq.n	80067a8 <checkAktifCalisma+0x524>
 800678c:	4b3a      	ldr	r3, [pc, #232]	; (8006878 <checkAktifCalisma+0x5f4>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f083 0301 	eor.w	r3, r3, #1
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d006      	beq.n	80067a8 <checkAktifCalisma+0x524>
			timer2=millis;
 800679a:	4b38      	ldr	r3, [pc, #224]	; (800687c <checkAktifCalisma+0x5f8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a38      	ldr	r2, [pc, #224]	; (8006880 <checkAktifCalisma+0x5fc>)
 80067a0:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80067a2:	4b35      	ldr	r3, [pc, #212]	; (8006878 <checkAktifCalisma+0x5f4>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80067a8:	4b34      	ldr	r3, [pc, #208]	; (800687c <checkAktifCalisma+0x5f8>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b34      	ldr	r3, [pc, #208]	; (8006880 <checkAktifCalisma+0x5fc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	4a34      	ldr	r2, [pc, #208]	; (8006884 <checkAktifCalisma+0x600>)
 80067b4:	7812      	ldrb	r2, [r2, #0]
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d303      	bcc.n	80067c2 <checkAktifCalisma+0x53e>
 80067ba:	4b2f      	ldr	r3, [pc, #188]	; (8006878 <checkAktifCalisma+0x5f4>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d114      	bne.n	80067ec <checkAktifCalisma+0x568>
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <checkAktifCalisma+0x5b4>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f083 0301 	eor.w	r3, r3, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10d      	bne.n	80067ec <checkAktifCalisma+0x568>
 80067d0:	4b1a      	ldr	r3, [pc, #104]	; (800683c <checkAktifCalisma+0x5b8>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	f083 0301 	eor.w	r3, r3, #1
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <checkAktifCalisma+0x568>
 80067de:	4b14      	ldr	r3, [pc, #80]	; (8006830 <checkAktifCalisma+0x5ac>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	f083 0301 	eor.w	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80067ec:	2200      	movs	r2, #0
 80067ee:	2102      	movs	r1, #2
 80067f0:	4813      	ldr	r0, [pc, #76]	; (8006840 <checkAktifCalisma+0x5bc>)
 80067f2:	f003 f8fc 	bl	80099ee <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80067f6:	4b17      	ldr	r3, [pc, #92]	; (8006854 <checkAktifCalisma+0x5d0>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80067fc:	4b1e      	ldr	r3, [pc, #120]	; (8006878 <checkAktifCalisma+0x5f4>)
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <checkAktifCalisma+0x5d0>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d040      	beq.n	800688c <checkAktifCalisma+0x608>
 800680a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800680e:	480f      	ldr	r0, [pc, #60]	; (800684c <checkAktifCalisma+0x5c8>)
 8006810:	f003 f8d6 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d138      	bne.n	800688c <checkAktifCalisma+0x608>
 800681a:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <checkAktifCalisma+0x604>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d034      	beq.n	800688c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006822:	2201      	movs	r2, #1
 8006824:	2101      	movs	r1, #1
 8006826:	4806      	ldr	r0, [pc, #24]	; (8006840 <checkAktifCalisma+0x5bc>)
 8006828:	f003 f8e1 	bl	80099ee <HAL_GPIO_WritePin>
 800682c:	e033      	b.n	8006896 <checkAktifCalisma+0x612>
 800682e:	bf00      	nop
 8006830:	20000be8 	.word	0x20000be8
 8006834:	20000bae 	.word	0x20000bae
 8006838:	20000be3 	.word	0x20000be3
 800683c:	20000be4 	.word	0x20000be4
 8006840:	40010c00 	.word	0x40010c00
 8006844:	20000bce 	.word	0x20000bce
 8006848:	20000be2 	.word	0x20000be2
 800684c:	40011000 	.word	0x40011000
 8006850:	20000b97 	.word	0x20000b97
 8006854:	20000bc9 	.word	0x20000bc9
 8006858:	20000bc6 	.word	0x20000bc6
 800685c:	20000bca 	.word	0x20000bca
 8006860:	20000bc7 	.word	0x20000bc7
 8006864:	20000bc8 	.word	0x20000bc8
 8006868:	20000bcb 	.word	0x20000bcb
 800686c:	20000bcc 	.word	0x20000bcc
 8006870:	20000bd1 	.word	0x20000bd1
 8006874:	20000bf2 	.word	0x20000bf2
 8006878:	20000bc1 	.word	0x20000bc1
 800687c:	20000b1c 	.word	0x20000b1c
 8006880:	20000b28 	.word	0x20000b28
 8006884:	20000ba6 	.word	0x20000ba6
 8006888:	20000b96 	.word	0x20000b96
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800688c:	2200      	movs	r2, #0
 800688e:	2101      	movs	r1, #1
 8006890:	4836      	ldr	r0, [pc, #216]	; (800696c <checkAktifCalisma+0x6e8>)
 8006892:	f003 f8ac 	bl	80099ee <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006896:	4b36      	ldr	r3, [pc, #216]	; (8006970 <checkAktifCalisma+0x6ec>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f040 8080 	bne.w	80069a0 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80068a0:	4b34      	ldr	r3, [pc, #208]	; (8006974 <checkAktifCalisma+0x6f0>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d003      	beq.n	80068b0 <checkAktifCalisma+0x62c>
 80068a8:	4b32      	ldr	r3, [pc, #200]	; (8006974 <checkAktifCalisma+0x6f0>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d177      	bne.n	80069a0 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80068b0:	4b31      	ldr	r3, [pc, #196]	; (8006978 <checkAktifCalisma+0x6f4>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d073      	beq.n	80069a0 <checkAktifCalisma+0x71c>
 80068b8:	4b30      	ldr	r3, [pc, #192]	; (800697c <checkAktifCalisma+0x6f8>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d06f      	beq.n	80069a0 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80068c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068c4:	4829      	ldr	r0, [pc, #164]	; (800696c <checkAktifCalisma+0x6e8>)
 80068c6:	f003 f87b 	bl	80099c0 <HAL_GPIO_ReadPin>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d167      	bne.n	80069a0 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80068d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068d4:	482a      	ldr	r0, [pc, #168]	; (8006980 <checkAktifCalisma+0x6fc>)
 80068d6:	f003 f873 	bl	80099c0 <HAL_GPIO_ReadPin>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <checkAktifCalisma+0x664>
 80068e0:	4b28      	ldr	r3, [pc, #160]	; (8006984 <checkAktifCalisma+0x700>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d15b      	bne.n	80069a0 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	4825      	ldr	r0, [pc, #148]	; (8006980 <checkAktifCalisma+0x6fc>)
 80068ec:	f003 f868 	bl	80099c0 <HAL_GPIO_ReadPin>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d10f      	bne.n	8006916 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80068f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068fa:	481c      	ldr	r0, [pc, #112]	; (800696c <checkAktifCalisma+0x6e8>)
 80068fc:	f003 f860 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006900:	4603      	mov	r3, r0
 8006902:	2b01      	cmp	r3, #1
 8006904:	d107      	bne.n	8006916 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800690a:	4818      	ldr	r0, [pc, #96]	; (800696c <checkAktifCalisma+0x6e8>)
 800690c:	f003 f858 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006910:	4603      	mov	r3, r0
 8006912:	2b01      	cmp	r3, #1
 8006914:	d003      	beq.n	800691e <checkAktifCalisma+0x69a>
 8006916:	4b1c      	ldr	r3, [pc, #112]	; (8006988 <checkAktifCalisma+0x704>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d040      	beq.n	80069a0 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800691e:	4b1b      	ldr	r3, [pc, #108]	; (800698c <checkAktifCalisma+0x708>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f083 0301 	eor.w	r3, r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d039      	beq.n	80069a0 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800692c:	4b18      	ldr	r3, [pc, #96]	; (8006990 <checkAktifCalisma+0x70c>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f083 0301 	eor.w	r3, r3, #1
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d032      	beq.n	80069a0 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800693a:	4b16      	ldr	r3, [pc, #88]	; (8006994 <checkAktifCalisma+0x710>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f083 0301 	eor.w	r3, r3, #1
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02b      	beq.n	80069a0 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006948:	4b13      	ldr	r3, [pc, #76]	; (8006998 <checkAktifCalisma+0x714>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f083 0301 	eor.w	r3, r3, #1
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d024      	beq.n	80069a0 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <checkAktifCalisma+0x718>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	f083 0301 	eor.w	r3, r3, #1
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01d      	beq.n	80069a0 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <checkAktifCalisma+0x704>)
 8006966:	2201      	movs	r2, #1
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	e01c      	b.n	80069a6 <checkAktifCalisma+0x722>
 800696c:	40010c00 	.word	0x40010c00
 8006970:	20000bae 	.word	0x20000bae
 8006974:	20000ba0 	.word	0x20000ba0
 8006978:	20000be3 	.word	0x20000be3
 800697c:	20000be4 	.word	0x20000be4
 8006980:	40011000 	.word	0x40011000
 8006984:	20000ba1 	.word	0x20000ba1
 8006988:	20000bc7 	.word	0x20000bc7
 800698c:	20000bc6 	.word	0x20000bc6
 8006990:	20000bca 	.word	0x20000bca
 8006994:	20000bc9 	.word	0x20000bc9
 8006998:	20000bc8 	.word	0x20000bc8
 800699c:	20000bcc 	.word	0x20000bcc
		} else {
			devmotoryukaricalisiyor=0;
 80069a0:	4b64      	ldr	r3, [pc, #400]	; (8006b34 <checkAktifCalisma+0x8b0>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80069a6:	4b63      	ldr	r3, [pc, #396]	; (8006b34 <checkAktifCalisma+0x8b0>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80069ae:	2201      	movs	r2, #1
 80069b0:	2120      	movs	r1, #32
 80069b2:	4861      	ldr	r0, [pc, #388]	; (8006b38 <checkAktifCalisma+0x8b4>)
 80069b4:	f003 f81b 	bl	80099ee <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80069b8:	4b60      	ldr	r3, [pc, #384]	; (8006b3c <checkAktifCalisma+0x8b8>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80069be:	4b5f      	ldr	r3, [pc, #380]	; (8006b3c <checkAktifCalisma+0x8b8>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d025      	beq.n	8006a12 <checkAktifCalisma+0x78e>
 80069c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069ca:	485d      	ldr	r0, [pc, #372]	; (8006b40 <checkAktifCalisma+0x8bc>)
 80069cc:	f002 fff8 	bl	80099c0 <HAL_GPIO_ReadPin>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d007      	beq.n	80069e6 <checkAktifCalisma+0x762>
 80069d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069da:	4857      	ldr	r0, [pc, #348]	; (8006b38 <checkAktifCalisma+0x8b4>)
 80069dc:	f002 fff0 	bl	80099c0 <HAL_GPIO_ReadPin>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d115      	bne.n	8006a12 <checkAktifCalisma+0x78e>
 80069e6:	4b57      	ldr	r3, [pc, #348]	; (8006b44 <checkAktifCalisma+0x8c0>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d011      	beq.n	8006a12 <checkAktifCalisma+0x78e>
 80069ee:	4b56      	ldr	r3, [pc, #344]	; (8006b48 <checkAktifCalisma+0x8c4>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <checkAktifCalisma+0x78e>
 80069f6:	4b55      	ldr	r3, [pc, #340]	; (8006b4c <checkAktifCalisma+0x8c8>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f083 0301 	eor.w	r3, r3, #1
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006a04:	4b52      	ldr	r3, [pc, #328]	; (8006b50 <checkAktifCalisma+0x8cc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a52      	ldr	r2, [pc, #328]	; (8006b54 <checkAktifCalisma+0x8d0>)
 8006a0a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006a0c:	4b4f      	ldr	r3, [pc, #316]	; (8006b4c <checkAktifCalisma+0x8c8>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006a12:	4b4f      	ldr	r3, [pc, #316]	; (8006b50 <checkAktifCalisma+0x8cc>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b4f      	ldr	r3, [pc, #316]	; (8006b54 <checkAktifCalisma+0x8d0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	4a4e      	ldr	r2, [pc, #312]	; (8006b58 <checkAktifCalisma+0x8d4>)
 8006a1e:	7812      	ldrb	r2, [r2, #0]
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d303      	bcc.n	8006a2c <checkAktifCalisma+0x7a8>
 8006a24:	4b49      	ldr	r3, [pc, #292]	; (8006b4c <checkAktifCalisma+0x8c8>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10d      	bne.n	8006a48 <checkAktifCalisma+0x7c4>
 8006a2c:	4b45      	ldr	r3, [pc, #276]	; (8006b44 <checkAktifCalisma+0x8c0>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f083 0301 	eor.w	r3, r3, #1
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <checkAktifCalisma+0x7c4>
 8006a3a:	4b43      	ldr	r3, [pc, #268]	; (8006b48 <checkAktifCalisma+0x8c4>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	f083 0301 	eor.w	r3, r3, #1
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2120      	movs	r1, #32
 8006a4c:	483a      	ldr	r0, [pc, #232]	; (8006b38 <checkAktifCalisma+0x8b4>)
 8006a4e:	f002 ffce 	bl	80099ee <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006a52:	4b3a      	ldr	r3, [pc, #232]	; (8006b3c <checkAktifCalisma+0x8b8>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006a58:	4b3c      	ldr	r3, [pc, #240]	; (8006b4c <checkAktifCalisma+0x8c8>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006a5e:	4b3f      	ldr	r3, [pc, #252]	; (8006b5c <checkAktifCalisma+0x8d8>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f040 8088 	bne.w	8006b78 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006a68:	4b3d      	ldr	r3, [pc, #244]	; (8006b60 <checkAktifCalisma+0x8dc>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d003      	beq.n	8006a78 <checkAktifCalisma+0x7f4>
 8006a70:	4b3b      	ldr	r3, [pc, #236]	; (8006b60 <checkAktifCalisma+0x8dc>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d17f      	bne.n	8006b78 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006a78:	4b32      	ldr	r3, [pc, #200]	; (8006b44 <checkAktifCalisma+0x8c0>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d07b      	beq.n	8006b78 <checkAktifCalisma+0x8f4>
 8006a80:	4b31      	ldr	r3, [pc, #196]	; (8006b48 <checkAktifCalisma+0x8c4>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d077      	beq.n	8006b78 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006a88:	2140      	movs	r1, #64	; 0x40
 8006a8a:	482b      	ldr	r0, [pc, #172]	; (8006b38 <checkAktifCalisma+0x8b4>)
 8006a8c:	f002 ff98 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d170      	bne.n	8006b78 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a9a:	4827      	ldr	r0, [pc, #156]	; (8006b38 <checkAktifCalisma+0x8b4>)
 8006a9c:	f002 ff90 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <checkAktifCalisma+0x82a>
 8006aa6:	4b2f      	ldr	r3, [pc, #188]	; (8006b64 <checkAktifCalisma+0x8e0>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d164      	bne.n	8006b78 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ab2:	4823      	ldr	r0, [pc, #140]	; (8006b40 <checkAktifCalisma+0x8bc>)
 8006ab4:	f002 ff84 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d10f      	bne.n	8006ade <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ac2:	481f      	ldr	r0, [pc, #124]	; (8006b40 <checkAktifCalisma+0x8bc>)
 8006ac4:	f002 ff7c 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d107      	bne.n	8006ade <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ad2:	481b      	ldr	r0, [pc, #108]	; (8006b40 <checkAktifCalisma+0x8bc>)
 8006ad4:	f002 ff74 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d003      	beq.n	8006ae6 <checkAktifCalisma+0x862>
 8006ade:	4b22      	ldr	r3, [pc, #136]	; (8006b68 <checkAktifCalisma+0x8e4>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d048      	beq.n	8006b78 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006ae6:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <checkAktifCalisma+0x8e8>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f083 0301 	eor.w	r3, r3, #1
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d041      	beq.n	8006b78 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006af4:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <checkAktifCalisma+0x8ec>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f083 0301 	eor.w	r3, r3, #1
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d03a      	beq.n	8006b78 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <checkAktifCalisma+0x8f0>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	f083 0301 	eor.w	r3, r3, #1
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d033      	beq.n	8006b78 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006b10:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <checkAktifCalisma+0x8b8>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f083 0301 	eor.w	r3, r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02c      	beq.n	8006b78 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <checkAktifCalisma+0x8b0>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f083 0301 	eor.w	r3, r3, #1
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d025      	beq.n	8006b78 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <checkAktifCalisma+0x8e4>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	e024      	b.n	8006b7e <checkAktifCalisma+0x8fa>
 8006b34:	20000bc7 	.word	0x20000bc7
 8006b38:	40011000 	.word	0x40011000
 8006b3c:	20000bcb 	.word	0x20000bcb
 8006b40:	40010c00 	.word	0x40010c00
 8006b44:	20000be3 	.word	0x20000be3
 8006b48:	20000be4 	.word	0x20000be4
 8006b4c:	20000bc3 	.word	0x20000bc3
 8006b50:	20000b1c 	.word	0x20000b1c
 8006b54:	20000b28 	.word	0x20000b28
 8006b58:	20000ba7 	.word	0x20000ba7
 8006b5c:	20000bae 	.word	0x20000bae
 8006b60:	20000ba0 	.word	0x20000ba0
 8006b64:	20000ba2 	.word	0x20000ba2
 8006b68:	20000bc8 	.word	0x20000bc8
 8006b6c:	20000bc6 	.word	0x20000bc6
 8006b70:	20000bca 	.word	0x20000bca
 8006b74:	20000bc9 	.word	0x20000bc9
		} else {
			devmotorasagicalisiyor=0;
 8006b78:	4b96      	ldr	r3, [pc, #600]	; (8006dd4 <checkAktifCalisma+0xb50>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006b7e:	4b95      	ldr	r3, [pc, #596]	; (8006dd4 <checkAktifCalisma+0xb50>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006b86:	2201      	movs	r2, #1
 8006b88:	2110      	movs	r1, #16
 8006b8a:	4893      	ldr	r0, [pc, #588]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006b8c:	f002 ff2f 	bl	80099ee <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006b90:	4b92      	ldr	r3, [pc, #584]	; (8006ddc <checkAktifCalisma+0xb58>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006b96:	4b91      	ldr	r3, [pc, #580]	; (8006ddc <checkAktifCalisma+0xb58>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d024      	beq.n	8006be8 <checkAktifCalisma+0x964>
 8006b9e:	2140      	movs	r1, #64	; 0x40
 8006ba0:	488d      	ldr	r0, [pc, #564]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006ba2:	f002 ff0d 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d007      	beq.n	8006bbc <checkAktifCalisma+0x938>
 8006bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006bb0:	4889      	ldr	r0, [pc, #548]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006bb2:	f002 ff05 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d115      	bne.n	8006be8 <checkAktifCalisma+0x964>
 8006bbc:	4b88      	ldr	r3, [pc, #544]	; (8006de0 <checkAktifCalisma+0xb5c>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d011      	beq.n	8006be8 <checkAktifCalisma+0x964>
 8006bc4:	4b87      	ldr	r3, [pc, #540]	; (8006de4 <checkAktifCalisma+0xb60>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00d      	beq.n	8006be8 <checkAktifCalisma+0x964>
 8006bcc:	4b86      	ldr	r3, [pc, #536]	; (8006de8 <checkAktifCalisma+0xb64>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f083 0301 	eor.w	r3, r3, #1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d006      	beq.n	8006be8 <checkAktifCalisma+0x964>
			timer2=millis;
 8006bda:	4b84      	ldr	r3, [pc, #528]	; (8006dec <checkAktifCalisma+0xb68>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a84      	ldr	r2, [pc, #528]	; (8006df0 <checkAktifCalisma+0xb6c>)
 8006be0:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006be2:	4b81      	ldr	r3, [pc, #516]	; (8006de8 <checkAktifCalisma+0xb64>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006be8:	4b80      	ldr	r3, [pc, #512]	; (8006dec <checkAktifCalisma+0xb68>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b80      	ldr	r3, [pc, #512]	; (8006df0 <checkAktifCalisma+0xb6c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	4a80      	ldr	r2, [pc, #512]	; (8006df4 <checkAktifCalisma+0xb70>)
 8006bf4:	7812      	ldrb	r2, [r2, #0]
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d303      	bcc.n	8006c02 <checkAktifCalisma+0x97e>
 8006bfa:	4b7b      	ldr	r3, [pc, #492]	; (8006de8 <checkAktifCalisma+0xb64>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10d      	bne.n	8006c1e <checkAktifCalisma+0x99a>
 8006c02:	4b77      	ldr	r3, [pc, #476]	; (8006de0 <checkAktifCalisma+0xb5c>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f083 0301 	eor.w	r3, r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <checkAktifCalisma+0x99a>
 8006c10:	4b74      	ldr	r3, [pc, #464]	; (8006de4 <checkAktifCalisma+0xb60>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	f083 0301 	eor.w	r3, r3, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2110      	movs	r1, #16
 8006c22:	486d      	ldr	r0, [pc, #436]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006c24:	f002 fee3 	bl	80099ee <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006c28:	4b6c      	ldr	r3, [pc, #432]	; (8006ddc <checkAktifCalisma+0xb58>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006c2e:	4b6e      	ldr	r3, [pc, #440]	; (8006de8 <checkAktifCalisma+0xb64>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c38:	486f      	ldr	r0, [pc, #444]	; (8006df8 <checkAktifCalisma+0xb74>)
 8006c3a:	f002 fec1 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d120      	bne.n	8006c86 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c48:	486b      	ldr	r0, [pc, #428]	; (8006df8 <checkAktifCalisma+0xb74>)
 8006c4a:	f002 feb9 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d118      	bne.n	8006c86 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006c54:	2104      	movs	r1, #4
 8006c56:	4868      	ldr	r0, [pc, #416]	; (8006df8 <checkAktifCalisma+0xb74>)
 8006c58:	f002 feb2 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d111      	bne.n	8006c86 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006c62:	2102      	movs	r1, #2
 8006c64:	4864      	ldr	r0, [pc, #400]	; (8006df8 <checkAktifCalisma+0xb74>)
 8006c66:	f002 feab 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006c70:	2101      	movs	r1, #1
 8006c72:	4861      	ldr	r0, [pc, #388]	; (8006df8 <checkAktifCalisma+0xb74>)
 8006c74:	f002 fea4 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006c7e:	4b5f      	ldr	r3, [pc, #380]	; (8006dfc <checkAktifCalisma+0xb78>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	e002      	b.n	8006c8c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006c86:	4b5d      	ldr	r3, [pc, #372]	; (8006dfc <checkAktifCalisma+0xb78>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006c8c:	4b5c      	ldr	r3, [pc, #368]	; (8006e00 <checkAktifCalisma+0xb7c>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d144      	bne.n	8006d1e <checkAktifCalisma+0xa9a>
 8006c94:	4b5b      	ldr	r3, [pc, #364]	; (8006e04 <checkAktifCalisma+0xb80>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d003      	beq.n	8006ca4 <checkAktifCalisma+0xa20>
 8006c9c:	4b59      	ldr	r3, [pc, #356]	; (8006e04 <checkAktifCalisma+0xb80>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d13c      	bne.n	8006d1e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006ca4:	2180      	movs	r1, #128	; 0x80
 8006ca6:	484c      	ldr	r0, [pc, #304]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006ca8:	f002 fe8a 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d103      	bne.n	8006cba <checkAktifCalisma+0xa36>
 8006cb2:	4b55      	ldr	r3, [pc, #340]	; (8006e08 <checkAktifCalisma+0xb84>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <checkAktifCalisma+0xa4e>
 8006cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cbe:	484e      	ldr	r0, [pc, #312]	; (8006df8 <checkAktifCalisma+0xb74>)
 8006cc0:	f002 fe7e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d129      	bne.n	8006d1e <checkAktifCalisma+0xa9a>
 8006cca:	4b4f      	ldr	r3, [pc, #316]	; (8006e08 <checkAktifCalisma+0xb84>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d125      	bne.n	8006d1e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006cd2:	2104      	movs	r1, #4
 8006cd4:	4840      	ldr	r0, [pc, #256]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006cd6:	f002 fe73 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d003      	beq.n	8006ce8 <checkAktifCalisma+0xa64>
 8006ce0:	4b4a      	ldr	r3, [pc, #296]	; (8006e0c <checkAktifCalisma+0xb88>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d11a      	bne.n	8006d1e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ce8:	2102      	movs	r1, #2
 8006cea:	483b      	ldr	r0, [pc, #236]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006cec:	f002 fe68 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d113      	bne.n	8006d1e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006cf6:	4b46      	ldr	r3, [pc, #280]	; (8006e10 <checkAktifCalisma+0xb8c>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	f083 0301 	eor.w	r3, r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00c      	beq.n	8006d1e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006d04:	4b3d      	ldr	r3, [pc, #244]	; (8006dfc <checkAktifCalisma+0xb78>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006d0c:	4b41      	ldr	r3, [pc, #260]	; (8006e14 <checkAktifCalisma+0xb90>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006d12:	4b36      	ldr	r3, [pc, #216]	; (8006dec <checkAktifCalisma+0xb68>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a40      	ldr	r2, [pc, #256]	; (8006e18 <checkAktifCalisma+0xb94>)
 8006d18:	6013      	str	r3, [r2, #0]
			bekle();
 8006d1a:	f7ff f87d 	bl	8005e18 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006d1e:	4b33      	ldr	r3, [pc, #204]	; (8006dec <checkAktifCalisma+0xb68>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b3d      	ldr	r3, [pc, #244]	; (8006e18 <checkAktifCalisma+0xb94>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	4a3c      	ldr	r2, [pc, #240]	; (8006e1c <checkAktifCalisma+0xb98>)
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d211      	bcs.n	8006d54 <checkAktifCalisma+0xad0>
 8006d30:	2104      	movs	r1, #4
 8006d32:	4829      	ldr	r0, [pc, #164]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006d34:	f002 fe44 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <checkAktifCalisma+0xad0>
 8006d3e:	4b33      	ldr	r3, [pc, #204]	; (8006e0c <checkAktifCalisma+0xb88>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d006      	beq.n	8006d54 <checkAktifCalisma+0xad0>
 8006d46:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <checkAktifCalisma+0xb78>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	f083 0301 	eor.w	r3, r3, #1
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006d54:	4b2f      	ldr	r3, [pc, #188]	; (8006e14 <checkAktifCalisma+0xb90>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006d5a:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <checkAktifCalisma+0xb7c>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d160      	bne.n	8006e24 <checkAktifCalisma+0xba0>
 8006d62:	4b28      	ldr	r3, [pc, #160]	; (8006e04 <checkAktifCalisma+0xb80>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d003      	beq.n	8006d72 <checkAktifCalisma+0xaee>
 8006d6a:	4b26      	ldr	r3, [pc, #152]	; (8006e04 <checkAktifCalisma+0xb80>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d158      	bne.n	8006e24 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006d72:	2104      	movs	r1, #4
 8006d74:	4818      	ldr	r0, [pc, #96]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006d76:	f002 fe23 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d003      	beq.n	8006d88 <checkAktifCalisma+0xb04>
 8006d80:	4b22      	ldr	r3, [pc, #136]	; (8006e0c <checkAktifCalisma+0xb88>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d14d      	bne.n	8006e24 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006d88:	2102      	movs	r1, #2
 8006d8a:	4813      	ldr	r0, [pc, #76]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006d8c:	f002 fe18 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d146      	bne.n	8006e24 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006d96:	2180      	movs	r1, #128	; 0x80
 8006d98:	480f      	ldr	r0, [pc, #60]	; (8006dd8 <checkAktifCalisma+0xb54>)
 8006d9a:	f002 fe11 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <checkAktifCalisma+0xb28>
 8006da4:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <checkAktifCalisma+0xb84>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <checkAktifCalisma+0xb40>
 8006dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006db0:	4811      	ldr	r0, [pc, #68]	; (8006df8 <checkAktifCalisma+0xb74>)
 8006db2:	f002 fe05 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d133      	bne.n	8006e24 <checkAktifCalisma+0xba0>
 8006dbc:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <checkAktifCalisma+0xb84>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d12f      	bne.n	8006e24 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	; (8006dfc <checkAktifCalisma+0xb78>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d02b      	beq.n	8006e24 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006dcc:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <checkAktifCalisma+0xb9c>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	e02a      	b.n	8006e2a <checkAktifCalisma+0xba6>
 8006dd4:	20000bc8 	.word	0x20000bc8
 8006dd8:	40011000 	.word	0x40011000
 8006ddc:	20000bcc 	.word	0x20000bcc
 8006de0:	20000be3 	.word	0x20000be3
 8006de4:	20000be4 	.word	0x20000be4
 8006de8:	20000bc4 	.word	0x20000bc4
 8006dec:	20000b1c 	.word	0x20000b1c
 8006df0:	20000b28 	.word	0x20000b28
 8006df4:	20000ba7 	.word	0x20000ba7
 8006df8:	40010c00 	.word	0x40010c00
 8006dfc:	20000bd3 	.word	0x20000bd3
 8006e00:	20000b9a 	.word	0x20000b9a
 8006e04:	20000b99 	.word	0x20000b99
 8006e08:	20000b9d 	.word	0x20000b9d
 8006e0c:	20000b97 	.word	0x20000b97
 8006e10:	20000bc0 	.word	0x20000bc0
 8006e14:	20000bd4 	.word	0x20000bd4
 8006e18:	20000b20 	.word	0x20000b20
 8006e1c:	20000baa 	.word	0x20000baa
 8006e20:	20000bd5 	.word	0x20000bd5
		} else {
			kapi1butonkontrol=0;
 8006e24:	4b8b      	ldr	r3, [pc, #556]	; (8007054 <checkAktifCalisma+0xdd0>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006e2a:	4b8b      	ldr	r3, [pc, #556]	; (8007058 <checkAktifCalisma+0xdd4>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d121      	bne.n	8006e76 <checkAktifCalisma+0xbf2>
 8006e32:	4b8a      	ldr	r3, [pc, #552]	; (800705c <checkAktifCalisma+0xdd8>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d003      	beq.n	8006e42 <checkAktifCalisma+0xbbe>
 8006e3a:	4b88      	ldr	r3, [pc, #544]	; (800705c <checkAktifCalisma+0xdd8>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d119      	bne.n	8006e76 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006e42:	2104      	movs	r1, #4
 8006e44:	4886      	ldr	r0, [pc, #536]	; (8007060 <checkAktifCalisma+0xddc>)
 8006e46:	f002 fdbb 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d003      	beq.n	8006e58 <checkAktifCalisma+0xbd4>
 8006e50:	4b84      	ldr	r3, [pc, #528]	; (8007064 <checkAktifCalisma+0xde0>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10e      	bne.n	8006e76 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006e58:	2102      	movs	r1, #2
 8006e5a:	4881      	ldr	r0, [pc, #516]	; (8007060 <checkAktifCalisma+0xddc>)
 8006e5c:	f002 fdb0 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d107      	bne.n	8006e76 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006e66:	4b80      	ldr	r3, [pc, #512]	; (8007068 <checkAktifCalisma+0xde4>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006e6e:	4b7f      	ldr	r3, [pc, #508]	; (800706c <checkAktifCalisma+0xde8>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e002      	b.n	8006e7c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006e76:	4b7d      	ldr	r3, [pc, #500]	; (800706c <checkAktifCalisma+0xde8>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006e7c:	4b75      	ldr	r3, [pc, #468]	; (8007054 <checkAktifCalisma+0xdd0>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d107      	bne.n	8006e94 <checkAktifCalisma+0xc10>
 8006e84:	4b79      	ldr	r3, [pc, #484]	; (800706c <checkAktifCalisma+0xde8>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <checkAktifCalisma+0xc10>
 8006e8c:	4b78      	ldr	r3, [pc, #480]	; (8007070 <checkAktifCalisma+0xdec>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006e94:	2201      	movs	r2, #1
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	4876      	ldr	r0, [pc, #472]	; (8007074 <checkAktifCalisma+0xdf0>)
 8006e9a:	f002 fda8 	bl	80099ee <HAL_GPIO_WritePin>
 8006e9e:	e004      	b.n	8006eaa <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	4873      	ldr	r0, [pc, #460]	; (8007074 <checkAktifCalisma+0xdf0>)
 8006ea6:	f002 fda2 	bl	80099ee <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006eaa:	4b73      	ldr	r3, [pc, #460]	; (8007078 <checkAktifCalisma+0xdf4>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d141      	bne.n	8006f36 <checkAktifCalisma+0xcb2>
 8006eb2:	4b6a      	ldr	r3, [pc, #424]	; (800705c <checkAktifCalisma+0xdd8>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d003      	beq.n	8006ec2 <checkAktifCalisma+0xc3e>
 8006eba:	4b68      	ldr	r3, [pc, #416]	; (800705c <checkAktifCalisma+0xdd8>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d139      	bne.n	8006f36 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ec6:	4866      	ldr	r0, [pc, #408]	; (8007060 <checkAktifCalisma+0xddc>)
 8006ec8:	f002 fd7a 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <checkAktifCalisma+0xc56>
 8006ed2:	4b6a      	ldr	r3, [pc, #424]	; (800707c <checkAktifCalisma+0xdf8>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00b      	beq.n	8006ef2 <checkAktifCalisma+0xc6e>
 8006eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ede:	4868      	ldr	r0, [pc, #416]	; (8007080 <checkAktifCalisma+0xdfc>)
 8006ee0:	f002 fd6e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d125      	bne.n	8006f36 <checkAktifCalisma+0xcb2>
 8006eea:	4b64      	ldr	r3, [pc, #400]	; (800707c <checkAktifCalisma+0xdf8>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d121      	bne.n	8006f36 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006ef2:	2102      	movs	r1, #2
 8006ef4:	485a      	ldr	r0, [pc, #360]	; (8007060 <checkAktifCalisma+0xddc>)
 8006ef6:	f002 fd63 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d11a      	bne.n	8006f36 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006f00:	2104      	movs	r1, #4
 8006f02:	4857      	ldr	r0, [pc, #348]	; (8007060 <checkAktifCalisma+0xddc>)
 8006f04:	f002 fd5c 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d113      	bne.n	8006f36 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8006f0e:	4b56      	ldr	r3, [pc, #344]	; (8007068 <checkAktifCalisma+0xde4>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00f      	beq.n	8006f36 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8006f16:	4b5b      	ldr	r3, [pc, #364]	; (8007084 <checkAktifCalisma+0xe00>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	f083 0301 	eor.w	r3, r3, #1
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8006f24:	4b58      	ldr	r3, [pc, #352]	; (8007088 <checkAktifCalisma+0xe04>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006f2a:	4b58      	ldr	r3, [pc, #352]	; (800708c <checkAktifCalisma+0xe08>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a58      	ldr	r2, [pc, #352]	; (8007090 <checkAktifCalisma+0xe0c>)
 8006f30:	6013      	str	r3, [r2, #0]
			bekle();
 8006f32:	f7fe ff71 	bl	8005e18 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006f36:	4b55      	ldr	r3, [pc, #340]	; (800708c <checkAktifCalisma+0xe08>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b55      	ldr	r3, [pc, #340]	; (8007090 <checkAktifCalisma+0xe0c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	4a54      	ldr	r2, [pc, #336]	; (8007094 <checkAktifCalisma+0xe10>)
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d20d      	bcs.n	8006f64 <checkAktifCalisma+0xce0>
 8006f48:	2102      	movs	r1, #2
 8006f4a:	4845      	ldr	r0, [pc, #276]	; (8007060 <checkAktifCalisma+0xddc>)
 8006f4c:	f002 fd38 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d006      	beq.n	8006f64 <checkAktifCalisma+0xce0>
 8006f56:	4b44      	ldr	r3, [pc, #272]	; (8007068 <checkAktifCalisma+0xde4>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	f083 0301 	eor.w	r3, r3, #1
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8006f64:	4b48      	ldr	r3, [pc, #288]	; (8007088 <checkAktifCalisma+0xe04>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f6a:	4b43      	ldr	r3, [pc, #268]	; (8007078 <checkAktifCalisma+0xdf4>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d135      	bne.n	8006fde <checkAktifCalisma+0xd5a>
 8006f72:	4b3a      	ldr	r3, [pc, #232]	; (800705c <checkAktifCalisma+0xdd8>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d003      	beq.n	8006f82 <checkAktifCalisma+0xcfe>
 8006f7a:	4b38      	ldr	r3, [pc, #224]	; (800705c <checkAktifCalisma+0xdd8>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d12d      	bne.n	8006fde <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f86:	4836      	ldr	r0, [pc, #216]	; (8007060 <checkAktifCalisma+0xddc>)
 8006f88:	f002 fd1a 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d103      	bne.n	8006f9a <checkAktifCalisma+0xd16>
 8006f92:	4b3a      	ldr	r3, [pc, #232]	; (800707c <checkAktifCalisma+0xdf8>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <checkAktifCalisma+0xd2e>
 8006f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f9e:	4838      	ldr	r0, [pc, #224]	; (8007080 <checkAktifCalisma+0xdfc>)
 8006fa0:	f002 fd0e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d119      	bne.n	8006fde <checkAktifCalisma+0xd5a>
 8006faa:	4b34      	ldr	r3, [pc, #208]	; (800707c <checkAktifCalisma+0xdf8>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d115      	bne.n	8006fde <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006fb2:	2102      	movs	r1, #2
 8006fb4:	482a      	ldr	r0, [pc, #168]	; (8007060 <checkAktifCalisma+0xddc>)
 8006fb6:	f002 fd03 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d10e      	bne.n	8006fde <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	4827      	ldr	r0, [pc, #156]	; (8007060 <checkAktifCalisma+0xddc>)
 8006fc4:	f002 fcfc 	bl	80099c0 <HAL_GPIO_ReadPin>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d107      	bne.n	8006fde <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8006fce:	4b26      	ldr	r3, [pc, #152]	; (8007068 <checkAktifCalisma+0xde4>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8006fd6:	4b30      	ldr	r3, [pc, #192]	; (8007098 <checkAktifCalisma+0xe14>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	e002      	b.n	8006fe4 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8006fde:	4b2e      	ldr	r3, [pc, #184]	; (8007098 <checkAktifCalisma+0xe14>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fe4:	4b24      	ldr	r3, [pc, #144]	; (8007078 <checkAktifCalisma+0xdf4>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d11d      	bne.n	8007028 <checkAktifCalisma+0xda4>
 8006fec:	4b1b      	ldr	r3, [pc, #108]	; (800705c <checkAktifCalisma+0xdd8>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d003      	beq.n	8006ffc <checkAktifCalisma+0xd78>
 8006ff4:	4b19      	ldr	r3, [pc, #100]	; (800705c <checkAktifCalisma+0xdd8>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d115      	bne.n	8007028 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006ffc:	2102      	movs	r1, #2
 8006ffe:	4818      	ldr	r0, [pc, #96]	; (8007060 <checkAktifCalisma+0xddc>)
 8007000:	f002 fcde 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007004:	4603      	mov	r3, r0
 8007006:	2b01      	cmp	r3, #1
 8007008:	d10e      	bne.n	8007028 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800700a:	2104      	movs	r1, #4
 800700c:	4814      	ldr	r0, [pc, #80]	; (8007060 <checkAktifCalisma+0xddc>)
 800700e:	f002 fcd7 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d107      	bne.n	8007028 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007018:	4b13      	ldr	r3, [pc, #76]	; (8007068 <checkAktifCalisma+0xde4>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8007020:	4b1e      	ldr	r3, [pc, #120]	; (800709c <checkAktifCalisma+0xe18>)
 8007022:	2201      	movs	r2, #1
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e002      	b.n	800702e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007028:	4b1c      	ldr	r3, [pc, #112]	; (800709c <checkAktifCalisma+0xe18>)
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800702e:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <checkAktifCalisma+0xe14>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d107      	bne.n	8007046 <checkAktifCalisma+0xdc2>
 8007036:	4b19      	ldr	r3, [pc, #100]	; (800709c <checkAktifCalisma+0xe18>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <checkAktifCalisma+0xdc2>
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <checkAktifCalisma+0xe04>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d02c      	beq.n	80070a0 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007046:	2201      	movs	r2, #1
 8007048:	2140      	movs	r1, #64	; 0x40
 800704a:	480a      	ldr	r0, [pc, #40]	; (8007074 <checkAktifCalisma+0xdf0>)
 800704c:	f002 fccf 	bl	80099ee <HAL_GPIO_WritePin>
 8007050:	e02b      	b.n	80070aa <checkAktifCalisma+0xe26>
 8007052:	bf00      	nop
 8007054:	20000bd5 	.word	0x20000bd5
 8007058:	20000b9a 	.word	0x20000b9a
 800705c:	20000b99 	.word	0x20000b99
 8007060:	40011000 	.word	0x40011000
 8007064:	20000b97 	.word	0x20000b97
 8007068:	20000bd3 	.word	0x20000bd3
 800706c:	20000bd6 	.word	0x20000bd6
 8007070:	20000bd4 	.word	0x20000bd4
 8007074:	40010800 	.word	0x40010800
 8007078:	20000b9b 	.word	0x20000b9b
 800707c:	20000b9d 	.word	0x20000b9d
 8007080:	40010c00 	.word	0x40010c00
 8007084:	20000bc0 	.word	0x20000bc0
 8007088:	20000bd7 	.word	0x20000bd7
 800708c:	20000b1c 	.word	0x20000b1c
 8007090:	20000b20 	.word	0x20000b20
 8007094:	20000bab 	.word	0x20000bab
 8007098:	20000bd8 	.word	0x20000bd8
 800709c:	20000bd9 	.word	0x20000bd9
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80070a0:	2200      	movs	r2, #0
 80070a2:	2140      	movs	r1, #64	; 0x40
 80070a4:	488d      	ldr	r0, [pc, #564]	; (80072dc <checkAktifCalisma+0x1058>)
 80070a6:	f002 fca2 	bl	80099ee <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80070aa:	4b8d      	ldr	r3, [pc, #564]	; (80072e0 <checkAktifCalisma+0x105c>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <checkAktifCalisma+0xe36>
 80070b2:	4b8b      	ldr	r3, [pc, #556]	; (80072e0 <checkAktifCalisma+0x105c>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d115      	bne.n	80070e6 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80070ba:	2104      	movs	r1, #4
 80070bc:	4889      	ldr	r0, [pc, #548]	; (80072e4 <checkAktifCalisma+0x1060>)
 80070be:	f002 fc7f 	bl	80099c0 <HAL_GPIO_ReadPin>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d003      	beq.n	80070d0 <checkAktifCalisma+0xe4c>
 80070c8:	4b87      	ldr	r3, [pc, #540]	; (80072e8 <checkAktifCalisma+0x1064>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80070d0:	2102      	movs	r1, #2
 80070d2:	4884      	ldr	r0, [pc, #528]	; (80072e4 <checkAktifCalisma+0x1060>)
 80070d4:	f002 fc74 	bl	80099c0 <HAL_GPIO_ReadPin>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d103      	bne.n	80070e6 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80070de:	4b83      	ldr	r3, [pc, #524]	; (80072ec <checkAktifCalisma+0x1068>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	e002      	b.n	80070ec <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80070e6:	4b81      	ldr	r3, [pc, #516]	; (80072ec <checkAktifCalisma+0x1068>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80070ec:	4b7c      	ldr	r3, [pc, #496]	; (80072e0 <checkAktifCalisma+0x105c>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d003      	beq.n	80070fc <checkAktifCalisma+0xe78>
 80070f4:	4b7a      	ldr	r3, [pc, #488]	; (80072e0 <checkAktifCalisma+0x105c>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d111      	bne.n	8007120 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80070fc:	2102      	movs	r1, #2
 80070fe:	4879      	ldr	r0, [pc, #484]	; (80072e4 <checkAktifCalisma+0x1060>)
 8007100:	f002 fc5e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007104:	4603      	mov	r3, r0
 8007106:	2b01      	cmp	r3, #1
 8007108:	d10a      	bne.n	8007120 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800710a:	2104      	movs	r1, #4
 800710c:	4875      	ldr	r0, [pc, #468]	; (80072e4 <checkAktifCalisma+0x1060>)
 800710e:	f002 fc57 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007118:	4b75      	ldr	r3, [pc, #468]	; (80072f0 <checkAktifCalisma+0x106c>)
 800711a:	2201      	movs	r2, #1
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	e002      	b.n	8007126 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007120:	4b73      	ldr	r3, [pc, #460]	; (80072f0 <checkAktifCalisma+0x106c>)
 8007122:	2200      	movs	r2, #0
 8007124:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007126:	4b71      	ldr	r3, [pc, #452]	; (80072ec <checkAktifCalisma+0x1068>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00f      	beq.n	800714e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800712e:	4b71      	ldr	r3, [pc, #452]	; (80072f4 <checkAktifCalisma+0x1070>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d10b      	bne.n	800714e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800713a:	486f      	ldr	r0, [pc, #444]	; (80072f8 <checkAktifCalisma+0x1074>)
 800713c:	f002 fc40 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8007146:	4b6d      	ldr	r3, [pc, #436]	; (80072fc <checkAktifCalisma+0x1078>)
 8007148:	2201      	movs	r2, #1
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	e002      	b.n	8007154 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800714e:	4b6b      	ldr	r3, [pc, #428]	; (80072fc <checkAktifCalisma+0x1078>)
 8007150:	2200      	movs	r2, #0
 8007152:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007154:	4b66      	ldr	r3, [pc, #408]	; (80072f0 <checkAktifCalisma+0x106c>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00f      	beq.n	800717c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 800715c:	4b65      	ldr	r3, [pc, #404]	; (80072f4 <checkAktifCalisma+0x1070>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d10b      	bne.n	800717c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007168:	4863      	ldr	r0, [pc, #396]	; (80072f8 <checkAktifCalisma+0x1074>)
 800716a:	f002 fc29 	bl	80099c0 <HAL_GPIO_ReadPin>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007174:	4b62      	ldr	r3, [pc, #392]	; (8007300 <checkAktifCalisma+0x107c>)
 8007176:	2201      	movs	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	e002      	b.n	8007182 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 800717c:	4b60      	ldr	r3, [pc, #384]	; (8007300 <checkAktifCalisma+0x107c>)
 800717e:	2200      	movs	r2, #0
 8007180:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007182:	4b60      	ldr	r3, [pc, #384]	; (8007304 <checkAktifCalisma+0x1080>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d137      	bne.n	80071fa <checkAktifCalisma+0xf76>
 800718a:	4b5f      	ldr	r3, [pc, #380]	; (8007308 <checkAktifCalisma+0x1084>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d003      	beq.n	800719a <checkAktifCalisma+0xf16>
 8007192:	4b5d      	ldr	r3, [pc, #372]	; (8007308 <checkAktifCalisma+0x1084>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b03      	cmp	r3, #3
 8007198:	d12f      	bne.n	80071fa <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800719a:	4b54      	ldr	r3, [pc, #336]	; (80072ec <checkAktifCalisma+0x1068>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <checkAktifCalisma+0xf26>
 80071a2:	4b53      	ldr	r3, [pc, #332]	; (80072f0 <checkAktifCalisma+0x106c>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d027      	beq.n	80071fa <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80071aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071ae:	484d      	ldr	r0, [pc, #308]	; (80072e4 <checkAktifCalisma+0x1060>)
 80071b0:	f002 fc06 	bl	80099c0 <HAL_GPIO_ReadPin>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <checkAktifCalisma+0xf3e>
 80071ba:	4b4e      	ldr	r3, [pc, #312]	; (80072f4 <checkAktifCalisma+0x1070>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80071c2:	4b4e      	ldr	r3, [pc, #312]	; (80072fc <checkAktifCalisma+0x1078>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d103      	bne.n	80071d2 <checkAktifCalisma+0xf4e>
 80071ca:	4b4d      	ldr	r3, [pc, #308]	; (8007300 <checkAktifCalisma+0x107c>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d013      	beq.n	80071fa <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80071d2:	4b4e      	ldr	r3, [pc, #312]	; (800730c <checkAktifCalisma+0x1088>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00f      	beq.n	80071fa <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80071da:	4b4d      	ldr	r3, [pc, #308]	; (8007310 <checkAktifCalisma+0x108c>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f083 0301 	eor.w	r3, r3, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80071e8:	4b4a      	ldr	r3, [pc, #296]	; (8007314 <checkAktifCalisma+0x1090>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80071ee:	4b4a      	ldr	r3, [pc, #296]	; (8007318 <checkAktifCalisma+0x1094>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a4a      	ldr	r2, [pc, #296]	; (800731c <checkAktifCalisma+0x1098>)
 80071f4:	6013      	str	r3, [r2, #0]
			bekle();
 80071f6:	f7fe fe0f 	bl	8005e18 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <checkAktifCalisma+0x1094>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b47      	ldr	r3, [pc, #284]	; (800731c <checkAktifCalisma+0x1098>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	4a46      	ldr	r2, [pc, #280]	; (8007320 <checkAktifCalisma+0x109c>)
 8007206:	7812      	ldrb	r2, [r2, #0]
 8007208:	4293      	cmp	r3, r2
 800720a:	d214      	bcs.n	8007236 <checkAktifCalisma+0xfb2>
 800720c:	4b37      	ldr	r3, [pc, #220]	; (80072ec <checkAktifCalisma+0x1068>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f083 0301 	eor.w	r3, r3, #1
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d006      	beq.n	8007228 <checkAktifCalisma+0xfa4>
 800721a:	4b35      	ldr	r3, [pc, #212]	; (80072f0 <checkAktifCalisma+0x106c>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	f083 0301 	eor.w	r3, r3, #1
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <checkAktifCalisma+0xfb2>
 8007228:	4b38      	ldr	r3, [pc, #224]	; (800730c <checkAktifCalisma+0x1088>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f083 0301 	eor.w	r3, r3, #1
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007236:	4b37      	ldr	r3, [pc, #220]	; (8007314 <checkAktifCalisma+0x1090>)
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800723c:	4b31      	ldr	r3, [pc, #196]	; (8007304 <checkAktifCalisma+0x1080>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d12b      	bne.n	800729c <checkAktifCalisma+0x1018>
 8007244:	4b30      	ldr	r3, [pc, #192]	; (8007308 <checkAktifCalisma+0x1084>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d003      	beq.n	8007254 <checkAktifCalisma+0xfd0>
 800724c:	4b2e      	ldr	r3, [pc, #184]	; (8007308 <checkAktifCalisma+0x1084>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d123      	bne.n	800729c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <checkAktifCalisma+0x1068>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <checkAktifCalisma+0xfe0>
 800725c:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <checkAktifCalisma+0x106c>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d01b      	beq.n	800729c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007268:	481e      	ldr	r0, [pc, #120]	; (80072e4 <checkAktifCalisma+0x1060>)
 800726a:	f002 fba9 	bl	80099c0 <HAL_GPIO_ReadPin>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <checkAktifCalisma+0xff8>
 8007274:	4b1f      	ldr	r3, [pc, #124]	; (80072f4 <checkAktifCalisma+0x1070>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800727c:	4b1f      	ldr	r3, [pc, #124]	; (80072fc <checkAktifCalisma+0x1078>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <checkAktifCalisma+0x1008>
 8007284:	4b1e      	ldr	r3, [pc, #120]	; (8007300 <checkAktifCalisma+0x107c>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800728c:	4b1f      	ldr	r3, [pc, #124]	; (800730c <checkAktifCalisma+0x1088>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007294:	4b23      	ldr	r3, [pc, #140]	; (8007324 <checkAktifCalisma+0x10a0>)
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e002      	b.n	80072a2 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800729c:	4b21      	ldr	r3, [pc, #132]	; (8007324 <checkAktifCalisma+0x10a0>)
 800729e:	2200      	movs	r2, #0
 80072a0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80072a2:	4b18      	ldr	r3, [pc, #96]	; (8007304 <checkAktifCalisma+0x1080>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d140      	bne.n	800732c <checkAktifCalisma+0x10a8>
 80072aa:	4b17      	ldr	r3, [pc, #92]	; (8007308 <checkAktifCalisma+0x1084>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d003      	beq.n	80072ba <checkAktifCalisma+0x1036>
 80072b2:	4b15      	ldr	r3, [pc, #84]	; (8007308 <checkAktifCalisma+0x1084>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d138      	bne.n	800732c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80072ba:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <checkAktifCalisma+0x1068>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <checkAktifCalisma+0x1046>
 80072c2:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <checkAktifCalisma+0x106c>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d030      	beq.n	800732c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <checkAktifCalisma+0x1088>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d02c      	beq.n	800732c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80072d2:	4b15      	ldr	r3, [pc, #84]	; (8007328 <checkAktifCalisma+0x10a4>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	e02b      	b.n	8007332 <checkAktifCalisma+0x10ae>
 80072da:	bf00      	nop
 80072dc:	40010800 	.word	0x40010800
 80072e0:	20000b9e 	.word	0x20000b9e
 80072e4:	40011000 	.word	0x40011000
 80072e8:	20000b97 	.word	0x20000b97
 80072ec:	20000bdd 	.word	0x20000bdd
 80072f0:	20000bde 	.word	0x20000bde
 80072f4:	20000b9d 	.word	0x20000b9d
 80072f8:	40010c00 	.word	0x40010c00
 80072fc:	20000bed 	.word	0x20000bed
 8007300:	20000bee 	.word	0x20000bee
 8007304:	20000b9c 	.word	0x20000b9c
 8007308:	20000b99 	.word	0x20000b99
 800730c:	20000bd3 	.word	0x20000bd3
 8007310:	20000bc0 	.word	0x20000bc0
 8007314:	20000bda 	.word	0x20000bda
 8007318:	20000b1c 	.word	0x20000b1c
 800731c:	20000b20 	.word	0x20000b20
 8007320:	20000bac 	.word	0x20000bac
 8007324:	20000bdb 	.word	0x20000bdb
 8007328:	20000bdc 	.word	0x20000bdc
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 800732c:	4b89      	ldr	r3, [pc, #548]	; (8007554 <checkAktifCalisma+0x12d0>)
 800732e:	2200      	movs	r2, #0
 8007330:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8007332:	4b89      	ldr	r3, [pc, #548]	; (8007558 <checkAktifCalisma+0x12d4>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d107      	bne.n	800734a <checkAktifCalisma+0x10c6>
 800733a:	4b88      	ldr	r3, [pc, #544]	; (800755c <checkAktifCalisma+0x12d8>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <checkAktifCalisma+0x10c6>
 8007342:	4b84      	ldr	r3, [pc, #528]	; (8007554 <checkAktifCalisma+0x12d0>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800734a:	2201      	movs	r2, #1
 800734c:	2120      	movs	r1, #32
 800734e:	4884      	ldr	r0, [pc, #528]	; (8007560 <checkAktifCalisma+0x12dc>)
 8007350:	f002 fb4d 	bl	80099ee <HAL_GPIO_WritePin>
 8007354:	e004      	b.n	8007360 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007356:	2200      	movs	r2, #0
 8007358:	2120      	movs	r1, #32
 800735a:	4881      	ldr	r0, [pc, #516]	; (8007560 <checkAktifCalisma+0x12dc>)
 800735c:	f002 fb47 	bl	80099ee <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007360:	4b80      	ldr	r3, [pc, #512]	; (8007564 <checkAktifCalisma+0x12e0>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <checkAktifCalisma+0x1102>
 8007368:	2102      	movs	r1, #2
 800736a:	487f      	ldr	r0, [pc, #508]	; (8007568 <checkAktifCalisma+0x12e4>)
 800736c:	f002 fb28 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007370:	4603      	mov	r3, r0
 8007372:	2b01      	cmp	r3, #1
 8007374:	d107      	bne.n	8007386 <checkAktifCalisma+0x1102>
 8007376:	4b7d      	ldr	r3, [pc, #500]	; (800756c <checkAktifCalisma+0x12e8>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <checkAktifCalisma+0x1102>
 800737e:	4b7c      	ldr	r3, [pc, #496]	; (8007570 <checkAktifCalisma+0x12ec>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d112      	bne.n	80073ac <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007386:	4b7b      	ldr	r3, [pc, #492]	; (8007574 <checkAktifCalisma+0x12f0>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d066      	beq.n	800745c <checkAktifCalisma+0x11d8>
 800738e:	2104      	movs	r1, #4
 8007390:	4875      	ldr	r0, [pc, #468]	; (8007568 <checkAktifCalisma+0x12e4>)
 8007392:	f002 fb15 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007396:	4603      	mov	r3, r0
 8007398:	2b01      	cmp	r3, #1
 800739a:	d15f      	bne.n	800745c <checkAktifCalisma+0x11d8>
 800739c:	4b73      	ldr	r3, [pc, #460]	; (800756c <checkAktifCalisma+0x12e8>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d05b      	beq.n	800745c <checkAktifCalisma+0x11d8>
 80073a4:	4b72      	ldr	r3, [pc, #456]	; (8007570 <checkAktifCalisma+0x12ec>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d057      	beq.n	800745c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80073ac:	4b72      	ldr	r3, [pc, #456]	; (8007578 <checkAktifCalisma+0x12f4>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	4b70      	ldr	r3, [pc, #448]	; (8007578 <checkAktifCalisma+0x12f4>)
 80073b6:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80073b8:	4b6f      	ldr	r3, [pc, #444]	; (8007578 <checkAktifCalisma+0x12f4>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d908      	bls.n	80073d2 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80073c0:	4b6d      	ldr	r3, [pc, #436]	; (8007578 <checkAktifCalisma+0x12f4>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80073c6:	4b6d      	ldr	r3, [pc, #436]	; (800757c <checkAktifCalisma+0x12f8>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	4b6b      	ldr	r3, [pc, #428]	; (800757c <checkAktifCalisma+0x12f8>)
 80073d0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80073d2:	4b6a      	ldr	r3, [pc, #424]	; (800757c <checkAktifCalisma+0x12f8>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b09      	cmp	r3, #9
 80073d8:	d908      	bls.n	80073ec <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80073da:	4b68      	ldr	r3, [pc, #416]	; (800757c <checkAktifCalisma+0x12f8>)
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80073e0:	4b67      	ldr	r3, [pc, #412]	; (8007580 <checkAktifCalisma+0x12fc>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	4b65      	ldr	r3, [pc, #404]	; (8007580 <checkAktifCalisma+0x12fc>)
 80073ea:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80073ec:	4b64      	ldr	r3, [pc, #400]	; (8007580 <checkAktifCalisma+0x12fc>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b09      	cmp	r3, #9
 80073f2:	d908      	bls.n	8007406 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80073f4:	4b62      	ldr	r3, [pc, #392]	; (8007580 <checkAktifCalisma+0x12fc>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80073fa:	4b62      	ldr	r3, [pc, #392]	; (8007584 <checkAktifCalisma+0x1300>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	b2da      	uxtb	r2, r3
 8007402:	4b60      	ldr	r3, [pc, #384]	; (8007584 <checkAktifCalisma+0x1300>)
 8007404:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007406:	4b5f      	ldr	r3, [pc, #380]	; (8007584 <checkAktifCalisma+0x1300>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b09      	cmp	r3, #9
 800740c:	d908      	bls.n	8007420 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800740e:	4b5d      	ldr	r3, [pc, #372]	; (8007584 <checkAktifCalisma+0x1300>)
 8007410:	2200      	movs	r2, #0
 8007412:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007414:	4b5c      	ldr	r3, [pc, #368]	; (8007588 <checkAktifCalisma+0x1304>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	3301      	adds	r3, #1
 800741a:	b2da      	uxtb	r2, r3
 800741c:	4b5a      	ldr	r3, [pc, #360]	; (8007588 <checkAktifCalisma+0x1304>)
 800741e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007420:	4b59      	ldr	r3, [pc, #356]	; (8007588 <checkAktifCalisma+0x1304>)
 8007422:	781a      	ldrb	r2, [r3, #0]
 8007424:	4b59      	ldr	r3, [pc, #356]	; (800758c <checkAktifCalisma+0x1308>)
 8007426:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800742a:	4b56      	ldr	r3, [pc, #344]	; (8007584 <checkAktifCalisma+0x1300>)
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	4b57      	ldr	r3, [pc, #348]	; (800758c <checkAktifCalisma+0x1308>)
 8007430:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007432:	4b53      	ldr	r3, [pc, #332]	; (8007580 <checkAktifCalisma+0x12fc>)
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	4b55      	ldr	r3, [pc, #340]	; (800758c <checkAktifCalisma+0x1308>)
 8007438:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800743a:	4b50      	ldr	r3, [pc, #320]	; (800757c <checkAktifCalisma+0x12f8>)
 800743c:	781a      	ldrb	r2, [r3, #0]
 800743e:	4b53      	ldr	r3, [pc, #332]	; (800758c <checkAktifCalisma+0x1308>)
 8007440:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007442:	4b4d      	ldr	r3, [pc, #308]	; (8007578 <checkAktifCalisma+0x12f4>)
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	4b51      	ldr	r3, [pc, #324]	; (800758c <checkAktifCalisma+0x1308>)
 8007448:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800744a:	4b51      	ldr	r3, [pc, #324]	; (8007590 <checkAktifCalisma+0x130c>)
 800744c:	2201      	movs	r2, #1
 800744e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007450:	4b44      	ldr	r3, [pc, #272]	; (8007564 <checkAktifCalisma+0x12e0>)
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007456:	4b47      	ldr	r3, [pc, #284]	; (8007574 <checkAktifCalisma+0x12f0>)
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800745c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007460:	484c      	ldr	r0, [pc, #304]	; (8007594 <checkAktifCalisma+0x1310>)
 8007462:	f002 faad 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d016      	beq.n	800749a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800746c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007470:	4848      	ldr	r0, [pc, #288]	; (8007594 <checkAktifCalisma+0x1310>)
 8007472:	f002 faa5 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00e      	beq.n	800749a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800747c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007480:	4844      	ldr	r0, [pc, #272]	; (8007594 <checkAktifCalisma+0x1310>)
 8007482:	f002 fa9d 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800748c:	2140      	movs	r1, #64	; 0x40
 800748e:	4836      	ldr	r0, [pc, #216]	; (8007568 <checkAktifCalisma+0x12e4>)
 8007490:	f002 fa96 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <checkAktifCalisma+0x121e>
			startBasili=1;
 800749a:	4b3f      	ldr	r3, [pc, #252]	; (8007598 <checkAktifCalisma+0x1314>)
 800749c:	2201      	movs	r2, #1
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	e002      	b.n	80074a8 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80074a2:	4b3d      	ldr	r3, [pc, #244]	; (8007598 <checkAktifCalisma+0x1314>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80074a8:	4b3b      	ldr	r3, [pc, #236]	; (8007598 <checkAktifCalisma+0x1314>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d014      	beq.n	80074da <checkAktifCalisma+0x1256>
 80074b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80074b4:	4837      	ldr	r0, [pc, #220]	; (8007594 <checkAktifCalisma+0x1310>)
 80074b6:	f002 fa83 	bl	80099c0 <HAL_GPIO_ReadPin>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d10c      	bne.n	80074da <checkAktifCalisma+0x1256>
			hataVar=1;
 80074c0:	4b36      	ldr	r3, [pc, #216]	; (800759c <checkAktifCalisma+0x1318>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80074c6:	2001      	movs	r0, #1
 80074c8:	f7fe f898 	bl	80055fc <hataKoduLcdGoster>
			hata2EEPROM(1);
 80074cc:	2001      	movs	r0, #1
 80074ce:	f7fe fc27 	bl	8005d20 <hata2EEPROM>
			acilstophatasi=1;
 80074d2:	4b33      	ldr	r3, [pc, #204]	; (80075a0 <checkAktifCalisma+0x131c>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	e018      	b.n	800750c <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80074da:	4b31      	ldr	r3, [pc, #196]	; (80075a0 <checkAktifCalisma+0x131c>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d014      	beq.n	800750c <checkAktifCalisma+0x1288>
 80074e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80074e6:	482b      	ldr	r0, [pc, #172]	; (8007594 <checkAktifCalisma+0x1310>)
 80074e8:	f002 fa6a 	bl	80099c0 <HAL_GPIO_ReadPin>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10c      	bne.n	800750c <checkAktifCalisma+0x1288>
 80074f2:	4b29      	ldr	r3, [pc, #164]	; (8007598 <checkAktifCalisma+0x1314>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f083 0301 	eor.w	r3, r3, #1
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007500:	4b27      	ldr	r3, [pc, #156]	; (80075a0 <checkAktifCalisma+0x131c>)
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007506:	2001      	movs	r0, #1
 8007508:	f7fe f824 	bl	8005554 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800750c:	4b25      	ldr	r3, [pc, #148]	; (80075a4 <checkAktifCalisma+0x1320>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f083 0301 	eor.w	r3, r3, #1
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d04c      	beq.n	80075b4 <checkAktifCalisma+0x1330>
 800751a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800751e:	481d      	ldr	r0, [pc, #116]	; (8007594 <checkAktifCalisma+0x1310>)
 8007520:	f002 fa4e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <checkAktifCalisma+0x12ae>
 800752a:	4b1f      	ldr	r3, [pc, #124]	; (80075a8 <checkAktifCalisma+0x1324>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d040      	beq.n	80075b4 <checkAktifCalisma+0x1330>
 8007532:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <checkAktifCalisma+0x1328>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d13c      	bne.n	80075b4 <checkAktifCalisma+0x1330>
			hataVar=1;
 800753a:	4b18      	ldr	r3, [pc, #96]	; (800759c <checkAktifCalisma+0x1318>)
 800753c:	2201      	movs	r2, #1
 800753e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007540:	2002      	movs	r0, #2
 8007542:	f7fe f85b 	bl	80055fc <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007546:	2002      	movs	r0, #2
 8007548:	f7fe fbea 	bl	8005d20 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 800754c:	4b18      	ldr	r3, [pc, #96]	; (80075b0 <checkAktifCalisma+0x132c>)
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	e047      	b.n	80075e4 <checkAktifCalisma+0x1360>
 8007554:	20000bdc 	.word	0x20000bdc
 8007558:	20000bdb 	.word	0x20000bdb
 800755c:	20000bda 	.word	0x20000bda
 8007560:	40010800 	.word	0x40010800
 8007564:	20000bd0 	.word	0x20000bd0
 8007568:	40011000 	.word	0x40011000
 800756c:	20000b97 	.word	0x20000b97
 8007570:	20000bd3 	.word	0x20000bd3
 8007574:	20000bd1 	.word	0x20000bd1
 8007578:	20000b8e 	.word	0x20000b8e
 800757c:	20000b8f 	.word	0x20000b8f
 8007580:	2000095d 	.word	0x2000095d
 8007584:	2000095e 	.word	0x2000095e
 8007588:	20000b90 	.word	0x20000b90
 800758c:	20000ad4 	.word	0x20000ad4
 8007590:	20000bbd 	.word	0x20000bbd
 8007594:	40010c00 	.word	0x40010c00
 8007598:	20000bdf 	.word	0x20000bdf
 800759c:	20000be6 	.word	0x20000be6
 80075a0:	20000be1 	.word	0x20000be1
 80075a4:	20000be8 	.word	0x20000be8
 80075a8:	20000bf2 	.word	0x20000bf2
 80075ac:	20000b95 	.word	0x20000b95
 80075b0:	20000be2 	.word	0x20000be2
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80075b4:	4b97      	ldr	r3, [pc, #604]	; (8007814 <checkAktifCalisma+0x1590>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d013      	beq.n	80075e4 <checkAktifCalisma+0x1360>
 80075bc:	4b96      	ldr	r3, [pc, #600]	; (8007818 <checkAktifCalisma+0x1594>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <checkAktifCalisma+0x1360>
 80075c4:	4b95      	ldr	r3, [pc, #596]	; (800781c <checkAktifCalisma+0x1598>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f083 0301 	eor.w	r3, r3, #1
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d008      	beq.n	80075e4 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 80075d2:	4b90      	ldr	r3, [pc, #576]	; (8007814 <checkAktifCalisma+0x1590>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80075d8:	4b91      	ldr	r3, [pc, #580]	; (8007820 <checkAktifCalisma+0x159c>)
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80075de:	2002      	movs	r0, #2
 80075e0:	f7fd ffb8 	bl	8005554 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80075e4:	4b8f      	ldr	r3, [pc, #572]	; (8007824 <checkAktifCalisma+0x15a0>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d11c      	bne.n	8007626 <checkAktifCalisma+0x13a2>
 80075ec:	4b8e      	ldr	r3, [pc, #568]	; (8007828 <checkAktifCalisma+0x15a4>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d118      	bne.n	8007626 <checkAktifCalisma+0x13a2>
 80075f4:	4b8d      	ldr	r3, [pc, #564]	; (800782c <checkAktifCalisma+0x15a8>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d014      	beq.n	8007626 <checkAktifCalisma+0x13a2>
 80075fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007600:	488b      	ldr	r0, [pc, #556]	; (8007830 <checkAktifCalisma+0x15ac>)
 8007602:	f002 f9dd 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007606:	4603      	mov	r3, r0
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10c      	bne.n	8007626 <checkAktifCalisma+0x13a2>
			hataVar=1;
 800760c:	4b89      	ldr	r3, [pc, #548]	; (8007834 <checkAktifCalisma+0x15b0>)
 800760e:	2201      	movs	r2, #1
 8007610:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007612:	2003      	movs	r0, #3
 8007614:	f7fd fff2 	bl	80055fc <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007618:	2003      	movs	r0, #3
 800761a:	f7fe fb81 	bl	8005d20 <hata2EEPROM>
			basinchatasi=1;
 800761e:	4b86      	ldr	r3, [pc, #536]	; (8007838 <checkAktifCalisma+0x15b4>)
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e015      	b.n	8007652 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007626:	4b84      	ldr	r3, [pc, #528]	; (8007838 <checkAktifCalisma+0x15b4>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d011      	beq.n	8007652 <checkAktifCalisma+0x13ce>
 800762e:	4b7d      	ldr	r3, [pc, #500]	; (8007824 <checkAktifCalisma+0x15a0>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d10d      	bne.n	8007652 <checkAktifCalisma+0x13ce>
 8007636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800763a:	4880      	ldr	r0, [pc, #512]	; (800783c <checkAktifCalisma+0x15b8>)
 800763c:	f002 f9c0 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007640:	4603      	mov	r3, r0
 8007642:	2b01      	cmp	r3, #1
 8007644:	d105      	bne.n	8007652 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007646:	4b7c      	ldr	r3, [pc, #496]	; (8007838 <checkAktifCalisma+0x15b4>)
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800764c:	2003      	movs	r0, #3
 800764e:	f7fd ff81 	bl	8005554 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007652:	4b7b      	ldr	r3, [pc, #492]	; (8007840 <checkAktifCalisma+0x15bc>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d103      	bne.n	8007662 <checkAktifCalisma+0x13de>
 800765a:	4b7a      	ldr	r3, [pc, #488]	; (8007844 <checkAktifCalisma+0x15c0>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01c      	beq.n	800769c <checkAktifCalisma+0x1418>
 8007662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007666:	4878      	ldr	r0, [pc, #480]	; (8007848 <checkAktifCalisma+0x15c4>)
 8007668:	f002 f9aa 	bl	80099c0 <HAL_GPIO_ReadPin>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d114      	bne.n	800769c <checkAktifCalisma+0x1418>
 8007672:	4b76      	ldr	r3, [pc, #472]	; (800784c <checkAktifCalisma+0x15c8>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d003      	beq.n	8007682 <checkAktifCalisma+0x13fe>
 800767a:	4b74      	ldr	r3, [pc, #464]	; (800784c <checkAktifCalisma+0x15c8>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b03      	cmp	r3, #3
 8007680:	d10c      	bne.n	800769c <checkAktifCalisma+0x1418>
			hataVar=1;
 8007682:	4b6c      	ldr	r3, [pc, #432]	; (8007834 <checkAktifCalisma+0x15b0>)
 8007684:	2201      	movs	r2, #1
 8007686:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007688:	2004      	movs	r0, #4
 800768a:	f7fd ffb7 	bl	80055fc <hataKoduLcdGoster>
			hata2EEPROM(4);
 800768e:	2004      	movs	r0, #4
 8007690:	f7fe fb46 	bl	8005d20 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007694:	4b6e      	ldr	r3, [pc, #440]	; (8007850 <checkAktifCalisma+0x15cc>)
 8007696:	2201      	movs	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	e01f      	b.n	80076dc <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800769c:	4b6c      	ldr	r3, [pc, #432]	; (8007850 <checkAktifCalisma+0x15cc>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01b      	beq.n	80076dc <checkAktifCalisma+0x1458>
 80076a4:	4b6b      	ldr	r3, [pc, #428]	; (8007854 <checkAktifCalisma+0x15d0>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d017      	beq.n	80076dc <checkAktifCalisma+0x1458>
 80076ac:	4b64      	ldr	r3, [pc, #400]	; (8007840 <checkAktifCalisma+0x15bc>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f083 0301 	eor.w	r3, r3, #1
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d010      	beq.n	80076dc <checkAktifCalisma+0x1458>
 80076ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076be:	4862      	ldr	r0, [pc, #392]	; (8007848 <checkAktifCalisma+0x15c4>)
 80076c0:	f002 f97e 	bl	80099c0 <HAL_GPIO_ReadPin>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d108      	bne.n	80076dc <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 80076ca:	4b61      	ldr	r3, [pc, #388]	; (8007850 <checkAktifCalisma+0x15cc>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80076d0:	4b5c      	ldr	r3, [pc, #368]	; (8007844 <checkAktifCalisma+0x15c0>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80076d6:	2004      	movs	r0, #4
 80076d8:	f7fd ff3c 	bl	8005554 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80076dc:	4b58      	ldr	r3, [pc, #352]	; (8007840 <checkAktifCalisma+0x15bc>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <checkAktifCalisma+0x1468>
 80076e4:	4b5c      	ldr	r3, [pc, #368]	; (8007858 <checkAktifCalisma+0x15d4>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01c      	beq.n	8007726 <checkAktifCalisma+0x14a2>
 80076ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076f0:	4855      	ldr	r0, [pc, #340]	; (8007848 <checkAktifCalisma+0x15c4>)
 80076f2:	f002 f965 	bl	80099c0 <HAL_GPIO_ReadPin>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d114      	bne.n	8007726 <checkAktifCalisma+0x14a2>
 80076fc:	4b53      	ldr	r3, [pc, #332]	; (800784c <checkAktifCalisma+0x15c8>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d003      	beq.n	800770c <checkAktifCalisma+0x1488>
 8007704:	4b51      	ldr	r3, [pc, #324]	; (800784c <checkAktifCalisma+0x15c8>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b03      	cmp	r3, #3
 800770a:	d10c      	bne.n	8007726 <checkAktifCalisma+0x14a2>
			hataVar=1;
 800770c:	4b49      	ldr	r3, [pc, #292]	; (8007834 <checkAktifCalisma+0x15b0>)
 800770e:	2201      	movs	r2, #1
 8007710:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007712:	2005      	movs	r0, #5
 8007714:	f7fd ff72 	bl	80055fc <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007718:	2005      	movs	r0, #5
 800771a:	f7fe fb01 	bl	8005d20 <hata2EEPROM>
			tablakapisivicihatasi=1;
 800771e:	4b4f      	ldr	r3, [pc, #316]	; (800785c <checkAktifCalisma+0x15d8>)
 8007720:	2201      	movs	r2, #1
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	e023      	b.n	800776e <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007726:	4b4d      	ldr	r3, [pc, #308]	; (800785c <checkAktifCalisma+0x15d8>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01f      	beq.n	800776e <checkAktifCalisma+0x14ea>
 800772e:	4b49      	ldr	r3, [pc, #292]	; (8007854 <checkAktifCalisma+0x15d0>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d01b      	beq.n	800776e <checkAktifCalisma+0x14ea>
 8007736:	4b42      	ldr	r3, [pc, #264]	; (8007840 <checkAktifCalisma+0x15bc>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	f083 0301 	eor.w	r3, r3, #1
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d014      	beq.n	800776e <checkAktifCalisma+0x14ea>
 8007744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007748:	483f      	ldr	r0, [pc, #252]	; (8007848 <checkAktifCalisma+0x15c4>)
 800774a:	f002 f939 	bl	80099c0 <HAL_GPIO_ReadPin>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10c      	bne.n	800776e <checkAktifCalisma+0x14ea>
 8007754:	4b3f      	ldr	r3, [pc, #252]	; (8007854 <checkAktifCalisma+0x15d0>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 800775c:	4b3f      	ldr	r3, [pc, #252]	; (800785c <checkAktifCalisma+0x15d8>)
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007762:	4b3d      	ldr	r3, [pc, #244]	; (8007858 <checkAktifCalisma+0x15d4>)
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007768:	2005      	movs	r0, #5
 800776a:	f7fd fef3 	bl	8005554 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800776e:	4b2f      	ldr	r3, [pc, #188]	; (800782c <checkAktifCalisma+0x15a8>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d107      	bne.n	8007786 <checkAktifCalisma+0x1502>
 8007776:	4b29      	ldr	r3, [pc, #164]	; (800781c <checkAktifCalisma+0x1598>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d103      	bne.n	8007786 <checkAktifCalisma+0x1502>
 800777e:	4b38      	ldr	r3, [pc, #224]	; (8007860 <checkAktifCalisma+0x15dc>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d014      	beq.n	80077b0 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007786:	4b37      	ldr	r3, [pc, #220]	; (8007864 <checkAktifCalisma+0x15e0>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4b37      	ldr	r3, [pc, #220]	; (8007868 <checkAktifCalisma+0x15e4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	4a36      	ldr	r2, [pc, #216]	; (800786c <checkAktifCalisma+0x15e8>)
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	4293      	cmp	r3, r2
 8007796:	d30b      	bcc.n	80077b0 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007798:	4b26      	ldr	r3, [pc, #152]	; (8007834 <checkAktifCalisma+0x15b0>)
 800779a:	2201      	movs	r2, #1
 800779c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800779e:	2006      	movs	r0, #6
 80077a0:	f7fd ff2c 	bl	80055fc <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80077a4:	2006      	movs	r0, #6
 80077a6:	f7fe fabb 	bl	8005d20 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 80077aa:	4b31      	ldr	r3, [pc, #196]	; (8007870 <checkAktifCalisma+0x15ec>)
 80077ac:	2201      	movs	r2, #1
 80077ae:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80077b0:	4b2f      	ldr	r3, [pc, #188]	; (8007870 <checkAktifCalisma+0x15ec>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d013      	beq.n	80077e0 <checkAktifCalisma+0x155c>
 80077b8:	2108      	movs	r1, #8
 80077ba:	4823      	ldr	r0, [pc, #140]	; (8007848 <checkAktifCalisma+0x15c4>)
 80077bc:	f002 f900 	bl	80099c0 <HAL_GPIO_ReadPin>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00c      	beq.n	80077e0 <checkAktifCalisma+0x155c>
 80077c6:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <checkAktifCalisma+0x15bc>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f083 0301 	eor.w	r3, r3, #1
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d005      	beq.n	80077e0 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 80077d4:	4b26      	ldr	r3, [pc, #152]	; (8007870 <checkAktifCalisma+0x15ec>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80077da:	2006      	movs	r0, #6
 80077dc:	f7fd feba 	bl	8005554 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80077e0:	4b24      	ldr	r3, [pc, #144]	; (8007874 <checkAktifCalisma+0x15f0>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <checkAktifCalisma+0x157c>
 80077e8:	4b0c      	ldr	r3, [pc, #48]	; (800781c <checkAktifCalisma+0x1598>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d107      	bne.n	8007800 <checkAktifCalisma+0x157c>
 80077f0:	4b21      	ldr	r3, [pc, #132]	; (8007878 <checkAktifCalisma+0x15f4>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d103      	bne.n	8007800 <checkAktifCalisma+0x157c>
 80077f8:	4b19      	ldr	r3, [pc, #100]	; (8007860 <checkAktifCalisma+0x15dc>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d03f      	beq.n	8007880 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007800:	4b1e      	ldr	r3, [pc, #120]	; (800787c <checkAktifCalisma+0x15f8>)
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007806:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <checkAktifCalisma+0x15c0>)
 8007808:	2201      	movs	r2, #1
 800780a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 800780c:	4b12      	ldr	r3, [pc, #72]	; (8007858 <checkAktifCalisma+0x15d4>)
 800780e:	2201      	movs	r2, #1
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	e03c      	b.n	800788e <checkAktifCalisma+0x160a>
 8007814:	20000be2 	.word	0x20000be2
 8007818:	20000be8 	.word	0x20000be8
 800781c:	20000bc9 	.word	0x20000bc9
 8007820:	20000bf2 	.word	0x20000bf2
 8007824:	20000b94 	.word	0x20000b94
 8007828:	20000b98 	.word	0x20000b98
 800782c:	20000be5 	.word	0x20000be5
 8007830:	40011000 	.word	0x40011000
 8007834:	20000be6 	.word	0x20000be6
 8007838:	20000bef 	.word	0x20000bef
 800783c:	40010c00 	.word	0x40010c00
 8007840:	20000bdf 	.word	0x20000bdf
 8007844:	20000bf3 	.word	0x20000bf3
 8007848:	40010800 	.word	0x40010800
 800784c:	20000b99 	.word	0x20000b99
 8007850:	20000bf0 	.word	0x20000bf0
 8007854:	20000bd3 	.word	0x20000bd3
 8007858:	20000bf4 	.word	0x20000bf4
 800785c:	20000bf1 	.word	0x20000bf1
 8007860:	20000bc8 	.word	0x20000bc8
 8007864:	20000b1c 	.word	0x20000b1c
 8007868:	20000b30 	.word	0x20000b30
 800786c:	20000ba9 	.word	0x20000ba9
 8007870:	20000be0 	.word	0x20000be0
 8007874:	20000bc6 	.word	0x20000bc6
 8007878:	20000bc7 	.word	0x20000bc7
 800787c:	20000be7 	.word	0x20000be7
		} else {
			makineCalisiyor=1;
 8007880:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <checkAktifCalisma+0x1678>)
 8007882:	2201      	movs	r2, #1
 8007884:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007886:	4b1e      	ldr	r3, [pc, #120]	; (8007900 <checkAktifCalisma+0x167c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <checkAktifCalisma+0x1680>)
 800788c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800788e:	4b1e      	ldr	r3, [pc, #120]	; (8007908 <checkAktifCalisma+0x1684>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d02f      	beq.n	80078f6 <checkAktifCalisma+0x1672>
 8007896:	4b1d      	ldr	r3, [pc, #116]	; (800790c <checkAktifCalisma+0x1688>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	f083 0301 	eor.w	r3, r3, #1
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d028      	beq.n	80078f6 <checkAktifCalisma+0x1672>
 80078a4:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <checkAktifCalisma+0x168c>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f083 0301 	eor.w	r3, r3, #1
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d021      	beq.n	80078f6 <checkAktifCalisma+0x1672>
 80078b2:	4b18      	ldr	r3, [pc, #96]	; (8007914 <checkAktifCalisma+0x1690>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	f083 0301 	eor.w	r3, r3, #1
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01a      	beq.n	80078f6 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80078c0:	4b15      	ldr	r3, [pc, #84]	; (8007918 <checkAktifCalisma+0x1694>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	f083 0301 	eor.w	r3, r3, #1
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d013      	beq.n	80078f6 <checkAktifCalisma+0x1672>
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <checkAktifCalisma+0x1698>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f083 0301 	eor.w	r3, r3, #1
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <checkAktifCalisma+0x1672>
 80078dc:	4b10      	ldr	r3, [pc, #64]	; (8007920 <checkAktifCalisma+0x169c>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f083 0301 	eor.w	r3, r3, #1
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <checkAktifCalisma+0x1672>
			hataVar=0;
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <checkAktifCalisma+0x1684>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80078f0:	2007      	movs	r0, #7
 80078f2:	f7fd fe2f 	bl	8005554 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000be7 	.word	0x20000be7
 8007900:	20000b1c 	.word	0x20000b1c
 8007904:	20000b30 	.word	0x20000b30
 8007908:	20000be6 	.word	0x20000be6
 800790c:	20000be1 	.word	0x20000be1
 8007910:	20000be2 	.word	0x20000be2
 8007914:	20000bef 	.word	0x20000bef
 8007918:	20000bf0 	.word	0x20000bf0
 800791c:	20000bf1 	.word	0x20000bf1
 8007920:	20000be0 	.word	0x20000be0

08007924 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007928:	4b8b      	ldr	r3, [pc, #556]	; (8007b58 <checkDemoModCalisma+0x234>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	f040 8229 	bne.w	8007d84 <checkDemoModCalisma+0x460>
 8007932:	4b8a      	ldr	r3, [pc, #552]	; (8007b5c <checkDemoModCalisma+0x238>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 8224 	beq.w	8007d84 <checkDemoModCalisma+0x460>
 800793c:	4b88      	ldr	r3, [pc, #544]	; (8007b60 <checkDemoModCalisma+0x23c>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	f040 821f 	bne.w	8007d84 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007946:	2102      	movs	r1, #2
 8007948:	4886      	ldr	r0, [pc, #536]	; (8007b64 <checkDemoModCalisma+0x240>)
 800794a:	f002 f839 	bl	80099c0 <HAL_GPIO_ReadPin>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11d      	bne.n	8007990 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007954:	4b84      	ldr	r3, [pc, #528]	; (8007b68 <checkDemoModCalisma+0x244>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	f083 0301 	eor.w	r3, r3, #1
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d016      	beq.n	8007990 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007962:	4b82      	ldr	r3, [pc, #520]	; (8007b6c <checkDemoModCalisma+0x248>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f083 0301 	eor.w	r3, r3, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00f      	beq.n	8007990 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007970:	4b7f      	ldr	r3, [pc, #508]	; (8007b70 <checkDemoModCalisma+0x24c>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f083 0301 	eor.w	r3, r3, #1
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800797e:	2201      	movs	r2, #1
 8007980:	2104      	movs	r1, #4
 8007982:	487c      	ldr	r0, [pc, #496]	; (8007b74 <checkDemoModCalisma+0x250>)
 8007984:	f002 f833 	bl	80099ee <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007988:	4b7b      	ldr	r3, [pc, #492]	; (8007b78 <checkDemoModCalisma+0x254>)
 800798a:	2201      	movs	r2, #1
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e00e      	b.n	80079ae <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007990:	2102      	movs	r1, #2
 8007992:	4874      	ldr	r0, [pc, #464]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007994:	f002 f814 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007998:	4603      	mov	r3, r0
 800799a:	2b01      	cmp	r3, #1
 800799c:	d107      	bne.n	80079ae <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800799e:	2200      	movs	r2, #0
 80079a0:	2104      	movs	r1, #4
 80079a2:	4874      	ldr	r0, [pc, #464]	; (8007b74 <checkDemoModCalisma+0x250>)
 80079a4:	f002 f823 	bl	80099ee <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80079a8:	4b73      	ldr	r3, [pc, #460]	; (8007b78 <checkDemoModCalisma+0x254>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80079ae:	4b72      	ldr	r3, [pc, #456]	; (8007b78 <checkDemoModCalisma+0x254>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10b      	bne.n	80079ce <checkDemoModCalisma+0xaa>
 80079b6:	4b6d      	ldr	r3, [pc, #436]	; (8007b6c <checkDemoModCalisma+0x248>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d107      	bne.n	80079ce <checkDemoModCalisma+0xaa>
 80079be:	4b6c      	ldr	r3, [pc, #432]	; (8007b70 <checkDemoModCalisma+0x24c>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <checkDemoModCalisma+0xaa>
 80079c6:	4b68      	ldr	r3, [pc, #416]	; (8007b68 <checkDemoModCalisma+0x244>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00c      	beq.n	80079e8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80079ce:	2201      	movs	r2, #1
 80079d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079d4:	4867      	ldr	r0, [pc, #412]	; (8007b74 <checkDemoModCalisma+0x250>)
 80079d6:	f002 f80a 	bl	80099ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80079da:	2201      	movs	r2, #1
 80079dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079e0:	4864      	ldr	r0, [pc, #400]	; (8007b74 <checkDemoModCalisma+0x250>)
 80079e2:	f002 f804 	bl	80099ee <HAL_GPIO_WritePin>
 80079e6:	e00b      	b.n	8007a00 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80079e8:	2200      	movs	r2, #0
 80079ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079ee:	4861      	ldr	r0, [pc, #388]	; (8007b74 <checkDemoModCalisma+0x250>)
 80079f0:	f001 fffd 	bl	80099ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80079f4:	2200      	movs	r2, #0
 80079f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079fa:	485e      	ldr	r0, [pc, #376]	; (8007b74 <checkDemoModCalisma+0x250>)
 80079fc:	f001 fff7 	bl	80099ee <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007a00:	2102      	movs	r1, #2
 8007a02:	4858      	ldr	r0, [pc, #352]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007a04:	f001 ffdc 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d10d      	bne.n	8007a2a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a12:	4854      	ldr	r0, [pc, #336]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007a14:	f001 ffd4 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d105      	bne.n	8007a2a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007a1e:	4b56      	ldr	r3, [pc, #344]	; (8007b78 <checkDemoModCalisma+0x254>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f083 0301 	eor.w	r3, r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	484d      	ldr	r0, [pc, #308]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007a2e:	f001 ffc7 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d125      	bne.n	8007a84 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a3c:	4849      	ldr	r0, [pc, #292]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007a3e:	f001 ffbf 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11d      	bne.n	8007a84 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007a48:	4b4b      	ldr	r3, [pc, #300]	; (8007b78 <checkDemoModCalisma+0x254>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f083 0301 	eor.w	r3, r3, #1
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d016      	beq.n	8007a84 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007a56:	4b44      	ldr	r3, [pc, #272]	; (8007b68 <checkDemoModCalisma+0x244>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f083 0301 	eor.w	r3, r3, #1
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00f      	beq.n	8007a84 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007a64:	4b42      	ldr	r3, [pc, #264]	; (8007b70 <checkDemoModCalisma+0x24c>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f083 0301 	eor.w	r3, r3, #1
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d008      	beq.n	8007a84 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007a72:	2201      	movs	r2, #1
 8007a74:	2120      	movs	r1, #32
 8007a76:	483b      	ldr	r0, [pc, #236]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007a78:	f001 ffb9 	bl	80099ee <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007a7c:	4b3b      	ldr	r3, [pc, #236]	; (8007b6c <checkDemoModCalisma+0x248>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	e007      	b.n	8007a94 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007a84:	2200      	movs	r2, #0
 8007a86:	2120      	movs	r1, #32
 8007a88:	4836      	ldr	r0, [pc, #216]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007a8a:	f001 ffb0 	bl	80099ee <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007a8e:	4b37      	ldr	r3, [pc, #220]	; (8007b6c <checkDemoModCalisma+0x248>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007a94:	2102      	movs	r1, #2
 8007a96:	4833      	ldr	r0, [pc, #204]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007a98:	f001 ff92 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d125      	bne.n	8007aee <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007aa6:	482f      	ldr	r0, [pc, #188]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007aa8:	f001 ff8a 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d11d      	bne.n	8007aee <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007ab2:	4b31      	ldr	r3, [pc, #196]	; (8007b78 <checkDemoModCalisma+0x254>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	f083 0301 	eor.w	r3, r3, #1
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d016      	beq.n	8007aee <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007ac0:	4b2a      	ldr	r3, [pc, #168]	; (8007b6c <checkDemoModCalisma+0x248>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f083 0301 	eor.w	r3, r3, #1
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00f      	beq.n	8007aee <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007ace:	4b26      	ldr	r3, [pc, #152]	; (8007b68 <checkDemoModCalisma+0x244>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	f083 0301 	eor.w	r3, r3, #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d008      	beq.n	8007aee <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007adc:	2201      	movs	r2, #1
 8007ade:	2110      	movs	r1, #16
 8007ae0:	4820      	ldr	r0, [pc, #128]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007ae2:	f001 ff84 	bl	80099ee <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007ae6:	4b22      	ldr	r3, [pc, #136]	; (8007b70 <checkDemoModCalisma+0x24c>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	e007      	b.n	8007afe <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007aee:	2200      	movs	r2, #0
 8007af0:	2110      	movs	r1, #16
 8007af2:	481c      	ldr	r0, [pc, #112]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007af4:	f001 ff7b 	bl	80099ee <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007af8:	4b1d      	ldr	r3, [pc, #116]	; (8007b70 <checkDemoModCalisma+0x24c>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007afe:	2104      	movs	r1, #4
 8007b00:	4818      	ldr	r0, [pc, #96]	; (8007b64 <checkDemoModCalisma+0x240>)
 8007b02:	f001 ff5d 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d139      	bne.n	8007b80 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <checkDemoModCalisma+0x254>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	f083 0301 	eor.w	r3, r3, #1
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d032      	beq.n	8007b80 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007b1a:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <checkDemoModCalisma+0x24c>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	f083 0301 	eor.w	r3, r3, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d02b      	beq.n	8007b80 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007b28:	4b10      	ldr	r3, [pc, #64]	; (8007b6c <checkDemoModCalisma+0x248>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	f083 0301 	eor.w	r3, r3, #1
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d024      	beq.n	8007b80 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007b36:	2201      	movs	r2, #1
 8007b38:	2102      	movs	r1, #2
 8007b3a:	480e      	ldr	r0, [pc, #56]	; (8007b74 <checkDemoModCalisma+0x250>)
 8007b3c:	f001 ff57 	bl	80099ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007b40:	2201      	movs	r2, #1
 8007b42:	2101      	movs	r1, #1
 8007b44:	480b      	ldr	r0, [pc, #44]	; (8007b74 <checkDemoModCalisma+0x250>)
 8007b46:	f001 ff52 	bl	80099ee <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007b4a:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <checkDemoModCalisma+0x244>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <checkDemoModCalisma+0x258>)
 8007b52:	2201      	movs	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e027      	b.n	8007ba8 <checkDemoModCalisma+0x284>
 8007b58:	20000baf 	.word	0x20000baf
 8007b5c:	20000be3 	.word	0x20000be3
 8007b60:	20000bae 	.word	0x20000bae
 8007b64:	40011000 	.word	0x40011000
 8007b68:	20000bea 	.word	0x20000bea
 8007b6c:	20000beb 	.word	0x20000beb
 8007b70:	20000bec 	.word	0x20000bec
 8007b74:	40010c00 	.word	0x40010c00
 8007b78:	20000be9 	.word	0x20000be9
 8007b7c:	20000bcf 	.word	0x20000bcf
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007b80:	2104      	movs	r1, #4
 8007b82:	48a0      	ldr	r0, [pc, #640]	; (8007e04 <checkDemoModCalisma+0x4e0>)
 8007b84:	f001 ff1c 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d10c      	bne.n	8007ba8 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2102      	movs	r1, #2
 8007b92:	489d      	ldr	r0, [pc, #628]	; (8007e08 <checkDemoModCalisma+0x4e4>)
 8007b94:	f001 ff2b 	bl	80099ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	489a      	ldr	r0, [pc, #616]	; (8007e08 <checkDemoModCalisma+0x4e4>)
 8007b9e:	f001 ff26 	bl	80099ee <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007ba2:	4b9a      	ldr	r3, [pc, #616]	; (8007e0c <checkDemoModCalisma+0x4e8>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007ba8:	2104      	movs	r1, #4
 8007baa:	4896      	ldr	r0, [pc, #600]	; (8007e04 <checkDemoModCalisma+0x4e0>)
 8007bac:	f001 ff08 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d10d      	bne.n	8007bd2 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	2180      	movs	r1, #128	; 0x80
 8007bba:	4895      	ldr	r0, [pc, #596]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007bbc:	f001 ff17 	bl	80099ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2120      	movs	r1, #32
 8007bc4:	4892      	ldr	r0, [pc, #584]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007bc6:	f001 ff12 	bl	80099ee <HAL_GPIO_WritePin>
			timer3 = millis;
 8007bca:	4b92      	ldr	r3, [pc, #584]	; (8007e14 <checkDemoModCalisma+0x4f0>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a92      	ldr	r2, [pc, #584]	; (8007e18 <checkDemoModCalisma+0x4f4>)
 8007bd0:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007bd2:	4b90      	ldr	r3, [pc, #576]	; (8007e14 <checkDemoModCalisma+0x4f0>)
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	4b90      	ldr	r3, [pc, #576]	; (8007e18 <checkDemoModCalisma+0x4f4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d909      	bls.n	8007bf4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007be0:	2200      	movs	r2, #0
 8007be2:	2180      	movs	r1, #128	; 0x80
 8007be4:	488a      	ldr	r0, [pc, #552]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007be6:	f001 ff02 	bl	80099ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007bea:	2200      	movs	r2, #0
 8007bec:	2120      	movs	r1, #32
 8007bee:	4888      	ldr	r0, [pc, #544]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007bf0:	f001 fefd 	bl	80099ee <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	4883      	ldr	r0, [pc, #524]	; (8007e04 <checkDemoModCalisma+0x4e0>)
 8007bf8:	f001 fee2 	bl	80099c0 <HAL_GPIO_ReadPin>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d108      	bne.n	8007c14 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007c02:	2201      	movs	r2, #1
 8007c04:	2140      	movs	r1, #64	; 0x40
 8007c06:	4882      	ldr	r0, [pc, #520]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007c08:	f001 fef1 	bl	80099ee <HAL_GPIO_WritePin>
			timer3 = millis;
 8007c0c:	4b81      	ldr	r3, [pc, #516]	; (8007e14 <checkDemoModCalisma+0x4f0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a81      	ldr	r2, [pc, #516]	; (8007e18 <checkDemoModCalisma+0x4f4>)
 8007c12:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007c14:	4b7f      	ldr	r3, [pc, #508]	; (8007e14 <checkDemoModCalisma+0x4f0>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	4b7f      	ldr	r3, [pc, #508]	; (8007e18 <checkDemoModCalisma+0x4f4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d904      	bls.n	8007c2c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007c22:	2200      	movs	r2, #0
 8007c24:	2140      	movs	r1, #64	; 0x40
 8007c26:	487a      	ldr	r0, [pc, #488]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007c28:	f001 fee1 	bl	80099ee <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007c2c:	4b7b      	ldr	r3, [pc, #492]	; (8007e1c <checkDemoModCalisma+0x4f8>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d058      	beq.n	8007ce6 <checkDemoModCalisma+0x3c2>
 8007c34:	4b7a      	ldr	r3, [pc, #488]	; (8007e20 <checkDemoModCalisma+0x4fc>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d054      	beq.n	8007ce6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007c3c:	4b79      	ldr	r3, [pc, #484]	; (8007e24 <checkDemoModCalisma+0x500>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	3301      	adds	r3, #1
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	4b77      	ldr	r3, [pc, #476]	; (8007e24 <checkDemoModCalisma+0x500>)
 8007c46:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007c48:	4b76      	ldr	r3, [pc, #472]	; (8007e24 <checkDemoModCalisma+0x500>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b09      	cmp	r3, #9
 8007c4e:	d908      	bls.n	8007c62 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007c50:	4b74      	ldr	r3, [pc, #464]	; (8007e24 <checkDemoModCalisma+0x500>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007c56:	4b74      	ldr	r3, [pc, #464]	; (8007e28 <checkDemoModCalisma+0x504>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	4b72      	ldr	r3, [pc, #456]	; (8007e28 <checkDemoModCalisma+0x504>)
 8007c60:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007c62:	4b71      	ldr	r3, [pc, #452]	; (8007e28 <checkDemoModCalisma+0x504>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b09      	cmp	r3, #9
 8007c68:	d908      	bls.n	8007c7c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007c6a:	4b6f      	ldr	r3, [pc, #444]	; (8007e28 <checkDemoModCalisma+0x504>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007c70:	4b6e      	ldr	r3, [pc, #440]	; (8007e2c <checkDemoModCalisma+0x508>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	4b6c      	ldr	r3, [pc, #432]	; (8007e2c <checkDemoModCalisma+0x508>)
 8007c7a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007c7c:	4b6b      	ldr	r3, [pc, #428]	; (8007e2c <checkDemoModCalisma+0x508>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b09      	cmp	r3, #9
 8007c82:	d908      	bls.n	8007c96 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007c84:	4b69      	ldr	r3, [pc, #420]	; (8007e2c <checkDemoModCalisma+0x508>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007c8a:	4b69      	ldr	r3, [pc, #420]	; (8007e30 <checkDemoModCalisma+0x50c>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	4b67      	ldr	r3, [pc, #412]	; (8007e30 <checkDemoModCalisma+0x50c>)
 8007c94:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007c96:	4b66      	ldr	r3, [pc, #408]	; (8007e30 <checkDemoModCalisma+0x50c>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d908      	bls.n	8007cb0 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007c9e:	4b64      	ldr	r3, [pc, #400]	; (8007e30 <checkDemoModCalisma+0x50c>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007ca4:	4b63      	ldr	r3, [pc, #396]	; (8007e34 <checkDemoModCalisma+0x510>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	4b61      	ldr	r3, [pc, #388]	; (8007e34 <checkDemoModCalisma+0x510>)
 8007cae:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007cb0:	4b60      	ldr	r3, [pc, #384]	; (8007e34 <checkDemoModCalisma+0x510>)
 8007cb2:	781a      	ldrb	r2, [r3, #0]
 8007cb4:	4b60      	ldr	r3, [pc, #384]	; (8007e38 <checkDemoModCalisma+0x514>)
 8007cb6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007cba:	4b5d      	ldr	r3, [pc, #372]	; (8007e30 <checkDemoModCalisma+0x50c>)
 8007cbc:	781a      	ldrb	r2, [r3, #0]
 8007cbe:	4b5e      	ldr	r3, [pc, #376]	; (8007e38 <checkDemoModCalisma+0x514>)
 8007cc0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007cc2:	4b5a      	ldr	r3, [pc, #360]	; (8007e2c <checkDemoModCalisma+0x508>)
 8007cc4:	781a      	ldrb	r2, [r3, #0]
 8007cc6:	4b5c      	ldr	r3, [pc, #368]	; (8007e38 <checkDemoModCalisma+0x514>)
 8007cc8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007cca:	4b57      	ldr	r3, [pc, #348]	; (8007e28 <checkDemoModCalisma+0x504>)
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	4b5a      	ldr	r3, [pc, #360]	; (8007e38 <checkDemoModCalisma+0x514>)
 8007cd0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007cd2:	4b54      	ldr	r3, [pc, #336]	; (8007e24 <checkDemoModCalisma+0x500>)
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	4b58      	ldr	r3, [pc, #352]	; (8007e38 <checkDemoModCalisma+0x514>)
 8007cd8:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007cda:	4b58      	ldr	r3, [pc, #352]	; (8007e3c <checkDemoModCalisma+0x518>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007ce0:	4b4f      	ldr	r3, [pc, #316]	; (8007e20 <checkDemoModCalisma+0x4fc>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007ce6:	4b56      	ldr	r3, [pc, #344]	; (8007e40 <checkDemoModCalisma+0x51c>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f040 8087 	bne.w	8007dfe <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007cf0:	4a54      	ldr	r2, [pc, #336]	; (8007e44 <checkDemoModCalisma+0x520>)
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	2002      	movs	r0, #2
 8007cf6:	f7f8 fd5f 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007cfa:	4a53      	ldr	r2, [pc, #332]	; (8007e48 <checkDemoModCalisma+0x524>)
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	2001      	movs	r0, #1
 8007d00:	f7f8 fd5a 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007d04:	4b4b      	ldr	r3, [pc, #300]	; (8007e34 <checkDemoModCalisma+0x510>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	220a      	movs	r2, #10
 8007d0a:	4950      	ldr	r1, [pc, #320]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f004 fe83 	bl	800ca18 <itoa>
			lcd_print(2,12,snum);
 8007d12:	4a4e      	ldr	r2, [pc, #312]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d14:	210c      	movs	r1, #12
 8007d16:	2002      	movs	r0, #2
 8007d18:	f7f8 fd4e 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007d1c:	4b44      	ldr	r3, [pc, #272]	; (8007e30 <checkDemoModCalisma+0x50c>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	220a      	movs	r2, #10
 8007d22:	494a      	ldr	r1, [pc, #296]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d24:	4618      	mov	r0, r3
 8007d26:	f004 fe77 	bl	800ca18 <itoa>
			lcd_print(2,13,snum);
 8007d2a:	4a48      	ldr	r2, [pc, #288]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d2c:	210d      	movs	r1, #13
 8007d2e:	2002      	movs	r0, #2
 8007d30:	f7f8 fd42 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007d34:	4b3d      	ldr	r3, [pc, #244]	; (8007e2c <checkDemoModCalisma+0x508>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	220a      	movs	r2, #10
 8007d3a:	4944      	ldr	r1, [pc, #272]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f004 fe6b 	bl	800ca18 <itoa>
			lcd_print(2,14,snum);
 8007d42:	4a42      	ldr	r2, [pc, #264]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d44:	210e      	movs	r1, #14
 8007d46:	2002      	movs	r0, #2
 8007d48:	f7f8 fd36 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007d4c:	4b36      	ldr	r3, [pc, #216]	; (8007e28 <checkDemoModCalisma+0x504>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	220a      	movs	r2, #10
 8007d52:	493e      	ldr	r1, [pc, #248]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d54:	4618      	mov	r0, r3
 8007d56:	f004 fe5f 	bl	800ca18 <itoa>
			lcd_print(2,15,snum);
 8007d5a:	4a3c      	ldr	r2, [pc, #240]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d5c:	210f      	movs	r1, #15
 8007d5e:	2002      	movs	r0, #2
 8007d60:	f7f8 fd2a 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007d64:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <checkDemoModCalisma+0x500>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	220a      	movs	r2, #10
 8007d6a:	4938      	ldr	r1, [pc, #224]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f004 fe53 	bl	800ca18 <itoa>
			lcd_print(2,16,snum);
 8007d72:	4a36      	ldr	r2, [pc, #216]	; (8007e4c <checkDemoModCalisma+0x528>)
 8007d74:	2110      	movs	r1, #16
 8007d76:	2002      	movs	r0, #2
 8007d78:	f7f8 fd1e 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8007d7c:	4b34      	ldr	r3, [pc, #208]	; (8007e50 <checkDemoModCalisma+0x52c>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007d82:	e03c      	b.n	8007dfe <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007d84:	4b33      	ldr	r3, [pc, #204]	; (8007e54 <checkDemoModCalisma+0x530>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d003      	beq.n	8007d94 <checkDemoModCalisma+0x470>
 8007d8c:	4b2c      	ldr	r3, [pc, #176]	; (8007e40 <checkDemoModCalisma+0x51c>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d134      	bne.n	8007dfe <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007d94:	2200      	movs	r2, #0
 8007d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d9a:	481b      	ldr	r0, [pc, #108]	; (8007e08 <checkDemoModCalisma+0x4e4>)
 8007d9c:	f001 fe27 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007da0:	2200      	movs	r2, #0
 8007da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007da6:	4818      	ldr	r0, [pc, #96]	; (8007e08 <checkDemoModCalisma+0x4e4>)
 8007da8:	f001 fe21 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007dac:	2200      	movs	r2, #0
 8007dae:	2104      	movs	r1, #4
 8007db0:	4815      	ldr	r0, [pc, #84]	; (8007e08 <checkDemoModCalisma+0x4e4>)
 8007db2:	f001 fe1c 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007db6:	2200      	movs	r2, #0
 8007db8:	2102      	movs	r1, #2
 8007dba:	4813      	ldr	r0, [pc, #76]	; (8007e08 <checkDemoModCalisma+0x4e4>)
 8007dbc:	f001 fe17 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	4810      	ldr	r0, [pc, #64]	; (8007e08 <checkDemoModCalisma+0x4e4>)
 8007dc6:	f001 fe12 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2120      	movs	r1, #32
 8007dce:	480d      	ldr	r0, [pc, #52]	; (8007e04 <checkDemoModCalisma+0x4e0>)
 8007dd0:	f001 fe0d 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2110      	movs	r1, #16
 8007dd8:	480a      	ldr	r0, [pc, #40]	; (8007e04 <checkDemoModCalisma+0x4e0>)
 8007dda:	f001 fe08 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007dde:	2200      	movs	r2, #0
 8007de0:	2180      	movs	r1, #128	; 0x80
 8007de2:	480b      	ldr	r0, [pc, #44]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007de4:	f001 fe03 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007de8:	2200      	movs	r2, #0
 8007dea:	2140      	movs	r1, #64	; 0x40
 8007dec:	4808      	ldr	r0, [pc, #32]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007dee:	f001 fdfe 	bl	80099ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007df2:	2200      	movs	r2, #0
 8007df4:	2120      	movs	r1, #32
 8007df6:	4806      	ldr	r0, [pc, #24]	; (8007e10 <checkDemoModCalisma+0x4ec>)
 8007df8:	f001 fdf9 	bl	80099ee <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007dfc:	e7ff      	b.n	8007dfe <checkDemoModCalisma+0x4da>
 8007dfe:	bf00      	nop
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40011000 	.word	0x40011000
 8007e08:	40010c00 	.word	0x40010c00
 8007e0c:	20000bea 	.word	0x20000bea
 8007e10:	40010800 	.word	0x40010800
 8007e14:	20000b1c 	.word	0x20000b1c
 8007e18:	20000b2c 	.word	0x20000b2c
 8007e1c:	20000be9 	.word	0x20000be9
 8007e20:	20000bcf 	.word	0x20000bcf
 8007e24:	20000b8e 	.word	0x20000b8e
 8007e28:	20000b8f 	.word	0x20000b8f
 8007e2c:	2000095d 	.word	0x2000095d
 8007e30:	2000095e 	.word	0x2000095e
 8007e34:	20000b90 	.word	0x20000b90
 8007e38:	20000ad4 	.word	0x20000ad4
 8007e3c:	20000bbd 	.word	0x20000bbd
 8007e40:	20000bae 	.word	0x20000bae
 8007e44:	0800e1b4 	.word	0x0800e1b4
 8007e48:	0800e1c0 	.word	0x0800e1c0
 8007e4c:	20000b14 	.word	0x20000b14
 8007e50:	20000bc5 	.word	0x20000bc5
 8007e54:	20000baf 	.word	0x20000baf

08007e58 <mergeData>:

char* mergeData() {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b09e      	sub	sp, #120	; 0x78
 8007e5c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007e5e:	2300      	movs	r3, #0
 8007e60:	643b      	str	r3, [r7, #64]	; 0x40
 8007e62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e66:	2229      	movs	r2, #41	; 0x29
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f004 feec 	bl	800cc48 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007e70:	4b6a      	ldr	r3, [pc, #424]	; (800801c <mergeData+0x1c4>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	713b      	strb	r3, [r7, #4]
 8007e76:	4b6a      	ldr	r3, [pc, #424]	; (8008020 <mergeData+0x1c8>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	717b      	strb	r3, [r7, #5]
 8007e7c:	4b69      	ldr	r3, [pc, #420]	; (8008024 <mergeData+0x1cc>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	71bb      	strb	r3, [r7, #6]
 8007e82:	4b69      	ldr	r3, [pc, #420]	; (8008028 <mergeData+0x1d0>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]
 8007e88:	4b68      	ldr	r3, [pc, #416]	; (800802c <mergeData+0x1d4>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	723b      	strb	r3, [r7, #8]
 8007e8e:	4b68      	ldr	r3, [pc, #416]	; (8008030 <mergeData+0x1d8>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	727b      	strb	r3, [r7, #9]
 8007e94:	4b67      	ldr	r3, [pc, #412]	; (8008034 <mergeData+0x1dc>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	72bb      	strb	r3, [r7, #10]
 8007e9a:	4b67      	ldr	r3, [pc, #412]	; (8008038 <mergeData+0x1e0>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	72fb      	strb	r3, [r7, #11]
 8007ea0:	4b66      	ldr	r3, [pc, #408]	; (800803c <mergeData+0x1e4>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	733b      	strb	r3, [r7, #12]
 8007ea6:	4b66      	ldr	r3, [pc, #408]	; (8008040 <mergeData+0x1e8>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	737b      	strb	r3, [r7, #13]
 8007eac:	4b65      	ldr	r3, [pc, #404]	; (8008044 <mergeData+0x1ec>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	73bb      	strb	r3, [r7, #14]
 8007eb2:	4b65      	ldr	r3, [pc, #404]	; (8008048 <mergeData+0x1f0>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	73fb      	strb	r3, [r7, #15]
 8007eb8:	4b64      	ldr	r3, [pc, #400]	; (800804c <mergeData+0x1f4>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	743b      	strb	r3, [r7, #16]
 8007ebe:	4b64      	ldr	r3, [pc, #400]	; (8008050 <mergeData+0x1f8>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	747b      	strb	r3, [r7, #17]
 8007ec4:	4b63      	ldr	r3, [pc, #396]	; (8008054 <mergeData+0x1fc>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	74bb      	strb	r3, [r7, #18]
 8007eca:	4b63      	ldr	r3, [pc, #396]	; (8008058 <mergeData+0x200>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	74fb      	strb	r3, [r7, #19]
 8007ed0:	4b62      	ldr	r3, [pc, #392]	; (800805c <mergeData+0x204>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	753b      	strb	r3, [r7, #20]
 8007ed6:	4b62      	ldr	r3, [pc, #392]	; (8008060 <mergeData+0x208>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	757b      	strb	r3, [r7, #21]
 8007edc:	4b61      	ldr	r3, [pc, #388]	; (8008064 <mergeData+0x20c>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	75bb      	strb	r3, [r7, #22]
 8007ee2:	4b61      	ldr	r3, [pc, #388]	; (8008068 <mergeData+0x210>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	75fb      	strb	r3, [r7, #23]
 8007ee8:	4b60      	ldr	r3, [pc, #384]	; (800806c <mergeData+0x214>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	763b      	strb	r3, [r7, #24]
 8007eee:	4b60      	ldr	r3, [pc, #384]	; (8008070 <mergeData+0x218>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	767b      	strb	r3, [r7, #25]
 8007ef4:	4b5f      	ldr	r3, [pc, #380]	; (8008074 <mergeData+0x21c>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	76bb      	strb	r3, [r7, #26]
 8007efa:	4b5f      	ldr	r3, [pc, #380]	; (8008078 <mergeData+0x220>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	76fb      	strb	r3, [r7, #27]
 8007f00:	4b5e      	ldr	r3, [pc, #376]	; (800807c <mergeData+0x224>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	773b      	strb	r3, [r7, #28]
 8007f06:	4b5e      	ldr	r3, [pc, #376]	; (8008080 <mergeData+0x228>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	777b      	strb	r3, [r7, #29]
 8007f0c:	4b5d      	ldr	r3, [pc, #372]	; (8008084 <mergeData+0x22c>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	77bb      	strb	r3, [r7, #30]
 8007f12:	4b5d      	ldr	r3, [pc, #372]	; (8008088 <mergeData+0x230>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	77fb      	strb	r3, [r7, #31]
 8007f18:	4b5c      	ldr	r3, [pc, #368]	; (800808c <mergeData+0x234>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f887 3020 	strb.w	r3, [r7, #32]
 8007f20:	4b5b      	ldr	r3, [pc, #364]	; (8008090 <mergeData+0x238>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007f28:	4b5a      	ldr	r3, [pc, #360]	; (8008094 <mergeData+0x23c>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f30:	4b59      	ldr	r3, [pc, #356]	; (8008098 <mergeData+0x240>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f38:	4b58      	ldr	r3, [pc, #352]	; (800809c <mergeData+0x244>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8007f40:	4b57      	ldr	r3, [pc, #348]	; (80080a0 <mergeData+0x248>)
 8007f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8007f46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 8007f4a:	4b55      	ldr	r3, [pc, #340]	; (80080a0 <mergeData+0x248>)
 8007f4c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8007f54:	4b52      	ldr	r3, [pc, #328]	; (80080a0 <mergeData+0x248>)
 8007f56:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 8007f5e:	4b50      	ldr	r3, [pc, #320]	; (80080a0 <mergeData+0x248>)
 8007f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007f64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8007f68:	4b4d      	ldr	r3, [pc, #308]	; (80080a0 <mergeData+0x248>)
 8007f6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007f6e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8007f72:	4b4b      	ldr	r3, [pc, #300]	; (80080a0 <mergeData+0x248>)
 8007f74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8007f7c:	4b48      	ldr	r3, [pc, #288]	; (80080a0 <mergeData+0x248>)
 8007f7e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8007f86:	4b46      	ldr	r3, [pc, #280]	; (80080a0 <mergeData+0x248>)
 8007f88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007f8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8007f90:	4b43      	ldr	r3, [pc, #268]	; (80080a0 <mergeData+0x248>)
 8007f92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007f96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 8007f9a:	4b41      	ldr	r3, [pc, #260]	; (80080a0 <mergeData+0x248>)
 8007f9c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007fa0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8007fa4:	4b3e      	ldr	r3, [pc, #248]	; (80080a0 <mergeData+0x248>)
 8007fa6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007fae:	4b3d      	ldr	r3, [pc, #244]	; (80080a4 <mergeData+0x24c>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	677b      	str	r3, [r7, #116]	; 0x74
 8007fba:	e015      	b.n	8007fe8 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8007fbc:	1d3a      	adds	r2, r7, #4
 8007fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc0:	4413      	add	r3, r2
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fca:	4937      	ldr	r1, [pc, #220]	; (80080a8 <mergeData+0x250>)
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f004 fe1b 	bl	800cc08 <siprintf>
	    strcat(combinedString, temp);
 8007fd2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007fd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f004 fe3b 	bl	800cc58 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	677b      	str	r3, [r7, #116]	; 0x74
 8007fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fea:	2b2c      	cmp	r3, #44	; 0x2c
 8007fec:	d9e6      	bls.n	8007fbc <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007fee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 f916 	bl	8000224 <strlen>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f004 fd0d 	bl	800ca1c <malloc>
 8008002:	4603      	mov	r3, r0
 8008004:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8008006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800800a:	4619      	mov	r1, r3
 800800c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800800e:	f004 fe6f 	bl	800ccf0 <strcpy>
	return result;
 8008012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008014:	4618      	mov	r0, r3
 8008016:	3778      	adds	r7, #120	; 0x78
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000ba0 	.word	0x20000ba0
 8008020:	20000b92 	.word	0x20000b92
 8008024:	20000b95 	.word	0x20000b95
 8008028:	20000b96 	.word	0x20000b96
 800802c:	20000b97 	.word	0x20000b97
 8008030:	20000b9e 	.word	0x20000b9e
 8008034:	20000b98 	.word	0x20000b98
 8008038:	20000b99 	.word	0x20000b99
 800803c:	20000b9d 	.word	0x20000b9d
 8008040:	20000b9a 	.word	0x20000b9a
 8008044:	20000baa 	.word	0x20000baa
 8008048:	20000b9b 	.word	0x20000b9b
 800804c:	20000bab 	.word	0x20000bab
 8008050:	20000b9c 	.word	0x20000b9c
 8008054:	20000bac 	.word	0x20000bac
 8008058:	20000b9f 	.word	0x20000b9f
 800805c:	20000ba1 	.word	0x20000ba1
 8008060:	20000ba2 	.word	0x20000ba2
 8008064:	20000ba3 	.word	0x20000ba3
 8008068:	20000ba4 	.word	0x20000ba4
 800806c:	20000ba5 	.word	0x20000ba5
 8008070:	20000ba6 	.word	0x20000ba6
 8008074:	20000ba7 	.word	0x20000ba7
 8008078:	20000ba8 	.word	0x20000ba8
 800807c:	20000ba9 	.word	0x20000ba9
 8008080:	20000bad 	.word	0x20000bad
 8008084:	20000baf 	.word	0x20000baf
 8008088:	20000b8e 	.word	0x20000b8e
 800808c:	20000b8f 	.word	0x20000b8f
 8008090:	2000095d 	.word	0x2000095d
 8008094:	2000095e 	.word	0x2000095e
 8008098:	20000b90 	.word	0x20000b90
 800809c:	20000bb2 	.word	0x20000bb2
 80080a0:	20000ad4 	.word	0x20000ad4
 80080a4:	20000940 	.word	0x20000940
 80080a8:	0800e1d4 	.word	0x0800e1d4

080080ac <mainLoop>:

void mainLoop() {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80080b2:	f7fd fffb 	bl	80060ac <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80080b6:	2101      	movs	r1, #1
 80080b8:	48ac      	ldr	r0, [pc, #688]	; (800836c <mainLoop+0x2c0>)
 80080ba:	f001 fc81 	bl	80099c0 <HAL_GPIO_ReadPin>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d136      	bne.n	8008132 <mainLoop+0x86>
 80080c4:	2108      	movs	r1, #8
 80080c6:	48aa      	ldr	r0, [pc, #680]	; (8008370 <mainLoop+0x2c4>)
 80080c8:	f001 fc7a 	bl	80099c0 <HAL_GPIO_ReadPin>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d12f      	bne.n	8008132 <mainLoop+0x86>
 80080d2:	2102      	movs	r1, #2
 80080d4:	48a5      	ldr	r0, [pc, #660]	; (800836c <mainLoop+0x2c0>)
 80080d6:	f001 fc73 	bl	80099c0 <HAL_GPIO_ReadPin>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d128      	bne.n	8008132 <mainLoop+0x86>
 80080e0:	2104      	movs	r1, #4
 80080e2:	48a2      	ldr	r0, [pc, #648]	; (800836c <mainLoop+0x2c0>)
 80080e4:	f001 fc6c 	bl	80099c0 <HAL_GPIO_ReadPin>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d121      	bne.n	8008132 <mainLoop+0x86>
 80080ee:	2108      	movs	r1, #8
 80080f0:	489e      	ldr	r0, [pc, #632]	; (800836c <mainLoop+0x2c0>)
 80080f2:	f001 fc65 	bl	80099c0 <HAL_GPIO_ReadPin>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d11a      	bne.n	8008132 <mainLoop+0x86>
 80080fc:	2180      	movs	r1, #128	; 0x80
 80080fe:	489c      	ldr	r0, [pc, #624]	; (8008370 <mainLoop+0x2c4>)
 8008100:	f001 fc5e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8008104:	4603      	mov	r3, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	d113      	bne.n	8008132 <mainLoop+0x86>
 800810a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800810e:	4898      	ldr	r0, [pc, #608]	; (8008370 <mainLoop+0x2c4>)
 8008110:	f001 fc56 	bl	80099c0 <HAL_GPIO_ReadPin>
 8008114:	4603      	mov	r3, r0
 8008116:	2b01      	cmp	r3, #1
 8008118:	d10b      	bne.n	8008132 <mainLoop+0x86>
 800811a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800811e:	4894      	ldr	r0, [pc, #592]	; (8008370 <mainLoop+0x2c4>)
 8008120:	f001 fc4e 	bl	80099c0 <HAL_GPIO_ReadPin>
 8008124:	4603      	mov	r3, r0
 8008126:	2b01      	cmp	r3, #1
 8008128:	d103      	bne.n	8008132 <mainLoop+0x86>
			butonKontrol=0;
 800812a:	4b92      	ldr	r3, [pc, #584]	; (8008374 <mainLoop+0x2c8>)
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	e003      	b.n	800813a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8008132:	4b91      	ldr	r3, [pc, #580]	; (8008378 <mainLoop+0x2cc>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a91      	ldr	r2, [pc, #580]	; (800837c <mainLoop+0x2d0>)
 8008138:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800813a:	4b91      	ldr	r3, [pc, #580]	; (8008380 <mainLoop+0x2d4>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d039      	beq.n	80081b6 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008142:	bf00      	nop
 8008144:	488f      	ldr	r0, [pc, #572]	; (8008384 <mainLoop+0x2d8>)
 8008146:	f002 fa64 	bl	800a612 <HAL_I2C_GetError>
 800814a:	4603      	mov	r3, r0
 800814c:	2b04      	cmp	r3, #4
 800814e:	d0f9      	beq.n	8008144 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008150:	bf00      	nop
 8008152:	488c      	ldr	r0, [pc, #560]	; (8008384 <mainLoop+0x2d8>)
 8008154:	f002 fa50 	bl	800a5f8 <HAL_I2C_GetState>
 8008158:	4603      	mov	r3, r0
 800815a:	2b20      	cmp	r3, #32
 800815c:	d1f9      	bne.n	8008152 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 800815e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008162:	9302      	str	r3, [sp, #8]
 8008164:	233f      	movs	r3, #63	; 0x3f
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	4b87      	ldr	r3, [pc, #540]	; (8008388 <mainLoop+0x2dc>)
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	233f      	movs	r3, #63	; 0x3f
 800816e:	2200      	movs	r2, #0
 8008170:	21a0      	movs	r1, #160	; 0xa0
 8008172:	4884      	ldr	r0, [pc, #528]	; (8008384 <mainLoop+0x2d8>)
 8008174:	f001 fede 	bl	8009f34 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8008178:	2005      	movs	r0, #5
 800817a:	f000 fe51 	bl	8008e20 <HAL_Delay>

		  hafizaYaz=0;
 800817e:	4b80      	ldr	r3, [pc, #512]	; (8008380 <mainLoop+0x2d4>)
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008184:	4b81      	ldr	r3, [pc, #516]	; (800838c <mainLoop+0x2e0>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d105      	bne.n	8008198 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 800818c:	4a80      	ldr	r2, [pc, #512]	; (8008390 <mainLoop+0x2e4>)
 800818e:	2101      	movs	r1, #1
 8008190:	2002      	movs	r0, #2
 8008192:	f7f8 fb11 	bl	80007b8 <lcd_print>
 8008196:	e008      	b.n	80081aa <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008198:	4b7c      	ldr	r3, [pc, #496]	; (800838c <mainLoop+0x2e0>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d104      	bne.n	80081aa <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 80081a0:	4a7c      	ldr	r2, [pc, #496]	; (8008394 <mainLoop+0x2e8>)
 80081a2:	2101      	movs	r1, #1
 80081a4:	2002      	movs	r0, #2
 80081a6:	f7f8 fb07 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 80081aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081ae:	f000 fe37 	bl	8008e20 <HAL_Delay>
		  lcd_clear();
 80081b2:	f7f8 fb2d 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80081b6:	4b78      	ldr	r3, [pc, #480]	; (8008398 <mainLoop+0x2ec>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	f083 0301 	eor.w	r3, r3, #1
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d06e      	beq.n	80082a2 <mainLoop+0x1f6>
 80081c4:	486f      	ldr	r0, [pc, #444]	; (8008384 <mainLoop+0x2d8>)
 80081c6:	f002 fa17 	bl	800a5f8 <HAL_I2C_GetState>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b20      	cmp	r3, #32
 80081ce:	d168      	bne.n	80082a2 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 80081d0:	4b72      	ldr	r3, [pc, #456]	; (800839c <mainLoop+0x2f0>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	f083 0301 	eor.w	r3, r3, #1
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d044      	beq.n	8008268 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 80081de:	4a70      	ldr	r2, [pc, #448]	; (80083a0 <mainLoop+0x2f4>)
 80081e0:	2101      	movs	r1, #1
 80081e2:	2001      	movs	r0, #1
 80081e4:	f7f8 fae8 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 80081e8:	4b68      	ldr	r3, [pc, #416]	; (800838c <mainLoop+0x2e0>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d105      	bne.n	80081fc <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 80081f0:	4a6c      	ldr	r2, [pc, #432]	; (80083a4 <mainLoop+0x2f8>)
 80081f2:	2101      	movs	r1, #1
 80081f4:	2002      	movs	r0, #2
 80081f6:	f7f8 fadf 	bl	80007b8 <lcd_print>
 80081fa:	e008      	b.n	800820e <mainLoop+0x162>
			  } else if(dilSecim==1) {
 80081fc:	4b63      	ldr	r3, [pc, #396]	; (800838c <mainLoop+0x2e0>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d104      	bne.n	800820e <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8008204:	4a68      	ldr	r2, [pc, #416]	; (80083a8 <mainLoop+0x2fc>)
 8008206:	2101      	movs	r1, #1
 8008208:	2002      	movs	r0, #2
 800820a:	f7f8 fad5 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 800820e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008212:	f000 fe05 	bl	8008e20 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008216:	bf00      	nop
 8008218:	485a      	ldr	r0, [pc, #360]	; (8008384 <mainLoop+0x2d8>)
 800821a:	f002 f9fa 	bl	800a612 <HAL_I2C_GetError>
 800821e:	4603      	mov	r3, r0
 8008220:	2b04      	cmp	r3, #4
 8008222:	d0f9      	beq.n	8008218 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008224:	e003      	b.n	800822e <mainLoop+0x182>
				  HAL_Delay(1000);
 8008226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800822a:	f000 fdf9 	bl	8008e20 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800822e:	4855      	ldr	r0, [pc, #340]	; (8008384 <mainLoop+0x2d8>)
 8008230:	f002 f9e2 	bl	800a5f8 <HAL_I2C_GetState>
 8008234:	4603      	mov	r3, r0
 8008236:	2b20      	cmp	r3, #32
 8008238:	d1f5      	bne.n	8008226 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 800823a:	4b54      	ldr	r3, [pc, #336]	; (800838c <mainLoop+0x2e0>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d105      	bne.n	800824e <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 8008242:	4a5a      	ldr	r2, [pc, #360]	; (80083ac <mainLoop+0x300>)
 8008244:	2101      	movs	r1, #1
 8008246:	2002      	movs	r0, #2
 8008248:	f7f8 fab6 	bl	80007b8 <lcd_print>
 800824c:	e008      	b.n	8008260 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 800824e:	4b4f      	ldr	r3, [pc, #316]	; (800838c <mainLoop+0x2e0>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d104      	bne.n	8008260 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8008256:	4a56      	ldr	r2, [pc, #344]	; (80083b0 <mainLoop+0x304>)
 8008258:	2101      	movs	r1, #1
 800825a:	2002      	movs	r0, #2
 800825c:	f7f8 faac 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 8008260:	4b4e      	ldr	r3, [pc, #312]	; (800839c <mainLoop+0x2f0>)
 8008262:	2201      	movs	r2, #1
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e014      	b.n	8008292 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8008268:	4b48      	ldr	r3, [pc, #288]	; (800838c <mainLoop+0x2e0>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d105      	bne.n	800827c <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8008270:	4a50      	ldr	r2, [pc, #320]	; (80083b4 <mainLoop+0x308>)
 8008272:	2101      	movs	r1, #1
 8008274:	2002      	movs	r0, #2
 8008276:	f7f8 fa9f 	bl	80007b8 <lcd_print>
 800827a:	e008      	b.n	800828e <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 800827c:	4b43      	ldr	r3, [pc, #268]	; (800838c <mainLoop+0x2e0>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d104      	bne.n	800828e <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8008284:	4a4c      	ldr	r2, [pc, #304]	; (80083b8 <mainLoop+0x30c>)
 8008286:	2101      	movs	r1, #1
 8008288:	2002      	movs	r0, #2
 800828a:	f7f8 fa95 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 800828e:	f7f8 fabf 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 8008292:	f7f8 fabd 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 8008296:	2001      	movs	r0, #1
 8008298:	f7fd fac6 	bl	8005828 <eepromKontrol>
		  hafizaOku=1;
 800829c:	4b3e      	ldr	r3, [pc, #248]	; (8008398 <mainLoop+0x2ec>)
 800829e:	2201      	movs	r2, #1
 80082a0:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80082a2:	4b46      	ldr	r3, [pc, #280]	; (80083bc <mainLoop+0x310>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d11c      	bne.n	80082e4 <mainLoop+0x238>
 80082aa:	4b45      	ldr	r3, [pc, #276]	; (80083c0 <mainLoop+0x314>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	f083 0301 	eor.w	r3, r3, #1
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d015      	beq.n	80082e4 <mainLoop+0x238>
 80082b8:	4b42      	ldr	r3, [pc, #264]	; (80083c4 <mainLoop+0x318>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d111      	bne.n	80082e4 <mainLoop+0x238>
			lcd_clear();
 80082c0:	f7f8 faa6 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 80082c4:	200a      	movs	r0, #10
 80082c6:	f000 fdab 	bl	8008e20 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80082ca:	4a3f      	ldr	r2, [pc, #252]	; (80083c8 <mainLoop+0x31c>)
 80082cc:	2101      	movs	r1, #1
 80082ce:	2001      	movs	r0, #1
 80082d0:	f7f8 fa72 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80082d4:	4a3d      	ldr	r2, [pc, #244]	; (80083cc <mainLoop+0x320>)
 80082d6:	2101      	movs	r1, #1
 80082d8:	2002      	movs	r0, #2
 80082da:	f7f8 fa6d 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 80082de:	4b38      	ldr	r3, [pc, #224]	; (80083c0 <mainLoop+0x314>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80082e4:	4b35      	ldr	r3, [pc, #212]	; (80083bc <mainLoop+0x310>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d112      	bne.n	8008312 <mainLoop+0x266>
 80082ec:	2102      	movs	r1, #2
 80082ee:	481f      	ldr	r0, [pc, #124]	; (800836c <mainLoop+0x2c0>)
 80082f0:	f001 fb66 	bl	80099c0 <HAL_GPIO_ReadPin>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d10b      	bne.n	8008312 <mainLoop+0x266>
 80082fa:	2104      	movs	r1, #4
 80082fc:	481b      	ldr	r0, [pc, #108]	; (800836c <mainLoop+0x2c0>)
 80082fe:	f001 fb5f 	bl	80099c0 <HAL_GPIO_ReadPin>
 8008302:	4603      	mov	r3, r0
 8008304:	2b01      	cmp	r3, #1
 8008306:	d104      	bne.n	8008312 <mainLoop+0x266>
			menuGiris=1;
 8008308:	4b2c      	ldr	r3, [pc, #176]	; (80083bc <mainLoop+0x310>)
 800830a:	2201      	movs	r2, #1
 800830c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800830e:	f7f8 fa7f 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 8008312:	4b2a      	ldr	r3, [pc, #168]	; (80083bc <mainLoop+0x310>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <mainLoop+0x272>
			menu();
 800831a:	f7f9 f85f 	bl	80013dc <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800831e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008322:	4813      	ldr	r0, [pc, #76]	; (8008370 <mainLoop+0x2c4>)
 8008324:	f001 fb7b 	bl	8009a1e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8008328:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800832c:	4828      	ldr	r0, [pc, #160]	; (80083d0 <mainLoop+0x324>)
 800832e:	f001 fb47 	bl	80099c0 <HAL_GPIO_ReadPin>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <mainLoop+0x2a2>
 8008338:	4b26      	ldr	r3, [pc, #152]	; (80083d4 <mainLoop+0x328>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f083 0301 	eor.w	r3, r3, #1
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <mainLoop+0x2a2>
			stopVar=1;
 8008346:	4b24      	ldr	r3, [pc, #144]	; (80083d8 <mainLoop+0x32c>)
 8008348:	2201      	movs	r2, #1
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	e002      	b.n	8008354 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 800834e:	4b22      	ldr	r3, [pc, #136]	; (80083d8 <mainLoop+0x32c>)
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008354:	f7fd feca 	bl	80060ec <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8008358:	f7fd fefc 	bl	8006154 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 800835c:	f7fd ff40 	bl	80061e0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8008360:	f7fd ff90 	bl	8006284 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8008364:	f7ff fade 	bl	8007924 <checkDemoModCalisma>
		checkLCDBacklight();
 8008368:	e6a3      	b.n	80080b2 <mainLoop+0x6>
 800836a:	bf00      	nop
 800836c:	40010800 	.word	0x40010800
 8008370:	40011000 	.word	0x40011000
 8008374:	20000bc0 	.word	0x20000bc0
 8008378:	20000b1c 	.word	0x20000b1c
 800837c:	20000b38 	.word	0x20000b38
 8008380:	20000bbd 	.word	0x20000bbd
 8008384:	20000d50 	.word	0x20000d50
 8008388:	20000ad4 	.word	0x20000ad4
 800838c:	20000bb2 	.word	0x20000bb2
 8008390:	0800e1d8 	.word	0x0800e1d8
 8008394:	0800e1ec 	.word	0x0800e1ec
 8008398:	20000bbe 	.word	0x20000bbe
 800839c:	20000bbf 	.word	0x20000bbf
 80083a0:	0800e200 	.word	0x0800e200
 80083a4:	0800e214 	.word	0x0800e214
 80083a8:	0800e228 	.word	0x0800e228
 80083ac:	0800e23c 	.word	0x0800e23c
 80083b0:	0800e250 	.word	0x0800e250
 80083b4:	0800e264 	.word	0x0800e264
 80083b8:	0800e278 	.word	0x0800e278
 80083bc:	20000bae 	.word	0x20000bae
 80083c0:	20000bc5 	.word	0x20000bc5
 80083c4:	20000baf 	.word	0x20000baf
 80083c8:	0800e13c 	.word	0x0800e13c
 80083cc:	0800e150 	.word	0x0800e150
 80083d0:	40010c00 	.word	0x40010c00
 80083d4:	20000be6 	.word	0x20000be6
 80083d8:	20000be3 	.word	0x20000be3

080083dc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80083e4:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3301      	adds	r3, #1
 80083ea:	4a03      	ldr	r2, [pc, #12]	; (80083f8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80083ec:	6013      	str	r3, [r2, #0]
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr
 80083f8:	20000b1c 	.word	0x20000b1c

080083fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008400:	f000 fcac 	bl	8008d5c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008408:	f000 fd0a 	bl	8008e20 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800840c:	f000 f8dc 	bl	80085c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008410:	f000 f9fe 	bl	8008810 <MX_GPIO_Init>
  MX_CAN_Init();
 8008414:	f000 f91e 	bl	8008654 <MX_CAN_Init>
  MX_I2C1_Init();
 8008418:	f000 f950 	bl	80086bc <MX_I2C1_Init>
  MX_TIM1_Init();
 800841c:	f000 f97c 	bl	8008718 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008420:	f000 f9cc 	bl	80087bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008424:	2201      	movs	r2, #1
 8008426:	2140      	movs	r1, #64	; 0x40
 8008428:	4857      	ldr	r0, [pc, #348]	; (8008588 <main+0x18c>)
 800842a:	f001 fae0 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800842e:	2201      	movs	r2, #1
 8008430:	2180      	movs	r1, #128	; 0x80
 8008432:	4855      	ldr	r0, [pc, #340]	; (8008588 <main+0x18c>)
 8008434:	f001 fadb 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008438:	200a      	movs	r0, #10
 800843a:	f000 fcf1 	bl	8008e20 <HAL_Delay>
  lcd_init();
 800843e:	f7f8 f989 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 8008442:	200a      	movs	r0, #10
 8008444:	f000 fcec 	bl	8008e20 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008448:	4850      	ldr	r0, [pc, #320]	; (800858c <main+0x190>)
 800844a:	f003 f983 	bl	800b754 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800844e:	bf00      	nop
 8008450:	484f      	ldr	r0, [pc, #316]	; (8008590 <main+0x194>)
 8008452:	f002 f8de 	bl	800a612 <HAL_I2C_GetError>
 8008456:	4603      	mov	r3, r0
 8008458:	2b04      	cmp	r3, #4
 800845a:	d0f9      	beq.n	8008450 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800845c:	bf00      	nop
 800845e:	484c      	ldr	r0, [pc, #304]	; (8008590 <main+0x194>)
 8008460:	f002 f8ca 	bl	800a5f8 <HAL_I2C_GetState>
 8008464:	4603      	mov	r3, r0
 8008466:	2b20      	cmp	r3, #32
 8008468:	d1f9      	bne.n	800845e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800846a:	2200      	movs	r2, #0
 800846c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008470:	4845      	ldr	r0, [pc, #276]	; (8008588 <main+0x18c>)
 8008472:	f001 fabc 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008476:	2200      	movs	r2, #0
 8008478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800847c:	4842      	ldr	r0, [pc, #264]	; (8008588 <main+0x18c>)
 800847e:	f001 fab6 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008482:	2200      	movs	r2, #0
 8008484:	2104      	movs	r1, #4
 8008486:	4840      	ldr	r0, [pc, #256]	; (8008588 <main+0x18c>)
 8008488:	f001 fab1 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800848c:	2200      	movs	r2, #0
 800848e:	2102      	movs	r1, #2
 8008490:	483d      	ldr	r0, [pc, #244]	; (8008588 <main+0x18c>)
 8008492:	f001 faac 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008496:	2200      	movs	r2, #0
 8008498:	2101      	movs	r1, #1
 800849a:	483b      	ldr	r0, [pc, #236]	; (8008588 <main+0x18c>)
 800849c:	f001 faa7 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2120      	movs	r1, #32
 80084a4:	483b      	ldr	r0, [pc, #236]	; (8008594 <main+0x198>)
 80084a6:	f001 faa2 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80084aa:	2200      	movs	r2, #0
 80084ac:	2110      	movs	r1, #16
 80084ae:	4839      	ldr	r0, [pc, #228]	; (8008594 <main+0x198>)
 80084b0:	f001 fa9d 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80084b4:	2200      	movs	r2, #0
 80084b6:	2180      	movs	r1, #128	; 0x80
 80084b8:	4837      	ldr	r0, [pc, #220]	; (8008598 <main+0x19c>)
 80084ba:	f001 fa98 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80084be:	2200      	movs	r2, #0
 80084c0:	2140      	movs	r1, #64	; 0x40
 80084c2:	4835      	ldr	r0, [pc, #212]	; (8008598 <main+0x19c>)
 80084c4:	f001 fa93 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80084c8:	2200      	movs	r2, #0
 80084ca:	2120      	movs	r1, #32
 80084cc:	4832      	ldr	r0, [pc, #200]	; (8008598 <main+0x19c>)
 80084ce:	f001 fa8e 	bl	80099ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80084d2:	2200      	movs	r2, #0
 80084d4:	2110      	movs	r1, #16
 80084d6:	4830      	ldr	r0, [pc, #192]	; (8008598 <main+0x19c>)
 80084d8:	f001 fa89 	bl	80099ee <HAL_GPIO_WritePin>

  i2cTest();
 80084dc:	f7fd fd38 	bl	8005f50 <i2cTest>
  HAL_Delay(100);
 80084e0:	2064      	movs	r0, #100	; 0x64
 80084e2:	f000 fc9d 	bl	8008e20 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80084e6:	4a2d      	ldr	r2, [pc, #180]	; (800859c <main+0x1a0>)
 80084e8:	2101      	movs	r1, #1
 80084ea:	2001      	movs	r0, #1
 80084ec:	f7f8 f964 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80084f0:	4a2b      	ldr	r2, [pc, #172]	; (80085a0 <main+0x1a4>)
 80084f2:	2101      	movs	r1, #1
 80084f4:	2002      	movs	r0, #2
 80084f6:	f7f8 f95f 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 80084fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084fe:	f000 fc8f 	bl	8008e20 <HAL_Delay>
  lcd_clear();
 8008502:	f7f8 f985 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8008506:	2000      	movs	r0, #0
 8008508:	f7fd f98e 	bl	8005828 <eepromKontrol>

  if(strlen(machineID) == 0) {
 800850c:	4b25      	ldr	r3, [pc, #148]	; (80085a4 <main+0x1a8>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <main+0x11c>
	  takeMachineID();
 8008514:	f7f8 fb82 	bl	8000c1c <takeMachineID>
  }

  lcd_clear();
 8008518:	f7f8 f97a 	bl	8000810 <lcd_clear>
  HAL_Delay(500);
 800851c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008520:	f000 fc7e 	bl	8008e20 <HAL_Delay>

  if(iotMode == 1) {
 8008524:	4b20      	ldr	r3, [pc, #128]	; (80085a8 <main+0x1ac>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d124      	bne.n	8008576 <main+0x17a>
	  if(strlen(wifiSSID) == 0) {
 800852c:	4b1f      	ldr	r3, [pc, #124]	; (80085ac <main+0x1b0>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <main+0x13c>
	  	  takeWifiSSID();
 8008534:	f7f8 fc7c 	bl	8000e30 <takeWifiSSID>
	  }

	  lcd_clear();
 8008538:	f7f8 f96a 	bl	8000810 <lcd_clear>
	  HAL_Delay(500);
 800853c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008540:	f000 fc6e 	bl	8008e20 <HAL_Delay>

	  if(strlen(wifiPass) == 0) {
 8008544:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <main+0x1b4>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <main+0x154>
		  takeWifiPass();
 800854c:	f7f8 fddc 	bl	8001108 <takeWifiPass>
	  }

	  lcd_print(1, 1, "Wifi Ayarlaniyor");
 8008550:	4a18      	ldr	r2, [pc, #96]	; (80085b4 <main+0x1b8>)
 8008552:	2101      	movs	r1, #1
 8008554:	2001      	movs	r0, #1
 8008556:	f7f8 f92f 	bl	80007b8 <lcd_print>
	  lcd_print(2, 1, "Lutfen Bekleyin ");
 800855a:	4a17      	ldr	r2, [pc, #92]	; (80085b8 <main+0x1bc>)
 800855c:	2101      	movs	r1, #1
 800855e:	2002      	movs	r0, #2
 8008560:	f7f8 f92a 	bl	80007b8 <lcd_print>
	  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8008564:	4a12      	ldr	r2, [pc, #72]	; (80085b0 <main+0x1b4>)
 8008566:	4911      	ldr	r1, [pc, #68]	; (80085ac <main+0x1b0>)
 8008568:	4814      	ldr	r0, [pc, #80]	; (80085bc <main+0x1c0>)
 800856a:	f7f7 fe63 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(500);
 800856e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008572:	f000 fc55 	bl	8008e20 <HAL_Delay>
  }

  lcd_clear();
 8008576:	f7f8 f94b 	bl	8000810 <lcd_clear>

  backLightTimer = millis;
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <main+0x1c4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a11      	ldr	r2, [pc, #68]	; (80085c4 <main+0x1c8>)
 8008580:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008582:	f7ff fd93 	bl	80080ac <mainLoop>
 8008586:	e7fc      	b.n	8008582 <main+0x186>
 8008588:	40010c00 	.word	0x40010c00
 800858c:	20000da4 	.word	0x20000da4
 8008590:	20000d50 	.word	0x20000d50
 8008594:	40011000 	.word	0x40011000
 8008598:	40010800 	.word	0x40010800
 800859c:	0800e28c 	.word	0x0800e28c
 80085a0:	0800e2a0 	.word	0x0800e2a0
 80085a4:	20000b3c 	.word	0x20000b3c
 80085a8:	20000bb0 	.word	0x20000bb0
 80085ac:	20000b48 	.word	0x20000b48
 80085b0:	20000b6c 	.word	0x20000b6c
 80085b4:	0800e2b4 	.word	0x0800e2b4
 80085b8:	0800e2c8 	.word	0x0800e2c8
 80085bc:	20000dec 	.word	0x20000dec
 80085c0:	20000b1c 	.word	0x20000b1c
 80085c4:	20000b38 	.word	0x20000b38

080085c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b090      	sub	sp, #64	; 0x40
 80085cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085ce:	f107 0318 	add.w	r3, r7, #24
 80085d2:	2228      	movs	r2, #40	; 0x28
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f004 fb36 	bl	800cc48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085dc:	1d3b      	adds	r3, r7, #4
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	605a      	str	r2, [r3, #4]
 80085e4:	609a      	str	r2, [r3, #8]
 80085e6:	60da      	str	r2, [r3, #12]
 80085e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085ea:	2301      	movs	r3, #1
 80085ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80085f4:	2300      	movs	r3, #0
 80085f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80085f8:	2301      	movs	r3, #1
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085fc:	2302      	movs	r3, #2
 80085fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008606:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800860c:	f107 0318 	add.w	r3, r7, #24
 8008610:	4618      	mov	r0, r3
 8008612:	f002 fc3f 	bl	800ae94 <HAL_RCC_OscConfig>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800861c:	f000 f9a2 	bl	8008964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008620:	230f      	movs	r3, #15
 8008622:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008624:	2302      	movs	r3, #2
 8008626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800862c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008636:	1d3b      	adds	r3, r7, #4
 8008638:	2102      	movs	r1, #2
 800863a:	4618      	mov	r0, r3
 800863c:	f002 feac 	bl	800b398 <HAL_RCC_ClockConfig>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008646:	f000 f98d 	bl	8008964 <Error_Handler>
  }
}
 800864a:	bf00      	nop
 800864c:	3740      	adds	r7, #64	; 0x40
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008658:	4b16      	ldr	r3, [pc, #88]	; (80086b4 <MX_CAN_Init+0x60>)
 800865a:	4a17      	ldr	r2, [pc, #92]	; (80086b8 <MX_CAN_Init+0x64>)
 800865c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800865e:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <MX_CAN_Init+0x60>)
 8008660:	2210      	movs	r2, #16
 8008662:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008664:	4b13      	ldr	r3, [pc, #76]	; (80086b4 <MX_CAN_Init+0x60>)
 8008666:	2200      	movs	r2, #0
 8008668:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800866a:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <MX_CAN_Init+0x60>)
 800866c:	2200      	movs	r2, #0
 800866e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008670:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <MX_CAN_Init+0x60>)
 8008672:	2200      	movs	r2, #0
 8008674:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008676:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <MX_CAN_Init+0x60>)
 8008678:	2200      	movs	r2, #0
 800867a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800867c:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <MX_CAN_Init+0x60>)
 800867e:	2200      	movs	r2, #0
 8008680:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008682:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <MX_CAN_Init+0x60>)
 8008684:	2200      	movs	r2, #0
 8008686:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008688:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <MX_CAN_Init+0x60>)
 800868a:	2200      	movs	r2, #0
 800868c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800868e:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <MX_CAN_Init+0x60>)
 8008690:	2200      	movs	r2, #0
 8008692:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008694:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <MX_CAN_Init+0x60>)
 8008696:	2200      	movs	r2, #0
 8008698:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800869a:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <MX_CAN_Init+0x60>)
 800869c:	2200      	movs	r2, #0
 800869e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80086a0:	4804      	ldr	r0, [pc, #16]	; (80086b4 <MX_CAN_Init+0x60>)
 80086a2:	f000 fbe1 	bl	8008e68 <HAL_CAN_Init>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80086ac:	f000 f95a 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80086b0:	bf00      	nop
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000d28 	.word	0x20000d28
 80086b8:	40006400 	.word	0x40006400

080086bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80086c0:	4b12      	ldr	r3, [pc, #72]	; (800870c <MX_I2C1_Init+0x50>)
 80086c2:	4a13      	ldr	r2, [pc, #76]	; (8008710 <MX_I2C1_Init+0x54>)
 80086c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80086c6:	4b11      	ldr	r3, [pc, #68]	; (800870c <MX_I2C1_Init+0x50>)
 80086c8:	4a12      	ldr	r2, [pc, #72]	; (8008714 <MX_I2C1_Init+0x58>)
 80086ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80086cc:	4b0f      	ldr	r3, [pc, #60]	; (800870c <MX_I2C1_Init+0x50>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80086d2:	4b0e      	ldr	r3, [pc, #56]	; (800870c <MX_I2C1_Init+0x50>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80086d8:	4b0c      	ldr	r3, [pc, #48]	; (800870c <MX_I2C1_Init+0x50>)
 80086da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80086e0:	4b0a      	ldr	r3, [pc, #40]	; (800870c <MX_I2C1_Init+0x50>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80086e6:	4b09      	ldr	r3, [pc, #36]	; (800870c <MX_I2C1_Init+0x50>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80086ec:	4b07      	ldr	r3, [pc, #28]	; (800870c <MX_I2C1_Init+0x50>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80086f2:	4b06      	ldr	r3, [pc, #24]	; (800870c <MX_I2C1_Init+0x50>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80086f8:	4804      	ldr	r0, [pc, #16]	; (800870c <MX_I2C1_Init+0x50>)
 80086fa:	f001 f9a9 	bl	8009a50 <HAL_I2C_Init>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008704:	f000 f92e 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008708:	bf00      	nop
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000d50 	.word	0x20000d50
 8008710:	40005400 	.word	0x40005400
 8008714:	00061a80 	.word	0x00061a80

08008718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	605a      	str	r2, [r3, #4]
 8008728:	609a      	str	r2, [r3, #8]
 800872a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800872c:	463b      	mov	r3, r7
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008734:	4b1f      	ldr	r3, [pc, #124]	; (80087b4 <MX_TIM1_Init+0x9c>)
 8008736:	4a20      	ldr	r2, [pc, #128]	; (80087b8 <MX_TIM1_Init+0xa0>)
 8008738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800873a:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <MX_TIM1_Init+0x9c>)
 800873c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008740:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <MX_TIM1_Init+0x9c>)
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008748:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <MX_TIM1_Init+0x9c>)
 800874a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800874e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008750:	4b18      	ldr	r3, [pc, #96]	; (80087b4 <MX_TIM1_Init+0x9c>)
 8008752:	2200      	movs	r2, #0
 8008754:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008756:	4b17      	ldr	r3, [pc, #92]	; (80087b4 <MX_TIM1_Init+0x9c>)
 8008758:	2200      	movs	r2, #0
 800875a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800875c:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <MX_TIM1_Init+0x9c>)
 800875e:	2200      	movs	r2, #0
 8008760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008762:	4814      	ldr	r0, [pc, #80]	; (80087b4 <MX_TIM1_Init+0x9c>)
 8008764:	f002 ffa6 	bl	800b6b4 <HAL_TIM_Base_Init>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800876e:	f000 f8f9 	bl	8008964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008778:	f107 0308 	add.w	r3, r7, #8
 800877c:	4619      	mov	r1, r3
 800877e:	480d      	ldr	r0, [pc, #52]	; (80087b4 <MX_TIM1_Init+0x9c>)
 8008780:	f003 f950 	bl	800ba24 <HAL_TIM_ConfigClockSource>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800878a:	f000 f8eb 	bl	8008964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800878e:	2300      	movs	r3, #0
 8008790:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008796:	463b      	mov	r3, r7
 8008798:	4619      	mov	r1, r3
 800879a:	4806      	ldr	r0, [pc, #24]	; (80087b4 <MX_TIM1_Init+0x9c>)
 800879c:	f003 fb3e 	bl	800be1c <HAL_TIMEx_MasterConfigSynchronization>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80087a6:	f000 f8dd 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80087aa:	bf00      	nop
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000da4 	.word	0x20000da4
 80087b8:	40012c00 	.word	0x40012c00

080087bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80087c0:	4b11      	ldr	r3, [pc, #68]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087c2:	4a12      	ldr	r2, [pc, #72]	; (800880c <MX_USART1_UART_Init+0x50>)
 80087c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80087c6:	4b10      	ldr	r3, [pc, #64]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80087ce:	4b0e      	ldr	r3, [pc, #56]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80087da:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087dc:	2200      	movs	r2, #0
 80087de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087e2:	220c      	movs	r2, #12
 80087e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087e6:	4b08      	ldr	r3, [pc, #32]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80087ec:	4b06      	ldr	r3, [pc, #24]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80087f2:	4805      	ldr	r0, [pc, #20]	; (8008808 <MX_USART1_UART_Init+0x4c>)
 80087f4:	f003 fb90 	bl	800bf18 <HAL_UART_Init>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80087fe:	f000 f8b1 	bl	8008964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008802:	bf00      	nop
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000dec 	.word	0x20000dec
 800880c:	40013800 	.word	0x40013800

08008810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008816:	f107 0310 	add.w	r3, r7, #16
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	605a      	str	r2, [r3, #4]
 8008820:	609a      	str	r2, [r3, #8]
 8008822:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008824:	4b4b      	ldr	r3, [pc, #300]	; (8008954 <MX_GPIO_Init+0x144>)
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	4a4a      	ldr	r2, [pc, #296]	; (8008954 <MX_GPIO_Init+0x144>)
 800882a:	f043 0310 	orr.w	r3, r3, #16
 800882e:	6193      	str	r3, [r2, #24]
 8008830:	4b48      	ldr	r3, [pc, #288]	; (8008954 <MX_GPIO_Init+0x144>)
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800883c:	4b45      	ldr	r3, [pc, #276]	; (8008954 <MX_GPIO_Init+0x144>)
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	4a44      	ldr	r2, [pc, #272]	; (8008954 <MX_GPIO_Init+0x144>)
 8008842:	f043 0320 	orr.w	r3, r3, #32
 8008846:	6193      	str	r3, [r2, #24]
 8008848:	4b42      	ldr	r3, [pc, #264]	; (8008954 <MX_GPIO_Init+0x144>)
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f003 0320 	and.w	r3, r3, #32
 8008850:	60bb      	str	r3, [r7, #8]
 8008852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008854:	4b3f      	ldr	r3, [pc, #252]	; (8008954 <MX_GPIO_Init+0x144>)
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	4a3e      	ldr	r2, [pc, #248]	; (8008954 <MX_GPIO_Init+0x144>)
 800885a:	f043 0304 	orr.w	r3, r3, #4
 800885e:	6193      	str	r3, [r2, #24]
 8008860:	4b3c      	ldr	r3, [pc, #240]	; (8008954 <MX_GPIO_Init+0x144>)
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800886c:	4b39      	ldr	r3, [pc, #228]	; (8008954 <MX_GPIO_Init+0x144>)
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	4a38      	ldr	r2, [pc, #224]	; (8008954 <MX_GPIO_Init+0x144>)
 8008872:	f043 0308 	orr.w	r3, r3, #8
 8008876:	6193      	str	r3, [r2, #24]
 8008878:	4b36      	ldr	r3, [pc, #216]	; (8008954 <MX_GPIO_Init+0x144>)
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008884:	2200      	movs	r2, #0
 8008886:	21f0      	movs	r1, #240	; 0xf0
 8008888:	4833      	ldr	r0, [pc, #204]	; (8008958 <MX_GPIO_Init+0x148>)
 800888a:	f001 f8b0 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800888e:	2200      	movs	r2, #0
 8008890:	f241 0130 	movw	r1, #4144	; 0x1030
 8008894:	4831      	ldr	r0, [pc, #196]	; (800895c <MX_GPIO_Init+0x14c>)
 8008896:	f001 f8aa 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800889a:	2200      	movs	r2, #0
 800889c:	f640 4107 	movw	r1, #3079	; 0xc07
 80088a0:	482f      	ldr	r0, [pc, #188]	; (8008960 <MX_GPIO_Init+0x150>)
 80088a2:	f001 f8a4 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80088a6:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80088aa:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088ac:	2300      	movs	r3, #0
 80088ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088b4:	f107 0310 	add.w	r3, r7, #16
 80088b8:	4619      	mov	r1, r3
 80088ba:	4828      	ldr	r0, [pc, #160]	; (800895c <MX_GPIO_Init+0x14c>)
 80088bc:	f000 fe20 	bl	8009500 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80088c0:	f248 130f 	movw	r3, #33039	; 0x810f
 80088c4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088c6:	2300      	movs	r3, #0
 80088c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ce:	f107 0310 	add.w	r3, r7, #16
 80088d2:	4619      	mov	r1, r3
 80088d4:	4820      	ldr	r0, [pc, #128]	; (8008958 <MX_GPIO_Init+0x148>)
 80088d6:	f000 fe13 	bl	8009500 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80088da:	23f0      	movs	r3, #240	; 0xf0
 80088dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088de:	2301      	movs	r3, #1
 80088e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e6:	2302      	movs	r3, #2
 80088e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ea:	f107 0310 	add.w	r3, r7, #16
 80088ee:	4619      	mov	r1, r3
 80088f0:	4819      	ldr	r0, [pc, #100]	; (8008958 <MX_GPIO_Init+0x148>)
 80088f2:	f000 fe05 	bl	8009500 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80088f6:	f241 0330 	movw	r3, #4144	; 0x1030
 80088fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088fc:	2301      	movs	r3, #1
 80088fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008900:	2300      	movs	r3, #0
 8008902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008904:	2302      	movs	r3, #2
 8008906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008908:	f107 0310 	add.w	r3, r7, #16
 800890c:	4619      	mov	r1, r3
 800890e:	4813      	ldr	r0, [pc, #76]	; (800895c <MX_GPIO_Init+0x14c>)
 8008910:	f000 fdf6 	bl	8009500 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008914:	f640 4307 	movw	r3, #3079	; 0xc07
 8008918:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800891a:	2301      	movs	r3, #1
 800891c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800891e:	2300      	movs	r3, #0
 8008920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008922:	2302      	movs	r3, #2
 8008924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	4619      	mov	r1, r3
 800892c:	480c      	ldr	r0, [pc, #48]	; (8008960 <MX_GPIO_Init+0x150>)
 800892e:	f000 fde7 	bl	8009500 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008932:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008938:	2300      	movs	r3, #0
 800893a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893c:	2300      	movs	r3, #0
 800893e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008940:	f107 0310 	add.w	r3, r7, #16
 8008944:	4619      	mov	r1, r3
 8008946:	4806      	ldr	r0, [pc, #24]	; (8008960 <MX_GPIO_Init+0x150>)
 8008948:	f000 fdda 	bl	8009500 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800894c:	bf00      	nop
 800894e:	3720      	adds	r7, #32
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	40021000 	.word	0x40021000
 8008958:	40010800 	.word	0x40010800
 800895c:	40011000 	.word	0x40011000
 8008960:	40010c00 	.word	0x40010c00

08008964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008964:	b480      	push	{r7}
 8008966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008968:	bf00      	nop
 800896a:	46bd      	mov	sp, r7
 800896c:	bc80      	pop	{r7}
 800896e:	4770      	bx	lr

08008970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008976:	4b15      	ldr	r3, [pc, #84]	; (80089cc <HAL_MspInit+0x5c>)
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	4a14      	ldr	r2, [pc, #80]	; (80089cc <HAL_MspInit+0x5c>)
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	6193      	str	r3, [r2, #24]
 8008982:	4b12      	ldr	r3, [pc, #72]	; (80089cc <HAL_MspInit+0x5c>)
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	60bb      	str	r3, [r7, #8]
 800898c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800898e:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <HAL_MspInit+0x5c>)
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	4a0e      	ldr	r2, [pc, #56]	; (80089cc <HAL_MspInit+0x5c>)
 8008994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008998:	61d3      	str	r3, [r2, #28]
 800899a:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <HAL_MspInit+0x5c>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089a2:	607b      	str	r3, [r7, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80089a6:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <HAL_MspInit+0x60>)
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	4a04      	ldr	r2, [pc, #16]	; (80089d0 <HAL_MspInit+0x60>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr
 80089cc:	40021000 	.word	0x40021000
 80089d0:	40010000 	.word	0x40010000

080089d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089dc:	f107 0310 	add.w	r3, r7, #16
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	609a      	str	r2, [r3, #8]
 80089e8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1c      	ldr	r2, [pc, #112]	; (8008a60 <HAL_CAN_MspInit+0x8c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d131      	bne.n	8008a58 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80089f4:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <HAL_CAN_MspInit+0x90>)
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	4a1a      	ldr	r2, [pc, #104]	; (8008a64 <HAL_CAN_MspInit+0x90>)
 80089fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80089fe:	61d3      	str	r3, [r2, #28]
 8008a00:	4b18      	ldr	r3, [pc, #96]	; (8008a64 <HAL_CAN_MspInit+0x90>)
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a0c:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <HAL_CAN_MspInit+0x90>)
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	4a14      	ldr	r2, [pc, #80]	; (8008a64 <HAL_CAN_MspInit+0x90>)
 8008a12:	f043 0304 	orr.w	r3, r3, #4
 8008a16:	6193      	str	r3, [r2, #24]
 8008a18:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <HAL_CAN_MspInit+0x90>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	60bb      	str	r3, [r7, #8]
 8008a22:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a32:	f107 0310 	add.w	r3, r7, #16
 8008a36:	4619      	mov	r1, r3
 8008a38:	480b      	ldr	r0, [pc, #44]	; (8008a68 <HAL_CAN_MspInit+0x94>)
 8008a3a:	f000 fd61 	bl	8009500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a44:	2302      	movs	r3, #2
 8008a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a4c:	f107 0310 	add.w	r3, r7, #16
 8008a50:	4619      	mov	r1, r3
 8008a52:	4805      	ldr	r0, [pc, #20]	; (8008a68 <HAL_CAN_MspInit+0x94>)
 8008a54:	f000 fd54 	bl	8009500 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008a58:	bf00      	nop
 8008a5a:	3720      	adds	r7, #32
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	40006400 	.word	0x40006400
 8008a64:	40021000 	.word	0x40021000
 8008a68:	40010800 	.word	0x40010800

08008a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a74:	f107 0310 	add.w	r3, r7, #16
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	609a      	str	r2, [r3, #8]
 8008a80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a15      	ldr	r2, [pc, #84]	; (8008adc <HAL_I2C_MspInit+0x70>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d123      	bne.n	8008ad4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a8c:	4b14      	ldr	r3, [pc, #80]	; (8008ae0 <HAL_I2C_MspInit+0x74>)
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <HAL_I2C_MspInit+0x74>)
 8008a92:	f043 0308 	orr.w	r3, r3, #8
 8008a96:	6193      	str	r3, [r2, #24]
 8008a98:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <HAL_I2C_MspInit+0x74>)
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008aa4:	23c0      	movs	r3, #192	; 0xc0
 8008aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008aa8:	2312      	movs	r3, #18
 8008aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008aac:	2303      	movs	r3, #3
 8008aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ab0:	f107 0310 	add.w	r3, r7, #16
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	480b      	ldr	r0, [pc, #44]	; (8008ae4 <HAL_I2C_MspInit+0x78>)
 8008ab8:	f000 fd22 	bl	8009500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008abc:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <HAL_I2C_MspInit+0x74>)
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	4a07      	ldr	r2, [pc, #28]	; (8008ae0 <HAL_I2C_MspInit+0x74>)
 8008ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ac6:	61d3      	str	r3, [r2, #28]
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <HAL_I2C_MspInit+0x74>)
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ad0:	60bb      	str	r3, [r7, #8]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008ad4:	bf00      	nop
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40005400 	.word	0x40005400
 8008ae0:	40021000 	.word	0x40021000
 8008ae4:	40010c00 	.word	0x40010c00

08008ae8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a0a      	ldr	r2, [pc, #40]	; (8008b20 <HAL_I2C_MspDeInit+0x38>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d10d      	bne.n	8008b16 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008afa:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <HAL_I2C_MspDeInit+0x3c>)
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	4a09      	ldr	r2, [pc, #36]	; (8008b24 <HAL_I2C_MspDeInit+0x3c>)
 8008b00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b04:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008b06:	2140      	movs	r1, #64	; 0x40
 8008b08:	4807      	ldr	r0, [pc, #28]	; (8008b28 <HAL_I2C_MspDeInit+0x40>)
 8008b0a:	f000 fe8d 	bl	8009828 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008b0e:	2180      	movs	r1, #128	; 0x80
 8008b10:	4805      	ldr	r0, [pc, #20]	; (8008b28 <HAL_I2C_MspDeInit+0x40>)
 8008b12:	f000 fe89 	bl	8009828 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	40005400 	.word	0x40005400
 8008b24:	40021000 	.word	0x40021000
 8008b28:	40010c00 	.word	0x40010c00

08008b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a0d      	ldr	r2, [pc, #52]	; (8008b70 <HAL_TIM_Base_MspInit+0x44>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d113      	bne.n	8008b66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008b3e:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <HAL_TIM_Base_MspInit+0x48>)
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	4a0c      	ldr	r2, [pc, #48]	; (8008b74 <HAL_TIM_Base_MspInit+0x48>)
 8008b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b48:	6193      	str	r3, [r2, #24]
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <HAL_TIM_Base_MspInit+0x48>)
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008b56:	2200      	movs	r2, #0
 8008b58:	2100      	movs	r1, #0
 8008b5a:	2019      	movs	r0, #25
 8008b5c:	f000 fb57 	bl	800920e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008b60:	2019      	movs	r0, #25
 8008b62:	f000 fb70 	bl	8009246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	40012c00 	.word	0x40012c00
 8008b74:	40021000 	.word	0x40021000

08008b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	609a      	str	r2, [r3, #8]
 8008b8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a20      	ldr	r2, [pc, #128]	; (8008c14 <HAL_UART_MspInit+0x9c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d139      	bne.n	8008c0c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008b98:	4b1f      	ldr	r3, [pc, #124]	; (8008c18 <HAL_UART_MspInit+0xa0>)
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	4a1e      	ldr	r2, [pc, #120]	; (8008c18 <HAL_UART_MspInit+0xa0>)
 8008b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ba2:	6193      	str	r3, [r2, #24]
 8008ba4:	4b1c      	ldr	r3, [pc, #112]	; (8008c18 <HAL_UART_MspInit+0xa0>)
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bac:	60fb      	str	r3, [r7, #12]
 8008bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bb0:	4b19      	ldr	r3, [pc, #100]	; (8008c18 <HAL_UART_MspInit+0xa0>)
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	4a18      	ldr	r2, [pc, #96]	; (8008c18 <HAL_UART_MspInit+0xa0>)
 8008bb6:	f043 0304 	orr.w	r3, r3, #4
 8008bba:	6193      	str	r3, [r2, #24]
 8008bbc:	4b16      	ldr	r3, [pc, #88]	; (8008c18 <HAL_UART_MspInit+0xa0>)
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	60bb      	str	r3, [r7, #8]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bce:	2302      	movs	r3, #2
 8008bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bd6:	f107 0310 	add.w	r3, r7, #16
 8008bda:	4619      	mov	r1, r3
 8008bdc:	480f      	ldr	r0, [pc, #60]	; (8008c1c <HAL_UART_MspInit+0xa4>)
 8008bde:	f000 fc8f 	bl	8009500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bf0:	f107 0310 	add.w	r3, r7, #16
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4809      	ldr	r0, [pc, #36]	; (8008c1c <HAL_UART_MspInit+0xa4>)
 8008bf8:	f000 fc82 	bl	8009500 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2100      	movs	r1, #0
 8008c00:	2025      	movs	r0, #37	; 0x25
 8008c02:	f000 fb04 	bl	800920e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008c06:	2025      	movs	r0, #37	; 0x25
 8008c08:	f000 fb1d 	bl	8009246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008c0c:	bf00      	nop
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	40013800 	.word	0x40013800
 8008c18:	40021000 	.word	0x40021000
 8008c1c:	40010800 	.word	0x40010800

08008c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008c24:	e7fe      	b.n	8008c24 <NMI_Handler+0x4>

08008c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c26:	b480      	push	{r7}
 8008c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c2a:	e7fe      	b.n	8008c2a <HardFault_Handler+0x4>

08008c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c30:	e7fe      	b.n	8008c30 <MemManage_Handler+0x4>

08008c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c32:	b480      	push	{r7}
 8008c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c36:	e7fe      	b.n	8008c36 <BusFault_Handler+0x4>

08008c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c3c:	e7fe      	b.n	8008c3c <UsageFault_Handler+0x4>

08008c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c42:	bf00      	nop
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr

08008c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c4e:	bf00      	nop
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr

08008c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c56:	b480      	push	{r7}
 8008c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c5a:	bf00      	nop
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc80      	pop	{r7}
 8008c60:	4770      	bx	lr

08008c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c66:	f000 f8bf 	bl	8008de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c6a:	bf00      	nop
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008c74:	4802      	ldr	r0, [pc, #8]	; (8008c80 <TIM1_UP_IRQHandler+0x10>)
 8008c76:	f002 fdcd 	bl	800b814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008c7a:	bf00      	nop
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000da4 	.word	0x20000da4

08008c84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008c88:	4802      	ldr	r0, [pc, #8]	; (8008c94 <USART1_IRQHandler+0x10>)
 8008c8a:	f003 f9cb 	bl	800c024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008c8e:	bf00      	nop
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20000dec 	.word	0x20000dec

08008c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ca0:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <_sbrk+0x5c>)
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <_sbrk+0x60>)
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cac:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <_sbrk+0x64>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008cb4:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <_sbrk+0x64>)
 8008cb6:	4a12      	ldr	r2, [pc, #72]	; (8008d00 <_sbrk+0x68>)
 8008cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008cba:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <_sbrk+0x64>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d207      	bcs.n	8008cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008cc8:	f003 ffe6 	bl	800cc98 <__errno>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	220c      	movs	r2, #12
 8008cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd6:	e009      	b.n	8008cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008cd8:	4b08      	ldr	r3, [pc, #32]	; (8008cfc <_sbrk+0x64>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008cde:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <_sbrk+0x64>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4a05      	ldr	r2, [pc, #20]	; (8008cfc <_sbrk+0x64>)
 8008ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008cea:	68fb      	ldr	r3, [r7, #12]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	2000c000 	.word	0x2000c000
 8008cf8:	00000400 	.word	0x00000400
 8008cfc:	20000e34 	.word	0x20000e34
 8008d00:	20000f88 	.word	0x20000f88

08008d04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d08:	bf00      	nop
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d10:	480c      	ldr	r0, [pc, #48]	; (8008d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008d12:	490d      	ldr	r1, [pc, #52]	; (8008d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d18:	e002      	b.n	8008d20 <LoopCopyDataInit>

08008d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d1e:	3304      	adds	r3, #4

08008d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d24:	d3f9      	bcc.n	8008d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d26:	4a0a      	ldr	r2, [pc, #40]	; (8008d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008d28:	4c0a      	ldr	r4, [pc, #40]	; (8008d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d2c:	e001      	b.n	8008d32 <LoopFillZerobss>

08008d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d30:	3204      	adds	r2, #4

08008d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d34:	d3fb      	bcc.n	8008d2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008d36:	f7ff ffe5 	bl	8008d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d3a:	f003 ffb3 	bl	800cca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008d3e:	f7ff fb5d 	bl	80083fc <main>
  bx lr
 8008d42:	4770      	bx	lr
  ldr r0, =_sdata
 8008d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008d48:	200009bc 	.word	0x200009bc
  ldr r2, =_sidata
 8008d4c:	0800e368 	.word	0x0800e368
  ldr r2, =_sbss
 8008d50:	200009bc 	.word	0x200009bc
  ldr r4, =_ebss
 8008d54:	20000f84 	.word	0x20000f84

08008d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008d58:	e7fe      	b.n	8008d58 <ADC1_2_IRQHandler>
	...

08008d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d60:	4b08      	ldr	r3, [pc, #32]	; (8008d84 <HAL_Init+0x28>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a07      	ldr	r2, [pc, #28]	; (8008d84 <HAL_Init+0x28>)
 8008d66:	f043 0310 	orr.w	r3, r3, #16
 8008d6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d6c:	2003      	movs	r0, #3
 8008d6e:	f000 fa43 	bl	80091f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d72:	200f      	movs	r0, #15
 8008d74:	f000 f808 	bl	8008d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d78:	f7ff fdfa 	bl	8008970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40022000 	.word	0x40022000

08008d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d90:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <HAL_InitTick+0x54>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <HAL_InitTick+0x58>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fa5b 	bl	8009262 <HAL_SYSTICK_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e00e      	b.n	8008dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b0f      	cmp	r3, #15
 8008dba:	d80a      	bhi.n	8008dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	f000 fa23 	bl	800920e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008dc8:	4a06      	ldr	r2, [pc, #24]	; (8008de4 <HAL_InitTick+0x5c>)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e000      	b.n	8008dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	20000960 	.word	0x20000960
 8008de0:	20000968 	.word	0x20000968
 8008de4:	20000964 	.word	0x20000964

08008de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008dec:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <HAL_IncTick+0x1c>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <HAL_IncTick+0x20>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4413      	add	r3, r2
 8008df8:	4a03      	ldr	r2, [pc, #12]	; (8008e08 <HAL_IncTick+0x20>)
 8008dfa:	6013      	str	r3, [r2, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr
 8008e04:	20000968 	.word	0x20000968
 8008e08:	20000e38 	.word	0x20000e38

08008e0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8008e10:	4b02      	ldr	r3, [pc, #8]	; (8008e1c <HAL_GetTick+0x10>)
 8008e12:	681b      	ldr	r3, [r3, #0]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr
 8008e1c:	20000e38 	.word	0x20000e38

08008e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e28:	f7ff fff0 	bl	8008e0c <HAL_GetTick>
 8008e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e38:	d005      	beq.n	8008e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <HAL_Delay+0x44>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e46:	bf00      	nop
 8008e48:	f7ff ffe0 	bl	8008e0c <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d8f7      	bhi.n	8008e48 <HAL_Delay+0x28>
  {
  }
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20000968 	.word	0x20000968

08008e68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e0ed      	b.n	8009056 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d102      	bne.n	8008e8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff fda4 	bl	80089d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e9c:	f7ff ffb6 	bl	8008e0c <HAL_GetTick>
 8008ea0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008ea2:	e012      	b.n	8008eca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008ea4:	f7ff ffb2 	bl	8008e0c <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b0a      	cmp	r3, #10
 8008eb0:	d90b      	bls.n	8008eca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2205      	movs	r2, #5
 8008ec2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e0c5      	b.n	8009056 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0e5      	beq.n	8008ea4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0202 	bic.w	r2, r2, #2
 8008ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ee8:	f7ff ff90 	bl	8008e0c <HAL_GetTick>
 8008eec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008eee:	e012      	b.n	8008f16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008ef0:	f7ff ff8c 	bl	8008e0c <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b0a      	cmp	r3, #10
 8008efc:	d90b      	bls.n	8008f16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2205      	movs	r2, #5
 8008f0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e09f      	b.n	8009056 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e5      	bne.n	8008ef0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7e1b      	ldrb	r3, [r3, #24]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d108      	bne.n	8008f3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	e007      	b.n	8008f4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	7e5b      	ldrb	r3, [r3, #25]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d108      	bne.n	8008f68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e007      	b.n	8008f78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	7e9b      	ldrb	r3, [r3, #26]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d108      	bne.n	8008f92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0220 	orr.w	r2, r2, #32
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	e007      	b.n	8008fa2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0220 	bic.w	r2, r2, #32
 8008fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	7edb      	ldrb	r3, [r3, #27]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d108      	bne.n	8008fbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0210 	bic.w	r2, r2, #16
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	e007      	b.n	8008fcc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0210 	orr.w	r2, r2, #16
 8008fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7f1b      	ldrb	r3, [r3, #28]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d108      	bne.n	8008fe6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0208 	orr.w	r2, r2, #8
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	e007      	b.n	8008ff6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0208 	bic.w	r2, r2, #8
 8008ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	7f5b      	ldrb	r3, [r3, #29]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d108      	bne.n	8009010 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 0204 	orr.w	r2, r2, #4
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e007      	b.n	8009020 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 0204 	bic.w	r2, r2, #4
 800901e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	431a      	orrs	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	ea42 0103 	orr.w	r1, r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	1e5a      	subs	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <__NVIC_SetPriorityGrouping>:
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009070:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <__NVIC_SetPriorityGrouping+0x44>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800907c:	4013      	ands	r3, r2
 800907e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800908c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009092:	4a04      	ldr	r2, [pc, #16]	; (80090a4 <__NVIC_SetPriorityGrouping+0x44>)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	60d3      	str	r3, [r2, #12]
}
 8009098:	bf00      	nop
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	e000ed00 	.word	0xe000ed00

080090a8 <__NVIC_GetPriorityGrouping>:
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <__NVIC_GetPriorityGrouping+0x18>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	f003 0307 	and.w	r3, r3, #7
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bc80      	pop	{r7}
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	e000ed00 	.word	0xe000ed00

080090c4 <__NVIC_EnableIRQ>:
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	db0b      	blt.n	80090ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	f003 021f 	and.w	r2, r3, #31
 80090dc:	4906      	ldr	r1, [pc, #24]	; (80090f8 <__NVIC_EnableIRQ+0x34>)
 80090de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090e2:	095b      	lsrs	r3, r3, #5
 80090e4:	2001      	movs	r0, #1
 80090e6:	fa00 f202 	lsl.w	r2, r0, r2
 80090ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bc80      	pop	{r7}
 80090f6:	4770      	bx	lr
 80090f8:	e000e100 	.word	0xe000e100

080090fc <__NVIC_SetPriority>:
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	6039      	str	r1, [r7, #0]
 8009106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910c:	2b00      	cmp	r3, #0
 800910e:	db0a      	blt.n	8009126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	b2da      	uxtb	r2, r3
 8009114:	490c      	ldr	r1, [pc, #48]	; (8009148 <__NVIC_SetPriority+0x4c>)
 8009116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911a:	0112      	lsls	r2, r2, #4
 800911c:	b2d2      	uxtb	r2, r2
 800911e:	440b      	add	r3, r1
 8009120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009124:	e00a      	b.n	800913c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	b2da      	uxtb	r2, r3
 800912a:	4908      	ldr	r1, [pc, #32]	; (800914c <__NVIC_SetPriority+0x50>)
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	3b04      	subs	r3, #4
 8009134:	0112      	lsls	r2, r2, #4
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	440b      	add	r3, r1
 800913a:	761a      	strb	r2, [r3, #24]
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	e000e100 	.word	0xe000e100
 800914c:	e000ed00 	.word	0xe000ed00

08009150 <NVIC_EncodePriority>:
{
 8009150:	b480      	push	{r7}
 8009152:	b089      	sub	sp, #36	; 0x24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f1c3 0307 	rsb	r3, r3, #7
 800916a:	2b04      	cmp	r3, #4
 800916c:	bf28      	it	cs
 800916e:	2304      	movcs	r3, #4
 8009170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	3304      	adds	r3, #4
 8009176:	2b06      	cmp	r3, #6
 8009178:	d902      	bls.n	8009180 <NVIC_EncodePriority+0x30>
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	3b03      	subs	r3, #3
 800917e:	e000      	b.n	8009182 <NVIC_EncodePriority+0x32>
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009184:	f04f 32ff 	mov.w	r2, #4294967295
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	43da      	mvns	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	401a      	ands	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009198:	f04f 31ff 	mov.w	r1, #4294967295
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	fa01 f303 	lsl.w	r3, r1, r3
 80091a2:	43d9      	mvns	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091a8:	4313      	orrs	r3, r2
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3724      	adds	r7, #36	; 0x24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr

080091b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3b01      	subs	r3, #1
 80091c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091c4:	d301      	bcc.n	80091ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80091c6:	2301      	movs	r3, #1
 80091c8:	e00f      	b.n	80091ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091ca:	4a0a      	ldr	r2, [pc, #40]	; (80091f4 <SysTick_Config+0x40>)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091d2:	210f      	movs	r1, #15
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	f7ff ff90 	bl	80090fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091dc:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <SysTick_Config+0x40>)
 80091de:	2200      	movs	r2, #0
 80091e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091e2:	4b04      	ldr	r3, [pc, #16]	; (80091f4 <SysTick_Config+0x40>)
 80091e4:	2207      	movs	r2, #7
 80091e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	e000e010 	.word	0xe000e010

080091f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff ff2d 	bl	8009060 <__NVIC_SetPriorityGrouping>
}
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800920e:	b580      	push	{r7, lr}
 8009210:	b086      	sub	sp, #24
 8009212:	af00      	add	r7, sp, #0
 8009214:	4603      	mov	r3, r0
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	607a      	str	r2, [r7, #4]
 800921a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009220:	f7ff ff42 	bl	80090a8 <__NVIC_GetPriorityGrouping>
 8009224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	6978      	ldr	r0, [r7, #20]
 800922c:	f7ff ff90 	bl	8009150 <NVIC_EncodePriority>
 8009230:	4602      	mov	r2, r0
 8009232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff ff5f 	bl	80090fc <__NVIC_SetPriority>
}
 800923e:	bf00      	nop
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	4603      	mov	r3, r0
 800924e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff ff35 	bl	80090c4 <__NVIC_EnableIRQ>
}
 800925a:	bf00      	nop
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff ffa2 	bl	80091b4 <SysTick_Config>
 8009270:	4603      	mov	r3, r0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d008      	beq.n	80092a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2204      	movs	r2, #4
 8009296:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e020      	b.n	80092e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 020e 	bic.w	r2, r2, #14
 80092b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0201 	bic.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092cc:	2101      	movs	r1, #1
 80092ce:	fa01 f202 	lsl.w	r2, r1, r2
 80092d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bc80      	pop	{r7}
 80092ee:	4770      	bx	lr

080092f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d005      	beq.n	8009314 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2204      	movs	r2, #4
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	73fb      	strb	r3, [r7, #15]
 8009312:	e0d6      	b.n	80094c2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 020e 	bic.w	r2, r2, #14
 8009322:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0201 	bic.w	r2, r2, #1
 8009332:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	461a      	mov	r2, r3
 800933a:	4b64      	ldr	r3, [pc, #400]	; (80094cc <HAL_DMA_Abort_IT+0x1dc>)
 800933c:	429a      	cmp	r2, r3
 800933e:	d958      	bls.n	80093f2 <HAL_DMA_Abort_IT+0x102>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a62      	ldr	r2, [pc, #392]	; (80094d0 <HAL_DMA_Abort_IT+0x1e0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d04f      	beq.n	80093ea <HAL_DMA_Abort_IT+0xfa>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a61      	ldr	r2, [pc, #388]	; (80094d4 <HAL_DMA_Abort_IT+0x1e4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d048      	beq.n	80093e6 <HAL_DMA_Abort_IT+0xf6>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a5f      	ldr	r2, [pc, #380]	; (80094d8 <HAL_DMA_Abort_IT+0x1e8>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d040      	beq.n	80093e0 <HAL_DMA_Abort_IT+0xf0>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a5e      	ldr	r2, [pc, #376]	; (80094dc <HAL_DMA_Abort_IT+0x1ec>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d038      	beq.n	80093da <HAL_DMA_Abort_IT+0xea>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a5c      	ldr	r2, [pc, #368]	; (80094e0 <HAL_DMA_Abort_IT+0x1f0>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d030      	beq.n	80093d4 <HAL_DMA_Abort_IT+0xe4>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a5b      	ldr	r2, [pc, #364]	; (80094e4 <HAL_DMA_Abort_IT+0x1f4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d028      	beq.n	80093ce <HAL_DMA_Abort_IT+0xde>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a52      	ldr	r2, [pc, #328]	; (80094cc <HAL_DMA_Abort_IT+0x1dc>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d020      	beq.n	80093c8 <HAL_DMA_Abort_IT+0xd8>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a57      	ldr	r2, [pc, #348]	; (80094e8 <HAL_DMA_Abort_IT+0x1f8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d019      	beq.n	80093c4 <HAL_DMA_Abort_IT+0xd4>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a55      	ldr	r2, [pc, #340]	; (80094ec <HAL_DMA_Abort_IT+0x1fc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d012      	beq.n	80093c0 <HAL_DMA_Abort_IT+0xd0>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a54      	ldr	r2, [pc, #336]	; (80094f0 <HAL_DMA_Abort_IT+0x200>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00a      	beq.n	80093ba <HAL_DMA_Abort_IT+0xca>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a52      	ldr	r2, [pc, #328]	; (80094f4 <HAL_DMA_Abort_IT+0x204>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d102      	bne.n	80093b4 <HAL_DMA_Abort_IT+0xc4>
 80093ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b2:	e01b      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093b8:	e018      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093be:	e015      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093c0:	2310      	movs	r3, #16
 80093c2:	e013      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093c4:	2301      	movs	r3, #1
 80093c6:	e011      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093cc:	e00e      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093d2:	e00b      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093d8:	e008      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093de:	e005      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093e4:	e002      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093e6:	2310      	movs	r3, #16
 80093e8:	e000      	b.n	80093ec <HAL_DMA_Abort_IT+0xfc>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4a42      	ldr	r2, [pc, #264]	; (80094f8 <HAL_DMA_Abort_IT+0x208>)
 80093ee:	6053      	str	r3, [r2, #4]
 80093f0:	e057      	b.n	80094a2 <HAL_DMA_Abort_IT+0x1b2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a36      	ldr	r2, [pc, #216]	; (80094d0 <HAL_DMA_Abort_IT+0x1e0>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d04f      	beq.n	800949c <HAL_DMA_Abort_IT+0x1ac>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a34      	ldr	r2, [pc, #208]	; (80094d4 <HAL_DMA_Abort_IT+0x1e4>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d048      	beq.n	8009498 <HAL_DMA_Abort_IT+0x1a8>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a33      	ldr	r2, [pc, #204]	; (80094d8 <HAL_DMA_Abort_IT+0x1e8>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d040      	beq.n	8009492 <HAL_DMA_Abort_IT+0x1a2>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a31      	ldr	r2, [pc, #196]	; (80094dc <HAL_DMA_Abort_IT+0x1ec>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d038      	beq.n	800948c <HAL_DMA_Abort_IT+0x19c>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a30      	ldr	r2, [pc, #192]	; (80094e0 <HAL_DMA_Abort_IT+0x1f0>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d030      	beq.n	8009486 <HAL_DMA_Abort_IT+0x196>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a2e      	ldr	r2, [pc, #184]	; (80094e4 <HAL_DMA_Abort_IT+0x1f4>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d028      	beq.n	8009480 <HAL_DMA_Abort_IT+0x190>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a26      	ldr	r2, [pc, #152]	; (80094cc <HAL_DMA_Abort_IT+0x1dc>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d020      	beq.n	800947a <HAL_DMA_Abort_IT+0x18a>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a2a      	ldr	r2, [pc, #168]	; (80094e8 <HAL_DMA_Abort_IT+0x1f8>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d019      	beq.n	8009476 <HAL_DMA_Abort_IT+0x186>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a29      	ldr	r2, [pc, #164]	; (80094ec <HAL_DMA_Abort_IT+0x1fc>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d012      	beq.n	8009472 <HAL_DMA_Abort_IT+0x182>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a27      	ldr	r2, [pc, #156]	; (80094f0 <HAL_DMA_Abort_IT+0x200>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00a      	beq.n	800946c <HAL_DMA_Abort_IT+0x17c>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a26      	ldr	r2, [pc, #152]	; (80094f4 <HAL_DMA_Abort_IT+0x204>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d102      	bne.n	8009466 <HAL_DMA_Abort_IT+0x176>
 8009460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009464:	e01b      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 8009466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800946a:	e018      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 800946c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009470:	e015      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 8009472:	2310      	movs	r3, #16
 8009474:	e013      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 8009476:	2301      	movs	r3, #1
 8009478:	e011      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 800947a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800947e:	e00e      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 8009480:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009484:	e00b      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 8009486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800948a:	e008      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 800948c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009490:	e005      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 8009492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009496:	e002      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 8009498:	2310      	movs	r3, #16
 800949a:	e000      	b.n	800949e <HAL_DMA_Abort_IT+0x1ae>
 800949c:	2301      	movs	r3, #1
 800949e:	4a17      	ldr	r2, [pc, #92]	; (80094fc <HAL_DMA_Abort_IT+0x20c>)
 80094a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	4798      	blx	r3
    } 
  }
  return status;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	40020080 	.word	0x40020080
 80094d0:	40020008 	.word	0x40020008
 80094d4:	4002001c 	.word	0x4002001c
 80094d8:	40020030 	.word	0x40020030
 80094dc:	40020044 	.word	0x40020044
 80094e0:	40020058 	.word	0x40020058
 80094e4:	4002006c 	.word	0x4002006c
 80094e8:	40020408 	.word	0x40020408
 80094ec:	4002041c 	.word	0x4002041c
 80094f0:	40020430 	.word	0x40020430
 80094f4:	40020444 	.word	0x40020444
 80094f8:	40020400 	.word	0x40020400
 80094fc:	40020000 	.word	0x40020000

08009500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009500:	b480      	push	{r7}
 8009502:	b08b      	sub	sp, #44	; 0x2c
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800950a:	2300      	movs	r3, #0
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800950e:	2300      	movs	r3, #0
 8009510:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009512:	e179      	b.n	8009808 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009514:	2201      	movs	r2, #1
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	fa02 f303 	lsl.w	r3, r2, r3
 800951c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	4013      	ands	r3, r2
 8009526:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	429a      	cmp	r2, r3
 800952e:	f040 8168 	bne.w	8009802 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	4a96      	ldr	r2, [pc, #600]	; (8009790 <HAL_GPIO_Init+0x290>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d05e      	beq.n	80095fa <HAL_GPIO_Init+0xfa>
 800953c:	4a94      	ldr	r2, [pc, #592]	; (8009790 <HAL_GPIO_Init+0x290>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d875      	bhi.n	800962e <HAL_GPIO_Init+0x12e>
 8009542:	4a94      	ldr	r2, [pc, #592]	; (8009794 <HAL_GPIO_Init+0x294>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d058      	beq.n	80095fa <HAL_GPIO_Init+0xfa>
 8009548:	4a92      	ldr	r2, [pc, #584]	; (8009794 <HAL_GPIO_Init+0x294>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d86f      	bhi.n	800962e <HAL_GPIO_Init+0x12e>
 800954e:	4a92      	ldr	r2, [pc, #584]	; (8009798 <HAL_GPIO_Init+0x298>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d052      	beq.n	80095fa <HAL_GPIO_Init+0xfa>
 8009554:	4a90      	ldr	r2, [pc, #576]	; (8009798 <HAL_GPIO_Init+0x298>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d869      	bhi.n	800962e <HAL_GPIO_Init+0x12e>
 800955a:	4a90      	ldr	r2, [pc, #576]	; (800979c <HAL_GPIO_Init+0x29c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d04c      	beq.n	80095fa <HAL_GPIO_Init+0xfa>
 8009560:	4a8e      	ldr	r2, [pc, #568]	; (800979c <HAL_GPIO_Init+0x29c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d863      	bhi.n	800962e <HAL_GPIO_Init+0x12e>
 8009566:	4a8e      	ldr	r2, [pc, #568]	; (80097a0 <HAL_GPIO_Init+0x2a0>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d046      	beq.n	80095fa <HAL_GPIO_Init+0xfa>
 800956c:	4a8c      	ldr	r2, [pc, #560]	; (80097a0 <HAL_GPIO_Init+0x2a0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d85d      	bhi.n	800962e <HAL_GPIO_Init+0x12e>
 8009572:	2b12      	cmp	r3, #18
 8009574:	d82a      	bhi.n	80095cc <HAL_GPIO_Init+0xcc>
 8009576:	2b12      	cmp	r3, #18
 8009578:	d859      	bhi.n	800962e <HAL_GPIO_Init+0x12e>
 800957a:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <HAL_GPIO_Init+0x80>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	080095fb 	.word	0x080095fb
 8009584:	080095d5 	.word	0x080095d5
 8009588:	080095e7 	.word	0x080095e7
 800958c:	08009629 	.word	0x08009629
 8009590:	0800962f 	.word	0x0800962f
 8009594:	0800962f 	.word	0x0800962f
 8009598:	0800962f 	.word	0x0800962f
 800959c:	0800962f 	.word	0x0800962f
 80095a0:	0800962f 	.word	0x0800962f
 80095a4:	0800962f 	.word	0x0800962f
 80095a8:	0800962f 	.word	0x0800962f
 80095ac:	0800962f 	.word	0x0800962f
 80095b0:	0800962f 	.word	0x0800962f
 80095b4:	0800962f 	.word	0x0800962f
 80095b8:	0800962f 	.word	0x0800962f
 80095bc:	0800962f 	.word	0x0800962f
 80095c0:	0800962f 	.word	0x0800962f
 80095c4:	080095dd 	.word	0x080095dd
 80095c8:	080095f1 	.word	0x080095f1
 80095cc:	4a75      	ldr	r2, [pc, #468]	; (80097a4 <HAL_GPIO_Init+0x2a4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d013      	beq.n	80095fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80095d2:	e02c      	b.n	800962e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	623b      	str	r3, [r7, #32]
          break;
 80095da:	e029      	b.n	8009630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	3304      	adds	r3, #4
 80095e2:	623b      	str	r3, [r7, #32]
          break;
 80095e4:	e024      	b.n	8009630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	3308      	adds	r3, #8
 80095ec:	623b      	str	r3, [r7, #32]
          break;
 80095ee:	e01f      	b.n	8009630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	330c      	adds	r3, #12
 80095f6:	623b      	str	r3, [r7, #32]
          break;
 80095f8:	e01a      	b.n	8009630 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009602:	2304      	movs	r3, #4
 8009604:	623b      	str	r3, [r7, #32]
          break;
 8009606:	e013      	b.n	8009630 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d105      	bne.n	800961c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009610:	2308      	movs	r3, #8
 8009612:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	69fa      	ldr	r2, [r7, #28]
 8009618:	611a      	str	r2, [r3, #16]
          break;
 800961a:	e009      	b.n	8009630 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800961c:	2308      	movs	r3, #8
 800961e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	69fa      	ldr	r2, [r7, #28]
 8009624:	615a      	str	r2, [r3, #20]
          break;
 8009626:	e003      	b.n	8009630 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009628:	2300      	movs	r3, #0
 800962a:	623b      	str	r3, [r7, #32]
          break;
 800962c:	e000      	b.n	8009630 <HAL_GPIO_Init+0x130>
          break;
 800962e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	2bff      	cmp	r3, #255	; 0xff
 8009634:	d801      	bhi.n	800963a <HAL_GPIO_Init+0x13a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	e001      	b.n	800963e <HAL_GPIO_Init+0x13e>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3304      	adds	r3, #4
 800963e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	2bff      	cmp	r3, #255	; 0xff
 8009644:	d802      	bhi.n	800964c <HAL_GPIO_Init+0x14c>
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	e002      	b.n	8009652 <HAL_GPIO_Init+0x152>
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	3b08      	subs	r3, #8
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	210f      	movs	r1, #15
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	fa01 f303 	lsl.w	r3, r1, r3
 8009660:	43db      	mvns	r3, r3
 8009662:	401a      	ands	r2, r3
 8009664:	6a39      	ldr	r1, [r7, #32]
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	fa01 f303 	lsl.w	r3, r1, r3
 800966c:	431a      	orrs	r2, r3
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 80c1 	beq.w	8009802 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009680:	4b49      	ldr	r3, [pc, #292]	; (80097a8 <HAL_GPIO_Init+0x2a8>)
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	4a48      	ldr	r2, [pc, #288]	; (80097a8 <HAL_GPIO_Init+0x2a8>)
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	6193      	str	r3, [r2, #24]
 800968c:	4b46      	ldr	r3, [pc, #280]	; (80097a8 <HAL_GPIO_Init+0x2a8>)
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	60bb      	str	r3, [r7, #8]
 8009696:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009698:	4a44      	ldr	r2, [pc, #272]	; (80097ac <HAL_GPIO_Init+0x2ac>)
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	089b      	lsrs	r3, r3, #2
 800969e:	3302      	adds	r3, #2
 80096a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	f003 0303 	and.w	r3, r3, #3
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	220f      	movs	r2, #15
 80096b0:	fa02 f303 	lsl.w	r3, r2, r3
 80096b4:	43db      	mvns	r3, r3
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4013      	ands	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a3c      	ldr	r2, [pc, #240]	; (80097b0 <HAL_GPIO_Init+0x2b0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d01f      	beq.n	8009704 <HAL_GPIO_Init+0x204>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a3b      	ldr	r2, [pc, #236]	; (80097b4 <HAL_GPIO_Init+0x2b4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d019      	beq.n	8009700 <HAL_GPIO_Init+0x200>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a3a      	ldr	r2, [pc, #232]	; (80097b8 <HAL_GPIO_Init+0x2b8>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d013      	beq.n	80096fc <HAL_GPIO_Init+0x1fc>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a39      	ldr	r2, [pc, #228]	; (80097bc <HAL_GPIO_Init+0x2bc>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d00d      	beq.n	80096f8 <HAL_GPIO_Init+0x1f8>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a38      	ldr	r2, [pc, #224]	; (80097c0 <HAL_GPIO_Init+0x2c0>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d007      	beq.n	80096f4 <HAL_GPIO_Init+0x1f4>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a37      	ldr	r2, [pc, #220]	; (80097c4 <HAL_GPIO_Init+0x2c4>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d101      	bne.n	80096f0 <HAL_GPIO_Init+0x1f0>
 80096ec:	2305      	movs	r3, #5
 80096ee:	e00a      	b.n	8009706 <HAL_GPIO_Init+0x206>
 80096f0:	2306      	movs	r3, #6
 80096f2:	e008      	b.n	8009706 <HAL_GPIO_Init+0x206>
 80096f4:	2304      	movs	r3, #4
 80096f6:	e006      	b.n	8009706 <HAL_GPIO_Init+0x206>
 80096f8:	2303      	movs	r3, #3
 80096fa:	e004      	b.n	8009706 <HAL_GPIO_Init+0x206>
 80096fc:	2302      	movs	r3, #2
 80096fe:	e002      	b.n	8009706 <HAL_GPIO_Init+0x206>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <HAL_GPIO_Init+0x206>
 8009704:	2300      	movs	r3, #0
 8009706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009708:	f002 0203 	and.w	r2, r2, #3
 800970c:	0092      	lsls	r2, r2, #2
 800970e:	4093      	lsls	r3, r2
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	4313      	orrs	r3, r2
 8009714:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009716:	4925      	ldr	r1, [pc, #148]	; (80097ac <HAL_GPIO_Init+0x2ac>)
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	089b      	lsrs	r3, r3, #2
 800971c:	3302      	adds	r3, #2
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d006      	beq.n	800973e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009730:	4b25      	ldr	r3, [pc, #148]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	4924      	ldr	r1, [pc, #144]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	4313      	orrs	r3, r2
 800973a:	608b      	str	r3, [r1, #8]
 800973c:	e006      	b.n	800974c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800973e:	4b22      	ldr	r3, [pc, #136]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	43db      	mvns	r3, r3
 8009746:	4920      	ldr	r1, [pc, #128]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 8009748:	4013      	ands	r3, r2
 800974a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d006      	beq.n	8009766 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009758:	4b1b      	ldr	r3, [pc, #108]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	491a      	ldr	r1, [pc, #104]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	4313      	orrs	r3, r2
 8009762:	60cb      	str	r3, [r1, #12]
 8009764:	e006      	b.n	8009774 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009766:	4b18      	ldr	r3, [pc, #96]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	43db      	mvns	r3, r3
 800976e:	4916      	ldr	r1, [pc, #88]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 8009770:	4013      	ands	r3, r2
 8009772:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d025      	beq.n	80097cc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009780:	4b11      	ldr	r3, [pc, #68]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	4910      	ldr	r1, [pc, #64]	; (80097c8 <HAL_GPIO_Init+0x2c8>)
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	4313      	orrs	r3, r2
 800978a:	604b      	str	r3, [r1, #4]
 800978c:	e025      	b.n	80097da <HAL_GPIO_Init+0x2da>
 800978e:	bf00      	nop
 8009790:	10320000 	.word	0x10320000
 8009794:	10310000 	.word	0x10310000
 8009798:	10220000 	.word	0x10220000
 800979c:	10210000 	.word	0x10210000
 80097a0:	10120000 	.word	0x10120000
 80097a4:	10110000 	.word	0x10110000
 80097a8:	40021000 	.word	0x40021000
 80097ac:	40010000 	.word	0x40010000
 80097b0:	40010800 	.word	0x40010800
 80097b4:	40010c00 	.word	0x40010c00
 80097b8:	40011000 	.word	0x40011000
 80097bc:	40011400 	.word	0x40011400
 80097c0:	40011800 	.word	0x40011800
 80097c4:	40011c00 	.word	0x40011c00
 80097c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80097cc:	4b15      	ldr	r3, [pc, #84]	; (8009824 <HAL_GPIO_Init+0x324>)
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	43db      	mvns	r3, r3
 80097d4:	4913      	ldr	r1, [pc, #76]	; (8009824 <HAL_GPIO_Init+0x324>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d006      	beq.n	80097f4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <HAL_GPIO_Init+0x324>)
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	490e      	ldr	r1, [pc, #56]	; (8009824 <HAL_GPIO_Init+0x324>)
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	600b      	str	r3, [r1, #0]
 80097f2:	e006      	b.n	8009802 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80097f4:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <HAL_GPIO_Init+0x324>)
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	43db      	mvns	r3, r3
 80097fc:	4909      	ldr	r1, [pc, #36]	; (8009824 <HAL_GPIO_Init+0x324>)
 80097fe:	4013      	ands	r3, r2
 8009800:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009804:	3301      	adds	r3, #1
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	fa22 f303 	lsr.w	r3, r2, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	f47f ae7e 	bne.w	8009514 <HAL_GPIO_Init+0x14>
  }
}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	372c      	adds	r7, #44	; 0x2c
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr
 8009824:	40010400 	.word	0x40010400

08009828 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009828:	b480      	push	{r7}
 800982a:	b089      	sub	sp, #36	; 0x24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009832:	2300      	movs	r3, #0
 8009834:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009836:	e0a6      	b.n	8009986 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009838:	2201      	movs	r2, #1
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	fa02 f303 	lsl.w	r3, r2, r3
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	4013      	ands	r3, r2
 8009844:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 8099 	beq.w	8009980 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800984e:	4a54      	ldr	r2, [pc, #336]	; (80099a0 <HAL_GPIO_DeInit+0x178>)
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	089b      	lsrs	r3, r3, #2
 8009854:	3302      	adds	r3, #2
 8009856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800985a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	220f      	movs	r2, #15
 8009866:	fa02 f303 	lsl.w	r3, r2, r3
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4013      	ands	r3, r2
 800986e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a4c      	ldr	r2, [pc, #304]	; (80099a4 <HAL_GPIO_DeInit+0x17c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d01f      	beq.n	80098b8 <HAL_GPIO_DeInit+0x90>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a4b      	ldr	r2, [pc, #300]	; (80099a8 <HAL_GPIO_DeInit+0x180>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d019      	beq.n	80098b4 <HAL_GPIO_DeInit+0x8c>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a4a      	ldr	r2, [pc, #296]	; (80099ac <HAL_GPIO_DeInit+0x184>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d013      	beq.n	80098b0 <HAL_GPIO_DeInit+0x88>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a49      	ldr	r2, [pc, #292]	; (80099b0 <HAL_GPIO_DeInit+0x188>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00d      	beq.n	80098ac <HAL_GPIO_DeInit+0x84>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a48      	ldr	r2, [pc, #288]	; (80099b4 <HAL_GPIO_DeInit+0x18c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d007      	beq.n	80098a8 <HAL_GPIO_DeInit+0x80>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a47      	ldr	r2, [pc, #284]	; (80099b8 <HAL_GPIO_DeInit+0x190>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d101      	bne.n	80098a4 <HAL_GPIO_DeInit+0x7c>
 80098a0:	2305      	movs	r3, #5
 80098a2:	e00a      	b.n	80098ba <HAL_GPIO_DeInit+0x92>
 80098a4:	2306      	movs	r3, #6
 80098a6:	e008      	b.n	80098ba <HAL_GPIO_DeInit+0x92>
 80098a8:	2304      	movs	r3, #4
 80098aa:	e006      	b.n	80098ba <HAL_GPIO_DeInit+0x92>
 80098ac:	2303      	movs	r3, #3
 80098ae:	e004      	b.n	80098ba <HAL_GPIO_DeInit+0x92>
 80098b0:	2302      	movs	r3, #2
 80098b2:	e002      	b.n	80098ba <HAL_GPIO_DeInit+0x92>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <HAL_GPIO_DeInit+0x92>
 80098b8:	2300      	movs	r3, #0
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	f002 0203 	and.w	r2, r2, #3
 80098c0:	0092      	lsls	r2, r2, #2
 80098c2:	4093      	lsls	r3, r2
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d132      	bne.n	8009930 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80098ca:	4b3c      	ldr	r3, [pc, #240]	; (80099bc <HAL_GPIO_DeInit+0x194>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	43db      	mvns	r3, r3
 80098d2:	493a      	ldr	r1, [pc, #232]	; (80099bc <HAL_GPIO_DeInit+0x194>)
 80098d4:	4013      	ands	r3, r2
 80098d6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80098d8:	4b38      	ldr	r3, [pc, #224]	; (80099bc <HAL_GPIO_DeInit+0x194>)
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	43db      	mvns	r3, r3
 80098e0:	4936      	ldr	r1, [pc, #216]	; (80099bc <HAL_GPIO_DeInit+0x194>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80098e6:	4b35      	ldr	r3, [pc, #212]	; (80099bc <HAL_GPIO_DeInit+0x194>)
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	43db      	mvns	r3, r3
 80098ee:	4933      	ldr	r1, [pc, #204]	; (80099bc <HAL_GPIO_DeInit+0x194>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80098f4:	4b31      	ldr	r3, [pc, #196]	; (80099bc <HAL_GPIO_DeInit+0x194>)
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	43db      	mvns	r3, r3
 80098fc:	492f      	ldr	r1, [pc, #188]	; (80099bc <HAL_GPIO_DeInit+0x194>)
 80098fe:	4013      	ands	r3, r2
 8009900:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	f003 0303 	and.w	r3, r3, #3
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	220f      	movs	r2, #15
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009912:	4a23      	ldr	r2, [pc, #140]	; (80099a0 <HAL_GPIO_DeInit+0x178>)
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	089b      	lsrs	r3, r3, #2
 8009918:	3302      	adds	r3, #2
 800991a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	43da      	mvns	r2, r3
 8009922:	481f      	ldr	r0, [pc, #124]	; (80099a0 <HAL_GPIO_DeInit+0x178>)
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	089b      	lsrs	r3, r3, #2
 8009928:	400a      	ands	r2, r1
 800992a:	3302      	adds	r3, #2
 800992c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	2bff      	cmp	r3, #255	; 0xff
 8009934:	d801      	bhi.n	800993a <HAL_GPIO_DeInit+0x112>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	e001      	b.n	800993e <HAL_GPIO_DeInit+0x116>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3304      	adds	r3, #4
 800993e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2bff      	cmp	r3, #255	; 0xff
 8009944:	d802      	bhi.n	800994c <HAL_GPIO_DeInit+0x124>
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	e002      	b.n	8009952 <HAL_GPIO_DeInit+0x12a>
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	3b08      	subs	r3, #8
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	210f      	movs	r1, #15
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	fa01 f303 	lsl.w	r3, r1, r3
 8009960:	43db      	mvns	r3, r3
 8009962:	401a      	ands	r2, r3
 8009964:	2104      	movs	r1, #4
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	fa01 f303 	lsl.w	r3, r1, r3
 800996c:	431a      	orrs	r2, r3
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	43db      	mvns	r3, r3
 800997a:	401a      	ands	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	fa22 f303 	lsr.w	r3, r2, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	f47f af52 	bne.w	8009838 <HAL_GPIO_DeInit+0x10>
  }
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	3724      	adds	r7, #36	; 0x24
 800999a:	46bd      	mov	sp, r7
 800999c:	bc80      	pop	{r7}
 800999e:	4770      	bx	lr
 80099a0:	40010000 	.word	0x40010000
 80099a4:	40010800 	.word	0x40010800
 80099a8:	40010c00 	.word	0x40010c00
 80099ac:	40011000 	.word	0x40011000
 80099b0:	40011400 	.word	0x40011400
 80099b4:	40011800 	.word	0x40011800
 80099b8:	40011c00 	.word	0x40011c00
 80099bc:	40010400 	.word	0x40010400

080099c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	887b      	ldrh	r3, [r7, #2]
 80099d2:	4013      	ands	r3, r2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80099d8:	2301      	movs	r3, #1
 80099da:	73fb      	strb	r3, [r7, #15]
 80099dc:	e001      	b.n	80099e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr

080099ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	807b      	strh	r3, [r7, #2]
 80099fa:	4613      	mov	r3, r2
 80099fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80099fe:	787b      	ldrb	r3, [r7, #1]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a04:	887a      	ldrh	r2, [r7, #2]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009a0a:	e003      	b.n	8009a14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009a0c:	887b      	ldrh	r3, [r7, #2]
 8009a0e:	041a      	lsls	r2, r3, #16
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	611a      	str	r2, [r3, #16]
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bc80      	pop	{r7}
 8009a1c:	4770      	bx	lr

08009a1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b085      	sub	sp, #20
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	460b      	mov	r3, r1
 8009a28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009a30:	887a      	ldrh	r2, [r7, #2]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4013      	ands	r3, r2
 8009a36:	041a      	lsls	r2, r3, #16
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	43d9      	mvns	r1, r3
 8009a3c:	887b      	ldrh	r3, [r7, #2]
 8009a3e:	400b      	ands	r3, r1
 8009a40:	431a      	orrs	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	611a      	str	r2, [r3, #16]
}
 8009a46:	bf00      	nop
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bc80      	pop	{r7}
 8009a4e:	4770      	bx	lr

08009a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e12b      	b.n	8009cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d106      	bne.n	8009a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7fe fff8 	bl	8008a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2224      	movs	r2, #36	; 0x24
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0201 	bic.w	r2, r2, #1
 8009a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ab4:	f001 fdb8 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 8009ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	4a81      	ldr	r2, [pc, #516]	; (8009cc4 <HAL_I2C_Init+0x274>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d807      	bhi.n	8009ad4 <HAL_I2C_Init+0x84>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4a80      	ldr	r2, [pc, #512]	; (8009cc8 <HAL_I2C_Init+0x278>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	bf94      	ite	ls
 8009acc:	2301      	movls	r3, #1
 8009ace:	2300      	movhi	r3, #0
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	e006      	b.n	8009ae2 <HAL_I2C_Init+0x92>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4a7d      	ldr	r2, [pc, #500]	; (8009ccc <HAL_I2C_Init+0x27c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	bf94      	ite	ls
 8009adc:	2301      	movls	r3, #1
 8009ade:	2300      	movhi	r3, #0
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e0e7      	b.n	8009cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4a78      	ldr	r2, [pc, #480]	; (8009cd0 <HAL_I2C_Init+0x280>)
 8009aee:	fba2 2303 	umull	r2, r3, r2, r3
 8009af2:	0c9b      	lsrs	r3, r3, #18
 8009af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	4a6a      	ldr	r2, [pc, #424]	; (8009cc4 <HAL_I2C_Init+0x274>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d802      	bhi.n	8009b24 <HAL_I2C_Init+0xd4>
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	3301      	adds	r3, #1
 8009b22:	e009      	b.n	8009b38 <HAL_I2C_Init+0xe8>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009b2a:	fb02 f303 	mul.w	r3, r2, r3
 8009b2e:	4a69      	ldr	r2, [pc, #420]	; (8009cd4 <HAL_I2C_Init+0x284>)
 8009b30:	fba2 2303 	umull	r2, r3, r2, r3
 8009b34:	099b      	lsrs	r3, r3, #6
 8009b36:	3301      	adds	r3, #1
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6812      	ldr	r2, [r2, #0]
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	495c      	ldr	r1, [pc, #368]	; (8009cc4 <HAL_I2C_Init+0x274>)
 8009b54:	428b      	cmp	r3, r1
 8009b56:	d819      	bhi.n	8009b8c <HAL_I2C_Init+0x13c>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	1e59      	subs	r1, r3, #1
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b66:	1c59      	adds	r1, r3, #1
 8009b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009b6c:	400b      	ands	r3, r1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <HAL_I2C_Init+0x138>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	1e59      	subs	r1, r3, #1
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b80:	3301      	adds	r3, #1
 8009b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b86:	e051      	b.n	8009c2c <HAL_I2C_Init+0x1dc>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	e04f      	b.n	8009c2c <HAL_I2C_Init+0x1dc>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d111      	bne.n	8009bb8 <HAL_I2C_Init+0x168>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	1e58      	subs	r0, r3, #1
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6859      	ldr	r1, [r3, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	440b      	add	r3, r1
 8009ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bf0c      	ite	eq
 8009bb0:	2301      	moveq	r3, #1
 8009bb2:	2300      	movne	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	e012      	b.n	8009bde <HAL_I2C_Init+0x18e>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	1e58      	subs	r0, r3, #1
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6859      	ldr	r1, [r3, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	0099      	lsls	r1, r3, #2
 8009bc8:	440b      	add	r3, r1
 8009bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bce:	3301      	adds	r3, #1
 8009bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2301      	moveq	r3, #1
 8009bda:	2300      	movne	r3, #0
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <HAL_I2C_Init+0x196>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e022      	b.n	8009c2c <HAL_I2C_Init+0x1dc>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10e      	bne.n	8009c0c <HAL_I2C_Init+0x1bc>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	1e58      	subs	r0, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6859      	ldr	r1, [r3, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	440b      	add	r3, r1
 8009bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c00:	3301      	adds	r3, #1
 8009c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c0a:	e00f      	b.n	8009c2c <HAL_I2C_Init+0x1dc>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	1e58      	subs	r0, r3, #1
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6859      	ldr	r1, [r3, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	440b      	add	r3, r1
 8009c1a:	0099      	lsls	r1, r3, #2
 8009c1c:	440b      	add	r3, r1
 8009c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c22:	3301      	adds	r3, #1
 8009c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	6809      	ldr	r1, [r1, #0]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	69da      	ldr	r2, [r3, #28]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	431a      	orrs	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6911      	ldr	r1, [r2, #16]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	68d2      	ldr	r2, [r2, #12]
 8009c66:	4311      	orrs	r1, r2
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6812      	ldr	r2, [r2, #0]
 8009c6c:	430b      	orrs	r3, r1
 8009c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	695a      	ldr	r2, [r3, #20]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f042 0201 	orr.w	r2, r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	000186a0 	.word	0x000186a0
 8009cc8:	001e847f 	.word	0x001e847f
 8009ccc:	003d08ff 	.word	0x003d08ff
 8009cd0:	431bde83 	.word	0x431bde83
 8009cd4:	10624dd3 	.word	0x10624dd3

08009cd8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e021      	b.n	8009d2e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2224      	movs	r2, #36	; 0x24
 8009cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f022 0201 	bic.w	r2, r2, #1
 8009d00:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7fe fef0 	bl	8008ae8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af02      	add	r7, sp, #8
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	607a      	str	r2, [r7, #4]
 8009d42:	461a      	mov	r2, r3
 8009d44:	460b      	mov	r3, r1
 8009d46:	817b      	strh	r3, [r7, #10]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d4c:	f7ff f85e 	bl	8008e0c <HAL_GetTick>
 8009d50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	f040 80e0 	bne.w	8009f20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	2319      	movs	r3, #25
 8009d66:	2201      	movs	r2, #1
 8009d68:	4970      	ldr	r1, [pc, #448]	; (8009f2c <HAL_I2C_Master_Transmit+0x1f4>)
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 fe5c 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009d76:	2302      	movs	r3, #2
 8009d78:	e0d3      	b.n	8009f22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_I2C_Master_Transmit+0x50>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e0cc      	b.n	8009f22 <HAL_I2C_Master_Transmit+0x1ea>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d007      	beq.n	8009dae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f042 0201 	orr.w	r2, r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2221      	movs	r2, #33	; 0x21
 8009dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2210      	movs	r2, #16
 8009dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	893a      	ldrh	r2, [r7, #8]
 8009dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4a50      	ldr	r2, [pc, #320]	; (8009f30 <HAL_I2C_Master_Transmit+0x1f8>)
 8009dee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009df0:	8979      	ldrh	r1, [r7, #10]
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	6a3a      	ldr	r2, [r7, #32]
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 fc16 	bl	800a628 <I2C_MasterRequestWrite>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e08d      	b.n	8009f22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e06:	2300      	movs	r3, #0
 8009e08:	613b      	str	r3, [r7, #16]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	613b      	str	r3, [r7, #16]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009e1c:	e066      	b.n	8009eec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	6a39      	ldr	r1, [r7, #32]
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 ff1a 	bl	800ac5c <I2C_WaitOnTXEFlagUntilTimeout>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00d      	beq.n	8009e4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d107      	bne.n	8009e46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e06b      	b.n	8009f22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	781a      	ldrb	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	3b01      	subs	r3, #1
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e72:	3b01      	subs	r3, #1
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	f003 0304 	and.w	r3, r3, #4
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	d11b      	bne.n	8009ec0 <HAL_I2C_Master_Transmit+0x188>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d017      	beq.n	8009ec0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	3b01      	subs	r3, #1
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	6a39      	ldr	r1, [r7, #32]
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 ff11 	bl	800acec <I2C_WaitOnBTFFlagUntilTimeout>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00d      	beq.n	8009eec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	d107      	bne.n	8009ee8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ee6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e01a      	b.n	8009f22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d194      	bne.n	8009e1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2220      	movs	r2, #32
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	e000      	b.n	8009f22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009f20:	2302      	movs	r3, #2
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	00100002 	.word	0x00100002
 8009f30:	ffff0000 	.word	0xffff0000

08009f34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af02      	add	r7, sp, #8
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	461a      	mov	r2, r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	817b      	strh	r3, [r7, #10]
 8009f46:	460b      	mov	r3, r1
 8009f48:	813b      	strh	r3, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009f4e:	f7fe ff5d 	bl	8008e0c <HAL_GetTick>
 8009f52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	f040 80d9 	bne.w	800a114 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	2319      	movs	r3, #25
 8009f68:	2201      	movs	r2, #1
 8009f6a:	496d      	ldr	r1, [pc, #436]	; (800a120 <HAL_I2C_Mem_Write+0x1ec>)
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 fd5b 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	e0cc      	b.n	800a116 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_I2C_Mem_Write+0x56>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e0c5      	b.n	800a116 <HAL_I2C_Mem_Write+0x1e2>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d007      	beq.n	8009fb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f042 0201 	orr.w	r2, r2, #1
 8009fae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2221      	movs	r2, #33	; 0x21
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2240      	movs	r2, #64	; 0x40
 8009fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6a3a      	ldr	r2, [r7, #32]
 8009fda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4a4d      	ldr	r2, [pc, #308]	; (800a124 <HAL_I2C_Mem_Write+0x1f0>)
 8009ff0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ff2:	88f8      	ldrh	r0, [r7, #6]
 8009ff4:	893a      	ldrh	r2, [r7, #8]
 8009ff6:	8979      	ldrh	r1, [r7, #10]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	4603      	mov	r3, r0
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 fb92 	bl	800a72c <I2C_RequestMemoryWrite>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d052      	beq.n	800a0b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e081      	b.n	800a116 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 fe20 	bl	800ac5c <I2C_WaitOnTXEFlagUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00d      	beq.n	800a03e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	2b04      	cmp	r3, #4
 800a028:	d107      	bne.n	800a03a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a038:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e06b      	b.n	800a116 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a058:	3b01      	subs	r3, #1
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a064:	b29b      	uxth	r3, r3
 800a066:	3b01      	subs	r3, #1
 800a068:	b29a      	uxth	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b04      	cmp	r3, #4
 800a07a:	d11b      	bne.n	800a0b4 <HAL_I2C_Mem_Write+0x180>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a080:	2b00      	cmp	r3, #0
 800a082:	d017      	beq.n	800a0b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1aa      	bne.n	800a012 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 fe13 	bl	800acec <I2C_WaitOnBTFFlagUntilTimeout>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00d      	beq.n	800a0e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	d107      	bne.n	800a0e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e016      	b.n	800a116 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	e000      	b.n	800a116 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a114:	2302      	movs	r3, #2
  }
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	00100002 	.word	0x00100002
 800a124:	ffff0000 	.word	0xffff0000

0800a128 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08c      	sub	sp, #48	; 0x30
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	4608      	mov	r0, r1
 800a132:	4611      	mov	r1, r2
 800a134:	461a      	mov	r2, r3
 800a136:	4603      	mov	r3, r0
 800a138:	817b      	strh	r3, [r7, #10]
 800a13a:	460b      	mov	r3, r1
 800a13c:	813b      	strh	r3, [r7, #8]
 800a13e:	4613      	mov	r3, r2
 800a140:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a146:	f7fe fe61 	bl	8008e0c <HAL_GetTick>
 800a14a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b20      	cmp	r3, #32
 800a156:	f040 8244 	bne.w	800a5e2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	2319      	movs	r3, #25
 800a160:	2201      	movs	r2, #1
 800a162:	4982      	ldr	r1, [pc, #520]	; (800a36c <HAL_I2C_Mem_Read+0x244>)
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 fc5f 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a170:	2302      	movs	r3, #2
 800a172:	e237      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <HAL_I2C_Mem_Read+0x5a>
 800a17e:	2302      	movs	r3, #2
 800a180:	e230      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b01      	cmp	r3, #1
 800a196:	d007      	beq.n	800a1a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 0201 	orr.w	r2, r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2222      	movs	r2, #34	; 0x22
 800a1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2240      	movs	r2, #64	; 0x40
 800a1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a1d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4a62      	ldr	r2, [pc, #392]	; (800a370 <HAL_I2C_Mem_Read+0x248>)
 800a1e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1ea:	88f8      	ldrh	r0, [r7, #6]
 800a1ec:	893a      	ldrh	r2, [r7, #8]
 800a1ee:	8979      	ldrh	r1, [r7, #10]
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f000 fb2c 	bl	800a858 <I2C_RequestMemoryRead>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e1ec      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d113      	bne.n	800a23a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a212:	2300      	movs	r3, #0
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	61fb      	str	r3, [r7, #28]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	61fb      	str	r3, [r7, #28]
 800a226:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	e1c0      	b.n	800a5bc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d11e      	bne.n	800a280 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a250:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a252:	b672      	cpsid	i
}
 800a254:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a256:	2300      	movs	r3, #0
 800a258:	61bb      	str	r3, [r7, #24]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	61bb      	str	r3, [r7, #24]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	61bb      	str	r3, [r7, #24]
 800a26a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a27a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a27c:	b662      	cpsie	i
}
 800a27e:	e035      	b.n	800a2ec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a284:	2b02      	cmp	r3, #2
 800a286:	d11e      	bne.n	800a2c6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a296:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a298:	b672      	cpsid	i
}
 800a29a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a29c:	2300      	movs	r3, #0
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a2c2:	b662      	cpsie	i
}
 800a2c4:	e012      	b.n	800a2ec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	613b      	str	r3, [r7, #16]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	613b      	str	r3, [r7, #16]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	613b      	str	r3, [r7, #16]
 800a2ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a2ec:	e166      	b.n	800a5bc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	f200 811f 	bhi.w	800a536 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d123      	bne.n	800a348 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a302:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f000 fd39 	bl	800ad7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e167      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691a      	ldr	r2, [r3, #16]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	b2d2      	uxtb	r2, r2
 800a320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a330:	3b01      	subs	r3, #1
 800a332:	b29a      	uxth	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	3b01      	subs	r3, #1
 800a340:	b29a      	uxth	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a346:	e139      	b.n	800a5bc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d152      	bne.n	800a3f6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	2200      	movs	r2, #0
 800a358:	4906      	ldr	r1, [pc, #24]	; (800a374 <HAL_I2C_Mem_Read+0x24c>)
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 fb64 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d008      	beq.n	800a378 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e13c      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
 800a36a:	bf00      	nop
 800a36c:	00100002 	.word	0x00100002
 800a370:	ffff0000 	.word	0xffff0000
 800a374:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a378:	b672      	cpsid	i
}
 800a37a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a38a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691a      	ldr	r2, [r3, #16]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	b2d2      	uxtb	r2, r2
 800a398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a3be:	b662      	cpsie	i
}
 800a3c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	691a      	ldr	r2, [r3, #16]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	b2d2      	uxtb	r2, r2
 800a3ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3f4:	e0e2      	b.n	800a5bc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	497b      	ldr	r1, [pc, #492]	; (800a5ec <HAL_I2C_Mem_Read+0x4c4>)
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 fb11 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e0e9      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a41e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a420:	b672      	cpsid	i
}
 800a422:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	691a      	ldr	r2, [r3, #16]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a440:	3b01      	subs	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	3b01      	subs	r3, #1
 800a450:	b29a      	uxth	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a456:	4b66      	ldr	r3, [pc, #408]	; (800a5f0 <HAL_I2C_Mem_Read+0x4c8>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	08db      	lsrs	r3, r3, #3
 800a45c:	4a65      	ldr	r2, [pc, #404]	; (800a5f4 <HAL_I2C_Mem_Read+0x4cc>)
 800a45e:	fba2 2303 	umull	r2, r3, r2, r3
 800a462:	0a1a      	lsrs	r2, r3, #8
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	00da      	lsls	r2, r3, #3
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	3b01      	subs	r3, #1
 800a474:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d118      	bne.n	800a4ae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2220      	movs	r2, #32
 800a486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	f043 0220 	orr.w	r2, r3, #32
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a49e:	b662      	cpsie	i
}
 800a4a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e09a      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	f003 0304 	and.w	r3, r3, #4
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	d1d9      	bne.n	800a470 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691a      	ldr	r2, [r3, #16]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a4fe:	b662      	cpsie	i
}
 800a500:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	b2d2      	uxtb	r2, r2
 800a50e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	1c5a      	adds	r2, r3, #1
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a51e:	3b01      	subs	r3, #1
 800a520:	b29a      	uxth	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	3b01      	subs	r3, #1
 800a52e:	b29a      	uxth	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a534:	e042      	b.n	800a5bc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a538:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 fc1e 	bl	800ad7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e04c      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	691a      	ldr	r2, [r3, #16]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	b2d2      	uxtb	r2, r2
 800a556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a566:	3b01      	subs	r3, #1
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a572:	b29b      	uxth	r3, r3
 800a574:	3b01      	subs	r3, #1
 800a576:	b29a      	uxth	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b04      	cmp	r3, #4
 800a588:	d118      	bne.n	800a5bc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	691a      	ldr	r2, [r3, #16]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	b2d2      	uxtb	r2, r2
 800a596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f47f ae94 	bne.w	800a2ee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2220      	movs	r2, #32
 800a5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e000      	b.n	800a5e4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a5e2:	2302      	movs	r3, #2
  }
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3728      	adds	r7, #40	; 0x28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	00010004 	.word	0x00010004
 800a5f0:	20000960 	.word	0x20000960
 800a5f4:	14f8b589 	.word	0x14f8b589

0800a5f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a606:	b2db      	uxtb	r3, r3
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bc80      	pop	{r7}
 800a610:	4770      	bx	lr

0800a612 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a61e:	4618      	mov	r0, r3
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr

0800a628 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b088      	sub	sp, #32
 800a62c:	af02      	add	r7, sp, #8
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	460b      	mov	r3, r1
 800a636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b08      	cmp	r3, #8
 800a642:	d006      	beq.n	800a652 <I2C_MasterRequestWrite+0x2a>
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d003      	beq.n	800a652 <I2C_MasterRequestWrite+0x2a>
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a650:	d108      	bne.n	800a664 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	e00b      	b.n	800a67c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a668:	2b12      	cmp	r3, #18
 800a66a:	d107      	bne.n	800a67c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a67a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f9cd 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00d      	beq.n	800a6b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a69e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a2:	d103      	bne.n	800a6ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e035      	b.n	800a71c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b8:	d108      	bne.n	800a6cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6ba:	897b      	ldrh	r3, [r7, #10]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	461a      	mov	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6c8:	611a      	str	r2, [r3, #16]
 800a6ca:	e01b      	b.n	800a704 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a6cc:	897b      	ldrh	r3, [r7, #10]
 800a6ce:	11db      	asrs	r3, r3, #7
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	f003 0306 	and.w	r3, r3, #6
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f063 030f 	orn	r3, r3, #15
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	490e      	ldr	r1, [pc, #56]	; (800a724 <I2C_MasterRequestWrite+0xfc>)
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 fa16 	bl	800ab1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e010      	b.n	800a71c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a6fa:	897b      	ldrh	r3, [r7, #10]
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	4907      	ldr	r1, [pc, #28]	; (800a728 <I2C_MasterRequestWrite+0x100>)
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 fa06 	bl	800ab1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e000      	b.n	800a71c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	00010008 	.word	0x00010008
 800a728:	00010002 	.word	0x00010002

0800a72c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af02      	add	r7, sp, #8
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	4608      	mov	r0, r1
 800a736:	4611      	mov	r1, r2
 800a738:	461a      	mov	r2, r3
 800a73a:	4603      	mov	r3, r0
 800a73c:	817b      	strh	r3, [r7, #10]
 800a73e:	460b      	mov	r3, r1
 800a740:	813b      	strh	r3, [r7, #8]
 800a742:	4613      	mov	r3, r2
 800a744:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a754:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 f960 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00d      	beq.n	800a78a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a77c:	d103      	bne.n	800a786 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a784:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e05f      	b.n	800a84a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a78a:	897b      	ldrh	r3, [r7, #10]
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a798:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	6a3a      	ldr	r2, [r7, #32]
 800a79e:	492d      	ldr	r1, [pc, #180]	; (800a854 <I2C_RequestMemoryWrite+0x128>)
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 f9bb 	bl	800ab1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e04c      	b.n	800a84a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	617b      	str	r3, [r7, #20]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	617b      	str	r3, [r7, #20]
 800a7c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c8:	6a39      	ldr	r1, [r7, #32]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 fa46 	bl	800ac5c <I2C_WaitOnTXEFlagUntilTimeout>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00d      	beq.n	800a7f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	2b04      	cmp	r3, #4
 800a7dc:	d107      	bne.n	800a7ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e02b      	b.n	800a84a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7f2:	88fb      	ldrh	r3, [r7, #6]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d105      	bne.n	800a804 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7f8:	893b      	ldrh	r3, [r7, #8]
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	611a      	str	r2, [r3, #16]
 800a802:	e021      	b.n	800a848 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a804:	893b      	ldrh	r3, [r7, #8]
 800a806:	0a1b      	lsrs	r3, r3, #8
 800a808:	b29b      	uxth	r3, r3
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a814:	6a39      	ldr	r1, [r7, #32]
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 fa20 	bl	800ac5c <I2C_WaitOnTXEFlagUntilTimeout>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00d      	beq.n	800a83e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a826:	2b04      	cmp	r3, #4
 800a828:	d107      	bne.n	800a83a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a838:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e005      	b.n	800a84a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a83e:	893b      	ldrh	r3, [r7, #8]
 800a840:	b2da      	uxtb	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	00010002 	.word	0x00010002

0800a858 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af02      	add	r7, sp, #8
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	4608      	mov	r0, r1
 800a862:	4611      	mov	r1, r2
 800a864:	461a      	mov	r2, r3
 800a866:	4603      	mov	r3, r0
 800a868:	817b      	strh	r3, [r7, #10]
 800a86a:	460b      	mov	r3, r1
 800a86c:	813b      	strh	r3, [r7, #8]
 800a86e:	4613      	mov	r3, r2
 800a870:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a880:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a890:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	2200      	movs	r2, #0
 800a89a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f000 f8c2 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00d      	beq.n	800a8c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b8:	d103      	bne.n	800a8c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e0aa      	b.n	800aa1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8c6:	897b      	ldrh	r3, [r7, #10]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a8d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	6a3a      	ldr	r2, [r7, #32]
 800a8da:	4952      	ldr	r1, [pc, #328]	; (800aa24 <I2C_RequestMemoryRead+0x1cc>)
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f91d 	bl	800ab1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e097      	b.n	800aa1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a904:	6a39      	ldr	r1, [r7, #32]
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f000 f9a8 	bl	800ac5c <I2C_WaitOnTXEFlagUntilTimeout>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00d      	beq.n	800a92e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	2b04      	cmp	r3, #4
 800a918:	d107      	bne.n	800a92a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a928:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e076      	b.n	800aa1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a92e:	88fb      	ldrh	r3, [r7, #6]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d105      	bne.n	800a940 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a934:	893b      	ldrh	r3, [r7, #8]
 800a936:	b2da      	uxtb	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	611a      	str	r2, [r3, #16]
 800a93e:	e021      	b.n	800a984 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a940:	893b      	ldrh	r3, [r7, #8]
 800a942:	0a1b      	lsrs	r3, r3, #8
 800a944:	b29b      	uxth	r3, r3
 800a946:	b2da      	uxtb	r2, r3
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a950:	6a39      	ldr	r1, [r7, #32]
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 f982 	bl	800ac5c <I2C_WaitOnTXEFlagUntilTimeout>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00d      	beq.n	800a97a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a962:	2b04      	cmp	r3, #4
 800a964:	d107      	bne.n	800a976 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a974:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e050      	b.n	800aa1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a97a:	893b      	ldrh	r3, [r7, #8]
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a986:	6a39      	ldr	r1, [r7, #32]
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f967 	bl	800ac5c <I2C_WaitOnTXEFlagUntilTimeout>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00d      	beq.n	800a9b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a998:	2b04      	cmp	r3, #4
 800a99a:	d107      	bne.n	800a9ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e035      	b.n	800aa1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 f82b 	bl	800aa28 <I2C_WaitOnFlagUntilTimeout>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00d      	beq.n	800a9f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9e6:	d103      	bne.n	800a9f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e013      	b.n	800aa1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a9f4:	897b      	ldrh	r3, [r7, #10]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f043 0301 	orr.w	r3, r3, #1
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	6a3a      	ldr	r2, [r7, #32]
 800aa08:	4906      	ldr	r1, [pc, #24]	; (800aa24 <I2C_RequestMemoryRead+0x1cc>)
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 f886 	bl	800ab1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3718      	adds	r7, #24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	00010002 	.word	0x00010002

0800aa28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa38:	e048      	b.n	800aacc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa40:	d044      	beq.n	800aacc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa42:	f7fe f9e3 	bl	8008e0c <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d302      	bcc.n	800aa58 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d139      	bne.n	800aacc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	0c1b      	lsrs	r3, r3, #16
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d10d      	bne.n	800aa7e <I2C_WaitOnFlagUntilTimeout+0x56>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	43da      	mvns	r2, r3
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bf0c      	ite	eq
 800aa74:	2301      	moveq	r3, #1
 800aa76:	2300      	movne	r3, #0
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	e00c      	b.n	800aa98 <I2C_WaitOnFlagUntilTimeout+0x70>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	43da      	mvns	r2, r3
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf0c      	ite	eq
 800aa90:	2301      	moveq	r3, #1
 800aa92:	2300      	movne	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	461a      	mov	r2, r3
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d116      	bne.n	800aacc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab8:	f043 0220 	orr.w	r2, r3, #32
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e023      	b.n	800ab14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	0c1b      	lsrs	r3, r3, #16
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d10d      	bne.n	800aaf2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	43da      	mvns	r2, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4013      	ands	r3, r2
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bf0c      	ite	eq
 800aae8:	2301      	moveq	r3, #1
 800aaea:	2300      	movne	r3, #0
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	461a      	mov	r2, r3
 800aaf0:	e00c      	b.n	800ab0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	43da      	mvns	r2, r3
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	4013      	ands	r3, r2
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bf0c      	ite	eq
 800ab04:	2301      	moveq	r3, #1
 800ab06:	2300      	movne	r3, #0
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d093      	beq.n	800aa3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab2a:	e071      	b.n	800ac10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab3a:	d123      	bne.n	800ab84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2220      	movs	r2, #32
 800ab60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab70:	f043 0204 	orr.w	r2, r3, #4
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e067      	b.n	800ac54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8a:	d041      	beq.n	800ac10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab8c:	f7fe f93e 	bl	8008e0c <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d302      	bcc.n	800aba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d136      	bne.n	800ac10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	0c1b      	lsrs	r3, r3, #16
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d10c      	bne.n	800abc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	43da      	mvns	r2, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	4013      	ands	r3, r2
 800abb8:	b29b      	uxth	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bf14      	ite	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	2300      	moveq	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	e00b      	b.n	800abde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	43da      	mvns	r2, r3
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	4013      	ands	r3, r2
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	bf14      	ite	ne
 800abd8:	2301      	movne	r3, #1
 800abda:	2300      	moveq	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d016      	beq.n	800ac10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2220      	movs	r2, #32
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	f043 0220 	orr.w	r2, r3, #32
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e021      	b.n	800ac54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	0c1b      	lsrs	r3, r3, #16
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d10c      	bne.n	800ac34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	43da      	mvns	r2, r3
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	4013      	ands	r3, r2
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bf14      	ite	ne
 800ac2c:	2301      	movne	r3, #1
 800ac2e:	2300      	moveq	r3, #0
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	e00b      	b.n	800ac4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	43da      	mvns	r2, r3
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	bf14      	ite	ne
 800ac46:	2301      	movne	r3, #1
 800ac48:	2300      	moveq	r3, #0
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f47f af6d 	bne.w	800ab2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac68:	e034      	b.n	800acd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 f8e3 	bl	800ae36 <I2C_IsAcknowledgeFailed>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e034      	b.n	800ace4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac80:	d028      	beq.n	800acd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac82:	f7fe f8c3 	bl	8008e0c <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d302      	bcc.n	800ac98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d11d      	bne.n	800acd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca2:	2b80      	cmp	r3, #128	; 0x80
 800aca4:	d016      	beq.n	800acd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2220      	movs	r2, #32
 800acb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc0:	f043 0220 	orr.w	r2, r3, #32
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e007      	b.n	800ace4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acde:	2b80      	cmp	r3, #128	; 0x80
 800ace0:	d1c3      	bne.n	800ac6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acf8:	e034      	b.n	800ad64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 f89b 	bl	800ae36 <I2C_IsAcknowledgeFailed>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e034      	b.n	800ad74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad10:	d028      	beq.n	800ad64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad12:	f7fe f87b 	bl	8008e0c <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d302      	bcc.n	800ad28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d11d      	bne.n	800ad64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	f003 0304 	and.w	r3, r3, #4
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d016      	beq.n	800ad64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad50:	f043 0220 	orr.w	r2, r3, #32
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e007      	b.n	800ad74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	f003 0304 	and.w	r3, r3, #4
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	d1c3      	bne.n	800acfa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad88:	e049      	b.n	800ae1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	f003 0310 	and.w	r3, r3, #16
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	d119      	bne.n	800adcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f06f 0210 	mvn.w	r2, #16
 800ada0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2220      	movs	r2, #32
 800adac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e030      	b.n	800ae2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adcc:	f7fe f81e 	bl	8008e0c <HAL_GetTick>
 800add0:	4602      	mov	r2, r0
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	429a      	cmp	r2, r3
 800adda:	d302      	bcc.n	800ade2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d11d      	bne.n	800ae1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adec:	2b40      	cmp	r3, #64	; 0x40
 800adee:	d016      	beq.n	800ae1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	f043 0220 	orr.w	r2, r3, #32
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e007      	b.n	800ae2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae28:	2b40      	cmp	r3, #64	; 0x40
 800ae2a:	d1ae      	bne.n	800ad8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae4c:	d11b      	bne.n	800ae86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae72:	f043 0204 	orr.w	r2, r3, #4
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bc80      	pop	{r7}
 800ae90:	4770      	bx	lr
	...

0800ae94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e272      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8087 	beq.w	800afc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aeb4:	4b92      	ldr	r3, [pc, #584]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	f003 030c 	and.w	r3, r3, #12
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d00c      	beq.n	800aeda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800aec0:	4b8f      	ldr	r3, [pc, #572]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f003 030c 	and.w	r3, r3, #12
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d112      	bne.n	800aef2 <HAL_RCC_OscConfig+0x5e>
 800aecc:	4b8c      	ldr	r3, [pc, #560]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed8:	d10b      	bne.n	800aef2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeda:	4b89      	ldr	r3, [pc, #548]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d06c      	beq.n	800afc0 <HAL_RCC_OscConfig+0x12c>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d168      	bne.n	800afc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e24c      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aefa:	d106      	bne.n	800af0a <HAL_RCC_OscConfig+0x76>
 800aefc:	4b80      	ldr	r3, [pc, #512]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a7f      	ldr	r2, [pc, #508]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	e02e      	b.n	800af68 <HAL_RCC_OscConfig+0xd4>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10c      	bne.n	800af2c <HAL_RCC_OscConfig+0x98>
 800af12:	4b7b      	ldr	r3, [pc, #492]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a7a      	ldr	r2, [pc, #488]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	4b78      	ldr	r3, [pc, #480]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a77      	ldr	r2, [pc, #476]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af28:	6013      	str	r3, [r2, #0]
 800af2a:	e01d      	b.n	800af68 <HAL_RCC_OscConfig+0xd4>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af34:	d10c      	bne.n	800af50 <HAL_RCC_OscConfig+0xbc>
 800af36:	4b72      	ldr	r3, [pc, #456]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a71      	ldr	r2, [pc, #452]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	4b6f      	ldr	r3, [pc, #444]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a6e      	ldr	r2, [pc, #440]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	e00b      	b.n	800af68 <HAL_RCC_OscConfig+0xd4>
 800af50:	4b6b      	ldr	r3, [pc, #428]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a6a      	ldr	r2, [pc, #424]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	4b68      	ldr	r3, [pc, #416]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a67      	ldr	r2, [pc, #412]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d013      	beq.n	800af98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af70:	f7fd ff4c 	bl	8008e0c <HAL_GetTick>
 800af74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af76:	e008      	b.n	800af8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af78:	f7fd ff48 	bl	8008e0c <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	2b64      	cmp	r3, #100	; 0x64
 800af84:	d901      	bls.n	800af8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800af86:	2303      	movs	r3, #3
 800af88:	e200      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af8a:	4b5d      	ldr	r3, [pc, #372]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0f0      	beq.n	800af78 <HAL_RCC_OscConfig+0xe4>
 800af96:	e014      	b.n	800afc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af98:	f7fd ff38 	bl	8008e0c <HAL_GetTick>
 800af9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af9e:	e008      	b.n	800afb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afa0:	f7fd ff34 	bl	8008e0c <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	2b64      	cmp	r3, #100	; 0x64
 800afac:	d901      	bls.n	800afb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e1ec      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afb2:	4b53      	ldr	r3, [pc, #332]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1f0      	bne.n	800afa0 <HAL_RCC_OscConfig+0x10c>
 800afbe:	e000      	b.n	800afc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d063      	beq.n	800b096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800afce:	4b4c      	ldr	r3, [pc, #304]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	f003 030c 	and.w	r3, r3, #12
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00b      	beq.n	800aff2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800afda:	4b49      	ldr	r3, [pc, #292]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f003 030c 	and.w	r3, r3, #12
 800afe2:	2b08      	cmp	r3, #8
 800afe4:	d11c      	bne.n	800b020 <HAL_RCC_OscConfig+0x18c>
 800afe6:	4b46      	ldr	r3, [pc, #280]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d116      	bne.n	800b020 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aff2:	4b43      	ldr	r3, [pc, #268]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0302 	and.w	r3, r3, #2
 800affa:	2b00      	cmp	r3, #0
 800affc:	d005      	beq.n	800b00a <HAL_RCC_OscConfig+0x176>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d001      	beq.n	800b00a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e1c0      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b00a:	4b3d      	ldr	r3, [pc, #244]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	4939      	ldr	r1, [pc, #228]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b01e:	e03a      	b.n	800b096 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d020      	beq.n	800b06a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b028:	4b36      	ldr	r3, [pc, #216]	; (800b104 <HAL_RCC_OscConfig+0x270>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b02e:	f7fd feed 	bl	8008e0c <HAL_GetTick>
 800b032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b034:	e008      	b.n	800b048 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b036:	f7fd fee9 	bl	8008e0c <HAL_GetTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	2b02      	cmp	r3, #2
 800b042:	d901      	bls.n	800b048 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e1a1      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b048:	4b2d      	ldr	r3, [pc, #180]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0302 	and.w	r3, r3, #2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d0f0      	beq.n	800b036 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b054:	4b2a      	ldr	r3, [pc, #168]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	4927      	ldr	r1, [pc, #156]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800b064:	4313      	orrs	r3, r2
 800b066:	600b      	str	r3, [r1, #0]
 800b068:	e015      	b.n	800b096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b06a:	4b26      	ldr	r3, [pc, #152]	; (800b104 <HAL_RCC_OscConfig+0x270>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b070:	f7fd fecc 	bl	8008e0c <HAL_GetTick>
 800b074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b076:	e008      	b.n	800b08a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b078:	f7fd fec8 	bl	8008e0c <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b02      	cmp	r3, #2
 800b084:	d901      	bls.n	800b08a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e180      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b08a:	4b1d      	ldr	r3, [pc, #116]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1f0      	bne.n	800b078 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0308 	and.w	r3, r3, #8
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d03a      	beq.n	800b118 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d019      	beq.n	800b0de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0aa:	4b17      	ldr	r3, [pc, #92]	; (800b108 <HAL_RCC_OscConfig+0x274>)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0b0:	f7fd feac 	bl	8008e0c <HAL_GetTick>
 800b0b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0b6:	e008      	b.n	800b0ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0b8:	f7fd fea8 	bl	8008e0c <HAL_GetTick>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d901      	bls.n	800b0ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e160      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <HAL_RCC_OscConfig+0x26c>)
 800b0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ce:	f003 0302 	and.w	r3, r3, #2
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0f0      	beq.n	800b0b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	f000 face 	bl	800b678 <RCC_Delay>
 800b0dc:	e01c      	b.n	800b118 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0de:	4b0a      	ldr	r3, [pc, #40]	; (800b108 <HAL_RCC_OscConfig+0x274>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0e4:	f7fd fe92 	bl	8008e0c <HAL_GetTick>
 800b0e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0ea:	e00f      	b.n	800b10c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0ec:	f7fd fe8e 	bl	8008e0c <HAL_GetTick>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d908      	bls.n	800b10c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e146      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
 800b0fe:	bf00      	nop
 800b100:	40021000 	.word	0x40021000
 800b104:	42420000 	.word	0x42420000
 800b108:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b10c:	4b92      	ldr	r3, [pc, #584]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	f003 0302 	and.w	r3, r3, #2
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e9      	bne.n	800b0ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 80a6 	beq.w	800b272 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b126:	2300      	movs	r3, #0
 800b128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b12a:	4b8b      	ldr	r3, [pc, #556]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b12c:	69db      	ldr	r3, [r3, #28]
 800b12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10d      	bne.n	800b152 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b136:	4b88      	ldr	r3, [pc, #544]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	4a87      	ldr	r2, [pc, #540]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b13c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b140:	61d3      	str	r3, [r2, #28]
 800b142:	4b85      	ldr	r3, [pc, #532]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b144:	69db      	ldr	r3, [r3, #28]
 800b146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b14a:	60bb      	str	r3, [r7, #8]
 800b14c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b14e:	2301      	movs	r3, #1
 800b150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b152:	4b82      	ldr	r3, [pc, #520]	; (800b35c <HAL_RCC_OscConfig+0x4c8>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d118      	bne.n	800b190 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b15e:	4b7f      	ldr	r3, [pc, #508]	; (800b35c <HAL_RCC_OscConfig+0x4c8>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a7e      	ldr	r2, [pc, #504]	; (800b35c <HAL_RCC_OscConfig+0x4c8>)
 800b164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b16a:	f7fd fe4f 	bl	8008e0c <HAL_GetTick>
 800b16e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b170:	e008      	b.n	800b184 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b172:	f7fd fe4b 	bl	8008e0c <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	2b64      	cmp	r3, #100	; 0x64
 800b17e:	d901      	bls.n	800b184 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e103      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b184:	4b75      	ldr	r3, [pc, #468]	; (800b35c <HAL_RCC_OscConfig+0x4c8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0f0      	beq.n	800b172 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d106      	bne.n	800b1a6 <HAL_RCC_OscConfig+0x312>
 800b198:	4b6f      	ldr	r3, [pc, #444]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	4a6e      	ldr	r2, [pc, #440]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b19e:	f043 0301 	orr.w	r3, r3, #1
 800b1a2:	6213      	str	r3, [r2, #32]
 800b1a4:	e02d      	b.n	800b202 <HAL_RCC_OscConfig+0x36e>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10c      	bne.n	800b1c8 <HAL_RCC_OscConfig+0x334>
 800b1ae:	4b6a      	ldr	r3, [pc, #424]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	4a69      	ldr	r2, [pc, #420]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1b4:	f023 0301 	bic.w	r3, r3, #1
 800b1b8:	6213      	str	r3, [r2, #32]
 800b1ba:	4b67      	ldr	r3, [pc, #412]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	4a66      	ldr	r2, [pc, #408]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1c0:	f023 0304 	bic.w	r3, r3, #4
 800b1c4:	6213      	str	r3, [r2, #32]
 800b1c6:	e01c      	b.n	800b202 <HAL_RCC_OscConfig+0x36e>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	2b05      	cmp	r3, #5
 800b1ce:	d10c      	bne.n	800b1ea <HAL_RCC_OscConfig+0x356>
 800b1d0:	4b61      	ldr	r3, [pc, #388]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1d2:	6a1b      	ldr	r3, [r3, #32]
 800b1d4:	4a60      	ldr	r2, [pc, #384]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1d6:	f043 0304 	orr.w	r3, r3, #4
 800b1da:	6213      	str	r3, [r2, #32]
 800b1dc:	4b5e      	ldr	r3, [pc, #376]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1de:	6a1b      	ldr	r3, [r3, #32]
 800b1e0:	4a5d      	ldr	r2, [pc, #372]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1e2:	f043 0301 	orr.w	r3, r3, #1
 800b1e6:	6213      	str	r3, [r2, #32]
 800b1e8:	e00b      	b.n	800b202 <HAL_RCC_OscConfig+0x36e>
 800b1ea:	4b5b      	ldr	r3, [pc, #364]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	4a5a      	ldr	r2, [pc, #360]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1f0:	f023 0301 	bic.w	r3, r3, #1
 800b1f4:	6213      	str	r3, [r2, #32]
 800b1f6:	4b58      	ldr	r3, [pc, #352]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	4a57      	ldr	r2, [pc, #348]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b1fc:	f023 0304 	bic.w	r3, r3, #4
 800b200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d015      	beq.n	800b236 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b20a:	f7fd fdff 	bl	8008e0c <HAL_GetTick>
 800b20e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b210:	e00a      	b.n	800b228 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b212:	f7fd fdfb 	bl	8008e0c <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b220:	4293      	cmp	r3, r2
 800b222:	d901      	bls.n	800b228 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b224:	2303      	movs	r3, #3
 800b226:	e0b1      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b228:	4b4b      	ldr	r3, [pc, #300]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b22a:	6a1b      	ldr	r3, [r3, #32]
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0ee      	beq.n	800b212 <HAL_RCC_OscConfig+0x37e>
 800b234:	e014      	b.n	800b260 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b236:	f7fd fde9 	bl	8008e0c <HAL_GetTick>
 800b23a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b23c:	e00a      	b.n	800b254 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b23e:	f7fd fde5 	bl	8008e0c <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	f241 3288 	movw	r2, #5000	; 0x1388
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d901      	bls.n	800b254 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e09b      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b254:	4b40      	ldr	r3, [pc, #256]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	f003 0302 	and.w	r3, r3, #2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1ee      	bne.n	800b23e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d105      	bne.n	800b272 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b266:	4b3c      	ldr	r3, [pc, #240]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	4a3b      	ldr	r2, [pc, #236]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b26c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	69db      	ldr	r3, [r3, #28]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 8087 	beq.w	800b38a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b27c:	4b36      	ldr	r3, [pc, #216]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f003 030c 	and.w	r3, r3, #12
 800b284:	2b08      	cmp	r3, #8
 800b286:	d061      	beq.n	800b34c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d146      	bne.n	800b31e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b290:	4b33      	ldr	r3, [pc, #204]	; (800b360 <HAL_RCC_OscConfig+0x4cc>)
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b296:	f7fd fdb9 	bl	8008e0c <HAL_GetTick>
 800b29a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b29c:	e008      	b.n	800b2b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b29e:	f7fd fdb5 	bl	8008e0c <HAL_GetTick>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d901      	bls.n	800b2b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e06d      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b2b0:	4b29      	ldr	r3, [pc, #164]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1f0      	bne.n	800b29e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c4:	d108      	bne.n	800b2d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b2c6:	4b24      	ldr	r3, [pc, #144]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	4921      	ldr	r1, [pc, #132]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b2d8:	4b1f      	ldr	r3, [pc, #124]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a19      	ldr	r1, [r3, #32]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	491b      	ldr	r1, [pc, #108]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2f0:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <HAL_RCC_OscConfig+0x4cc>)
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2f6:	f7fd fd89 	bl	8008e0c <HAL_GetTick>
 800b2fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b2fc:	e008      	b.n	800b310 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2fe:	f7fd fd85 	bl	8008e0c <HAL_GetTick>
 800b302:	4602      	mov	r2, r0
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d901      	bls.n	800b310 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
 800b30e:	e03d      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0f0      	beq.n	800b2fe <HAL_RCC_OscConfig+0x46a>
 800b31c:	e035      	b.n	800b38a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b31e:	4b10      	ldr	r3, [pc, #64]	; (800b360 <HAL_RCC_OscConfig+0x4cc>)
 800b320:	2200      	movs	r2, #0
 800b322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b324:	f7fd fd72 	bl	8008e0c <HAL_GetTick>
 800b328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b32a:	e008      	b.n	800b33e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b32c:	f7fd fd6e 	bl	8008e0c <HAL_GetTick>
 800b330:	4602      	mov	r2, r0
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	2b02      	cmp	r3, #2
 800b338:	d901      	bls.n	800b33e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b33a:	2303      	movs	r3, #3
 800b33c:	e026      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b33e:	4b06      	ldr	r3, [pc, #24]	; (800b358 <HAL_RCC_OscConfig+0x4c4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1f0      	bne.n	800b32c <HAL_RCC_OscConfig+0x498>
 800b34a:	e01e      	b.n	800b38a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d107      	bne.n	800b364 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e019      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
 800b358:	40021000 	.word	0x40021000
 800b35c:	40007000 	.word	0x40007000
 800b360:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b364:	4b0b      	ldr	r3, [pc, #44]	; (800b394 <HAL_RCC_OscConfig+0x500>)
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	429a      	cmp	r2, r3
 800b376:	d106      	bne.n	800b386 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b382:	429a      	cmp	r2, r3
 800b384:	d001      	beq.n	800b38a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e000      	b.n	800b38c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	40021000 	.word	0x40021000

0800b398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d101      	bne.n	800b3ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e0d0      	b.n	800b54e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3ac:	4b6a      	ldr	r3, [pc, #424]	; (800b558 <HAL_RCC_ClockConfig+0x1c0>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0307 	and.w	r3, r3, #7
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d910      	bls.n	800b3dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ba:	4b67      	ldr	r3, [pc, #412]	; (800b558 <HAL_RCC_ClockConfig+0x1c0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f023 0207 	bic.w	r2, r3, #7
 800b3c2:	4965      	ldr	r1, [pc, #404]	; (800b558 <HAL_RCC_ClockConfig+0x1c0>)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3ca:	4b63      	ldr	r3, [pc, #396]	; (800b558 <HAL_RCC_ClockConfig+0x1c0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0307 	and.w	r3, r3, #7
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d001      	beq.n	800b3dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e0b8      	b.n	800b54e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d020      	beq.n	800b42a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3f4:	4b59      	ldr	r3, [pc, #356]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	4a58      	ldr	r2, [pc, #352]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b3fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b3fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0308 	and.w	r3, r3, #8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d005      	beq.n	800b418 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b40c:	4b53      	ldr	r3, [pc, #332]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4a52      	ldr	r2, [pc, #328]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b412:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b416:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b418:	4b50      	ldr	r3, [pc, #320]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	494d      	ldr	r1, [pc, #308]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b426:	4313      	orrs	r3, r2
 800b428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d040      	beq.n	800b4b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d107      	bne.n	800b44e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b43e:	4b47      	ldr	r3, [pc, #284]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b446:	2b00      	cmp	r3, #0
 800b448:	d115      	bne.n	800b476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e07f      	b.n	800b54e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	2b02      	cmp	r3, #2
 800b454:	d107      	bne.n	800b466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b456:	4b41      	ldr	r3, [pc, #260]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d109      	bne.n	800b476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e073      	b.n	800b54e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b466:	4b3d      	ldr	r3, [pc, #244]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0302 	and.w	r3, r3, #2
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e06b      	b.n	800b54e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b476:	4b39      	ldr	r3, [pc, #228]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f023 0203 	bic.w	r2, r3, #3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	4936      	ldr	r1, [pc, #216]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b484:	4313      	orrs	r3, r2
 800b486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b488:	f7fd fcc0 	bl	8008e0c <HAL_GetTick>
 800b48c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b48e:	e00a      	b.n	800b4a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b490:	f7fd fcbc 	bl	8008e0c <HAL_GetTick>
 800b494:	4602      	mov	r2, r0
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d901      	bls.n	800b4a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e053      	b.n	800b54e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4a6:	4b2d      	ldr	r3, [pc, #180]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f003 020c 	and.w	r2, r3, #12
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d1eb      	bne.n	800b490 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b4b8:	4b27      	ldr	r3, [pc, #156]	; (800b558 <HAL_RCC_ClockConfig+0x1c0>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0307 	and.w	r3, r3, #7
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d210      	bcs.n	800b4e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4c6:	4b24      	ldr	r3, [pc, #144]	; (800b558 <HAL_RCC_ClockConfig+0x1c0>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f023 0207 	bic.w	r2, r3, #7
 800b4ce:	4922      	ldr	r1, [pc, #136]	; (800b558 <HAL_RCC_ClockConfig+0x1c0>)
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4d6:	4b20      	ldr	r3, [pc, #128]	; (800b558 <HAL_RCC_ClockConfig+0x1c0>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0307 	and.w	r3, r3, #7
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d001      	beq.n	800b4e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e032      	b.n	800b54e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0304 	and.w	r3, r3, #4
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d008      	beq.n	800b506 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4f4:	4b19      	ldr	r3, [pc, #100]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	4916      	ldr	r1, [pc, #88]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b502:	4313      	orrs	r3, r2
 800b504:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0308 	and.w	r3, r3, #8
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d009      	beq.n	800b526 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	00db      	lsls	r3, r3, #3
 800b520:	490e      	ldr	r1, [pc, #56]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b522:	4313      	orrs	r3, r2
 800b524:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b526:	f000 f821 	bl	800b56c <HAL_RCC_GetSysClockFreq>
 800b52a:	4602      	mov	r2, r0
 800b52c:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <HAL_RCC_ClockConfig+0x1c4>)
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	091b      	lsrs	r3, r3, #4
 800b532:	f003 030f 	and.w	r3, r3, #15
 800b536:	490a      	ldr	r1, [pc, #40]	; (800b560 <HAL_RCC_ClockConfig+0x1c8>)
 800b538:	5ccb      	ldrb	r3, [r1, r3]
 800b53a:	fa22 f303 	lsr.w	r3, r2, r3
 800b53e:	4a09      	ldr	r2, [pc, #36]	; (800b564 <HAL_RCC_ClockConfig+0x1cc>)
 800b540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b542:	4b09      	ldr	r3, [pc, #36]	; (800b568 <HAL_RCC_ClockConfig+0x1d0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4618      	mov	r0, r3
 800b548:	f7fd fc1e 	bl	8008d88 <HAL_InitTick>

  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	40022000 	.word	0x40022000
 800b55c:	40021000 	.word	0x40021000
 800b560:	0800e2dc 	.word	0x0800e2dc
 800b564:	20000960 	.word	0x20000960
 800b568:	20000964 	.word	0x20000964

0800b56c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b572:	2300      	movs	r3, #0
 800b574:	60fb      	str	r3, [r7, #12]
 800b576:	2300      	movs	r3, #0
 800b578:	60bb      	str	r3, [r7, #8]
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	2300      	movs	r3, #0
 800b580:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b586:	4b1e      	ldr	r3, [pc, #120]	; (800b600 <HAL_RCC_GetSysClockFreq+0x94>)
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f003 030c 	and.w	r3, r3, #12
 800b592:	2b04      	cmp	r3, #4
 800b594:	d002      	beq.n	800b59c <HAL_RCC_GetSysClockFreq+0x30>
 800b596:	2b08      	cmp	r3, #8
 800b598:	d003      	beq.n	800b5a2 <HAL_RCC_GetSysClockFreq+0x36>
 800b59a:	e027      	b.n	800b5ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b59c:	4b19      	ldr	r3, [pc, #100]	; (800b604 <HAL_RCC_GetSysClockFreq+0x98>)
 800b59e:	613b      	str	r3, [r7, #16]
      break;
 800b5a0:	e027      	b.n	800b5f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	0c9b      	lsrs	r3, r3, #18
 800b5a6:	f003 030f 	and.w	r3, r3, #15
 800b5aa:	4a17      	ldr	r2, [pc, #92]	; (800b608 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b5ac:	5cd3      	ldrb	r3, [r2, r3]
 800b5ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d010      	beq.n	800b5dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b5ba:	4b11      	ldr	r3, [pc, #68]	; (800b600 <HAL_RCC_GetSysClockFreq+0x94>)
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	0c5b      	lsrs	r3, r3, #17
 800b5c0:	f003 0301 	and.w	r3, r3, #1
 800b5c4:	4a11      	ldr	r2, [pc, #68]	; (800b60c <HAL_RCC_GetSysClockFreq+0xa0>)
 800b5c6:	5cd3      	ldrb	r3, [r2, r3]
 800b5c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a0d      	ldr	r2, [pc, #52]	; (800b604 <HAL_RCC_GetSysClockFreq+0x98>)
 800b5ce:	fb03 f202 	mul.w	r2, r3, r2
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	e004      	b.n	800b5e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a0c      	ldr	r2, [pc, #48]	; (800b610 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b5e0:	fb02 f303 	mul.w	r3, r2, r3
 800b5e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	613b      	str	r3, [r7, #16]
      break;
 800b5ea:	e002      	b.n	800b5f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <HAL_RCC_GetSysClockFreq+0x98>)
 800b5ee:	613b      	str	r3, [r7, #16]
      break;
 800b5f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5f2:	693b      	ldr	r3, [r7, #16]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	371c      	adds	r7, #28
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bc80      	pop	{r7}
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	40021000 	.word	0x40021000
 800b604:	007a1200 	.word	0x007a1200
 800b608:	0800e2f4 	.word	0x0800e2f4
 800b60c:	0800e304 	.word	0x0800e304
 800b610:	003d0900 	.word	0x003d0900

0800b614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b614:	b480      	push	{r7}
 800b616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b618:	4b02      	ldr	r3, [pc, #8]	; (800b624 <HAL_RCC_GetHCLKFreq+0x10>)
 800b61a:	681b      	ldr	r3, [r3, #0]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	46bd      	mov	sp, r7
 800b620:	bc80      	pop	{r7}
 800b622:	4770      	bx	lr
 800b624:	20000960 	.word	0x20000960

0800b628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b62c:	f7ff fff2 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b630:	4602      	mov	r2, r0
 800b632:	4b05      	ldr	r3, [pc, #20]	; (800b648 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	f003 0307 	and.w	r3, r3, #7
 800b63c:	4903      	ldr	r1, [pc, #12]	; (800b64c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b63e:	5ccb      	ldrb	r3, [r1, r3]
 800b640:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b644:	4618      	mov	r0, r3
 800b646:	bd80      	pop	{r7, pc}
 800b648:	40021000 	.word	0x40021000
 800b64c:	0800e2ec 	.word	0x0800e2ec

0800b650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b654:	f7ff ffde 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b658:	4602      	mov	r2, r0
 800b65a:	4b05      	ldr	r3, [pc, #20]	; (800b670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	0adb      	lsrs	r3, r3, #11
 800b660:	f003 0307 	and.w	r3, r3, #7
 800b664:	4903      	ldr	r1, [pc, #12]	; (800b674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b666:	5ccb      	ldrb	r3, [r1, r3]
 800b668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	40021000 	.word	0x40021000
 800b674:	0800e2ec 	.word	0x0800e2ec

0800b678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b680:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <RCC_Delay+0x34>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a0a      	ldr	r2, [pc, #40]	; (800b6b0 <RCC_Delay+0x38>)
 800b686:	fba2 2303 	umull	r2, r3, r2, r3
 800b68a:	0a5b      	lsrs	r3, r3, #9
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	fb02 f303 	mul.w	r3, r2, r3
 800b692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b694:	bf00      	nop
  }
  while (Delay --);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	1e5a      	subs	r2, r3, #1
 800b69a:	60fa      	str	r2, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f9      	bne.n	800b694 <RCC_Delay+0x1c>
}
 800b6a0:	bf00      	nop
 800b6a2:	bf00      	nop
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bc80      	pop	{r7}
 800b6aa:	4770      	bx	lr
 800b6ac:	20000960 	.word	0x20000960
 800b6b0:	10624dd3 	.word	0x10624dd3

0800b6b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d101      	bne.n	800b6c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e041      	b.n	800b74a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d106      	bne.n	800b6e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7fd fa26 	bl	8008b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4610      	mov	r0, r2
 800b6f4:	f000 fa82 	bl	800bbfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b01      	cmp	r3, #1
 800b766:	d001      	beq.n	800b76c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	e044      	b.n	800b7f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68da      	ldr	r2, [r3, #12]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f042 0201 	orr.w	r2, r2, #1
 800b782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a1d      	ldr	r2, [pc, #116]	; (800b800 <HAL_TIM_Base_Start_IT+0xac>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d018      	beq.n	800b7c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a1c      	ldr	r2, [pc, #112]	; (800b804 <HAL_TIM_Base_Start_IT+0xb0>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d013      	beq.n	800b7c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a0:	d00e      	beq.n	800b7c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a18      	ldr	r2, [pc, #96]	; (800b808 <HAL_TIM_Base_Start_IT+0xb4>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d009      	beq.n	800b7c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a16      	ldr	r2, [pc, #88]	; (800b80c <HAL_TIM_Base_Start_IT+0xb8>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d004      	beq.n	800b7c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a15      	ldr	r2, [pc, #84]	; (800b810 <HAL_TIM_Base_Start_IT+0xbc>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d111      	bne.n	800b7e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b06      	cmp	r3, #6
 800b7d0:	d010      	beq.n	800b7f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f042 0201 	orr.w	r2, r2, #1
 800b7e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7e2:	e007      	b.n	800b7f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f042 0201 	orr.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bc80      	pop	{r7}
 800b7fe:	4770      	bx	lr
 800b800:	40012c00 	.word	0x40012c00
 800b804:	40013400 	.word	0x40013400
 800b808:	40000400 	.word	0x40000400
 800b80c:	40000800 	.word	0x40000800
 800b810:	40000c00 	.word	0x40000c00

0800b814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f003 0302 	and.w	r3, r3, #2
 800b826:	2b02      	cmp	r3, #2
 800b828:	d122      	bne.n	800b870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	2b02      	cmp	r3, #2
 800b836:	d11b      	bne.n	800b870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 0202 	mvn.w	r2, #2
 800b840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	f003 0303 	and.w	r3, r3, #3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f9b4 	bl	800bbc4 <HAL_TIM_IC_CaptureCallback>
 800b85c:	e005      	b.n	800b86a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f9a7 	bl	800bbb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f9b6 	bl	800bbd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	f003 0304 	and.w	r3, r3, #4
 800b87a:	2b04      	cmp	r3, #4
 800b87c:	d122      	bne.n	800b8c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f003 0304 	and.w	r3, r3, #4
 800b888:	2b04      	cmp	r3, #4
 800b88a:	d11b      	bne.n	800b8c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f06f 0204 	mvn.w	r2, #4
 800b894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2202      	movs	r2, #2
 800b89a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f98a 	bl	800bbc4 <HAL_TIM_IC_CaptureCallback>
 800b8b0:	e005      	b.n	800b8be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f97d 	bl	800bbb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f98c 	bl	800bbd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	f003 0308 	and.w	r3, r3, #8
 800b8ce:	2b08      	cmp	r3, #8
 800b8d0:	d122      	bne.n	800b918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	f003 0308 	and.w	r3, r3, #8
 800b8dc:	2b08      	cmp	r3, #8
 800b8de:	d11b      	bne.n	800b918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f06f 0208 	mvn.w	r2, #8
 800b8e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2204      	movs	r2, #4
 800b8ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	f003 0303 	and.w	r3, r3, #3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d003      	beq.n	800b906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f960 	bl	800bbc4 <HAL_TIM_IC_CaptureCallback>
 800b904:	e005      	b.n	800b912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f953 	bl	800bbb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f962 	bl	800bbd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	f003 0310 	and.w	r3, r3, #16
 800b922:	2b10      	cmp	r3, #16
 800b924:	d122      	bne.n	800b96c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	f003 0310 	and.w	r3, r3, #16
 800b930:	2b10      	cmp	r3, #16
 800b932:	d11b      	bne.n	800b96c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f06f 0210 	mvn.w	r2, #16
 800b93c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2208      	movs	r2, #8
 800b942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d003      	beq.n	800b95a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f936 	bl	800bbc4 <HAL_TIM_IC_CaptureCallback>
 800b958:	e005      	b.n	800b966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f929 	bl	800bbb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f938 	bl	800bbd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	2b01      	cmp	r3, #1
 800b978:	d10e      	bne.n	800b998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b01      	cmp	r3, #1
 800b986:	d107      	bne.n	800b998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f06f 0201 	mvn.w	r2, #1
 800b990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7fc fd22 	bl	80083dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a2:	2b80      	cmp	r3, #128	; 0x80
 800b9a4:	d10e      	bne.n	800b9c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b0:	2b80      	cmp	r3, #128	; 0x80
 800b9b2:	d107      	bne.n	800b9c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b9bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 faa1 	bl	800bf06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ce:	2b40      	cmp	r3, #64	; 0x40
 800b9d0:	d10e      	bne.n	800b9f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9dc:	2b40      	cmp	r3, #64	; 0x40
 800b9de:	d107      	bne.n	800b9f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f8fc 	bl	800bbe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	f003 0320 	and.w	r3, r3, #32
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	d10e      	bne.n	800ba1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f003 0320 	and.w	r3, r3, #32
 800ba08:	2b20      	cmp	r3, #32
 800ba0a:	d107      	bne.n	800ba1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f06f 0220 	mvn.w	r2, #32
 800ba14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fa6c 	bl	800bef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d101      	bne.n	800ba40 <HAL_TIM_ConfigClockSource+0x1c>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	e0b4      	b.n	800bbaa <HAL_TIM_ConfigClockSource+0x186>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ba5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba78:	d03e      	beq.n	800baf8 <HAL_TIM_ConfigClockSource+0xd4>
 800ba7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba7e:	f200 8087 	bhi.w	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
 800ba82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba86:	f000 8086 	beq.w	800bb96 <HAL_TIM_ConfigClockSource+0x172>
 800ba8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba8e:	d87f      	bhi.n	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
 800ba90:	2b70      	cmp	r3, #112	; 0x70
 800ba92:	d01a      	beq.n	800baca <HAL_TIM_ConfigClockSource+0xa6>
 800ba94:	2b70      	cmp	r3, #112	; 0x70
 800ba96:	d87b      	bhi.n	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
 800ba98:	2b60      	cmp	r3, #96	; 0x60
 800ba9a:	d050      	beq.n	800bb3e <HAL_TIM_ConfigClockSource+0x11a>
 800ba9c:	2b60      	cmp	r3, #96	; 0x60
 800ba9e:	d877      	bhi.n	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
 800baa0:	2b50      	cmp	r3, #80	; 0x50
 800baa2:	d03c      	beq.n	800bb1e <HAL_TIM_ConfigClockSource+0xfa>
 800baa4:	2b50      	cmp	r3, #80	; 0x50
 800baa6:	d873      	bhi.n	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
 800baa8:	2b40      	cmp	r3, #64	; 0x40
 800baaa:	d058      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x13a>
 800baac:	2b40      	cmp	r3, #64	; 0x40
 800baae:	d86f      	bhi.n	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
 800bab0:	2b30      	cmp	r3, #48	; 0x30
 800bab2:	d064      	beq.n	800bb7e <HAL_TIM_ConfigClockSource+0x15a>
 800bab4:	2b30      	cmp	r3, #48	; 0x30
 800bab6:	d86b      	bhi.n	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
 800bab8:	2b20      	cmp	r3, #32
 800baba:	d060      	beq.n	800bb7e <HAL_TIM_ConfigClockSource+0x15a>
 800babc:	2b20      	cmp	r3, #32
 800babe:	d867      	bhi.n	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d05c      	beq.n	800bb7e <HAL_TIM_ConfigClockSource+0x15a>
 800bac4:	2b10      	cmp	r3, #16
 800bac6:	d05a      	beq.n	800bb7e <HAL_TIM_ConfigClockSource+0x15a>
 800bac8:	e062      	b.n	800bb90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bada:	f000 f980 	bl	800bdde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800baec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	609a      	str	r2, [r3, #8]
      break;
 800baf6:	e04f      	b.n	800bb98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb08:	f000 f969 	bl	800bdde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb1a:	609a      	str	r2, [r3, #8]
      break;
 800bb1c:	e03c      	b.n	800bb98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f000 f8e0 	bl	800bcf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2150      	movs	r1, #80	; 0x50
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 f937 	bl	800bdaa <TIM_ITRx_SetConfig>
      break;
 800bb3c:	e02c      	b.n	800bb98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f000 f8fe 	bl	800bd4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2160      	movs	r1, #96	; 0x60
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f927 	bl	800bdaa <TIM_ITRx_SetConfig>
      break;
 800bb5c:	e01c      	b.n	800bb98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f000 f8c0 	bl	800bcf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2140      	movs	r1, #64	; 0x40
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 f917 	bl	800bdaa <TIM_ITRx_SetConfig>
      break;
 800bb7c:	e00c      	b.n	800bb98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f000 f90e 	bl	800bdaa <TIM_ITRx_SetConfig>
      break;
 800bb8e:	e003      	b.n	800bb98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	73fb      	strb	r3, [r7, #15]
      break;
 800bb94:	e000      	b.n	800bb98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bb96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbba:	bf00      	nop
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bc80      	pop	{r7}
 800bbc2:	4770      	bx	lr

0800bbc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bc80      	pop	{r7}
 800bbd4:	4770      	bx	lr

0800bbd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bc80      	pop	{r7}
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bc80      	pop	{r7}
 800bbf8:	4770      	bx	lr
	...

0800bbfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a33      	ldr	r2, [pc, #204]	; (800bcdc <TIM_Base_SetConfig+0xe0>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d013      	beq.n	800bc3c <TIM_Base_SetConfig+0x40>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a32      	ldr	r2, [pc, #200]	; (800bce0 <TIM_Base_SetConfig+0xe4>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d00f      	beq.n	800bc3c <TIM_Base_SetConfig+0x40>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc22:	d00b      	beq.n	800bc3c <TIM_Base_SetConfig+0x40>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a2f      	ldr	r2, [pc, #188]	; (800bce4 <TIM_Base_SetConfig+0xe8>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d007      	beq.n	800bc3c <TIM_Base_SetConfig+0x40>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a2e      	ldr	r2, [pc, #184]	; (800bce8 <TIM_Base_SetConfig+0xec>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d003      	beq.n	800bc3c <TIM_Base_SetConfig+0x40>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a2d      	ldr	r2, [pc, #180]	; (800bcec <TIM_Base_SetConfig+0xf0>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d108      	bne.n	800bc4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a22      	ldr	r2, [pc, #136]	; (800bcdc <TIM_Base_SetConfig+0xe0>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d013      	beq.n	800bc7e <TIM_Base_SetConfig+0x82>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a21      	ldr	r2, [pc, #132]	; (800bce0 <TIM_Base_SetConfig+0xe4>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d00f      	beq.n	800bc7e <TIM_Base_SetConfig+0x82>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc64:	d00b      	beq.n	800bc7e <TIM_Base_SetConfig+0x82>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a1e      	ldr	r2, [pc, #120]	; (800bce4 <TIM_Base_SetConfig+0xe8>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d007      	beq.n	800bc7e <TIM_Base_SetConfig+0x82>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a1d      	ldr	r2, [pc, #116]	; (800bce8 <TIM_Base_SetConfig+0xec>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d003      	beq.n	800bc7e <TIM_Base_SetConfig+0x82>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4a1c      	ldr	r2, [pc, #112]	; (800bcec <TIM_Base_SetConfig+0xf0>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d108      	bne.n	800bc90 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	689a      	ldr	r2, [r3, #8]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a09      	ldr	r2, [pc, #36]	; (800bcdc <TIM_Base_SetConfig+0xe0>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d003      	beq.n	800bcc4 <TIM_Base_SetConfig+0xc8>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a08      	ldr	r2, [pc, #32]	; (800bce0 <TIM_Base_SetConfig+0xe4>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d103      	bne.n	800bccc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	691a      	ldr	r2, [r3, #16]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	615a      	str	r2, [r3, #20]
}
 800bcd2:	bf00      	nop
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bc80      	pop	{r7}
 800bcda:	4770      	bx	lr
 800bcdc:	40012c00 	.word	0x40012c00
 800bce0:	40013400 	.word	0x40013400
 800bce4:	40000400 	.word	0x40000400
 800bce8:	40000800 	.word	0x40000800
 800bcec:	40000c00 	.word	0x40000c00

0800bcf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	f023 0201 	bic.w	r2, r3, #1
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f023 030a 	bic.w	r3, r3, #10
 800bd2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	621a      	str	r2, [r3, #32]
}
 800bd42:	bf00      	nop
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bc80      	pop	{r7}
 800bd4a:	4770      	bx	lr

0800bd4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	f023 0210 	bic.w	r2, r3, #16
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	031b      	lsls	r3, r3, #12
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	011b      	lsls	r3, r3, #4
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	621a      	str	r2, [r3, #32]
}
 800bda0:	bf00      	nop
 800bda2:	371c      	adds	r7, #28
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bc80      	pop	{r7}
 800bda8:	4770      	bx	lr

0800bdaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b085      	sub	sp, #20
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	f043 0307 	orr.w	r3, r3, #7
 800bdcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	609a      	str	r2, [r3, #8]
}
 800bdd4:	bf00      	nop
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bc80      	pop	{r7}
 800bddc:	4770      	bx	lr

0800bdde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b087      	sub	sp, #28
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	60f8      	str	r0, [r7, #12]
 800bde6:	60b9      	str	r1, [r7, #8]
 800bde8:	607a      	str	r2, [r7, #4]
 800bdea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	021a      	lsls	r2, r3, #8
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	431a      	orrs	r2, r3
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	4313      	orrs	r3, r2
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	4313      	orrs	r3, r2
 800be0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	609a      	str	r2, [r3, #8]
}
 800be12:	bf00      	nop
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	bc80      	pop	{r7}
 800be1a:	4770      	bx	lr

0800be1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d101      	bne.n	800be34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be30:	2302      	movs	r3, #2
 800be32:	e050      	b.n	800bed6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2202      	movs	r2, #2
 800be40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a1b      	ldr	r2, [pc, #108]	; (800bee0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d018      	beq.n	800beaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a19      	ldr	r2, [pc, #100]	; (800bee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d013      	beq.n	800beaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be8a:	d00e      	beq.n	800beaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a15      	ldr	r2, [pc, #84]	; (800bee8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d009      	beq.n	800beaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a14      	ldr	r2, [pc, #80]	; (800beec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d004      	beq.n	800beaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a12      	ldr	r2, [pc, #72]	; (800bef0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d10c      	bne.n	800bec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	4313      	orrs	r3, r2
 800beba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr
 800bee0:	40012c00 	.word	0x40012c00
 800bee4:	40013400 	.word	0x40013400
 800bee8:	40000400 	.word	0x40000400
 800beec:	40000800 	.word	0x40000800
 800bef0:	40000c00 	.word	0x40000c00

0800bef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bc80      	pop	{r7}
 800bf04:	4770      	bx	lr

0800bf06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf0e:	bf00      	nop
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bc80      	pop	{r7}
 800bf16:	4770      	bx	lr

0800bf18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e042      	b.n	800bfb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7fc fe1a 	bl	8008b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2224      	movs	r2, #36	; 0x24
 800bf48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fcb5 	bl	800c8cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	691a      	ldr	r2, [r3, #16]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	695a      	ldr	r2, [r3, #20]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68da      	ldr	r2, [r3, #12]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2220      	movs	r2, #32
 800bf9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b20      	cmp	r3, #32
 800bfd0:	d121      	bne.n	800c016 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <HAL_UART_Transmit_IT+0x26>
 800bfd8:	88fb      	ldrh	r3, [r7, #6]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d101      	bne.n	800bfe2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e01a      	b.n	800c018 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	88fa      	ldrh	r2, [r7, #6]
 800bfec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	88fa      	ldrh	r2, [r7, #6]
 800bff2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2221      	movs	r2, #33	; 0x21
 800bffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68da      	ldr	r2, [r3, #12]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c010:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	e000      	b.n	800c018 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c016:	2302      	movs	r3, #2
  }
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bc80      	pop	{r7}
 800c020:	4770      	bx	lr
	...

0800c024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b0ba      	sub	sp, #232	; 0xe8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c050:	2300      	movs	r3, #0
 800c052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c05a:	f003 030f 	and.w	r3, r3, #15
 800c05e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10f      	bne.n	800c08a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c06e:	f003 0320 	and.w	r3, r3, #32
 800c072:	2b00      	cmp	r3, #0
 800c074:	d009      	beq.n	800c08a <HAL_UART_IRQHandler+0x66>
 800c076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c07a:	f003 0320 	and.w	r3, r3, #32
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 fb63 	bl	800c74e <UART_Receive_IT>
      return;
 800c088:	e25b      	b.n	800c542 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c08a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 80de 	beq.w	800c250 <HAL_UART_IRQHandler+0x22c>
 800c094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c098:	f003 0301 	and.w	r3, r3, #1
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d106      	bne.n	800c0ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 80d1 	beq.w	800c250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00b      	beq.n	800c0d2 <HAL_UART_IRQHandler+0xae>
 800c0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d005      	beq.n	800c0d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ca:	f043 0201 	orr.w	r2, r3, #1
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0d6:	f003 0304 	and.w	r3, r3, #4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00b      	beq.n	800c0f6 <HAL_UART_IRQHandler+0xd2>
 800c0de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d005      	beq.n	800c0f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ee:	f043 0202 	orr.w	r2, r3, #2
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0fa:	f003 0302 	and.w	r3, r3, #2
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00b      	beq.n	800c11a <HAL_UART_IRQHandler+0xf6>
 800c102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d005      	beq.n	800c11a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c112:	f043 0204 	orr.w	r2, r3, #4
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c11e:	f003 0308 	and.w	r3, r3, #8
 800c122:	2b00      	cmp	r3, #0
 800c124:	d011      	beq.n	800c14a <HAL_UART_IRQHandler+0x126>
 800c126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c12a:	f003 0320 	and.w	r3, r3, #32
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d105      	bne.n	800c13e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d005      	beq.n	800c14a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c142:	f043 0208 	orr.w	r2, r3, #8
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f000 81f2 	beq.w	800c538 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c158:	f003 0320 	and.w	r3, r3, #32
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d008      	beq.n	800c172 <HAL_UART_IRQHandler+0x14e>
 800c160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c164:	f003 0320 	and.w	r3, r3, #32
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 faee 	bl	800c74e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	695b      	ldr	r3, [r3, #20]
 800c178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	bf14      	ite	ne
 800c180:	2301      	movne	r3, #1
 800c182:	2300      	moveq	r3, #0
 800c184:	b2db      	uxtb	r3, r3
 800c186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c18e:	f003 0308 	and.w	r3, r3, #8
 800c192:	2b00      	cmp	r3, #0
 800c194:	d103      	bne.n	800c19e <HAL_UART_IRQHandler+0x17a>
 800c196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d04f      	beq.n	800c23e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f9f8 	bl	800c594 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d041      	beq.n	800c236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3314      	adds	r3, #20
 800c1b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1c0:	e853 3f00 	ldrex	r3, [r3]
 800c1c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c1c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3314      	adds	r3, #20
 800c1da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c1de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c1e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c1ee:	e841 2300 	strex	r3, r2, [r1]
 800c1f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c1f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1d9      	bne.n	800c1b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c202:	2b00      	cmp	r3, #0
 800c204:	d013      	beq.n	800c22e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20a:	4a7e      	ldr	r2, [pc, #504]	; (800c404 <HAL_UART_IRQHandler+0x3e0>)
 800c20c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c212:	4618      	mov	r0, r3
 800c214:	f7fd f86c 	bl	80092f0 <HAL_DMA_Abort_IT>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d016      	beq.n	800c24c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c228:	4610      	mov	r0, r2
 800c22a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c22c:	e00e      	b.n	800c24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f99c 	bl	800c56c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c234:	e00a      	b.n	800c24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f998 	bl	800c56c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c23c:	e006      	b.n	800c24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f994 	bl	800c56c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c24a:	e175      	b.n	800c538 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c24c:	bf00      	nop
    return;
 800c24e:	e173      	b.n	800c538 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c254:	2b01      	cmp	r3, #1
 800c256:	f040 814f 	bne.w	800c4f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25e:	f003 0310 	and.w	r3, r3, #16
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 8148 	beq.w	800c4f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c26c:	f003 0310 	and.w	r3, r3, #16
 800c270:	2b00      	cmp	r3, #0
 800c272:	f000 8141 	beq.w	800c4f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c276:	2300      	movs	r3, #0
 800c278:	60bb      	str	r3, [r7, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	60bb      	str	r3, [r7, #8]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	60bb      	str	r3, [r7, #8]
 800c28a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 80b6 	beq.w	800c408 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f000 8145 	beq.w	800c53c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	f080 813e 	bcs.w	800c53c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	2b20      	cmp	r3, #32
 800c2d0:	f000 8088 	beq.w	800c3e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	330c      	adds	r3, #12
 800c2da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2e2:	e853 3f00 	ldrex	r3, [r3]
 800c2e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c2ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	330c      	adds	r3, #12
 800c2fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c300:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c304:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c308:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c30c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1d9      	bne.n	800c2d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3314      	adds	r3, #20
 800c326:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c32a:	e853 3f00 	ldrex	r3, [r3]
 800c32e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c332:	f023 0301 	bic.w	r3, r3, #1
 800c336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3314      	adds	r3, #20
 800c340:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c344:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c348:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c34c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c350:	e841 2300 	strex	r3, r2, [r1]
 800c354:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1e1      	bne.n	800c320 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3314      	adds	r3, #20
 800c362:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c366:	e853 3f00 	ldrex	r3, [r3]
 800c36a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c36e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3314      	adds	r3, #20
 800c37c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c380:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c382:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c386:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c38e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e3      	bne.n	800c35c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	330c      	adds	r3, #12
 800c3a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ac:	e853 3f00 	ldrex	r3, [r3]
 800c3b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3b4:	f023 0310 	bic.w	r3, r3, #16
 800c3b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	330c      	adds	r3, #12
 800c3c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c3c6:	65ba      	str	r2, [r7, #88]	; 0x58
 800c3c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3ce:	e841 2300 	strex	r3, r2, [r1]
 800c3d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1e3      	bne.n	800c3a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fc ff4b 	bl	800927a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f8bf 	bl	800c57e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c400:	e09c      	b.n	800c53c <HAL_UART_IRQHandler+0x518>
 800c402:	bf00      	nop
 800c404:	0800c659 	.word	0x0800c659
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c410:	b29b      	uxth	r3, r3
 800c412:	1ad3      	subs	r3, r2, r3
 800c414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 808e 	beq.w	800c540 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 8089 	beq.w	800c540 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	330c      	adds	r3, #12
 800c434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	e853 3f00 	ldrex	r3, [r3]
 800c43c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	330c      	adds	r3, #12
 800c44e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c452:	647a      	str	r2, [r7, #68]	; 0x44
 800c454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c45a:	e841 2300 	strex	r3, r2, [r1]
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1e3      	bne.n	800c42e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3314      	adds	r3, #20
 800c46c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c470:	e853 3f00 	ldrex	r3, [r3]
 800c474:	623b      	str	r3, [r7, #32]
   return(result);
 800c476:	6a3b      	ldr	r3, [r7, #32]
 800c478:	f023 0301 	bic.w	r3, r3, #1
 800c47c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3314      	adds	r3, #20
 800c486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c48a:	633a      	str	r2, [r7, #48]	; 0x30
 800c48c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c492:	e841 2300 	strex	r3, r2, [r1]
 800c496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1e3      	bne.n	800c466 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2220      	movs	r2, #32
 800c4a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	330c      	adds	r3, #12
 800c4b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	e853 3f00 	ldrex	r3, [r3]
 800c4ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f023 0310 	bic.w	r3, r3, #16
 800c4c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	330c      	adds	r3, #12
 800c4cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c4d0:	61fa      	str	r2, [r7, #28]
 800c4d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d4:	69b9      	ldr	r1, [r7, #24]
 800c4d6:	69fa      	ldr	r2, [r7, #28]
 800c4d8:	e841 2300 	strex	r3, r2, [r1]
 800c4dc:	617b      	str	r3, [r7, #20]
   return(result);
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1e3      	bne.n	800c4ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c4ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f844 	bl	800c57e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c4f6:	e023      	b.n	800c540 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c500:	2b00      	cmp	r3, #0
 800c502:	d009      	beq.n	800c518 <HAL_UART_IRQHandler+0x4f4>
 800c504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d003      	beq.n	800c518 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f8b5 	bl	800c680 <UART_Transmit_IT>
    return;
 800c516:	e014      	b.n	800c542 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00e      	beq.n	800c542 <HAL_UART_IRQHandler+0x51e>
 800c524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d008      	beq.n	800c542 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f8f4 	bl	800c71e <UART_EndTransmit_IT>
    return;
 800c536:	e004      	b.n	800c542 <HAL_UART_IRQHandler+0x51e>
    return;
 800c538:	bf00      	nop
 800c53a:	e002      	b.n	800c542 <HAL_UART_IRQHandler+0x51e>
      return;
 800c53c:	bf00      	nop
 800c53e:	e000      	b.n	800c542 <HAL_UART_IRQHandler+0x51e>
      return;
 800c540:	bf00      	nop
  }
}
 800c542:	37e8      	adds	r7, #232	; 0xe8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	bc80      	pop	{r7}
 800c558:	4770      	bx	lr

0800c55a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b083      	sub	sp, #12
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c562:	bf00      	nop
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	bc80      	pop	{r7}
 800c56a:	4770      	bx	lr

0800c56c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c574:	bf00      	nop
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	bc80      	pop	{r7}
 800c57c:	4770      	bx	lr

0800c57e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c57e:	b480      	push	{r7}
 800c580:	b083      	sub	sp, #12
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	460b      	mov	r3, r1
 800c588:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c58a:	bf00      	nop
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	bc80      	pop	{r7}
 800c592:	4770      	bx	lr

0800c594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c594:	b480      	push	{r7}
 800c596:	b095      	sub	sp, #84	; 0x54
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	330c      	adds	r3, #12
 800c5a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a6:	e853 3f00 	ldrex	r3, [r3]
 800c5aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	330c      	adds	r3, #12
 800c5ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5bc:	643a      	str	r2, [r7, #64]	; 0x40
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5c4:	e841 2300 	strex	r3, r2, [r1]
 800c5c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e5      	bne.n	800c59c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3314      	adds	r3, #20
 800c5d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d8:	6a3b      	ldr	r3, [r7, #32]
 800c5da:	e853 3f00 	ldrex	r3, [r3]
 800c5de:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	f023 0301 	bic.w	r3, r3, #1
 800c5e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3314      	adds	r3, #20
 800c5ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5f8:	e841 2300 	strex	r3, r2, [r1]
 800c5fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e5      	bne.n	800c5d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d119      	bne.n	800c640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	330c      	adds	r3, #12
 800c612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f023 0310 	bic.w	r3, r3, #16
 800c622:	647b      	str	r3, [r7, #68]	; 0x44
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	330c      	adds	r3, #12
 800c62a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c62c:	61ba      	str	r2, [r7, #24]
 800c62e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	6979      	ldr	r1, [r7, #20]
 800c632:	69ba      	ldr	r2, [r7, #24]
 800c634:	e841 2300 	strex	r3, r2, [r1]
 800c638:	613b      	str	r3, [r7, #16]
   return(result);
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e5      	bne.n	800c60c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2220      	movs	r2, #32
 800c644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c64e:	bf00      	nop
 800c650:	3754      	adds	r7, #84	; 0x54
 800c652:	46bd      	mov	sp, r7
 800c654:	bc80      	pop	{r7}
 800c656:	4770      	bx	lr

0800c658 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2200      	movs	r2, #0
 800c670:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f7ff ff7a 	bl	800c56c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b21      	cmp	r3, #33	; 0x21
 800c692:	d13e      	bne.n	800c712 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c69c:	d114      	bne.n	800c6c8 <UART_Transmit_IT+0x48>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d110      	bne.n	800c6c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a1b      	ldr	r3, [r3, #32]
 800c6aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a1b      	ldr	r3, [r3, #32]
 800c6c0:	1c9a      	adds	r2, r3, #2
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	621a      	str	r2, [r3, #32]
 800c6c6:	e008      	b.n	800c6da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a1b      	ldr	r3, [r3, #32]
 800c6cc:	1c59      	adds	r1, r3, #1
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	6211      	str	r1, [r2, #32]
 800c6d2:	781a      	ldrb	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10f      	bne.n	800c70e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68da      	ldr	r2, [r3, #12]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68da      	ldr	r2, [r3, #12]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c70c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	e000      	b.n	800c714 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c712:	2302      	movs	r3, #2
  }
}
 800c714:	4618      	mov	r0, r3
 800c716:	3714      	adds	r7, #20
 800c718:	46bd      	mov	sp, r7
 800c71a:	bc80      	pop	{r7}
 800c71c:	4770      	bx	lr

0800c71e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68da      	ldr	r2, [r3, #12]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c734:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2220      	movs	r2, #32
 800c73a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff ff02 	bl	800c548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b08c      	sub	sp, #48	; 0x30
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b22      	cmp	r3, #34	; 0x22
 800c760:	f040 80ae 	bne.w	800c8c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c76c:	d117      	bne.n	800c79e <UART_Receive_IT+0x50>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d113      	bne.n	800c79e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	b29b      	uxth	r3, r3
 800c788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c796:	1c9a      	adds	r2, r3, #2
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	629a      	str	r2, [r3, #40]	; 0x28
 800c79c:	e026      	b.n	800c7ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7b0:	d007      	beq.n	800c7c2 <UART_Receive_IT+0x74>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10a      	bne.n	800c7d0 <UART_Receive_IT+0x82>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d106      	bne.n	800c7d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7cc:	701a      	strb	r2, [r3, #0]
 800c7ce:	e008      	b.n	800c7e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e6:	1c5a      	adds	r2, r3, #1
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d15d      	bne.n	800c8bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68da      	ldr	r2, [r3, #12]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f022 0220 	bic.w	r2, r2, #32
 800c80e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68da      	ldr	r2, [r3, #12]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c81e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	695a      	ldr	r2, [r3, #20]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f022 0201 	bic.w	r2, r2, #1
 800c82e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2220      	movs	r2, #32
 800c834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c842:	2b01      	cmp	r3, #1
 800c844:	d135      	bne.n	800c8b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	330c      	adds	r3, #12
 800c852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	e853 3f00 	ldrex	r3, [r3]
 800c85a:	613b      	str	r3, [r7, #16]
   return(result);
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	f023 0310 	bic.w	r3, r3, #16
 800c862:	627b      	str	r3, [r7, #36]	; 0x24
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	330c      	adds	r3, #12
 800c86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86c:	623a      	str	r2, [r7, #32]
 800c86e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c870:	69f9      	ldr	r1, [r7, #28]
 800c872:	6a3a      	ldr	r2, [r7, #32]
 800c874:	e841 2300 	strex	r3, r2, [r1]
 800c878:	61bb      	str	r3, [r7, #24]
   return(result);
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1e5      	bne.n	800c84c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f003 0310 	and.w	r3, r3, #16
 800c88a:	2b10      	cmp	r3, #16
 800c88c:	d10a      	bne.n	800c8a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c88e:	2300      	movs	r3, #0
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	60fb      	str	r3, [r7, #12]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff fe67 	bl	800c57e <HAL_UARTEx_RxEventCallback>
 800c8b0:	e002      	b.n	800c8b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7ff fe51 	bl	800c55a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e002      	b.n	800c8c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e000      	b.n	800c8c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c8c0:	2302      	movs	r3, #2
  }
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3730      	adds	r7, #48	; 0x30
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
	...

0800c8cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	689a      	ldr	r2, [r3, #8]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c906:	f023 030c 	bic.w	r3, r3, #12
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	6812      	ldr	r2, [r2, #0]
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	430b      	orrs	r3, r1
 800c912:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	699a      	ldr	r2, [r3, #24]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	430a      	orrs	r2, r1
 800c928:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a2c      	ldr	r2, [pc, #176]	; (800c9e0 <UART_SetConfig+0x114>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d103      	bne.n	800c93c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c934:	f7fe fe8c 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800c938:	60f8      	str	r0, [r7, #12]
 800c93a:	e002      	b.n	800c942 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c93c:	f7fe fe74 	bl	800b628 <HAL_RCC_GetPCLK1Freq>
 800c940:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	4613      	mov	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	009a      	lsls	r2, r3, #2
 800c94c:	441a      	add	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	fbb2 f3f3 	udiv	r3, r2, r3
 800c958:	4a22      	ldr	r2, [pc, #136]	; (800c9e4 <UART_SetConfig+0x118>)
 800c95a:	fba2 2303 	umull	r2, r3, r2, r3
 800c95e:	095b      	lsrs	r3, r3, #5
 800c960:	0119      	lsls	r1, r3, #4
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	4613      	mov	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4413      	add	r3, r2
 800c96a:	009a      	lsls	r2, r3, #2
 800c96c:	441a      	add	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	fbb2 f2f3 	udiv	r2, r2, r3
 800c978:	4b1a      	ldr	r3, [pc, #104]	; (800c9e4 <UART_SetConfig+0x118>)
 800c97a:	fba3 0302 	umull	r0, r3, r3, r2
 800c97e:	095b      	lsrs	r3, r3, #5
 800c980:	2064      	movs	r0, #100	; 0x64
 800c982:	fb00 f303 	mul.w	r3, r0, r3
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	011b      	lsls	r3, r3, #4
 800c98a:	3332      	adds	r3, #50	; 0x32
 800c98c:	4a15      	ldr	r2, [pc, #84]	; (800c9e4 <UART_SetConfig+0x118>)
 800c98e:	fba2 2303 	umull	r2, r3, r2, r3
 800c992:	095b      	lsrs	r3, r3, #5
 800c994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c998:	4419      	add	r1, r3
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4613      	mov	r3, r2
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	009a      	lsls	r2, r3, #2
 800c9a4:	441a      	add	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9b0:	4b0c      	ldr	r3, [pc, #48]	; (800c9e4 <UART_SetConfig+0x118>)
 800c9b2:	fba3 0302 	umull	r0, r3, r3, r2
 800c9b6:	095b      	lsrs	r3, r3, #5
 800c9b8:	2064      	movs	r0, #100	; 0x64
 800c9ba:	fb00 f303 	mul.w	r3, r0, r3
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	011b      	lsls	r3, r3, #4
 800c9c2:	3332      	adds	r3, #50	; 0x32
 800c9c4:	4a07      	ldr	r2, [pc, #28]	; (800c9e4 <UART_SetConfig+0x118>)
 800c9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ca:	095b      	lsrs	r3, r3, #5
 800c9cc:	f003 020f 	and.w	r2, r3, #15
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	440a      	add	r2, r1
 800c9d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c9d8:	bf00      	nop
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	40013800 	.word	0x40013800
 800c9e4:	51eb851f 	.word	0x51eb851f

0800c9e8 <__itoa>:
 800c9e8:	1e93      	subs	r3, r2, #2
 800c9ea:	2b22      	cmp	r3, #34	; 0x22
 800c9ec:	b510      	push	{r4, lr}
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	d904      	bls.n	800c9fc <__itoa+0x14>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	461c      	mov	r4, r3
 800c9f6:	700b      	strb	r3, [r1, #0]
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	bd10      	pop	{r4, pc}
 800c9fc:	2a0a      	cmp	r2, #10
 800c9fe:	d109      	bne.n	800ca14 <__itoa+0x2c>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	da07      	bge.n	800ca14 <__itoa+0x2c>
 800ca04:	232d      	movs	r3, #45	; 0x2d
 800ca06:	700b      	strb	r3, [r1, #0]
 800ca08:	2101      	movs	r1, #1
 800ca0a:	4240      	negs	r0, r0
 800ca0c:	4421      	add	r1, r4
 800ca0e:	f000 f8b9 	bl	800cb84 <__utoa>
 800ca12:	e7f1      	b.n	800c9f8 <__itoa+0x10>
 800ca14:	2100      	movs	r1, #0
 800ca16:	e7f9      	b.n	800ca0c <__itoa+0x24>

0800ca18 <itoa>:
 800ca18:	f7ff bfe6 	b.w	800c9e8 <__itoa>

0800ca1c <malloc>:
 800ca1c:	4b02      	ldr	r3, [pc, #8]	; (800ca28 <malloc+0xc>)
 800ca1e:	4601      	mov	r1, r0
 800ca20:	6818      	ldr	r0, [r3, #0]
 800ca22:	f000 b823 	b.w	800ca6c <_malloc_r>
 800ca26:	bf00      	nop
 800ca28:	200009b8 	.word	0x200009b8

0800ca2c <sbrk_aligned>:
 800ca2c:	b570      	push	{r4, r5, r6, lr}
 800ca2e:	4e0e      	ldr	r6, [pc, #56]	; (800ca68 <sbrk_aligned+0x3c>)
 800ca30:	460c      	mov	r4, r1
 800ca32:	6831      	ldr	r1, [r6, #0]
 800ca34:	4605      	mov	r5, r0
 800ca36:	b911      	cbnz	r1, 800ca3e <sbrk_aligned+0x12>
 800ca38:	f000 f91e 	bl	800cc78 <_sbrk_r>
 800ca3c:	6030      	str	r0, [r6, #0]
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4628      	mov	r0, r5
 800ca42:	f000 f919 	bl	800cc78 <_sbrk_r>
 800ca46:	1c43      	adds	r3, r0, #1
 800ca48:	d00a      	beq.n	800ca60 <sbrk_aligned+0x34>
 800ca4a:	1cc4      	adds	r4, r0, #3
 800ca4c:	f024 0403 	bic.w	r4, r4, #3
 800ca50:	42a0      	cmp	r0, r4
 800ca52:	d007      	beq.n	800ca64 <sbrk_aligned+0x38>
 800ca54:	1a21      	subs	r1, r4, r0
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 f90e 	bl	800cc78 <_sbrk_r>
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d101      	bne.n	800ca64 <sbrk_aligned+0x38>
 800ca60:	f04f 34ff 	mov.w	r4, #4294967295
 800ca64:	4620      	mov	r0, r4
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
 800ca68:	20000e40 	.word	0x20000e40

0800ca6c <_malloc_r>:
 800ca6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca70:	1ccd      	adds	r5, r1, #3
 800ca72:	f025 0503 	bic.w	r5, r5, #3
 800ca76:	3508      	adds	r5, #8
 800ca78:	2d0c      	cmp	r5, #12
 800ca7a:	bf38      	it	cc
 800ca7c:	250c      	movcc	r5, #12
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	4607      	mov	r7, r0
 800ca82:	db01      	blt.n	800ca88 <_malloc_r+0x1c>
 800ca84:	42a9      	cmp	r1, r5
 800ca86:	d905      	bls.n	800ca94 <_malloc_r+0x28>
 800ca88:	230c      	movs	r3, #12
 800ca8a:	2600      	movs	r6, #0
 800ca8c:	603b      	str	r3, [r7, #0]
 800ca8e:	4630      	mov	r0, r6
 800ca90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb68 <_malloc_r+0xfc>
 800ca98:	f000 f868 	bl	800cb6c <__malloc_lock>
 800ca9c:	f8d8 3000 	ldr.w	r3, [r8]
 800caa0:	461c      	mov	r4, r3
 800caa2:	bb5c      	cbnz	r4, 800cafc <_malloc_r+0x90>
 800caa4:	4629      	mov	r1, r5
 800caa6:	4638      	mov	r0, r7
 800caa8:	f7ff ffc0 	bl	800ca2c <sbrk_aligned>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	4604      	mov	r4, r0
 800cab0:	d155      	bne.n	800cb5e <_malloc_r+0xf2>
 800cab2:	f8d8 4000 	ldr.w	r4, [r8]
 800cab6:	4626      	mov	r6, r4
 800cab8:	2e00      	cmp	r6, #0
 800caba:	d145      	bne.n	800cb48 <_malloc_r+0xdc>
 800cabc:	2c00      	cmp	r4, #0
 800cabe:	d048      	beq.n	800cb52 <_malloc_r+0xe6>
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	4631      	mov	r1, r6
 800cac4:	4638      	mov	r0, r7
 800cac6:	eb04 0903 	add.w	r9, r4, r3
 800caca:	f000 f8d5 	bl	800cc78 <_sbrk_r>
 800cace:	4581      	cmp	r9, r0
 800cad0:	d13f      	bne.n	800cb52 <_malloc_r+0xe6>
 800cad2:	6821      	ldr	r1, [r4, #0]
 800cad4:	4638      	mov	r0, r7
 800cad6:	1a6d      	subs	r5, r5, r1
 800cad8:	4629      	mov	r1, r5
 800cada:	f7ff ffa7 	bl	800ca2c <sbrk_aligned>
 800cade:	3001      	adds	r0, #1
 800cae0:	d037      	beq.n	800cb52 <_malloc_r+0xe6>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	442b      	add	r3, r5
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	f8d8 3000 	ldr.w	r3, [r8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d038      	beq.n	800cb62 <_malloc_r+0xf6>
 800caf0:	685a      	ldr	r2, [r3, #4]
 800caf2:	42a2      	cmp	r2, r4
 800caf4:	d12b      	bne.n	800cb4e <_malloc_r+0xe2>
 800caf6:	2200      	movs	r2, #0
 800caf8:	605a      	str	r2, [r3, #4]
 800cafa:	e00f      	b.n	800cb1c <_malloc_r+0xb0>
 800cafc:	6822      	ldr	r2, [r4, #0]
 800cafe:	1b52      	subs	r2, r2, r5
 800cb00:	d41f      	bmi.n	800cb42 <_malloc_r+0xd6>
 800cb02:	2a0b      	cmp	r2, #11
 800cb04:	d917      	bls.n	800cb36 <_malloc_r+0xca>
 800cb06:	1961      	adds	r1, r4, r5
 800cb08:	42a3      	cmp	r3, r4
 800cb0a:	6025      	str	r5, [r4, #0]
 800cb0c:	bf18      	it	ne
 800cb0e:	6059      	strne	r1, [r3, #4]
 800cb10:	6863      	ldr	r3, [r4, #4]
 800cb12:	bf08      	it	eq
 800cb14:	f8c8 1000 	streq.w	r1, [r8]
 800cb18:	5162      	str	r2, [r4, r5]
 800cb1a:	604b      	str	r3, [r1, #4]
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f104 060b 	add.w	r6, r4, #11
 800cb22:	f000 f829 	bl	800cb78 <__malloc_unlock>
 800cb26:	f026 0607 	bic.w	r6, r6, #7
 800cb2a:	1d23      	adds	r3, r4, #4
 800cb2c:	1af2      	subs	r2, r6, r3
 800cb2e:	d0ae      	beq.n	800ca8e <_malloc_r+0x22>
 800cb30:	1b9b      	subs	r3, r3, r6
 800cb32:	50a3      	str	r3, [r4, r2]
 800cb34:	e7ab      	b.n	800ca8e <_malloc_r+0x22>
 800cb36:	42a3      	cmp	r3, r4
 800cb38:	6862      	ldr	r2, [r4, #4]
 800cb3a:	d1dd      	bne.n	800caf8 <_malloc_r+0x8c>
 800cb3c:	f8c8 2000 	str.w	r2, [r8]
 800cb40:	e7ec      	b.n	800cb1c <_malloc_r+0xb0>
 800cb42:	4623      	mov	r3, r4
 800cb44:	6864      	ldr	r4, [r4, #4]
 800cb46:	e7ac      	b.n	800caa2 <_malloc_r+0x36>
 800cb48:	4634      	mov	r4, r6
 800cb4a:	6876      	ldr	r6, [r6, #4]
 800cb4c:	e7b4      	b.n	800cab8 <_malloc_r+0x4c>
 800cb4e:	4613      	mov	r3, r2
 800cb50:	e7cc      	b.n	800caec <_malloc_r+0x80>
 800cb52:	230c      	movs	r3, #12
 800cb54:	4638      	mov	r0, r7
 800cb56:	603b      	str	r3, [r7, #0]
 800cb58:	f000 f80e 	bl	800cb78 <__malloc_unlock>
 800cb5c:	e797      	b.n	800ca8e <_malloc_r+0x22>
 800cb5e:	6025      	str	r5, [r4, #0]
 800cb60:	e7dc      	b.n	800cb1c <_malloc_r+0xb0>
 800cb62:	605b      	str	r3, [r3, #4]
 800cb64:	deff      	udf	#255	; 0xff
 800cb66:	bf00      	nop
 800cb68:	20000e3c 	.word	0x20000e3c

0800cb6c <__malloc_lock>:
 800cb6c:	4801      	ldr	r0, [pc, #4]	; (800cb74 <__malloc_lock+0x8>)
 800cb6e:	f000 b8bd 	b.w	800ccec <__retarget_lock_acquire_recursive>
 800cb72:	bf00      	nop
 800cb74:	20000f80 	.word	0x20000f80

0800cb78 <__malloc_unlock>:
 800cb78:	4801      	ldr	r0, [pc, #4]	; (800cb80 <__malloc_unlock+0x8>)
 800cb7a:	f000 b8b8 	b.w	800ccee <__retarget_lock_release_recursive>
 800cb7e:	bf00      	nop
 800cb80:	20000f80 	.word	0x20000f80

0800cb84 <__utoa>:
 800cb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb86:	b08b      	sub	sp, #44	; 0x2c
 800cb88:	4605      	mov	r5, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	466e      	mov	r6, sp
 800cb8e:	4c1d      	ldr	r4, [pc, #116]	; (800cc04 <__utoa+0x80>)
 800cb90:	f104 0c20 	add.w	ip, r4, #32
 800cb94:	4637      	mov	r7, r6
 800cb96:	6820      	ldr	r0, [r4, #0]
 800cb98:	6861      	ldr	r1, [r4, #4]
 800cb9a:	3408      	adds	r4, #8
 800cb9c:	c703      	stmia	r7!, {r0, r1}
 800cb9e:	4564      	cmp	r4, ip
 800cba0:	463e      	mov	r6, r7
 800cba2:	d1f7      	bne.n	800cb94 <__utoa+0x10>
 800cba4:	7921      	ldrb	r1, [r4, #4]
 800cba6:	6820      	ldr	r0, [r4, #0]
 800cba8:	7139      	strb	r1, [r7, #4]
 800cbaa:	1e91      	subs	r1, r2, #2
 800cbac:	2922      	cmp	r1, #34	; 0x22
 800cbae:	6038      	str	r0, [r7, #0]
 800cbb0:	f04f 0100 	mov.w	r1, #0
 800cbb4:	d904      	bls.n	800cbc0 <__utoa+0x3c>
 800cbb6:	7019      	strb	r1, [r3, #0]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4618      	mov	r0, r3
 800cbbc:	b00b      	add	sp, #44	; 0x2c
 800cbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc0:	1e58      	subs	r0, r3, #1
 800cbc2:	4684      	mov	ip, r0
 800cbc4:	fbb5 f7f2 	udiv	r7, r5, r2
 800cbc8:	fb02 5617 	mls	r6, r2, r7, r5
 800cbcc:	3628      	adds	r6, #40	; 0x28
 800cbce:	446e      	add	r6, sp
 800cbd0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cbda:	462e      	mov	r6, r5
 800cbdc:	42b2      	cmp	r2, r6
 800cbde:	463d      	mov	r5, r7
 800cbe0:	f101 0101 	add.w	r1, r1, #1
 800cbe4:	d9ee      	bls.n	800cbc4 <__utoa+0x40>
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	545a      	strb	r2, [r3, r1]
 800cbea:	1919      	adds	r1, r3, r4
 800cbec:	1aa5      	subs	r5, r4, r2
 800cbee:	42aa      	cmp	r2, r5
 800cbf0:	dae3      	bge.n	800cbba <__utoa+0x36>
 800cbf2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cbf6:	780e      	ldrb	r6, [r1, #0]
 800cbf8:	3201      	adds	r2, #1
 800cbfa:	7006      	strb	r6, [r0, #0]
 800cbfc:	f801 5901 	strb.w	r5, [r1], #-1
 800cc00:	e7f4      	b.n	800cbec <__utoa+0x68>
 800cc02:	bf00      	nop
 800cc04:	0800e306 	.word	0x0800e306

0800cc08 <siprintf>:
 800cc08:	b40e      	push	{r1, r2, r3}
 800cc0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc0e:	b500      	push	{lr}
 800cc10:	b09c      	sub	sp, #112	; 0x70
 800cc12:	ab1d      	add	r3, sp, #116	; 0x74
 800cc14:	9002      	str	r0, [sp, #8]
 800cc16:	9006      	str	r0, [sp, #24]
 800cc18:	9107      	str	r1, [sp, #28]
 800cc1a:	9104      	str	r1, [sp, #16]
 800cc1c:	4808      	ldr	r0, [pc, #32]	; (800cc40 <siprintf+0x38>)
 800cc1e:	4909      	ldr	r1, [pc, #36]	; (800cc44 <siprintf+0x3c>)
 800cc20:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc24:	9105      	str	r1, [sp, #20]
 800cc26:	6800      	ldr	r0, [r0, #0]
 800cc28:	a902      	add	r1, sp, #8
 800cc2a:	9301      	str	r3, [sp, #4]
 800cc2c:	f000 f918 	bl	800ce60 <_svfiprintf_r>
 800cc30:	2200      	movs	r2, #0
 800cc32:	9b02      	ldr	r3, [sp, #8]
 800cc34:	701a      	strb	r2, [r3, #0]
 800cc36:	b01c      	add	sp, #112	; 0x70
 800cc38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc3c:	b003      	add	sp, #12
 800cc3e:	4770      	bx	lr
 800cc40:	200009b8 	.word	0x200009b8
 800cc44:	ffff0208 	.word	0xffff0208

0800cc48 <memset>:
 800cc48:	4603      	mov	r3, r0
 800cc4a:	4402      	add	r2, r0
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d100      	bne.n	800cc52 <memset+0xa>
 800cc50:	4770      	bx	lr
 800cc52:	f803 1b01 	strb.w	r1, [r3], #1
 800cc56:	e7f9      	b.n	800cc4c <memset+0x4>

0800cc58 <strcat>:
 800cc58:	4602      	mov	r2, r0
 800cc5a:	b510      	push	{r4, lr}
 800cc5c:	7814      	ldrb	r4, [r2, #0]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	3201      	adds	r2, #1
 800cc62:	2c00      	cmp	r4, #0
 800cc64:	d1fa      	bne.n	800cc5c <strcat+0x4>
 800cc66:	3b01      	subs	r3, #1
 800cc68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc70:	2a00      	cmp	r2, #0
 800cc72:	d1f9      	bne.n	800cc68 <strcat+0x10>
 800cc74:	bd10      	pop	{r4, pc}
	...

0800cc78 <_sbrk_r>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	4d05      	ldr	r5, [pc, #20]	; (800cc94 <_sbrk_r+0x1c>)
 800cc7e:	4604      	mov	r4, r0
 800cc80:	4608      	mov	r0, r1
 800cc82:	602b      	str	r3, [r5, #0]
 800cc84:	f7fc f808 	bl	8008c98 <_sbrk>
 800cc88:	1c43      	adds	r3, r0, #1
 800cc8a:	d102      	bne.n	800cc92 <_sbrk_r+0x1a>
 800cc8c:	682b      	ldr	r3, [r5, #0]
 800cc8e:	b103      	cbz	r3, 800cc92 <_sbrk_r+0x1a>
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	bd38      	pop	{r3, r4, r5, pc}
 800cc94:	20000f7c 	.word	0x20000f7c

0800cc98 <__errno>:
 800cc98:	4b01      	ldr	r3, [pc, #4]	; (800cca0 <__errno+0x8>)
 800cc9a:	6818      	ldr	r0, [r3, #0]
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	200009b8 	.word	0x200009b8

0800cca4 <__libc_init_array>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	2600      	movs	r6, #0
 800cca8:	4d0c      	ldr	r5, [pc, #48]	; (800ccdc <__libc_init_array+0x38>)
 800ccaa:	4c0d      	ldr	r4, [pc, #52]	; (800cce0 <__libc_init_array+0x3c>)
 800ccac:	1b64      	subs	r4, r4, r5
 800ccae:	10a4      	asrs	r4, r4, #2
 800ccb0:	42a6      	cmp	r6, r4
 800ccb2:	d109      	bne.n	800ccc8 <__libc_init_array+0x24>
 800ccb4:	f000 fbc6 	bl	800d444 <_init>
 800ccb8:	2600      	movs	r6, #0
 800ccba:	4d0a      	ldr	r5, [pc, #40]	; (800cce4 <__libc_init_array+0x40>)
 800ccbc:	4c0a      	ldr	r4, [pc, #40]	; (800cce8 <__libc_init_array+0x44>)
 800ccbe:	1b64      	subs	r4, r4, r5
 800ccc0:	10a4      	asrs	r4, r4, #2
 800ccc2:	42a6      	cmp	r6, r4
 800ccc4:	d105      	bne.n	800ccd2 <__libc_init_array+0x2e>
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cccc:	4798      	blx	r3
 800ccce:	3601      	adds	r6, #1
 800ccd0:	e7ee      	b.n	800ccb0 <__libc_init_array+0xc>
 800ccd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccd6:	4798      	blx	r3
 800ccd8:	3601      	adds	r6, #1
 800ccda:	e7f2      	b.n	800ccc2 <__libc_init_array+0x1e>
 800ccdc:	0800e360 	.word	0x0800e360
 800cce0:	0800e360 	.word	0x0800e360
 800cce4:	0800e360 	.word	0x0800e360
 800cce8:	0800e364 	.word	0x0800e364

0800ccec <__retarget_lock_acquire_recursive>:
 800ccec:	4770      	bx	lr

0800ccee <__retarget_lock_release_recursive>:
 800ccee:	4770      	bx	lr

0800ccf0 <strcpy>:
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccf6:	f803 2b01 	strb.w	r2, [r3], #1
 800ccfa:	2a00      	cmp	r2, #0
 800ccfc:	d1f9      	bne.n	800ccf2 <strcpy+0x2>
 800ccfe:	4770      	bx	lr

0800cd00 <memcpy>:
 800cd00:	440a      	add	r2, r1
 800cd02:	4291      	cmp	r1, r2
 800cd04:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd08:	d100      	bne.n	800cd0c <memcpy+0xc>
 800cd0a:	4770      	bx	lr
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd12:	4291      	cmp	r1, r2
 800cd14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd18:	d1f9      	bne.n	800cd0e <memcpy+0xe>
 800cd1a:	bd10      	pop	{r4, pc}

0800cd1c <_free_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4605      	mov	r5, r0
 800cd20:	2900      	cmp	r1, #0
 800cd22:	d040      	beq.n	800cda6 <_free_r+0x8a>
 800cd24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd28:	1f0c      	subs	r4, r1, #4
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	bfb8      	it	lt
 800cd2e:	18e4      	addlt	r4, r4, r3
 800cd30:	f7ff ff1c 	bl	800cb6c <__malloc_lock>
 800cd34:	4a1c      	ldr	r2, [pc, #112]	; (800cda8 <_free_r+0x8c>)
 800cd36:	6813      	ldr	r3, [r2, #0]
 800cd38:	b933      	cbnz	r3, 800cd48 <_free_r+0x2c>
 800cd3a:	6063      	str	r3, [r4, #4]
 800cd3c:	6014      	str	r4, [r2, #0]
 800cd3e:	4628      	mov	r0, r5
 800cd40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd44:	f7ff bf18 	b.w	800cb78 <__malloc_unlock>
 800cd48:	42a3      	cmp	r3, r4
 800cd4a:	d908      	bls.n	800cd5e <_free_r+0x42>
 800cd4c:	6820      	ldr	r0, [r4, #0]
 800cd4e:	1821      	adds	r1, r4, r0
 800cd50:	428b      	cmp	r3, r1
 800cd52:	bf01      	itttt	eq
 800cd54:	6819      	ldreq	r1, [r3, #0]
 800cd56:	685b      	ldreq	r3, [r3, #4]
 800cd58:	1809      	addeq	r1, r1, r0
 800cd5a:	6021      	streq	r1, [r4, #0]
 800cd5c:	e7ed      	b.n	800cd3a <_free_r+0x1e>
 800cd5e:	461a      	mov	r2, r3
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	b10b      	cbz	r3, 800cd68 <_free_r+0x4c>
 800cd64:	42a3      	cmp	r3, r4
 800cd66:	d9fa      	bls.n	800cd5e <_free_r+0x42>
 800cd68:	6811      	ldr	r1, [r2, #0]
 800cd6a:	1850      	adds	r0, r2, r1
 800cd6c:	42a0      	cmp	r0, r4
 800cd6e:	d10b      	bne.n	800cd88 <_free_r+0x6c>
 800cd70:	6820      	ldr	r0, [r4, #0]
 800cd72:	4401      	add	r1, r0
 800cd74:	1850      	adds	r0, r2, r1
 800cd76:	4283      	cmp	r3, r0
 800cd78:	6011      	str	r1, [r2, #0]
 800cd7a:	d1e0      	bne.n	800cd3e <_free_r+0x22>
 800cd7c:	6818      	ldr	r0, [r3, #0]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	4408      	add	r0, r1
 800cd82:	6010      	str	r0, [r2, #0]
 800cd84:	6053      	str	r3, [r2, #4]
 800cd86:	e7da      	b.n	800cd3e <_free_r+0x22>
 800cd88:	d902      	bls.n	800cd90 <_free_r+0x74>
 800cd8a:	230c      	movs	r3, #12
 800cd8c:	602b      	str	r3, [r5, #0]
 800cd8e:	e7d6      	b.n	800cd3e <_free_r+0x22>
 800cd90:	6820      	ldr	r0, [r4, #0]
 800cd92:	1821      	adds	r1, r4, r0
 800cd94:	428b      	cmp	r3, r1
 800cd96:	bf01      	itttt	eq
 800cd98:	6819      	ldreq	r1, [r3, #0]
 800cd9a:	685b      	ldreq	r3, [r3, #4]
 800cd9c:	1809      	addeq	r1, r1, r0
 800cd9e:	6021      	streq	r1, [r4, #0]
 800cda0:	6063      	str	r3, [r4, #4]
 800cda2:	6054      	str	r4, [r2, #4]
 800cda4:	e7cb      	b.n	800cd3e <_free_r+0x22>
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	20000e3c 	.word	0x20000e3c

0800cdac <__ssputs_r>:
 800cdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb0:	461f      	mov	r7, r3
 800cdb2:	688e      	ldr	r6, [r1, #8]
 800cdb4:	4682      	mov	sl, r0
 800cdb6:	42be      	cmp	r6, r7
 800cdb8:	460c      	mov	r4, r1
 800cdba:	4690      	mov	r8, r2
 800cdbc:	680b      	ldr	r3, [r1, #0]
 800cdbe:	d82c      	bhi.n	800ce1a <__ssputs_r+0x6e>
 800cdc0:	898a      	ldrh	r2, [r1, #12]
 800cdc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdc6:	d026      	beq.n	800ce16 <__ssputs_r+0x6a>
 800cdc8:	6965      	ldr	r5, [r4, #20]
 800cdca:	6909      	ldr	r1, [r1, #16]
 800cdcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdd0:	eba3 0901 	sub.w	r9, r3, r1
 800cdd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdd8:	1c7b      	adds	r3, r7, #1
 800cdda:	444b      	add	r3, r9
 800cddc:	106d      	asrs	r5, r5, #1
 800cdde:	429d      	cmp	r5, r3
 800cde0:	bf38      	it	cc
 800cde2:	461d      	movcc	r5, r3
 800cde4:	0553      	lsls	r3, r2, #21
 800cde6:	d527      	bpl.n	800ce38 <__ssputs_r+0x8c>
 800cde8:	4629      	mov	r1, r5
 800cdea:	f7ff fe3f 	bl	800ca6c <_malloc_r>
 800cdee:	4606      	mov	r6, r0
 800cdf0:	b360      	cbz	r0, 800ce4c <__ssputs_r+0xa0>
 800cdf2:	464a      	mov	r2, r9
 800cdf4:	6921      	ldr	r1, [r4, #16]
 800cdf6:	f7ff ff83 	bl	800cd00 <memcpy>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce04:	81a3      	strh	r3, [r4, #12]
 800ce06:	6126      	str	r6, [r4, #16]
 800ce08:	444e      	add	r6, r9
 800ce0a:	6026      	str	r6, [r4, #0]
 800ce0c:	463e      	mov	r6, r7
 800ce0e:	6165      	str	r5, [r4, #20]
 800ce10:	eba5 0509 	sub.w	r5, r5, r9
 800ce14:	60a5      	str	r5, [r4, #8]
 800ce16:	42be      	cmp	r6, r7
 800ce18:	d900      	bls.n	800ce1c <__ssputs_r+0x70>
 800ce1a:	463e      	mov	r6, r7
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4641      	mov	r1, r8
 800ce20:	6820      	ldr	r0, [r4, #0]
 800ce22:	f000 faaf 	bl	800d384 <memmove>
 800ce26:	2000      	movs	r0, #0
 800ce28:	68a3      	ldr	r3, [r4, #8]
 800ce2a:	1b9b      	subs	r3, r3, r6
 800ce2c:	60a3      	str	r3, [r4, #8]
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	4433      	add	r3, r6
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce38:	462a      	mov	r2, r5
 800ce3a:	f000 facb 	bl	800d3d4 <_realloc_r>
 800ce3e:	4606      	mov	r6, r0
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d1e0      	bne.n	800ce06 <__ssputs_r+0x5a>
 800ce44:	4650      	mov	r0, sl
 800ce46:	6921      	ldr	r1, [r4, #16]
 800ce48:	f7ff ff68 	bl	800cd1c <_free_r>
 800ce4c:	230c      	movs	r3, #12
 800ce4e:	f8ca 3000 	str.w	r3, [sl]
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	e7e9      	b.n	800ce34 <__ssputs_r+0x88>

0800ce60 <_svfiprintf_r>:
 800ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	4698      	mov	r8, r3
 800ce66:	898b      	ldrh	r3, [r1, #12]
 800ce68:	4607      	mov	r7, r0
 800ce6a:	061b      	lsls	r3, r3, #24
 800ce6c:	460d      	mov	r5, r1
 800ce6e:	4614      	mov	r4, r2
 800ce70:	b09d      	sub	sp, #116	; 0x74
 800ce72:	d50e      	bpl.n	800ce92 <_svfiprintf_r+0x32>
 800ce74:	690b      	ldr	r3, [r1, #16]
 800ce76:	b963      	cbnz	r3, 800ce92 <_svfiprintf_r+0x32>
 800ce78:	2140      	movs	r1, #64	; 0x40
 800ce7a:	f7ff fdf7 	bl	800ca6c <_malloc_r>
 800ce7e:	6028      	str	r0, [r5, #0]
 800ce80:	6128      	str	r0, [r5, #16]
 800ce82:	b920      	cbnz	r0, 800ce8e <_svfiprintf_r+0x2e>
 800ce84:	230c      	movs	r3, #12
 800ce86:	603b      	str	r3, [r7, #0]
 800ce88:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8c:	e0d0      	b.n	800d030 <_svfiprintf_r+0x1d0>
 800ce8e:	2340      	movs	r3, #64	; 0x40
 800ce90:	616b      	str	r3, [r5, #20]
 800ce92:	2300      	movs	r3, #0
 800ce94:	9309      	str	r3, [sp, #36]	; 0x24
 800ce96:	2320      	movs	r3, #32
 800ce98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce9c:	2330      	movs	r3, #48	; 0x30
 800ce9e:	f04f 0901 	mov.w	r9, #1
 800cea2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d048 <_svfiprintf_r+0x1e8>
 800ceaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceae:	4623      	mov	r3, r4
 800ceb0:	469a      	mov	sl, r3
 800ceb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceb6:	b10a      	cbz	r2, 800cebc <_svfiprintf_r+0x5c>
 800ceb8:	2a25      	cmp	r2, #37	; 0x25
 800ceba:	d1f9      	bne.n	800ceb0 <_svfiprintf_r+0x50>
 800cebc:	ebba 0b04 	subs.w	fp, sl, r4
 800cec0:	d00b      	beq.n	800ceda <_svfiprintf_r+0x7a>
 800cec2:	465b      	mov	r3, fp
 800cec4:	4622      	mov	r2, r4
 800cec6:	4629      	mov	r1, r5
 800cec8:	4638      	mov	r0, r7
 800ceca:	f7ff ff6f 	bl	800cdac <__ssputs_r>
 800cece:	3001      	adds	r0, #1
 800ced0:	f000 80a9 	beq.w	800d026 <_svfiprintf_r+0x1c6>
 800ced4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ced6:	445a      	add	r2, fp
 800ced8:	9209      	str	r2, [sp, #36]	; 0x24
 800ceda:	f89a 3000 	ldrb.w	r3, [sl]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 80a1 	beq.w	800d026 <_svfiprintf_r+0x1c6>
 800cee4:	2300      	movs	r3, #0
 800cee6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceee:	f10a 0a01 	add.w	sl, sl, #1
 800cef2:	9304      	str	r3, [sp, #16]
 800cef4:	9307      	str	r3, [sp, #28]
 800cef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cefa:	931a      	str	r3, [sp, #104]	; 0x68
 800cefc:	4654      	mov	r4, sl
 800cefe:	2205      	movs	r2, #5
 800cf00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf04:	4850      	ldr	r0, [pc, #320]	; (800d048 <_svfiprintf_r+0x1e8>)
 800cf06:	f000 fa57 	bl	800d3b8 <memchr>
 800cf0a:	9a04      	ldr	r2, [sp, #16]
 800cf0c:	b9d8      	cbnz	r0, 800cf46 <_svfiprintf_r+0xe6>
 800cf0e:	06d0      	lsls	r0, r2, #27
 800cf10:	bf44      	itt	mi
 800cf12:	2320      	movmi	r3, #32
 800cf14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf18:	0711      	lsls	r1, r2, #28
 800cf1a:	bf44      	itt	mi
 800cf1c:	232b      	movmi	r3, #43	; 0x2b
 800cf1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf22:	f89a 3000 	ldrb.w	r3, [sl]
 800cf26:	2b2a      	cmp	r3, #42	; 0x2a
 800cf28:	d015      	beq.n	800cf56 <_svfiprintf_r+0xf6>
 800cf2a:	4654      	mov	r4, sl
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	f04f 0c0a 	mov.w	ip, #10
 800cf32:	9a07      	ldr	r2, [sp, #28]
 800cf34:	4621      	mov	r1, r4
 800cf36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf3a:	3b30      	subs	r3, #48	; 0x30
 800cf3c:	2b09      	cmp	r3, #9
 800cf3e:	d94d      	bls.n	800cfdc <_svfiprintf_r+0x17c>
 800cf40:	b1b0      	cbz	r0, 800cf70 <_svfiprintf_r+0x110>
 800cf42:	9207      	str	r2, [sp, #28]
 800cf44:	e014      	b.n	800cf70 <_svfiprintf_r+0x110>
 800cf46:	eba0 0308 	sub.w	r3, r0, r8
 800cf4a:	fa09 f303 	lsl.w	r3, r9, r3
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	46a2      	mov	sl, r4
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	e7d2      	b.n	800cefc <_svfiprintf_r+0x9c>
 800cf56:	9b03      	ldr	r3, [sp, #12]
 800cf58:	1d19      	adds	r1, r3, #4
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	9103      	str	r1, [sp, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	bfbb      	ittet	lt
 800cf62:	425b      	neglt	r3, r3
 800cf64:	f042 0202 	orrlt.w	r2, r2, #2
 800cf68:	9307      	strge	r3, [sp, #28]
 800cf6a:	9307      	strlt	r3, [sp, #28]
 800cf6c:	bfb8      	it	lt
 800cf6e:	9204      	strlt	r2, [sp, #16]
 800cf70:	7823      	ldrb	r3, [r4, #0]
 800cf72:	2b2e      	cmp	r3, #46	; 0x2e
 800cf74:	d10c      	bne.n	800cf90 <_svfiprintf_r+0x130>
 800cf76:	7863      	ldrb	r3, [r4, #1]
 800cf78:	2b2a      	cmp	r3, #42	; 0x2a
 800cf7a:	d134      	bne.n	800cfe6 <_svfiprintf_r+0x186>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	3402      	adds	r4, #2
 800cf80:	1d1a      	adds	r2, r3, #4
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	9203      	str	r2, [sp, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	bfb8      	it	lt
 800cf8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf8e:	9305      	str	r3, [sp, #20]
 800cf90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d04c <_svfiprintf_r+0x1ec>
 800cf94:	2203      	movs	r2, #3
 800cf96:	4650      	mov	r0, sl
 800cf98:	7821      	ldrb	r1, [r4, #0]
 800cf9a:	f000 fa0d 	bl	800d3b8 <memchr>
 800cf9e:	b138      	cbz	r0, 800cfb0 <_svfiprintf_r+0x150>
 800cfa0:	2240      	movs	r2, #64	; 0x40
 800cfa2:	9b04      	ldr	r3, [sp, #16]
 800cfa4:	eba0 000a 	sub.w	r0, r0, sl
 800cfa8:	4082      	lsls	r2, r0
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	3401      	adds	r4, #1
 800cfae:	9304      	str	r3, [sp, #16]
 800cfb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb4:	2206      	movs	r2, #6
 800cfb6:	4826      	ldr	r0, [pc, #152]	; (800d050 <_svfiprintf_r+0x1f0>)
 800cfb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfbc:	f000 f9fc 	bl	800d3b8 <memchr>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d038      	beq.n	800d036 <_svfiprintf_r+0x1d6>
 800cfc4:	4b23      	ldr	r3, [pc, #140]	; (800d054 <_svfiprintf_r+0x1f4>)
 800cfc6:	bb1b      	cbnz	r3, 800d010 <_svfiprintf_r+0x1b0>
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	3307      	adds	r3, #7
 800cfcc:	f023 0307 	bic.w	r3, r3, #7
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	9303      	str	r3, [sp, #12]
 800cfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd6:	4433      	add	r3, r6
 800cfd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfda:	e768      	b.n	800ceae <_svfiprintf_r+0x4e>
 800cfdc:	460c      	mov	r4, r1
 800cfde:	2001      	movs	r0, #1
 800cfe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfe4:	e7a6      	b.n	800cf34 <_svfiprintf_r+0xd4>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f04f 0c0a 	mov.w	ip, #10
 800cfec:	4619      	mov	r1, r3
 800cfee:	3401      	adds	r4, #1
 800cff0:	9305      	str	r3, [sp, #20]
 800cff2:	4620      	mov	r0, r4
 800cff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff8:	3a30      	subs	r2, #48	; 0x30
 800cffa:	2a09      	cmp	r2, #9
 800cffc:	d903      	bls.n	800d006 <_svfiprintf_r+0x1a6>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d0c6      	beq.n	800cf90 <_svfiprintf_r+0x130>
 800d002:	9105      	str	r1, [sp, #20]
 800d004:	e7c4      	b.n	800cf90 <_svfiprintf_r+0x130>
 800d006:	4604      	mov	r4, r0
 800d008:	2301      	movs	r3, #1
 800d00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d00e:	e7f0      	b.n	800cff2 <_svfiprintf_r+0x192>
 800d010:	ab03      	add	r3, sp, #12
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	462a      	mov	r2, r5
 800d016:	4638      	mov	r0, r7
 800d018:	4b0f      	ldr	r3, [pc, #60]	; (800d058 <_svfiprintf_r+0x1f8>)
 800d01a:	a904      	add	r1, sp, #16
 800d01c:	f3af 8000 	nop.w
 800d020:	1c42      	adds	r2, r0, #1
 800d022:	4606      	mov	r6, r0
 800d024:	d1d6      	bne.n	800cfd4 <_svfiprintf_r+0x174>
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	065b      	lsls	r3, r3, #25
 800d02a:	f53f af2d 	bmi.w	800ce88 <_svfiprintf_r+0x28>
 800d02e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d030:	b01d      	add	sp, #116	; 0x74
 800d032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d036:	ab03      	add	r3, sp, #12
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	462a      	mov	r2, r5
 800d03c:	4638      	mov	r0, r7
 800d03e:	4b06      	ldr	r3, [pc, #24]	; (800d058 <_svfiprintf_r+0x1f8>)
 800d040:	a904      	add	r1, sp, #16
 800d042:	f000 f87d 	bl	800d140 <_printf_i>
 800d046:	e7eb      	b.n	800d020 <_svfiprintf_r+0x1c0>
 800d048:	0800e32b 	.word	0x0800e32b
 800d04c:	0800e331 	.word	0x0800e331
 800d050:	0800e335 	.word	0x0800e335
 800d054:	00000000 	.word	0x00000000
 800d058:	0800cdad 	.word	0x0800cdad

0800d05c <_printf_common>:
 800d05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d060:	4616      	mov	r6, r2
 800d062:	4699      	mov	r9, r3
 800d064:	688a      	ldr	r2, [r1, #8]
 800d066:	690b      	ldr	r3, [r1, #16]
 800d068:	4607      	mov	r7, r0
 800d06a:	4293      	cmp	r3, r2
 800d06c:	bfb8      	it	lt
 800d06e:	4613      	movlt	r3, r2
 800d070:	6033      	str	r3, [r6, #0]
 800d072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d076:	460c      	mov	r4, r1
 800d078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d07c:	b10a      	cbz	r2, 800d082 <_printf_common+0x26>
 800d07e:	3301      	adds	r3, #1
 800d080:	6033      	str	r3, [r6, #0]
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	0699      	lsls	r1, r3, #26
 800d086:	bf42      	ittt	mi
 800d088:	6833      	ldrmi	r3, [r6, #0]
 800d08a:	3302      	addmi	r3, #2
 800d08c:	6033      	strmi	r3, [r6, #0]
 800d08e:	6825      	ldr	r5, [r4, #0]
 800d090:	f015 0506 	ands.w	r5, r5, #6
 800d094:	d106      	bne.n	800d0a4 <_printf_common+0x48>
 800d096:	f104 0a19 	add.w	sl, r4, #25
 800d09a:	68e3      	ldr	r3, [r4, #12]
 800d09c:	6832      	ldr	r2, [r6, #0]
 800d09e:	1a9b      	subs	r3, r3, r2
 800d0a0:	42ab      	cmp	r3, r5
 800d0a2:	dc2b      	bgt.n	800d0fc <_printf_common+0xa0>
 800d0a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0a8:	1e13      	subs	r3, r2, #0
 800d0aa:	6822      	ldr	r2, [r4, #0]
 800d0ac:	bf18      	it	ne
 800d0ae:	2301      	movne	r3, #1
 800d0b0:	0692      	lsls	r2, r2, #26
 800d0b2:	d430      	bmi.n	800d116 <_printf_common+0xba>
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0bc:	47c0      	blx	r8
 800d0be:	3001      	adds	r0, #1
 800d0c0:	d023      	beq.n	800d10a <_printf_common+0xae>
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	6922      	ldr	r2, [r4, #16]
 800d0c6:	f003 0306 	and.w	r3, r3, #6
 800d0ca:	2b04      	cmp	r3, #4
 800d0cc:	bf14      	ite	ne
 800d0ce:	2500      	movne	r5, #0
 800d0d0:	6833      	ldreq	r3, [r6, #0]
 800d0d2:	f04f 0600 	mov.w	r6, #0
 800d0d6:	bf08      	it	eq
 800d0d8:	68e5      	ldreq	r5, [r4, #12]
 800d0da:	f104 041a 	add.w	r4, r4, #26
 800d0de:	bf08      	it	eq
 800d0e0:	1aed      	subeq	r5, r5, r3
 800d0e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d0e6:	bf08      	it	eq
 800d0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	bfc4      	itt	gt
 800d0f0:	1a9b      	subgt	r3, r3, r2
 800d0f2:	18ed      	addgt	r5, r5, r3
 800d0f4:	42b5      	cmp	r5, r6
 800d0f6:	d11a      	bne.n	800d12e <_printf_common+0xd2>
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	e008      	b.n	800d10e <_printf_common+0xb2>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	4652      	mov	r2, sl
 800d100:	4649      	mov	r1, r9
 800d102:	4638      	mov	r0, r7
 800d104:	47c0      	blx	r8
 800d106:	3001      	adds	r0, #1
 800d108:	d103      	bne.n	800d112 <_printf_common+0xb6>
 800d10a:	f04f 30ff 	mov.w	r0, #4294967295
 800d10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d112:	3501      	adds	r5, #1
 800d114:	e7c1      	b.n	800d09a <_printf_common+0x3e>
 800d116:	2030      	movs	r0, #48	; 0x30
 800d118:	18e1      	adds	r1, r4, r3
 800d11a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d11e:	1c5a      	adds	r2, r3, #1
 800d120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d124:	4422      	add	r2, r4
 800d126:	3302      	adds	r3, #2
 800d128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d12c:	e7c2      	b.n	800d0b4 <_printf_common+0x58>
 800d12e:	2301      	movs	r3, #1
 800d130:	4622      	mov	r2, r4
 800d132:	4649      	mov	r1, r9
 800d134:	4638      	mov	r0, r7
 800d136:	47c0      	blx	r8
 800d138:	3001      	adds	r0, #1
 800d13a:	d0e6      	beq.n	800d10a <_printf_common+0xae>
 800d13c:	3601      	adds	r6, #1
 800d13e:	e7d9      	b.n	800d0f4 <_printf_common+0x98>

0800d140 <_printf_i>:
 800d140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d144:	7e0f      	ldrb	r7, [r1, #24]
 800d146:	4691      	mov	r9, r2
 800d148:	2f78      	cmp	r7, #120	; 0x78
 800d14a:	4680      	mov	r8, r0
 800d14c:	460c      	mov	r4, r1
 800d14e:	469a      	mov	sl, r3
 800d150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d156:	d807      	bhi.n	800d168 <_printf_i+0x28>
 800d158:	2f62      	cmp	r7, #98	; 0x62
 800d15a:	d80a      	bhi.n	800d172 <_printf_i+0x32>
 800d15c:	2f00      	cmp	r7, #0
 800d15e:	f000 80d5 	beq.w	800d30c <_printf_i+0x1cc>
 800d162:	2f58      	cmp	r7, #88	; 0x58
 800d164:	f000 80c1 	beq.w	800d2ea <_printf_i+0x1aa>
 800d168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d16c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d170:	e03a      	b.n	800d1e8 <_printf_i+0xa8>
 800d172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d176:	2b15      	cmp	r3, #21
 800d178:	d8f6      	bhi.n	800d168 <_printf_i+0x28>
 800d17a:	a101      	add	r1, pc, #4	; (adr r1, 800d180 <_printf_i+0x40>)
 800d17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d180:	0800d1d9 	.word	0x0800d1d9
 800d184:	0800d1ed 	.word	0x0800d1ed
 800d188:	0800d169 	.word	0x0800d169
 800d18c:	0800d169 	.word	0x0800d169
 800d190:	0800d169 	.word	0x0800d169
 800d194:	0800d169 	.word	0x0800d169
 800d198:	0800d1ed 	.word	0x0800d1ed
 800d19c:	0800d169 	.word	0x0800d169
 800d1a0:	0800d169 	.word	0x0800d169
 800d1a4:	0800d169 	.word	0x0800d169
 800d1a8:	0800d169 	.word	0x0800d169
 800d1ac:	0800d2f3 	.word	0x0800d2f3
 800d1b0:	0800d219 	.word	0x0800d219
 800d1b4:	0800d2ad 	.word	0x0800d2ad
 800d1b8:	0800d169 	.word	0x0800d169
 800d1bc:	0800d169 	.word	0x0800d169
 800d1c0:	0800d315 	.word	0x0800d315
 800d1c4:	0800d169 	.word	0x0800d169
 800d1c8:	0800d219 	.word	0x0800d219
 800d1cc:	0800d169 	.word	0x0800d169
 800d1d0:	0800d169 	.word	0x0800d169
 800d1d4:	0800d2b5 	.word	0x0800d2b5
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	1d1a      	adds	r2, r3, #4
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	602a      	str	r2, [r5, #0]
 800d1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e0a0      	b.n	800d32e <_printf_i+0x1ee>
 800d1ec:	6820      	ldr	r0, [r4, #0]
 800d1ee:	682b      	ldr	r3, [r5, #0]
 800d1f0:	0607      	lsls	r7, r0, #24
 800d1f2:	f103 0104 	add.w	r1, r3, #4
 800d1f6:	6029      	str	r1, [r5, #0]
 800d1f8:	d501      	bpl.n	800d1fe <_printf_i+0xbe>
 800d1fa:	681e      	ldr	r6, [r3, #0]
 800d1fc:	e003      	b.n	800d206 <_printf_i+0xc6>
 800d1fe:	0646      	lsls	r6, r0, #25
 800d200:	d5fb      	bpl.n	800d1fa <_printf_i+0xba>
 800d202:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d206:	2e00      	cmp	r6, #0
 800d208:	da03      	bge.n	800d212 <_printf_i+0xd2>
 800d20a:	232d      	movs	r3, #45	; 0x2d
 800d20c:	4276      	negs	r6, r6
 800d20e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d212:	230a      	movs	r3, #10
 800d214:	4859      	ldr	r0, [pc, #356]	; (800d37c <_printf_i+0x23c>)
 800d216:	e012      	b.n	800d23e <_printf_i+0xfe>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	6820      	ldr	r0, [r4, #0]
 800d21c:	1d19      	adds	r1, r3, #4
 800d21e:	6029      	str	r1, [r5, #0]
 800d220:	0605      	lsls	r5, r0, #24
 800d222:	d501      	bpl.n	800d228 <_printf_i+0xe8>
 800d224:	681e      	ldr	r6, [r3, #0]
 800d226:	e002      	b.n	800d22e <_printf_i+0xee>
 800d228:	0641      	lsls	r1, r0, #25
 800d22a:	d5fb      	bpl.n	800d224 <_printf_i+0xe4>
 800d22c:	881e      	ldrh	r6, [r3, #0]
 800d22e:	2f6f      	cmp	r7, #111	; 0x6f
 800d230:	bf0c      	ite	eq
 800d232:	2308      	moveq	r3, #8
 800d234:	230a      	movne	r3, #10
 800d236:	4851      	ldr	r0, [pc, #324]	; (800d37c <_printf_i+0x23c>)
 800d238:	2100      	movs	r1, #0
 800d23a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d23e:	6865      	ldr	r5, [r4, #4]
 800d240:	2d00      	cmp	r5, #0
 800d242:	bfa8      	it	ge
 800d244:	6821      	ldrge	r1, [r4, #0]
 800d246:	60a5      	str	r5, [r4, #8]
 800d248:	bfa4      	itt	ge
 800d24a:	f021 0104 	bicge.w	r1, r1, #4
 800d24e:	6021      	strge	r1, [r4, #0]
 800d250:	b90e      	cbnz	r6, 800d256 <_printf_i+0x116>
 800d252:	2d00      	cmp	r5, #0
 800d254:	d04b      	beq.n	800d2ee <_printf_i+0x1ae>
 800d256:	4615      	mov	r5, r2
 800d258:	fbb6 f1f3 	udiv	r1, r6, r3
 800d25c:	fb03 6711 	mls	r7, r3, r1, r6
 800d260:	5dc7      	ldrb	r7, [r0, r7]
 800d262:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d266:	4637      	mov	r7, r6
 800d268:	42bb      	cmp	r3, r7
 800d26a:	460e      	mov	r6, r1
 800d26c:	d9f4      	bls.n	800d258 <_printf_i+0x118>
 800d26e:	2b08      	cmp	r3, #8
 800d270:	d10b      	bne.n	800d28a <_printf_i+0x14a>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	07de      	lsls	r6, r3, #31
 800d276:	d508      	bpl.n	800d28a <_printf_i+0x14a>
 800d278:	6923      	ldr	r3, [r4, #16]
 800d27a:	6861      	ldr	r1, [r4, #4]
 800d27c:	4299      	cmp	r1, r3
 800d27e:	bfde      	ittt	le
 800d280:	2330      	movle	r3, #48	; 0x30
 800d282:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d286:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d28a:	1b52      	subs	r2, r2, r5
 800d28c:	6122      	str	r2, [r4, #16]
 800d28e:	464b      	mov	r3, r9
 800d290:	4621      	mov	r1, r4
 800d292:	4640      	mov	r0, r8
 800d294:	f8cd a000 	str.w	sl, [sp]
 800d298:	aa03      	add	r2, sp, #12
 800d29a:	f7ff fedf 	bl	800d05c <_printf_common>
 800d29e:	3001      	adds	r0, #1
 800d2a0:	d14a      	bne.n	800d338 <_printf_i+0x1f8>
 800d2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a6:	b004      	add	sp, #16
 800d2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	f043 0320 	orr.w	r3, r3, #32
 800d2b2:	6023      	str	r3, [r4, #0]
 800d2b4:	2778      	movs	r7, #120	; 0x78
 800d2b6:	4832      	ldr	r0, [pc, #200]	; (800d380 <_printf_i+0x240>)
 800d2b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	6829      	ldr	r1, [r5, #0]
 800d2c0:	061f      	lsls	r7, r3, #24
 800d2c2:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2c6:	d402      	bmi.n	800d2ce <_printf_i+0x18e>
 800d2c8:	065f      	lsls	r7, r3, #25
 800d2ca:	bf48      	it	mi
 800d2cc:	b2b6      	uxthmi	r6, r6
 800d2ce:	07df      	lsls	r7, r3, #31
 800d2d0:	bf48      	it	mi
 800d2d2:	f043 0320 	orrmi.w	r3, r3, #32
 800d2d6:	6029      	str	r1, [r5, #0]
 800d2d8:	bf48      	it	mi
 800d2da:	6023      	strmi	r3, [r4, #0]
 800d2dc:	b91e      	cbnz	r6, 800d2e6 <_printf_i+0x1a6>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	f023 0320 	bic.w	r3, r3, #32
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	2310      	movs	r3, #16
 800d2e8:	e7a6      	b.n	800d238 <_printf_i+0xf8>
 800d2ea:	4824      	ldr	r0, [pc, #144]	; (800d37c <_printf_i+0x23c>)
 800d2ec:	e7e4      	b.n	800d2b8 <_printf_i+0x178>
 800d2ee:	4615      	mov	r5, r2
 800d2f0:	e7bd      	b.n	800d26e <_printf_i+0x12e>
 800d2f2:	682b      	ldr	r3, [r5, #0]
 800d2f4:	6826      	ldr	r6, [r4, #0]
 800d2f6:	1d18      	adds	r0, r3, #4
 800d2f8:	6961      	ldr	r1, [r4, #20]
 800d2fa:	6028      	str	r0, [r5, #0]
 800d2fc:	0635      	lsls	r5, r6, #24
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	d501      	bpl.n	800d306 <_printf_i+0x1c6>
 800d302:	6019      	str	r1, [r3, #0]
 800d304:	e002      	b.n	800d30c <_printf_i+0x1cc>
 800d306:	0670      	lsls	r0, r6, #25
 800d308:	d5fb      	bpl.n	800d302 <_printf_i+0x1c2>
 800d30a:	8019      	strh	r1, [r3, #0]
 800d30c:	2300      	movs	r3, #0
 800d30e:	4615      	mov	r5, r2
 800d310:	6123      	str	r3, [r4, #16]
 800d312:	e7bc      	b.n	800d28e <_printf_i+0x14e>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	2100      	movs	r1, #0
 800d318:	1d1a      	adds	r2, r3, #4
 800d31a:	602a      	str	r2, [r5, #0]
 800d31c:	681d      	ldr	r5, [r3, #0]
 800d31e:	6862      	ldr	r2, [r4, #4]
 800d320:	4628      	mov	r0, r5
 800d322:	f000 f849 	bl	800d3b8 <memchr>
 800d326:	b108      	cbz	r0, 800d32c <_printf_i+0x1ec>
 800d328:	1b40      	subs	r0, r0, r5
 800d32a:	6060      	str	r0, [r4, #4]
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	6123      	str	r3, [r4, #16]
 800d330:	2300      	movs	r3, #0
 800d332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d336:	e7aa      	b.n	800d28e <_printf_i+0x14e>
 800d338:	462a      	mov	r2, r5
 800d33a:	4649      	mov	r1, r9
 800d33c:	4640      	mov	r0, r8
 800d33e:	6923      	ldr	r3, [r4, #16]
 800d340:	47d0      	blx	sl
 800d342:	3001      	adds	r0, #1
 800d344:	d0ad      	beq.n	800d2a2 <_printf_i+0x162>
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	079b      	lsls	r3, r3, #30
 800d34a:	d413      	bmi.n	800d374 <_printf_i+0x234>
 800d34c:	68e0      	ldr	r0, [r4, #12]
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	4298      	cmp	r0, r3
 800d352:	bfb8      	it	lt
 800d354:	4618      	movlt	r0, r3
 800d356:	e7a6      	b.n	800d2a6 <_printf_i+0x166>
 800d358:	2301      	movs	r3, #1
 800d35a:	4632      	mov	r2, r6
 800d35c:	4649      	mov	r1, r9
 800d35e:	4640      	mov	r0, r8
 800d360:	47d0      	blx	sl
 800d362:	3001      	adds	r0, #1
 800d364:	d09d      	beq.n	800d2a2 <_printf_i+0x162>
 800d366:	3501      	adds	r5, #1
 800d368:	68e3      	ldr	r3, [r4, #12]
 800d36a:	9903      	ldr	r1, [sp, #12]
 800d36c:	1a5b      	subs	r3, r3, r1
 800d36e:	42ab      	cmp	r3, r5
 800d370:	dcf2      	bgt.n	800d358 <_printf_i+0x218>
 800d372:	e7eb      	b.n	800d34c <_printf_i+0x20c>
 800d374:	2500      	movs	r5, #0
 800d376:	f104 0619 	add.w	r6, r4, #25
 800d37a:	e7f5      	b.n	800d368 <_printf_i+0x228>
 800d37c:	0800e33c 	.word	0x0800e33c
 800d380:	0800e34d 	.word	0x0800e34d

0800d384 <memmove>:
 800d384:	4288      	cmp	r0, r1
 800d386:	b510      	push	{r4, lr}
 800d388:	eb01 0402 	add.w	r4, r1, r2
 800d38c:	d902      	bls.n	800d394 <memmove+0x10>
 800d38e:	4284      	cmp	r4, r0
 800d390:	4623      	mov	r3, r4
 800d392:	d807      	bhi.n	800d3a4 <memmove+0x20>
 800d394:	1e43      	subs	r3, r0, #1
 800d396:	42a1      	cmp	r1, r4
 800d398:	d008      	beq.n	800d3ac <memmove+0x28>
 800d39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d39e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3a2:	e7f8      	b.n	800d396 <memmove+0x12>
 800d3a4:	4601      	mov	r1, r0
 800d3a6:	4402      	add	r2, r0
 800d3a8:	428a      	cmp	r2, r1
 800d3aa:	d100      	bne.n	800d3ae <memmove+0x2a>
 800d3ac:	bd10      	pop	{r4, pc}
 800d3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3b6:	e7f7      	b.n	800d3a8 <memmove+0x24>

0800d3b8 <memchr>:
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	b510      	push	{r4, lr}
 800d3bc:	b2c9      	uxtb	r1, r1
 800d3be:	4402      	add	r2, r0
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	d101      	bne.n	800d3ca <memchr+0x12>
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	e003      	b.n	800d3d2 <memchr+0x1a>
 800d3ca:	7804      	ldrb	r4, [r0, #0]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	428c      	cmp	r4, r1
 800d3d0:	d1f6      	bne.n	800d3c0 <memchr+0x8>
 800d3d2:	bd10      	pop	{r4, pc}

0800d3d4 <_realloc_r>:
 800d3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d8:	4680      	mov	r8, r0
 800d3da:	4614      	mov	r4, r2
 800d3dc:	460e      	mov	r6, r1
 800d3de:	b921      	cbnz	r1, 800d3ea <_realloc_r+0x16>
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e6:	f7ff bb41 	b.w	800ca6c <_malloc_r>
 800d3ea:	b92a      	cbnz	r2, 800d3f8 <_realloc_r+0x24>
 800d3ec:	f7ff fc96 	bl	800cd1c <_free_r>
 800d3f0:	4625      	mov	r5, r4
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f8:	f000 f81b 	bl	800d432 <_malloc_usable_size_r>
 800d3fc:	4284      	cmp	r4, r0
 800d3fe:	4607      	mov	r7, r0
 800d400:	d802      	bhi.n	800d408 <_realloc_r+0x34>
 800d402:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d406:	d812      	bhi.n	800d42e <_realloc_r+0x5a>
 800d408:	4621      	mov	r1, r4
 800d40a:	4640      	mov	r0, r8
 800d40c:	f7ff fb2e 	bl	800ca6c <_malloc_r>
 800d410:	4605      	mov	r5, r0
 800d412:	2800      	cmp	r0, #0
 800d414:	d0ed      	beq.n	800d3f2 <_realloc_r+0x1e>
 800d416:	42bc      	cmp	r4, r7
 800d418:	4622      	mov	r2, r4
 800d41a:	4631      	mov	r1, r6
 800d41c:	bf28      	it	cs
 800d41e:	463a      	movcs	r2, r7
 800d420:	f7ff fc6e 	bl	800cd00 <memcpy>
 800d424:	4631      	mov	r1, r6
 800d426:	4640      	mov	r0, r8
 800d428:	f7ff fc78 	bl	800cd1c <_free_r>
 800d42c:	e7e1      	b.n	800d3f2 <_realloc_r+0x1e>
 800d42e:	4635      	mov	r5, r6
 800d430:	e7df      	b.n	800d3f2 <_realloc_r+0x1e>

0800d432 <_malloc_usable_size_r>:
 800d432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d436:	1f18      	subs	r0, r3, #4
 800d438:	2b00      	cmp	r3, #0
 800d43a:	bfbc      	itt	lt
 800d43c:	580b      	ldrlt	r3, [r1, r0]
 800d43e:	18c0      	addlt	r0, r0, r3
 800d440:	4770      	bx	lr
	...

0800d444 <_init>:
 800d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d446:	bf00      	nop
 800d448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d44a:	bc08      	pop	{r3}
 800d44c:	469e      	mov	lr, r3
 800d44e:	4770      	bx	lr

0800d450 <_fini>:
 800d450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d452:	bf00      	nop
 800d454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d456:	bc08      	pop	{r3}
 800d458:	469e      	mov	lr, r3
 800d45a:	4770      	bx	lr
