
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd64  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cf48  0800cf48  0001cf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df24  0800df24  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800df24  0800df24  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df24  0800df24  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df24  0800df24  0001df24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df28  0800df28  0001df28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800df2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000110  0800e03c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800e03c  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016718  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c7  00000000  00000000  00036894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e56  00000000  00000000  0003afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c69b  00000000  00000000  0003be36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c10f  00000000  00000000  000584d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee37  00000000  00000000  000745e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051f0  00000000  00000000  00113418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cf30 	.word	0x0800cf30

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800cf30 	.word	0x0800cf30

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fce0 	bl	8009c14 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fb58 	bl	800890c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	200003bc 	.word	0x200003bc
 80004c0:	2000020d 	.word	0x2000020d
 80004c4:	20000235 	.word	0x20000235
 80004c8:	20000238 	.word	0x20000238
 80004cc:	20000239 	.word	0x20000239
 80004d0:	2000023a 	.word	0x2000023a
 80004d4:	2000023b 	.word	0x2000023b
 80004d8:	2000023c 	.word	0x2000023c
 80004dc:	2000023d 	.word	0x2000023d
 80004e0:	2000024d 	.word	0x2000024d
 80004e4:	2000023e 	.word	0x2000023e
 80004e8:	2000024e 	.word	0x2000024e
 80004ec:	2000023f 	.word	0x2000023f
 80004f0:	2000024f 	.word	0x2000024f
 80004f4:	20000242 	.word	0x20000242
 80004f8:	20000243 	.word	0x20000243
 80004fc:	20000244 	.word	0x20000244
 8000500:	20000245 	.word	0x20000245
 8000504:	20000246 	.word	0x20000246
 8000508:	20000247 	.word	0x20000247
 800050c:	20000248 	.word	0x20000248
 8000510:	20000249 	.word	0x20000249
 8000514:	2000024a 	.word	0x2000024a
 8000518:	2000024b 	.word	0x2000024b
 800051c:	2000024c 	.word	0x2000024c
 8000520:	20000250 	.word	0x20000250
 8000524:	20000252 	.word	0x20000252
 8000528:	20000230 	.word	0x20000230
 800052c:	20000231 	.word	0x20000231
 8000530:	20000232 	.word	0x20000232
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000233 	.word	0x20000233
 8000540:	20000255 	.word	0x20000255
 8000544:	20000253 	.word	0x20000253
 8000548:	20000241 	.word	0x20000241
 800054c:	20000254 	.word	0x20000254
 8000550:	20000240 	.word	0x20000240
 8000554:	20000256 	.word	0x20000256
 8000558:	20000257 	.word	0x20000257
 800055c:	20000258 	.word	0x20000258
 8000560:	20000259 	.word	0x20000259
 8000564:	2000025a 	.word	0x2000025a
 8000568:	2000025b 	.word	0x2000025b
 800056c:	2000025c 	.word	0x2000025c
 8000570:	2000025d 	.word	0x2000025d
 8000574:	2000025e 	.word	0x2000025e
 8000578:	2000025f 	.word	0x2000025f
 800057c:	2000020c 	.word	0x2000020c
	}

	if(kapi1AcSure>5) {
 8000580:	4b5e      	ldr	r3, [pc, #376]	; (80006fc <eepromKontrol+0x4c8>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b5c      	ldr	r3, [pc, #368]	; (80006fc <eepromKontrol+0x4c8>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b5c      	ldr	r3, [pc, #368]	; (8000700 <eepromKontrol+0x4cc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b5a      	ldr	r3, [pc, #360]	; (8000700 <eepromKontrol+0x4cc>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b59      	ldr	r3, [pc, #356]	; (8000704 <eepromKontrol+0x4d0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b57      	ldr	r3, [pc, #348]	; (8000704 <eepromKontrol+0x4d0>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b57      	ldr	r3, [pc, #348]	; (8000708 <eepromKontrol+0x4d4>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b55      	ldr	r3, [pc, #340]	; (8000708 <eepromKontrol+0x4d4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b54      	ldr	r3, [pc, #336]	; (800070c <eepromKontrol+0x4d8>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b52      	ldr	r3, [pc, #328]	; (800070c <eepromKontrol+0x4d8>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b52      	ldr	r3, [pc, #328]	; (8000710 <eepromKontrol+0x4dc>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b50      	ldr	r3, [pc, #320]	; (8000710 <eepromKontrol+0x4dc>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4f      	ldr	r3, [pc, #316]	; (8000714 <eepromKontrol+0x4e0>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b4d      	ldr	r3, [pc, #308]	; (8000714 <eepromKontrol+0x4e0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b4d      	ldr	r3, [pc, #308]	; (8000718 <eepromKontrol+0x4e4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b4b      	ldr	r3, [pc, #300]	; (8000718 <eepromKontrol+0x4e4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b4a      	ldr	r3, [pc, #296]	; (800071c <eepromKontrol+0x4e8>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <eepromKontrol+0x4e8>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b48      	ldr	r3, [pc, #288]	; (8000720 <eepromKontrol+0x4ec>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b46      	ldr	r3, [pc, #280]	; (8000720 <eepromKontrol+0x4ec>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b45      	ldr	r3, [pc, #276]	; (8000724 <eepromKontrol+0x4f0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b43      	ldr	r3, [pc, #268]	; (8000724 <eepromKontrol+0x4f0>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b43      	ldr	r3, [pc, #268]	; (8000728 <eepromKontrol+0x4f4>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b41      	ldr	r3, [pc, #260]	; (8000728 <eepromKontrol+0x4f4>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b40      	ldr	r3, [pc, #256]	; (800072c <eepromKontrol+0x4f8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b3e      	ldr	r3, [pc, #248]	; (800072c <eepromKontrol+0x4f8>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <eepromKontrol+0x4fc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <eepromKontrol+0x4fc>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <eepromKontrol+0x500>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b39      	ldr	r3, [pc, #228]	; (8000734 <eepromKontrol+0x500>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b39      	ldr	r3, [pc, #228]	; (8000738 <eepromKontrol+0x504>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b37      	ldr	r3, [pc, #220]	; (8000738 <eepromKontrol+0x504>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b36      	ldr	r3, [pc, #216]	; (800073c <eepromKontrol+0x508>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b34      	ldr	r3, [pc, #208]	; (800073c <eepromKontrol+0x508>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b34      	ldr	r3, [pc, #208]	; (8000740 <eepromKontrol+0x50c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <eepromKontrol+0x50c>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b31      	ldr	r3, [pc, #196]	; (8000744 <eepromKontrol+0x510>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <eepromKontrol+0x510>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <eepromKontrol+0x514>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <eepromKontrol+0x514>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <eepromKontrol+0x518>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <eepromKontrol+0x518>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <eepromKontrol+0x51c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <eepromKontrol+0x51c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	//memcpy(machineID, &eepromData[idStartPos], 12);
	readFromEEPROM(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f84d 	bl	8000754 <readFromEEPROM>
	HAL_Delay(100);
 80006ba:	2064      	movs	r0, #100	; 0x64
 80006bc:	f008 f926 	bl	800890c <HAL_Delay>
	readFromEEPROM(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f847 	bl	8000754 <readFromEEPROM>
	HAL_Delay(100);
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f008 f920 	bl	800890c <HAL_Delay>
	readFromEEPROM(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f841 	bl	8000754 <readFromEEPROM>
	HAL_Delay(200);
 80006d2:	20c8      	movs	r0, #200	; 0xc8
 80006d4:	f008 f91a 	bl	800890c <HAL_Delay>
	convertArrays(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 f8b5 	bl	8000848 <convertArrays>
	HAL_Delay(50);
 80006de:	2032      	movs	r0, #50	; 0x32
 80006e0:	f008 f914 	bl	800890c <HAL_Delay>
	convertArrays(2);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f000 f8af 	bl	8000848 <convertArrays>
	HAL_Delay(50);
 80006ea:	2032      	movs	r0, #50	; 0x32
 80006ec:	f008 f90e 	bl	800890c <HAL_Delay>
	convertArrays(3);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f8a9 	bl	8000848 <convertArrays>
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000024d 	.word	0x2000024d
 8000700:	2000023e 	.word	0x2000023e
 8000704:	2000024e 	.word	0x2000024e
 8000708:	2000023f 	.word	0x2000023f
 800070c:	20000241 	.word	0x20000241
 8000710:	2000024f 	.word	0x2000024f
 8000714:	20000242 	.word	0x20000242
 8000718:	20000243 	.word	0x20000243
 800071c:	20000244 	.word	0x20000244
 8000720:	20000245 	.word	0x20000245
 8000724:	20000246 	.word	0x20000246
 8000728:	20000247 	.word	0x20000247
 800072c:	20000248 	.word	0x20000248
 8000730:	20000249 	.word	0x20000249
 8000734:	2000024a 	.word	0x2000024a
 8000738:	2000024b 	.word	0x2000024b
 800073c:	2000024c 	.word	0x2000024c
 8000740:	20000250 	.word	0x20000250
 8000744:	20000252 	.word	0x20000252
 8000748:	20000254 	.word	0x20000254
 800074c:	20000255 	.word	0x20000255
 8000750:	20000253 	.word	0x20000253

08000754 <readFromEEPROM>:

void readFromEEPROM(int state) {
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d11e      	bne.n	80007a0 <readFromEEPROM+0x4c>
		int tempVal = idStartPos;
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <readFromEEPROM+0xd8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	e014      	b.n	8000798 <readFromEEPROM+0x44>
			if(eepromData[tempVal] != '\0') {
 800076e:	4a30      	ldr	r2, [pc, #192]	; (8000830 <readFromEEPROM+0xdc>)
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00b      	beq.n	8000792 <readFromEEPROM+0x3e>
				machineIDInt[i] = eepromData[tempVal];
 800077a:	4a2d      	ldr	r2, [pc, #180]	; (8000830 <readFromEEPROM+0xdc>)
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	4413      	add	r3, r2
 8000780:	7819      	ldrb	r1, [r3, #0]
 8000782:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <readFromEEPROM+0xe0>)
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	4413      	add	r3, r2
 8000788:	460a      	mov	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
				tempVal++;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	3301      	adds	r3, #1
 8000790:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	3301      	adds	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	2b0b      	cmp	r3, #11
 800079c:	dde7      	ble.n	800076e <readFromEEPROM+0x1a>
				wifiPassInt[i] = eepromData[tempVal];
				tempVal++;
			}
		}
	}
}
 800079e:	e03f      	b.n	8000820 <readFromEEPROM+0xcc>
	} else if(state == 2) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d11e      	bne.n	80007e4 <readFromEEPROM+0x90>
		int tempVal = ssidStartPos;
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <readFromEEPROM+0xe4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	e014      	b.n	80007dc <readFromEEPROM+0x88>
			if(eepromData[tempVal] != '\0') {
 80007b2:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <readFromEEPROM+0xdc>)
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00b      	beq.n	80007d6 <readFromEEPROM+0x82>
				wifiSSIDInt[i] = eepromData[tempVal];
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <readFromEEPROM+0xdc>)
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4413      	add	r3, r2
 80007c4:	7819      	ldrb	r1, [r3, #0]
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <readFromEEPROM+0xe8>)
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
				tempVal++;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	3301      	adds	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	2b13      	cmp	r3, #19
 80007e0:	dde7      	ble.n	80007b2 <readFromEEPROM+0x5e>
}
 80007e2:	e01d      	b.n	8000820 <readFromEEPROM+0xcc>
		int tempVal = passStartPos;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <readFromEEPROM+0xec>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	e014      	b.n	800081a <readFromEEPROM+0xc6>
			if(eepromData[tempVal] != '\0') {
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <readFromEEPROM+0xdc>)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00b      	beq.n	8000814 <readFromEEPROM+0xc0>
				wifiPassInt[i] = eepromData[tempVal];
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <readFromEEPROM+0xdc>)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	7819      	ldrb	r1, [r3, #0]
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <readFromEEPROM+0xf0>)
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	460a      	mov	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
				tempVal++;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3301      	adds	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b13      	cmp	r3, #19
 800081e:	dde7      	ble.n	80007f0 <readFromEEPROM+0x9c>
}
 8000820:	bf00      	nop
 8000822:	3724      	adds	r7, #36	; 0x24
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000004 	.word	0x20000004
 8000830:	2000012c 	.word	0x2000012c
 8000834:	200001d8 	.word	0x200001d8
 8000838:	20000008 	.word	0x20000008
 800083c:	200001e4 	.word	0x200001e4
 8000840:	2000000c 	.word	0x2000000c
 8000844:	200001f8 	.word	0x200001f8

08000848 <convertArrays>:

void convertArrays(int state) {
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d115      	bne.n	8000882 <convertArrays+0x3a>
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	e00e      	b.n	800087a <convertArrays+0x32>
			machineID[i] = idCharactersArray[machineIDInt[i]];
 800085c:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <convertArrays+0xac>)
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <convertArrays+0xb0>)
 8000868:	5c99      	ldrb	r1, [r3, r2]
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <convertArrays+0xb4>)
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	4413      	add	r3, r2
 8000870:	460a      	mov	r2, r1
 8000872:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	3301      	adds	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	2b0b      	cmp	r3, #11
 800087e:	dded      	ble.n	800085c <convertArrays+0x14>

		for(int i=0; i<arrLength; i++) {
			wifiPass[i] = charactersArray[wifiPassInt[i]];
		}
	}
}
 8000880:	e033      	b.n	80008ea <convertArrays+0xa2>
	} else if(state == 2) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d118      	bne.n	80008ba <convertArrays+0x72>
		int arrLength = sizeof(wifiSSIDInt)/sizeof(wifiSSIDInt[0]);
 8000888:	2314      	movs	r3, #20
 800088a:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<arrLength; i++) {
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	e00e      	b.n	80008b0 <convertArrays+0x68>
			wifiSSID[i] = charactersArray[wifiSSIDInt[i]];
 8000892:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <convertArrays+0xb8>)
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <convertArrays+0xbc>)
 800089e:	5c99      	ldrb	r1, [r3, r2]
 80008a0:	4a19      	ldr	r2, [pc, #100]	; (8000908 <convertArrays+0xc0>)
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	4413      	add	r3, r2
 80008a6:	460a      	mov	r2, r1
 80008a8:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	3301      	adds	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbec      	blt.n	8000892 <convertArrays+0x4a>
}
 80008b8:	e017      	b.n	80008ea <convertArrays+0xa2>
		int arrLength = sizeof(wifiPassInt)/sizeof(wifiPassInt[0]);
 80008ba:	2314      	movs	r3, #20
 80008bc:	613b      	str	r3, [r7, #16]
		for(int i=0; i<arrLength; i++) {
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e00e      	b.n	80008e2 <convertArrays+0x9a>
			wifiPass[i] = charactersArray[wifiPassInt[i]];
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <convertArrays+0xc4>)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <convertArrays+0xbc>)
 80008d0:	5c99      	ldrb	r1, [r3, r2]
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <convertArrays+0xc8>)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	4413      	add	r3, r2
 80008d8:	460a      	mov	r2, r1
 80008da:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3301      	adds	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbec      	blt.n	80008c4 <convertArrays+0x7c>
}
 80008ea:	bf00      	nop
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	200001d8 	.word	0x200001d8
 80008f8:	20000024 	.word	0x20000024
 80008fc:	200001a4 	.word	0x200001a4
 8000900:	200001e4 	.word	0x200001e4
 8000904:	20000030 	.word	0x20000030
 8000908:	200001b0 	.word	0x200001b0
 800090c:	200001f8 	.word	0x200001f8
 8000910:	200001c4 	.word	0x200001c4

08000914 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b09f      	sub	sp, #124	; 0x7c
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000920:	4948      	ldr	r1, [pc, #288]	; (8000a44 <ESP8266_Init+0x130>)
 8000922:	4849      	ldr	r0, [pc, #292]	; (8000a48 <ESP8266_Init+0x134>)
 8000924:	f00b fea4 	bl	800c670 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000928:	4847      	ldr	r0, [pc, #284]	; (8000a48 <ESP8266_Init+0x134>)
 800092a:	f7ff fc7b 	bl	8000224 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	b29b      	uxth	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	4944      	ldr	r1, [pc, #272]	; (8000a48 <ESP8266_Init+0x134>)
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f00b f8b4 	bl	800baa4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800093c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000940:	f007 ffe4 	bl	800890c <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000944:	4941      	ldr	r1, [pc, #260]	; (8000a4c <ESP8266_Init+0x138>)
 8000946:	4840      	ldr	r0, [pc, #256]	; (8000a48 <ESP8266_Init+0x134>)
 8000948:	f00b fe92 	bl	800c670 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800094c:	483e      	ldr	r0, [pc, #248]	; (8000a48 <ESP8266_Init+0x134>)
 800094e:	f7ff fc69 	bl	8000224 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29b      	uxth	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	493b      	ldr	r1, [pc, #236]	; (8000a48 <ESP8266_Init+0x134>)
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f00b f8a2 	bl	800baa4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f007 ffd2 	bl	800890c <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000968:	4939      	ldr	r1, [pc, #228]	; (8000a50 <ESP8266_Init+0x13c>)
 800096a:	4837      	ldr	r0, [pc, #220]	; (8000a48 <ESP8266_Init+0x134>)
 800096c:	f00b fe80 	bl	800c670 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000970:	4835      	ldr	r0, [pc, #212]	; (8000a48 <ESP8266_Init+0x134>)
 8000972:	f7ff fc57 	bl	8000224 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	b29b      	uxth	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	4932      	ldr	r1, [pc, #200]	; (8000a48 <ESP8266_Init+0x134>)
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f00b f890 	bl	800baa4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000984:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000988:	f007 ffc0 	bl	800890c <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 800098c:	4931      	ldr	r1, [pc, #196]	; (8000a54 <ESP8266_Init+0x140>)
 800098e:	482e      	ldr	r0, [pc, #184]	; (8000a48 <ESP8266_Init+0x134>)
 8000990:	f00b fe6e 	bl	800c670 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000994:	482c      	ldr	r0, [pc, #176]	; (8000a48 <ESP8266_Init+0x134>)
 8000996:	f7ff fc45 	bl	8000224 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29b      	uxth	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	4929      	ldr	r1, [pc, #164]	; (8000a48 <ESP8266_Init+0x134>)
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f00b f87e 	bl	800baa4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80009a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009ac:	f007 ffae 	bl	800890c <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <ESP8266_Init+0x144>)
 80009b6:	461c      	mov	r4, r3
 80009b8:	4613      	mov	r3, r2
 80009ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009bc:	c407      	stmia	r4!, {r0, r1, r2}
 80009be:	8023      	strh	r3, [r4, #0]
 80009c0:	3402      	adds	r4, #2
 80009c2:	0c1b      	lsrs	r3, r3, #16
 80009c4:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f00b feb1 	bl	800c734 <strcat>
	strcat(str, "\",\"");
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc24 	bl	8000224 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4413      	add	r3, r2
 80009e6:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <ESP8266_Init+0x148>)
 80009e8:	6810      	ldr	r0, [r2, #0]
 80009ea:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00b fe9e 	bl	800c734 <strcat>
	strcat(str, "\"\r\n");
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fc11 	bl	8000224 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <ESP8266_Init+0x14c>)
 8000a0e:	6810      	ldr	r0, [r2, #0]
 8000a10:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	461a      	mov	r2, r3
 8000a18:	4912      	ldr	r1, [pc, #72]	; (8000a64 <ESP8266_Init+0x150>)
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <ESP8266_Init+0x134>)
 8000a1c:	f00b fe28 	bl	800c670 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <ESP8266_Init+0x134>)
 8000a22:	f7ff fbff 	bl	8000224 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4906      	ldr	r1, [pc, #24]	; (8000a48 <ESP8266_Init+0x134>)
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f00b f838 	bl	800baa4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a38:	f007 ff68 	bl	800890c <HAL_Delay>
}
 8000a3c:	bf00      	nop
 8000a3e:	377c      	adds	r7, #124	; 0x7c
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	0800cf48 	.word	0x0800cf48
 8000a48:	20000298 	.word	0x20000298
 8000a4c:	0800cf58 	.word	0x0800cf58
 8000a50:	0800cf64 	.word	0x0800cf64
 8000a54:	0800cf6c 	.word	0x0800cf6c
 8000a58:	0800cf7c 	.word	0x0800cf7c
 8000a5c:	0800cf8c 	.word	0x0800cf8c
 8000a60:	0800cf90 	.word	0x0800cf90
 8000a64:	0800cf94 	.word	0x0800cf94

08000a68 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0c6      	sub	sp, #280	; 0x118
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a76:	6018      	str	r0, [r3, #0]
 8000a78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a80:	6019      	str	r1, [r3, #0]
 8000a82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a8a:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000a8c:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <sendMachineData+0xec>)
 8000a8e:	4932      	ldr	r1, [pc, #200]	; (8000b58 <sendMachineData+0xf0>)
 8000a90:	4832      	ldr	r0, [pc, #200]	; (8000b5c <sendMachineData+0xf4>)
 8000a92:	f00b fded 	bl	800c670 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a96:	4831      	ldr	r0, [pc, #196]	; (8000b5c <sendMachineData+0xf4>)
 8000a98:	f7ff fbc4 	bl	8000224 <strlen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000aa8:	492c      	ldr	r1, [pc, #176]	; (8000b5c <sendMachineData+0xf4>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	f00a fffa 	bl	800baa4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000ab0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000ab4:	f007 ff2a 	bl	800890c <HAL_Delay>

	sprintf(local_txA,
 8000ab8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000abc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ac0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ac4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000ac8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000acc:	4924      	ldr	r1, [pc, #144]	; (8000b60 <sendMachineData+0xf8>)
 8000ace:	9100      	str	r1, [sp, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	4923      	ldr	r1, [pc, #140]	; (8000b64 <sendMachineData+0xfc>)
 8000ad6:	f00b fdcb 	bl	800c670 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000ada:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fba0 	bl	8000224 <strlen>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000af2:	491d      	ldr	r1, [pc, #116]	; (8000b68 <sendMachineData+0x100>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00b fdbb 	bl	800c670 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fb90 	bl	8000224 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f107 0110 	add.w	r1, r7, #16
 8000b0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	f00a ffc5 	bl	800baa4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b1a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b1e:	f007 fef5 	bl	800890c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fb7c 	bl	8000224 <strlen>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b3c:	6818      	ldr	r0, [r3, #0]
 8000b3e:	f00a ffb1 	bl	800baa4 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000b42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b46:	f007 fee1 	bl	800890c <HAL_Delay>
}
 8000b4a:	bf00      	nop
 8000b4c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	0800cf98 	.word	0x0800cf98
 8000b58:	0800cfa8 	.word	0x0800cfa8
 8000b5c:	20000298 	.word	0x20000298
 8000b60:	0800d024 	.word	0x0800d024
 8000b64:	0800cfc8 	.word	0x0800cfc8
 8000b68:	0800d038 	.word	0x0800d038

08000b6c <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af04      	add	r7, sp, #16
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <hata2EEPROM+0xa4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1e5a      	subs	r2, r3, #1
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <hata2EEPROM+0xa8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <hata2EEPROM+0xac>)
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000b8a:	f000 f92b 	bl	8000de4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000b8e:	e000      	b.n	8000b92 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000b90:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e012      	b.n	8000bbe <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <hata2EEPROM+0xa8>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <hata2EEPROM+0xac>)
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d107      	bne.n	8000bb8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <hata2EEPROM+0xa8>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4919      	ldr	r1, [pc, #100]	; (8000c18 <hata2EEPROM+0xac>)
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	54ca      	strb	r2, [r1, r3]
					break;
 8000bb6:	e007      	b.n	8000bc8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <hata2EEPROM+0xa4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbe7      	blt.n	8000b98 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <hata2EEPROM+0xa8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <hata2EEPROM+0xa4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	b298      	uxth	r0, r3
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <hata2EEPROM+0xa8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <hata2EEPROM+0xac>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <hata2EEPROM+0xa4>)
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	b292      	uxth	r2, r2
 8000be2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000be6:	9402      	str	r4, [sp, #8]
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	4603      	mov	r3, r0
 8000bee:	460a      	mov	r2, r1
 8000bf0:	21a0      	movs	r1, #160	; 0xa0
 8000bf2:	480a      	ldr	r0, [pc, #40]	; (8000c1c <hata2EEPROM+0xb0>)
 8000bf4:	f008 ff14 	bl	8009a20 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfc:	f007 fe86 	bl	800890c <HAL_Delay>
	eepromKontrol(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff fb17 	bl	8000234 <eepromKontrol>
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000ac 	.word	0x200000ac
 8000c14:	200000b0 	.word	0x200000b0
 8000c18:	2000012c 	.word	0x2000012c
 8000c1c:	200003bc 	.word	0x200003bc

08000c20 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d11d      	bne.n	8000c6c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000c30:	4b62      	ldr	r3, [pc, #392]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d105      	bne.n	8000c44 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000c38:	4a61      	ldr	r2, [pc, #388]	; (8000dc0 <hataKoduLcdGoster+0x1a0>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f007 f90f 	bl	8007e60 <lcd_print>
 8000c42:	e008      	b.n	8000c56 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000c44:	4b5d      	ldr	r3, [pc, #372]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d104      	bne.n	8000c56 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000c4c:	4a5d      	ldr	r2, [pc, #372]	; (8000dc4 <hataKoduLcdGoster+0x1a4>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2001      	movs	r0, #1
 8000c52:	f007 f905 	bl	8007e60 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000c56:	4a5c      	ldr	r2, [pc, #368]	; (8000dc8 <hataKoduLcdGoster+0x1a8>)
 8000c58:	2101      	movs	r1, #1
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f007 f900 	bl	8007e60 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c60:	4a5a      	ldr	r2, [pc, #360]	; (8000dcc <hataKoduLcdGoster+0x1ac>)
 8000c62:	2107      	movs	r1, #7
 8000c64:	2002      	movs	r0, #2
 8000c66:	f007 f8fb 	bl	8007e60 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000c6a:	e0a3      	b.n	8000db4 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d11d      	bne.n	8000cae <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000c72:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d105      	bne.n	8000c86 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000c7a:	4a51      	ldr	r2, [pc, #324]	; (8000dc0 <hataKoduLcdGoster+0x1a0>)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f007 f8ee 	bl	8007e60 <lcd_print>
 8000c84:	e008      	b.n	8000c98 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000c86:	4b4d      	ldr	r3, [pc, #308]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d104      	bne.n	8000c98 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000c8e:	4a4d      	ldr	r2, [pc, #308]	; (8000dc4 <hataKoduLcdGoster+0x1a4>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	2001      	movs	r0, #1
 8000c94:	f007 f8e4 	bl	8007e60 <lcd_print>
		lcd_print(2, 2, "2");
 8000c98:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <hataKoduLcdGoster+0x1b0>)
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f007 f8df 	bl	8007e60 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ca2:	4a4a      	ldr	r2, [pc, #296]	; (8000dcc <hataKoduLcdGoster+0x1ac>)
 8000ca4:	2107      	movs	r1, #7
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f007 f8da 	bl	8007e60 <lcd_print>
}
 8000cac:	e082      	b.n	8000db4 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d11d      	bne.n	8000cf0 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000cb4:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000cbc:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <hataKoduLcdGoster+0x1a0>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f007 f8cd 	bl	8007e60 <lcd_print>
 8000cc6:	e008      	b.n	8000cda <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000cc8:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d104      	bne.n	8000cda <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000cd0:	4a3c      	ldr	r2, [pc, #240]	; (8000dc4 <hataKoduLcdGoster+0x1a4>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f007 f8c3 	bl	8007e60 <lcd_print>
		lcd_print(2, 3, "3");
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <hataKoduLcdGoster+0x1b4>)
 8000cdc:	2103      	movs	r1, #3
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f007 f8be 	bl	8007e60 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ce4:	4a39      	ldr	r2, [pc, #228]	; (8000dcc <hataKoduLcdGoster+0x1ac>)
 8000ce6:	2107      	movs	r1, #7
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f007 f8b9 	bl	8007e60 <lcd_print>
}
 8000cee:	e061      	b.n	8000db4 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d11d      	bne.n	8000d32 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d105      	bne.n	8000d0a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000cfe:	4a30      	ldr	r2, [pc, #192]	; (8000dc0 <hataKoduLcdGoster+0x1a0>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	2001      	movs	r0, #1
 8000d04:	f007 f8ac 	bl	8007e60 <lcd_print>
 8000d08:	e008      	b.n	8000d1c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d104      	bne.n	8000d1c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000d12:	4a2c      	ldr	r2, [pc, #176]	; (8000dc4 <hataKoduLcdGoster+0x1a4>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	2001      	movs	r0, #1
 8000d18:	f007 f8a2 	bl	8007e60 <lcd_print>
		lcd_print(2, 4, "4");
 8000d1c:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <hataKoduLcdGoster+0x1b8>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	2002      	movs	r0, #2
 8000d22:	f007 f89d 	bl	8007e60 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d26:	4a29      	ldr	r2, [pc, #164]	; (8000dcc <hataKoduLcdGoster+0x1ac>)
 8000d28:	2107      	movs	r1, #7
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f007 f898 	bl	8007e60 <lcd_print>
}
 8000d30:	e040      	b.n	8000db4 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d11d      	bne.n	8000d74 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d105      	bne.n	8000d4c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000d40:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <hataKoduLcdGoster+0x1a0>)
 8000d42:	2101      	movs	r1, #1
 8000d44:	2001      	movs	r0, #1
 8000d46:	f007 f88b 	bl	8007e60 <lcd_print>
 8000d4a:	e008      	b.n	8000d5e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d104      	bne.n	8000d5e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <hataKoduLcdGoster+0x1a4>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f007 f881 	bl	8007e60 <lcd_print>
		lcd_print(2, 5, "5");
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <hataKoduLcdGoster+0x1bc>)
 8000d60:	2105      	movs	r1, #5
 8000d62:	2002      	movs	r0, #2
 8000d64:	f007 f87c 	bl	8007e60 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <hataKoduLcdGoster+0x1ac>)
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f007 f877 	bl	8007e60 <lcd_print>
}
 8000d72:	e01f      	b.n	8000db4 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d11c      	bne.n	8000db4 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d105      	bne.n	8000d8e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <hataKoduLcdGoster+0x1a0>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	2001      	movs	r0, #1
 8000d88:	f007 f86a 	bl	8007e60 <lcd_print>
 8000d8c:	e008      	b.n	8000da0 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <hataKoduLcdGoster+0x19c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d104      	bne.n	8000da0 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <hataKoduLcdGoster+0x1a4>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f007 f860 	bl	8007e60 <lcd_print>
		lcd_print(2, 6, "6");
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <hataKoduLcdGoster+0x1c0>)
 8000da2:	2106      	movs	r1, #6
 8000da4:	2002      	movs	r0, #2
 8000da6:	f007 f85b 	bl	8007e60 <lcd_print>
		lcd_print(2, 7, "          ");
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <hataKoduLcdGoster+0x1ac>)
 8000dac:	2107      	movs	r1, #7
 8000dae:	2002      	movs	r0, #2
 8000db0:	f007 f856 	bl	8007e60 <lcd_print>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000255 	.word	0x20000255
 8000dc0:	0800d0c4 	.word	0x0800d0c4
 8000dc4:	0800d0d4 	.word	0x0800d0d4
 8000dc8:	0800d0e4 	.word	0x0800d0e4
 8000dcc:	0800d0e8 	.word	0x0800d0e8
 8000dd0:	0800d0f4 	.word	0x0800d0f4
 8000dd4:	0800d0f8 	.word	0x0800d0f8
 8000dd8:	0800d0fc 	.word	0x0800d0fc
 8000ddc:	0800d100 	.word	0x0800d100
 8000de0:	0800d104 	.word	0x0800d104

08000de4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	e009      	b.n	8000e04 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <eepromDataFillWithEmpty+0x38>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <eepromDataFillWithEmpty+0x3c>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3301      	adds	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <eepromDataFillWithEmpty+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbf0      	blt.n	8000df0 <eepromDataFillWithEmpty+0xc>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000084 	.word	0x20000084
 8000e20:	2000012c 	.word	0x2000012c
 8000e24:	200000ac 	.word	0x200000ac

08000e28 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000e3a:	4b50      	ldr	r3, [pc, #320]	; (8000f7c <i2cTest+0x154>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <i2cTest+0x154>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0201 	bic.w	r2, r2, #1
 8000e48:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000e4a:	484c      	ldr	r0, [pc, #304]	; (8000f7c <i2cTest+0x154>)
 8000e4c:	f008 fcba 	bl	80097c4 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e50:	23c0      	movs	r3, #192	; 0xc0
 8000e52:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000e54:	2311      	movs	r3, #17
 8000e56:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	4846      	ldr	r0, [pc, #280]	; (8000f80 <i2cTest+0x158>)
 8000e66:	f008 f8c1 	bl	8008fec <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	4844      	ldr	r0, [pc, #272]	; (8000f80 <i2cTest+0x158>)
 8000e70:	f008 fb33 	bl	80094da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2180      	movs	r1, #128	; 0x80
 8000e78:	4841      	ldr	r0, [pc, #260]	; (8000f80 <i2cTest+0x158>)
 8000e7a:	f008 fb2e 	bl	80094da <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f007 fd44 	bl	800890c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e84:	bf00      	nop
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	483d      	ldr	r0, [pc, #244]	; (8000f80 <i2cTest+0x158>)
 8000e8a:	f008 fb0f 	bl	80094ac <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d006      	beq.n	8000ea2 <i2cTest+0x7a>
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	483a      	ldr	r0, [pc, #232]	; (8000f80 <i2cTest+0x158>)
 8000e98:	f008 fb08 	bl	80094ac <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d1f1      	bne.n	8000e86 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	4836      	ldr	r0, [pc, #216]	; (8000f80 <i2cTest+0x158>)
 8000ea8:	f008 fb17 	bl	80094da <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000eac:	200a      	movs	r0, #10
 8000eae:	f007 fd2d 	bl	800890c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000eb2:	bf00      	nop
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	4832      	ldr	r0, [pc, #200]	; (8000f80 <i2cTest+0x158>)
 8000eb8:	f008 faf8 	bl	80094ac <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d0f8      	beq.n	8000eb4 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	482e      	ldr	r0, [pc, #184]	; (8000f80 <i2cTest+0x158>)
 8000ec8:	f008 fb07 	bl	80094da <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f007 fd1d 	bl	800890c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000ed2:	bf00      	nop
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	482a      	ldr	r0, [pc, #168]	; (8000f80 <i2cTest+0x158>)
 8000ed8:	f008 fae8 	bl	80094ac <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d0f8      	beq.n	8000ed4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	4826      	ldr	r0, [pc, #152]	; (8000f80 <i2cTest+0x158>)
 8000ee8:	f008 faf7 	bl	80094da <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000eec:	200a      	movs	r0, #10
 8000eee:	f007 fd0d 	bl	800890c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000ef2:	bf00      	nop
 8000ef4:	2140      	movs	r1, #64	; 0x40
 8000ef6:	4822      	ldr	r0, [pc, #136]	; (8000f80 <i2cTest+0x158>)
 8000ef8:	f008 fad8 	bl	80094ac <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d1f8      	bne.n	8000ef4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	481e      	ldr	r0, [pc, #120]	; (8000f80 <i2cTest+0x158>)
 8000f08:	f008 fae7 	bl	80094da <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f007 fcfd 	bl	800890c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f12:	bf00      	nop
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	481a      	ldr	r0, [pc, #104]	; (8000f80 <i2cTest+0x158>)
 8000f18:	f008 fac8 	bl	80094ac <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d1f8      	bne.n	8000f14 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f22:	23c0      	movs	r3, #192	; 0xc0
 8000f24:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000f26:	2312      	movs	r3, #18
 8000f28:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4812      	ldr	r0, [pc, #72]	; (8000f80 <i2cTest+0x158>)
 8000f38:	f008 f858 	bl	8008fec <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <i2cTest+0x154>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <i2cTest+0x154>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f4a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <i2cTest+0x154>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <i2cTest+0x154>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f5a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <i2cTest+0x154>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <i2cTest+0x154>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <i2cTest+0x154>)
 8000f6e:	f008 fae5 	bl	800953c <HAL_I2C_Init>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200003bc 	.word	0x200003bc
 8000f80:	40010c00 	.word	0x40010c00

08000f84 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000f8e:	20c8      	movs	r0, #200	; 0xc8
 8000f90:	f007 fcbc 	bl	800890c <HAL_Delay>
	lcd_clear();
 8000f94:	f006 ff90 	bl	8007eb8 <lcd_clear>
	if(type == 1 && page == 0) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d143      	bne.n	8001026 <printTemplate+0xa2>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d140      	bne.n	8001026 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000fa4:	4a9d      	ldr	r2, [pc, #628]	; (800121c <printTemplate+0x298>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f006 ff59 	bl	8007e60 <lcd_print>
		lcd_print(2, 3, "0");
 8000fae:	4a9c      	ldr	r2, [pc, #624]	; (8001220 <printTemplate+0x29c>)
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f006 ff54 	bl	8007e60 <lcd_print>
		lcd_print(2, 4, "1");
 8000fb8:	4a9a      	ldr	r2, [pc, #616]	; (8001224 <printTemplate+0x2a0>)
 8000fba:	2104      	movs	r1, #4
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f006 ff4f 	bl	8007e60 <lcd_print>
		lcd_print(2, 5, "2");
 8000fc2:	4a99      	ldr	r2, [pc, #612]	; (8001228 <printTemplate+0x2a4>)
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f006 ff4a 	bl	8007e60 <lcd_print>
		lcd_print(2, 6, "3");
 8000fcc:	4a97      	ldr	r2, [pc, #604]	; (800122c <printTemplate+0x2a8>)
 8000fce:	2106      	movs	r1, #6
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f006 ff45 	bl	8007e60 <lcd_print>
		lcd_print(2, 7, "4");
 8000fd6:	4a96      	ldr	r2, [pc, #600]	; (8001230 <printTemplate+0x2ac>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f006 ff40 	bl	8007e60 <lcd_print>
		lcd_print(2, 10, "5");
 8000fe0:	4a94      	ldr	r2, [pc, #592]	; (8001234 <printTemplate+0x2b0>)
 8000fe2:	210a      	movs	r1, #10
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f006 ff3b 	bl	8007e60 <lcd_print>
		lcd_print(2, 11, "6");
 8000fea:	4a93      	ldr	r2, [pc, #588]	; (8001238 <printTemplate+0x2b4>)
 8000fec:	210b      	movs	r1, #11
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f006 ff36 	bl	8007e60 <lcd_print>
		lcd_print(2, 12, "7");
 8000ff4:	4a91      	ldr	r2, [pc, #580]	; (800123c <printTemplate+0x2b8>)
 8000ff6:	210c      	movs	r1, #12
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f006 ff31 	bl	8007e60 <lcd_print>
		lcd_print(2, 13, "8");
 8000ffe:	4a90      	ldr	r2, [pc, #576]	; (8001240 <printTemplate+0x2bc>)
 8001000:	210d      	movs	r1, #13
 8001002:	2002      	movs	r0, #2
 8001004:	f006 ff2c 	bl	8007e60 <lcd_print>
		lcd_print(2, 14, "9");
 8001008:	4a8e      	ldr	r2, [pc, #568]	; (8001244 <printTemplate+0x2c0>)
 800100a:	210e      	movs	r1, #14
 800100c:	2002      	movs	r0, #2
 800100e:	f006 ff27 	bl	8007e60 <lcd_print>
		lcd_print(1, 5, machineID);
 8001012:	4a8d      	ldr	r2, [pc, #564]	; (8001248 <printTemplate+0x2c4>)
 8001014:	2105      	movs	r1, #5
 8001016:	2001      	movs	r0, #1
 8001018:	f006 ff22 	bl	8007e60 <lcd_print>
		lcd_gotoxy(2, 3);
 800101c:	2103      	movs	r1, #3
 800101e:	2002      	movs	r0, #2
 8001020:	f006 feff 	bl	8007e22 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8001024:	e0f5      	b.n	8001212 <printTemplate+0x28e>
	} else if(type == 2) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d178      	bne.n	800111e <printTemplate+0x19a>
		if(page == 1) {
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d114      	bne.n	800105c <printTemplate+0xd8>
			lcd_clear();
 8001032:	f006 ff41 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	; 0x64
 8001038:	f007 fc68 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800103c:	4a83      	ldr	r2, [pc, #524]	; (800124c <printTemplate+0x2c8>)
 800103e:	2101      	movs	r1, #1
 8001040:	2001      	movs	r0, #1
 8001042:	f006 ff0d 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001046:	4a82      	ldr	r2, [pc, #520]	; (8001250 <printTemplate+0x2cc>)
 8001048:	2107      	movs	r1, #7
 800104a:	2001      	movs	r0, #1
 800104c:	f006 ff08 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001050:	4a80      	ldr	r2, [pc, #512]	; (8001254 <printTemplate+0x2d0>)
 8001052:	2101      	movs	r1, #1
 8001054:	2002      	movs	r0, #2
 8001056:	f006 ff03 	bl	8007e60 <lcd_print>
}
 800105a:	e0da      	b.n	8001212 <printTemplate+0x28e>
		} else if(page == 2) {
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d114      	bne.n	800108c <printTemplate+0x108>
			lcd_clear();
 8001062:	f006 ff29 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f007 fc50 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800106c:	4a77      	ldr	r2, [pc, #476]	; (800124c <printTemplate+0x2c8>)
 800106e:	2101      	movs	r1, #1
 8001070:	2001      	movs	r0, #1
 8001072:	f006 fef5 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001076:	4a76      	ldr	r2, [pc, #472]	; (8001250 <printTemplate+0x2cc>)
 8001078:	2107      	movs	r1, #7
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fef0 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001080:	4a75      	ldr	r2, [pc, #468]	; (8001258 <printTemplate+0x2d4>)
 8001082:	2101      	movs	r1, #1
 8001084:	2002      	movs	r0, #2
 8001086:	f006 feeb 	bl	8007e60 <lcd_print>
}
 800108a:	e0c2      	b.n	8001212 <printTemplate+0x28e>
		} else if(page == 3) {
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d114      	bne.n	80010bc <printTemplate+0x138>
			lcd_clear();
 8001092:	f006 ff11 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f007 fc38 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800109c:	4a6b      	ldr	r2, [pc, #428]	; (800124c <printTemplate+0x2c8>)
 800109e:	2101      	movs	r1, #1
 80010a0:	2001      	movs	r0, #1
 80010a2:	f006 fedd 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010a6:	4a6a      	ldr	r2, [pc, #424]	; (8001250 <printTemplate+0x2cc>)
 80010a8:	2107      	movs	r1, #7
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fed8 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80010b0:	4a6a      	ldr	r2, [pc, #424]	; (800125c <printTemplate+0x2d8>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	2002      	movs	r0, #2
 80010b6:	f006 fed3 	bl	8007e60 <lcd_print>
}
 80010ba:	e0aa      	b.n	8001212 <printTemplate+0x28e>
		} else if(page == 4) {
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d114      	bne.n	80010ec <printTemplate+0x168>
			lcd_clear();
 80010c2:	f006 fef9 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f007 fc20 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010cc:	4a5f      	ldr	r2, [pc, #380]	; (800124c <printTemplate+0x2c8>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	2001      	movs	r0, #1
 80010d2:	f006 fec5 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010d6:	4a5e      	ldr	r2, [pc, #376]	; (8001250 <printTemplate+0x2cc>)
 80010d8:	2107      	movs	r1, #7
 80010da:	2001      	movs	r0, #1
 80010dc:	f006 fec0 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010e0:	4a5f      	ldr	r2, [pc, #380]	; (8001260 <printTemplate+0x2dc>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	2002      	movs	r0, #2
 80010e6:	f006 febb 	bl	8007e60 <lcd_print>
}
 80010ea:	e092      	b.n	8001212 <printTemplate+0x28e>
		} else if(page == 5) {
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	f040 808f 	bne.w	8001212 <printTemplate+0x28e>
			lcd_clear();
 80010f4:	f006 fee0 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f007 fc07 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010fe:	4a53      	ldr	r2, [pc, #332]	; (800124c <printTemplate+0x2c8>)
 8001100:	2101      	movs	r1, #1
 8001102:	2001      	movs	r0, #1
 8001104:	f006 feac 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001108:	4a51      	ldr	r2, [pc, #324]	; (8001250 <printTemplate+0x2cc>)
 800110a:	2107      	movs	r1, #7
 800110c:	2001      	movs	r0, #1
 800110e:	f006 fea7 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001112:	4a54      	ldr	r2, [pc, #336]	; (8001264 <printTemplate+0x2e0>)
 8001114:	2101      	movs	r1, #1
 8001116:	2002      	movs	r0, #2
 8001118:	f006 fea2 	bl	8007e60 <lcd_print>
}
 800111c:	e079      	b.n	8001212 <printTemplate+0x28e>
	} else if(type == 3) {
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d176      	bne.n	8001212 <printTemplate+0x28e>
		if(page == 1) {
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d114      	bne.n	8001154 <printTemplate+0x1d0>
			lcd_clear();
 800112a:	f006 fec5 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f007 fbec 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001134:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <printTemplate+0x2e4>)
 8001136:	2101      	movs	r1, #1
 8001138:	2001      	movs	r0, #1
 800113a:	f006 fe91 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800113e:	4a4b      	ldr	r2, [pc, #300]	; (800126c <printTemplate+0x2e8>)
 8001140:	2107      	movs	r1, #7
 8001142:	2001      	movs	r0, #1
 8001144:	f006 fe8c 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001148:	4a42      	ldr	r2, [pc, #264]	; (8001254 <printTemplate+0x2d0>)
 800114a:	2101      	movs	r1, #1
 800114c:	2002      	movs	r0, #2
 800114e:	f006 fe87 	bl	8007e60 <lcd_print>
}
 8001152:	e05e      	b.n	8001212 <printTemplate+0x28e>
		} else if(page == 2) {
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d114      	bne.n	8001184 <printTemplate+0x200>
			lcd_clear();
 800115a:	f006 fead 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	; 0x64
 8001160:	f007 fbd4 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001164:	4a40      	ldr	r2, [pc, #256]	; (8001268 <printTemplate+0x2e4>)
 8001166:	2101      	movs	r1, #1
 8001168:	2001      	movs	r0, #1
 800116a:	f006 fe79 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800116e:	4a3f      	ldr	r2, [pc, #252]	; (800126c <printTemplate+0x2e8>)
 8001170:	2107      	movs	r1, #7
 8001172:	2001      	movs	r0, #1
 8001174:	f006 fe74 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001178:	4a37      	ldr	r2, [pc, #220]	; (8001258 <printTemplate+0x2d4>)
 800117a:	2101      	movs	r1, #1
 800117c:	2002      	movs	r0, #2
 800117e:	f006 fe6f 	bl	8007e60 <lcd_print>
}
 8001182:	e046      	b.n	8001212 <printTemplate+0x28e>
		} else if(page == 3) {
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d114      	bne.n	80011b4 <printTemplate+0x230>
			lcd_clear();
 800118a:	f006 fe95 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f007 fbbc 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001194:	4a34      	ldr	r2, [pc, #208]	; (8001268 <printTemplate+0x2e4>)
 8001196:	2101      	movs	r1, #1
 8001198:	2001      	movs	r0, #1
 800119a:	f006 fe61 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800119e:	4a33      	ldr	r2, [pc, #204]	; (800126c <printTemplate+0x2e8>)
 80011a0:	2107      	movs	r1, #7
 80011a2:	2001      	movs	r0, #1
 80011a4:	f006 fe5c 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80011a8:	4a2c      	ldr	r2, [pc, #176]	; (800125c <printTemplate+0x2d8>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	2002      	movs	r0, #2
 80011ae:	f006 fe57 	bl	8007e60 <lcd_print>
}
 80011b2:	e02e      	b.n	8001212 <printTemplate+0x28e>
		} else if(page == 4) {
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d114      	bne.n	80011e4 <printTemplate+0x260>
			lcd_clear();
 80011ba:	f006 fe7d 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 80011be:	2064      	movs	r0, #100	; 0x64
 80011c0:	f007 fba4 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <printTemplate+0x2e4>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2001      	movs	r0, #1
 80011ca:	f006 fe49 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <printTemplate+0x2e8>)
 80011d0:	2107      	movs	r1, #7
 80011d2:	2001      	movs	r0, #1
 80011d4:	f006 fe44 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <printTemplate+0x2dc>)
 80011da:	2101      	movs	r1, #1
 80011dc:	2002      	movs	r0, #2
 80011de:	f006 fe3f 	bl	8007e60 <lcd_print>
}
 80011e2:	e016      	b.n	8001212 <printTemplate+0x28e>
		} else if(page == 5) {
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d113      	bne.n	8001212 <printTemplate+0x28e>
			lcd_clear();
 80011ea:	f006 fe65 	bl	8007eb8 <lcd_clear>
			HAL_Delay(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f007 fb8c 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011f4:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <printTemplate+0x2e4>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	2001      	movs	r0, #1
 80011fa:	f006 fe31 	bl	8007e60 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011fe:	4a1b      	ldr	r2, [pc, #108]	; (800126c <printTemplate+0x2e8>)
 8001200:	2107      	movs	r1, #7
 8001202:	2001      	movs	r0, #1
 8001204:	f006 fe2c 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <printTemplate+0x2e0>)
 800120a:	2101      	movs	r1, #1
 800120c:	2002      	movs	r0, #2
 800120e:	f006 fe27 	bl	8007e60 <lcd_print>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800d108 	.word	0x0800d108
 8001220:	0800d110 	.word	0x0800d110
 8001224:	0800d114 	.word	0x0800d114
 8001228:	0800d118 	.word	0x0800d118
 800122c:	0800d11c 	.word	0x0800d11c
 8001230:	0800d120 	.word	0x0800d120
 8001234:	0800d124 	.word	0x0800d124
 8001238:	0800d128 	.word	0x0800d128
 800123c:	0800d12c 	.word	0x0800d12c
 8001240:	0800d130 	.word	0x0800d130
 8001244:	0800d134 	.word	0x0800d134
 8001248:	200001a4 	.word	0x200001a4
 800124c:	0800d138 	.word	0x0800d138
 8001250:	200001b0 	.word	0x200001b0
 8001254:	0800d140 	.word	0x0800d140
 8001258:	0800d154 	.word	0x0800d154
 800125c:	0800d168 	.word	0x0800d168
 8001260:	0800d17c 	.word	0x0800d17c
 8001264:	0800d190 	.word	0x0800d190
 8001268:	0800d1a4 	.word	0x0800d1a4
 800126c:	200001c4 	.word	0x200001c4

08001270 <checkSlideVal>:

int checkSlideVal(int state) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d111      	bne.n	80012a2 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800127e:	2101      	movs	r1, #1
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <checkSlideVal+0x60>)
 8001282:	f008 f913 	bl	80094ac <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <checkSlideVal+0x20>
			return 34;
 800128c:	2322      	movs	r3, #34	; 0x22
 800128e:	e01b      	b.n	80012c8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001290:	2108      	movs	r1, #8
 8001292:	4810      	ldr	r0, [pc, #64]	; (80012d4 <checkSlideVal+0x64>)
 8001294:	f008 f90a 	bl	80094ac <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b01      	cmp	r3, #1
 800129c:	d113      	bne.n	80012c6 <checkSlideVal+0x56>
			return 32;
 800129e:	2320      	movs	r3, #32
 80012a0:	e012      	b.n	80012c8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012a2:	2101      	movs	r1, #1
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <checkSlideVal+0x60>)
 80012a6:	f008 f901 	bl	80094ac <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <checkSlideVal+0x44>
			return 35;
 80012b0:	2323      	movs	r3, #35	; 0x23
 80012b2:	e009      	b.n	80012c8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012b4:	2108      	movs	r1, #8
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <checkSlideVal+0x64>)
 80012b8:	f008 f8f8 	bl	80094ac <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <checkSlideVal+0x56>
			return 33;
 80012c2:	2321      	movs	r3, #33	; 0x21
 80012c4:	e000      	b.n	80012c8 <checkSlideVal+0x58>
		}
	}
	return 0;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40011000 	.word	0x40011000

080012d8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7fe ff9c 	bl	8000224 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80012f4:	e08a      	b.n	800140c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f7ff ffba 	bl	8001270 <checkSlideVal>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dd07      	ble.n	8001312 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff ffb4 	bl	8001270 <checkSlideVal>
 8001308:	4603      	mov	r3, r0
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b44      	ldr	r3, [pc, #272]	; (8001420 <slideText+0x148>)
 800130e:	701a      	strb	r2, [r3, #0]
			break;
 8001310:	e081      	b.n	8001416 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	e075      	b.n	8001404 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001318:	6838      	ldr	r0, [r7, #0]
 800131a:	f7ff ffa9 	bl	8001270 <checkSlideVal>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd09      	ble.n	8001338 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001324:	6838      	ldr	r0, [r7, #0]
 8001326:	f7ff ffa3 	bl	8001270 <checkSlideVal>
 800132a:	4603      	mov	r3, r0
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <slideText+0x148>)
 8001330:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001336:	e069      	b.n	800140c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	4413      	add	r3, r2
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	e029      	b.n	8001396 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ff94 	bl	8001270 <checkSlideVal>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd0b      	ble.n	8001366 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800134e:	6838      	ldr	r0, [r7, #0]
 8001350:	f7ff ff8e 	bl	8001270 <checkSlideVal>
 8001354:	4603      	mov	r3, r0
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <slideText+0x148>)
 800135a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001364:	e01d      	b.n	80013a2 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	b2d8      	uxtb	r0, r3
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b2d9      	uxtb	r1, r3
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	461a      	mov	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	f006 fd80 	bl	8007e8a <lcd_print_char>
				HAL_Delay(30);
 800138a:	201e      	movs	r0, #30
 800138c:	f007 fabe 	bl	800890c <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	3301      	adds	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	7dfa      	ldrb	r2, [r7, #23]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	429a      	cmp	r2, r3
 80013a0:	dbcf      	blt.n	8001342 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	e023      	b.n	80013f2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80013aa:	6838      	ldr	r0, [r7, #0]
 80013ac:	f7ff ff60 	bl	8001270 <checkSlideVal>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd0b      	ble.n	80013ce <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80013b6:	6838      	ldr	r0, [r7, #0]
 80013b8:	f7ff ff5a 	bl	8001270 <checkSlideVal>
 80013bc:	4603      	mov	r3, r0
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <slideText+0x148>)
 80013c2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013cc:	e017      	b.n	80013fe <slideText+0x126>
				}
			     if(j >= startPos) {
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	db0a      	blt.n	80013ec <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	b2d1      	uxtb	r1, r2
 80013de:	2220      	movs	r2, #32
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 fd52 	bl	8007e8a <lcd_print_char>
			    	 HAL_Delay(30);
 80013e6:	201e      	movs	r0, #30
 80013e8:	f007 fa90 	bl	800890c <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	7dfa      	ldrb	r2, [r7, #23]
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dad5      	bge.n	80013aa <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	3301      	adds	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	6a3a      	ldr	r2, [r7, #32]
 8001408:	429a      	cmp	r2, r3
 800140a:	db85      	blt.n	8001318 <slideText+0x40>
	while(mainLoopVal == 1) {
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	2b01      	cmp	r3, #1
 8001410:	f43f af71 	beq.w	80012f6 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000234 	.word	0x20000234

08001424 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001428:	f3bf 8f4f 	dsb	sy
}
 800142c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <__NVIC_SystemReset+0x24>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001436:	4904      	ldr	r1, [pc, #16]	; (8001448 <__NVIC_SystemReset+0x24>)
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_SystemReset+0x28>)
 800143a:	4313      	orrs	r3, r2
 800143c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800143e:	f3bf 8f4f 	dsb	sy
}
 8001442:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <__NVIC_SystemReset+0x20>
 8001448:	e000ed00 	.word	0xe000ed00
 800144c:	05fa0004 	.word	0x05fa0004

08001450 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001456:	2101      	movs	r1, #1
 8001458:	488e      	ldr	r0, [pc, #568]	; (8001694 <menu+0x244>)
 800145a:	f008 f827 	bl	80094ac <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	f040 808e 	bne.w	8001582 <menu+0x132>
 8001466:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <menu+0x248>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f083 0301 	eor.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8086 	beq.w	8001582 <menu+0x132>
		menuSayac = menuSayac+1;
 8001476:	4b89      	ldr	r3, [pc, #548]	; (800169c <menu+0x24c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b87      	ldr	r3, [pc, #540]	; (800169c <menu+0x24c>)
 8001480:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001482:	4b86      	ldr	r3, [pc, #536]	; (800169c <menu+0x24c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b24      	cmp	r3, #36	; 0x24
 8001488:	d102      	bne.n	8001490 <menu+0x40>
			menuSayac = 1;
 800148a:	4b84      	ldr	r3, [pc, #528]	; (800169c <menu+0x24c>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001490:	4b82      	ldr	r3, [pc, #520]	; (800169c <menu+0x24c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b12      	cmp	r3, #18
 8001496:	d106      	bne.n	80014a6 <menu+0x56>
 8001498:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <menu+0x250>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <menu+0x56>
			menuSayac = 21;
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <menu+0x24c>)
 80014a2:	2215      	movs	r2, #21
 80014a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <menu+0x24c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d106      	bne.n	80014bc <menu+0x6c>
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <menu+0x254>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <menu+0x6c>
			menuSayac = 16;
 80014b6:	4b79      	ldr	r3, [pc, #484]	; (800169c <menu+0x24c>)
 80014b8:	2210      	movs	r2, #16
 80014ba:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014bc:	4b77      	ldr	r3, [pc, #476]	; (800169c <menu+0x24c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b0d      	cmp	r3, #13
 80014c2:	d106      	bne.n	80014d2 <menu+0x82>
 80014c4:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <menu+0x254>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <menu+0x82>
			menuSayac = 16;
 80014cc:	4b73      	ldr	r3, [pc, #460]	; (800169c <menu+0x24c>)
 80014ce:	2210      	movs	r2, #16
 80014d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80014d2:	4b72      	ldr	r3, [pc, #456]	; (800169c <menu+0x24c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b09      	cmp	r3, #9
 80014d8:	d106      	bne.n	80014e8 <menu+0x98>
 80014da:	4b72      	ldr	r3, [pc, #456]	; (80016a4 <menu+0x254>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d102      	bne.n	80014e8 <menu+0x98>
			menuSayac = 13;
 80014e2:	4b6e      	ldr	r3, [pc, #440]	; (800169c <menu+0x24c>)
 80014e4:	220d      	movs	r2, #13
 80014e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014e8:	4b6c      	ldr	r3, [pc, #432]	; (800169c <menu+0x24c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b0a      	cmp	r3, #10
 80014ee:	d10a      	bne.n	8001506 <menu+0xb6>
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <menu+0x258>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d003      	beq.n	8001500 <menu+0xb0>
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <menu+0x258>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d102      	bne.n	8001506 <menu+0xb6>
			menuSayac = 11;
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <menu+0x24c>)
 8001502:	220b      	movs	r2, #11
 8001504:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <menu+0x24c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d10e      	bne.n	800152c <menu+0xdc>
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <menu+0x25c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d003      	beq.n	800151e <menu+0xce>
 8001516:	4b65      	ldr	r3, [pc, #404]	; (80016ac <menu+0x25c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d106      	bne.n	800152c <menu+0xdc>
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <menu+0x254>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d102      	bne.n	800152c <menu+0xdc>
			menuSayac = 16;
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <menu+0x24c>)
 8001528:	2210      	movs	r2, #16
 800152a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800152c:	4b5b      	ldr	r3, [pc, #364]	; (800169c <menu+0x24c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d10e      	bne.n	8001552 <menu+0x102>
 8001534:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <menu+0x25c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d003      	beq.n	8001544 <menu+0xf4>
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <menu+0x25c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d106      	bne.n	8001552 <menu+0x102>
 8001544:	4b57      	ldr	r3, [pc, #348]	; (80016a4 <menu+0x254>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d102      	bne.n	8001552 <menu+0x102>
			menuSayac = 13;
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <menu+0x24c>)
 800154e:	220d      	movs	r2, #13
 8001550:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001552:	4b52      	ldr	r3, [pc, #328]	; (800169c <menu+0x24c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	d106      	bne.n	8001568 <menu+0x118>
 800155a:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <menu+0x260>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <menu+0x118>
			menuSayac = 16;
 8001562:	4b4e      	ldr	r3, [pc, #312]	; (800169c <menu+0x24c>)
 8001564:	2210      	movs	r2, #16
 8001566:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001568:	4b4c      	ldr	r3, [pc, #304]	; (800169c <menu+0x24c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b18      	cmp	r3, #24
 800156e:	d106      	bne.n	800157e <menu+0x12e>
 8001570:	4b4b      	ldr	r3, [pc, #300]	; (80016a0 <menu+0x250>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <menu+0x12e>
			menuSayac = 26;
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <menu+0x24c>)
 800157a:	221a      	movs	r2, #26
 800157c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800157e:	f003 fb33 	bl	8004be8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001582:	2108      	movs	r1, #8
 8001584:	484b      	ldr	r0, [pc, #300]	; (80016b4 <menu+0x264>)
 8001586:	f007 ff91 	bl	80094ac <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d175      	bne.n	800167c <menu+0x22c>
 8001590:	4b41      	ldr	r3, [pc, #260]	; (8001698 <menu+0x248>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d06e      	beq.n	800167c <menu+0x22c>
		if (menuSayac <= 1) {
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <menu+0x24c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d802      	bhi.n	80015ac <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80015a6:	4b3d      	ldr	r3, [pc, #244]	; (800169c <menu+0x24c>)
 80015a8:	2224      	movs	r2, #36	; 0x24
 80015aa:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80015ac:	4b3b      	ldr	r3, [pc, #236]	; (800169c <menu+0x24c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <menu+0x24c>)
 80015b6:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <menu+0x24c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b14      	cmp	r3, #20
 80015be:	d106      	bne.n	80015ce <menu+0x17e>
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <menu+0x250>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <menu+0x17e>
			menuSayac = 17;
 80015c8:	4b34      	ldr	r3, [pc, #208]	; (800169c <menu+0x24c>)
 80015ca:	2211      	movs	r2, #17
 80015cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <menu+0x24c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	d106      	bne.n	80015e4 <menu+0x194>
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <menu+0x254>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <menu+0x194>
			menuSayac = 7;
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <menu+0x24c>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <menu+0x24c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d106      	bne.n	80015fa <menu+0x1aa>
 80015ec:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <menu+0x254>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <menu+0x1aa>
			menuSayac = 12;
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <menu+0x24c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80015fa:	4b28      	ldr	r3, [pc, #160]	; (800169c <menu+0x24c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d106      	bne.n	8001610 <menu+0x1c0>
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <menu+0x254>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d102      	bne.n	8001610 <menu+0x1c0>
			menuSayac = 8;
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <menu+0x24c>)
 800160c:	2208      	movs	r2, #8
 800160e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <menu+0x24c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b0a      	cmp	r3, #10
 8001616:	d10a      	bne.n	800162e <menu+0x1de>
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <menu+0x258>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d003      	beq.n	8001628 <menu+0x1d8>
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <menu+0x258>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d102      	bne.n	800162e <menu+0x1de>
			menuSayac = 9;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <menu+0x24c>)
 800162a:	2209      	movs	r2, #9
 800162c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <menu+0x24c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d10a      	bne.n	800164c <menu+0x1fc>
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <menu+0x25c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d003      	beq.n	8001646 <menu+0x1f6>
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <menu+0x25c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d102      	bne.n	800164c <menu+0x1fc>
			menuSayac = 11;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <menu+0x24c>)
 8001648:	220b      	movs	r2, #11
 800164a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <menu+0x24c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d106      	bne.n	8001662 <menu+0x212>
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <menu+0x260>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d102      	bne.n	8001662 <menu+0x212>
			menuSayac = 14;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <menu+0x24c>)
 800165e:	220e      	movs	r2, #14
 8001660:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <menu+0x24c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b19      	cmp	r3, #25
 8001668:	d106      	bne.n	8001678 <menu+0x228>
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <menu+0x250>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <menu+0x228>
			menuSayac = 23;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <menu+0x24c>)
 8001674:	2217      	movs	r2, #23
 8001676:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001678:	f003 fab6 	bl	8004be8 <bekle>
	}

	if (menuSayac == 0) {
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <menu+0x24c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d133      	bne.n	80016ec <menu+0x29c>
		if(dilSecim == 0) {
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <menu+0x268>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d121      	bne.n	80016d0 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <menu+0x26c>)
 800168e:	2101      	movs	r1, #1
 8001690:	2001      	movs	r0, #1
 8001692:	e015      	b.n	80016c0 <menu+0x270>
 8001694:	40010800 	.word	0x40010800
 8001698:	20000263 	.word	0x20000263
 800169c:	20000234 	.word	0x20000234
 80016a0:	20000243 	.word	0x20000243
 80016a4:	2000023c 	.word	0x2000023c
 80016a8:	2000023d 	.word	0x2000023d
 80016ac:	2000023e 	.word	0x2000023e
 80016b0:	2000023f 	.word	0x2000023f
 80016b4:	40011000 	.word	0x40011000
 80016b8:	20000255 	.word	0x20000255
 80016bc:	0800d1ac 	.word	0x0800d1ac
 80016c0:	f006 fbce 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80016c4:	4a94      	ldr	r2, [pc, #592]	; (8001918 <menu+0x4c8>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	2002      	movs	r0, #2
 80016ca:	f006 fbc9 	bl	8007e60 <lcd_print>
 80016ce:	e00d      	b.n	80016ec <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80016d0:	4b92      	ldr	r3, [pc, #584]	; (800191c <menu+0x4cc>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d109      	bne.n	80016ec <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80016d8:	4a91      	ldr	r2, [pc, #580]	; (8001920 <menu+0x4d0>)
 80016da:	2101      	movs	r1, #1
 80016dc:	2001      	movs	r0, #1
 80016de:	f006 fbbf 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80016e2:	4a90      	ldr	r2, [pc, #576]	; (8001924 <menu+0x4d4>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	2002      	movs	r0, #2
 80016e8:	f006 fbba 	bl	8007e60 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80016ec:	4b8e      	ldr	r3, [pc, #568]	; (8001928 <menu+0x4d8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	f040 82b5 	bne.w	8001c60 <menu+0x810>
		if(dilSecim == 0) {
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <menu+0x4cc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d105      	bne.n	800170a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80016fe:	4a8b      	ldr	r2, [pc, #556]	; (800192c <menu+0x4dc>)
 8001700:	2101      	movs	r1, #1
 8001702:	2001      	movs	r0, #1
 8001704:	f006 fbac 	bl	8007e60 <lcd_print>
 8001708:	e008      	b.n	800171c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800170a:	4b84      	ldr	r3, [pc, #528]	; (800191c <menu+0x4cc>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d104      	bne.n	800171c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001712:	4a87      	ldr	r2, [pc, #540]	; (8001930 <menu+0x4e0>)
 8001714:	2101      	movs	r1, #1
 8001716:	2001      	movs	r0, #1
 8001718:	f006 fba2 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800171c:	4b85      	ldr	r3, [pc, #532]	; (8001934 <menu+0x4e4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d123      	bne.n	800176c <menu+0x31c>
			if(dilSecim == 0) {
 8001724:	4b7d      	ldr	r3, [pc, #500]	; (800191c <menu+0x4cc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800172c:	4a82      	ldr	r2, [pc, #520]	; (8001938 <menu+0x4e8>)
 800172e:	2101      	movs	r1, #1
 8001730:	2002      	movs	r0, #2
 8001732:	f006 fb95 	bl	8007e60 <lcd_print>
 8001736:	e008      	b.n	800174a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001738:	4b78      	ldr	r3, [pc, #480]	; (800191c <menu+0x4cc>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d104      	bne.n	800174a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001740:	4a7e      	ldr	r2, [pc, #504]	; (800193c <menu+0x4ec>)
 8001742:	2101      	movs	r1, #1
 8001744:	2002      	movs	r0, #2
 8001746:	f006 fb8b 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800174a:	4a7d      	ldr	r2, [pc, #500]	; (8001940 <menu+0x4f0>)
 800174c:	210f      	movs	r1, #15
 800174e:	2002      	movs	r0, #2
 8001750:	f006 fb86 	bl	8007e60 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001754:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <menu+0x4f4>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	220a      	movs	r2, #10
 800175a:	497b      	ldr	r1, [pc, #492]	; (8001948 <menu+0x4f8>)
 800175c:	4618      	mov	r0, r3
 800175e:	f00a fed1 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 8001762:	4a79      	ldr	r2, [pc, #484]	; (8001948 <menu+0x4f8>)
 8001764:	210e      	movs	r1, #14
 8001766:	2002      	movs	r0, #2
 8001768:	f006 fb7a 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800176c:	4b71      	ldr	r3, [pc, #452]	; (8001934 <menu+0x4e4>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d123      	bne.n	80017bc <menu+0x36c>
			if(dilSecim == 0) {
 8001774:	4b69      	ldr	r3, [pc, #420]	; (800191c <menu+0x4cc>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800177c:	4a73      	ldr	r2, [pc, #460]	; (800194c <menu+0x4fc>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f006 fb6d 	bl	8007e60 <lcd_print>
 8001786:	e008      	b.n	800179a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001788:	4b64      	ldr	r3, [pc, #400]	; (800191c <menu+0x4cc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d104      	bne.n	800179a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001790:	4a6f      	ldr	r2, [pc, #444]	; (8001950 <menu+0x500>)
 8001792:	2101      	movs	r1, #1
 8001794:	2002      	movs	r0, #2
 8001796:	f006 fb63 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800179a:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <menu+0x504>)
 800179c:	210f      	movs	r1, #15
 800179e:	2002      	movs	r0, #2
 80017a0:	f006 fb5e 	bl	8007e60 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <menu+0x508>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	220a      	movs	r2, #10
 80017aa:	4967      	ldr	r1, [pc, #412]	; (8001948 <menu+0x4f8>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00a fea9 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 80017b2:	4a65      	ldr	r2, [pc, #404]	; (8001948 <menu+0x4f8>)
 80017b4:	210e      	movs	r1, #14
 80017b6:	2002      	movs	r0, #2
 80017b8:	f006 fb52 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80017bc:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <menu+0x4e4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d123      	bne.n	800180c <menu+0x3bc>
			if(dilSecim == 0) {
 80017c4:	4b55      	ldr	r3, [pc, #340]	; (800191c <menu+0x4cc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80017cc:	4a63      	ldr	r2, [pc, #396]	; (800195c <menu+0x50c>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	2002      	movs	r0, #2
 80017d2:	f006 fb45 	bl	8007e60 <lcd_print>
 80017d6:	e008      	b.n	80017ea <menu+0x39a>
			} else if(dilSecim == 1) {
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <menu+0x4cc>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80017e0:	4a5f      	ldr	r2, [pc, #380]	; (8001960 <menu+0x510>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f006 fb3b 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ea:	4a5a      	ldr	r2, [pc, #360]	; (8001954 <menu+0x504>)
 80017ec:	210f      	movs	r1, #15
 80017ee:	2002      	movs	r0, #2
 80017f0:	f006 fb36 	bl	8007e60 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80017f4:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <menu+0x514>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	220a      	movs	r2, #10
 80017fa:	4953      	ldr	r1, [pc, #332]	; (8001948 <menu+0x4f8>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00a fe81 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 8001802:	4a51      	ldr	r2, [pc, #324]	; (8001948 <menu+0x4f8>)
 8001804:	210e      	movs	r1, #14
 8001806:	2002      	movs	r0, #2
 8001808:	f006 fb2a 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800180c:	4b49      	ldr	r3, [pc, #292]	; (8001934 <menu+0x4e4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d123      	bne.n	800185c <menu+0x40c>
			if(dilSecim == 0) {
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <menu+0x4cc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <menu+0x518>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f006 fb1d 	bl	8007e60 <lcd_print>
 8001826:	e008      	b.n	800183a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001828:	4b3c      	ldr	r3, [pc, #240]	; (800191c <menu+0x4cc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d104      	bne.n	800183a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001830:	4a4e      	ldr	r2, [pc, #312]	; (800196c <menu+0x51c>)
 8001832:	2101      	movs	r1, #1
 8001834:	2002      	movs	r0, #2
 8001836:	f006 fb13 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183a:	4a46      	ldr	r2, [pc, #280]	; (8001954 <menu+0x504>)
 800183c:	210f      	movs	r1, #15
 800183e:	2002      	movs	r0, #2
 8001840:	f006 fb0e 	bl	8007e60 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001844:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <menu+0x520>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	220a      	movs	r2, #10
 800184a:	493f      	ldr	r1, [pc, #252]	; (8001948 <menu+0x4f8>)
 800184c:	4618      	mov	r0, r3
 800184e:	f00a fe59 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 8001852:	4a3d      	ldr	r2, [pc, #244]	; (8001948 <menu+0x4f8>)
 8001854:	210e      	movs	r1, #14
 8001856:	2002      	movs	r0, #2
 8001858:	f006 fb02 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <menu+0x4e4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d123      	bne.n	80018ac <menu+0x45c>
			if(dilSecim == 0) {
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <menu+0x4cc>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800186c:	4a41      	ldr	r2, [pc, #260]	; (8001974 <menu+0x524>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f006 faf5 	bl	8007e60 <lcd_print>
 8001876:	e008      	b.n	800188a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <menu+0x4cc>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001880:	4a3d      	ldr	r2, [pc, #244]	; (8001978 <menu+0x528>)
 8001882:	2101      	movs	r1, #1
 8001884:	2002      	movs	r0, #2
 8001886:	f006 faeb 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800188a:	4a32      	ldr	r2, [pc, #200]	; (8001954 <menu+0x504>)
 800188c:	210f      	movs	r1, #15
 800188e:	2002      	movs	r0, #2
 8001890:	f006 fae6 	bl	8007e60 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001894:	4b39      	ldr	r3, [pc, #228]	; (800197c <menu+0x52c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	220a      	movs	r2, #10
 800189a:	492b      	ldr	r1, [pc, #172]	; (8001948 <menu+0x4f8>)
 800189c:	4618      	mov	r0, r3
 800189e:	f00a fe31 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 80018a2:	4a29      	ldr	r2, [pc, #164]	; (8001948 <menu+0x4f8>)
 80018a4:	210e      	movs	r1, #14
 80018a6:	2002      	movs	r0, #2
 80018a8:	f006 fada 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <menu+0x4e4>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d123      	bne.n	80018fc <menu+0x4ac>
			if(dilSecim == 0) {
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <menu+0x4cc>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80018bc:	4a30      	ldr	r2, [pc, #192]	; (8001980 <menu+0x530>)
 80018be:	2101      	movs	r1, #1
 80018c0:	2002      	movs	r0, #2
 80018c2:	f006 facd 	bl	8007e60 <lcd_print>
 80018c6:	e008      	b.n	80018da <menu+0x48a>
			} else if(dilSecim == 1) {
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <menu+0x4cc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d104      	bne.n	80018da <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80018d0:	4a2c      	ldr	r2, [pc, #176]	; (8001984 <menu+0x534>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2002      	movs	r0, #2
 80018d6:	f006 fac3 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018da:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <menu+0x504>)
 80018dc:	210f      	movs	r1, #15
 80018de:	2002      	movs	r0, #2
 80018e0:	f006 fabe 	bl	8007e60 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <menu+0x538>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	220a      	movs	r2, #10
 80018ea:	4917      	ldr	r1, [pc, #92]	; (8001948 <menu+0x4f8>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00a fe09 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <menu+0x4f8>)
 80018f4:	210e      	movs	r1, #14
 80018f6:	2002      	movs	r0, #2
 80018f8:	f006 fab2 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <menu+0x4e4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b06      	cmp	r3, #6
 8001902:	d15f      	bne.n	80019c4 <menu+0x574>
			if(dilSecim == 0) {
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <menu+0x4cc>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d141      	bne.n	8001990 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800190c:	4a1f      	ldr	r2, [pc, #124]	; (800198c <menu+0x53c>)
 800190e:	2101      	movs	r1, #1
 8001910:	2002      	movs	r0, #2
 8001912:	f006 faa5 	bl	8007e60 <lcd_print>
 8001916:	e044      	b.n	80019a2 <menu+0x552>
 8001918:	0800d1c0 	.word	0x0800d1c0
 800191c:	20000255 	.word	0x20000255
 8001920:	0800d1d4 	.word	0x0800d1d4
 8001924:	0800d1e8 	.word	0x0800d1e8
 8001928:	20000234 	.word	0x20000234
 800192c:	0800d1fc 	.word	0x0800d1fc
 8001930:	0800d210 	.word	0x0800d210
 8001934:	20000236 	.word	0x20000236
 8001938:	0800d224 	.word	0x0800d224
 800193c:	0800d234 	.word	0x0800d234
 8001940:	0800d244 	.word	0x0800d244
 8001944:	20000256 	.word	0x20000256
 8001948:	2000019c 	.word	0x2000019c
 800194c:	0800d248 	.word	0x0800d248
 8001950:	0800d258 	.word	0x0800d258
 8001954:	0800d268 	.word	0x0800d268
 8001958:	20000257 	.word	0x20000257
 800195c:	0800d26c 	.word	0x0800d26c
 8001960:	0800d27c 	.word	0x0800d27c
 8001964:	20000258 	.word	0x20000258
 8001968:	0800d28c 	.word	0x0800d28c
 800196c:	0800d29c 	.word	0x0800d29c
 8001970:	20000259 	.word	0x20000259
 8001974:	0800d2ac 	.word	0x0800d2ac
 8001978:	0800d2bc 	.word	0x0800d2bc
 800197c:	2000025a 	.word	0x2000025a
 8001980:	0800d2cc 	.word	0x0800d2cc
 8001984:	0800d2dc 	.word	0x0800d2dc
 8001988:	2000025b 	.word	0x2000025b
 800198c:	0800d2ec 	.word	0x0800d2ec
			} else if(dilSecim == 1) {
 8001990:	4b4f      	ldr	r3, [pc, #316]	; (8001ad0 <menu+0x680>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d104      	bne.n	80019a2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <menu+0x684>)
 800199a:	2101      	movs	r1, #1
 800199c:	2002      	movs	r0, #2
 800199e:	f006 fa5f 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019a2:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <menu+0x688>)
 80019a4:	210f      	movs	r1, #15
 80019a6:	2002      	movs	r0, #2
 80019a8:	f006 fa5a 	bl	8007e60 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80019ac:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <menu+0x68c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	220a      	movs	r2, #10
 80019b2:	494b      	ldr	r1, [pc, #300]	; (8001ae0 <menu+0x690>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00a fda5 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 80019ba:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <menu+0x690>)
 80019bc:	210e      	movs	r1, #14
 80019be:	2002      	movs	r0, #2
 80019c0:	f006 fa4e 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <menu+0x694>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b07      	cmp	r3, #7
 80019ca:	d123      	bne.n	8001a14 <menu+0x5c4>
			if(dilSecim == 0) {
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <menu+0x680>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80019d4:	4a44      	ldr	r2, [pc, #272]	; (8001ae8 <menu+0x698>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f006 fa41 	bl	8007e60 <lcd_print>
 80019de:	e008      	b.n	80019f2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80019e0:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <menu+0x680>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d104      	bne.n	80019f2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80019e8:	4a40      	ldr	r2, [pc, #256]	; (8001aec <menu+0x69c>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f006 fa37 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019f2:	4a39      	ldr	r2, [pc, #228]	; (8001ad8 <menu+0x688>)
 80019f4:	210f      	movs	r1, #15
 80019f6:	2002      	movs	r0, #2
 80019f8:	f006 fa32 	bl	8007e60 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80019fc:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <menu+0x6a0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	220a      	movs	r2, #10
 8001a02:	4937      	ldr	r1, [pc, #220]	; (8001ae0 <menu+0x690>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00a fd7d 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 8001a0a:	4a35      	ldr	r2, [pc, #212]	; (8001ae0 <menu+0x690>)
 8001a0c:	210e      	movs	r1, #14
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f006 fa26 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <menu+0x694>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d123      	bne.n	8001a64 <menu+0x614>
			if(dilSecim == 0) {
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <menu+0x680>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a24:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <menu+0x6a4>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f006 fa19 	bl	8007e60 <lcd_print>
 8001a2e:	e008      	b.n	8001a42 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <menu+0x680>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d104      	bne.n	8001a42 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001a38:	4a2f      	ldr	r2, [pc, #188]	; (8001af8 <menu+0x6a8>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f006 fa0f 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a42:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <menu+0x688>)
 8001a44:	210f      	movs	r1, #15
 8001a46:	2002      	movs	r0, #2
 8001a48:	f006 fa0a 	bl	8007e60 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <menu+0x6ac>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	220a      	movs	r2, #10
 8001a52:	4923      	ldr	r1, [pc, #140]	; (8001ae0 <menu+0x690>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00a fd55 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 8001a5a:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <menu+0x690>)
 8001a5c:	210e      	movs	r1, #14
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f006 f9fe 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <menu+0x694>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d123      	bne.n	8001ab4 <menu+0x664>
			if(dilSecim == 0) {
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <menu+0x680>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001a74:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <menu+0x6b0>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f006 f9f1 	bl	8007e60 <lcd_print>
 8001a7e:	e008      	b.n	8001a92 <menu+0x642>
			} else if(dilSecim == 1) {
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <menu+0x680>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d104      	bne.n	8001a92 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001a88:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <menu+0x6b4>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	f006 f9e7 	bl	8007e60 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <menu+0x6b8>)
 8001a94:	2110      	movs	r1, #16
 8001a96:	2002      	movs	r0, #2
 8001a98:	f006 f9e2 	bl	8007e60 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <menu+0x6bc>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	490f      	ldr	r1, [pc, #60]	; (8001ae0 <menu+0x690>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00a fd2d 	bl	800c504 <itoa>
			lcd_print(2, 15, snum);
 8001aaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <menu+0x690>)
 8001aac:	210f      	movs	r1, #15
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f006 f9d6 	bl	8007e60 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <menu+0x694>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b0a      	cmp	r3, #10
 8001aba:	d134      	bne.n	8001b26 <menu+0x6d6>
			if(dilSecim == 0) {
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <menu+0x680>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d127      	bne.n	8001b14 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <menu+0x6c0>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f006 f9c9 	bl	8007e60 <lcd_print>
 8001ace:	e02a      	b.n	8001b26 <menu+0x6d6>
 8001ad0:	20000255 	.word	0x20000255
 8001ad4:	0800d2fc 	.word	0x0800d2fc
 8001ad8:	0800d268 	.word	0x0800d268
 8001adc:	2000025c 	.word	0x2000025c
 8001ae0:	2000019c 	.word	0x2000019c
 8001ae4:	20000236 	.word	0x20000236
 8001ae8:	0800d30c 	.word	0x0800d30c
 8001aec:	0800d31c 	.word	0x0800d31c
 8001af0:	2000025d 	.word	0x2000025d
 8001af4:	0800d32c 	.word	0x0800d32c
 8001af8:	0800d33c 	.word	0x0800d33c
 8001afc:	2000025e 	.word	0x2000025e
 8001b00:	0800d34c 	.word	0x0800d34c
 8001b04:	0800d35c 	.word	0x0800d35c
 8001b08:	0800d36c 	.word	0x0800d36c
 8001b0c:	2000025f 	.word	0x2000025f
 8001b10:	0800d370 	.word	0x0800d370
			} else if(dilSecim == 1) {
 8001b14:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <menu+0x8d0>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d104      	bne.n	8001b26 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001b1c:	4a81      	ldr	r2, [pc, #516]	; (8001d24 <menu+0x8d4>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	2002      	movs	r0, #2
 8001b22:	f006 f99d 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b26:	2102      	movs	r1, #2
 8001b28:	487f      	ldr	r0, [pc, #508]	; (8001d28 <menu+0x8d8>)
 8001b2a:	f007 fcbf 	bl	80094ac <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d119      	bne.n	8001b68 <menu+0x718>
 8001b34:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <menu+0x8dc>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	f083 0301 	eor.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d012      	beq.n	8001b68 <menu+0x718>
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <menu+0x8e0>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10e      	bne.n	8001b68 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001b4a:	4b7a      	ldr	r3, [pc, #488]	; (8001d34 <menu+0x8e4>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <menu+0x8e4>)
 8001b54:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001b56:	4b77      	ldr	r3, [pc, #476]	; (8001d34 <menu+0x8e4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b0a      	cmp	r3, #10
 8001b5c:	d902      	bls.n	8001b64 <menu+0x714>
				hataGostermeSirasi = 0;
 8001b5e:	4b75      	ldr	r3, [pc, #468]	; (8001d34 <menu+0x8e4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b64:	f003 f840 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b68:	2104      	movs	r1, #4
 8001b6a:	486f      	ldr	r0, [pc, #444]	; (8001d28 <menu+0x8d8>)
 8001b6c:	f007 fc9e 	bl	80094ac <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d119      	bne.n	8001baa <menu+0x75a>
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <menu+0x8dc>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d012      	beq.n	8001baa <menu+0x75a>
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <menu+0x8e0>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10e      	bne.n	8001baa <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b8c:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <menu+0x8e4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <menu+0x8e4>)
 8001b96:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b98:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <menu+0x8e4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b0b      	cmp	r3, #11
 8001b9e:	d902      	bls.n	8001ba6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001ba0:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <menu+0x8e4>)
 8001ba2:	220a      	movs	r2, #10
 8001ba4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ba6:	f003 f81f 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001baa:	2108      	movs	r1, #8
 8001bac:	485e      	ldr	r0, [pc, #376]	; (8001d28 <menu+0x8d8>)
 8001bae:	f007 fc7d 	bl	80094ac <HAL_GPIO_ReadPin>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d153      	bne.n	8001c60 <menu+0x810>
 8001bb8:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <menu+0x8dc>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04c      	beq.n	8001c60 <menu+0x810>
 8001bc6:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <menu+0x8e4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d148      	bne.n	8001c60 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001bce:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <menu+0x8e8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <menu+0x8ec>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001bdc:	4b58      	ldr	r3, [pc, #352]	; (8001d40 <menu+0x8f0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <menu+0x8ec>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001bea:	4b56      	ldr	r3, [pc, #344]	; (8001d44 <menu+0x8f4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <menu+0x8ec>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <menu+0x8f8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <menu+0x8ec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c06:	4b51      	ldr	r3, [pc, #324]	; (8001d4c <menu+0x8fc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <menu+0x8ec>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <menu+0x900>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <menu+0x8ec>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <menu+0x904>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <menu+0x8ec>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c30:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <menu+0x908>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <menu+0x8ec>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <menu+0x90c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <menu+0x8ec>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <menu+0x910>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <menu+0x8ec>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <menu+0x914>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c60:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <menu+0x918>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 80fc 	bne.w	8001e62 <menu+0xa12>
		if(dilSecim == 0) {
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <menu+0x8d0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001c72:	4a3e      	ldr	r2, [pc, #248]	; (8001d6c <menu+0x91c>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	2001      	movs	r0, #1
 8001c78:	f006 f8f2 	bl	8007e60 <lcd_print>
 8001c7c:	e008      	b.n	8001c90 <menu+0x840>
		} else if(dilSecim == 1) {
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <menu+0x8d0>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d104      	bne.n	8001c90 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001c86:	4a3a      	ldr	r2, [pc, #232]	; (8001d70 <menu+0x920>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f006 f8e8 	bl	8007e60 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <menu+0x8e0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d003      	beq.n	8001ca0 <menu+0x850>
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <menu+0x8e0>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d112      	bne.n	8001cc6 <menu+0x876>
			if(dilSecim == 0) {
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <menu+0x8d0>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001ca8:	4a32      	ldr	r2, [pc, #200]	; (8001d74 <menu+0x924>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	2002      	movs	r0, #2
 8001cae:	f006 f8d7 	bl	8007e60 <lcd_print>
 8001cb2:	e008      	b.n	8001cc6 <menu+0x876>
			} else if(dilSecim == 1) {
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <menu+0x8d0>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d104      	bne.n	8001cc6 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001cbc:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <menu+0x928>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	f006 f8cd 	bl	8007e60 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <menu+0x92c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d116      	bne.n	8001cfc <menu+0x8ac>
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <menu+0x8e0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d112      	bne.n	8001cfc <menu+0x8ac>
			if(dilSecim == 0) {
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <menu+0x8d0>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d105      	bne.n	8001cea <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001cde:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <menu+0x930>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f006 f8bc 	bl	8007e60 <lcd_print>
 8001ce8:	e008      	b.n	8001cfc <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <menu+0x8d0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d104      	bne.n	8001cfc <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001cf2:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <menu+0x934>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f006 f8b2 	bl	8007e60 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <menu+0x92c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d14c      	bne.n	8001d9e <menu+0x94e>
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <menu+0x8e0>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d148      	bne.n	8001d9e <menu+0x94e>
			if(dilSecim == 0) {
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <menu+0x8d0>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d13b      	bne.n	8001d8c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <menu+0x938>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f006 f8a1 	bl	8007e60 <lcd_print>
 8001d1e:	e03e      	b.n	8001d9e <menu+0x94e>
 8001d20:	20000255 	.word	0x20000255
 8001d24:	0800d384 	.word	0x0800d384
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	20000263 	.word	0x20000263
 8001d30:	20000243 	.word	0x20000243
 8001d34:	20000236 	.word	0x20000236
 8001d38:	20000256 	.word	0x20000256
 8001d3c:	2000012c 	.word	0x2000012c
 8001d40:	20000257 	.word	0x20000257
 8001d44:	20000258 	.word	0x20000258
 8001d48:	20000259 	.word	0x20000259
 8001d4c:	2000025a 	.word	0x2000025a
 8001d50:	2000025b 	.word	0x2000025b
 8001d54:	2000025c 	.word	0x2000025c
 8001d58:	2000025d 	.word	0x2000025d
 8001d5c:	2000025e 	.word	0x2000025e
 8001d60:	2000025f 	.word	0x2000025f
 8001d64:	20000260 	.word	0x20000260
 8001d68:	20000234 	.word	0x20000234
 8001d6c:	0800d398 	.word	0x0800d398
 8001d70:	0800d3ac 	.word	0x0800d3ac
 8001d74:	0800d3c0 	.word	0x0800d3c0
 8001d78:	0800d3d4 	.word	0x0800d3d4
 8001d7c:	20000235 	.word	0x20000235
 8001d80:	0800d3e8 	.word	0x0800d3e8
 8001d84:	0800d3f8 	.word	0x0800d3f8
 8001d88:	0800d408 	.word	0x0800d408
			} else if(dilSecim == 1) {
 8001d8c:	4b98      	ldr	r3, [pc, #608]	; (8001ff0 <menu+0xba0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d104      	bne.n	8001d9e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001d94:	4a97      	ldr	r2, [pc, #604]	; (8001ff4 <menu+0xba4>)
 8001d96:	2101      	movs	r1, #1
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f006 f861 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4895      	ldr	r0, [pc, #596]	; (8001ff8 <menu+0xba8>)
 8001da2:	f007 fb83 	bl	80094ac <HAL_GPIO_ReadPin>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d119      	bne.n	8001de0 <menu+0x990>
 8001dac:	4b93      	ldr	r3, [pc, #588]	; (8001ffc <menu+0xbac>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f083 0301 	eor.w	r3, r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d012      	beq.n	8001de0 <menu+0x990>
 8001dba:	4b91      	ldr	r3, [pc, #580]	; (8002000 <menu+0xbb0>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10e      	bne.n	8001de0 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001dc2:	4b90      	ldr	r3, [pc, #576]	; (8002004 <menu+0xbb4>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b8e      	ldr	r3, [pc, #568]	; (8002004 <menu+0xbb4>)
 8001dcc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001dce:	4b8d      	ldr	r3, [pc, #564]	; (8002004 <menu+0xbb4>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d902      	bls.n	8001ddc <menu+0x98c>
				calismaSekli = 0;
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	; (8002004 <menu+0xbb4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ddc:	f002 ff04 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001de0:	2104      	movs	r1, #4
 8001de2:	4885      	ldr	r0, [pc, #532]	; (8001ff8 <menu+0xba8>)
 8001de4:	f007 fb62 	bl	80094ac <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d119      	bne.n	8001e22 <menu+0x9d2>
 8001dee:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <menu+0xbac>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d012      	beq.n	8001e22 <menu+0x9d2>
 8001dfc:	4b80      	ldr	r3, [pc, #512]	; (8002000 <menu+0xbb0>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10e      	bne.n	8001e22 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001e04:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <menu+0xbb4>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <menu+0xbb4>)
 8001e0e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e10:	4b7c      	ldr	r3, [pc, #496]	; (8002004 <menu+0xbb4>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <menu+0x9ce>
	    		calismaSekli = 1;
 8001e18:	4b7a      	ldr	r3, [pc, #488]	; (8002004 <menu+0xbb4>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e1e:	f002 fee3 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e22:	2108      	movs	r1, #8
 8001e24:	4874      	ldr	r0, [pc, #464]	; (8001ff8 <menu+0xba8>)
 8001e26:	f007 fb41 	bl	80094ac <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d118      	bne.n	8001e62 <menu+0xa12>
 8001e30:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <menu+0xbac>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	f083 0301 	eor.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d011      	beq.n	8001e62 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001e3e:	4b71      	ldr	r3, [pc, #452]	; (8002004 <menu+0xbb4>)
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4b71      	ldr	r3, [pc, #452]	; (8002008 <menu+0xbb8>)
 8001e44:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e46:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <menu+0xbb4>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d106      	bne.n	8001e5c <menu+0xa0c>
				altLimit = 1;
 8001e4e:	4b6f      	ldr	r3, [pc, #444]	; (800200c <menu+0xbbc>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e54:	4b6d      	ldr	r3, [pc, #436]	; (800200c <menu+0xbbc>)
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	4b6b      	ldr	r3, [pc, #428]	; (8002008 <menu+0xbb8>)
 8001e5a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e5c:	4b6c      	ldr	r3, [pc, #432]	; (8002010 <menu+0xbc0>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e62:	4b6c      	ldr	r3, [pc, #432]	; (8002014 <menu+0xbc4>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	f040 8083 	bne.w	8001f72 <menu+0xb22>
		if(dilSecim == 0) {
 8001e6c:	4b60      	ldr	r3, [pc, #384]	; (8001ff0 <menu+0xba0>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001e74:	4a68      	ldr	r2, [pc, #416]	; (8002018 <menu+0xbc8>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f005 fff1 	bl	8007e60 <lcd_print>
 8001e7e:	e008      	b.n	8001e92 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001e80:	4b5b      	ldr	r3, [pc, #364]	; (8001ff0 <menu+0xba0>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d104      	bne.n	8001e92 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001e88:	4a64      	ldr	r2, [pc, #400]	; (800201c <menu+0xbcc>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f005 ffe7 	bl	8007e60 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <menu+0xbd0>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d113      	bne.n	8001ec2 <menu+0xa72>
			if(dilSecim == 0) {
 8001e9a:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <menu+0xba0>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d105      	bne.n	8001eae <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001ea2:	4a60      	ldr	r2, [pc, #384]	; (8002024 <menu+0xbd4>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f005 ffda 	bl	8007e60 <lcd_print>
 8001eac:	e012      	b.n	8001ed4 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001eae:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <menu+0xba0>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10e      	bne.n	8001ed4 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001eb6:	4a5c      	ldr	r2, [pc, #368]	; (8002028 <menu+0xbd8>)
 8001eb8:	2101      	movs	r1, #1
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f005 ffd0 	bl	8007e60 <lcd_print>
 8001ec0:	e008      	b.n	8001ed4 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001ec2:	4b57      	ldr	r3, [pc, #348]	; (8002020 <menu+0xbd0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d104      	bne.n	8001ed4 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001eca:	4a58      	ldr	r2, [pc, #352]	; (800202c <menu+0xbdc>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f005 ffc6 	bl	8007e60 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4848      	ldr	r0, [pc, #288]	; (8001ff8 <menu+0xba8>)
 8001ed8:	f007 fae8 	bl	80094ac <HAL_GPIO_ReadPin>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d115      	bne.n	8001f0e <menu+0xabe>
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <menu+0xbac>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <menu+0xbd0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b49      	ldr	r3, [pc, #292]	; (8002020 <menu+0xbd0>)
 8001efa:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001efc:	4b48      	ldr	r3, [pc, #288]	; (8002020 <menu+0xbd0>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d902      	bls.n	8001f0a <menu+0xaba>
				emniyetCercevesi = 0;
 8001f04:	4b46      	ldr	r3, [pc, #280]	; (8002020 <menu+0xbd0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f0a:	f002 fe6d 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4839      	ldr	r0, [pc, #228]	; (8001ff8 <menu+0xba8>)
 8001f12:	f007 facb 	bl	80094ac <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d115      	bne.n	8001f48 <menu+0xaf8>
 8001f1c:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <menu+0xbac>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00e      	beq.n	8001f48 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <menu+0xbd0>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <menu+0xbd0>)
 8001f34:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f36:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <menu+0xbd0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <menu+0xbd0>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f44:	f002 fe50 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f48:	2108      	movs	r1, #8
 8001f4a:	482b      	ldr	r0, [pc, #172]	; (8001ff8 <menu+0xba8>)
 8001f4c:	f007 faae 	bl	80094ac <HAL_GPIO_ReadPin>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10d      	bne.n	8001f72 <menu+0xb22>
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <menu+0xbac>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <menu+0xbd0>)
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <menu+0xbb8>)
 8001f6a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <menu+0xbc0>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <menu+0xbc4>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	f040 80ba 	bne.w	80020f0 <menu+0xca0>
		if(dilSecim == 0) {
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <menu+0xba0>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001f84:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <menu+0xbe0>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f005 ff69 	bl	8007e60 <lcd_print>
 8001f8e:	e008      	b.n	8001fa2 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <menu+0xba0>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d104      	bne.n	8001fa2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001f98:	4a26      	ldr	r2, [pc, #152]	; (8002034 <menu+0xbe4>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f005 ff5f 	bl	8007e60 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <menu+0xbe8>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d113      	bne.n	8001fd2 <menu+0xb82>
			if(dilSecim == 0) {
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <menu+0xba0>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	; (8002024 <menu+0xbd4>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	f005 ff52 	bl	8007e60 <lcd_print>
 8001fbc:	e049      	b.n	8002052 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <menu+0xba0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d145      	bne.n	8002052 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001fc6:	4a18      	ldr	r2, [pc, #96]	; (8002028 <menu+0xbd8>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f005 ff48 	bl	8007e60 <lcd_print>
 8001fd0:	e03f      	b.n	8002052 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <menu+0xbe8>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d13b      	bne.n	8002052 <menu+0xc02>
			if(dilSecim == 0) {
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <menu+0xba0>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d12e      	bne.n	8002040 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <menu+0xbec>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f005 ff3a 	bl	8007e60 <lcd_print>
 8001fec:	e031      	b.n	8002052 <menu+0xc02>
 8001fee:	bf00      	nop
 8001ff0:	20000255 	.word	0x20000255
 8001ff4:	0800d418 	.word	0x0800d418
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	20000263 	.word	0x20000263
 8002000:	20000243 	.word	0x20000243
 8002004:	20000235 	.word	0x20000235
 8002008:	2000012c 	.word	0x2000012c
 800200c:	2000023a 	.word	0x2000023a
 8002010:	20000260 	.word	0x20000260
 8002014:	20000234 	.word	0x20000234
 8002018:	0800d428 	.word	0x0800d428
 800201c:	0800d43c 	.word	0x0800d43c
 8002020:	20000238 	.word	0x20000238
 8002024:	0800d450 	.word	0x0800d450
 8002028:	0800d464 	.word	0x0800d464
 800202c:	0800d478 	.word	0x0800d478
 8002030:	0800d488 	.word	0x0800d488
 8002034:	0800d49c 	.word	0x0800d49c
 8002038:	20000239 	.word	0x20000239
 800203c:	0800d4b0 	.word	0x0800d4b0
			} else if(dilSecim == 1) {
 8002040:	4b92      	ldr	r3, [pc, #584]	; (800228c <menu+0xe3c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d104      	bne.n	8002052 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8002048:	4a91      	ldr	r2, [pc, #580]	; (8002290 <menu+0xe40>)
 800204a:	2101      	movs	r1, #1
 800204c:	2002      	movs	r0, #2
 800204e:	f005 ff07 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002052:	2102      	movs	r1, #2
 8002054:	488f      	ldr	r0, [pc, #572]	; (8002294 <menu+0xe44>)
 8002056:	f007 fa29 	bl	80094ac <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	2b01      	cmp	r3, #1
 800205e:	d115      	bne.n	800208c <menu+0xc3c>
 8002060:	4b8d      	ldr	r3, [pc, #564]	; (8002298 <menu+0xe48>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	f083 0301 	eor.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00e      	beq.n	800208c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 800206e:	4b8b      	ldr	r3, [pc, #556]	; (800229c <menu+0xe4c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <menu+0xe4c>)
 8002078:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800207a:	4b88      	ldr	r3, [pc, #544]	; (800229c <menu+0xe4c>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d902      	bls.n	8002088 <menu+0xc38>
				yavaslamaLimit = 0;
 8002082:	4b86      	ldr	r3, [pc, #536]	; (800229c <menu+0xe4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002088:	f002 fdae 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800208c:	2104      	movs	r1, #4
 800208e:	4881      	ldr	r0, [pc, #516]	; (8002294 <menu+0xe44>)
 8002090:	f007 fa0c 	bl	80094ac <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d115      	bne.n	80020c6 <menu+0xc76>
 800209a:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <menu+0xe48>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	f083 0301 	eor.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80020a8:	4b7c      	ldr	r3, [pc, #496]	; (800229c <menu+0xe4c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b7a      	ldr	r3, [pc, #488]	; (800229c <menu+0xe4c>)
 80020b2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80020b4:	4b79      	ldr	r3, [pc, #484]	; (800229c <menu+0xe4c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80020bc:	4b77      	ldr	r3, [pc, #476]	; (800229c <menu+0xe4c>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020c2:	f002 fd91 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020c6:	2108      	movs	r1, #8
 80020c8:	4872      	ldr	r0, [pc, #456]	; (8002294 <menu+0xe44>)
 80020ca:	f007 f9ef 	bl	80094ac <HAL_GPIO_ReadPin>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10d      	bne.n	80020f0 <menu+0xca0>
 80020d4:	4b70      	ldr	r3, [pc, #448]	; (8002298 <menu+0xe48>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	f083 0301 	eor.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80020e2:	4b6e      	ldr	r3, [pc, #440]	; (800229c <menu+0xe4c>)
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	4b6e      	ldr	r3, [pc, #440]	; (80022a0 <menu+0xe50>)
 80020e8:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <menu+0xe54>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80020f0:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <menu+0xe58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	f040 80b9 	bne.w	800226c <menu+0xe1c>
		if(dilSecim == 0) {
 80020fa:	4b64      	ldr	r3, [pc, #400]	; (800228c <menu+0xe3c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002102:	4a6a      	ldr	r2, [pc, #424]	; (80022ac <menu+0xe5c>)
 8002104:	2101      	movs	r1, #1
 8002106:	2001      	movs	r0, #1
 8002108:	f005 feaa 	bl	8007e60 <lcd_print>
 800210c:	e008      	b.n	8002120 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <menu+0xe3c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d104      	bne.n	8002120 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002116:	4a66      	ldr	r2, [pc, #408]	; (80022b0 <menu+0xe60>)
 8002118:	2101      	movs	r1, #1
 800211a:	2001      	movs	r0, #1
 800211c:	f005 fea0 	bl	8007e60 <lcd_print>
		}

		if(altLimit == 0) {
 8002120:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <menu+0xe64>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d113      	bne.n	8002150 <menu+0xd00>
			if(dilSecim == 0) {
 8002128:	4b58      	ldr	r3, [pc, #352]	; (800228c <menu+0xe3c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002130:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <menu+0xe68>)
 8002132:	2101      	movs	r1, #1
 8002134:	2002      	movs	r0, #2
 8002136:	f005 fe93 	bl	8007e60 <lcd_print>
 800213a:	e020      	b.n	800217e <menu+0xd2e>
			} else if(dilSecim == 1) {
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <menu+0xe3c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d11c      	bne.n	800217e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002144:	4a5d      	ldr	r2, [pc, #372]	; (80022bc <menu+0xe6c>)
 8002146:	2101      	movs	r1, #1
 8002148:	2002      	movs	r0, #2
 800214a:	f005 fe89 	bl	8007e60 <lcd_print>
 800214e:	e016      	b.n	800217e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002150:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <menu+0xe64>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d112      	bne.n	800217e <menu+0xd2e>
			if(dilSecim == 0){
 8002158:	4b4c      	ldr	r3, [pc, #304]	; (800228c <menu+0xe3c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002160:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <menu+0xe70>)
 8002162:	2101      	movs	r1, #1
 8002164:	2002      	movs	r0, #2
 8002166:	f005 fe7b 	bl	8007e60 <lcd_print>
 800216a:	e008      	b.n	800217e <menu+0xd2e>
			} else if(dilSecim == 1){
 800216c:	4b47      	ldr	r3, [pc, #284]	; (800228c <menu+0xe3c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d104      	bne.n	800217e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002174:	4a46      	ldr	r2, [pc, #280]	; (8002290 <menu+0xe40>)
 8002176:	2101      	movs	r1, #1
 8002178:	2002      	movs	r0, #2
 800217a:	f005 fe71 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800217e:	2102      	movs	r1, #2
 8002180:	4844      	ldr	r0, [pc, #272]	; (8002294 <menu+0xe44>)
 8002182:	f007 f993 	bl	80094ac <HAL_GPIO_ReadPin>
 8002186:	4603      	mov	r3, r0
 8002188:	2b01      	cmp	r3, #1
 800218a:	d119      	bne.n	80021c0 <menu+0xd70>
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <menu+0xe48>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f083 0301 	eor.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d012      	beq.n	80021c0 <menu+0xd70>
 800219a:	4b4a      	ldr	r3, [pc, #296]	; (80022c4 <menu+0xe74>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10e      	bne.n	80021c0 <menu+0xd70>
			altLimit = altLimit + 1;
 80021a2:	4b44      	ldr	r3, [pc, #272]	; (80022b4 <menu+0xe64>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b42      	ldr	r3, [pc, #264]	; (80022b4 <menu+0xe64>)
 80021ac:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <menu+0xe64>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d902      	bls.n	80021bc <menu+0xd6c>
				altLimit = 0;
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <menu+0xe64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021bc:	f002 fd14 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80021c0:	2104      	movs	r1, #4
 80021c2:	4834      	ldr	r0, [pc, #208]	; (8002294 <menu+0xe44>)
 80021c4:	f007 f972 	bl	80094ac <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d119      	bne.n	8002202 <menu+0xdb2>
 80021ce:	4b32      	ldr	r3, [pc, #200]	; (8002298 <menu+0xe48>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f083 0301 	eor.w	r3, r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d012      	beq.n	8002202 <menu+0xdb2>
 80021dc:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <menu+0xe74>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10e      	bne.n	8002202 <menu+0xdb2>
			altLimit = altLimit - 1;
 80021e4:	4b33      	ldr	r3, [pc, #204]	; (80022b4 <menu+0xe64>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <menu+0xe64>)
 80021ee:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <menu+0xe64>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <menu+0xdae>
		   		altLimit = 1;
 80021f8:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <menu+0xe64>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021fe:	f002 fcf3 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002202:	2108      	movs	r1, #8
 8002204:	4823      	ldr	r0, [pc, #140]	; (8002294 <menu+0xe44>)
 8002206:	f007 f951 	bl	80094ac <HAL_GPIO_ReadPin>
 800220a:	4603      	mov	r3, r0
 800220c:	2b01      	cmp	r3, #1
 800220e:	d12d      	bne.n	800226c <menu+0xe1c>
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <menu+0xe48>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f083 0301 	eor.w	r3, r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d026      	beq.n	800226c <menu+0xe1c>
			eepromData[5] = altLimit;
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <menu+0xe64>)
 8002220:	781a      	ldrb	r2, [r3, #0]
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <menu+0xe50>)
 8002224:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002226:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <menu+0xe64>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d110      	bne.n	8002250 <menu+0xe00>
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <menu+0xe78>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <menu+0xdee>
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <menu+0xe78>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d108      	bne.n	8002250 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <menu+0xe78>)
 8002240:	2203      	movs	r2, #3
 8002242:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <menu+0xe78>)
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <menu+0xe50>)
 800224a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800224e:	e00a      	b.n	8002266 <menu+0xe16>
			} else if(altLimit == 0) {
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <menu+0xe64>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <menu+0xe16>
				platformSilindirTipi = 0;
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <menu+0xe7c>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <menu+0xe7c>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <menu+0xe50>)
 8002264:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <menu+0xe54>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <menu+0xe58>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b06      	cmp	r3, #6
 8002272:	f040 80b6 	bne.w	80023e2 <menu+0xf92>
		if(dilSecim == 0) {
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <menu+0xe3c>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12a      	bne.n	80022d4 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800227e:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <menu+0xe80>)
 8002280:	2101      	movs	r1, #1
 8002282:	2001      	movs	r0, #1
 8002284:	f005 fdec 	bl	8007e60 <lcd_print>
 8002288:	e02d      	b.n	80022e6 <menu+0xe96>
 800228a:	bf00      	nop
 800228c:	20000255 	.word	0x20000255
 8002290:	0800d4c4 	.word	0x0800d4c4
 8002294:	40010800 	.word	0x40010800
 8002298:	20000263 	.word	0x20000263
 800229c:	20000239 	.word	0x20000239
 80022a0:	2000012c 	.word	0x2000012c
 80022a4:	20000260 	.word	0x20000260
 80022a8:	20000234 	.word	0x20000234
 80022ac:	0800d4d8 	.word	0x0800d4d8
 80022b0:	0800d4ec 	.word	0x0800d4ec
 80022b4:	2000023a 	.word	0x2000023a
 80022b8:	0800d450 	.word	0x0800d450
 80022bc:	0800d464 	.word	0x0800d464
 80022c0:	0800d4b0 	.word	0x0800d4b0
 80022c4:	20000235 	.word	0x20000235
 80022c8:	20000241 	.word	0x20000241
 80022cc:	20000247 	.word	0x20000247
 80022d0:	0800d500 	.word	0x0800d500
		} else if(dilSecim == 1){
 80022d4:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <menu+0x1070>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d104      	bne.n	80022e6 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80022dc:	4a79      	ldr	r2, [pc, #484]	; (80024c4 <menu+0x1074>)
 80022de:	2101      	movs	r1, #1
 80022e0:	2001      	movs	r0, #1
 80022e2:	f005 fdbd 	bl	8007e60 <lcd_print>
		}
		if(basincSalteri == 0){
 80022e6:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <menu+0x1078>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d113      	bne.n	8002316 <menu+0xec6>
			if(dilSecim == 0) {
 80022ee:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <menu+0x1070>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80022f6:	4a75      	ldr	r2, [pc, #468]	; (80024cc <menu+0x107c>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	2002      	movs	r0, #2
 80022fc:	f005 fdb0 	bl	8007e60 <lcd_print>
 8002300:	e020      	b.n	8002344 <menu+0xef4>
			} else if(dilSecim == 1){
 8002302:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <menu+0x1070>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d11c      	bne.n	8002344 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800230a:	4a71      	ldr	r2, [pc, #452]	; (80024d0 <menu+0x1080>)
 800230c:	2101      	movs	r1, #1
 800230e:	2002      	movs	r0, #2
 8002310:	f005 fda6 	bl	8007e60 <lcd_print>
 8002314:	e016      	b.n	8002344 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002316:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <menu+0x1078>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d112      	bne.n	8002344 <menu+0xef4>
			if(dilSecim == 0) {
 800231e:	4b68      	ldr	r3, [pc, #416]	; (80024c0 <menu+0x1070>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002326:	4a6b      	ldr	r2, [pc, #428]	; (80024d4 <menu+0x1084>)
 8002328:	2101      	movs	r1, #1
 800232a:	2002      	movs	r0, #2
 800232c:	f005 fd98 	bl	8007e60 <lcd_print>
 8002330:	e008      	b.n	8002344 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <menu+0x1070>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d104      	bne.n	8002344 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800233a:	4a67      	ldr	r2, [pc, #412]	; (80024d8 <menu+0x1088>)
 800233c:	2101      	movs	r1, #1
 800233e:	2002      	movs	r0, #2
 8002340:	f005 fd8e 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002344:	2102      	movs	r1, #2
 8002346:	4865      	ldr	r0, [pc, #404]	; (80024dc <menu+0x108c>)
 8002348:	f007 f8b0 	bl	80094ac <HAL_GPIO_ReadPin>
 800234c:	4603      	mov	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	d115      	bne.n	800237e <menu+0xf2e>
 8002352:	4b63      	ldr	r3, [pc, #396]	; (80024e0 <menu+0x1090>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f083 0301 	eor.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00e      	beq.n	800237e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <menu+0x1078>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <menu+0x1078>)
 800236a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800236c:	4b56      	ldr	r3, [pc, #344]	; (80024c8 <menu+0x1078>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d902      	bls.n	800237a <menu+0xf2a>
				basincSalteri = 0;
 8002374:	4b54      	ldr	r3, [pc, #336]	; (80024c8 <menu+0x1078>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800237a:	f002 fc35 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800237e:	2104      	movs	r1, #4
 8002380:	4856      	ldr	r0, [pc, #344]	; (80024dc <menu+0x108c>)
 8002382:	f007 f893 	bl	80094ac <HAL_GPIO_ReadPin>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d115      	bne.n	80023b8 <menu+0xf68>
 800238c:	4b54      	ldr	r3, [pc, #336]	; (80024e0 <menu+0x1090>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	f083 0301 	eor.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00e      	beq.n	80023b8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800239a:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <menu+0x1078>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	3b01      	subs	r3, #1
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b49      	ldr	r3, [pc, #292]	; (80024c8 <menu+0x1078>)
 80023a4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80023a6:	4b48      	ldr	r3, [pc, #288]	; (80024c8 <menu+0x1078>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <menu+0xf64>
		   		basincSalteri = 1;
 80023ae:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <menu+0x1078>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023b4:	f002 fc18 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b8:	2108      	movs	r1, #8
 80023ba:	4848      	ldr	r0, [pc, #288]	; (80024dc <menu+0x108c>)
 80023bc:	f007 f876 	bl	80094ac <HAL_GPIO_ReadPin>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10d      	bne.n	80023e2 <menu+0xf92>
 80023c6:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <menu+0x1090>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80023d4:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <menu+0x1078>)
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <menu+0x1094>)
 80023da:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80023dc:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <menu+0x1098>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80023e2:	4b42      	ldr	r3, [pc, #264]	; (80024ec <menu+0x109c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b07      	cmp	r3, #7
 80023e8:	f040 80f5 	bne.w	80025d6 <menu+0x1186>
		if(dilSecim == 0) {
 80023ec:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <menu+0x1070>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80023f4:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <menu+0x10a0>)
 80023f6:	2101      	movs	r1, #1
 80023f8:	2001      	movs	r0, #1
 80023fa:	f005 fd31 	bl	8007e60 <lcd_print>
 80023fe:	e008      	b.n	8002412 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002400:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <menu+0x1070>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d104      	bne.n	8002412 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002408:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <menu+0x10a4>)
 800240a:	2101      	movs	r1, #1
 800240c:	2001      	movs	r0, #1
 800240e:	f005 fd27 	bl	8007e60 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <menu+0x10a8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d113      	bne.n	8002442 <menu+0xff2>
			if(dilSecim == 0) {
 800241a:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <menu+0x1070>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002422:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <menu+0x107c>)
 8002424:	2101      	movs	r1, #1
 8002426:	2002      	movs	r0, #2
 8002428:	f005 fd1a 	bl	8007e60 <lcd_print>
 800242c:	e079      	b.n	8002522 <menu+0x10d2>
			} else if(dilSecim == 1){
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <menu+0x1070>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d175      	bne.n	8002522 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002436:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <menu+0x1080>)
 8002438:	2101      	movs	r1, #1
 800243a:	2002      	movs	r0, #2
 800243c:	f005 fd10 	bl	8007e60 <lcd_print>
 8002440:	e06f      	b.n	8002522 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002442:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <menu+0x10a8>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d113      	bne.n	8002472 <menu+0x1022>
			if(dilSecim == 0) {
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <menu+0x1070>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002452:	4a2a      	ldr	r2, [pc, #168]	; (80024fc <menu+0x10ac>)
 8002454:	2101      	movs	r1, #1
 8002456:	2002      	movs	r0, #2
 8002458:	f005 fd02 	bl	8007e60 <lcd_print>
 800245c:	e061      	b.n	8002522 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <menu+0x1070>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d15d      	bne.n	8002522 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002466:	4a26      	ldr	r2, [pc, #152]	; (8002500 <menu+0x10b0>)
 8002468:	2101      	movs	r1, #1
 800246a:	2002      	movs	r0, #2
 800246c:	f005 fcf8 	bl	8007e60 <lcd_print>
 8002470:	e057      	b.n	8002522 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <menu+0x10a8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d113      	bne.n	80024a2 <menu+0x1052>
			if(dilSecim == 0) {
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <menu+0x1070>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002482:	4a20      	ldr	r2, [pc, #128]	; (8002504 <menu+0x10b4>)
 8002484:	2101      	movs	r1, #1
 8002486:	2002      	movs	r0, #2
 8002488:	f005 fcea 	bl	8007e60 <lcd_print>
 800248c:	e049      	b.n	8002522 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <menu+0x1070>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d145      	bne.n	8002522 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002496:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <menu+0x10b8>)
 8002498:	2101      	movs	r1, #1
 800249a:	2002      	movs	r0, #2
 800249c:	f005 fce0 	bl	8007e60 <lcd_print>
 80024a0:	e03f      	b.n	8002522 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <menu+0x10a8>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d13b      	bne.n	8002522 <menu+0x10d2>
			if(dilSecim == 0) {
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <menu+0x1070>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d12e      	bne.n	8002510 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <menu+0x10bc>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	2002      	movs	r0, #2
 80024b8:	f005 fcd2 	bl	8007e60 <lcd_print>
 80024bc:	e031      	b.n	8002522 <menu+0x10d2>
 80024be:	bf00      	nop
 80024c0:	20000255 	.word	0x20000255
 80024c4:	0800d510 	.word	0x0800d510
 80024c8:	2000023b 	.word	0x2000023b
 80024cc:	0800d450 	.word	0x0800d450
 80024d0:	0800d464 	.word	0x0800d464
 80024d4:	0800d4b0 	.word	0x0800d4b0
 80024d8:	0800d4c4 	.word	0x0800d4c4
 80024dc:	40010800 	.word	0x40010800
 80024e0:	20000263 	.word	0x20000263
 80024e4:	2000012c 	.word	0x2000012c
 80024e8:	20000260 	.word	0x20000260
 80024ec:	20000234 	.word	0x20000234
 80024f0:	0800d520 	.word	0x0800d520
 80024f4:	0800d534 	.word	0x0800d534
 80024f8:	2000023c 	.word	0x2000023c
 80024fc:	0800d548 	.word	0x0800d548
 8002500:	0800d55c 	.word	0x0800d55c
 8002504:	0800d570 	.word	0x0800d570
 8002508:	0800d584 	.word	0x0800d584
 800250c:	0800d598 	.word	0x0800d598
			} else if(dilSecim == 1){
 8002510:	4b99      	ldr	r3, [pc, #612]	; (8002778 <menu+0x1328>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d104      	bne.n	8002522 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002518:	4a98      	ldr	r2, [pc, #608]	; (800277c <menu+0x132c>)
 800251a:	2101      	movs	r1, #1
 800251c:	2002      	movs	r0, #2
 800251e:	f005 fc9f 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002522:	2102      	movs	r1, #2
 8002524:	4896      	ldr	r0, [pc, #600]	; (8002780 <menu+0x1330>)
 8002526:	f006 ffc1 	bl	80094ac <HAL_GPIO_ReadPin>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d115      	bne.n	800255c <menu+0x110c>
 8002530:	4b94      	ldr	r3, [pc, #592]	; (8002784 <menu+0x1334>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00e      	beq.n	800255c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800253e:	4b92      	ldr	r3, [pc, #584]	; (8002788 <menu+0x1338>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b90      	ldr	r3, [pc, #576]	; (8002788 <menu+0x1338>)
 8002548:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800254a:	4b8f      	ldr	r3, [pc, #572]	; (8002788 <menu+0x1338>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d902      	bls.n	8002558 <menu+0x1108>
				kapiSecimleri = 0;
 8002552:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <menu+0x1338>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002558:	f002 fb46 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800255c:	2104      	movs	r1, #4
 800255e:	4888      	ldr	r0, [pc, #544]	; (8002780 <menu+0x1330>)
 8002560:	f006 ffa4 	bl	80094ac <HAL_GPIO_ReadPin>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d115      	bne.n	8002596 <menu+0x1146>
 800256a:	4b86      	ldr	r3, [pc, #536]	; (8002784 <menu+0x1334>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002578:	4b83      	ldr	r3, [pc, #524]	; (8002788 <menu+0x1338>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b81      	ldr	r3, [pc, #516]	; (8002788 <menu+0x1338>)
 8002582:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002584:	4b80      	ldr	r3, [pc, #512]	; (8002788 <menu+0x1338>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d902      	bls.n	8002592 <menu+0x1142>
		   		kapiSecimleri = 3;
 800258c:	4b7e      	ldr	r3, [pc, #504]	; (8002788 <menu+0x1338>)
 800258e:	2203      	movs	r2, #3
 8002590:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002592:	f002 fb29 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002596:	2108      	movs	r1, #8
 8002598:	4879      	ldr	r0, [pc, #484]	; (8002780 <menu+0x1330>)
 800259a:	f006 ff87 	bl	80094ac <HAL_GPIO_ReadPin>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d118      	bne.n	80025d6 <menu+0x1186>
 80025a4:	4b77      	ldr	r3, [pc, #476]	; (8002784 <menu+0x1334>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d011      	beq.n	80025d6 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80025b2:	4b75      	ldr	r3, [pc, #468]	; (8002788 <menu+0x1338>)
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	4b75      	ldr	r3, [pc, #468]	; (800278c <menu+0x133c>)
 80025b8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80025ba:	4b73      	ldr	r3, [pc, #460]	; (8002788 <menu+0x1338>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <menu+0x1180>
				altLimit = 1;
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <menu+0x1340>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80025c8:	4b71      	ldr	r3, [pc, #452]	; (8002790 <menu+0x1340>)
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	4b6f      	ldr	r3, [pc, #444]	; (800278c <menu+0x133c>)
 80025ce:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80025d0:	4b70      	ldr	r3, [pc, #448]	; (8002794 <menu+0x1344>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80025d6:	4b70      	ldr	r3, [pc, #448]	; (8002798 <menu+0x1348>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b08      	cmp	r3, #8
 80025dc:	f040 8092 	bne.w	8002704 <menu+0x12b4>
		if(dilSecim == 0) {
 80025e0:	4b65      	ldr	r3, [pc, #404]	; (8002778 <menu+0x1328>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80025e8:	4a6c      	ldr	r2, [pc, #432]	; (800279c <menu+0x134c>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	2001      	movs	r0, #1
 80025ee:	f005 fc37 	bl	8007e60 <lcd_print>
 80025f2:	e008      	b.n	8002606 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80025f4:	4b60      	ldr	r3, [pc, #384]	; (8002778 <menu+0x1328>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d104      	bne.n	8002606 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80025fc:	4a68      	ldr	r2, [pc, #416]	; (80027a0 <menu+0x1350>)
 80025fe:	2101      	movs	r1, #1
 8002600:	2001      	movs	r0, #1
 8002602:	f005 fc2d 	bl	8007e60 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002606:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <menu+0x1354>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d113      	bne.n	8002636 <menu+0x11e6>
			if(dilSecim == 0) {
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <menu+0x1328>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002616:	4a64      	ldr	r2, [pc, #400]	; (80027a8 <menu+0x1358>)
 8002618:	2101      	movs	r1, #1
 800261a:	2002      	movs	r0, #2
 800261c:	f005 fc20 	bl	8007e60 <lcd_print>
 8002620:	e020      	b.n	8002664 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002622:	4b55      	ldr	r3, [pc, #340]	; (8002778 <menu+0x1328>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d11c      	bne.n	8002664 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800262a:	4a60      	ldr	r2, [pc, #384]	; (80027ac <menu+0x135c>)
 800262c:	2101      	movs	r1, #1
 800262e:	2002      	movs	r0, #2
 8002630:	f005 fc16 	bl	8007e60 <lcd_print>
 8002634:	e016      	b.n	8002664 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002636:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <menu+0x1354>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d112      	bne.n	8002664 <menu+0x1214>
			if(dilSecim == 0){
 800263e:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <menu+0x1328>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d105      	bne.n	8002652 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002646:	4a5a      	ldr	r2, [pc, #360]	; (80027b0 <menu+0x1360>)
 8002648:	2101      	movs	r1, #1
 800264a:	2002      	movs	r0, #2
 800264c:	f005 fc08 	bl	8007e60 <lcd_print>
 8002650:	e008      	b.n	8002664 <menu+0x1214>
			} else if(dilSecim == 1){
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <menu+0x1328>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d104      	bne.n	8002664 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <menu+0x1364>)
 800265c:	2101      	movs	r1, #1
 800265e:	2002      	movs	r0, #2
 8002660:	f005 fbfe 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002664:	2102      	movs	r1, #2
 8002666:	4846      	ldr	r0, [pc, #280]	; (8002780 <menu+0x1330>)
 8002668:	f006 ff20 	bl	80094ac <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d115      	bne.n	800269e <menu+0x124e>
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <menu+0x1334>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002680:	4b48      	ldr	r3, [pc, #288]	; (80027a4 <menu+0x1354>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <menu+0x1354>)
 800268a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800268c:	4b45      	ldr	r3, [pc, #276]	; (80027a4 <menu+0x1354>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d902      	bls.n	800269a <menu+0x124a>
				kapiAcTipi = 0;
 8002694:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <menu+0x1354>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800269a:	f002 faa5 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800269e:	2104      	movs	r1, #4
 80026a0:	4837      	ldr	r0, [pc, #220]	; (8002780 <menu+0x1330>)
 80026a2:	f006 ff03 	bl	80094ac <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d115      	bne.n	80026d8 <menu+0x1288>
 80026ac:	4b35      	ldr	r3, [pc, #212]	; (8002784 <menu+0x1334>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <menu+0x1354>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	3b01      	subs	r3, #1
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <menu+0x1354>)
 80026c4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80026c6:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <menu+0x1354>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <menu+0x1284>
		   		kapiAcTipi = 1;
 80026ce:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <menu+0x1354>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026d4:	f002 fa88 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d8:	2108      	movs	r1, #8
 80026da:	4829      	ldr	r0, [pc, #164]	; (8002780 <menu+0x1330>)
 80026dc:	f006 fee6 	bl	80094ac <HAL_GPIO_ReadPin>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10e      	bne.n	8002704 <menu+0x12b4>
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <menu+0x1334>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f083 0301 	eor.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <menu+0x1354>)
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <menu+0x133c>)
 80026fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80026fe:	4b25      	ldr	r3, [pc, #148]	; (8002794 <menu+0x1344>)
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <menu+0x1348>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b09      	cmp	r3, #9
 800270a:	f040 80b9 	bne.w	8002880 <menu+0x1430>
		if(dilSecim == 0){
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <menu+0x1328>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d105      	bne.n	8002722 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002716:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <menu+0x1368>)
 8002718:	2101      	movs	r1, #1
 800271a:	2001      	movs	r0, #1
 800271c:	f005 fba0 	bl	8007e60 <lcd_print>
 8002720:	e008      	b.n	8002734 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <menu+0x1328>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d104      	bne.n	8002734 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800272a:	4a24      	ldr	r2, [pc, #144]	; (80027bc <menu+0x136c>)
 800272c:	2101      	movs	r1, #1
 800272e:	2001      	movs	r0, #1
 8002730:	f005 fb96 	bl	8007e60 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <menu+0x1370>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800273c:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <menu+0x1374>)
 800273e:	2101      	movs	r1, #1
 8002740:	2002      	movs	r0, #2
 8002742:	f005 fb8d 	bl	8007e60 <lcd_print>
 8002746:	e04c      	b.n	80027e2 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <menu+0x1370>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d13f      	bne.n	80027d0 <menu+0x1380>
			if(dilSecim == 0){
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <menu+0x1328>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002758:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <menu+0x1378>)
 800275a:	2101      	movs	r1, #1
 800275c:	2002      	movs	r0, #2
 800275e:	f005 fb7f 	bl	8007e60 <lcd_print>
 8002762:	e03e      	b.n	80027e2 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <menu+0x1328>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d13a      	bne.n	80027e2 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <menu+0x137c>)
 800276e:	2101      	movs	r1, #1
 8002770:	2002      	movs	r0, #2
 8002772:	f005 fb75 	bl	8007e60 <lcd_print>
 8002776:	e034      	b.n	80027e2 <menu+0x1392>
 8002778:	20000255 	.word	0x20000255
 800277c:	0800d5ac 	.word	0x0800d5ac
 8002780:	40010800 	.word	0x40010800
 8002784:	20000263 	.word	0x20000263
 8002788:	2000023c 	.word	0x2000023c
 800278c:	2000012c 	.word	0x2000012c
 8002790:	2000023a 	.word	0x2000023a
 8002794:	20000260 	.word	0x20000260
 8002798:	20000234 	.word	0x20000234
 800279c:	0800d5c0 	.word	0x0800d5c0
 80027a0:	0800d5d4 	.word	0x0800d5d4
 80027a4:	20000240 	.word	0x20000240
 80027a8:	0800d5e8 	.word	0x0800d5e8
 80027ac:	0800d5f8 	.word	0x0800d5f8
 80027b0:	0800d608 	.word	0x0800d608
 80027b4:	0800d61c 	.word	0x0800d61c
 80027b8:	0800d630 	.word	0x0800d630
 80027bc:	0800d644 	.word	0x0800d644
 80027c0:	2000023d 	.word	0x2000023d
 80027c4:	0800d658 	.word	0x0800d658
 80027c8:	0800d66c 	.word	0x0800d66c
 80027cc:	0800d67c 	.word	0x0800d67c
			}
		} else if(kapi1Tip == 2) {
 80027d0:	4b8a      	ldr	r3, [pc, #552]	; (80029fc <menu+0x15ac>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d104      	bne.n	80027e2 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80027d8:	4a89      	ldr	r2, [pc, #548]	; (8002a00 <menu+0x15b0>)
 80027da:	2101      	movs	r1, #1
 80027dc:	2002      	movs	r0, #2
 80027de:	f005 fb3f 	bl	8007e60 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e2:	2102      	movs	r1, #2
 80027e4:	4887      	ldr	r0, [pc, #540]	; (8002a04 <menu+0x15b4>)
 80027e6:	f006 fe61 	bl	80094ac <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d115      	bne.n	800281c <menu+0x13cc>
 80027f0:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <menu+0x15b8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	f083 0301 	eor.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00e      	beq.n	800281c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80027fe:	4b7f      	ldr	r3, [pc, #508]	; (80029fc <menu+0x15ac>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4b7d      	ldr	r3, [pc, #500]	; (80029fc <menu+0x15ac>)
 8002808:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800280a:	4b7c      	ldr	r3, [pc, #496]	; (80029fc <menu+0x15ac>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <menu+0x13c8>
				kapi1Tip = 0;
 8002812:	4b7a      	ldr	r3, [pc, #488]	; (80029fc <menu+0x15ac>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002818:	f002 f9e6 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800281c:	2104      	movs	r1, #4
 800281e:	4879      	ldr	r0, [pc, #484]	; (8002a04 <menu+0x15b4>)
 8002820:	f006 fe44 	bl	80094ac <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d115      	bne.n	8002856 <menu+0x1406>
 800282a:	4b77      	ldr	r3, [pc, #476]	; (8002a08 <menu+0x15b8>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f083 0301 	eor.w	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002838:	4b70      	ldr	r3, [pc, #448]	; (80029fc <menu+0x15ac>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	3b01      	subs	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b6e      	ldr	r3, [pc, #440]	; (80029fc <menu+0x15ac>)
 8002842:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002844:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <menu+0x15ac>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d902      	bls.n	8002852 <menu+0x1402>
		   		kapi1Tip = 2;
 800284c:	4b6b      	ldr	r3, [pc, #428]	; (80029fc <menu+0x15ac>)
 800284e:	2202      	movs	r2, #2
 8002850:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002852:	f002 f9c9 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002856:	2108      	movs	r1, #8
 8002858:	486a      	ldr	r0, [pc, #424]	; (8002a04 <menu+0x15b4>)
 800285a:	f006 fe27 	bl	80094ac <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10d      	bne.n	8002880 <menu+0x1430>
 8002864:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <menu+0x15b8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002872:	4b62      	ldr	r3, [pc, #392]	; (80029fc <menu+0x15ac>)
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <menu+0x15bc>)
 8002878:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <menu+0x15c0>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002880:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <menu+0x15c4>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b0a      	cmp	r3, #10
 8002886:	d17f      	bne.n	8002988 <menu+0x1538>
		if(dilSecim == 0) {
 8002888:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <menu+0x15c8>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002890:	4a62      	ldr	r2, [pc, #392]	; (8002a1c <menu+0x15cc>)
 8002892:	2101      	movs	r1, #1
 8002894:	2001      	movs	r0, #1
 8002896:	f005 fae3 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800289a:	4a61      	ldr	r2, [pc, #388]	; (8002a20 <menu+0x15d0>)
 800289c:	2101      	movs	r1, #1
 800289e:	2002      	movs	r0, #2
 80028a0:	f005 fade 	bl	8007e60 <lcd_print>
 80028a4:	e00d      	b.n	80028c2 <menu+0x1472>
		} else if(dilSecim == 1) {
 80028a6:	4b5c      	ldr	r3, [pc, #368]	; (8002a18 <menu+0x15c8>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d109      	bne.n	80028c2 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80028ae:	4a5d      	ldr	r2, [pc, #372]	; (8002a24 <menu+0x15d4>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	2001      	movs	r0, #1
 80028b4:	f005 fad4 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028b8:	4a5b      	ldr	r2, [pc, #364]	; (8002a28 <menu+0x15d8>)
 80028ba:	2101      	movs	r1, #1
 80028bc:	2002      	movs	r0, #2
 80028be:	f005 facf 	bl	8007e60 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <menu+0x15dc>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	220a      	movs	r2, #10
 80028c8:	4959      	ldr	r1, [pc, #356]	; (8002a30 <menu+0x15e0>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f009 fe1a 	bl	800c504 <itoa>
		lcd_print(2,16,snum);
 80028d0:	4a57      	ldr	r2, [pc, #348]	; (8002a30 <menu+0x15e0>)
 80028d2:	2110      	movs	r1, #16
 80028d4:	2002      	movs	r0, #2
 80028d6:	f005 fac3 	bl	8007e60 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80028da:	2102      	movs	r1, #2
 80028dc:	4849      	ldr	r0, [pc, #292]	; (8002a04 <menu+0x15b4>)
 80028de:	f006 fde5 	bl	80094ac <HAL_GPIO_ReadPin>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d119      	bne.n	800291c <menu+0x14cc>
 80028e8:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <menu+0x15b8>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	f083 0301 	eor.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <menu+0x14cc>
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <menu+0x15ac>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10e      	bne.n	800291c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80028fe:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <menu+0x15dc>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <menu+0x15dc>)
 8002908:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800290a:	4b48      	ldr	r3, [pc, #288]	; (8002a2c <menu+0x15dc>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d902      	bls.n	8002918 <menu+0x14c8>
				kapi1AcSure = 0;
 8002912:	4b46      	ldr	r3, [pc, #280]	; (8002a2c <menu+0x15dc>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002918:	f002 f966 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800291c:	2104      	movs	r1, #4
 800291e:	4839      	ldr	r0, [pc, #228]	; (8002a04 <menu+0x15b4>)
 8002920:	f006 fdc4 	bl	80094ac <HAL_GPIO_ReadPin>
 8002924:	4603      	mov	r3, r0
 8002926:	2b01      	cmp	r3, #1
 8002928:	d119      	bne.n	800295e <menu+0x150e>
 800292a:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <menu+0x15b8>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	f083 0301 	eor.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d012      	beq.n	800295e <menu+0x150e>
 8002938:	4b30      	ldr	r3, [pc, #192]	; (80029fc <menu+0x15ac>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10e      	bne.n	800295e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002940:	4b3a      	ldr	r3, [pc, #232]	; (8002a2c <menu+0x15dc>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	3b01      	subs	r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <menu+0x15dc>)
 800294a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800294c:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <menu+0x15dc>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b06      	cmp	r3, #6
 8002952:	d902      	bls.n	800295a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <menu+0x15dc>)
 8002956:	2205      	movs	r2, #5
 8002958:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800295a:	f002 f945 	bl	8004be8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800295e:	2108      	movs	r1, #8
 8002960:	4828      	ldr	r0, [pc, #160]	; (8002a04 <menu+0x15b4>)
 8002962:	f006 fda3 	bl	80094ac <HAL_GPIO_ReadPin>
 8002966:	4603      	mov	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10d      	bne.n	8002988 <menu+0x1538>
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <menu+0x15b8>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	f083 0301 	eor.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <menu+0x15dc>)
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <menu+0x15bc>)
 8002980:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <menu+0x15c0>)
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <menu+0x15c4>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b0b      	cmp	r3, #11
 800298e:	f040 80b5 	bne.w	8002afc <menu+0x16ac>
		if(dilSecim == 0) {
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <menu+0x15c8>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800299a:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <menu+0x15e4>)
 800299c:	2101      	movs	r1, #1
 800299e:	2001      	movs	r0, #1
 80029a0:	f005 fa5e 	bl	8007e60 <lcd_print>
 80029a4:	e008      	b.n	80029b8 <menu+0x1568>
		} else if(dilSecim == 1) {
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <menu+0x15c8>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d104      	bne.n	80029b8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80029ae:	4a22      	ldr	r2, [pc, #136]	; (8002a38 <menu+0x15e8>)
 80029b0:	2101      	movs	r1, #1
 80029b2:	2001      	movs	r0, #1
 80029b4:	f005 fa54 	bl	8007e60 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80029b8:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <menu+0x15ec>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80029c0:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <menu+0x15f0>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	2002      	movs	r0, #2
 80029c6:	f005 fa4b 	bl	8007e60 <lcd_print>
 80029ca:	e048      	b.n	8002a5e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <menu+0x15ec>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d13b      	bne.n	8002a4c <menu+0x15fc>
			if(dilSecim == 0) {
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <menu+0x15c8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <menu+0x15f4>)
 80029de:	2101      	movs	r1, #1
 80029e0:	2002      	movs	r0, #2
 80029e2:	f005 fa3d 	bl	8007e60 <lcd_print>
 80029e6:	e03a      	b.n	8002a5e <menu+0x160e>
			} else if(dilSecim == 1) {
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <menu+0x15c8>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d136      	bne.n	8002a5e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <menu+0x15f8>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f005 fa33 	bl	8007e60 <lcd_print>
 80029fa:	e030      	b.n	8002a5e <menu+0x160e>
 80029fc:	2000023d 	.word	0x2000023d
 8002a00:	0800d690 	.word	0x0800d690
 8002a04:	40010800 	.word	0x40010800
 8002a08:	20000263 	.word	0x20000263
 8002a0c:	2000012c 	.word	0x2000012c
 8002a10:	20000260 	.word	0x20000260
 8002a14:	20000234 	.word	0x20000234
 8002a18:	20000255 	.word	0x20000255
 8002a1c:	0800d6a0 	.word	0x0800d6a0
 8002a20:	0800d6b4 	.word	0x0800d6b4
 8002a24:	0800d6c4 	.word	0x0800d6c4
 8002a28:	0800d6d8 	.word	0x0800d6d8
 8002a2c:	2000024d 	.word	0x2000024d
 8002a30:	2000019c 	.word	0x2000019c
 8002a34:	0800d6e8 	.word	0x0800d6e8
 8002a38:	0800d6fc 	.word	0x0800d6fc
 8002a3c:	2000023e 	.word	0x2000023e
 8002a40:	0800d658 	.word	0x0800d658
 8002a44:	0800d66c 	.word	0x0800d66c
 8002a48:	0800d67c 	.word	0x0800d67c
			}
		} else if(kapi2Tip == 2) {
 8002a4c:	4b8a      	ldr	r3, [pc, #552]	; (8002c78 <menu+0x1828>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d104      	bne.n	8002a5e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002a54:	4a89      	ldr	r2, [pc, #548]	; (8002c7c <menu+0x182c>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	2002      	movs	r0, #2
 8002a5a:	f005 fa01 	bl	8007e60 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4887      	ldr	r0, [pc, #540]	; (8002c80 <menu+0x1830>)
 8002a62:	f006 fd23 	bl	80094ac <HAL_GPIO_ReadPin>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d115      	bne.n	8002a98 <menu+0x1648>
 8002a6c:	4b85      	ldr	r3, [pc, #532]	; (8002c84 <menu+0x1834>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <menu+0x1828>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b7d      	ldr	r3, [pc, #500]	; (8002c78 <menu+0x1828>)
 8002a84:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002a86:	4b7c      	ldr	r3, [pc, #496]	; (8002c78 <menu+0x1828>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d902      	bls.n	8002a94 <menu+0x1644>
				kapi2Tip = 0;
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <menu+0x1828>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a94:	f002 f8a8 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a98:	2104      	movs	r1, #4
 8002a9a:	4879      	ldr	r0, [pc, #484]	; (8002c80 <menu+0x1830>)
 8002a9c:	f006 fd06 	bl	80094ac <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d115      	bne.n	8002ad2 <menu+0x1682>
 8002aa6:	4b77      	ldr	r3, [pc, #476]	; (8002c84 <menu+0x1834>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f083 0301 	eor.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002ab4:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <menu+0x1828>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b6e      	ldr	r3, [pc, #440]	; (8002c78 <menu+0x1828>)
 8002abe:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002ac0:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <menu+0x1828>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d902      	bls.n	8002ace <menu+0x167e>
		   		kapi2Tip = 2;
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <menu+0x1828>)
 8002aca:	2202      	movs	r2, #2
 8002acc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ace:	f002 f88b 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	486a      	ldr	r0, [pc, #424]	; (8002c80 <menu+0x1830>)
 8002ad6:	f006 fce9 	bl	80094ac <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10d      	bne.n	8002afc <menu+0x16ac>
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <menu+0x1834>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <menu+0x1828>)
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <menu+0x1838>)
 8002af4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002af6:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <menu+0x183c>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002afc:	4b64      	ldr	r3, [pc, #400]	; (8002c90 <menu+0x1840>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d17f      	bne.n	8002c04 <menu+0x17b4>
		if(dilSecim == 0) {
 8002b04:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <menu+0x1844>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b0c:	4a62      	ldr	r2, [pc, #392]	; (8002c98 <menu+0x1848>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2001      	movs	r0, #1
 8002b12:	f005 f9a5 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b16:	4a61      	ldr	r2, [pc, #388]	; (8002c9c <menu+0x184c>)
 8002b18:	2101      	movs	r1, #1
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f005 f9a0 	bl	8007e60 <lcd_print>
 8002b20:	e00d      	b.n	8002b3e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002b22:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <menu+0x1844>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d109      	bne.n	8002b3e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <menu+0x1850>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f005 f996 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b34:	4a5b      	ldr	r2, [pc, #364]	; (8002ca4 <menu+0x1854>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f005 f991 	bl	8007e60 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <menu+0x1858>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	220a      	movs	r2, #10
 8002b44:	4959      	ldr	r1, [pc, #356]	; (8002cac <menu+0x185c>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f009 fcdc 	bl	800c504 <itoa>
		lcd_print(2,16,snum);
 8002b4c:	4a57      	ldr	r2, [pc, #348]	; (8002cac <menu+0x185c>)
 8002b4e:	2110      	movs	r1, #16
 8002b50:	2002      	movs	r0, #2
 8002b52:	f005 f985 	bl	8007e60 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b56:	2102      	movs	r1, #2
 8002b58:	4849      	ldr	r0, [pc, #292]	; (8002c80 <menu+0x1830>)
 8002b5a:	f006 fca7 	bl	80094ac <HAL_GPIO_ReadPin>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d119      	bne.n	8002b98 <menu+0x1748>
 8002b64:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <menu+0x1834>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	f083 0301 	eor.w	r3, r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d012      	beq.n	8002b98 <menu+0x1748>
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <menu+0x1828>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10e      	bne.n	8002b98 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002b7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ca8 <menu+0x1858>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <menu+0x1858>)
 8002b84:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002b86:	4b48      	ldr	r3, [pc, #288]	; (8002ca8 <menu+0x1858>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d902      	bls.n	8002b94 <menu+0x1744>
				kapi2AcSure = 0;
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <menu+0x1858>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b94:	f002 f828 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b98:	2104      	movs	r1, #4
 8002b9a:	4839      	ldr	r0, [pc, #228]	; (8002c80 <menu+0x1830>)
 8002b9c:	f006 fc86 	bl	80094ac <HAL_GPIO_ReadPin>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d119      	bne.n	8002bda <menu+0x178a>
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <menu+0x1834>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <menu+0x178a>
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <menu+0x1828>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10e      	bne.n	8002bda <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002bbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <menu+0x1858>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <menu+0x1858>)
 8002bc6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002bc8:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <menu+0x1858>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b06      	cmp	r3, #6
 8002bce:	d902      	bls.n	8002bd6 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <menu+0x1858>)
 8002bd2:	2205      	movs	r2, #5
 8002bd4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bd6:	f002 f807 	bl	8004be8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bda:	2108      	movs	r1, #8
 8002bdc:	4828      	ldr	r0, [pc, #160]	; (8002c80 <menu+0x1830>)
 8002bde:	f006 fc65 	bl	80094ac <HAL_GPIO_ReadPin>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10d      	bne.n	8002c04 <menu+0x17b4>
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <menu+0x1834>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	f083 0301 	eor.w	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <menu+0x1858>)
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <menu+0x1838>)
 8002bfc:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002bfe:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <menu+0x183c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <menu+0x1840>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b0d      	cmp	r3, #13
 8002c0a:	f040 80b5 	bne.w	8002d78 <menu+0x1928>
		if(dilSecim == 0) {
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <menu+0x1844>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <menu+0x1860>)
 8002c18:	2101      	movs	r1, #1
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f005 f920 	bl	8007e60 <lcd_print>
 8002c20:	e008      	b.n	8002c34 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <menu+0x1844>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d104      	bne.n	8002c34 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c2a:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <menu+0x1864>)
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f005 f916 	bl	8007e60 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <menu+0x1868>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <menu+0x186c>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2002      	movs	r0, #2
 8002c42:	f005 f90d 	bl	8007e60 <lcd_print>
 8002c46:	e048      	b.n	8002cda <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <menu+0x1868>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d13b      	bne.n	8002cc8 <menu+0x1878>
			if(dilSecim == 0) {
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <menu+0x1844>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <menu+0x1870>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f005 f8ff 	bl	8007e60 <lcd_print>
 8002c62:	e03a      	b.n	8002cda <menu+0x188a>
			} else if(dilSecim == 1) {
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <menu+0x1844>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d136      	bne.n	8002cda <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002c6c:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <menu+0x1874>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2002      	movs	r0, #2
 8002c72:	f005 f8f5 	bl	8007e60 <lcd_print>
 8002c76:	e030      	b.n	8002cda <menu+0x188a>
 8002c78:	2000023e 	.word	0x2000023e
 8002c7c:	0800d690 	.word	0x0800d690
 8002c80:	40010800 	.word	0x40010800
 8002c84:	20000263 	.word	0x20000263
 8002c88:	2000012c 	.word	0x2000012c
 8002c8c:	20000260 	.word	0x20000260
 8002c90:	20000234 	.word	0x20000234
 8002c94:	20000255 	.word	0x20000255
 8002c98:	0800d710 	.word	0x0800d710
 8002c9c:	0800d6b4 	.word	0x0800d6b4
 8002ca0:	0800d724 	.word	0x0800d724
 8002ca4:	0800d6d8 	.word	0x0800d6d8
 8002ca8:	2000024e 	.word	0x2000024e
 8002cac:	2000019c 	.word	0x2000019c
 8002cb0:	0800d738 	.word	0x0800d738
 8002cb4:	0800d74c 	.word	0x0800d74c
 8002cb8:	2000023f 	.word	0x2000023f
 8002cbc:	0800d658 	.word	0x0800d658
 8002cc0:	0800d66c 	.word	0x0800d66c
 8002cc4:	0800d67c 	.word	0x0800d67c
			}
		} else if(kapitablaTip == 2) {
 8002cc8:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <menu+0x19e8>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d104      	bne.n	8002cda <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002cd0:	4a5a      	ldr	r2, [pc, #360]	; (8002e3c <menu+0x19ec>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f005 f8c3 	bl	8007e60 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4858      	ldr	r0, [pc, #352]	; (8002e40 <menu+0x19f0>)
 8002cde:	f006 fbe5 	bl	80094ac <HAL_GPIO_ReadPin>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d115      	bne.n	8002d14 <menu+0x18c4>
 8002ce8:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <menu+0x19f4>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	f083 0301 	eor.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00e      	beq.n	8002d14 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <menu+0x19e8>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <menu+0x19e8>)
 8002d00:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d02:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <menu+0x19e8>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d902      	bls.n	8002d10 <menu+0x18c0>
				kapitablaTip = 0;
 8002d0a:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <menu+0x19e8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d10:	f001 ff6a 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d14:	2104      	movs	r1, #4
 8002d16:	484a      	ldr	r0, [pc, #296]	; (8002e40 <menu+0x19f0>)
 8002d18:	f006 fbc8 	bl	80094ac <HAL_GPIO_ReadPin>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d115      	bne.n	8002d4e <menu+0x18fe>
 8002d22:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <menu+0x19f4>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f083 0301 	eor.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00e      	beq.n	8002d4e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <menu+0x19e8>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <menu+0x19e8>)
 8002d3a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002d3c:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <menu+0x19e8>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d902      	bls.n	8002d4a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002d44:	4b3c      	ldr	r3, [pc, #240]	; (8002e38 <menu+0x19e8>)
 8002d46:	2202      	movs	r2, #2
 8002d48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d4a:	f001 ff4d 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4e:	2108      	movs	r1, #8
 8002d50:	483b      	ldr	r0, [pc, #236]	; (8002e40 <menu+0x19f0>)
 8002d52:	f006 fbab 	bl	80094ac <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10d      	bne.n	8002d78 <menu+0x1928>
 8002d5c:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <menu+0x19f4>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	f083 0301 	eor.w	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <menu+0x19e8>)
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <menu+0x19f8>)
 8002d70:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <menu+0x19fc>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002d78:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <menu+0x1a00>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b0e      	cmp	r3, #14
 8002d7e:	f040 80f2 	bne.w	8002f66 <menu+0x1b16>
		if(dilSecim == 0) {
 8002d82:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <menu+0x1a04>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <menu+0x1a08>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f005 f866 	bl	8007e60 <lcd_print>
 8002d94:	e008      	b.n	8002da8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <menu+0x1a04>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d104      	bne.n	8002da8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <menu+0x1a0c>)
 8002da0:	2101      	movs	r1, #1
 8002da2:	2001      	movs	r0, #1
 8002da4:	f005 f85c 	bl	8007e60 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <menu+0x1a10>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d113      	bne.n	8002dd8 <menu+0x1988>
			if(dilSecim == 0){
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <menu+0x1a04>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <menu+0x1a14>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f005 f84f 	bl	8007e60 <lcd_print>
 8002dc2:	e071      	b.n	8002ea8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <menu+0x1a04>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d16d      	bne.n	8002ea8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002dcc:	4a26      	ldr	r2, [pc, #152]	; (8002e68 <menu+0x1a18>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f005 f845 	bl	8007e60 <lcd_print>
 8002dd6:	e067      	b.n	8002ea8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <menu+0x1a10>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d112      	bne.n	8002e06 <menu+0x19b6>
			if(dilSecim == 0){
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <menu+0x1a04>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002de8:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <menu+0x1a1c>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	2002      	movs	r0, #2
 8002dee:	f005 f837 	bl	8007e60 <lcd_print>
			}
			if(dilSecim == 1){
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <menu+0x1a04>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d156      	bne.n	8002ea8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002dfa:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <menu+0x1a20>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	2002      	movs	r0, #2
 8002e00:	f005 f82e 	bl	8007e60 <lcd_print>
 8002e04:	e050      	b.n	8002ea8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <menu+0x1a10>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d136      	bne.n	8002e7c <menu+0x1a2c>
			if(dilSecim == 0){
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <menu+0x1a04>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e16:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <menu+0x1a24>)
 8002e18:	2101      	movs	r1, #1
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f005 f820 	bl	8007e60 <lcd_print>
 8002e20:	e042      	b.n	8002ea8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <menu+0x1a04>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d13e      	bne.n	8002ea8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e2a:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <menu+0x1a28>)
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	2002      	movs	r0, #2
 8002e30:	f005 f816 	bl	8007e60 <lcd_print>
 8002e34:	e038      	b.n	8002ea8 <menu+0x1a58>
 8002e36:	bf00      	nop
 8002e38:	2000023f 	.word	0x2000023f
 8002e3c:	0800d690 	.word	0x0800d690
 8002e40:	40010800 	.word	0x40010800
 8002e44:	20000263 	.word	0x20000263
 8002e48:	2000012c 	.word	0x2000012c
 8002e4c:	20000260 	.word	0x20000260
 8002e50:	20000234 	.word	0x20000234
 8002e54:	20000255 	.word	0x20000255
 8002e58:	0800d760 	.word	0x0800d760
 8002e5c:	0800d774 	.word	0x0800d774
 8002e60:	20000241 	.word	0x20000241
 8002e64:	0800d788 	.word	0x0800d788
 8002e68:	0800d798 	.word	0x0800d798
 8002e6c:	0800d7a8 	.word	0x0800d7a8
 8002e70:	0800d7b8 	.word	0x0800d7b8
 8002e74:	0800d7c8 	.word	0x0800d7c8
 8002e78:	0800d7dc 	.word	0x0800d7dc
			}
		} else if(kapiTablaAcKonum == 3) {
 8002e7c:	4b9b      	ldr	r3, [pc, #620]	; (80030ec <menu+0x1c9c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d111      	bne.n	8002ea8 <menu+0x1a58>
			if(dilSecim == 0) {
 8002e84:	4b9a      	ldr	r3, [pc, #616]	; (80030f0 <menu+0x1ca0>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002e8c:	4a99      	ldr	r2, [pc, #612]	; (80030f4 <menu+0x1ca4>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	2002      	movs	r0, #2
 8002e92:	f004 ffe5 	bl	8007e60 <lcd_print>
			}
			if(dilSecim == 1) {
 8002e96:	4b96      	ldr	r3, [pc, #600]	; (80030f0 <menu+0x1ca0>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d104      	bne.n	8002ea8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002e9e:	4a96      	ldr	r2, [pc, #600]	; (80030f8 <menu+0x1ca8>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f004 ffdc 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4894      	ldr	r0, [pc, #592]	; (80030fc <menu+0x1cac>)
 8002eac:	f006 fafe 	bl	80094ac <HAL_GPIO_ReadPin>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d115      	bne.n	8002ee2 <menu+0x1a92>
 8002eb6:	4b92      	ldr	r3, [pc, #584]	; (8003100 <menu+0x1cb0>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	f083 0301 	eor.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002ec4:	4b89      	ldr	r3, [pc, #548]	; (80030ec <menu+0x1c9c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	4b87      	ldr	r3, [pc, #540]	; (80030ec <menu+0x1c9c>)
 8002ece:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002ed0:	4b86      	ldr	r3, [pc, #536]	; (80030ec <menu+0x1c9c>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d902      	bls.n	8002ede <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002ed8:	4b84      	ldr	r3, [pc, #528]	; (80030ec <menu+0x1c9c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ede:	f001 fe83 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	4885      	ldr	r0, [pc, #532]	; (80030fc <menu+0x1cac>)
 8002ee6:	f006 fae1 	bl	80094ac <HAL_GPIO_ReadPin>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d115      	bne.n	8002f1c <menu+0x1acc>
 8002ef0:	4b83      	ldr	r3, [pc, #524]	; (8003100 <menu+0x1cb0>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	f083 0301 	eor.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002efe:	4b7b      	ldr	r3, [pc, #492]	; (80030ec <menu+0x1c9c>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4b79      	ldr	r3, [pc, #484]	; (80030ec <menu+0x1c9c>)
 8002f08:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f0a:	4b78      	ldr	r3, [pc, #480]	; (80030ec <menu+0x1c9c>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d902      	bls.n	8002f18 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002f12:	4b76      	ldr	r3, [pc, #472]	; (80030ec <menu+0x1c9c>)
 8002f14:	2202      	movs	r2, #2
 8002f16:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f18:	f001 fe66 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1c:	2108      	movs	r1, #8
 8002f1e:	4877      	ldr	r0, [pc, #476]	; (80030fc <menu+0x1cac>)
 8002f20:	f006 fac4 	bl	80094ac <HAL_GPIO_ReadPin>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d11d      	bne.n	8002f66 <menu+0x1b16>
 8002f2a:	4b75      	ldr	r3, [pc, #468]	; (8003100 <menu+0x1cb0>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	f083 0301 	eor.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d016      	beq.n	8002f66 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002f38:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <menu+0x1c9c>)
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	4b71      	ldr	r3, [pc, #452]	; (8003104 <menu+0x1cb4>)
 8002f3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002f42:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <menu+0x1c9c>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <menu+0x1b02>
 8002f4a:	4b68      	ldr	r3, [pc, #416]	; (80030ec <menu+0x1c9c>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d106      	bne.n	8002f60 <menu+0x1b10>
				altLimit = 1;
 8002f52:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <menu+0x1cb8>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f58:	4b6b      	ldr	r3, [pc, #428]	; (8003108 <menu+0x1cb8>)
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	4b69      	ldr	r3, [pc, #420]	; (8003104 <menu+0x1cb4>)
 8002f5e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002f60:	4b6a      	ldr	r3, [pc, #424]	; (800310c <menu+0x1cbc>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002f66:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <menu+0x1cc0>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d17f      	bne.n	800306e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002f6e:	4b60      	ldr	r3, [pc, #384]	; (80030f0 <menu+0x1ca0>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002f76:	4a67      	ldr	r2, [pc, #412]	; (8003114 <menu+0x1cc4>)
 8002f78:	2101      	movs	r1, #1
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f004 ff70 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002f80:	4a65      	ldr	r2, [pc, #404]	; (8003118 <menu+0x1cc8>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	2002      	movs	r0, #2
 8002f86:	f004 ff6b 	bl	8007e60 <lcd_print>
 8002f8a:	e00d      	b.n	8002fa8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002f8c:	4b58      	ldr	r3, [pc, #352]	; (80030f0 <menu+0x1ca0>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d109      	bne.n	8002fa8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002f94:	4a61      	ldr	r2, [pc, #388]	; (800311c <menu+0x1ccc>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f004 ff61 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002f9e:	4a60      	ldr	r2, [pc, #384]	; (8003120 <menu+0x1cd0>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f004 ff5c 	bl	8007e60 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002fa8:	4b5e      	ldr	r3, [pc, #376]	; (8003124 <menu+0x1cd4>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	220a      	movs	r2, #10
 8002fae:	495e      	ldr	r1, [pc, #376]	; (8003128 <menu+0x1cd8>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f009 faa7 	bl	800c504 <itoa>
		lcd_print(2,16,snum);
 8002fb6:	4a5c      	ldr	r2, [pc, #368]	; (8003128 <menu+0x1cd8>)
 8002fb8:	2110      	movs	r1, #16
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f004 ff50 	bl	8007e60 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	484e      	ldr	r0, [pc, #312]	; (80030fc <menu+0x1cac>)
 8002fc4:	f006 fa72 	bl	80094ac <HAL_GPIO_ReadPin>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d119      	bne.n	8003002 <menu+0x1bb2>
 8002fce:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <menu+0x1cb0>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	f083 0301 	eor.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <menu+0x1bb2>
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <menu+0x1cdc>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10e      	bne.n	8003002 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002fe4:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <menu+0x1cd4>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <menu+0x1cd4>)
 8002fee:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <menu+0x1cd4>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d902      	bls.n	8002ffe <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002ff8:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <menu+0x1cd4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ffe:	f001 fdf3 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003002:	2104      	movs	r1, #4
 8003004:	483d      	ldr	r0, [pc, #244]	; (80030fc <menu+0x1cac>)
 8003006:	f006 fa51 	bl	80094ac <HAL_GPIO_ReadPin>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d119      	bne.n	8003044 <menu+0x1bf4>
 8003010:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <menu+0x1cb0>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <menu+0x1bf4>
 800301e:	4b43      	ldr	r3, [pc, #268]	; (800312c <menu+0x1cdc>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10e      	bne.n	8003044 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <menu+0x1cd4>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	3b01      	subs	r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <menu+0x1cd4>)
 8003030:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003032:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <menu+0x1cd4>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b06      	cmp	r3, #6
 8003038:	d902      	bls.n	8003040 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800303a:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <menu+0x1cd4>)
 800303c:	2205      	movs	r2, #5
 800303e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003040:	f001 fdd2 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003044:	2108      	movs	r1, #8
 8003046:	482d      	ldr	r0, [pc, #180]	; (80030fc <menu+0x1cac>)
 8003048:	f006 fa30 	bl	80094ac <HAL_GPIO_ReadPin>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10d      	bne.n	800306e <menu+0x1c1e>
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <menu+0x1cb0>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	f083 0301 	eor.w	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <menu+0x1cd4>)
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <menu+0x1cb4>)
 8003066:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003068:	4b28      	ldr	r3, [pc, #160]	; (800310c <menu+0x1cbc>)
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800306e:	4b28      	ldr	r3, [pc, #160]	; (8003110 <menu+0x1cc0>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b10      	cmp	r3, #16
 8003074:	f040 80bc 	bne.w	80031f0 <menu+0x1da0>
		if(dilSecim == 0) {
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <menu+0x1ca0>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003080:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <menu+0x1ce0>)
 8003082:	2101      	movs	r1, #1
 8003084:	2001      	movs	r0, #1
 8003086:	f004 feeb 	bl	8007e60 <lcd_print>
 800308a:	e008      	b.n	800309e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <menu+0x1ca0>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d104      	bne.n	800309e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <menu+0x1ce4>)
 8003096:	2101      	movs	r1, #1
 8003098:	2001      	movs	r0, #1
 800309a:	f004 fee1 	bl	8007e60 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <menu+0x1ce8>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d113      	bne.n	80030ce <menu+0x1c7e>
			if(dilSecim == 0) {
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <menu+0x1ca0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80030ae:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <menu+0x1ca4>)
 80030b0:	2101      	movs	r1, #1
 80030b2:	2002      	movs	r0, #2
 80030b4:	f004 fed4 	bl	8007e60 <lcd_print>
 80030b8:	e04b      	b.n	8003152 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <menu+0x1ca0>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d147      	bne.n	8003152 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80030c2:	4a0d      	ldr	r2, [pc, #52]	; (80030f8 <menu+0x1ca8>)
 80030c4:	2101      	movs	r1, #1
 80030c6:	2002      	movs	r0, #2
 80030c8:	f004 feca 	bl	8007e60 <lcd_print>
 80030cc:	e041      	b.n	8003152 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <menu+0x1ce8>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d13d      	bne.n	8003152 <menu+0x1d02>
			if(dilSecim == 0) {
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <menu+0x1ca0>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d130      	bne.n	8003140 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <menu+0x1cec>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	2002      	movs	r0, #2
 80030e4:	f004 febc 	bl	8007e60 <lcd_print>
 80030e8:	e033      	b.n	8003152 <menu+0x1d02>
 80030ea:	bf00      	nop
 80030ec:	20000241 	.word	0x20000241
 80030f0:	20000255 	.word	0x20000255
 80030f4:	0800d450 	.word	0x0800d450
 80030f8:	0800d464 	.word	0x0800d464
 80030fc:	40010800 	.word	0x40010800
 8003100:	20000263 	.word	0x20000263
 8003104:	2000012c 	.word	0x2000012c
 8003108:	2000023a 	.word	0x2000023a
 800310c:	20000260 	.word	0x20000260
 8003110:	20000234 	.word	0x20000234
 8003114:	0800d7f0 	.word	0x0800d7f0
 8003118:	0800d6b4 	.word	0x0800d6b4
 800311c:	0800d804 	.word	0x0800d804
 8003120:	0800d6d8 	.word	0x0800d6d8
 8003124:	2000024f 	.word	0x2000024f
 8003128:	2000019c 	.word	0x2000019c
 800312c:	2000023f 	.word	0x2000023f
 8003130:	0800d818 	.word	0x0800d818
 8003134:	0800d82c 	.word	0x0800d82c
 8003138:	20000242 	.word	0x20000242
 800313c:	0800d4b0 	.word	0x0800d4b0
			} else if(dilSecim == 1) {
 8003140:	4b99      	ldr	r3, [pc, #612]	; (80033a8 <menu+0x1f58>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d104      	bne.n	8003152 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003148:	4a98      	ldr	r2, [pc, #608]	; (80033ac <menu+0x1f5c>)
 800314a:	2101      	movs	r1, #1
 800314c:	2002      	movs	r0, #2
 800314e:	f004 fe87 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003152:	2102      	movs	r1, #2
 8003154:	4896      	ldr	r0, [pc, #600]	; (80033b0 <menu+0x1f60>)
 8003156:	f006 f9a9 	bl	80094ac <HAL_GPIO_ReadPin>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d115      	bne.n	800318c <menu+0x1d3c>
 8003160:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <menu+0x1f64>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00e      	beq.n	800318c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800316e:	4b92      	ldr	r3, [pc, #584]	; (80033b8 <menu+0x1f68>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	3301      	adds	r3, #1
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4b90      	ldr	r3, [pc, #576]	; (80033b8 <menu+0x1f68>)
 8003178:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800317a:	4b8f      	ldr	r3, [pc, #572]	; (80033b8 <menu+0x1f68>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d902      	bls.n	8003188 <menu+0x1d38>
				yukariYavasLimit = 0;
 8003182:	4b8d      	ldr	r3, [pc, #564]	; (80033b8 <menu+0x1f68>)
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003188:	f001 fd2e 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800318c:	2104      	movs	r1, #4
 800318e:	4888      	ldr	r0, [pc, #544]	; (80033b0 <menu+0x1f60>)
 8003190:	f006 f98c 	bl	80094ac <HAL_GPIO_ReadPin>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d115      	bne.n	80031c6 <menu+0x1d76>
 800319a:	4b86      	ldr	r3, [pc, #536]	; (80033b4 <menu+0x1f64>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	f083 0301 	eor.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00e      	beq.n	80031c6 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80031a8:	4b83      	ldr	r3, [pc, #524]	; (80033b8 <menu+0x1f68>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b81      	ldr	r3, [pc, #516]	; (80033b8 <menu+0x1f68>)
 80031b2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80031b4:	4b80      	ldr	r3, [pc, #512]	; (80033b8 <menu+0x1f68>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80031bc:	4b7e      	ldr	r3, [pc, #504]	; (80033b8 <menu+0x1f68>)
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031c2:	f001 fd11 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c6:	2108      	movs	r1, #8
 80031c8:	4879      	ldr	r0, [pc, #484]	; (80033b0 <menu+0x1f60>)
 80031ca:	f006 f96f 	bl	80094ac <HAL_GPIO_ReadPin>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d10d      	bne.n	80031f0 <menu+0x1da0>
 80031d4:	4b77      	ldr	r3, [pc, #476]	; (80033b4 <menu+0x1f64>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f083 0301 	eor.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80031e2:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <menu+0x1f68>)
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	4b75      	ldr	r3, [pc, #468]	; (80033bc <menu+0x1f6c>)
 80031e8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80031ea:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <menu+0x1f70>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80031f0:	4b74      	ldr	r3, [pc, #464]	; (80033c4 <menu+0x1f74>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b11      	cmp	r3, #17
 80031f6:	f040 80c3 	bne.w	8003380 <menu+0x1f30>
		if(dilSecim == 0) {
 80031fa:	4b6b      	ldr	r3, [pc, #428]	; (80033a8 <menu+0x1f58>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003202:	4a71      	ldr	r2, [pc, #452]	; (80033c8 <menu+0x1f78>)
 8003204:	2101      	movs	r1, #1
 8003206:	2001      	movs	r0, #1
 8003208:	f004 fe2a 	bl	8007e60 <lcd_print>
 800320c:	e008      	b.n	8003220 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800320e:	4b66      	ldr	r3, [pc, #408]	; (80033a8 <menu+0x1f58>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d104      	bne.n	8003220 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003216:	4a6d      	ldr	r2, [pc, #436]	; (80033cc <menu+0x1f7c>)
 8003218:	2101      	movs	r1, #1
 800321a:	2001      	movs	r0, #1
 800321c:	f004 fe20 	bl	8007e60 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003220:	4b6b      	ldr	r3, [pc, #428]	; (80033d0 <menu+0x1f80>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d113      	bne.n	8003250 <menu+0x1e00>
			if(dilSecim == 0){
 8003228:	4b5f      	ldr	r3, [pc, #380]	; (80033a8 <menu+0x1f58>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003230:	4a68      	ldr	r2, [pc, #416]	; (80033d4 <menu+0x1f84>)
 8003232:	2101      	movs	r1, #1
 8003234:	2002      	movs	r0, #2
 8003236:	f004 fe13 	bl	8007e60 <lcd_print>
 800323a:	e038      	b.n	80032ae <menu+0x1e5e>
			} else if(dilSecim == 1){
 800323c:	4b5a      	ldr	r3, [pc, #360]	; (80033a8 <menu+0x1f58>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d134      	bne.n	80032ae <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003244:	4a64      	ldr	r2, [pc, #400]	; (80033d8 <menu+0x1f88>)
 8003246:	2101      	movs	r1, #1
 8003248:	2002      	movs	r0, #2
 800324a:	f004 fe09 	bl	8007e60 <lcd_print>
 800324e:	e02e      	b.n	80032ae <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003250:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <menu+0x1f80>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d113      	bne.n	8003280 <menu+0x1e30>
			if(dilSecim == 0){
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <menu+0x1f58>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003260:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <menu+0x1f8c>)
 8003262:	2101      	movs	r1, #1
 8003264:	2002      	movs	r0, #2
 8003266:	f004 fdfb 	bl	8007e60 <lcd_print>
 800326a:	e020      	b.n	80032ae <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800326c:	4b4e      	ldr	r3, [pc, #312]	; (80033a8 <menu+0x1f58>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d11c      	bne.n	80032ae <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003274:	4a5a      	ldr	r2, [pc, #360]	; (80033e0 <menu+0x1f90>)
 8003276:	2101      	movs	r1, #1
 8003278:	2002      	movs	r0, #2
 800327a:	f004 fdf1 	bl	8007e60 <lcd_print>
 800327e:	e016      	b.n	80032ae <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <menu+0x1f80>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d112      	bne.n	80032ae <menu+0x1e5e>
			if(dilSecim == 0) {
 8003288:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <menu+0x1f58>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003290:	4a54      	ldr	r2, [pc, #336]	; (80033e4 <menu+0x1f94>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f004 fde3 	bl	8007e60 <lcd_print>
 800329a:	e008      	b.n	80032ae <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800329c:	4b42      	ldr	r3, [pc, #264]	; (80033a8 <menu+0x1f58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d104      	bne.n	80032ae <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80032a4:	4a50      	ldr	r2, [pc, #320]	; (80033e8 <menu+0x1f98>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	2002      	movs	r0, #2
 80032aa:	f004 fdd9 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ae:	2102      	movs	r1, #2
 80032b0:	483f      	ldr	r0, [pc, #252]	; (80033b0 <menu+0x1f60>)
 80032b2:	f006 f8fb 	bl	80094ac <HAL_GPIO_ReadPin>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d115      	bne.n	80032e8 <menu+0x1e98>
 80032bc:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <menu+0x1f64>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f083 0301 	eor.w	r3, r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <menu+0x1f80>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	3301      	adds	r3, #1
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <menu+0x1f80>)
 80032d4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80032d6:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <menu+0x1f80>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d902      	bls.n	80032e4 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80032de:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <menu+0x1f80>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032e4:	f001 fc80 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032e8:	2104      	movs	r1, #4
 80032ea:	4831      	ldr	r0, [pc, #196]	; (80033b0 <menu+0x1f60>)
 80032ec:	f006 f8de 	bl	80094ac <HAL_GPIO_ReadPin>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d115      	bne.n	8003322 <menu+0x1ed2>
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <menu+0x1f64>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	f083 0301 	eor.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003304:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <menu+0x1f80>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	3b01      	subs	r3, #1
 800330a:	b2da      	uxtb	r2, r3
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <menu+0x1f80>)
 800330e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003310:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <menu+0x1f80>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d902      	bls.n	800331e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <menu+0x1f80>)
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800331e:	f001 fc63 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003322:	2108      	movs	r1, #8
 8003324:	4822      	ldr	r0, [pc, #136]	; (80033b0 <menu+0x1f60>)
 8003326:	f006 f8c1 	bl	80094ac <HAL_GPIO_ReadPin>
 800332a:	4603      	mov	r3, r0
 800332c:	2b01      	cmp	r3, #1
 800332e:	d127      	bne.n	8003380 <menu+0x1f30>
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <menu+0x1f64>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f083 0301 	eor.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d020      	beq.n	8003380 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <menu+0x1f80>)
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <menu+0x1f6c>)
 8003344:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <menu+0x1f80>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d003      	beq.n	8003356 <menu+0x1f06>
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <menu+0x1f80>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d106      	bne.n	8003364 <menu+0x1f14>
				calismaSekli = 0;
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <menu+0x1f9c>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <menu+0x1f9c>)
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <menu+0x1f6c>)
 8003362:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003364:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <menu+0x1f80>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d106      	bne.n	800337a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800336c:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <menu+0x1fa0>)
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003372:	4b1f      	ldr	r3, [pc, #124]	; (80033f0 <menu+0x1fa0>)
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <menu+0x1f6c>)
 8003378:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <menu+0x1f70>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <menu+0x1f74>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b12      	cmp	r3, #18
 8003386:	f040 80d5 	bne.w	8003534 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <menu+0x1f80>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d13c      	bne.n	800340c <menu+0x1fbc>
			if(dilSecim == 0) {
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <menu+0x1f58>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d12e      	bne.n	80033f8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800339a:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <menu+0x1fa4>)
 800339c:	2101      	movs	r1, #1
 800339e:	2001      	movs	r0, #1
 80033a0:	f004 fd5e 	bl	8007e60 <lcd_print>
 80033a4:	e048      	b.n	8003438 <menu+0x1fe8>
 80033a6:	bf00      	nop
 80033a8:	20000255 	.word	0x20000255
 80033ac:	0800d4c4 	.word	0x0800d4c4
 80033b0:	40010800 	.word	0x40010800
 80033b4:	20000263 	.word	0x20000263
 80033b8:	20000242 	.word	0x20000242
 80033bc:	2000012c 	.word	0x2000012c
 80033c0:	20000260 	.word	0x20000260
 80033c4:	20000234 	.word	0x20000234
 80033c8:	0800d840 	.word	0x0800d840
 80033cc:	0800d854 	.word	0x0800d854
 80033d0:	20000243 	.word	0x20000243
 80033d4:	0800d868 	.word	0x0800d868
 80033d8:	0800d878 	.word	0x0800d878
 80033dc:	0800d888 	.word	0x0800d888
 80033e0:	0800d898 	.word	0x0800d898
 80033e4:	0800d450 	.word	0x0800d450
 80033e8:	0800d464 	.word	0x0800d464
 80033ec:	20000235 	.word	0x20000235
 80033f0:	20000246 	.word	0x20000246
 80033f4:	0800d8a8 	.word	0x0800d8a8
			} else if(dilSecim == 1) {
 80033f8:	4b7b      	ldr	r3, [pc, #492]	; (80035e8 <menu+0x2198>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d11b      	bne.n	8003438 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003400:	4a7a      	ldr	r2, [pc, #488]	; (80035ec <menu+0x219c>)
 8003402:	2101      	movs	r1, #1
 8003404:	2001      	movs	r0, #1
 8003406:	f004 fd2b 	bl	8007e60 <lcd_print>
 800340a:	e015      	b.n	8003438 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800340c:	4b78      	ldr	r3, [pc, #480]	; (80035f0 <menu+0x21a0>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d111      	bne.n	8003438 <menu+0x1fe8>
			if(dilSecim == 0){
 8003414:	4b74      	ldr	r3, [pc, #464]	; (80035e8 <menu+0x2198>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800341c:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <menu+0x21a4>)
 800341e:	2101      	movs	r1, #1
 8003420:	2001      	movs	r0, #1
 8003422:	f004 fd1d 	bl	8007e60 <lcd_print>
			}
			if(dilSecim == 1){
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <menu+0x2198>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d104      	bne.n	8003438 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800342e:	4a72      	ldr	r2, [pc, #456]	; (80035f8 <menu+0x21a8>)
 8003430:	2101      	movs	r1, #1
 8003432:	2001      	movs	r0, #1
 8003434:	f004 fd14 	bl	8007e60 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003438:	4b70      	ldr	r3, [pc, #448]	; (80035fc <menu+0x21ac>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <menu+0x2018>
			if(dilSecim == 0) {
 8003440:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <menu+0x2198>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003448:	4a6d      	ldr	r2, [pc, #436]	; (8003600 <menu+0x21b0>)
 800344a:	2101      	movs	r1, #1
 800344c:	2002      	movs	r0, #2
 800344e:	f004 fd07 	bl	8007e60 <lcd_print>
 8003452:	e020      	b.n	8003496 <menu+0x2046>
			} else if(dilSecim == 1){
 8003454:	4b64      	ldr	r3, [pc, #400]	; (80035e8 <menu+0x2198>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d11c      	bne.n	8003496 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800345c:	4a69      	ldr	r2, [pc, #420]	; (8003604 <menu+0x21b4>)
 800345e:	2101      	movs	r1, #1
 8003460:	2002      	movs	r0, #2
 8003462:	f004 fcfd 	bl	8007e60 <lcd_print>
 8003466:	e016      	b.n	8003496 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <menu+0x21ac>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d112      	bne.n	8003496 <menu+0x2046>
			if(dilSecim == 0){
 8003470:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <menu+0x2198>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003478:	4a63      	ldr	r2, [pc, #396]	; (8003608 <menu+0x21b8>)
 800347a:	2101      	movs	r1, #1
 800347c:	2002      	movs	r0, #2
 800347e:	f004 fcef 	bl	8007e60 <lcd_print>
 8003482:	e008      	b.n	8003496 <menu+0x2046>
			} else if(dilSecim == 1){
 8003484:	4b58      	ldr	r3, [pc, #352]	; (80035e8 <menu+0x2198>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d104      	bne.n	8003496 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800348c:	4a5f      	ldr	r2, [pc, #380]	; (800360c <menu+0x21bc>)
 800348e:	2101      	movs	r1, #1
 8003490:	2002      	movs	r0, #2
 8003492:	f004 fce5 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003496:	2102      	movs	r1, #2
 8003498:	485d      	ldr	r0, [pc, #372]	; (8003610 <menu+0x21c0>)
 800349a:	f006 f807 	bl	80094ac <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d115      	bne.n	80034d0 <menu+0x2080>
 80034a4:	4b5b      	ldr	r3, [pc, #364]	; (8003614 <menu+0x21c4>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80034b2:	4b52      	ldr	r3, [pc, #328]	; (80035fc <menu+0x21ac>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b50      	ldr	r3, [pc, #320]	; (80035fc <menu+0x21ac>)
 80034bc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80034be:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <menu+0x21ac>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d902      	bls.n	80034cc <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80034c6:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <menu+0x21ac>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034cc:	f001 fb8c 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034d0:	2104      	movs	r1, #4
 80034d2:	484f      	ldr	r0, [pc, #316]	; (8003610 <menu+0x21c0>)
 80034d4:	f005 ffea 	bl	80094ac <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d115      	bne.n	800350a <menu+0x20ba>
 80034de:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <menu+0x21c4>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00e      	beq.n	800350a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80034ec:	4b43      	ldr	r3, [pc, #268]	; (80035fc <menu+0x21ac>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	4b41      	ldr	r3, [pc, #260]	; (80035fc <menu+0x21ac>)
 80034f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80034f8:	4b40      	ldr	r3, [pc, #256]	; (80035fc <menu+0x21ac>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003500:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <menu+0x21ac>)
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003506:	f001 fb6f 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800350a:	2108      	movs	r1, #8
 800350c:	4840      	ldr	r0, [pc, #256]	; (8003610 <menu+0x21c0>)
 800350e:	f005 ffcd 	bl	80094ac <HAL_GPIO_ReadPin>
 8003512:	4603      	mov	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d10d      	bne.n	8003534 <menu+0x20e4>
 8003518:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <menu+0x21c4>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003526:	4b35      	ldr	r3, [pc, #212]	; (80035fc <menu+0x21ac>)
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <menu+0x21c8>)
 800352c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <menu+0x21cc>)
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003534:	4b3a      	ldr	r3, [pc, #232]	; (8003620 <menu+0x21d0>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b13      	cmp	r3, #19
 800353a:	f040 80d5 	bne.w	80036e8 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <menu+0x21a0>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d113      	bne.n	800356e <menu+0x211e>
			if(dilSecim == 0) {
 8003546:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <menu+0x2198>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800354e:	4a35      	ldr	r2, [pc, #212]	; (8003624 <menu+0x21d4>)
 8003550:	2101      	movs	r1, #1
 8003552:	2001      	movs	r0, #1
 8003554:	f004 fc84 	bl	8007e60 <lcd_print>
 8003558:	e01f      	b.n	800359a <menu+0x214a>
			} else if(dilSecim == 1) {
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <menu+0x2198>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d11b      	bne.n	800359a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003562:	4a31      	ldr	r2, [pc, #196]	; (8003628 <menu+0x21d8>)
 8003564:	2101      	movs	r1, #1
 8003566:	2001      	movs	r0, #1
 8003568:	f004 fc7a 	bl	8007e60 <lcd_print>
 800356c:	e015      	b.n	800359a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <menu+0x21a0>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d111      	bne.n	800359a <menu+0x214a>
			if(dilSecim == 0) {
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <menu+0x2198>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d104      	bne.n	8003588 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800357e:	4a2b      	ldr	r2, [pc, #172]	; (800362c <menu+0x21dc>)
 8003580:	2101      	movs	r1, #1
 8003582:	2001      	movs	r0, #1
 8003584:	f004 fc6c 	bl	8007e60 <lcd_print>
			}
			if(dilSecim == 1) {
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <menu+0x2198>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d104      	bne.n	800359a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <menu+0x21e0>)
 8003592:	2101      	movs	r1, #1
 8003594:	2001      	movs	r0, #1
 8003596:	f004 fc63 	bl	8007e60 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <menu+0x21e4>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d113      	bne.n	80035ca <menu+0x217a>
			if(dilSecim == 0) {
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <menu+0x2198>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <menu+0x21b0>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	2002      	movs	r0, #2
 80035b0:	f004 fc56 	bl	8007e60 <lcd_print>
 80035b4:	e049      	b.n	800364a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <menu+0x2198>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d145      	bne.n	800364a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80035be:	4a11      	ldr	r2, [pc, #68]	; (8003604 <menu+0x21b4>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	2002      	movs	r0, #2
 80035c4:	f004 fc4c 	bl	8007e60 <lcd_print>
 80035c8:	e03f      	b.n	800364a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <menu+0x21e4>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d13b      	bne.n	800364a <menu+0x21fa>
			if(dilSecim == 0) {
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <menu+0x2198>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d12e      	bne.n	8003638 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80035da:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <menu+0x21b8>)
 80035dc:	2101      	movs	r1, #1
 80035de:	2002      	movs	r0, #2
 80035e0:	f004 fc3e 	bl	8007e60 <lcd_print>
 80035e4:	e031      	b.n	800364a <menu+0x21fa>
 80035e6:	bf00      	nop
 80035e8:	20000255 	.word	0x20000255
 80035ec:	0800d8bc 	.word	0x0800d8bc
 80035f0:	20000243 	.word	0x20000243
 80035f4:	0800d8cc 	.word	0x0800d8cc
 80035f8:	0800d8e0 	.word	0x0800d8e0
 80035fc:	20000244 	.word	0x20000244
 8003600:	0800d450 	.word	0x0800d450
 8003604:	0800d464 	.word	0x0800d464
 8003608:	0800d4b0 	.word	0x0800d4b0
 800360c:	0800d4c4 	.word	0x0800d4c4
 8003610:	40010800 	.word	0x40010800
 8003614:	20000263 	.word	0x20000263
 8003618:	2000012c 	.word	0x2000012c
 800361c:	20000260 	.word	0x20000260
 8003620:	20000234 	.word	0x20000234
 8003624:	0800d8f4 	.word	0x0800d8f4
 8003628:	0800d908 	.word	0x0800d908
 800362c:	0800d91c 	.word	0x0800d91c
 8003630:	0800d930 	.word	0x0800d930
 8003634:	20000245 	.word	0x20000245
			} else if(dilSecim == 1) {
 8003638:	4b90      	ldr	r3, [pc, #576]	; (800387c <menu+0x242c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d104      	bne.n	800364a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003640:	4a8f      	ldr	r2, [pc, #572]	; (8003880 <menu+0x2430>)
 8003642:	2101      	movs	r1, #1
 8003644:	2002      	movs	r0, #2
 8003646:	f004 fc0b 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800364a:	2102      	movs	r1, #2
 800364c:	488d      	ldr	r0, [pc, #564]	; (8003884 <menu+0x2434>)
 800364e:	f005 ff2d 	bl	80094ac <HAL_GPIO_ReadPin>
 8003652:	4603      	mov	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d115      	bne.n	8003684 <menu+0x2234>
 8003658:	4b8b      	ldr	r3, [pc, #556]	; (8003888 <menu+0x2438>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	f083 0301 	eor.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00e      	beq.n	8003684 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003666:	4b89      	ldr	r3, [pc, #548]	; (800388c <menu+0x243c>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	3301      	adds	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b87      	ldr	r3, [pc, #540]	; (800388c <menu+0x243c>)
 8003670:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003672:	4b86      	ldr	r3, [pc, #536]	; (800388c <menu+0x243c>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d902      	bls.n	8003680 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800367a:	4b84      	ldr	r3, [pc, #528]	; (800388c <menu+0x243c>)
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003680:	f001 fab2 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003684:	2104      	movs	r1, #4
 8003686:	487f      	ldr	r0, [pc, #508]	; (8003884 <menu+0x2434>)
 8003688:	f005 ff10 	bl	80094ac <HAL_GPIO_ReadPin>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d115      	bne.n	80036be <menu+0x226e>
 8003692:	4b7d      	ldr	r3, [pc, #500]	; (8003888 <menu+0x2438>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	f083 0301 	eor.w	r3, r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80036a0:	4b7a      	ldr	r3, [pc, #488]	; (800388c <menu+0x243c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	4b78      	ldr	r3, [pc, #480]	; (800388c <menu+0x243c>)
 80036aa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80036ac:	4b77      	ldr	r3, [pc, #476]	; (800388c <menu+0x243c>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80036b4:	4b75      	ldr	r3, [pc, #468]	; (800388c <menu+0x243c>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036ba:	f001 fa95 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036be:	2108      	movs	r1, #8
 80036c0:	4870      	ldr	r0, [pc, #448]	; (8003884 <menu+0x2434>)
 80036c2:	f005 fef3 	bl	80094ac <HAL_GPIO_ReadPin>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10d      	bne.n	80036e8 <menu+0x2298>
 80036cc:	4b6e      	ldr	r3, [pc, #440]	; (8003888 <menu+0x2438>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <menu+0x243c>)
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <menu+0x2440>)
 80036e0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80036e2:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <menu+0x2444>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80036e8:	4b6b      	ldr	r3, [pc, #428]	; (8003898 <menu+0x2448>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b14      	cmp	r3, #20
 80036ee:	f040 80b5 	bne.w	800385c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80036f2:	4b6a      	ldr	r3, [pc, #424]	; (800389c <menu+0x244c>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d113      	bne.n	8003722 <menu+0x22d2>
			if(dilSecim == 0) {
 80036fa:	4b60      	ldr	r3, [pc, #384]	; (800387c <menu+0x242c>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003702:	4a67      	ldr	r2, [pc, #412]	; (80038a0 <menu+0x2450>)
 8003704:	2101      	movs	r1, #1
 8003706:	2001      	movs	r0, #1
 8003708:	f004 fbaa 	bl	8007e60 <lcd_print>
 800370c:	e020      	b.n	8003750 <menu+0x2300>
			} else if(dilSecim == 1) {
 800370e:	4b5b      	ldr	r3, [pc, #364]	; (800387c <menu+0x242c>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d11c      	bne.n	8003750 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003716:	4a63      	ldr	r2, [pc, #396]	; (80038a4 <menu+0x2454>)
 8003718:	2101      	movs	r1, #1
 800371a:	2001      	movs	r0, #1
 800371c:	f004 fba0 	bl	8007e60 <lcd_print>
 8003720:	e016      	b.n	8003750 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003722:	4b5e      	ldr	r3, [pc, #376]	; (800389c <menu+0x244c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d112      	bne.n	8003750 <menu+0x2300>
			if(dilSecim == 0) {
 800372a:	4b54      	ldr	r3, [pc, #336]	; (800387c <menu+0x242c>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003732:	4a5d      	ldr	r2, [pc, #372]	; (80038a8 <menu+0x2458>)
 8003734:	2101      	movs	r1, #1
 8003736:	2001      	movs	r0, #1
 8003738:	f004 fb92 	bl	8007e60 <lcd_print>
 800373c:	e008      	b.n	8003750 <menu+0x2300>
			} else if(dilSecim == 1) {
 800373e:	4b4f      	ldr	r3, [pc, #316]	; (800387c <menu+0x242c>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d104      	bne.n	8003750 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003746:	4a59      	ldr	r2, [pc, #356]	; (80038ac <menu+0x245c>)
 8003748:	2101      	movs	r1, #1
 800374a:	2001      	movs	r0, #1
 800374c:	f004 fb88 	bl	8007e60 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003750:	4b57      	ldr	r3, [pc, #348]	; (80038b0 <menu+0x2460>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <menu+0x2330>
			if(dilSecim == 0) {
 8003758:	4b48      	ldr	r3, [pc, #288]	; (800387c <menu+0x242c>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003760:	4a54      	ldr	r2, [pc, #336]	; (80038b4 <menu+0x2464>)
 8003762:	2101      	movs	r1, #1
 8003764:	2002      	movs	r0, #2
 8003766:	f004 fb7b 	bl	8007e60 <lcd_print>
 800376a:	e020      	b.n	80037ae <menu+0x235e>
			} else if(dilSecim == 1) {
 800376c:	4b43      	ldr	r3, [pc, #268]	; (800387c <menu+0x242c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d11c      	bne.n	80037ae <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003774:	4a50      	ldr	r2, [pc, #320]	; (80038b8 <menu+0x2468>)
 8003776:	2101      	movs	r1, #1
 8003778:	2002      	movs	r0, #2
 800377a:	f004 fb71 	bl	8007e60 <lcd_print>
 800377e:	e016      	b.n	80037ae <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003780:	4b4b      	ldr	r3, [pc, #300]	; (80038b0 <menu+0x2460>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d112      	bne.n	80037ae <menu+0x235e>
			if(dilSecim == 0) {
 8003788:	4b3c      	ldr	r3, [pc, #240]	; (800387c <menu+0x242c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003790:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <menu+0x246c>)
 8003792:	2101      	movs	r1, #1
 8003794:	2002      	movs	r0, #2
 8003796:	f004 fb63 	bl	8007e60 <lcd_print>
 800379a:	e008      	b.n	80037ae <menu+0x235e>
			} else if(dilSecim == 1) {
 800379c:	4b37      	ldr	r3, [pc, #220]	; (800387c <menu+0x242c>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d104      	bne.n	80037ae <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80037a4:	4a46      	ldr	r2, [pc, #280]	; (80038c0 <menu+0x2470>)
 80037a6:	2101      	movs	r1, #1
 80037a8:	2002      	movs	r0, #2
 80037aa:	f004 fb59 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037ae:	2102      	movs	r1, #2
 80037b0:	4834      	ldr	r0, [pc, #208]	; (8003884 <menu+0x2434>)
 80037b2:	f005 fe7b 	bl	80094ac <HAL_GPIO_ReadPin>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d119      	bne.n	80037f0 <menu+0x23a0>
 80037bc:	4b32      	ldr	r3, [pc, #200]	; (8003888 <menu+0x2438>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d012      	beq.n	80037f0 <menu+0x23a0>
 80037ca:	4b34      	ldr	r3, [pc, #208]	; (800389c <menu+0x244c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d10e      	bne.n	80037f0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80037d2:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <menu+0x2460>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b35      	ldr	r3, [pc, #212]	; (80038b0 <menu+0x2460>)
 80037dc:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80037de:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <menu+0x2460>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d902      	bls.n	80037ec <menu+0x239c>
				devirmeSilindirTipi = 0;
 80037e6:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <menu+0x2460>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037ec:	f001 f9fc 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037f0:	2104      	movs	r1, #4
 80037f2:	4824      	ldr	r0, [pc, #144]	; (8003884 <menu+0x2434>)
 80037f4:	f005 fe5a 	bl	80094ac <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d119      	bne.n	8003832 <menu+0x23e2>
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <menu+0x2438>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f083 0301 	eor.w	r3, r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <menu+0x23e2>
 800380c:	4b23      	ldr	r3, [pc, #140]	; (800389c <menu+0x244c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d10e      	bne.n	8003832 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <menu+0x2460>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	3b01      	subs	r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <menu+0x2460>)
 800381e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003820:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <menu+0x2460>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003828:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <menu+0x2460>)
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800382e:	f001 f9db 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003832:	2108      	movs	r1, #8
 8003834:	4813      	ldr	r0, [pc, #76]	; (8003884 <menu+0x2434>)
 8003836:	f005 fe39 	bl	80094ac <HAL_GPIO_ReadPin>
 800383a:	4603      	mov	r3, r0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d10d      	bne.n	800385c <menu+0x240c>
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <menu+0x2438>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	f083 0301 	eor.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <menu+0x2460>)
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <menu+0x2440>)
 8003854:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <menu+0x2444>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <menu+0x2448>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b15      	cmp	r3, #21
 8003862:	f040 80c2 	bne.w	80039ea <menu+0x259a>
		if(dilSecim == 0) {
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <menu+0x242c>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d12c      	bne.n	80038c8 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800386e:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <menu+0x2474>)
 8003870:	2101      	movs	r1, #1
 8003872:	2001      	movs	r0, #1
 8003874:	f004 faf4 	bl	8007e60 <lcd_print>
 8003878:	e02f      	b.n	80038da <menu+0x248a>
 800387a:	bf00      	nop
 800387c:	20000255 	.word	0x20000255
 8003880:	0800d4c4 	.word	0x0800d4c4
 8003884:	40010800 	.word	0x40010800
 8003888:	20000263 	.word	0x20000263
 800388c:	20000245 	.word	0x20000245
 8003890:	2000012c 	.word	0x2000012c
 8003894:	20000260 	.word	0x20000260
 8003898:	20000234 	.word	0x20000234
 800389c:	20000243 	.word	0x20000243
 80038a0:	0800d944 	.word	0x0800d944
 80038a4:	0800d958 	.word	0x0800d958
 80038a8:	0800d96c 	.word	0x0800d96c
 80038ac:	0800d980 	.word	0x0800d980
 80038b0:	20000246 	.word	0x20000246
 80038b4:	0800d994 	.word	0x0800d994
 80038b8:	0800d9a8 	.word	0x0800d9a8
 80038bc:	0800d9b8 	.word	0x0800d9b8
 80038c0:	0800d9cc 	.word	0x0800d9cc
 80038c4:	0800d9dc 	.word	0x0800d9dc
		} else if(dilSecim == 1) {
 80038c8:	4b9c      	ldr	r3, [pc, #624]	; (8003b3c <menu+0x26ec>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d104      	bne.n	80038da <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80038d0:	4a9b      	ldr	r2, [pc, #620]	; (8003b40 <menu+0x26f0>)
 80038d2:	2101      	movs	r1, #1
 80038d4:	2001      	movs	r0, #1
 80038d6:	f004 fac3 	bl	8007e60 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80038da:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <menu+0x26f4>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d112      	bne.n	8003908 <menu+0x24b8>
			if(dilSecim == 0) {
 80038e2:	4b96      	ldr	r3, [pc, #600]	; (8003b3c <menu+0x26ec>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80038ea:	4a97      	ldr	r2, [pc, #604]	; (8003b48 <menu+0x26f8>)
 80038ec:	2101      	movs	r1, #1
 80038ee:	2002      	movs	r0, #2
 80038f0:	f004 fab6 	bl	8007e60 <lcd_print>
			}
			if(dilSecim == 1) {
 80038f4:	4b91      	ldr	r3, [pc, #580]	; (8003b3c <menu+0x26ec>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d11c      	bne.n	8003936 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80038fc:	4a93      	ldr	r2, [pc, #588]	; (8003b4c <menu+0x26fc>)
 80038fe:	2101      	movs	r1, #1
 8003900:	2002      	movs	r0, #2
 8003902:	f004 faad 	bl	8007e60 <lcd_print>
 8003906:	e016      	b.n	8003936 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003908:	4b8e      	ldr	r3, [pc, #568]	; (8003b44 <menu+0x26f4>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d112      	bne.n	8003936 <menu+0x24e6>
			if(dilSecim == 0) {
 8003910:	4b8a      	ldr	r3, [pc, #552]	; (8003b3c <menu+0x26ec>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003918:	4a8d      	ldr	r2, [pc, #564]	; (8003b50 <menu+0x2700>)
 800391a:	2101      	movs	r1, #1
 800391c:	2002      	movs	r0, #2
 800391e:	f004 fa9f 	bl	8007e60 <lcd_print>
 8003922:	e008      	b.n	8003936 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003924:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <menu+0x26ec>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d104      	bne.n	8003936 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800392c:	4a89      	ldr	r2, [pc, #548]	; (8003b54 <menu+0x2704>)
 800392e:	2101      	movs	r1, #1
 8003930:	2002      	movs	r0, #2
 8003932:	f004 fa95 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003936:	2102      	movs	r1, #2
 8003938:	4887      	ldr	r0, [pc, #540]	; (8003b58 <menu+0x2708>)
 800393a:	f005 fdb7 	bl	80094ac <HAL_GPIO_ReadPin>
 800393e:	4603      	mov	r3, r0
 8003940:	2b01      	cmp	r3, #1
 8003942:	d115      	bne.n	8003970 <menu+0x2520>
 8003944:	4b85      	ldr	r3, [pc, #532]	; (8003b5c <menu+0x270c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00e      	beq.n	8003970 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003952:	4b7c      	ldr	r3, [pc, #496]	; (8003b44 <menu+0x26f4>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b7a      	ldr	r3, [pc, #488]	; (8003b44 <menu+0x26f4>)
 800395c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800395e:	4b79      	ldr	r3, [pc, #484]	; (8003b44 <menu+0x26f4>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d902      	bls.n	800396c <menu+0x251c>
				platformSilindirTipi = 0;
 8003966:	4b77      	ldr	r3, [pc, #476]	; (8003b44 <menu+0x26f4>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800396c:	f001 f93c 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003970:	2104      	movs	r1, #4
 8003972:	4879      	ldr	r0, [pc, #484]	; (8003b58 <menu+0x2708>)
 8003974:	f005 fd9a 	bl	80094ac <HAL_GPIO_ReadPin>
 8003978:	4603      	mov	r3, r0
 800397a:	2b01      	cmp	r3, #1
 800397c:	d115      	bne.n	80039aa <menu+0x255a>
 800397e:	4b77      	ldr	r3, [pc, #476]	; (8003b5c <menu+0x270c>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	f083 0301 	eor.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800398c:	4b6d      	ldr	r3, [pc, #436]	; (8003b44 <menu+0x26f4>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	3b01      	subs	r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	4b6b      	ldr	r3, [pc, #428]	; (8003b44 <menu+0x26f4>)
 8003996:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003998:	4b6a      	ldr	r3, [pc, #424]	; (8003b44 <menu+0x26f4>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 80039a0:	4b68      	ldr	r3, [pc, #416]	; (8003b44 <menu+0x26f4>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039a6:	f001 f91f 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039aa:	2108      	movs	r1, #8
 80039ac:	486a      	ldr	r0, [pc, #424]	; (8003b58 <menu+0x2708>)
 80039ae:	f005 fd7d 	bl	80094ac <HAL_GPIO_ReadPin>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d118      	bne.n	80039ea <menu+0x259a>
 80039b8:	4b68      	ldr	r3, [pc, #416]	; (8003b5c <menu+0x270c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d011      	beq.n	80039ea <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80039c6:	4b5f      	ldr	r3, [pc, #380]	; (8003b44 <menu+0x26f4>)
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <menu+0x2710>)
 80039cc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80039ce:	4b5d      	ldr	r3, [pc, #372]	; (8003b44 <menu+0x26f4>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d106      	bne.n	80039e4 <menu+0x2594>
				altLimit = 1;
 80039d6:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <menu+0x2714>)
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80039dc:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <menu+0x2714>)
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	4b5f      	ldr	r3, [pc, #380]	; (8003b60 <menu+0x2710>)
 80039e2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80039e4:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <menu+0x2718>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80039ea:	4b60      	ldr	r3, [pc, #384]	; (8003b6c <menu+0x271c>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b16      	cmp	r3, #22
 80039f0:	f040 8081 	bne.w	8003af6 <menu+0x26a6>
		if(dilSecim == 0) {
 80039f4:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <menu+0x26ec>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80039fc:	4a5c      	ldr	r2, [pc, #368]	; (8003b70 <menu+0x2720>)
 80039fe:	2101      	movs	r1, #1
 8003a00:	2001      	movs	r0, #1
 8003a02:	f004 fa2d 	bl	8007e60 <lcd_print>
 8003a06:	e008      	b.n	8003a1a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <menu+0x26ec>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d104      	bne.n	8003a1a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <menu+0x2724>)
 8003a12:	2101      	movs	r1, #1
 8003a14:	2001      	movs	r0, #1
 8003a16:	f004 fa23 	bl	8007e60 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a1a:	4b48      	ldr	r3, [pc, #288]	; (8003b3c <menu+0x26ec>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a22:	4a55      	ldr	r2, [pc, #340]	; (8003b78 <menu+0x2728>)
 8003a24:	2101      	movs	r1, #1
 8003a26:	2002      	movs	r0, #2
 8003a28:	f004 fa1a 	bl	8007e60 <lcd_print>
 8003a2c:	e008      	b.n	8003a40 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003a2e:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <menu+0x26ec>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d104      	bne.n	8003a40 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003a36:	4a51      	ldr	r2, [pc, #324]	; (8003b7c <menu+0x272c>)
 8003a38:	2101      	movs	r1, #1
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	f004 fa10 	bl	8007e60 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <menu+0x2730>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	220a      	movs	r2, #10
 8003a46:	494f      	ldr	r1, [pc, #316]	; (8003b84 <menu+0x2734>)
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f008 fd5b 	bl	800c504 <itoa>
		lcd_print(2,16,snum);
 8003a4e:	4a4d      	ldr	r2, [pc, #308]	; (8003b84 <menu+0x2734>)
 8003a50:	2110      	movs	r1, #16
 8003a52:	2002      	movs	r0, #2
 8003a54:	f004 fa04 	bl	8007e60 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a58:	2102      	movs	r1, #2
 8003a5a:	483f      	ldr	r0, [pc, #252]	; (8003b58 <menu+0x2708>)
 8003a5c:	f005 fd26 	bl	80094ac <HAL_GPIO_ReadPin>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d115      	bne.n	8003a92 <menu+0x2642>
 8003a66:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <menu+0x270c>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	f083 0301 	eor.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00e      	beq.n	8003a92 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003a74:	4b42      	ldr	r3, [pc, #264]	; (8003b80 <menu+0x2730>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4b40      	ldr	r3, [pc, #256]	; (8003b80 <menu+0x2730>)
 8003a7e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <menu+0x2730>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d902      	bls.n	8003a8e <menu+0x263e>
				yukariValfTmr = 0;
 8003a88:	4b3d      	ldr	r3, [pc, #244]	; (8003b80 <menu+0x2730>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a8e:	f001 f8ab 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a92:	2104      	movs	r1, #4
 8003a94:	4830      	ldr	r0, [pc, #192]	; (8003b58 <menu+0x2708>)
 8003a96:	f005 fd09 	bl	80094ac <HAL_GPIO_ReadPin>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d115      	bne.n	8003acc <menu+0x267c>
 8003aa0:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <menu+0x270c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	f083 0301 	eor.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003aae:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <menu+0x2730>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b32      	ldr	r3, [pc, #200]	; (8003b80 <menu+0x2730>)
 8003ab8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003aba:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <menu+0x2730>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d902      	bls.n	8003ac8 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <menu+0x2730>)
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ac8:	f001 f88e 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003acc:	2108      	movs	r1, #8
 8003ace:	4822      	ldr	r0, [pc, #136]	; (8003b58 <menu+0x2708>)
 8003ad0:	f005 fcec 	bl	80094ac <HAL_GPIO_ReadPin>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d10d      	bne.n	8003af6 <menu+0x26a6>
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <menu+0x270c>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	f083 0301 	eor.w	r3, r3, #1
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <menu+0x2730>)
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <menu+0x2710>)
 8003aee:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <menu+0x2718>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003af6:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <menu+0x271c>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b17      	cmp	r3, #23
 8003afc:	f040 80ac 	bne.w	8003c58 <menu+0x2808>
		if(dilSecim == 0) {
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <menu+0x26ec>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b08:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <menu+0x2738>)
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f004 f9a7 	bl	8007e60 <lcd_print>
 8003b12:	e008      	b.n	8003b26 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <menu+0x26ec>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d104      	bne.n	8003b26 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <menu+0x273c>)
 8003b1e:	2101      	movs	r1, #1
 8003b20:	2001      	movs	r0, #1
 8003b22:	f004 f99d 	bl	8007e60 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <menu+0x26ec>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d130      	bne.n	8003b90 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <menu+0x2728>)
 8003b30:	2101      	movs	r1, #1
 8003b32:	2002      	movs	r0, #2
 8003b34:	f004 f994 	bl	8007e60 <lcd_print>
 8003b38:	e033      	b.n	8003ba2 <menu+0x2752>
 8003b3a:	bf00      	nop
 8003b3c:	20000255 	.word	0x20000255
 8003b40:	0800d9f0 	.word	0x0800d9f0
 8003b44:	20000247 	.word	0x20000247
 8003b48:	0800d994 	.word	0x0800d994
 8003b4c:	0800d9a8 	.word	0x0800d9a8
 8003b50:	0800d9b8 	.word	0x0800d9b8
 8003b54:	0800d9cc 	.word	0x0800d9cc
 8003b58:	40010800 	.word	0x40010800
 8003b5c:	20000263 	.word	0x20000263
 8003b60:	2000012c 	.word	0x2000012c
 8003b64:	2000023a 	.word	0x2000023a
 8003b68:	20000260 	.word	0x20000260
 8003b6c:	20000234 	.word	0x20000234
 8003b70:	0800da00 	.word	0x0800da00
 8003b74:	0800da14 	.word	0x0800da14
 8003b78:	0800d6b4 	.word	0x0800d6b4
 8003b7c:	0800da28 	.word	0x0800da28
 8003b80:	20000248 	.word	0x20000248
 8003b84:	2000019c 	.word	0x2000019c
 8003b88:	0800da38 	.word	0x0800da38
 8003b8c:	0800da4c 	.word	0x0800da4c
			} else if(dilSecim == 1) {
 8003b90:	4b98      	ldr	r3, [pc, #608]	; (8003df4 <menu+0x29a4>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d104      	bne.n	8003ba2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003b98:	4a97      	ldr	r2, [pc, #604]	; (8003df8 <menu+0x29a8>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	f004 f95f 	bl	8007e60 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003ba2:	4b96      	ldr	r3, [pc, #600]	; (8003dfc <menu+0x29ac>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	220a      	movs	r2, #10
 8003ba8:	4995      	ldr	r1, [pc, #596]	; (8003e00 <menu+0x29b0>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f008 fcaa 	bl	800c504 <itoa>
		lcd_print(2,16,snum);
 8003bb0:	4a93      	ldr	r2, [pc, #588]	; (8003e00 <menu+0x29b0>)
 8003bb2:	2110      	movs	r1, #16
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f004 f953 	bl	8007e60 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4891      	ldr	r0, [pc, #580]	; (8003e04 <menu+0x29b4>)
 8003bbe:	f005 fc75 	bl	80094ac <HAL_GPIO_ReadPin>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d115      	bne.n	8003bf4 <menu+0x27a4>
 8003bc8:	4b8f      	ldr	r3, [pc, #572]	; (8003e08 <menu+0x29b8>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f083 0301 	eor.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00e      	beq.n	8003bf4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003bd6:	4b89      	ldr	r3, [pc, #548]	; (8003dfc <menu+0x29ac>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b87      	ldr	r3, [pc, #540]	; (8003dfc <menu+0x29ac>)
 8003be0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003be2:	4b86      	ldr	r3, [pc, #536]	; (8003dfc <menu+0x29ac>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d902      	bls.n	8003bf0 <menu+0x27a0>
				asagiValfTmr = 0;
 8003bea:	4b84      	ldr	r3, [pc, #528]	; (8003dfc <menu+0x29ac>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bf0:	f000 fffa 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	4883      	ldr	r0, [pc, #524]	; (8003e04 <menu+0x29b4>)
 8003bf8:	f005 fc58 	bl	80094ac <HAL_GPIO_ReadPin>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d115      	bne.n	8003c2e <menu+0x27de>
 8003c02:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <menu+0x29b8>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	f083 0301 	eor.w	r3, r3, #1
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003c10:	4b7a      	ldr	r3, [pc, #488]	; (8003dfc <menu+0x29ac>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <menu+0x29ac>)
 8003c1a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c1c:	4b77      	ldr	r3, [pc, #476]	; (8003dfc <menu+0x29ac>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	d902      	bls.n	8003c2a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003c24:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <menu+0x29ac>)
 8003c26:	2205      	movs	r2, #5
 8003c28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c2a:	f000 ffdd 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2e:	2108      	movs	r1, #8
 8003c30:	4874      	ldr	r0, [pc, #464]	; (8003e04 <menu+0x29b4>)
 8003c32:	f005 fc3b 	bl	80094ac <HAL_GPIO_ReadPin>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10d      	bne.n	8003c58 <menu+0x2808>
 8003c3c:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <menu+0x29b8>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003c4a:	4b6c      	ldr	r3, [pc, #432]	; (8003dfc <menu+0x29ac>)
 8003c4c:	781a      	ldrb	r2, [r3, #0]
 8003c4e:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <menu+0x29bc>)
 8003c50:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003c52:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <menu+0x29c0>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003c58:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <menu+0x29c4>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b18      	cmp	r3, #24
 8003c5e:	f040 809d 	bne.w	8003d9c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <menu+0x29c8>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d113      	bne.n	8003c92 <menu+0x2842>
			if(dilSecim == 0) {
 8003c6a:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <menu+0x29a4>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003c72:	4a6a      	ldr	r2, [pc, #424]	; (8003e1c <menu+0x29cc>)
 8003c74:	2101      	movs	r1, #1
 8003c76:	2001      	movs	r0, #1
 8003c78:	f004 f8f2 	bl	8007e60 <lcd_print>
 8003c7c:	e020      	b.n	8003cc0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <menu+0x29a4>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d11c      	bne.n	8003cc0 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003c86:	4a66      	ldr	r2, [pc, #408]	; (8003e20 <menu+0x29d0>)
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	f004 f8e8 	bl	8007e60 <lcd_print>
 8003c90:	e016      	b.n	8003cc0 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c92:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <menu+0x29c8>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d112      	bne.n	8003cc0 <menu+0x2870>
			if(dilSecim == 0) {
 8003c9a:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <menu+0x29a4>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d105      	bne.n	8003cae <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003ca2:	4a60      	ldr	r2, [pc, #384]	; (8003e24 <menu+0x29d4>)
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f004 f8da 	bl	8007e60 <lcd_print>
 8003cac:	e008      	b.n	8003cc0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003cae:	4b51      	ldr	r3, [pc, #324]	; (8003df4 <menu+0x29a4>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d104      	bne.n	8003cc0 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003cb6:	4a5c      	ldr	r2, [pc, #368]	; (8003e28 <menu+0x29d8>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f004 f8d0 	bl	8007e60 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003cc0:	4b4c      	ldr	r3, [pc, #304]	; (8003df4 <menu+0x29a4>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <menu+0x29dc>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2002      	movs	r0, #2
 8003cce:	f004 f8c7 	bl	8007e60 <lcd_print>
 8003cd2:	e008      	b.n	8003ce6 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003cd4:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <menu+0x29a4>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d104      	bne.n	8003ce6 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003cdc:	4a46      	ldr	r2, [pc, #280]	; (8003df8 <menu+0x29a8>)
 8003cde:	2101      	movs	r1, #1
 8003ce0:	2002      	movs	r0, #2
 8003ce2:	f004 f8bd 	bl	8007e60 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003ce6:	4b52      	ldr	r3, [pc, #328]	; (8003e30 <menu+0x29e0>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	220a      	movs	r2, #10
 8003cec:	4944      	ldr	r1, [pc, #272]	; (8003e00 <menu+0x29b0>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f008 fc08 	bl	800c504 <itoa>
		lcd_print(2, 16, snum);
 8003cf4:	4a42      	ldr	r2, [pc, #264]	; (8003e00 <menu+0x29b0>)
 8003cf6:	2110      	movs	r1, #16
 8003cf8:	2002      	movs	r0, #2
 8003cfa:	f004 f8b1 	bl	8007e60 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cfe:	2102      	movs	r1, #2
 8003d00:	4840      	ldr	r0, [pc, #256]	; (8003e04 <menu+0x29b4>)
 8003d02:	f005 fbd3 	bl	80094ac <HAL_GPIO_ReadPin>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d115      	bne.n	8003d38 <menu+0x28e8>
 8003d0c:	4b3e      	ldr	r3, [pc, #248]	; (8003e08 <menu+0x29b8>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	f083 0301 	eor.w	r3, r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00e      	beq.n	8003d38 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003d1a:	4b45      	ldr	r3, [pc, #276]	; (8003e30 <menu+0x29e0>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <menu+0x29e0>)
 8003d24:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d26:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <menu+0x29e0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d902      	bls.n	8003d34 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003d2e:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <menu+0x29e0>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d34:	f000 ff58 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d38:	2104      	movs	r1, #4
 8003d3a:	4832      	ldr	r0, [pc, #200]	; (8003e04 <menu+0x29b4>)
 8003d3c:	f005 fbb6 	bl	80094ac <HAL_GPIO_ReadPin>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d115      	bne.n	8003d72 <menu+0x2922>
 8003d46:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <menu+0x29b8>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	f083 0301 	eor.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003d54:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <menu+0x29e0>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <menu+0x29e0>)
 8003d5e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <menu+0x29e0>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b06      	cmp	r3, #6
 8003d66:	d902      	bls.n	8003d6e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <menu+0x29e0>)
 8003d6a:	2205      	movs	r2, #5
 8003d6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d6e:	f000 ff3b 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d72:	2108      	movs	r1, #8
 8003d74:	4823      	ldr	r0, [pc, #140]	; (8003e04 <menu+0x29b4>)
 8003d76:	f005 fb99 	bl	80094ac <HAL_GPIO_ReadPin>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10d      	bne.n	8003d9c <menu+0x294c>
 8003d80:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <menu+0x29b8>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f083 0301 	eor.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003d8e:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <menu+0x29e0>)
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <menu+0x29bc>)
 8003d94:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <menu+0x29c0>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <menu+0x29c4>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b19      	cmp	r3, #25
 8003da2:	f040 80c4 	bne.w	8003f2e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003da6:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <menu+0x29c8>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d113      	bne.n	8003dd6 <menu+0x2986>
			if(dilSecim == 0) {
 8003dae:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <menu+0x29a4>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003db6:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <menu+0x29e4>)
 8003db8:	2101      	movs	r1, #1
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f004 f850 	bl	8007e60 <lcd_print>
 8003dc0:	e047      	b.n	8003e52 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <menu+0x29a4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d143      	bne.n	8003e52 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003dca:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <menu+0x29e8>)
 8003dcc:	2101      	movs	r1, #1
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f004 f846 	bl	8007e60 <lcd_print>
 8003dd4:	e03d      	b.n	8003e52 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <menu+0x29c8>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d139      	bne.n	8003e52 <menu+0x2a02>
			if(dilSecim == 0) {
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <menu+0x29a4>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d12c      	bne.n	8003e40 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <menu+0x29ec>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	2001      	movs	r0, #1
 8003dec:	f004 f838 	bl	8007e60 <lcd_print>
 8003df0:	e02f      	b.n	8003e52 <menu+0x2a02>
 8003df2:	bf00      	nop
 8003df4:	20000255 	.word	0x20000255
 8003df8:	0800da28 	.word	0x0800da28
 8003dfc:	20000249 	.word	0x20000249
 8003e00:	2000019c 	.word	0x2000019c
 8003e04:	40010800 	.word	0x40010800
 8003e08:	20000263 	.word	0x20000263
 8003e0c:	2000012c 	.word	0x2000012c
 8003e10:	20000260 	.word	0x20000260
 8003e14:	20000234 	.word	0x20000234
 8003e18:	20000243 	.word	0x20000243
 8003e1c:	0800da60 	.word	0x0800da60
 8003e20:	0800da74 	.word	0x0800da74
 8003e24:	0800da88 	.word	0x0800da88
 8003e28:	0800da9c 	.word	0x0800da9c
 8003e2c:	0800d6b4 	.word	0x0800d6b4
 8003e30:	2000024a 	.word	0x2000024a
 8003e34:	0800dab0 	.word	0x0800dab0
 8003e38:	0800dac4 	.word	0x0800dac4
 8003e3c:	0800dad8 	.word	0x0800dad8
			} else if(dilSecim == 1) {
 8003e40:	4b73      	ldr	r3, [pc, #460]	; (8004010 <menu+0x2bc0>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d104      	bne.n	8003e52 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003e48:	4a72      	ldr	r2, [pc, #456]	; (8004014 <menu+0x2bc4>)
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f004 f807 	bl	8007e60 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003e52:	4b6f      	ldr	r3, [pc, #444]	; (8004010 <menu+0x2bc0>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e5a:	4a6f      	ldr	r2, [pc, #444]	; (8004018 <menu+0x2bc8>)
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	2002      	movs	r0, #2
 8003e60:	f003 fffe 	bl	8007e60 <lcd_print>
 8003e64:	e008      	b.n	8003e78 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003e66:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <menu+0x2bc0>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d104      	bne.n	8003e78 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003e6e:	4a6b      	ldr	r2, [pc, #428]	; (800401c <menu+0x2bcc>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	2002      	movs	r0, #2
 8003e74:	f003 fff4 	bl	8007e60 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003e78:	4b69      	ldr	r3, [pc, #420]	; (8004020 <menu+0x2bd0>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	220a      	movs	r2, #10
 8003e7e:	4969      	ldr	r1, [pc, #420]	; (8004024 <menu+0x2bd4>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f008 fb3f 	bl	800c504 <itoa>
		lcd_print(2,16,snum);
 8003e86:	4a67      	ldr	r2, [pc, #412]	; (8004024 <menu+0x2bd4>)
 8003e88:	2110      	movs	r1, #16
 8003e8a:	2002      	movs	r0, #2
 8003e8c:	f003 ffe8 	bl	8007e60 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e90:	2102      	movs	r1, #2
 8003e92:	4865      	ldr	r0, [pc, #404]	; (8004028 <menu+0x2bd8>)
 8003e94:	f005 fb0a 	bl	80094ac <HAL_GPIO_ReadPin>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d115      	bne.n	8003eca <menu+0x2a7a>
 8003e9e:	4b63      	ldr	r3, [pc, #396]	; (800402c <menu+0x2bdc>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	f083 0301 	eor.w	r3, r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00e      	beq.n	8003eca <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003eac:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <menu+0x2bd0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4b5a      	ldr	r3, [pc, #360]	; (8004020 <menu+0x2bd0>)
 8003eb6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003eb8:	4b59      	ldr	r3, [pc, #356]	; (8004020 <menu+0x2bd0>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d902      	bls.n	8003ec6 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003ec0:	4b57      	ldr	r3, [pc, #348]	; (8004020 <menu+0x2bd0>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ec6:	f000 fe8f 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eca:	2104      	movs	r1, #4
 8003ecc:	4856      	ldr	r0, [pc, #344]	; (8004028 <menu+0x2bd8>)
 8003ece:	f005 faed 	bl	80094ac <HAL_GPIO_ReadPin>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d115      	bne.n	8003f04 <menu+0x2ab4>
 8003ed8:	4b54      	ldr	r3, [pc, #336]	; (800402c <menu+0x2bdc>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f083 0301 	eor.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00e      	beq.n	8003f04 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003ee6:	4b4e      	ldr	r3, [pc, #312]	; (8004020 <menu+0x2bd0>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <menu+0x2bd0>)
 8003ef0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003ef2:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <menu+0x2bd0>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d902      	bls.n	8003f00 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003efa:	4b49      	ldr	r3, [pc, #292]	; (8004020 <menu+0x2bd0>)
 8003efc:	2205      	movs	r2, #5
 8003efe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f00:	f000 fe72 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f04:	2108      	movs	r1, #8
 8003f06:	4848      	ldr	r0, [pc, #288]	; (8004028 <menu+0x2bd8>)
 8003f08:	f005 fad0 	bl	80094ac <HAL_GPIO_ReadPin>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d10d      	bne.n	8003f2e <menu+0x2ade>
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <menu+0x2bdc>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	f083 0301 	eor.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f20:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <menu+0x2bd0>)
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <menu+0x2be0>)
 8003f26:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f28:	4b42      	ldr	r3, [pc, #264]	; (8004034 <menu+0x2be4>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f2e:	4b42      	ldr	r3, [pc, #264]	; (8004038 <menu+0x2be8>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b1a      	cmp	r3, #26
 8003f34:	f040 80ec 	bne.w	8004110 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003f38:	4b35      	ldr	r3, [pc, #212]	; (8004010 <menu+0x2bc0>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003f40:	4a3e      	ldr	r2, [pc, #248]	; (800403c <menu+0x2bec>)
 8003f42:	2101      	movs	r1, #1
 8003f44:	2001      	movs	r0, #1
 8003f46:	f003 ff8b 	bl	8007e60 <lcd_print>
 8003f4a:	e008      	b.n	8003f5e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003f4c:	4b30      	ldr	r3, [pc, #192]	; (8004010 <menu+0x2bc0>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d104      	bne.n	8003f5e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003f54:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <menu+0x2bf0>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	2001      	movs	r0, #1
 8003f5a:	f003 ff81 	bl	8007e60 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003f5e:	4b39      	ldr	r3, [pc, #228]	; (8004044 <menu+0x2bf4>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b63      	cmp	r3, #99	; 0x63
 8003f64:	d91e      	bls.n	8003fa4 <menu+0x2b54>
			if(dilSecim == 0) {
 8003f66:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <menu+0x2bc0>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f6e:	4a2a      	ldr	r2, [pc, #168]	; (8004018 <menu+0x2bc8>)
 8003f70:	2101      	movs	r1, #1
 8003f72:	2002      	movs	r0, #2
 8003f74:	f003 ff74 	bl	8007e60 <lcd_print>
			}
			if(dilSecim == 1) {
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <menu+0x2bc0>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d104      	bne.n	8003f8a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003f80:	4a26      	ldr	r2, [pc, #152]	; (800401c <menu+0x2bcc>)
 8003f82:	2101      	movs	r1, #1
 8003f84:	2002      	movs	r0, #2
 8003f86:	f003 ff6b 	bl	8007e60 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <menu+0x2bf4>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	220a      	movs	r2, #10
 8003f90:	4924      	ldr	r1, [pc, #144]	; (8004024 <menu+0x2bd4>)
 8003f92:	4618      	mov	r0, r3
 8003f94:	f008 fab6 	bl	800c504 <itoa>
			lcd_print(2,14,snum);
 8003f98:	4a22      	ldr	r2, [pc, #136]	; (8004024 <menu+0x2bd4>)
 8003f9a:	210e      	movs	r1, #14
 8003f9c:	2002      	movs	r0, #2
 8003f9e:	f003 ff5f 	bl	8007e60 <lcd_print>
 8003fa2:	e066      	b.n	8004072 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <menu+0x2bf4>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	d923      	bls.n	8003ff4 <menu+0x2ba4>
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <menu+0x2bf4>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b63      	cmp	r3, #99	; 0x63
 8003fb2:	d81f      	bhi.n	8003ff4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <menu+0x2bc0>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fbc:	4a16      	ldr	r2, [pc, #88]	; (8004018 <menu+0x2bc8>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	f003 ff4d 	bl	8007e60 <lcd_print>
 8003fc6:	e008      	b.n	8003fda <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <menu+0x2bc0>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d104      	bne.n	8003fda <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003fd0:	4a12      	ldr	r2, [pc, #72]	; (800401c <menu+0x2bcc>)
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	2002      	movs	r0, #2
 8003fd6:	f003 ff43 	bl	8007e60 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fda:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <menu+0x2bf4>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	220a      	movs	r2, #10
 8003fe0:	4910      	ldr	r1, [pc, #64]	; (8004024 <menu+0x2bd4>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f008 fa8e 	bl	800c504 <itoa>
			lcd_print(2, 15, snum);
 8003fe8:	4a0e      	ldr	r2, [pc, #56]	; (8004024 <menu+0x2bd4>)
 8003fea:	210f      	movs	r1, #15
 8003fec:	2002      	movs	r0, #2
 8003fee:	f003 ff37 	bl	8007e60 <lcd_print>
 8003ff2:	e03e      	b.n	8004072 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <menu+0x2bf4>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b09      	cmp	r3, #9
 8003ffa:	d83a      	bhi.n	8004072 <menu+0x2c22>
			if(dilSecim == 0) {
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <menu+0x2bc0>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d121      	bne.n	8004048 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <menu+0x2bc8>)
 8004006:	2101      	movs	r1, #1
 8004008:	2002      	movs	r0, #2
 800400a:	f003 ff29 	bl	8007e60 <lcd_print>
 800400e:	e024      	b.n	800405a <menu+0x2c0a>
 8004010:	20000255 	.word	0x20000255
 8004014:	0800daec 	.word	0x0800daec
 8004018:	0800d6b4 	.word	0x0800d6b4
 800401c:	0800da28 	.word	0x0800da28
 8004020:	2000024b 	.word	0x2000024b
 8004024:	2000019c 	.word	0x2000019c
 8004028:	40010800 	.word	0x40010800
 800402c:	20000263 	.word	0x20000263
 8004030:	2000012c 	.word	0x2000012c
 8004034:	20000260 	.word	0x20000260
 8004038:	20000234 	.word	0x20000234
 800403c:	0800db00 	.word	0x0800db00
 8004040:	0800db14 	.word	0x0800db14
 8004044:	2000024c 	.word	0x2000024c
			} else if(dilSecim == 1) {
 8004048:	4b8f      	ldr	r3, [pc, #572]	; (8004288 <menu+0x2e38>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d104      	bne.n	800405a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004050:	4a8e      	ldr	r2, [pc, #568]	; (800428c <menu+0x2e3c>)
 8004052:	2101      	movs	r1, #1
 8004054:	2002      	movs	r0, #2
 8004056:	f003 ff03 	bl	8007e60 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800405a:	4b8d      	ldr	r3, [pc, #564]	; (8004290 <menu+0x2e40>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	220a      	movs	r2, #10
 8004060:	498c      	ldr	r1, [pc, #560]	; (8004294 <menu+0x2e44>)
 8004062:	4618      	mov	r0, r3
 8004064:	f008 fa4e 	bl	800c504 <itoa>
			lcd_print(2, 16, snum);
 8004068:	4a8a      	ldr	r2, [pc, #552]	; (8004294 <menu+0x2e44>)
 800406a:	2110      	movs	r1, #16
 800406c:	2002      	movs	r0, #2
 800406e:	f003 fef7 	bl	8007e60 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004072:	2102      	movs	r1, #2
 8004074:	4888      	ldr	r0, [pc, #544]	; (8004298 <menu+0x2e48>)
 8004076:	f005 fa19 	bl	80094ac <HAL_GPIO_ReadPin>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d115      	bne.n	80040ac <menu+0x2c5c>
 8004080:	4b86      	ldr	r3, [pc, #536]	; (800429c <menu+0x2e4c>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	f083 0301 	eor.w	r3, r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00e      	beq.n	80040ac <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 800408e:	4b80      	ldr	r3, [pc, #512]	; (8004290 <menu+0x2e40>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4b7e      	ldr	r3, [pc, #504]	; (8004290 <menu+0x2e40>)
 8004098:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800409a:	4b7d      	ldr	r3, [pc, #500]	; (8004290 <menu+0x2e40>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2bb4      	cmp	r3, #180	; 0xb4
 80040a0:	d902      	bls.n	80040a8 <menu+0x2c58>
				makineCalismaTmr = 0;
 80040a2:	4b7b      	ldr	r3, [pc, #492]	; (8004290 <menu+0x2e40>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040a8:	f000 fd9e 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040ac:	2104      	movs	r1, #4
 80040ae:	487a      	ldr	r0, [pc, #488]	; (8004298 <menu+0x2e48>)
 80040b0:	f005 f9fc 	bl	80094ac <HAL_GPIO_ReadPin>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d115      	bne.n	80040e6 <menu+0x2c96>
 80040ba:	4b78      	ldr	r3, [pc, #480]	; (800429c <menu+0x2e4c>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	f083 0301 	eor.w	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00e      	beq.n	80040e6 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80040c8:	4b71      	ldr	r3, [pc, #452]	; (8004290 <menu+0x2e40>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b6f      	ldr	r3, [pc, #444]	; (8004290 <menu+0x2e40>)
 80040d2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80040d4:	4b6e      	ldr	r3, [pc, #440]	; (8004290 <menu+0x2e40>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2bb5      	cmp	r3, #181	; 0xb5
 80040da:	d902      	bls.n	80040e2 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80040dc:	4b6c      	ldr	r3, [pc, #432]	; (8004290 <menu+0x2e40>)
 80040de:	22b4      	movs	r2, #180	; 0xb4
 80040e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040e2:	f000 fd81 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e6:	2108      	movs	r1, #8
 80040e8:	486b      	ldr	r0, [pc, #428]	; (8004298 <menu+0x2e48>)
 80040ea:	f005 f9df 	bl	80094ac <HAL_GPIO_ReadPin>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10d      	bne.n	8004110 <menu+0x2cc0>
 80040f4:	4b69      	ldr	r3, [pc, #420]	; (800429c <menu+0x2e4c>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	f083 0301 	eor.w	r3, r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d006      	beq.n	8004110 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004102:	4b63      	ldr	r3, [pc, #396]	; (8004290 <menu+0x2e40>)
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	4b66      	ldr	r3, [pc, #408]	; (80042a0 <menu+0x2e50>)
 8004108:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800410a:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <menu+0x2e54>)
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004110:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <menu+0x2e58>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b1b      	cmp	r3, #27
 8004116:	f040 8083 	bne.w	8004220 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800411a:	4a64      	ldr	r2, [pc, #400]	; (80042ac <menu+0x2e5c>)
 800411c:	2101      	movs	r1, #1
 800411e:	2001      	movs	r0, #1
 8004120:	f003 fe9e 	bl	8007e60 <lcd_print>

		if(buzzer == 0) {
 8004124:	4b62      	ldr	r3, [pc, #392]	; (80042b0 <menu+0x2e60>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d113      	bne.n	8004154 <menu+0x2d04>
			if(dilSecim == 0) {
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <menu+0x2e38>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004134:	4a5f      	ldr	r2, [pc, #380]	; (80042b4 <menu+0x2e64>)
 8004136:	2101      	movs	r1, #1
 8004138:	2002      	movs	r0, #2
 800413a:	f003 fe91 	bl	8007e60 <lcd_print>
 800413e:	e020      	b.n	8004182 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004140:	4b51      	ldr	r3, [pc, #324]	; (8004288 <menu+0x2e38>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d11c      	bne.n	8004182 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004148:	4a5b      	ldr	r2, [pc, #364]	; (80042b8 <menu+0x2e68>)
 800414a:	2101      	movs	r1, #1
 800414c:	2002      	movs	r0, #2
 800414e:	f003 fe87 	bl	8007e60 <lcd_print>
 8004152:	e016      	b.n	8004182 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004154:	4b56      	ldr	r3, [pc, #344]	; (80042b0 <menu+0x2e60>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d112      	bne.n	8004182 <menu+0x2d32>
			if(dilSecim == 0) {
 800415c:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <menu+0x2e38>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004164:	4a55      	ldr	r2, [pc, #340]	; (80042bc <menu+0x2e6c>)
 8004166:	2101      	movs	r1, #1
 8004168:	2002      	movs	r0, #2
 800416a:	f003 fe79 	bl	8007e60 <lcd_print>
 800416e:	e008      	b.n	8004182 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004170:	4b45      	ldr	r3, [pc, #276]	; (8004288 <menu+0x2e38>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d104      	bne.n	8004182 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004178:	4a51      	ldr	r2, [pc, #324]	; (80042c0 <menu+0x2e70>)
 800417a:	2101      	movs	r1, #1
 800417c:	2002      	movs	r0, #2
 800417e:	f003 fe6f 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004182:	2102      	movs	r1, #2
 8004184:	4844      	ldr	r0, [pc, #272]	; (8004298 <menu+0x2e48>)
 8004186:	f005 f991 	bl	80094ac <HAL_GPIO_ReadPin>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d115      	bne.n	80041bc <menu+0x2d6c>
 8004190:	4b42      	ldr	r3, [pc, #264]	; (800429c <menu+0x2e4c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f083 0301 	eor.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <menu+0x2d6c>
			buzzer = buzzer + 1;
 800419e:	4b44      	ldr	r3, [pc, #272]	; (80042b0 <menu+0x2e60>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4b42      	ldr	r3, [pc, #264]	; (80042b0 <menu+0x2e60>)
 80041a8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80041aa:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <menu+0x2e60>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d902      	bls.n	80041b8 <menu+0x2d68>
				buzzer = 0;
 80041b2:	4b3f      	ldr	r3, [pc, #252]	; (80042b0 <menu+0x2e60>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041b8:	f000 fd16 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041bc:	2104      	movs	r1, #4
 80041be:	4836      	ldr	r0, [pc, #216]	; (8004298 <menu+0x2e48>)
 80041c0:	f005 f974 	bl	80094ac <HAL_GPIO_ReadPin>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d115      	bne.n	80041f6 <menu+0x2da6>
 80041ca:	4b34      	ldr	r3, [pc, #208]	; (800429c <menu+0x2e4c>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	f083 0301 	eor.w	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00e      	beq.n	80041f6 <menu+0x2da6>
			buzzer = buzzer - 1;
 80041d8:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <menu+0x2e60>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <menu+0x2e60>)
 80041e2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80041e4:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <menu+0x2e60>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <menu+0x2da2>
		   		buzzer = 1;
 80041ec:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <menu+0x2e60>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041f2:	f000 fcf9 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041f6:	2108      	movs	r1, #8
 80041f8:	4827      	ldr	r0, [pc, #156]	; (8004298 <menu+0x2e48>)
 80041fa:	f005 f957 	bl	80094ac <HAL_GPIO_ReadPin>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10d      	bne.n	8004220 <menu+0x2dd0>
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <menu+0x2e4c>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	f083 0301 	eor.w	r3, r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004212:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <menu+0x2e60>)
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <menu+0x2e50>)
 8004218:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <menu+0x2e54>)
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <menu+0x2e58>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b1c      	cmp	r3, #28
 8004226:	f040 80ab 	bne.w	8004380 <menu+0x2f30>
		calismaSayModu = 0;
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <menu+0x2e74>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004230:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <menu+0x2e78>)
 8004232:	2101      	movs	r1, #1
 8004234:	2001      	movs	r0, #1
 8004236:	f003 fe13 	bl	8007e60 <lcd_print>

		if(demoMode == 0) {
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <menu+0x2e7c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d113      	bne.n	800426a <menu+0x2e1a>
			if(dilSecim == 0) {
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <menu+0x2e38>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <menu+0x2e64>)
 800424c:	2101      	movs	r1, #1
 800424e:	2002      	movs	r0, #2
 8004250:	f003 fe06 	bl	8007e60 <lcd_print>
 8004254:	e045      	b.n	80042e2 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <menu+0x2e38>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d141      	bne.n	80042e2 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800425e:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <menu+0x2e68>)
 8004260:	2101      	movs	r1, #1
 8004262:	2002      	movs	r0, #2
 8004264:	f003 fdfc 	bl	8007e60 <lcd_print>
 8004268:	e03b      	b.n	80042e2 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <menu+0x2e7c>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d137      	bne.n	80042e2 <menu+0x2e92>
			if(dilSecim == 0){
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <menu+0x2e38>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d12a      	bne.n	80042d0 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800427a:	4a10      	ldr	r2, [pc, #64]	; (80042bc <menu+0x2e6c>)
 800427c:	2101      	movs	r1, #1
 800427e:	2002      	movs	r0, #2
 8004280:	f003 fdee 	bl	8007e60 <lcd_print>
 8004284:	e02d      	b.n	80042e2 <menu+0x2e92>
 8004286:	bf00      	nop
 8004288:	20000255 	.word	0x20000255
 800428c:	0800da28 	.word	0x0800da28
 8004290:	2000024c 	.word	0x2000024c
 8004294:	2000019c 	.word	0x2000019c
 8004298:	40010800 	.word	0x40010800
 800429c:	20000263 	.word	0x20000263
 80042a0:	2000012c 	.word	0x2000012c
 80042a4:	20000260 	.word	0x20000260
 80042a8:	20000234 	.word	0x20000234
 80042ac:	0800db28 	.word	0x0800db28
 80042b0:	20000250 	.word	0x20000250
 80042b4:	0800d450 	.word	0x0800d450
 80042b8:	0800d464 	.word	0x0800d464
 80042bc:	0800d4b0 	.word	0x0800d4b0
 80042c0:	0800d4c4 	.word	0x0800d4c4
 80042c4:	20000254 	.word	0x20000254
 80042c8:	0800db3c 	.word	0x0800db3c
 80042cc:	20000252 	.word	0x20000252
			} else if(dilSecim == 1) {
 80042d0:	4b71      	ldr	r3, [pc, #452]	; (8004498 <menu+0x3048>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d104      	bne.n	80042e2 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80042d8:	4a70      	ldr	r2, [pc, #448]	; (800449c <menu+0x304c>)
 80042da:	2101      	movs	r1, #1
 80042dc:	2002      	movs	r0, #2
 80042de:	f003 fdbf 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042e2:	2102      	movs	r1, #2
 80042e4:	486e      	ldr	r0, [pc, #440]	; (80044a0 <menu+0x3050>)
 80042e6:	f005 f8e1 	bl	80094ac <HAL_GPIO_ReadPin>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d115      	bne.n	800431c <menu+0x2ecc>
 80042f0:	4b6c      	ldr	r3, [pc, #432]	; (80044a4 <menu+0x3054>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f083 0301 	eor.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00e      	beq.n	800431c <menu+0x2ecc>
			demoMode = demoMode + 1;
 80042fe:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <menu+0x3058>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <menu+0x3058>)
 8004308:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800430a:	4b67      	ldr	r3, [pc, #412]	; (80044a8 <menu+0x3058>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d902      	bls.n	8004318 <menu+0x2ec8>
				demoMode = 0;
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <menu+0x3058>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004318:	f000 fc66 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800431c:	2104      	movs	r1, #4
 800431e:	4860      	ldr	r0, [pc, #384]	; (80044a0 <menu+0x3050>)
 8004320:	f005 f8c4 	bl	80094ac <HAL_GPIO_ReadPin>
 8004324:	4603      	mov	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d115      	bne.n	8004356 <menu+0x2f06>
 800432a:	4b5e      	ldr	r3, [pc, #376]	; (80044a4 <menu+0x3054>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	f083 0301 	eor.w	r3, r3, #1
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004338:	4b5b      	ldr	r3, [pc, #364]	; (80044a8 <menu+0x3058>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <menu+0x3058>)
 8004342:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004344:	4b58      	ldr	r3, [pc, #352]	; (80044a8 <menu+0x3058>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <menu+0x2f02>
		   		demoMode = 1;
 800434c:	4b56      	ldr	r3, [pc, #344]	; (80044a8 <menu+0x3058>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004352:	f000 fc49 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004356:	2108      	movs	r1, #8
 8004358:	4851      	ldr	r0, [pc, #324]	; (80044a0 <menu+0x3050>)
 800435a:	f005 f8a7 	bl	80094ac <HAL_GPIO_ReadPin>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10d      	bne.n	8004380 <menu+0x2f30>
 8004364:	4b4f      	ldr	r3, [pc, #316]	; (80044a4 <menu+0x3054>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f083 0301 	eor.w	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004372:	4b4d      	ldr	r3, [pc, #308]	; (80044a8 <menu+0x3058>)
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	4b4d      	ldr	r3, [pc, #308]	; (80044ac <menu+0x305c>)
 8004378:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800437a:	4b4d      	ldr	r3, [pc, #308]	; (80044b0 <menu+0x3060>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004380:	4b4c      	ldr	r3, [pc, #304]	; (80044b4 <menu+0x3064>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b1d      	cmp	r3, #29
 8004386:	f040 8132 	bne.w	80045ee <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800438a:	4b4b      	ldr	r3, [pc, #300]	; (80044b8 <menu+0x3068>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d113      	bne.n	80043ba <menu+0x2f6a>
 8004392:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <menu+0x306c>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10f      	bne.n	80043ba <menu+0x2f6a>
 800439a:	4b49      	ldr	r3, [pc, #292]	; (80044c0 <menu+0x3070>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <menu+0x2f6a>
 80043a2:	4b48      	ldr	r3, [pc, #288]	; (80044c4 <menu+0x3074>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d107      	bne.n	80043ba <menu+0x2f6a>
 80043aa:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <menu+0x3078>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <menu+0x2f6a>
			calismaSayisiYar = 0;
 80043b2:	4b46      	ldr	r3, [pc, #280]	; (80044cc <menu+0x307c>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e002      	b.n	80043c0 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80043ba:	4b44      	ldr	r3, [pc, #272]	; (80044cc <menu+0x307c>)
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80043c0:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <menu+0x3080>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d154      	bne.n	8004472 <menu+0x3022>
			if(dilSecim == 0) {
 80043c8:	4b33      	ldr	r3, [pc, #204]	; (8004498 <menu+0x3048>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043d0:	4a40      	ldr	r2, [pc, #256]	; (80044d4 <menu+0x3084>)
 80043d2:	2101      	movs	r1, #1
 80043d4:	2001      	movs	r0, #1
 80043d6:	f003 fd43 	bl	8007e60 <lcd_print>
 80043da:	e008      	b.n	80043ee <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80043dc:	4b2e      	ldr	r3, [pc, #184]	; (8004498 <menu+0x3048>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d104      	bne.n	80043ee <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80043e4:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <menu+0x3088>)
 80043e6:	2101      	movs	r1, #1
 80043e8:	2001      	movs	r0, #1
 80043ea:	f003 fd39 	bl	8007e60 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80043ee:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <menu+0x3078>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	220a      	movs	r2, #10
 80043f4:	4939      	ldr	r1, [pc, #228]	; (80044dc <menu+0x308c>)
 80043f6:	4618      	mov	r0, r3
 80043f8:	f008 f884 	bl	800c504 <itoa>
			lcd_print(2, 12, snum);
 80043fc:	4a37      	ldr	r2, [pc, #220]	; (80044dc <menu+0x308c>)
 80043fe:	210c      	movs	r1, #12
 8004400:	2002      	movs	r0, #2
 8004402:	f003 fd2d 	bl	8007e60 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004406:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <menu+0x3074>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	220a      	movs	r2, #10
 800440c:	4933      	ldr	r1, [pc, #204]	; (80044dc <menu+0x308c>)
 800440e:	4618      	mov	r0, r3
 8004410:	f008 f878 	bl	800c504 <itoa>
			lcd_print(2, 13, snum);
 8004414:	4a31      	ldr	r2, [pc, #196]	; (80044dc <menu+0x308c>)
 8004416:	210d      	movs	r1, #13
 8004418:	2002      	movs	r0, #2
 800441a:	f003 fd21 	bl	8007e60 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <menu+0x3070>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	220a      	movs	r2, #10
 8004424:	492d      	ldr	r1, [pc, #180]	; (80044dc <menu+0x308c>)
 8004426:	4618      	mov	r0, r3
 8004428:	f008 f86c 	bl	800c504 <itoa>
			lcd_print(2, 14, snum);
 800442c:	4a2b      	ldr	r2, [pc, #172]	; (80044dc <menu+0x308c>)
 800442e:	210e      	movs	r1, #14
 8004430:	2002      	movs	r0, #2
 8004432:	f003 fd15 	bl	8007e60 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004436:	4b21      	ldr	r3, [pc, #132]	; (80044bc <menu+0x306c>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	220a      	movs	r2, #10
 800443c:	4927      	ldr	r1, [pc, #156]	; (80044dc <menu+0x308c>)
 800443e:	4618      	mov	r0, r3
 8004440:	f008 f860 	bl	800c504 <itoa>
			lcd_print(2, 15, snum);
 8004444:	4a25      	ldr	r2, [pc, #148]	; (80044dc <menu+0x308c>)
 8004446:	210f      	movs	r1, #15
 8004448:	2002      	movs	r0, #2
 800444a:	f003 fd09 	bl	8007e60 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <menu+0x3068>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	220a      	movs	r2, #10
 8004454:	4921      	ldr	r1, [pc, #132]	; (80044dc <menu+0x308c>)
 8004456:	4618      	mov	r0, r3
 8004458:	f008 f854 	bl	800c504 <itoa>
			lcd_print(2, 16, snum);
 800445c:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <menu+0x308c>)
 800445e:	2110      	movs	r1, #16
 8004460:	2002      	movs	r0, #2
 8004462:	f003 fcfd 	bl	8007e60 <lcd_print>

			lcd_print(2, 1, "           ");
 8004466:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <menu+0x3090>)
 8004468:	2101      	movs	r1, #1
 800446a:	2002      	movs	r0, #2
 800446c:	f003 fcf8 	bl	8007e60 <lcd_print>
 8004470:	e048      	b.n	8004504 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004472:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <menu+0x3080>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d144      	bne.n	8004504 <menu+0x30b4>
			if(dilSecim == 0) {
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <menu+0x3048>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d132      	bne.n	80044e8 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004482:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <menu+0x3084>)
 8004484:	2101      	movs	r1, #1
 8004486:	2001      	movs	r0, #1
 8004488:	f003 fcea 	bl	8007e60 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <menu+0x3094>)
 800448e:	2101      	movs	r1, #1
 8004490:	2002      	movs	r0, #2
 8004492:	f003 fce5 	bl	8007e60 <lcd_print>
 8004496:	e035      	b.n	8004504 <menu+0x30b4>
 8004498:	20000255 	.word	0x20000255
 800449c:	0800d4c4 	.word	0x0800d4c4
 80044a0:	40010800 	.word	0x40010800
 80044a4:	20000263 	.word	0x20000263
 80044a8:	20000252 	.word	0x20000252
 80044ac:	2000012c 	.word	0x2000012c
 80044b0:	20000260 	.word	0x20000260
 80044b4:	20000234 	.word	0x20000234
 80044b8:	20000231 	.word	0x20000231
 80044bc:	20000232 	.word	0x20000232
 80044c0:	20000000 	.word	0x20000000
 80044c4:	20000001 	.word	0x20000001
 80044c8:	20000233 	.word	0x20000233
 80044cc:	20000275 	.word	0x20000275
 80044d0:	20000254 	.word	0x20000254
 80044d4:	0800db4c 	.word	0x0800db4c
 80044d8:	0800db60 	.word	0x0800db60
 80044dc:	2000019c 	.word	0x2000019c
 80044e0:	0800db74 	.word	0x0800db74
 80044e4:	0800db80 	.word	0x0800db80
			} else if(dilSecim == 1) {
 80044e8:	4b94      	ldr	r3, [pc, #592]	; (800473c <menu+0x32ec>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d109      	bne.n	8004504 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80044f0:	4a93      	ldr	r2, [pc, #588]	; (8004740 <menu+0x32f0>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	2001      	movs	r0, #1
 80044f6:	f003 fcb3 	bl	8007e60 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80044fa:	4a92      	ldr	r2, [pc, #584]	; (8004744 <menu+0x32f4>)
 80044fc:	2101      	movs	r1, #1
 80044fe:	2002      	movs	r0, #2
 8004500:	f003 fcae 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004504:	2102      	movs	r1, #2
 8004506:	4890      	ldr	r0, [pc, #576]	; (8004748 <menu+0x32f8>)
 8004508:	f004 ffd0 	bl	80094ac <HAL_GPIO_ReadPin>
 800450c:	4603      	mov	r3, r0
 800450e:	2b01      	cmp	r3, #1
 8004510:	d119      	bne.n	8004546 <menu+0x30f6>
 8004512:	4b8e      	ldr	r3, [pc, #568]	; (800474c <menu+0x32fc>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	f083 0301 	eor.w	r3, r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <menu+0x30f6>
 8004520:	4b8b      	ldr	r3, [pc, #556]	; (8004750 <menu+0x3300>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00e      	beq.n	8004546 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004528:	4b8a      	ldr	r3, [pc, #552]	; (8004754 <menu+0x3304>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	4b88      	ldr	r3, [pc, #544]	; (8004754 <menu+0x3304>)
 8004532:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004534:	4b87      	ldr	r3, [pc, #540]	; (8004754 <menu+0x3304>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d902      	bls.n	8004542 <menu+0x30f2>
				calismaSayModu = 0;
 800453c:	4b85      	ldr	r3, [pc, #532]	; (8004754 <menu+0x3304>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004542:	f000 fb51 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004546:	2104      	movs	r1, #4
 8004548:	487f      	ldr	r0, [pc, #508]	; (8004748 <menu+0x32f8>)
 800454a:	f004 ffaf 	bl	80094ac <HAL_GPIO_ReadPin>
 800454e:	4603      	mov	r3, r0
 8004550:	2b01      	cmp	r3, #1
 8004552:	d119      	bne.n	8004588 <menu+0x3138>
 8004554:	4b7d      	ldr	r3, [pc, #500]	; (800474c <menu+0x32fc>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	f083 0301 	eor.w	r3, r3, #1
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d012      	beq.n	8004588 <menu+0x3138>
 8004562:	4b7b      	ldr	r3, [pc, #492]	; (8004750 <menu+0x3300>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800456a:	4b7a      	ldr	r3, [pc, #488]	; (8004754 <menu+0x3304>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	3b01      	subs	r3, #1
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4b78      	ldr	r3, [pc, #480]	; (8004754 <menu+0x3304>)
 8004574:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004576:	4b77      	ldr	r3, [pc, #476]	; (8004754 <menu+0x3304>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <menu+0x3134>
		   		calismaSayModu = 1;
 800457e:	4b75      	ldr	r3, [pc, #468]	; (8004754 <menu+0x3304>)
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004584:	f000 fb30 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004588:	2108      	movs	r1, #8
 800458a:	486f      	ldr	r0, [pc, #444]	; (8004748 <menu+0x32f8>)
 800458c:	f004 ff8e 	bl	80094ac <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d12b      	bne.n	80045ee <menu+0x319e>
 8004596:	4b6d      	ldr	r3, [pc, #436]	; (800474c <menu+0x32fc>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f083 0301 	eor.w	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d024      	beq.n	80045ee <menu+0x319e>
			eepromData[32] = 0;
 80045a4:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <menu+0x3308>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80045ac:	4b6a      	ldr	r3, [pc, #424]	; (8004758 <menu+0x3308>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80045b2:	4b69      	ldr	r3, [pc, #420]	; (8004758 <menu+0x3308>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80045b8:	4b67      	ldr	r3, [pc, #412]	; (8004758 <menu+0x3308>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80045be:	4b66      	ldr	r3, [pc, #408]	; (8004758 <menu+0x3308>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80045c4:	4b65      	ldr	r3, [pc, #404]	; (800475c <menu+0x330c>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80045ca:	4b65      	ldr	r3, [pc, #404]	; (8004760 <menu+0x3310>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80045d0:	4b64      	ldr	r3, [pc, #400]	; (8004764 <menu+0x3314>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80045d6:	4b64      	ldr	r3, [pc, #400]	; (8004768 <menu+0x3318>)
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80045dc:	4b63      	ldr	r3, [pc, #396]	; (800476c <menu+0x331c>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80045e2:	4b5c      	ldr	r3, [pc, #368]	; (8004754 <menu+0x3304>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80045e8:	4b61      	ldr	r3, [pc, #388]	; (8004770 <menu+0x3320>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80045ee:	4b61      	ldr	r3, [pc, #388]	; (8004774 <menu+0x3324>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b1e      	cmp	r3, #30
 80045f4:	d16f      	bne.n	80046d6 <menu+0x3286>
		calismaSayModu = 0;
 80045f6:	4b57      	ldr	r3, [pc, #348]	; (8004754 <menu+0x3304>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80045fc:	4b4f      	ldr	r3, [pc, #316]	; (800473c <menu+0x32ec>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004604:	4a5c      	ldr	r2, [pc, #368]	; (8004778 <menu+0x3328>)
 8004606:	2101      	movs	r1, #1
 8004608:	2001      	movs	r0, #1
 800460a:	f003 fc29 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800460e:	4a5b      	ldr	r2, [pc, #364]	; (800477c <menu+0x332c>)
 8004610:	2101      	movs	r1, #1
 8004612:	2002      	movs	r0, #2
 8004614:	f003 fc24 	bl	8007e60 <lcd_print>
 8004618:	e00d      	b.n	8004636 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800461a:	4b48      	ldr	r3, [pc, #288]	; (800473c <menu+0x32ec>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d109      	bne.n	8004636 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004622:	4a57      	ldr	r2, [pc, #348]	; (8004780 <menu+0x3330>)
 8004624:	2101      	movs	r1, #1
 8004626:	2001      	movs	r0, #1
 8004628:	f003 fc1a 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800462c:	4a55      	ldr	r2, [pc, #340]	; (8004784 <menu+0x3334>)
 800462e:	2101      	movs	r1, #1
 8004630:	2002      	movs	r0, #2
 8004632:	f003 fc15 	bl	8007e60 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004636:	2102      	movs	r1, #2
 8004638:	4843      	ldr	r0, [pc, #268]	; (8004748 <menu+0x32f8>)
 800463a:	f004 ff37 	bl	80094ac <HAL_GPIO_ReadPin>
 800463e:	4603      	mov	r3, r0
 8004640:	2b01      	cmp	r3, #1
 8004642:	d115      	bne.n	8004670 <menu+0x3220>
 8004644:	4b41      	ldr	r3, [pc, #260]	; (800474c <menu+0x32fc>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f083 0301 	eor.w	r3, r3, #1
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00e      	beq.n	8004670 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004652:	4b3a      	ldr	r3, [pc, #232]	; (800473c <menu+0x32ec>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4b38      	ldr	r3, [pc, #224]	; (800473c <menu+0x32ec>)
 800465c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800465e:	4b37      	ldr	r3, [pc, #220]	; (800473c <menu+0x32ec>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d902      	bls.n	800466c <menu+0x321c>
				dilSecim = 0;
 8004666:	4b35      	ldr	r3, [pc, #212]	; (800473c <menu+0x32ec>)
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800466c:	f000 fabc 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004670:	2104      	movs	r1, #4
 8004672:	4835      	ldr	r0, [pc, #212]	; (8004748 <menu+0x32f8>)
 8004674:	f004 ff1a 	bl	80094ac <HAL_GPIO_ReadPin>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d115      	bne.n	80046aa <menu+0x325a>
 800467e:	4b33      	ldr	r3, [pc, #204]	; (800474c <menu+0x32fc>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	f083 0301 	eor.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <menu+0x325a>
			dilSecim = dilSecim - 1;
 800468c:	4b2b      	ldr	r3, [pc, #172]	; (800473c <menu+0x32ec>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	3b01      	subs	r3, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <menu+0x32ec>)
 8004696:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <menu+0x32ec>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <menu+0x3256>
		   		dilSecim = 1;
 80046a0:	4b26      	ldr	r3, [pc, #152]	; (800473c <menu+0x32ec>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046a6:	f000 fa9f 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046aa:	2108      	movs	r1, #8
 80046ac:	4826      	ldr	r0, [pc, #152]	; (8004748 <menu+0x32f8>)
 80046ae:	f004 fefd 	bl	80094ac <HAL_GPIO_ReadPin>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d10e      	bne.n	80046d6 <menu+0x3286>
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <menu+0x32fc>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f083 0301 	eor.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <menu+0x3286>
			eepromData[33] = dilSecim;
 80046c6:	4b1d      	ldr	r3, [pc, #116]	; (800473c <menu+0x32ec>)
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	4b23      	ldr	r3, [pc, #140]	; (8004758 <menu+0x3308>)
 80046cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80046d0:	4b27      	ldr	r3, [pc, #156]	; (8004770 <menu+0x3320>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80046d6:	4b27      	ldr	r3, [pc, #156]	; (8004774 <menu+0x3324>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b1f      	cmp	r3, #31
 80046dc:	f040 80b7 	bne.w	800484e <menu+0x33fe>
		calismaSayModu = 0;
 80046e0:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <menu+0x3304>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80046e6:	4a28      	ldr	r2, [pc, #160]	; (8004788 <menu+0x3338>)
 80046e8:	2101      	movs	r1, #1
 80046ea:	2001      	movs	r0, #1
 80046ec:	f003 fbb8 	bl	8007e60 <lcd_print>

		if(iotMode == 0) {
 80046f0:	4b26      	ldr	r3, [pc, #152]	; (800478c <menu+0x333c>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d113      	bne.n	8004720 <menu+0x32d0>
			if(dilSecim == 0) {
 80046f8:	4b10      	ldr	r3, [pc, #64]	; (800473c <menu+0x32ec>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d105      	bne.n	800470c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004700:	4a23      	ldr	r2, [pc, #140]	; (8004790 <menu+0x3340>)
 8004702:	2101      	movs	r1, #1
 8004704:	2002      	movs	r0, #2
 8004706:	f003 fbab 	bl	8007e60 <lcd_print>
 800470a:	e050      	b.n	80047ae <menu+0x335e>
			} else if(dilSecim == 1) {
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <menu+0x32ec>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d14c      	bne.n	80047ae <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004714:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <menu+0x3344>)
 8004716:	2101      	movs	r1, #1
 8004718:	2002      	movs	r0, #2
 800471a:	f003 fba1 	bl	8007e60 <lcd_print>
 800471e:	e046      	b.n	80047ae <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <menu+0x333c>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d142      	bne.n	80047ae <menu+0x335e>
			if(dilSecim == 0) {
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <menu+0x32ec>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d135      	bne.n	800479c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <menu+0x3348>)
 8004732:	2101      	movs	r1, #1
 8004734:	2002      	movs	r0, #2
 8004736:	f003 fb93 	bl	8007e60 <lcd_print>
 800473a:	e038      	b.n	80047ae <menu+0x335e>
 800473c:	20000255 	.word	0x20000255
 8004740:	0800db60 	.word	0x0800db60
 8004744:	0800db94 	.word	0x0800db94
 8004748:	40010800 	.word	0x40010800
 800474c:	20000263 	.word	0x20000263
 8004750:	20000275 	.word	0x20000275
 8004754:	20000254 	.word	0x20000254
 8004758:	2000012c 	.word	0x2000012c
 800475c:	20000233 	.word	0x20000233
 8004760:	20000001 	.word	0x20000001
 8004764:	20000000 	.word	0x20000000
 8004768:	20000232 	.word	0x20000232
 800476c:	20000231 	.word	0x20000231
 8004770:	20000260 	.word	0x20000260
 8004774:	20000234 	.word	0x20000234
 8004778:	0800dba8 	.word	0x0800dba8
 800477c:	0800dbbc 	.word	0x0800dbbc
 8004780:	0800dbd0 	.word	0x0800dbd0
 8004784:	0800dbe4 	.word	0x0800dbe4
 8004788:	0800dbf8 	.word	0x0800dbf8
 800478c:	20000253 	.word	0x20000253
 8004790:	0800d450 	.word	0x0800d450
 8004794:	0800d464 	.word	0x0800d464
 8004798:	0800d4b0 	.word	0x0800d4b0
			} else if(dilSecim == 1) {
 800479c:	4bab      	ldr	r3, [pc, #684]	; (8004a4c <menu+0x35fc>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d104      	bne.n	80047ae <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80047a4:	4aaa      	ldr	r2, [pc, #680]	; (8004a50 <menu+0x3600>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	2002      	movs	r0, #2
 80047aa:	f003 fb59 	bl	8007e60 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ae:	2102      	movs	r1, #2
 80047b0:	48a8      	ldr	r0, [pc, #672]	; (8004a54 <menu+0x3604>)
 80047b2:	f004 fe7b 	bl	80094ac <HAL_GPIO_ReadPin>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d115      	bne.n	80047e8 <menu+0x3398>
 80047bc:	4ba6      	ldr	r3, [pc, #664]	; (8004a58 <menu+0x3608>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f083 0301 	eor.w	r3, r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <menu+0x3398>
			iotMode = iotMode + 1;
 80047ca:	4ba4      	ldr	r3, [pc, #656]	; (8004a5c <menu+0x360c>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4ba2      	ldr	r3, [pc, #648]	; (8004a5c <menu+0x360c>)
 80047d4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80047d6:	4ba1      	ldr	r3, [pc, #644]	; (8004a5c <menu+0x360c>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d902      	bls.n	80047e4 <menu+0x3394>
				iotMode = 0;
 80047de:	4b9f      	ldr	r3, [pc, #636]	; (8004a5c <menu+0x360c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047e4:	f000 fa00 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047e8:	2104      	movs	r1, #4
 80047ea:	489a      	ldr	r0, [pc, #616]	; (8004a54 <menu+0x3604>)
 80047ec:	f004 fe5e 	bl	80094ac <HAL_GPIO_ReadPin>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d115      	bne.n	8004822 <menu+0x33d2>
 80047f6:	4b98      	ldr	r3, [pc, #608]	; (8004a58 <menu+0x3608>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f083 0301 	eor.w	r3, r3, #1
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004804:	4b95      	ldr	r3, [pc, #596]	; (8004a5c <menu+0x360c>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	3b01      	subs	r3, #1
 800480a:	b2da      	uxtb	r2, r3
 800480c:	4b93      	ldr	r3, [pc, #588]	; (8004a5c <menu+0x360c>)
 800480e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004810:	4b92      	ldr	r3, [pc, #584]	; (8004a5c <menu+0x360c>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <menu+0x33ce>
		   		iotMode = 1;
 8004818:	4b90      	ldr	r3, [pc, #576]	; (8004a5c <menu+0x360c>)
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800481e:	f000 f9e3 	bl	8004be8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004822:	2108      	movs	r1, #8
 8004824:	488b      	ldr	r0, [pc, #556]	; (8004a54 <menu+0x3604>)
 8004826:	f004 fe41 	bl	80094ac <HAL_GPIO_ReadPin>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10e      	bne.n	800484e <menu+0x33fe>
 8004830:	4b89      	ldr	r3, [pc, #548]	; (8004a58 <menu+0x3608>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <menu+0x33fe>
			eepromData[48] = iotMode;
 800483e:	4b87      	ldr	r3, [pc, #540]	; (8004a5c <menu+0x360c>)
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	4b87      	ldr	r3, [pc, #540]	; (8004a60 <menu+0x3610>)
 8004844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004848:	4b86      	ldr	r3, [pc, #536]	; (8004a64 <menu+0x3614>)
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800484e:	4b86      	ldr	r3, [pc, #536]	; (8004a68 <menu+0x3618>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b20      	cmp	r3, #32
 8004854:	d13f      	bne.n	80048d6 <menu+0x3486>
		calismaSayModu = 0;
 8004856:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <menu+0x361c>)
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800485c:	4b7b      	ldr	r3, [pc, #492]	; (8004a4c <menu+0x35fc>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004864:	4a82      	ldr	r2, [pc, #520]	; (8004a70 <menu+0x3620>)
 8004866:	2101      	movs	r1, #1
 8004868:	2001      	movs	r0, #1
 800486a:	f003 faf9 	bl	8007e60 <lcd_print>
 800486e:	e004      	b.n	800487a <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004870:	4a80      	ldr	r2, [pc, #512]	; (8004a74 <menu+0x3624>)
 8004872:	2101      	movs	r1, #1
 8004874:	2001      	movs	r0, #1
 8004876:	f003 faf3 	bl	8007e60 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 800487a:	4a7f      	ldr	r2, [pc, #508]	; (8004a78 <menu+0x3628>)
 800487c:	2101      	movs	r1, #1
 800487e:	2002      	movs	r0, #2
 8004880:	f003 faee 	bl	8007e60 <lcd_print>
		lcd_print(2, 13, "    ");
 8004884:	4a7d      	ldr	r2, [pc, #500]	; (8004a7c <menu+0x362c>)
 8004886:	210d      	movs	r1, #13
 8004888:	2002      	movs	r0, #2
 800488a:	f003 fae9 	bl	8007e60 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800488e:	2102      	movs	r1, #2
 8004890:	4870      	ldr	r0, [pc, #448]	; (8004a54 <menu+0x3604>)
 8004892:	f004 fe0b 	bl	80094ac <HAL_GPIO_ReadPin>
 8004896:	4603      	mov	r3, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	d11c      	bne.n	80048d6 <menu+0x3486>
 800489c:	2104      	movs	r1, #4
 800489e:	486d      	ldr	r0, [pc, #436]	; (8004a54 <menu+0x3604>)
 80048a0:	f004 fe04 	bl	80094ac <HAL_GPIO_ReadPin>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d115      	bne.n	80048d6 <menu+0x3486>
 80048aa:	4b6b      	ldr	r3, [pc, #428]	; (8004a58 <menu+0x3608>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	f083 0301 	eor.w	r3, r3, #1
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00e      	beq.n	80048d6 <menu+0x3486>
			takeMachineID();
 80048b8:	f002 faa2 	bl	8006e00 <takeMachineID>

			HAL_Delay(250);
 80048bc:	20fa      	movs	r0, #250	; 0xfa
 80048be:	f004 f825 	bl	800890c <HAL_Delay>
			lcd_print(2, 1, machineID);
 80048c2:	4a6d      	ldr	r2, [pc, #436]	; (8004a78 <menu+0x3628>)
 80048c4:	2101      	movs	r1, #1
 80048c6:	2002      	movs	r0, #2
 80048c8:	f003 faca 	bl	8007e60 <lcd_print>
			lcd_print(2, 13, "    ");
 80048cc:	4a6b      	ldr	r2, [pc, #428]	; (8004a7c <menu+0x362c>)
 80048ce:	210d      	movs	r1, #13
 80048d0:	2002      	movs	r0, #2
 80048d2:	f003 fac5 	bl	8007e60 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 80048d6:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <menu+0x3618>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b21      	cmp	r3, #33	; 0x21
 80048dc:	d14f      	bne.n	800497e <menu+0x352e>
		calismaSayModu = 0;
 80048de:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <menu+0x361c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 80048e4:	4866      	ldr	r0, [pc, #408]	; (8004a80 <menu+0x3630>)
 80048e6:	f7fb fc9d 	bl	8000224 <strlen>
 80048ea:	4603      	mov	r3, r0
 80048ec:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 80048ee:	4a65      	ldr	r2, [pc, #404]	; (8004a84 <menu+0x3634>)
 80048f0:	2101      	movs	r1, #1
 80048f2:	2001      	movs	r0, #1
 80048f4:	f003 fab4 	bl	8007e60 <lcd_print>

		if(ssidLength <=16) {
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	dc0e      	bgt.n	800491c <menu+0x34cc>
			lcd_print(2, 1, wifiSSID);
 80048fe:	4a60      	ldr	r2, [pc, #384]	; (8004a80 <menu+0x3630>)
 8004900:	2101      	movs	r1, #1
 8004902:	2002      	movs	r0, #2
 8004904:	f003 faac 	bl	8007e60 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	3301      	adds	r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4a5d      	ldr	r2, [pc, #372]	; (8004a88 <menu+0x3638>)
 8004912:	4619      	mov	r1, r3
 8004914:	2002      	movs	r0, #2
 8004916:	f003 faa3 	bl	8007e60 <lcd_print>
 800491a:	e005      	b.n	8004928 <menu+0x34d8>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 800491c:	2300      	movs	r3, #0
 800491e:	2202      	movs	r2, #2
 8004920:	2101      	movs	r1, #1
 8004922:	4857      	ldr	r0, [pc, #348]	; (8004a80 <menu+0x3630>)
 8004924:	f7fc fcd8 	bl	80012d8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004928:	2102      	movs	r1, #2
 800492a:	484a      	ldr	r0, [pc, #296]	; (8004a54 <menu+0x3604>)
 800492c:	f004 fdbe 	bl	80094ac <HAL_GPIO_ReadPin>
 8004930:	4603      	mov	r3, r0
 8004932:	2b01      	cmp	r3, #1
 8004934:	d123      	bne.n	800497e <menu+0x352e>
 8004936:	2104      	movs	r1, #4
 8004938:	4846      	ldr	r0, [pc, #280]	; (8004a54 <menu+0x3604>)
 800493a:	f004 fdb7 	bl	80094ac <HAL_GPIO_ReadPin>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d11c      	bne.n	800497e <menu+0x352e>
 8004944:	4b44      	ldr	r3, [pc, #272]	; (8004a58 <menu+0x3608>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f083 0301 	eor.w	r3, r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d015      	beq.n	800497e <menu+0x352e>
			takeWifiSSID();
 8004952:	f002 fbef 	bl	8007134 <takeWifiSSID>

			HAL_Delay(250);
 8004956:	20fa      	movs	r0, #250	; 0xfa
 8004958:	f003 ffd8 	bl	800890c <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 800495c:	4a48      	ldr	r2, [pc, #288]	; (8004a80 <menu+0x3630>)
 800495e:	2101      	movs	r1, #1
 8004960:	2002      	movs	r0, #2
 8004962:	f003 fa7d 	bl	8007e60 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004966:	4846      	ldr	r0, [pc, #280]	; (8004a80 <menu+0x3630>)
 8004968:	f7fb fc5c 	bl	8000224 <strlen>
 800496c:	4603      	mov	r3, r0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	3301      	adds	r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	4a44      	ldr	r2, [pc, #272]	; (8004a88 <menu+0x3638>)
 8004976:	4619      	mov	r1, r3
 8004978:	2002      	movs	r0, #2
 800497a:	f003 fa71 	bl	8007e60 <lcd_print>
		}
	}

	if (menuSayac == 34) {
 800497e:	4b3a      	ldr	r3, [pc, #232]	; (8004a68 <menu+0x3618>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b22      	cmp	r3, #34	; 0x22
 8004984:	d14f      	bne.n	8004a26 <menu+0x35d6>
		calismaSayModu = 0;
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <menu+0x361c>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 800498c:	483f      	ldr	r0, [pc, #252]	; (8004a8c <menu+0x363c>)
 800498e:	f7fb fc49 	bl	8000224 <strlen>
 8004992:	4603      	mov	r3, r0
 8004994:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004996:	4a3e      	ldr	r2, [pc, #248]	; (8004a90 <menu+0x3640>)
 8004998:	2101      	movs	r1, #1
 800499a:	2001      	movs	r0, #1
 800499c:	f003 fa60 	bl	8007e60 <lcd_print>

		if(passLength <= 16) {
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	dc0e      	bgt.n	80049c4 <menu+0x3574>
			lcd_print(2, 1, wifiPass);
 80049a6:	4a39      	ldr	r2, [pc, #228]	; (8004a8c <menu+0x363c>)
 80049a8:	2101      	movs	r1, #1
 80049aa:	2002      	movs	r0, #2
 80049ac:	f003 fa58 	bl	8007e60 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	4a33      	ldr	r2, [pc, #204]	; (8004a88 <menu+0x3638>)
 80049ba:	4619      	mov	r1, r3
 80049bc:	2002      	movs	r0, #2
 80049be:	f003 fa4f 	bl	8007e60 <lcd_print>
 80049c2:	e005      	b.n	80049d0 <menu+0x3580>
		} else {
			slideText(wifiPass, 1, 2, 1);
 80049c4:	2301      	movs	r3, #1
 80049c6:	2202      	movs	r2, #2
 80049c8:	2101      	movs	r1, #1
 80049ca:	4830      	ldr	r0, [pc, #192]	; (8004a8c <menu+0x363c>)
 80049cc:	f7fc fc84 	bl	80012d8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049d0:	2102      	movs	r1, #2
 80049d2:	4820      	ldr	r0, [pc, #128]	; (8004a54 <menu+0x3604>)
 80049d4:	f004 fd6a 	bl	80094ac <HAL_GPIO_ReadPin>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d123      	bne.n	8004a26 <menu+0x35d6>
 80049de:	2104      	movs	r1, #4
 80049e0:	481c      	ldr	r0, [pc, #112]	; (8004a54 <menu+0x3604>)
 80049e2:	f004 fd63 	bl	80094ac <HAL_GPIO_ReadPin>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d11c      	bne.n	8004a26 <menu+0x35d6>
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <menu+0x3608>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f083 0301 	eor.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d015      	beq.n	8004a26 <menu+0x35d6>
			takeWifiPass();
 80049fa:	f002 fd5d 	bl	80074b8 <takeWifiPass>

			HAL_Delay(250);
 80049fe:	20fa      	movs	r0, #250	; 0xfa
 8004a00:	f003 ff84 	bl	800890c <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004a04:	4a21      	ldr	r2, [pc, #132]	; (8004a8c <menu+0x363c>)
 8004a06:	2101      	movs	r1, #1
 8004a08:	2002      	movs	r0, #2
 8004a0a:	f003 fa29 	bl	8007e60 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a0e:	481f      	ldr	r0, [pc, #124]	; (8004a8c <menu+0x363c>)
 8004a10:	f7fb fc08 	bl	8000224 <strlen>
 8004a14:	4603      	mov	r3, r0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <menu+0x3638>)
 8004a1e:	4619      	mov	r1, r3
 8004a20:	2002      	movs	r0, #2
 8004a22:	f003 fa1d 	bl	8007e60 <lcd_print>
		}
	}

	if (menuSayac == 35) {
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <menu+0x3618>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b23      	cmp	r3, #35	; 0x23
 8004a2c:	d175      	bne.n	8004b1a <menu+0x36ca>
		if(dilSecim == 0) {
 8004a2e:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <menu+0x35fc>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d132      	bne.n	8004a9c <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <menu+0x3644>)
 8004a38:	2101      	movs	r1, #1
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f003 fa10 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <menu+0x3648>)
 8004a42:	2101      	movs	r1, #1
 8004a44:	2002      	movs	r0, #2
 8004a46:	f003 fa0b 	bl	8007e60 <lcd_print>
 8004a4a:	e035      	b.n	8004ab8 <menu+0x3668>
 8004a4c:	20000255 	.word	0x20000255
 8004a50:	0800d4c4 	.word	0x0800d4c4
 8004a54:	40010800 	.word	0x40010800
 8004a58:	20000263 	.word	0x20000263
 8004a5c:	20000253 	.word	0x20000253
 8004a60:	2000012c 	.word	0x2000012c
 8004a64:	20000260 	.word	0x20000260
 8004a68:	20000234 	.word	0x20000234
 8004a6c:	20000254 	.word	0x20000254
 8004a70:	0800dc0c 	.word	0x0800dc0c
 8004a74:	0800dc20 	.word	0x0800dc20
 8004a78:	200001a4 	.word	0x200001a4
 8004a7c:	0800dc34 	.word	0x0800dc34
 8004a80:	200001b0 	.word	0x200001b0
 8004a84:	0800dc3c 	.word	0x0800dc3c
 8004a88:	20000010 	.word	0x20000010
 8004a8c:	200001c4 	.word	0x200001c4
 8004a90:	0800dc50 	.word	0x0800dc50
 8004a94:	0800dc64 	.word	0x0800dc64
 8004a98:	0800dc78 	.word	0x0800dc78
		} else if(dilSecim == 1) {
 8004a9c:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <menu+0x36d4>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d109      	bne.n	8004ab8 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004aa4:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <menu+0x36d8>)
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f003 f9d9 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004aae:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <menu+0x36dc>)
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	2002      	movs	r0, #2
 8004ab4:	f003 f9d4 	bl	8007e60 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004ab8:	2108      	movs	r1, #8
 8004aba:	481d      	ldr	r0, [pc, #116]	; (8004b30 <menu+0x36e0>)
 8004abc:	f004 fcf6 	bl	80094ac <HAL_GPIO_ReadPin>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d129      	bne.n	8004b1a <menu+0x36ca>
			menuGiris = 0;
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <menu+0x36e4>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004acc:	bf00      	nop
 8004ace:	481a      	ldr	r0, [pc, #104]	; (8004b38 <menu+0x36e8>)
 8004ad0:	f005 fb15 	bl	800a0fe <HAL_I2C_GetError>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d0f9      	beq.n	8004ace <menu+0x367e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004ada:	bf00      	nop
 8004adc:	4816      	ldr	r0, [pc, #88]	; (8004b38 <menu+0x36e8>)
 8004ade:	f005 fb01 	bl	800a0e4 <HAL_I2C_GetState>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d1f9      	bne.n	8004adc <menu+0x368c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004ae8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004aec:	9302      	str	r3, [sp, #8]
 8004aee:	236e      	movs	r3, #110	; 0x6e
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <menu+0x36ec>)
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	236e      	movs	r3, #110	; 0x6e
 8004af8:	2200      	movs	r2, #0
 8004afa:	21a0      	movs	r1, #160	; 0xa0
 8004afc:	480e      	ldr	r0, [pc, #56]	; (8004b38 <menu+0x36e8>)
 8004afe:	f004 ff8f 	bl	8009a20 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004b02:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004b06:	f003 ff01 	bl	800890c <HAL_Delay>

			lcd_clear();
 8004b0a:	f003 f9d5 	bl	8007eb8 <lcd_clear>
			HAL_Delay(500);
 8004b0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b12:	f003 fefb 	bl	800890c <HAL_Delay>
			NVIC_SystemReset();
 8004b16:	f7fc fc85 	bl	8001424 <__NVIC_SystemReset>
		}
	}
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000255 	.word	0x20000255
 8004b28:	0800dc8c 	.word	0x0800dc8c
 8004b2c:	0800dca0 	.word	0x0800dca0
 8004b30:	40010800 	.word	0x40010800
 8004b34:	20000251 	.word	0x20000251
 8004b38:	200003bc 	.word	0x200003bc
 8004b3c:	2000012c 	.word	0x2000012c

08004b40 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004b50:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <lcdUpdate+0x9c>)
 8004b52:	2101      	movs	r1, #1
 8004b54:	2002      	movs	r0, #2
 8004b56:	f003 f983 	bl	8007e60 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004b5a:	e03b      	b.n	8004bd4 <lcdUpdate+0x94>
	} else if(y==2) {
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d105      	bne.n	8004b6e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004b62:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <lcdUpdate+0x9c>)
 8004b64:	2102      	movs	r1, #2
 8004b66:	2002      	movs	r0, #2
 8004b68:	f003 f97a 	bl	8007e60 <lcd_print>
}
 8004b6c:	e032      	b.n	8004bd4 <lcdUpdate+0x94>
	} else if(y==3) {
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d105      	bne.n	8004b80 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <lcdUpdate+0x9c>)
 8004b76:	2103      	movs	r1, #3
 8004b78:	2002      	movs	r0, #2
 8004b7a:	f003 f971 	bl	8007e60 <lcd_print>
}
 8004b7e:	e029      	b.n	8004bd4 <lcdUpdate+0x94>
	} else if(y==4) {
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d105      	bne.n	8004b92 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004b86:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <lcdUpdate+0x9c>)
 8004b88:	2104      	movs	r1, #4
 8004b8a:	2002      	movs	r0, #2
 8004b8c:	f003 f968 	bl	8007e60 <lcd_print>
}
 8004b90:	e020      	b.n	8004bd4 <lcdUpdate+0x94>
	} else if(y==5) {
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d105      	bne.n	8004ba4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004b98:	4a10      	ldr	r2, [pc, #64]	; (8004bdc <lcdUpdate+0x9c>)
 8004b9a:	2105      	movs	r1, #5
 8004b9c:	2002      	movs	r0, #2
 8004b9e:	f003 f95f 	bl	8007e60 <lcd_print>
}
 8004ba2:	e017      	b.n	8004bd4 <lcdUpdate+0x94>
	} else if(y==6) {
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d105      	bne.n	8004bb6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004baa:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <lcdUpdate+0x9c>)
 8004bac:	2106      	movs	r1, #6
 8004bae:	2002      	movs	r0, #2
 8004bb0:	f003 f956 	bl	8007e60 <lcd_print>
}
 8004bb4:	e00e      	b.n	8004bd4 <lcdUpdate+0x94>
	} else if (y==7) {
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	2b07      	cmp	r3, #7
 8004bba:	d10b      	bne.n	8004bd4 <lcdUpdate+0x94>
		lcd_clear();
 8004bbc:	f003 f97c 	bl	8007eb8 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004bc0:	4a07      	ldr	r2, [pc, #28]	; (8004be0 <lcdUpdate+0xa0>)
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f003 f94b 	bl	8007e60 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004bca:	4a06      	ldr	r2, [pc, #24]	; (8004be4 <lcdUpdate+0xa4>)
 8004bcc:	2106      	movs	r1, #6
 8004bce:	2002      	movs	r0, #2
 8004bd0:	f003 f946 	bl	8007e60 <lcd_print>
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	0800dcb4 	.word	0x0800dcb4
 8004be0:	0800dcb8 	.word	0x0800dcb8
 8004be4:	0800dcc0 	.word	0x0800dcc0

08004be8 <bekle>:

void bekle() {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
	timer1=millis;
 8004bec:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <bekle+0x124>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a47      	ldr	r2, [pc, #284]	; (8004d10 <bekle+0x128>)
 8004bf2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bf4:	e002      	b.n	8004bfc <bekle+0x14>
    	butonKontrol = 1;
 8004bf6:	4b47      	ldr	r3, [pc, #284]	; (8004d14 <bekle+0x12c>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4846      	ldr	r0, [pc, #280]	; (8004d18 <bekle+0x130>)
 8004c00:	f004 fc54 	bl	80094ac <HAL_GPIO_ReadPin>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d109      	bne.n	8004c1e <bekle+0x36>
 8004c0a:	4b40      	ldr	r3, [pc, #256]	; (8004d0c <bekle+0x124>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b40      	ldr	r3, [pc, #256]	; (8004d10 <bekle+0x128>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d0ef      	beq.n	8004bf6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c16:	e002      	b.n	8004c1e <bekle+0x36>
    	butonKontrol = 1;
 8004c18:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <bekle+0x12c>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c1e:	2108      	movs	r1, #8
 8004c20:	483e      	ldr	r0, [pc, #248]	; (8004d1c <bekle+0x134>)
 8004c22:	f004 fc43 	bl	80094ac <HAL_GPIO_ReadPin>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d109      	bne.n	8004c40 <bekle+0x58>
 8004c2c:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <bekle+0x124>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <bekle+0x128>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d0ef      	beq.n	8004c18 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c38:	e002      	b.n	8004c40 <bekle+0x58>
    	butonKontrol = 1;
 8004c3a:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <bekle+0x12c>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c40:	2102      	movs	r1, #2
 8004c42:	4835      	ldr	r0, [pc, #212]	; (8004d18 <bekle+0x130>)
 8004c44:	f004 fc32 	bl	80094ac <HAL_GPIO_ReadPin>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d109      	bne.n	8004c62 <bekle+0x7a>
 8004c4e:	4b2f      	ldr	r3, [pc, #188]	; (8004d0c <bekle+0x124>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <bekle+0x128>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d0ef      	beq.n	8004c3a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c5a:	e002      	b.n	8004c62 <bekle+0x7a>
    	butonKontrol = 1;
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <bekle+0x12c>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c62:	2104      	movs	r1, #4
 8004c64:	482c      	ldr	r0, [pc, #176]	; (8004d18 <bekle+0x130>)
 8004c66:	f004 fc21 	bl	80094ac <HAL_GPIO_ReadPin>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d109      	bne.n	8004c84 <bekle+0x9c>
 8004c70:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <bekle+0x124>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <bekle+0x128>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d0ef      	beq.n	8004c5c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c7c:	e002      	b.n	8004c84 <bekle+0x9c>
    	butonKontrol = 1;
 8004c7e:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <bekle+0x12c>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c84:	2108      	movs	r1, #8
 8004c86:	4824      	ldr	r0, [pc, #144]	; (8004d18 <bekle+0x130>)
 8004c88:	f004 fc10 	bl	80094ac <HAL_GPIO_ReadPin>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d109      	bne.n	8004ca6 <bekle+0xbe>
 8004c92:	4b1e      	ldr	r3, [pc, #120]	; (8004d0c <bekle+0x124>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <bekle+0x128>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d0ef      	beq.n	8004c7e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c9e:	e002      	b.n	8004ca6 <bekle+0xbe>
    	butonKontrol = 1;
 8004ca0:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <bekle+0x12c>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	481c      	ldr	r0, [pc, #112]	; (8004d1c <bekle+0x134>)
 8004caa:	f004 fbff 	bl	80094ac <HAL_GPIO_ReadPin>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <bekle+0xe0>
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <bekle+0x124>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <bekle+0x128>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d0ef      	beq.n	8004ca0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cc0:	e002      	b.n	8004cc8 <bekle+0xe0>
    	butonKontrol = 1;
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <bekle+0x12c>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ccc:	4813      	ldr	r0, [pc, #76]	; (8004d1c <bekle+0x134>)
 8004cce:	f004 fbed 	bl	80094ac <HAL_GPIO_ReadPin>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <bekle+0x104>
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <bekle+0x124>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <bekle+0x128>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d0ee      	beq.n	8004cc2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ce4:	e002      	b.n	8004cec <bekle+0x104>
    	butonKontrol = 1;
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <bekle+0x12c>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cf0:	480a      	ldr	r0, [pc, #40]	; (8004d1c <bekle+0x134>)
 8004cf2:	f004 fbdb 	bl	80094ac <HAL_GPIO_ReadPin>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <bekle+0x120>
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <bekle+0x124>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <bekle+0x128>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d0ee      	beq.n	8004ce6 <bekle+0xfe>
    }

}
 8004d08:	bf00      	nop
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000210 	.word	0x20000210
 8004d10:	20000218 	.word	0x20000218
 8004d14:	20000263 	.word	0x20000263
 8004d18:	40010800 	.word	0x40010800
 8004d1c:	40011000 	.word	0x40011000

08004d20 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004d24:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <checkLCDBacklight+0x24>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <checkLCDBacklight+0x28>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b3b      	cmp	r3, #59	; 0x3b
 8004d30:	d903      	bls.n	8004d3a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004d32:	2000      	movs	r0, #0
 8004d34:	f003 f8e0 	bl	8007ef8 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004d38:	e002      	b.n	8004d40 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	f003 f8dc 	bl	8007ef8 <lcd_backlight>
}
 8004d40:	bf00      	nop
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000210 	.word	0x20000210
 8004d48:	2000022c 	.word	0x2000022c

08004d4c <checkBasincSalteri>:

void checkBasincSalteri() {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <checkBasincSalteri+0x54>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <checkBasincSalteri+0x12>
		basincVar=1;
 8004d58:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <checkBasincSalteri+0x58>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <checkBasincSalteri+0x54>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d119      	bne.n	8004d9a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d6a:	480f      	ldr	r0, [pc, #60]	; (8004da8 <checkBasincSalteri+0x5c>)
 8004d6c:	f004 fb9e 	bl	80094ac <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <checkBasincSalteri+0x60>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <checkBasincSalteri+0x64>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d90a      	bls.n	8004d9a <checkBasincSalteri+0x4e>
				basincVar=1;
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <checkBasincSalteri+0x58>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004d8a:	e006      	b.n	8004d9a <checkBasincSalteri+0x4e>
			timer5=millis;
 8004d8c:	4b07      	ldr	r3, [pc, #28]	; (8004dac <checkBasincSalteri+0x60>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a07      	ldr	r2, [pc, #28]	; (8004db0 <checkBasincSalteri+0x64>)
 8004d92:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <checkBasincSalteri+0x58>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000023b 	.word	0x2000023b
 8004da4:	20000237 	.word	0x20000237
 8004da8:	40011000 	.word	0x40011000
 8004dac:	20000210 	.word	0x20000210
 8004db0:	20000228 	.word	0x20000228

08004db4 <checkBasGonder>:

void checkBasGonder() {
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <checkBasGonder+0x74>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10b      	bne.n	8004dd8 <checkBasGonder+0x24>
 8004dc0:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <checkBasGonder+0x78>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <checkBasGonder+0x24>
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <checkBasGonder+0x7c>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d103      	bne.n	8004dd8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004dd0:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <checkBasGonder+0x80>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e009      	b.n	8004dec <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004dd8:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <checkBasGonder+0x78>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f083 0301 	eor.w	r3, r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004de6:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <checkBasGonder+0x80>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <checkBasGonder+0x74>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d10b      	bne.n	8004e0c <checkBasGonder+0x58>
 8004df4:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <checkBasGonder+0x84>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <checkBasGonder+0x58>
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <checkBasGonder+0x7c>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <checkBasGonder+0x88>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004e0a:	e009      	b.n	8004e20 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <checkBasGonder+0x84>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f083 0301 	eor.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004e1a:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <checkBasGonder+0x88>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	20000235 	.word	0x20000235
 8004e2c:	20000269 	.word	0x20000269
 8004e30:	20000243 	.word	0x20000243
 8004e34:	20000270 	.word	0x20000270
 8004e38:	2000026c 	.word	0x2000026c
 8004e3c:	20000271 	.word	0x20000271

08004e40 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004e44:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <checkKapiSecimleri+0x98>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004e4c:	4b23      	ldr	r3, [pc, #140]	; (8004edc <checkKapiSecimleri+0x9c>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004e52:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <checkKapiSecimleri+0x98>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d10e      	bne.n	8004e78 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e5e:	4820      	ldr	r0, [pc, #128]	; (8004ee0 <checkKapiSecimleri+0xa0>)
 8004e60:	f004 fb24 	bl	80094ac <HAL_GPIO_ReadPin>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <checkKapiSecimleri+0x9c>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	e002      	b.n	8004e78 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004e72:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <checkKapiSecimleri+0x9c>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004e78:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <checkKapiSecimleri+0x98>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d10e      	bne.n	8004e9e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e84:	4816      	ldr	r0, [pc, #88]	; (8004ee0 <checkKapiSecimleri+0xa0>)
 8004e86:	f004 fb11 	bl	80094ac <HAL_GPIO_ReadPin>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d103      	bne.n	8004e98 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004e90:	4b12      	ldr	r3, [pc, #72]	; (8004edc <checkKapiSecimleri+0x9c>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e002      	b.n	8004e9e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004e98:	4b10      	ldr	r3, [pc, #64]	; (8004edc <checkKapiSecimleri+0x9c>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004e9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <checkKapiSecimleri+0x98>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d116      	bne.n	8004ed4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eaa:	480d      	ldr	r0, [pc, #52]	; (8004ee0 <checkKapiSecimleri+0xa0>)
 8004eac:	f004 fafe 	bl	80094ac <HAL_GPIO_ReadPin>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <checkKapiSecimleri+0x8e>
 8004eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eba:	4809      	ldr	r0, [pc, #36]	; (8004ee0 <checkKapiSecimleri+0xa0>)
 8004ebc:	f004 faf6 	bl	80094ac <HAL_GPIO_ReadPin>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <checkKapiSecimleri+0x9c>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004ecc:	e002      	b.n	8004ed4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004ece:	4b03      	ldr	r3, [pc, #12]	; (8004edc <checkKapiSecimleri+0x9c>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	701a      	strb	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	2000023c 	.word	0x2000023c
 8004edc:	20000287 	.word	0x20000287
 8004ee0:	40010800 	.word	0x40010800

08004ee4 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004ee8:	4b62      	ldr	r3, [pc, #392]	; (8005074 <checkAktifCalisma+0x190>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f041 833e 	bne.w	800656e <checkAktifCalisma+0x168a>
 8004ef2:	4b61      	ldr	r3, [pc, #388]	; (8005078 <checkAktifCalisma+0x194>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f041 8339 	bne.w	800656e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004efc:	4b5f      	ldr	r3, [pc, #380]	; (800507c <checkAktifCalisma+0x198>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11a      	bne.n	8004f3a <checkAktifCalisma+0x56>
 8004f04:	4b5e      	ldr	r3, [pc, #376]	; (8005080 <checkAktifCalisma+0x19c>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d116      	bne.n	8004f3a <checkAktifCalisma+0x56>
 8004f0c:	4b5d      	ldr	r3, [pc, #372]	; (8005084 <checkAktifCalisma+0x1a0>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <checkAktifCalisma+0x46>
 8004f14:	4b5c      	ldr	r3, [pc, #368]	; (8005088 <checkAktifCalisma+0x1a4>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f083 0301 	eor.w	r3, r3, #1
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <checkAktifCalisma+0x46>
 8004f22:	4b5a      	ldr	r3, [pc, #360]	; (800508c <checkAktifCalisma+0x1a8>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d007      	beq.n	8004f3a <checkAktifCalisma+0x56>
 8004f2a:	4b59      	ldr	r3, [pc, #356]	; (8005090 <checkAktifCalisma+0x1ac>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <checkAktifCalisma+0x80>
 8004f32:	4b58      	ldr	r3, [pc, #352]	; (8005094 <checkAktifCalisma+0x1b0>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d114      	bne.n	8004f64 <checkAktifCalisma+0x80>
 8004f3a:	4b57      	ldr	r3, [pc, #348]	; (8005098 <checkAktifCalisma+0x1b4>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d010      	beq.n	8004f64 <checkAktifCalisma+0x80>
 8004f42:	4b56      	ldr	r3, [pc, #344]	; (800509c <checkAktifCalisma+0x1b8>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f50:	4853      	ldr	r0, [pc, #332]	; (80050a0 <checkAktifCalisma+0x1bc>)
 8004f52:	f004 fac2 	bl	80094da <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004f56:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <checkAktifCalisma+0x1c0>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004f5c:	4b52      	ldr	r3, [pc, #328]	; (80050a8 <checkAktifCalisma+0x1c4>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e008      	b.n	8004f76 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f6a:	484d      	ldr	r0, [pc, #308]	; (80050a0 <checkAktifCalisma+0x1bc>)
 8004f6c:	f004 fab5 	bl	80094da <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004f70:	4b4c      	ldr	r3, [pc, #304]	; (80050a4 <checkAktifCalisma+0x1c0>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004f76:	4b40      	ldr	r3, [pc, #256]	; (8005078 <checkAktifCalisma+0x194>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d160      	bne.n	8005040 <checkAktifCalisma+0x15c>
 8004f7e:	4b46      	ldr	r3, [pc, #280]	; (8005098 <checkAktifCalisma+0x1b4>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d05c      	beq.n	8005040 <checkAktifCalisma+0x15c>
 8004f86:	4b45      	ldr	r3, [pc, #276]	; (800509c <checkAktifCalisma+0x1b8>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d058      	beq.n	8005040 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f92:	4843      	ldr	r0, [pc, #268]	; (80050a0 <checkAktifCalisma+0x1bc>)
 8004f94:	f004 fa8a 	bl	80094ac <HAL_GPIO_ReadPin>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <checkAktifCalisma+0xc2>
 8004f9e:	4b43      	ldr	r3, [pc, #268]	; (80050ac <checkAktifCalisma+0x1c8>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d04c      	beq.n	8005040 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	4841      	ldr	r0, [pc, #260]	; (80050b0 <checkAktifCalisma+0x1cc>)
 8004faa:	f004 fa7f 	bl	80094ac <HAL_GPIO_ReadPin>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d145      	bne.n	8005040 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004fb4:	4b3f      	ldr	r3, [pc, #252]	; (80050b4 <checkAktifCalisma+0x1d0>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d041      	beq.n	8005040 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fc0:	4837      	ldr	r0, [pc, #220]	; (80050a0 <checkAktifCalisma+0x1bc>)
 8004fc2:	f004 fa73 	bl	80094ac <HAL_GPIO_ReadPin>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d10e      	bne.n	8004fea <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fd0:	4833      	ldr	r0, [pc, #204]	; (80050a0 <checkAktifCalisma+0x1bc>)
 8004fd2:	f004 fa6b 	bl	80094ac <HAL_GPIO_ReadPin>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d106      	bne.n	8004fea <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004fdc:	2140      	movs	r1, #64	; 0x40
 8004fde:	4834      	ldr	r0, [pc, #208]	; (80050b0 <checkAktifCalisma+0x1cc>)
 8004fe0:	f004 fa64 	bl	80094ac <HAL_GPIO_ReadPin>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d003      	beq.n	8004ff2 <checkAktifCalisma+0x10e>
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <checkAktifCalisma+0x198>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d026      	beq.n	8005040 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <checkAktifCalisma+0x1a0>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f083 0301 	eor.w	r3, r3, #1
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01f      	beq.n	8005040 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005000:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <checkAktifCalisma+0x19c>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f083 0301 	eor.w	r3, r3, #1
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d018      	beq.n	8005040 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <checkAktifCalisma+0x1ac>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	f083 0301 	eor.w	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d011      	beq.n	8005040 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800501c:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <checkAktifCalisma+0x1d4>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	f083 0301 	eor.w	r3, r3, #1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <checkAktifCalisma+0x1d8>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	f083 0301 	eor.w	r3, r3, #1
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <checkAktifCalisma+0x198>)
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e002      	b.n	8005046 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005040:	4b0e      	ldr	r3, [pc, #56]	; (800507c <checkAktifCalisma+0x198>)
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <checkAktifCalisma+0x198>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d03a      	beq.n	80050c4 <checkAktifCalisma+0x1e0>
 800504e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005052:	4817      	ldr	r0, [pc, #92]	; (80050b0 <checkAktifCalisma+0x1cc>)
 8005054:	f004 fa2a 	bl	80094ac <HAL_GPIO_ReadPin>
 8005058:	4603      	mov	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d132      	bne.n	80050c4 <checkAktifCalisma+0x1e0>
 800505e:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <checkAktifCalisma+0x1dc>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d02e      	beq.n	80050c4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005066:	2201      	movs	r2, #1
 8005068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800506c:	480c      	ldr	r0, [pc, #48]	; (80050a0 <checkAktifCalisma+0x1bc>)
 800506e:	f004 fa34 	bl	80094da <HAL_GPIO_WritePin>
 8005072:	e02d      	b.n	80050d0 <checkAktifCalisma+0x1ec>
 8005074:	20000252 	.word	0x20000252
 8005078:	20000251 	.word	0x20000251
 800507c:	20000269 	.word	0x20000269
 8005080:	2000026a 	.word	0x2000026a
 8005084:	2000026c 	.word	0x2000026c
 8005088:	20000264 	.word	0x20000264
 800508c:	20000247 	.word	0x20000247
 8005090:	2000026b 	.word	0x2000026b
 8005094:	20000246 	.word	0x20000246
 8005098:	20000286 	.word	0x20000286
 800509c:	20000287 	.word	0x20000287
 80050a0:	40010c00 	.word	0x40010c00
 80050a4:	20000288 	.word	0x20000288
 80050a8:	20000273 	.word	0x20000273
 80050ac:	20000270 	.word	0x20000270
 80050b0:	40011000 	.word	0x40011000
 80050b4:	20000237 	.word	0x20000237
 80050b8:	2000026e 	.word	0x2000026e
 80050bc:	2000026f 	.word	0x2000026f
 80050c0:	20000242 	.word	0x20000242
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80050c4:	2200      	movs	r2, #0
 80050c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050ca:	4860      	ldr	r0, [pc, #384]	; (800524c <checkAktifCalisma+0x368>)
 80050cc:	f004 fa05 	bl	80094da <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80050d0:	4b5f      	ldr	r3, [pc, #380]	; (8005250 <checkAktifCalisma+0x36c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d013      	beq.n	8005100 <checkAktifCalisma+0x21c>
 80050d8:	4b5e      	ldr	r3, [pc, #376]	; (8005254 <checkAktifCalisma+0x370>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d007      	beq.n	80050f0 <checkAktifCalisma+0x20c>
 80050e0:	4b5c      	ldr	r3, [pc, #368]	; (8005254 <checkAktifCalisma+0x370>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d003      	beq.n	80050f0 <checkAktifCalisma+0x20c>
 80050e8:	4b5b      	ldr	r3, [pc, #364]	; (8005258 <checkAktifCalisma+0x374>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80050f0:	2201      	movs	r2, #1
 80050f2:	2104      	movs	r1, #4
 80050f4:	4855      	ldr	r0, [pc, #340]	; (800524c <checkAktifCalisma+0x368>)
 80050f6:	f004 f9f0 	bl	80094da <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80050fa:	4b58      	ldr	r3, [pc, #352]	; (800525c <checkAktifCalisma+0x378>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005100:	4b56      	ldr	r3, [pc, #344]	; (800525c <checkAktifCalisma+0x378>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d02f      	beq.n	8005168 <checkAktifCalisma+0x284>
 8005108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800510c:	484f      	ldr	r0, [pc, #316]	; (800524c <checkAktifCalisma+0x368>)
 800510e:	f004 f9cd 	bl	80094ac <HAL_GPIO_ReadPin>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d106      	bne.n	8005126 <checkAktifCalisma+0x242>
 8005118:	4b51      	ldr	r3, [pc, #324]	; (8005260 <checkAktifCalisma+0x37c>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	f083 0301 	eor.w	r3, r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <checkAktifCalisma+0x250>
 8005126:	2102      	movs	r1, #2
 8005128:	484e      	ldr	r0, [pc, #312]	; (8005264 <checkAktifCalisma+0x380>)
 800512a:	f004 f9bf 	bl	80094ac <HAL_GPIO_ReadPin>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d119      	bne.n	8005168 <checkAktifCalisma+0x284>
 8005134:	4b4c      	ldr	r3, [pc, #304]	; (8005268 <checkAktifCalisma+0x384>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d015      	beq.n	8005168 <checkAktifCalisma+0x284>
 800513c:	4b4b      	ldr	r3, [pc, #300]	; (800526c <checkAktifCalisma+0x388>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d011      	beq.n	8005168 <checkAktifCalisma+0x284>
 8005144:	4b4a      	ldr	r3, [pc, #296]	; (8005270 <checkAktifCalisma+0x38c>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <checkAktifCalisma+0x284>
 800514c:	4b49      	ldr	r3, [pc, #292]	; (8005274 <checkAktifCalisma+0x390>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f083 0301 	eor.w	r3, r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <checkAktifCalisma+0x284>
			timer2=millis;
 800515a:	4b47      	ldr	r3, [pc, #284]	; (8005278 <checkAktifCalisma+0x394>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a47      	ldr	r2, [pc, #284]	; (800527c <checkAktifCalisma+0x398>)
 8005160:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005162:	4b44      	ldr	r3, [pc, #272]	; (8005274 <checkAktifCalisma+0x390>)
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005168:	4b43      	ldr	r3, [pc, #268]	; (8005278 <checkAktifCalisma+0x394>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b43      	ldr	r3, [pc, #268]	; (800527c <checkAktifCalisma+0x398>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	4a43      	ldr	r2, [pc, #268]	; (8005280 <checkAktifCalisma+0x39c>)
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	4293      	cmp	r3, r2
 8005178:	d303      	bcc.n	8005182 <checkAktifCalisma+0x29e>
 800517a:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <checkAktifCalisma+0x390>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d111      	bne.n	80051a6 <checkAktifCalisma+0x2c2>
 8005182:	4b39      	ldr	r3, [pc, #228]	; (8005268 <checkAktifCalisma+0x384>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	f083 0301 	eor.w	r3, r3, #1
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <checkAktifCalisma+0x2c2>
 8005190:	4b36      	ldr	r3, [pc, #216]	; (800526c <checkAktifCalisma+0x388>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f083 0301 	eor.w	r3, r3, #1
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <checkAktifCalisma+0x2c2>
 800519e:	4b34      	ldr	r3, [pc, #208]	; (8005270 <checkAktifCalisma+0x38c>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80051a6:	2200      	movs	r2, #0
 80051a8:	2104      	movs	r1, #4
 80051aa:	4828      	ldr	r0, [pc, #160]	; (800524c <checkAktifCalisma+0x368>)
 80051ac:	f004 f995 	bl	80094da <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80051b0:	4b2a      	ldr	r3, [pc, #168]	; (800525c <checkAktifCalisma+0x378>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80051b6:	4b2f      	ldr	r3, [pc, #188]	; (8005274 <checkAktifCalisma+0x390>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80051bc:	4b31      	ldr	r3, [pc, #196]	; (8005284 <checkAktifCalisma+0x3a0>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80051c4:	4b30      	ldr	r3, [pc, #192]	; (8005288 <checkAktifCalisma+0x3a4>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80051ca:	4b2e      	ldr	r3, [pc, #184]	; (8005284 <checkAktifCalisma+0x3a0>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d116      	bne.n	8005200 <checkAktifCalisma+0x31c>
 80051d2:	4b2e      	ldr	r3, [pc, #184]	; (800528c <checkAktifCalisma+0x3a8>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d112      	bne.n	8005200 <checkAktifCalisma+0x31c>
 80051da:	2101      	movs	r1, #1
 80051dc:	4821      	ldr	r0, [pc, #132]	; (8005264 <checkAktifCalisma+0x380>)
 80051de:	f004 f965 	bl	80094ac <HAL_GPIO_ReadPin>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <checkAktifCalisma+0x31c>
 80051e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051ec:	4817      	ldr	r0, [pc, #92]	; (800524c <checkAktifCalisma+0x368>)
 80051ee:	f004 f95d 	bl	80094ac <HAL_GPIO_ReadPin>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80051f8:	4b23      	ldr	r3, [pc, #140]	; (8005288 <checkAktifCalisma+0x3a4>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e011      	b.n	8005224 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005200:	4b20      	ldr	r3, [pc, #128]	; (8005284 <checkAktifCalisma+0x3a0>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10d      	bne.n	8005224 <checkAktifCalisma+0x340>
 8005208:	2101      	movs	r1, #1
 800520a:	4816      	ldr	r0, [pc, #88]	; (8005264 <checkAktifCalisma+0x380>)
 800520c:	f004 f94e 	bl	80094ac <HAL_GPIO_ReadPin>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d106      	bne.n	8005224 <checkAktifCalisma+0x340>
 8005216:	4b1d      	ldr	r3, [pc, #116]	; (800528c <checkAktifCalisma+0x3a8>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800521e:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <checkAktifCalisma+0x3a4>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005224:	4b17      	ldr	r3, [pc, #92]	; (8005284 <checkAktifCalisma+0x3a0>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d134      	bne.n	8005296 <checkAktifCalisma+0x3b2>
 800522c:	4b17      	ldr	r3, [pc, #92]	; (800528c <checkAktifCalisma+0x3a8>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d130      	bne.n	8005296 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005234:	2101      	movs	r1, #1
 8005236:	480b      	ldr	r0, [pc, #44]	; (8005264 <checkAktifCalisma+0x380>)
 8005238:	f004 f938 	bl	80094ac <HAL_GPIO_ReadPin>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d126      	bne.n	8005290 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005242:	4b11      	ldr	r3, [pc, #68]	; (8005288 <checkAktifCalisma+0x3a4>)
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e025      	b.n	8005296 <checkAktifCalisma+0x3b2>
 800524a:	bf00      	nop
 800524c:	40010c00 	.word	0x40010c00
 8005250:	20000269 	.word	0x20000269
 8005254:	20000243 	.word	0x20000243
 8005258:	20000247 	.word	0x20000247
 800525c:	2000026d 	.word	0x2000026d
 8005260:	20000270 	.word	0x20000270
 8005264:	40011000 	.word	0x40011000
 8005268:	20000286 	.word	0x20000286
 800526c:	20000287 	.word	0x20000287
 8005270:	20000237 	.word	0x20000237
 8005274:	20000265 	.word	0x20000265
 8005278:	20000210 	.word	0x20000210
 800527c:	2000021c 	.word	0x2000021c
 8005280:	20000248 	.word	0x20000248
 8005284:	20000238 	.word	0x20000238
 8005288:	2000028b 	.word	0x2000028b
 800528c:	20000235 	.word	0x20000235
			} else {
				cerceveVar=0;
 8005290:	4b7f      	ldr	r3, [pc, #508]	; (8005490 <checkAktifCalisma+0x5ac>)
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005296:	4b7f      	ldr	r3, [pc, #508]	; (8005494 <checkAktifCalisma+0x5b0>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d17c      	bne.n	8005398 <checkAktifCalisma+0x4b4>
 800529e:	4b7e      	ldr	r3, [pc, #504]	; (8005498 <checkAktifCalisma+0x5b4>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d078      	beq.n	8005398 <checkAktifCalisma+0x4b4>
 80052a6:	4b7d      	ldr	r3, [pc, #500]	; (800549c <checkAktifCalisma+0x5b8>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d074      	beq.n	8005398 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80052ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052b2:	487b      	ldr	r0, [pc, #492]	; (80054a0 <checkAktifCalisma+0x5bc>)
 80052b4:	f004 f8fa 	bl	80094ac <HAL_GPIO_ReadPin>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <checkAktifCalisma+0x3e2>
 80052be:	4b79      	ldr	r3, [pc, #484]	; (80054a4 <checkAktifCalisma+0x5c0>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d068      	beq.n	8005398 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80052c6:	4b72      	ldr	r3, [pc, #456]	; (8005490 <checkAktifCalisma+0x5ac>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d064      	beq.n	8005398 <checkAktifCalisma+0x4b4>
 80052ce:	4b76      	ldr	r3, [pc, #472]	; (80054a8 <checkAktifCalisma+0x5c4>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	f083 0301 	eor.w	r3, r3, #1
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05d      	beq.n	8005398 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80052dc:	2104      	movs	r1, #4
 80052de:	4873      	ldr	r0, [pc, #460]	; (80054ac <checkAktifCalisma+0x5c8>)
 80052e0:	f004 f8e4 	bl	80094ac <HAL_GPIO_ReadPin>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <checkAktifCalisma+0x40e>
 80052ea:	4b71      	ldr	r3, [pc, #452]	; (80054b0 <checkAktifCalisma+0x5cc>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d152      	bne.n	8005398 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80052f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052f6:	486a      	ldr	r0, [pc, #424]	; (80054a0 <checkAktifCalisma+0x5bc>)
 80052f8:	f004 f8d8 	bl	80094ac <HAL_GPIO_ReadPin>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10e      	bne.n	8005320 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005306:	4866      	ldr	r0, [pc, #408]	; (80054a0 <checkAktifCalisma+0x5bc>)
 8005308:	f004 f8d0 	bl	80094ac <HAL_GPIO_ReadPin>
 800530c:	4603      	mov	r3, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	d106      	bne.n	8005320 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005312:	2140      	movs	r1, #64	; 0x40
 8005314:	4865      	ldr	r0, [pc, #404]	; (80054ac <checkAktifCalisma+0x5c8>)
 8005316:	f004 f8c9 	bl	80094ac <HAL_GPIO_ReadPin>
 800531a:	4603      	mov	r3, r0
 800531c:	2b01      	cmp	r3, #1
 800531e:	d003      	beq.n	8005328 <checkAktifCalisma+0x444>
 8005320:	4b64      	ldr	r3, [pc, #400]	; (80054b4 <checkAktifCalisma+0x5d0>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d037      	beq.n	8005398 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005328:	4b63      	ldr	r3, [pc, #396]	; (80054b8 <checkAktifCalisma+0x5d4>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f083 0301 	eor.w	r3, r3, #1
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d030      	beq.n	8005398 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005336:	4b61      	ldr	r3, [pc, #388]	; (80054bc <checkAktifCalisma+0x5d8>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f083 0301 	eor.w	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d029      	beq.n	8005398 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005344:	4b5e      	ldr	r3, [pc, #376]	; (80054c0 <checkAktifCalisma+0x5dc>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f083 0301 	eor.w	r3, r3, #1
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d022      	beq.n	8005398 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005352:	4b5c      	ldr	r3, [pc, #368]	; (80054c4 <checkAktifCalisma+0x5e0>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f083 0301 	eor.w	r3, r3, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005360:	4b59      	ldr	r3, [pc, #356]	; (80054c8 <checkAktifCalisma+0x5e4>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f083 0301 	eor.w	r3, r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d014      	beq.n	8005398 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800536e:	4b57      	ldr	r3, [pc, #348]	; (80054cc <checkAktifCalisma+0x5e8>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	f083 0301 	eor.w	r3, r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00d      	beq.n	8005398 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800537c:	2201      	movs	r2, #1
 800537e:	2102      	movs	r1, #2
 8005380:	4847      	ldr	r0, [pc, #284]	; (80054a0 <checkAktifCalisma+0x5bc>)
 8005382:	f004 f8aa 	bl	80094da <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005386:	4b4b      	ldr	r3, [pc, #300]	; (80054b4 <checkAktifCalisma+0x5d0>)
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800538c:	4b50      	ldr	r3, [pc, #320]	; (80054d0 <checkAktifCalisma+0x5ec>)
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005392:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <checkAktifCalisma+0x5f0>)
 8005394:	2201      	movs	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005398:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <checkAktifCalisma+0x5d0>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d033      	beq.n	8005408 <checkAktifCalisma+0x524>
 80053a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053a4:	483e      	ldr	r0, [pc, #248]	; (80054a0 <checkAktifCalisma+0x5bc>)
 80053a6:	f004 f881 	bl	80094ac <HAL_GPIO_ReadPin>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d106      	bne.n	80053be <checkAktifCalisma+0x4da>
 80053b0:	4b3c      	ldr	r3, [pc, #240]	; (80054a4 <checkAktifCalisma+0x5c0>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f083 0301 	eor.w	r3, r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <checkAktifCalisma+0x4f0>
 80053be:	2104      	movs	r1, #4
 80053c0:	483a      	ldr	r0, [pc, #232]	; (80054ac <checkAktifCalisma+0x5c8>)
 80053c2:	f004 f873 	bl	80094ac <HAL_GPIO_ReadPin>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d11d      	bne.n	8005408 <checkAktifCalisma+0x524>
 80053cc:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <checkAktifCalisma+0x5cc>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d019      	beq.n	8005408 <checkAktifCalisma+0x524>
 80053d4:	4b30      	ldr	r3, [pc, #192]	; (8005498 <checkAktifCalisma+0x5b4>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d015      	beq.n	8005408 <checkAktifCalisma+0x524>
 80053dc:	4b2f      	ldr	r3, [pc, #188]	; (800549c <checkAktifCalisma+0x5b8>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d011      	beq.n	8005408 <checkAktifCalisma+0x524>
 80053e4:	4b2a      	ldr	r3, [pc, #168]	; (8005490 <checkAktifCalisma+0x5ac>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00d      	beq.n	8005408 <checkAktifCalisma+0x524>
 80053ec:	4b3a      	ldr	r3, [pc, #232]	; (80054d8 <checkAktifCalisma+0x5f4>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f083 0301 	eor.w	r3, r3, #1
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d006      	beq.n	8005408 <checkAktifCalisma+0x524>
			timer2=millis;
 80053fa:	4b38      	ldr	r3, [pc, #224]	; (80054dc <checkAktifCalisma+0x5f8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a38      	ldr	r2, [pc, #224]	; (80054e0 <checkAktifCalisma+0x5fc>)
 8005400:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005402:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <checkAktifCalisma+0x5f4>)
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005408:	4b34      	ldr	r3, [pc, #208]	; (80054dc <checkAktifCalisma+0x5f8>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b34      	ldr	r3, [pc, #208]	; (80054e0 <checkAktifCalisma+0x5fc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a34      	ldr	r2, [pc, #208]	; (80054e4 <checkAktifCalisma+0x600>)
 8005414:	7812      	ldrb	r2, [r2, #0]
 8005416:	4293      	cmp	r3, r2
 8005418:	d303      	bcc.n	8005422 <checkAktifCalisma+0x53e>
 800541a:	4b2f      	ldr	r3, [pc, #188]	; (80054d8 <checkAktifCalisma+0x5f4>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d114      	bne.n	800544c <checkAktifCalisma+0x568>
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <checkAktifCalisma+0x5b4>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f083 0301 	eor.w	r3, r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10d      	bne.n	800544c <checkAktifCalisma+0x568>
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <checkAktifCalisma+0x5b8>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f083 0301 	eor.w	r3, r3, #1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <checkAktifCalisma+0x568>
 800543e:	4b14      	ldr	r3, [pc, #80]	; (8005490 <checkAktifCalisma+0x5ac>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f083 0301 	eor.w	r3, r3, #1
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800544c:	2200      	movs	r2, #0
 800544e:	2102      	movs	r1, #2
 8005450:	4813      	ldr	r0, [pc, #76]	; (80054a0 <checkAktifCalisma+0x5bc>)
 8005452:	f004 f842 	bl	80094da <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005456:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <checkAktifCalisma+0x5d0>)
 8005458:	2200      	movs	r2, #0
 800545a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800545c:	4b1e      	ldr	r3, [pc, #120]	; (80054d8 <checkAktifCalisma+0x5f4>)
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005462:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <checkAktifCalisma+0x5d0>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d040      	beq.n	80054ec <checkAktifCalisma+0x608>
 800546a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800546e:	480f      	ldr	r0, [pc, #60]	; (80054ac <checkAktifCalisma+0x5c8>)
 8005470:	f004 f81c 	bl	80094ac <HAL_GPIO_ReadPin>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d138      	bne.n	80054ec <checkAktifCalisma+0x608>
 800547a:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <checkAktifCalisma+0x604>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d034      	beq.n	80054ec <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005482:	2201      	movs	r2, #1
 8005484:	2101      	movs	r1, #1
 8005486:	4806      	ldr	r0, [pc, #24]	; (80054a0 <checkAktifCalisma+0x5bc>)
 8005488:	f004 f827 	bl	80094da <HAL_GPIO_WritePin>
 800548c:	e033      	b.n	80054f6 <checkAktifCalisma+0x612>
 800548e:	bf00      	nop
 8005490:	2000028b 	.word	0x2000028b
 8005494:	20000251 	.word	0x20000251
 8005498:	20000286 	.word	0x20000286
 800549c:	20000287 	.word	0x20000287
 80054a0:	40010c00 	.word	0x40010c00
 80054a4:	20000271 	.word	0x20000271
 80054a8:	20000285 	.word	0x20000285
 80054ac:	40011000 	.word	0x40011000
 80054b0:	2000023a 	.word	0x2000023a
 80054b4:	2000026c 	.word	0x2000026c
 80054b8:	20000269 	.word	0x20000269
 80054bc:	2000026d 	.word	0x2000026d
 80054c0:	2000026a 	.word	0x2000026a
 80054c4:	2000026b 	.word	0x2000026b
 80054c8:	2000026e 	.word	0x2000026e
 80054cc:	2000026f 	.word	0x2000026f
 80054d0:	20000274 	.word	0x20000274
 80054d4:	20000295 	.word	0x20000295
 80054d8:	20000264 	.word	0x20000264
 80054dc:	20000210 	.word	0x20000210
 80054e0:	2000021c 	.word	0x2000021c
 80054e4:	20000249 	.word	0x20000249
 80054e8:	20000239 	.word	0x20000239
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80054ec:	2200      	movs	r2, #0
 80054ee:	2101      	movs	r1, #1
 80054f0:	4836      	ldr	r0, [pc, #216]	; (80055cc <checkAktifCalisma+0x6e8>)
 80054f2:	f003 fff2 	bl	80094da <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80054f6:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <checkAktifCalisma+0x6ec>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f040 8080 	bne.w	8005600 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <checkAktifCalisma+0x6f0>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d003      	beq.n	8005510 <checkAktifCalisma+0x62c>
 8005508:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <checkAktifCalisma+0x6f0>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d177      	bne.n	8005600 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005510:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <checkAktifCalisma+0x6f4>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d073      	beq.n	8005600 <checkAktifCalisma+0x71c>
 8005518:	4b30      	ldr	r3, [pc, #192]	; (80055dc <checkAktifCalisma+0x6f8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d06f      	beq.n	8005600 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005524:	4829      	ldr	r0, [pc, #164]	; (80055cc <checkAktifCalisma+0x6e8>)
 8005526:	f003 ffc1 	bl	80094ac <HAL_GPIO_ReadPin>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d167      	bne.n	8005600 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005534:	482a      	ldr	r0, [pc, #168]	; (80055e0 <checkAktifCalisma+0x6fc>)
 8005536:	f003 ffb9 	bl	80094ac <HAL_GPIO_ReadPin>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <checkAktifCalisma+0x664>
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <checkAktifCalisma+0x700>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d15b      	bne.n	8005600 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005548:	2140      	movs	r1, #64	; 0x40
 800554a:	4825      	ldr	r0, [pc, #148]	; (80055e0 <checkAktifCalisma+0x6fc>)
 800554c:	f003 ffae 	bl	80094ac <HAL_GPIO_ReadPin>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10f      	bne.n	8005576 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800555a:	481c      	ldr	r0, [pc, #112]	; (80055cc <checkAktifCalisma+0x6e8>)
 800555c:	f003 ffa6 	bl	80094ac <HAL_GPIO_ReadPin>
 8005560:	4603      	mov	r3, r0
 8005562:	2b01      	cmp	r3, #1
 8005564:	d107      	bne.n	8005576 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800556a:	4818      	ldr	r0, [pc, #96]	; (80055cc <checkAktifCalisma+0x6e8>)
 800556c:	f003 ff9e 	bl	80094ac <HAL_GPIO_ReadPin>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d003      	beq.n	800557e <checkAktifCalisma+0x69a>
 8005576:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <checkAktifCalisma+0x704>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d040      	beq.n	8005600 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800557e:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <checkAktifCalisma+0x708>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	f083 0301 	eor.w	r3, r3, #1
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d039      	beq.n	8005600 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800558c:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <checkAktifCalisma+0x70c>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f083 0301 	eor.w	r3, r3, #1
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d032      	beq.n	8005600 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800559a:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <checkAktifCalisma+0x710>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f083 0301 	eor.w	r3, r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02b      	beq.n	8005600 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <checkAktifCalisma+0x714>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f083 0301 	eor.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d024      	beq.n	8005600 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <checkAktifCalisma+0x718>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f083 0301 	eor.w	r3, r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01d      	beq.n	8005600 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80055c4:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <checkAktifCalisma+0x704>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e01c      	b.n	8005606 <checkAktifCalisma+0x722>
 80055cc:	40010c00 	.word	0x40010c00
 80055d0:	20000251 	.word	0x20000251
 80055d4:	20000243 	.word	0x20000243
 80055d8:	20000286 	.word	0x20000286
 80055dc:	20000287 	.word	0x20000287
 80055e0:	40011000 	.word	0x40011000
 80055e4:	20000244 	.word	0x20000244
 80055e8:	2000026a 	.word	0x2000026a
 80055ec:	20000269 	.word	0x20000269
 80055f0:	2000026d 	.word	0x2000026d
 80055f4:	2000026c 	.word	0x2000026c
 80055f8:	2000026b 	.word	0x2000026b
 80055fc:	2000026f 	.word	0x2000026f
		} else {
			devmotoryukaricalisiyor=0;
 8005600:	4b64      	ldr	r3, [pc, #400]	; (8005794 <checkAktifCalisma+0x8b0>)
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005606:	4b63      	ldr	r3, [pc, #396]	; (8005794 <checkAktifCalisma+0x8b0>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800560e:	2201      	movs	r2, #1
 8005610:	2120      	movs	r1, #32
 8005612:	4861      	ldr	r0, [pc, #388]	; (8005798 <checkAktifCalisma+0x8b4>)
 8005614:	f003 ff61 	bl	80094da <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005618:	4b60      	ldr	r3, [pc, #384]	; (800579c <checkAktifCalisma+0x8b8>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800561e:	4b5f      	ldr	r3, [pc, #380]	; (800579c <checkAktifCalisma+0x8b8>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d025      	beq.n	8005672 <checkAktifCalisma+0x78e>
 8005626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800562a:	485d      	ldr	r0, [pc, #372]	; (80057a0 <checkAktifCalisma+0x8bc>)
 800562c:	f003 ff3e 	bl	80094ac <HAL_GPIO_ReadPin>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d007      	beq.n	8005646 <checkAktifCalisma+0x762>
 8005636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800563a:	4857      	ldr	r0, [pc, #348]	; (8005798 <checkAktifCalisma+0x8b4>)
 800563c:	f003 ff36 	bl	80094ac <HAL_GPIO_ReadPin>
 8005640:	4603      	mov	r3, r0
 8005642:	2b01      	cmp	r3, #1
 8005644:	d115      	bne.n	8005672 <checkAktifCalisma+0x78e>
 8005646:	4b57      	ldr	r3, [pc, #348]	; (80057a4 <checkAktifCalisma+0x8c0>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d011      	beq.n	8005672 <checkAktifCalisma+0x78e>
 800564e:	4b56      	ldr	r3, [pc, #344]	; (80057a8 <checkAktifCalisma+0x8c4>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <checkAktifCalisma+0x78e>
 8005656:	4b55      	ldr	r3, [pc, #340]	; (80057ac <checkAktifCalisma+0x8c8>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	f083 0301 	eor.w	r3, r3, #1
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d006      	beq.n	8005672 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005664:	4b52      	ldr	r3, [pc, #328]	; (80057b0 <checkAktifCalisma+0x8cc>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a52      	ldr	r2, [pc, #328]	; (80057b4 <checkAktifCalisma+0x8d0>)
 800566a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800566c:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <checkAktifCalisma+0x8c8>)
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005672:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <checkAktifCalisma+0x8cc>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b4f      	ldr	r3, [pc, #316]	; (80057b4 <checkAktifCalisma+0x8d0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	4a4e      	ldr	r2, [pc, #312]	; (80057b8 <checkAktifCalisma+0x8d4>)
 800567e:	7812      	ldrb	r2, [r2, #0]
 8005680:	4293      	cmp	r3, r2
 8005682:	d303      	bcc.n	800568c <checkAktifCalisma+0x7a8>
 8005684:	4b49      	ldr	r3, [pc, #292]	; (80057ac <checkAktifCalisma+0x8c8>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10d      	bne.n	80056a8 <checkAktifCalisma+0x7c4>
 800568c:	4b45      	ldr	r3, [pc, #276]	; (80057a4 <checkAktifCalisma+0x8c0>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f083 0301 	eor.w	r3, r3, #1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <checkAktifCalisma+0x7c4>
 800569a:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <checkAktifCalisma+0x8c4>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f083 0301 	eor.w	r3, r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80056a8:	2200      	movs	r2, #0
 80056aa:	2120      	movs	r1, #32
 80056ac:	483a      	ldr	r0, [pc, #232]	; (8005798 <checkAktifCalisma+0x8b4>)
 80056ae:	f003 ff14 	bl	80094da <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80056b2:	4b3a      	ldr	r3, [pc, #232]	; (800579c <checkAktifCalisma+0x8b8>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80056b8:	4b3c      	ldr	r3, [pc, #240]	; (80057ac <checkAktifCalisma+0x8c8>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80056be:	4b3f      	ldr	r3, [pc, #252]	; (80057bc <checkAktifCalisma+0x8d8>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 8088 	bne.w	80057d8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <checkAktifCalisma+0x8dc>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d003      	beq.n	80056d8 <checkAktifCalisma+0x7f4>
 80056d0:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <checkAktifCalisma+0x8dc>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d17f      	bne.n	80057d8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80056d8:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <checkAktifCalisma+0x8c0>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d07b      	beq.n	80057d8 <checkAktifCalisma+0x8f4>
 80056e0:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <checkAktifCalisma+0x8c4>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d077      	beq.n	80057d8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	482b      	ldr	r0, [pc, #172]	; (8005798 <checkAktifCalisma+0x8b4>)
 80056ec:	f003 fede 	bl	80094ac <HAL_GPIO_ReadPin>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d170      	bne.n	80057d8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80056f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056fa:	4827      	ldr	r0, [pc, #156]	; (8005798 <checkAktifCalisma+0x8b4>)
 80056fc:	f003 fed6 	bl	80094ac <HAL_GPIO_ReadPin>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <checkAktifCalisma+0x82a>
 8005706:	4b2f      	ldr	r3, [pc, #188]	; (80057c4 <checkAktifCalisma+0x8e0>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d164      	bne.n	80057d8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800570e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005712:	4823      	ldr	r0, [pc, #140]	; (80057a0 <checkAktifCalisma+0x8bc>)
 8005714:	f003 feca 	bl	80094ac <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d10f      	bne.n	800573e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800571e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005722:	481f      	ldr	r0, [pc, #124]	; (80057a0 <checkAktifCalisma+0x8bc>)
 8005724:	f003 fec2 	bl	80094ac <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800572e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005732:	481b      	ldr	r0, [pc, #108]	; (80057a0 <checkAktifCalisma+0x8bc>)
 8005734:	f003 feba 	bl	80094ac <HAL_GPIO_ReadPin>
 8005738:	4603      	mov	r3, r0
 800573a:	2b01      	cmp	r3, #1
 800573c:	d003      	beq.n	8005746 <checkAktifCalisma+0x862>
 800573e:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <checkAktifCalisma+0x8e4>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d048      	beq.n	80057d8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005746:	4b21      	ldr	r3, [pc, #132]	; (80057cc <checkAktifCalisma+0x8e8>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f083 0301 	eor.w	r3, r3, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d041      	beq.n	80057d8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005754:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <checkAktifCalisma+0x8ec>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f083 0301 	eor.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d03a      	beq.n	80057d8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <checkAktifCalisma+0x8f0>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f083 0301 	eor.w	r3, r3, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d033      	beq.n	80057d8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <checkAktifCalisma+0x8b8>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f083 0301 	eor.w	r3, r3, #1
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d02c      	beq.n	80057d8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800577e:	4b05      	ldr	r3, [pc, #20]	; (8005794 <checkAktifCalisma+0x8b0>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	f083 0301 	eor.w	r3, r3, #1
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d025      	beq.n	80057d8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <checkAktifCalisma+0x8e4>)
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	e024      	b.n	80057de <checkAktifCalisma+0x8fa>
 8005794:	2000026a 	.word	0x2000026a
 8005798:	40011000 	.word	0x40011000
 800579c:	2000026e 	.word	0x2000026e
 80057a0:	40010c00 	.word	0x40010c00
 80057a4:	20000286 	.word	0x20000286
 80057a8:	20000287 	.word	0x20000287
 80057ac:	20000266 	.word	0x20000266
 80057b0:	20000210 	.word	0x20000210
 80057b4:	2000021c 	.word	0x2000021c
 80057b8:	2000024a 	.word	0x2000024a
 80057bc:	20000251 	.word	0x20000251
 80057c0:	20000243 	.word	0x20000243
 80057c4:	20000245 	.word	0x20000245
 80057c8:	2000026b 	.word	0x2000026b
 80057cc:	20000269 	.word	0x20000269
 80057d0:	2000026d 	.word	0x2000026d
 80057d4:	2000026c 	.word	0x2000026c
		} else {
			devmotorasagicalisiyor=0;
 80057d8:	4b96      	ldr	r3, [pc, #600]	; (8005a34 <checkAktifCalisma+0xb50>)
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80057de:	4b95      	ldr	r3, [pc, #596]	; (8005a34 <checkAktifCalisma+0xb50>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80057e6:	2201      	movs	r2, #1
 80057e8:	2110      	movs	r1, #16
 80057ea:	4893      	ldr	r0, [pc, #588]	; (8005a38 <checkAktifCalisma+0xb54>)
 80057ec:	f003 fe75 	bl	80094da <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80057f0:	4b92      	ldr	r3, [pc, #584]	; (8005a3c <checkAktifCalisma+0xb58>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80057f6:	4b91      	ldr	r3, [pc, #580]	; (8005a3c <checkAktifCalisma+0xb58>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d024      	beq.n	8005848 <checkAktifCalisma+0x964>
 80057fe:	2140      	movs	r1, #64	; 0x40
 8005800:	488d      	ldr	r0, [pc, #564]	; (8005a38 <checkAktifCalisma+0xb54>)
 8005802:	f003 fe53 	bl	80094ac <HAL_GPIO_ReadPin>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d007      	beq.n	800581c <checkAktifCalisma+0x938>
 800580c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005810:	4889      	ldr	r0, [pc, #548]	; (8005a38 <checkAktifCalisma+0xb54>)
 8005812:	f003 fe4b 	bl	80094ac <HAL_GPIO_ReadPin>
 8005816:	4603      	mov	r3, r0
 8005818:	2b01      	cmp	r3, #1
 800581a:	d115      	bne.n	8005848 <checkAktifCalisma+0x964>
 800581c:	4b88      	ldr	r3, [pc, #544]	; (8005a40 <checkAktifCalisma+0xb5c>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d011      	beq.n	8005848 <checkAktifCalisma+0x964>
 8005824:	4b87      	ldr	r3, [pc, #540]	; (8005a44 <checkAktifCalisma+0xb60>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <checkAktifCalisma+0x964>
 800582c:	4b86      	ldr	r3, [pc, #536]	; (8005a48 <checkAktifCalisma+0xb64>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	f083 0301 	eor.w	r3, r3, #1
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d006      	beq.n	8005848 <checkAktifCalisma+0x964>
			timer2=millis;
 800583a:	4b84      	ldr	r3, [pc, #528]	; (8005a4c <checkAktifCalisma+0xb68>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a84      	ldr	r2, [pc, #528]	; (8005a50 <checkAktifCalisma+0xb6c>)
 8005840:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005842:	4b81      	ldr	r3, [pc, #516]	; (8005a48 <checkAktifCalisma+0xb64>)
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005848:	4b80      	ldr	r3, [pc, #512]	; (8005a4c <checkAktifCalisma+0xb68>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b80      	ldr	r3, [pc, #512]	; (8005a50 <checkAktifCalisma+0xb6c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	4a80      	ldr	r2, [pc, #512]	; (8005a54 <checkAktifCalisma+0xb70>)
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	4293      	cmp	r3, r2
 8005858:	d303      	bcc.n	8005862 <checkAktifCalisma+0x97e>
 800585a:	4b7b      	ldr	r3, [pc, #492]	; (8005a48 <checkAktifCalisma+0xb64>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10d      	bne.n	800587e <checkAktifCalisma+0x99a>
 8005862:	4b77      	ldr	r3, [pc, #476]	; (8005a40 <checkAktifCalisma+0xb5c>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f083 0301 	eor.w	r3, r3, #1
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <checkAktifCalisma+0x99a>
 8005870:	4b74      	ldr	r3, [pc, #464]	; (8005a44 <checkAktifCalisma+0xb60>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f083 0301 	eor.w	r3, r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800587e:	2200      	movs	r2, #0
 8005880:	2110      	movs	r1, #16
 8005882:	486d      	ldr	r0, [pc, #436]	; (8005a38 <checkAktifCalisma+0xb54>)
 8005884:	f003 fe29 	bl	80094da <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005888:	4b6c      	ldr	r3, [pc, #432]	; (8005a3c <checkAktifCalisma+0xb58>)
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800588e:	4b6e      	ldr	r3, [pc, #440]	; (8005a48 <checkAktifCalisma+0xb64>)
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005898:	486f      	ldr	r0, [pc, #444]	; (8005a58 <checkAktifCalisma+0xb74>)
 800589a:	f003 fe07 	bl	80094ac <HAL_GPIO_ReadPin>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d120      	bne.n	80058e6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80058a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058a8:	486b      	ldr	r0, [pc, #428]	; (8005a58 <checkAktifCalisma+0xb74>)
 80058aa:	f003 fdff 	bl	80094ac <HAL_GPIO_ReadPin>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d118      	bne.n	80058e6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80058b4:	2104      	movs	r1, #4
 80058b6:	4868      	ldr	r0, [pc, #416]	; (8005a58 <checkAktifCalisma+0xb74>)
 80058b8:	f003 fdf8 	bl	80094ac <HAL_GPIO_ReadPin>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d111      	bne.n	80058e6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80058c2:	2102      	movs	r1, #2
 80058c4:	4864      	ldr	r0, [pc, #400]	; (8005a58 <checkAktifCalisma+0xb74>)
 80058c6:	f003 fdf1 	bl	80094ac <HAL_GPIO_ReadPin>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80058d0:	2101      	movs	r1, #1
 80058d2:	4861      	ldr	r0, [pc, #388]	; (8005a58 <checkAktifCalisma+0xb74>)
 80058d4:	f003 fdea 	bl	80094ac <HAL_GPIO_ReadPin>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <checkAktifCalisma+0xa02>
			makineStop=1;
 80058de:	4b5f      	ldr	r3, [pc, #380]	; (8005a5c <checkAktifCalisma+0xb78>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	e002      	b.n	80058ec <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80058e6:	4b5d      	ldr	r3, [pc, #372]	; (8005a5c <checkAktifCalisma+0xb78>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058ec:	4b5c      	ldr	r3, [pc, #368]	; (8005a60 <checkAktifCalisma+0xb7c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d144      	bne.n	800597e <checkAktifCalisma+0xa9a>
 80058f4:	4b5b      	ldr	r3, [pc, #364]	; (8005a64 <checkAktifCalisma+0xb80>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d003      	beq.n	8005904 <checkAktifCalisma+0xa20>
 80058fc:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <checkAktifCalisma+0xb80>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d13c      	bne.n	800597e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005904:	2180      	movs	r1, #128	; 0x80
 8005906:	484c      	ldr	r0, [pc, #304]	; (8005a38 <checkAktifCalisma+0xb54>)
 8005908:	f003 fdd0 	bl	80094ac <HAL_GPIO_ReadPin>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <checkAktifCalisma+0xa36>
 8005912:	4b55      	ldr	r3, [pc, #340]	; (8005a68 <checkAktifCalisma+0xb84>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <checkAktifCalisma+0xa4e>
 800591a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800591e:	484e      	ldr	r0, [pc, #312]	; (8005a58 <checkAktifCalisma+0xb74>)
 8005920:	f003 fdc4 	bl	80094ac <HAL_GPIO_ReadPin>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d129      	bne.n	800597e <checkAktifCalisma+0xa9a>
 800592a:	4b4f      	ldr	r3, [pc, #316]	; (8005a68 <checkAktifCalisma+0xb84>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d125      	bne.n	800597e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005932:	2104      	movs	r1, #4
 8005934:	4840      	ldr	r0, [pc, #256]	; (8005a38 <checkAktifCalisma+0xb54>)
 8005936:	f003 fdb9 	bl	80094ac <HAL_GPIO_ReadPin>
 800593a:	4603      	mov	r3, r0
 800593c:	2b01      	cmp	r3, #1
 800593e:	d003      	beq.n	8005948 <checkAktifCalisma+0xa64>
 8005940:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <checkAktifCalisma+0xb88>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d11a      	bne.n	800597e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005948:	2102      	movs	r1, #2
 800594a:	483b      	ldr	r0, [pc, #236]	; (8005a38 <checkAktifCalisma+0xb54>)
 800594c:	f003 fdae 	bl	80094ac <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d113      	bne.n	800597e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005956:	4b46      	ldr	r3, [pc, #280]	; (8005a70 <checkAktifCalisma+0xb8c>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	f083 0301 	eor.w	r3, r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00c      	beq.n	800597e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005964:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <checkAktifCalisma+0xb78>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800596c:	4b41      	ldr	r3, [pc, #260]	; (8005a74 <checkAktifCalisma+0xb90>)
 800596e:	2201      	movs	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005972:	4b36      	ldr	r3, [pc, #216]	; (8005a4c <checkAktifCalisma+0xb68>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a40      	ldr	r2, [pc, #256]	; (8005a78 <checkAktifCalisma+0xb94>)
 8005978:	6013      	str	r3, [r2, #0]
			bekle();
 800597a:	f7ff f935 	bl	8004be8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800597e:	4b33      	ldr	r3, [pc, #204]	; (8005a4c <checkAktifCalisma+0xb68>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <checkAktifCalisma+0xb94>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	4a3c      	ldr	r2, [pc, #240]	; (8005a7c <checkAktifCalisma+0xb98>)
 800598a:	7812      	ldrb	r2, [r2, #0]
 800598c:	4293      	cmp	r3, r2
 800598e:	d211      	bcs.n	80059b4 <checkAktifCalisma+0xad0>
 8005990:	2104      	movs	r1, #4
 8005992:	4829      	ldr	r0, [pc, #164]	; (8005a38 <checkAktifCalisma+0xb54>)
 8005994:	f003 fd8a 	bl	80094ac <HAL_GPIO_ReadPin>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <checkAktifCalisma+0xad0>
 800599e:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <checkAktifCalisma+0xb88>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d006      	beq.n	80059b4 <checkAktifCalisma+0xad0>
 80059a6:	4b2d      	ldr	r3, [pc, #180]	; (8005a5c <checkAktifCalisma+0xb78>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f083 0301 	eor.w	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80059b4:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <checkAktifCalisma+0xb90>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059ba:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <checkAktifCalisma+0xb7c>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d160      	bne.n	8005a84 <checkAktifCalisma+0xba0>
 80059c2:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <checkAktifCalisma+0xb80>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d003      	beq.n	80059d2 <checkAktifCalisma+0xaee>
 80059ca:	4b26      	ldr	r3, [pc, #152]	; (8005a64 <checkAktifCalisma+0xb80>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d158      	bne.n	8005a84 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059d2:	2104      	movs	r1, #4
 80059d4:	4818      	ldr	r0, [pc, #96]	; (8005a38 <checkAktifCalisma+0xb54>)
 80059d6:	f003 fd69 	bl	80094ac <HAL_GPIO_ReadPin>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d003      	beq.n	80059e8 <checkAktifCalisma+0xb04>
 80059e0:	4b22      	ldr	r3, [pc, #136]	; (8005a6c <checkAktifCalisma+0xb88>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d14d      	bne.n	8005a84 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059e8:	2102      	movs	r1, #2
 80059ea:	4813      	ldr	r0, [pc, #76]	; (8005a38 <checkAktifCalisma+0xb54>)
 80059ec:	f003 fd5e 	bl	80094ac <HAL_GPIO_ReadPin>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d146      	bne.n	8005a84 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	480f      	ldr	r0, [pc, #60]	; (8005a38 <checkAktifCalisma+0xb54>)
 80059fa:	f003 fd57 	bl	80094ac <HAL_GPIO_ReadPin>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <checkAktifCalisma+0xb28>
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <checkAktifCalisma+0xb84>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <checkAktifCalisma+0xb40>
 8005a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a10:	4811      	ldr	r0, [pc, #68]	; (8005a58 <checkAktifCalisma+0xb74>)
 8005a12:	f003 fd4b 	bl	80094ac <HAL_GPIO_ReadPin>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d133      	bne.n	8005a84 <checkAktifCalisma+0xba0>
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <checkAktifCalisma+0xb84>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d12f      	bne.n	8005a84 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <checkAktifCalisma+0xb78>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d02b      	beq.n	8005a84 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005a2c:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <checkAktifCalisma+0xb9c>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e02a      	b.n	8005a8a <checkAktifCalisma+0xba6>
 8005a34:	2000026b 	.word	0x2000026b
 8005a38:	40011000 	.word	0x40011000
 8005a3c:	2000026f 	.word	0x2000026f
 8005a40:	20000286 	.word	0x20000286
 8005a44:	20000287 	.word	0x20000287
 8005a48:	20000267 	.word	0x20000267
 8005a4c:	20000210 	.word	0x20000210
 8005a50:	2000021c 	.word	0x2000021c
 8005a54:	2000024a 	.word	0x2000024a
 8005a58:	40010c00 	.word	0x40010c00
 8005a5c:	20000276 	.word	0x20000276
 8005a60:	2000023d 	.word	0x2000023d
 8005a64:	2000023c 	.word	0x2000023c
 8005a68:	20000240 	.word	0x20000240
 8005a6c:	2000023a 	.word	0x2000023a
 8005a70:	20000263 	.word	0x20000263
 8005a74:	20000277 	.word	0x20000277
 8005a78:	20000214 	.word	0x20000214
 8005a7c:	2000024d 	.word	0x2000024d
 8005a80:	20000278 	.word	0x20000278
		} else {
			kapi1butonkontrol=0;
 8005a84:	4b8b      	ldr	r3, [pc, #556]	; (8005cb4 <checkAktifCalisma+0xdd0>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a8a:	4b8b      	ldr	r3, [pc, #556]	; (8005cb8 <checkAktifCalisma+0xdd4>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d121      	bne.n	8005ad6 <checkAktifCalisma+0xbf2>
 8005a92:	4b8a      	ldr	r3, [pc, #552]	; (8005cbc <checkAktifCalisma+0xdd8>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d003      	beq.n	8005aa2 <checkAktifCalisma+0xbbe>
 8005a9a:	4b88      	ldr	r3, [pc, #544]	; (8005cbc <checkAktifCalisma+0xdd8>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d119      	bne.n	8005ad6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005aa2:	2104      	movs	r1, #4
 8005aa4:	4886      	ldr	r0, [pc, #536]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005aa6:	f003 fd01 	bl	80094ac <HAL_GPIO_ReadPin>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d003      	beq.n	8005ab8 <checkAktifCalisma+0xbd4>
 8005ab0:	4b84      	ldr	r3, [pc, #528]	; (8005cc4 <checkAktifCalisma+0xde0>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10e      	bne.n	8005ad6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ab8:	2102      	movs	r1, #2
 8005aba:	4881      	ldr	r0, [pc, #516]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005abc:	f003 fcf6 	bl	80094ac <HAL_GPIO_ReadPin>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d107      	bne.n	8005ad6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005ac6:	4b80      	ldr	r3, [pc, #512]	; (8005cc8 <checkAktifCalisma+0xde4>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005ace:	4b7f      	ldr	r3, [pc, #508]	; (8005ccc <checkAktifCalisma+0xde8>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e002      	b.n	8005adc <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005ad6:	4b7d      	ldr	r3, [pc, #500]	; (8005ccc <checkAktifCalisma+0xde8>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005adc:	4b75      	ldr	r3, [pc, #468]	; (8005cb4 <checkAktifCalisma+0xdd0>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <checkAktifCalisma+0xc10>
 8005ae4:	4b79      	ldr	r3, [pc, #484]	; (8005ccc <checkAktifCalisma+0xde8>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d103      	bne.n	8005af4 <checkAktifCalisma+0xc10>
 8005aec:	4b78      	ldr	r3, [pc, #480]	; (8005cd0 <checkAktifCalisma+0xdec>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005af4:	2201      	movs	r2, #1
 8005af6:	2180      	movs	r1, #128	; 0x80
 8005af8:	4876      	ldr	r0, [pc, #472]	; (8005cd4 <checkAktifCalisma+0xdf0>)
 8005afa:	f003 fcee 	bl	80094da <HAL_GPIO_WritePin>
 8005afe:	e004      	b.n	8005b0a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b00:	2200      	movs	r2, #0
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	4873      	ldr	r0, [pc, #460]	; (8005cd4 <checkAktifCalisma+0xdf0>)
 8005b06:	f003 fce8 	bl	80094da <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b0a:	4b73      	ldr	r3, [pc, #460]	; (8005cd8 <checkAktifCalisma+0xdf4>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d141      	bne.n	8005b96 <checkAktifCalisma+0xcb2>
 8005b12:	4b6a      	ldr	r3, [pc, #424]	; (8005cbc <checkAktifCalisma+0xdd8>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d003      	beq.n	8005b22 <checkAktifCalisma+0xc3e>
 8005b1a:	4b68      	ldr	r3, [pc, #416]	; (8005cbc <checkAktifCalisma+0xdd8>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d139      	bne.n	8005b96 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b26:	4866      	ldr	r0, [pc, #408]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005b28:	f003 fcc0 	bl	80094ac <HAL_GPIO_ReadPin>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <checkAktifCalisma+0xc56>
 8005b32:	4b6a      	ldr	r3, [pc, #424]	; (8005cdc <checkAktifCalisma+0xdf8>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <checkAktifCalisma+0xc6e>
 8005b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b3e:	4868      	ldr	r0, [pc, #416]	; (8005ce0 <checkAktifCalisma+0xdfc>)
 8005b40:	f003 fcb4 	bl	80094ac <HAL_GPIO_ReadPin>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d125      	bne.n	8005b96 <checkAktifCalisma+0xcb2>
 8005b4a:	4b64      	ldr	r3, [pc, #400]	; (8005cdc <checkAktifCalisma+0xdf8>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d121      	bne.n	8005b96 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b52:	2102      	movs	r1, #2
 8005b54:	485a      	ldr	r0, [pc, #360]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005b56:	f003 fca9 	bl	80094ac <HAL_GPIO_ReadPin>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d11a      	bne.n	8005b96 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b60:	2104      	movs	r1, #4
 8005b62:	4857      	ldr	r0, [pc, #348]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005b64:	f003 fca2 	bl	80094ac <HAL_GPIO_ReadPin>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d113      	bne.n	8005b96 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005b6e:	4b56      	ldr	r3, [pc, #344]	; (8005cc8 <checkAktifCalisma+0xde4>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00f      	beq.n	8005b96 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005b76:	4b5b      	ldr	r3, [pc, #364]	; (8005ce4 <checkAktifCalisma+0xe00>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f083 0301 	eor.w	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005b84:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <checkAktifCalisma+0xe04>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b8a:	4b58      	ldr	r3, [pc, #352]	; (8005cec <checkAktifCalisma+0xe08>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a58      	ldr	r2, [pc, #352]	; (8005cf0 <checkAktifCalisma+0xe0c>)
 8005b90:	6013      	str	r3, [r2, #0]
			bekle();
 8005b92:	f7ff f829 	bl	8004be8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005b96:	4b55      	ldr	r3, [pc, #340]	; (8005cec <checkAktifCalisma+0xe08>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b55      	ldr	r3, [pc, #340]	; (8005cf0 <checkAktifCalisma+0xe0c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	4a54      	ldr	r2, [pc, #336]	; (8005cf4 <checkAktifCalisma+0xe10>)
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d20d      	bcs.n	8005bc4 <checkAktifCalisma+0xce0>
 8005ba8:	2102      	movs	r1, #2
 8005baa:	4845      	ldr	r0, [pc, #276]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005bac:	f003 fc7e 	bl	80094ac <HAL_GPIO_ReadPin>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <checkAktifCalisma+0xce0>
 8005bb6:	4b44      	ldr	r3, [pc, #272]	; (8005cc8 <checkAktifCalisma+0xde4>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f083 0301 	eor.w	r3, r3, #1
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005bc4:	4b48      	ldr	r3, [pc, #288]	; (8005ce8 <checkAktifCalisma+0xe04>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005bca:	4b43      	ldr	r3, [pc, #268]	; (8005cd8 <checkAktifCalisma+0xdf4>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d135      	bne.n	8005c3e <checkAktifCalisma+0xd5a>
 8005bd2:	4b3a      	ldr	r3, [pc, #232]	; (8005cbc <checkAktifCalisma+0xdd8>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d003      	beq.n	8005be2 <checkAktifCalisma+0xcfe>
 8005bda:	4b38      	ldr	r3, [pc, #224]	; (8005cbc <checkAktifCalisma+0xdd8>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d12d      	bne.n	8005c3e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005be6:	4836      	ldr	r0, [pc, #216]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005be8:	f003 fc60 	bl	80094ac <HAL_GPIO_ReadPin>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <checkAktifCalisma+0xd16>
 8005bf2:	4b3a      	ldr	r3, [pc, #232]	; (8005cdc <checkAktifCalisma+0xdf8>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <checkAktifCalisma+0xd2e>
 8005bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bfe:	4838      	ldr	r0, [pc, #224]	; (8005ce0 <checkAktifCalisma+0xdfc>)
 8005c00:	f003 fc54 	bl	80094ac <HAL_GPIO_ReadPin>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d119      	bne.n	8005c3e <checkAktifCalisma+0xd5a>
 8005c0a:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <checkAktifCalisma+0xdf8>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d115      	bne.n	8005c3e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c12:	2102      	movs	r1, #2
 8005c14:	482a      	ldr	r0, [pc, #168]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005c16:	f003 fc49 	bl	80094ac <HAL_GPIO_ReadPin>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10e      	bne.n	8005c3e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c20:	2104      	movs	r1, #4
 8005c22:	4827      	ldr	r0, [pc, #156]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005c24:	f003 fc42 	bl	80094ac <HAL_GPIO_ReadPin>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d107      	bne.n	8005c3e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005c2e:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <checkAktifCalisma+0xde4>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005c36:	4b30      	ldr	r3, [pc, #192]	; (8005cf8 <checkAktifCalisma+0xe14>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e002      	b.n	8005c44 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <checkAktifCalisma+0xe14>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c44:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <checkAktifCalisma+0xdf4>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d11d      	bne.n	8005c88 <checkAktifCalisma+0xda4>
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	; (8005cbc <checkAktifCalisma+0xdd8>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d003      	beq.n	8005c5c <checkAktifCalisma+0xd78>
 8005c54:	4b19      	ldr	r3, [pc, #100]	; (8005cbc <checkAktifCalisma+0xdd8>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d115      	bne.n	8005c88 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	4818      	ldr	r0, [pc, #96]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005c60:	f003 fc24 	bl	80094ac <HAL_GPIO_ReadPin>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d10e      	bne.n	8005c88 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c6a:	2104      	movs	r1, #4
 8005c6c:	4814      	ldr	r0, [pc, #80]	; (8005cc0 <checkAktifCalisma+0xddc>)
 8005c6e:	f003 fc1d 	bl	80094ac <HAL_GPIO_ReadPin>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d107      	bne.n	8005c88 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <checkAktifCalisma+0xde4>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <checkAktifCalisma+0xe18>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005c88:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <checkAktifCalisma+0xe18>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <checkAktifCalisma+0xe14>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d107      	bne.n	8005ca6 <checkAktifCalisma+0xdc2>
 8005c96:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <checkAktifCalisma+0xe18>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <checkAktifCalisma+0xdc2>
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <checkAktifCalisma+0xe04>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02c      	beq.n	8005d00 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	480a      	ldr	r0, [pc, #40]	; (8005cd4 <checkAktifCalisma+0xdf0>)
 8005cac:	f003 fc15 	bl	80094da <HAL_GPIO_WritePin>
 8005cb0:	e02b      	b.n	8005d0a <checkAktifCalisma+0xe26>
 8005cb2:	bf00      	nop
 8005cb4:	20000278 	.word	0x20000278
 8005cb8:	2000023d 	.word	0x2000023d
 8005cbc:	2000023c 	.word	0x2000023c
 8005cc0:	40011000 	.word	0x40011000
 8005cc4:	2000023a 	.word	0x2000023a
 8005cc8:	20000276 	.word	0x20000276
 8005ccc:	20000279 	.word	0x20000279
 8005cd0:	20000277 	.word	0x20000277
 8005cd4:	40010800 	.word	0x40010800
 8005cd8:	2000023e 	.word	0x2000023e
 8005cdc:	20000240 	.word	0x20000240
 8005ce0:	40010c00 	.word	0x40010c00
 8005ce4:	20000263 	.word	0x20000263
 8005ce8:	2000027a 	.word	0x2000027a
 8005cec:	20000210 	.word	0x20000210
 8005cf0:	20000214 	.word	0x20000214
 8005cf4:	2000024e 	.word	0x2000024e
 8005cf8:	2000027b 	.word	0x2000027b
 8005cfc:	2000027c 	.word	0x2000027c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d00:	2200      	movs	r2, #0
 8005d02:	2140      	movs	r1, #64	; 0x40
 8005d04:	488d      	ldr	r0, [pc, #564]	; (8005f3c <checkAktifCalisma+0x1058>)
 8005d06:	f003 fbe8 	bl	80094da <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005d0a:	4b8d      	ldr	r3, [pc, #564]	; (8005f40 <checkAktifCalisma+0x105c>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <checkAktifCalisma+0xe36>
 8005d12:	4b8b      	ldr	r3, [pc, #556]	; (8005f40 <checkAktifCalisma+0x105c>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d115      	bne.n	8005d46 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005d1a:	2104      	movs	r1, #4
 8005d1c:	4889      	ldr	r0, [pc, #548]	; (8005f44 <checkAktifCalisma+0x1060>)
 8005d1e:	f003 fbc5 	bl	80094ac <HAL_GPIO_ReadPin>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d003      	beq.n	8005d30 <checkAktifCalisma+0xe4c>
 8005d28:	4b87      	ldr	r3, [pc, #540]	; (8005f48 <checkAktifCalisma+0x1064>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005d30:	2102      	movs	r1, #2
 8005d32:	4884      	ldr	r0, [pc, #528]	; (8005f44 <checkAktifCalisma+0x1060>)
 8005d34:	f003 fbba 	bl	80094ac <HAL_GPIO_ReadPin>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005d3e:	4b83      	ldr	r3, [pc, #524]	; (8005f4c <checkAktifCalisma+0x1068>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	e002      	b.n	8005d4c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005d46:	4b81      	ldr	r3, [pc, #516]	; (8005f4c <checkAktifCalisma+0x1068>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005d4c:	4b7c      	ldr	r3, [pc, #496]	; (8005f40 <checkAktifCalisma+0x105c>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d003      	beq.n	8005d5c <checkAktifCalisma+0xe78>
 8005d54:	4b7a      	ldr	r3, [pc, #488]	; (8005f40 <checkAktifCalisma+0x105c>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d111      	bne.n	8005d80 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d5c:	2102      	movs	r1, #2
 8005d5e:	4879      	ldr	r0, [pc, #484]	; (8005f44 <checkAktifCalisma+0x1060>)
 8005d60:	f003 fba4 	bl	80094ac <HAL_GPIO_ReadPin>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d10a      	bne.n	8005d80 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005d6a:	2104      	movs	r1, #4
 8005d6c:	4875      	ldr	r0, [pc, #468]	; (8005f44 <checkAktifCalisma+0x1060>)
 8005d6e:	f003 fb9d 	bl	80094ac <HAL_GPIO_ReadPin>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d103      	bne.n	8005d80 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005d78:	4b75      	ldr	r3, [pc, #468]	; (8005f50 <checkAktifCalisma+0x106c>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e002      	b.n	8005d86 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005d80:	4b73      	ldr	r3, [pc, #460]	; (8005f50 <checkAktifCalisma+0x106c>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005d86:	4b71      	ldr	r3, [pc, #452]	; (8005f4c <checkAktifCalisma+0x1068>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00f      	beq.n	8005dae <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005d8e:	4b71      	ldr	r3, [pc, #452]	; (8005f54 <checkAktifCalisma+0x1070>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d10b      	bne.n	8005dae <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005d96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d9a:	486f      	ldr	r0, [pc, #444]	; (8005f58 <checkAktifCalisma+0x1074>)
 8005d9c:	f003 fb86 	bl	80094ac <HAL_GPIO_ReadPin>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005da6:	4b6d      	ldr	r3, [pc, #436]	; (8005f5c <checkAktifCalisma+0x1078>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005dae:	4b6b      	ldr	r3, [pc, #428]	; (8005f5c <checkAktifCalisma+0x1078>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005db4:	4b66      	ldr	r3, [pc, #408]	; (8005f50 <checkAktifCalisma+0x106c>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00f      	beq.n	8005ddc <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005dbc:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <checkAktifCalisma+0x1070>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10b      	bne.n	8005ddc <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dc8:	4863      	ldr	r0, [pc, #396]	; (8005f58 <checkAktifCalisma+0x1074>)
 8005dca:	f003 fb6f 	bl	80094ac <HAL_GPIO_ReadPin>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d103      	bne.n	8005ddc <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005dd4:	4b62      	ldr	r3, [pc, #392]	; (8005f60 <checkAktifCalisma+0x107c>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005ddc:	4b60      	ldr	r3, [pc, #384]	; (8005f60 <checkAktifCalisma+0x107c>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005de2:	4b60      	ldr	r3, [pc, #384]	; (8005f64 <checkAktifCalisma+0x1080>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d137      	bne.n	8005e5a <checkAktifCalisma+0xf76>
 8005dea:	4b5f      	ldr	r3, [pc, #380]	; (8005f68 <checkAktifCalisma+0x1084>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d003      	beq.n	8005dfa <checkAktifCalisma+0xf16>
 8005df2:	4b5d      	ldr	r3, [pc, #372]	; (8005f68 <checkAktifCalisma+0x1084>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d12f      	bne.n	8005e5a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005dfa:	4b54      	ldr	r3, [pc, #336]	; (8005f4c <checkAktifCalisma+0x1068>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <checkAktifCalisma+0xf26>
 8005e02:	4b53      	ldr	r3, [pc, #332]	; (8005f50 <checkAktifCalisma+0x106c>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d027      	beq.n	8005e5a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e0e:	484d      	ldr	r0, [pc, #308]	; (8005f44 <checkAktifCalisma+0x1060>)
 8005e10:	f003 fb4c 	bl	80094ac <HAL_GPIO_ReadPin>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d103      	bne.n	8005e22 <checkAktifCalisma+0xf3e>
 8005e1a:	4b4e      	ldr	r3, [pc, #312]	; (8005f54 <checkAktifCalisma+0x1070>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e22:	4b4e      	ldr	r3, [pc, #312]	; (8005f5c <checkAktifCalisma+0x1078>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d103      	bne.n	8005e32 <checkAktifCalisma+0xf4e>
 8005e2a:	4b4d      	ldr	r3, [pc, #308]	; (8005f60 <checkAktifCalisma+0x107c>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d013      	beq.n	8005e5a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005e32:	4b4e      	ldr	r3, [pc, #312]	; (8005f6c <checkAktifCalisma+0x1088>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00f      	beq.n	8005e5a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005e3a:	4b4d      	ldr	r3, [pc, #308]	; (8005f70 <checkAktifCalisma+0x108c>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f083 0301 	eor.w	r3, r3, #1
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005e48:	4b4a      	ldr	r3, [pc, #296]	; (8005f74 <checkAktifCalisma+0x1090>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005e4e:	4b4a      	ldr	r3, [pc, #296]	; (8005f78 <checkAktifCalisma+0x1094>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a4a      	ldr	r2, [pc, #296]	; (8005f7c <checkAktifCalisma+0x1098>)
 8005e54:	6013      	str	r3, [r2, #0]
			bekle();
 8005e56:	f7fe fec7 	bl	8004be8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005e5a:	4b47      	ldr	r3, [pc, #284]	; (8005f78 <checkAktifCalisma+0x1094>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4b47      	ldr	r3, [pc, #284]	; (8005f7c <checkAktifCalisma+0x1098>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	4a46      	ldr	r2, [pc, #280]	; (8005f80 <checkAktifCalisma+0x109c>)
 8005e66:	7812      	ldrb	r2, [r2, #0]
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d214      	bcs.n	8005e96 <checkAktifCalisma+0xfb2>
 8005e6c:	4b37      	ldr	r3, [pc, #220]	; (8005f4c <checkAktifCalisma+0x1068>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f083 0301 	eor.w	r3, r3, #1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d006      	beq.n	8005e88 <checkAktifCalisma+0xfa4>
 8005e7a:	4b35      	ldr	r3, [pc, #212]	; (8005f50 <checkAktifCalisma+0x106c>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f083 0301 	eor.w	r3, r3, #1
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <checkAktifCalisma+0xfb2>
 8005e88:	4b38      	ldr	r3, [pc, #224]	; (8005f6c <checkAktifCalisma+0x1088>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f083 0301 	eor.w	r3, r3, #1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005e96:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <checkAktifCalisma+0x1090>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e9c:	4b31      	ldr	r3, [pc, #196]	; (8005f64 <checkAktifCalisma+0x1080>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d12b      	bne.n	8005efc <checkAktifCalisma+0x1018>
 8005ea4:	4b30      	ldr	r3, [pc, #192]	; (8005f68 <checkAktifCalisma+0x1084>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d003      	beq.n	8005eb4 <checkAktifCalisma+0xfd0>
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <checkAktifCalisma+0x1084>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d123      	bne.n	8005efc <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005eb4:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <checkAktifCalisma+0x1068>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <checkAktifCalisma+0xfe0>
 8005ebc:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <checkAktifCalisma+0x106c>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ec8:	481e      	ldr	r0, [pc, #120]	; (8005f44 <checkAktifCalisma+0x1060>)
 8005eca:	f003 faef 	bl	80094ac <HAL_GPIO_ReadPin>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <checkAktifCalisma+0xff8>
 8005ed4:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <checkAktifCalisma+0x1070>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005edc:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <checkAktifCalisma+0x1078>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d103      	bne.n	8005eec <checkAktifCalisma+0x1008>
 8005ee4:	4b1e      	ldr	r3, [pc, #120]	; (8005f60 <checkAktifCalisma+0x107c>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005eec:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <checkAktifCalisma+0x1088>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005ef4:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <checkAktifCalisma+0x10a0>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e002      	b.n	8005f02 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005efc:	4b21      	ldr	r3, [pc, #132]	; (8005f84 <checkAktifCalisma+0x10a0>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f02:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <checkAktifCalisma+0x1080>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d140      	bne.n	8005f8c <checkAktifCalisma+0x10a8>
 8005f0a:	4b17      	ldr	r3, [pc, #92]	; (8005f68 <checkAktifCalisma+0x1084>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d003      	beq.n	8005f1a <checkAktifCalisma+0x1036>
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <checkAktifCalisma+0x1084>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d138      	bne.n	8005f8c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <checkAktifCalisma+0x1068>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <checkAktifCalisma+0x1046>
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <checkAktifCalisma+0x106c>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d030      	beq.n	8005f8c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <checkAktifCalisma+0x1088>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02c      	beq.n	8005f8c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <checkAktifCalisma+0x10a4>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e02b      	b.n	8005f92 <checkAktifCalisma+0x10ae>
 8005f3a:	bf00      	nop
 8005f3c:	40010800 	.word	0x40010800
 8005f40:	20000241 	.word	0x20000241
 8005f44:	40011000 	.word	0x40011000
 8005f48:	2000023a 	.word	0x2000023a
 8005f4c:	20000280 	.word	0x20000280
 8005f50:	20000281 	.word	0x20000281
 8005f54:	20000240 	.word	0x20000240
 8005f58:	40010c00 	.word	0x40010c00
 8005f5c:	20000290 	.word	0x20000290
 8005f60:	20000291 	.word	0x20000291
 8005f64:	2000023f 	.word	0x2000023f
 8005f68:	2000023c 	.word	0x2000023c
 8005f6c:	20000276 	.word	0x20000276
 8005f70:	20000263 	.word	0x20000263
 8005f74:	2000027d 	.word	0x2000027d
 8005f78:	20000210 	.word	0x20000210
 8005f7c:	20000214 	.word	0x20000214
 8005f80:	2000024f 	.word	0x2000024f
 8005f84:	2000027e 	.word	0x2000027e
 8005f88:	2000027f 	.word	0x2000027f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005f8c:	4b8b      	ldr	r3, [pc, #556]	; (80061bc <checkAktifCalisma+0x12d8>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005f92:	4b8b      	ldr	r3, [pc, #556]	; (80061c0 <checkAktifCalisma+0x12dc>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <checkAktifCalisma+0x10c6>
 8005f9a:	4b8a      	ldr	r3, [pc, #552]	; (80061c4 <checkAktifCalisma+0x12e0>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <checkAktifCalisma+0x10c6>
 8005fa2:	4b86      	ldr	r3, [pc, #536]	; (80061bc <checkAktifCalisma+0x12d8>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005faa:	2201      	movs	r2, #1
 8005fac:	2120      	movs	r1, #32
 8005fae:	4886      	ldr	r0, [pc, #536]	; (80061c8 <checkAktifCalisma+0x12e4>)
 8005fb0:	f003 fa93 	bl	80094da <HAL_GPIO_WritePin>
 8005fb4:	e004      	b.n	8005fc0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2120      	movs	r1, #32
 8005fba:	4883      	ldr	r0, [pc, #524]	; (80061c8 <checkAktifCalisma+0x12e4>)
 8005fbc:	f003 fa8d 	bl	80094da <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005fc0:	4b82      	ldr	r3, [pc, #520]	; (80061cc <checkAktifCalisma+0x12e8>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00e      	beq.n	8005fe6 <checkAktifCalisma+0x1102>
 8005fc8:	2102      	movs	r1, #2
 8005fca:	4881      	ldr	r0, [pc, #516]	; (80061d0 <checkAktifCalisma+0x12ec>)
 8005fcc:	f003 fa6e 	bl	80094ac <HAL_GPIO_ReadPin>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d107      	bne.n	8005fe6 <checkAktifCalisma+0x1102>
 8005fd6:	4b7f      	ldr	r3, [pc, #508]	; (80061d4 <checkAktifCalisma+0x12f0>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <checkAktifCalisma+0x1102>
 8005fde:	4b7e      	ldr	r3, [pc, #504]	; (80061d8 <checkAktifCalisma+0x12f4>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d112      	bne.n	800600c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005fe6:	4b7d      	ldr	r3, [pc, #500]	; (80061dc <checkAktifCalisma+0x12f8>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d066      	beq.n	80060bc <checkAktifCalisma+0x11d8>
 8005fee:	2104      	movs	r1, #4
 8005ff0:	4877      	ldr	r0, [pc, #476]	; (80061d0 <checkAktifCalisma+0x12ec>)
 8005ff2:	f003 fa5b 	bl	80094ac <HAL_GPIO_ReadPin>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d15f      	bne.n	80060bc <checkAktifCalisma+0x11d8>
 8005ffc:	4b75      	ldr	r3, [pc, #468]	; (80061d4 <checkAktifCalisma+0x12f0>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d05b      	beq.n	80060bc <checkAktifCalisma+0x11d8>
 8006004:	4b74      	ldr	r3, [pc, #464]	; (80061d8 <checkAktifCalisma+0x12f4>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d057      	beq.n	80060bc <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800600c:	4b74      	ldr	r3, [pc, #464]	; (80061e0 <checkAktifCalisma+0x12fc>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	4b72      	ldr	r3, [pc, #456]	; (80061e0 <checkAktifCalisma+0x12fc>)
 8006016:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006018:	4b71      	ldr	r3, [pc, #452]	; (80061e0 <checkAktifCalisma+0x12fc>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b09      	cmp	r3, #9
 800601e:	d908      	bls.n	8006032 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006020:	4b6f      	ldr	r3, [pc, #444]	; (80061e0 <checkAktifCalisma+0x12fc>)
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006026:	4b6f      	ldr	r3, [pc, #444]	; (80061e4 <checkAktifCalisma+0x1300>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	b2da      	uxtb	r2, r3
 800602e:	4b6d      	ldr	r3, [pc, #436]	; (80061e4 <checkAktifCalisma+0x1300>)
 8006030:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006032:	4b6c      	ldr	r3, [pc, #432]	; (80061e4 <checkAktifCalisma+0x1300>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b09      	cmp	r3, #9
 8006038:	d908      	bls.n	800604c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800603a:	4b6a      	ldr	r3, [pc, #424]	; (80061e4 <checkAktifCalisma+0x1300>)
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006040:	4b69      	ldr	r3, [pc, #420]	; (80061e8 <checkAktifCalisma+0x1304>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	b2da      	uxtb	r2, r3
 8006048:	4b67      	ldr	r3, [pc, #412]	; (80061e8 <checkAktifCalisma+0x1304>)
 800604a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 800604c:	4b66      	ldr	r3, [pc, #408]	; (80061e8 <checkAktifCalisma+0x1304>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b09      	cmp	r3, #9
 8006052:	d908      	bls.n	8006066 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006054:	4b64      	ldr	r3, [pc, #400]	; (80061e8 <checkAktifCalisma+0x1304>)
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800605a:	4b64      	ldr	r3, [pc, #400]	; (80061ec <checkAktifCalisma+0x1308>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	3301      	adds	r3, #1
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b62      	ldr	r3, [pc, #392]	; (80061ec <checkAktifCalisma+0x1308>)
 8006064:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006066:	4b61      	ldr	r3, [pc, #388]	; (80061ec <checkAktifCalisma+0x1308>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b09      	cmp	r3, #9
 800606c:	d908      	bls.n	8006080 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800606e:	4b5f      	ldr	r3, [pc, #380]	; (80061ec <checkAktifCalisma+0x1308>)
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006074:	4b5e      	ldr	r3, [pc, #376]	; (80061f0 <checkAktifCalisma+0x130c>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b5c      	ldr	r3, [pc, #368]	; (80061f0 <checkAktifCalisma+0x130c>)
 800607e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006080:	4b5b      	ldr	r3, [pc, #364]	; (80061f0 <checkAktifCalisma+0x130c>)
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	4b5b      	ldr	r3, [pc, #364]	; (80061f4 <checkAktifCalisma+0x1310>)
 8006086:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800608a:	4b58      	ldr	r3, [pc, #352]	; (80061ec <checkAktifCalisma+0x1308>)
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	4b59      	ldr	r3, [pc, #356]	; (80061f4 <checkAktifCalisma+0x1310>)
 8006090:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006092:	4b55      	ldr	r3, [pc, #340]	; (80061e8 <checkAktifCalisma+0x1304>)
 8006094:	781a      	ldrb	r2, [r3, #0]
 8006096:	4b57      	ldr	r3, [pc, #348]	; (80061f4 <checkAktifCalisma+0x1310>)
 8006098:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800609a:	4b52      	ldr	r3, [pc, #328]	; (80061e4 <checkAktifCalisma+0x1300>)
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	4b55      	ldr	r3, [pc, #340]	; (80061f4 <checkAktifCalisma+0x1310>)
 80060a0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80060a2:	4b4f      	ldr	r3, [pc, #316]	; (80061e0 <checkAktifCalisma+0x12fc>)
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	4b53      	ldr	r3, [pc, #332]	; (80061f4 <checkAktifCalisma+0x1310>)
 80060a8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80060aa:	4b53      	ldr	r3, [pc, #332]	; (80061f8 <checkAktifCalisma+0x1314>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80060b0:	4b46      	ldr	r3, [pc, #280]	; (80061cc <checkAktifCalisma+0x12e8>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80060b6:	4b49      	ldr	r3, [pc, #292]	; (80061dc <checkAktifCalisma+0x12f8>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80060bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060c0:	484e      	ldr	r0, [pc, #312]	; (80061fc <checkAktifCalisma+0x1318>)
 80060c2:	f003 f9f3 	bl	80094ac <HAL_GPIO_ReadPin>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d016      	beq.n	80060fa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80060cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060d0:	484a      	ldr	r0, [pc, #296]	; (80061fc <checkAktifCalisma+0x1318>)
 80060d2:	f003 f9eb 	bl	80094ac <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00e      	beq.n	80060fa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80060dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060e0:	4846      	ldr	r0, [pc, #280]	; (80061fc <checkAktifCalisma+0x1318>)
 80060e2:	f003 f9e3 	bl	80094ac <HAL_GPIO_ReadPin>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d006      	beq.n	80060fa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80060ec:	2140      	movs	r1, #64	; 0x40
 80060ee:	4838      	ldr	r0, [pc, #224]	; (80061d0 <checkAktifCalisma+0x12ec>)
 80060f0:	f003 f9dc 	bl	80094ac <HAL_GPIO_ReadPin>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <checkAktifCalisma+0x121e>
			startBasili=1;
 80060fa:	4b41      	ldr	r3, [pc, #260]	; (8006200 <checkAktifCalisma+0x131c>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	e002      	b.n	8006108 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006102:	4b3f      	ldr	r3, [pc, #252]	; (8006200 <checkAktifCalisma+0x131c>)
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006108:	4b3d      	ldr	r3, [pc, #244]	; (8006200 <checkAktifCalisma+0x131c>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d016      	beq.n	800613e <checkAktifCalisma+0x125a>
 8006110:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006114:	4839      	ldr	r0, [pc, #228]	; (80061fc <checkAktifCalisma+0x1318>)
 8006116:	f003 f9c9 	bl	80094ac <HAL_GPIO_ReadPin>
 800611a:	4603      	mov	r3, r0
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10e      	bne.n	800613e <checkAktifCalisma+0x125a>
			hataVar=1;
 8006120:	4b38      	ldr	r3, [pc, #224]	; (8006204 <checkAktifCalisma+0x1320>)
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006126:	2001      	movs	r0, #1
 8006128:	f7fa fd7a 	bl	8000c20 <hataKoduLcdGoster>
			hata2EEPROM(1);
 800612c:	2001      	movs	r0, #1
 800612e:	f7fa fd1d 	bl	8000b6c <hata2EEPROM>
			convertAndSendData();
 8006132:	f001 fc8d 	bl	8007a50 <convertAndSendData>
			acilstophatasi=1;
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <checkAktifCalisma+0x1324>)
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e018      	b.n	8006170 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800613e:	4b32      	ldr	r3, [pc, #200]	; (8006208 <checkAktifCalisma+0x1324>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d014      	beq.n	8006170 <checkAktifCalisma+0x128c>
 8006146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800614a:	482c      	ldr	r0, [pc, #176]	; (80061fc <checkAktifCalisma+0x1318>)
 800614c:	f003 f9ae 	bl	80094ac <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10c      	bne.n	8006170 <checkAktifCalisma+0x128c>
 8006156:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <checkAktifCalisma+0x131c>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f083 0301 	eor.w	r3, r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006164:	4b28      	ldr	r3, [pc, #160]	; (8006208 <checkAktifCalisma+0x1324>)
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800616a:	2001      	movs	r0, #1
 800616c:	f7fe fce8 	bl	8004b40 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006170:	4b26      	ldr	r3, [pc, #152]	; (800620c <checkAktifCalisma+0x1328>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f083 0301 	eor.w	r3, r3, #1
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d04e      	beq.n	800621c <checkAktifCalisma+0x1338>
 800617e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006182:	481e      	ldr	r0, [pc, #120]	; (80061fc <checkAktifCalisma+0x1318>)
 8006184:	f003 f992 	bl	80094ac <HAL_GPIO_ReadPin>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <checkAktifCalisma+0x12b2>
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <checkAktifCalisma+0x132c>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d042      	beq.n	800621c <checkAktifCalisma+0x1338>
 8006196:	4b1f      	ldr	r3, [pc, #124]	; (8006214 <checkAktifCalisma+0x1330>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d13e      	bne.n	800621c <checkAktifCalisma+0x1338>
			hataVar=1;
 800619e:	4b19      	ldr	r3, [pc, #100]	; (8006204 <checkAktifCalisma+0x1320>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80061a4:	2002      	movs	r0, #2
 80061a6:	f7fa fd3b 	bl	8000c20 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80061aa:	2002      	movs	r0, #2
 80061ac:	f7fa fcde 	bl	8000b6c <hata2EEPROM>
			convertAndSendData();
 80061b0:	f001 fc4e 	bl	8007a50 <convertAndSendData>
			emniyetCercevesihatasi=1;
 80061b4:	4b18      	ldr	r3, [pc, #96]	; (8006218 <checkAktifCalisma+0x1334>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e047      	b.n	800624c <checkAktifCalisma+0x1368>
 80061bc:	2000027f 	.word	0x2000027f
 80061c0:	2000027e 	.word	0x2000027e
 80061c4:	2000027d 	.word	0x2000027d
 80061c8:	40010800 	.word	0x40010800
 80061cc:	20000273 	.word	0x20000273
 80061d0:	40011000 	.word	0x40011000
 80061d4:	2000023a 	.word	0x2000023a
 80061d8:	20000276 	.word	0x20000276
 80061dc:	20000274 	.word	0x20000274
 80061e0:	20000231 	.word	0x20000231
 80061e4:	20000232 	.word	0x20000232
 80061e8:	20000000 	.word	0x20000000
 80061ec:	20000001 	.word	0x20000001
 80061f0:	20000233 	.word	0x20000233
 80061f4:	2000012c 	.word	0x2000012c
 80061f8:	20000260 	.word	0x20000260
 80061fc:	40010c00 	.word	0x40010c00
 8006200:	20000282 	.word	0x20000282
 8006204:	20000289 	.word	0x20000289
 8006208:	20000284 	.word	0x20000284
 800620c:	2000028b 	.word	0x2000028b
 8006210:	20000295 	.word	0x20000295
 8006214:	20000238 	.word	0x20000238
 8006218:	20000285 	.word	0x20000285
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800621c:	4b9b      	ldr	r3, [pc, #620]	; (800648c <checkAktifCalisma+0x15a8>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d013      	beq.n	800624c <checkAktifCalisma+0x1368>
 8006224:	4b9a      	ldr	r3, [pc, #616]	; (8006490 <checkAktifCalisma+0x15ac>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00f      	beq.n	800624c <checkAktifCalisma+0x1368>
 800622c:	4b99      	ldr	r3, [pc, #612]	; (8006494 <checkAktifCalisma+0x15b0>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f083 0301 	eor.w	r3, r3, #1
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800623a:	4b94      	ldr	r3, [pc, #592]	; (800648c <checkAktifCalisma+0x15a8>)
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006240:	4b95      	ldr	r3, [pc, #596]	; (8006498 <checkAktifCalisma+0x15b4>)
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006246:	2002      	movs	r0, #2
 8006248:	f7fe fc7a 	bl	8004b40 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800624c:	4b93      	ldr	r3, [pc, #588]	; (800649c <checkAktifCalisma+0x15b8>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d11e      	bne.n	8006292 <checkAktifCalisma+0x13ae>
 8006254:	4b92      	ldr	r3, [pc, #584]	; (80064a0 <checkAktifCalisma+0x15bc>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d11a      	bne.n	8006292 <checkAktifCalisma+0x13ae>
 800625c:	4b91      	ldr	r3, [pc, #580]	; (80064a4 <checkAktifCalisma+0x15c0>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d016      	beq.n	8006292 <checkAktifCalisma+0x13ae>
 8006264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006268:	488f      	ldr	r0, [pc, #572]	; (80064a8 <checkAktifCalisma+0x15c4>)
 800626a:	f003 f91f 	bl	80094ac <HAL_GPIO_ReadPin>
 800626e:	4603      	mov	r3, r0
 8006270:	2b01      	cmp	r3, #1
 8006272:	d10e      	bne.n	8006292 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006274:	4b8d      	ldr	r3, [pc, #564]	; (80064ac <checkAktifCalisma+0x15c8>)
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800627a:	2003      	movs	r0, #3
 800627c:	f7fa fcd0 	bl	8000c20 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006280:	2003      	movs	r0, #3
 8006282:	f7fa fc73 	bl	8000b6c <hata2EEPROM>
			convertAndSendData();
 8006286:	f001 fbe3 	bl	8007a50 <convertAndSendData>
			basinchatasi=1;
 800628a:	4b89      	ldr	r3, [pc, #548]	; (80064b0 <checkAktifCalisma+0x15cc>)
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e015      	b.n	80062be <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006292:	4b87      	ldr	r3, [pc, #540]	; (80064b0 <checkAktifCalisma+0x15cc>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d011      	beq.n	80062be <checkAktifCalisma+0x13da>
 800629a:	4b80      	ldr	r3, [pc, #512]	; (800649c <checkAktifCalisma+0x15b8>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d10d      	bne.n	80062be <checkAktifCalisma+0x13da>
 80062a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062a6:	4883      	ldr	r0, [pc, #524]	; (80064b4 <checkAktifCalisma+0x15d0>)
 80062a8:	f003 f900 	bl	80094ac <HAL_GPIO_ReadPin>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d105      	bne.n	80062be <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80062b2:	4b7f      	ldr	r3, [pc, #508]	; (80064b0 <checkAktifCalisma+0x15cc>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80062b8:	2003      	movs	r0, #3
 80062ba:	f7fe fc41 	bl	8004b40 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062be:	4b7e      	ldr	r3, [pc, #504]	; (80064b8 <checkAktifCalisma+0x15d4>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <checkAktifCalisma+0x13ea>
 80062c6:	4b7d      	ldr	r3, [pc, #500]	; (80064bc <checkAktifCalisma+0x15d8>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01e      	beq.n	800630c <checkAktifCalisma+0x1428>
 80062ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062d2:	487b      	ldr	r0, [pc, #492]	; (80064c0 <checkAktifCalisma+0x15dc>)
 80062d4:	f003 f8ea 	bl	80094ac <HAL_GPIO_ReadPin>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d116      	bne.n	800630c <checkAktifCalisma+0x1428>
 80062de:	4b79      	ldr	r3, [pc, #484]	; (80064c4 <checkAktifCalisma+0x15e0>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d003      	beq.n	80062ee <checkAktifCalisma+0x140a>
 80062e6:	4b77      	ldr	r3, [pc, #476]	; (80064c4 <checkAktifCalisma+0x15e0>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d10e      	bne.n	800630c <checkAktifCalisma+0x1428>
			hataVar=1;
 80062ee:	4b6f      	ldr	r3, [pc, #444]	; (80064ac <checkAktifCalisma+0x15c8>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80062f4:	2004      	movs	r0, #4
 80062f6:	f7fa fc93 	bl	8000c20 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80062fa:	2004      	movs	r0, #4
 80062fc:	f7fa fc36 	bl	8000b6c <hata2EEPROM>
			convertAndSendData();
 8006300:	f001 fba6 	bl	8007a50 <convertAndSendData>
			katkapisivicihatasi=1;
 8006304:	4b70      	ldr	r3, [pc, #448]	; (80064c8 <checkAktifCalisma+0x15e4>)
 8006306:	2201      	movs	r2, #1
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	e01f      	b.n	800634c <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800630c:	4b6e      	ldr	r3, [pc, #440]	; (80064c8 <checkAktifCalisma+0x15e4>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01b      	beq.n	800634c <checkAktifCalisma+0x1468>
 8006314:	4b6d      	ldr	r3, [pc, #436]	; (80064cc <checkAktifCalisma+0x15e8>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d017      	beq.n	800634c <checkAktifCalisma+0x1468>
 800631c:	4b66      	ldr	r3, [pc, #408]	; (80064b8 <checkAktifCalisma+0x15d4>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	f083 0301 	eor.w	r3, r3, #1
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d010      	beq.n	800634c <checkAktifCalisma+0x1468>
 800632a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800632e:	4864      	ldr	r0, [pc, #400]	; (80064c0 <checkAktifCalisma+0x15dc>)
 8006330:	f003 f8bc 	bl	80094ac <HAL_GPIO_ReadPin>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d108      	bne.n	800634c <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800633a:	4b63      	ldr	r3, [pc, #396]	; (80064c8 <checkAktifCalisma+0x15e4>)
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006340:	4b5e      	ldr	r3, [pc, #376]	; (80064bc <checkAktifCalisma+0x15d8>)
 8006342:	2200      	movs	r2, #0
 8006344:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006346:	2004      	movs	r0, #4
 8006348:	f7fe fbfa 	bl	8004b40 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800634c:	4b5a      	ldr	r3, [pc, #360]	; (80064b8 <checkAktifCalisma+0x15d4>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <checkAktifCalisma+0x1478>
 8006354:	4b5e      	ldr	r3, [pc, #376]	; (80064d0 <checkAktifCalisma+0x15ec>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01e      	beq.n	800639a <checkAktifCalisma+0x14b6>
 800635c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006360:	4857      	ldr	r0, [pc, #348]	; (80064c0 <checkAktifCalisma+0x15dc>)
 8006362:	f003 f8a3 	bl	80094ac <HAL_GPIO_ReadPin>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d116      	bne.n	800639a <checkAktifCalisma+0x14b6>
 800636c:	4b55      	ldr	r3, [pc, #340]	; (80064c4 <checkAktifCalisma+0x15e0>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d003      	beq.n	800637c <checkAktifCalisma+0x1498>
 8006374:	4b53      	ldr	r3, [pc, #332]	; (80064c4 <checkAktifCalisma+0x15e0>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d10e      	bne.n	800639a <checkAktifCalisma+0x14b6>
			hataVar=1;
 800637c:	4b4b      	ldr	r3, [pc, #300]	; (80064ac <checkAktifCalisma+0x15c8>)
 800637e:	2201      	movs	r2, #1
 8006380:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006382:	2005      	movs	r0, #5
 8006384:	f7fa fc4c 	bl	8000c20 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006388:	2005      	movs	r0, #5
 800638a:	f7fa fbef 	bl	8000b6c <hata2EEPROM>
			convertAndSendData();
 800638e:	f001 fb5f 	bl	8007a50 <convertAndSendData>
			tablakapisivicihatasi=1;
 8006392:	4b50      	ldr	r3, [pc, #320]	; (80064d4 <checkAktifCalisma+0x15f0>)
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e023      	b.n	80063e2 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800639a:	4b4e      	ldr	r3, [pc, #312]	; (80064d4 <checkAktifCalisma+0x15f0>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d01f      	beq.n	80063e2 <checkAktifCalisma+0x14fe>
 80063a2:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <checkAktifCalisma+0x15e8>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01b      	beq.n	80063e2 <checkAktifCalisma+0x14fe>
 80063aa:	4b43      	ldr	r3, [pc, #268]	; (80064b8 <checkAktifCalisma+0x15d4>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f083 0301 	eor.w	r3, r3, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d014      	beq.n	80063e2 <checkAktifCalisma+0x14fe>
 80063b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063bc:	4840      	ldr	r0, [pc, #256]	; (80064c0 <checkAktifCalisma+0x15dc>)
 80063be:	f003 f875 	bl	80094ac <HAL_GPIO_ReadPin>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10c      	bne.n	80063e2 <checkAktifCalisma+0x14fe>
 80063c8:	4b40      	ldr	r3, [pc, #256]	; (80064cc <checkAktifCalisma+0x15e8>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80063d0:	4b40      	ldr	r3, [pc, #256]	; (80064d4 <checkAktifCalisma+0x15f0>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80063d6:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <checkAktifCalisma+0x15ec>)
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80063dc:	2005      	movs	r0, #5
 80063de:	f7fe fbaf 	bl	8004b40 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80063e2:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <checkAktifCalisma+0x15c0>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d107      	bne.n	80063fa <checkAktifCalisma+0x1516>
 80063ea:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <checkAktifCalisma+0x15b0>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <checkAktifCalisma+0x1516>
 80063f2:	4b39      	ldr	r3, [pc, #228]	; (80064d8 <checkAktifCalisma+0x15f4>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d016      	beq.n	8006428 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80063fa:	4b38      	ldr	r3, [pc, #224]	; (80064dc <checkAktifCalisma+0x15f8>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b38      	ldr	r3, [pc, #224]	; (80064e0 <checkAktifCalisma+0x15fc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	4a37      	ldr	r2, [pc, #220]	; (80064e4 <checkAktifCalisma+0x1600>)
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	4293      	cmp	r3, r2
 800640a:	d30d      	bcc.n	8006428 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 800640c:	4b27      	ldr	r3, [pc, #156]	; (80064ac <checkAktifCalisma+0x15c8>)
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006412:	2006      	movs	r0, #6
 8006414:	f7fa fc04 	bl	8000c20 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006418:	2006      	movs	r0, #6
 800641a:	f7fa fba7 	bl	8000b6c <hata2EEPROM>
			  	convertAndSendData();
 800641e:	f001 fb17 	bl	8007a50 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006422:	4b31      	ldr	r3, [pc, #196]	; (80064e8 <checkAktifCalisma+0x1604>)
 8006424:	2201      	movs	r2, #1
 8006426:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006428:	4b2f      	ldr	r3, [pc, #188]	; (80064e8 <checkAktifCalisma+0x1604>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d013      	beq.n	8006458 <checkAktifCalisma+0x1574>
 8006430:	2108      	movs	r1, #8
 8006432:	4823      	ldr	r0, [pc, #140]	; (80064c0 <checkAktifCalisma+0x15dc>)
 8006434:	f003 f83a 	bl	80094ac <HAL_GPIO_ReadPin>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00c      	beq.n	8006458 <checkAktifCalisma+0x1574>
 800643e:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <checkAktifCalisma+0x15d4>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f083 0301 	eor.w	r3, r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 800644c:	4b26      	ldr	r3, [pc, #152]	; (80064e8 <checkAktifCalisma+0x1604>)
 800644e:	2200      	movs	r2, #0
 8006450:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006452:	2006      	movs	r0, #6
 8006454:	f7fe fb74 	bl	8004b40 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006458:	4b24      	ldr	r3, [pc, #144]	; (80064ec <checkAktifCalisma+0x1608>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <checkAktifCalisma+0x1594>
 8006460:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <checkAktifCalisma+0x15b0>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d107      	bne.n	8006478 <checkAktifCalisma+0x1594>
 8006468:	4b21      	ldr	r3, [pc, #132]	; (80064f0 <checkAktifCalisma+0x160c>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d103      	bne.n	8006478 <checkAktifCalisma+0x1594>
 8006470:	4b19      	ldr	r3, [pc, #100]	; (80064d8 <checkAktifCalisma+0x15f4>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d03f      	beq.n	80064f8 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006478:	4b1e      	ldr	r3, [pc, #120]	; (80064f4 <checkAktifCalisma+0x1610>)
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <checkAktifCalisma+0x15d8>)
 8006480:	2201      	movs	r2, #1
 8006482:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006484:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <checkAktifCalisma+0x15ec>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e03c      	b.n	8006506 <checkAktifCalisma+0x1622>
 800648c:	20000285 	.word	0x20000285
 8006490:	2000028b 	.word	0x2000028b
 8006494:	2000026c 	.word	0x2000026c
 8006498:	20000295 	.word	0x20000295
 800649c:	20000237 	.word	0x20000237
 80064a0:	2000023b 	.word	0x2000023b
 80064a4:	20000288 	.word	0x20000288
 80064a8:	40011000 	.word	0x40011000
 80064ac:	20000289 	.word	0x20000289
 80064b0:	20000292 	.word	0x20000292
 80064b4:	40010c00 	.word	0x40010c00
 80064b8:	20000282 	.word	0x20000282
 80064bc:	20000296 	.word	0x20000296
 80064c0:	40010800 	.word	0x40010800
 80064c4:	2000023c 	.word	0x2000023c
 80064c8:	20000293 	.word	0x20000293
 80064cc:	20000276 	.word	0x20000276
 80064d0:	20000297 	.word	0x20000297
 80064d4:	20000294 	.word	0x20000294
 80064d8:	2000026b 	.word	0x2000026b
 80064dc:	20000210 	.word	0x20000210
 80064e0:	20000224 	.word	0x20000224
 80064e4:	2000024c 	.word	0x2000024c
 80064e8:	20000283 	.word	0x20000283
 80064ec:	20000269 	.word	0x20000269
 80064f0:	2000026a 	.word	0x2000026a
 80064f4:	2000028a 	.word	0x2000028a
		} else {
			makineCalisiyor=1;
 80064f8:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <checkAktifCalisma+0x1690>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80064fe:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <checkAktifCalisma+0x1694>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1e      	ldr	r2, [pc, #120]	; (800657c <checkAktifCalisma+0x1698>)
 8006504:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006506:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <checkAktifCalisma+0x169c>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d02f      	beq.n	800656e <checkAktifCalisma+0x168a>
 800650e:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <checkAktifCalisma+0x16a0>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f083 0301 	eor.w	r3, r3, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d028      	beq.n	800656e <checkAktifCalisma+0x168a>
 800651c:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <checkAktifCalisma+0x16a4>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f083 0301 	eor.w	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d021      	beq.n	800656e <checkAktifCalisma+0x168a>
 800652a:	4b18      	ldr	r3, [pc, #96]	; (800658c <checkAktifCalisma+0x16a8>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	f083 0301 	eor.w	r3, r3, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01a      	beq.n	800656e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006538:	4b15      	ldr	r3, [pc, #84]	; (8006590 <checkAktifCalisma+0x16ac>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f083 0301 	eor.w	r3, r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d013      	beq.n	800656e <checkAktifCalisma+0x168a>
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <checkAktifCalisma+0x16b0>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f083 0301 	eor.w	r3, r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00c      	beq.n	800656e <checkAktifCalisma+0x168a>
 8006554:	4b10      	ldr	r3, [pc, #64]	; (8006598 <checkAktifCalisma+0x16b4>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f083 0301 	eor.w	r3, r3, #1
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <checkAktifCalisma+0x168a>
			hataVar=0;
 8006562:	4b07      	ldr	r3, [pc, #28]	; (8006580 <checkAktifCalisma+0x169c>)
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006568:	2007      	movs	r0, #7
 800656a:	f7fe fae9 	bl	8004b40 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	2000028a 	.word	0x2000028a
 8006578:	20000210 	.word	0x20000210
 800657c:	20000224 	.word	0x20000224
 8006580:	20000289 	.word	0x20000289
 8006584:	20000284 	.word	0x20000284
 8006588:	20000285 	.word	0x20000285
 800658c:	20000292 	.word	0x20000292
 8006590:	20000293 	.word	0x20000293
 8006594:	20000294 	.word	0x20000294
 8006598:	20000283 	.word	0x20000283

0800659c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80065a0:	4b8b      	ldr	r3, [pc, #556]	; (80067d0 <checkDemoModCalisma+0x234>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	f040 8229 	bne.w	80069fc <checkDemoModCalisma+0x460>
 80065aa:	4b8a      	ldr	r3, [pc, #552]	; (80067d4 <checkDemoModCalisma+0x238>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8224 	beq.w	80069fc <checkDemoModCalisma+0x460>
 80065b4:	4b88      	ldr	r3, [pc, #544]	; (80067d8 <checkDemoModCalisma+0x23c>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f040 821f 	bne.w	80069fc <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80065be:	2102      	movs	r1, #2
 80065c0:	4886      	ldr	r0, [pc, #536]	; (80067dc <checkDemoModCalisma+0x240>)
 80065c2:	f002 ff73 	bl	80094ac <HAL_GPIO_ReadPin>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d11d      	bne.n	8006608 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80065cc:	4b84      	ldr	r3, [pc, #528]	; (80067e0 <checkDemoModCalisma+0x244>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f083 0301 	eor.w	r3, r3, #1
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d016      	beq.n	8006608 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80065da:	4b82      	ldr	r3, [pc, #520]	; (80067e4 <checkDemoModCalisma+0x248>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f083 0301 	eor.w	r3, r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00f      	beq.n	8006608 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80065e8:	4b7f      	ldr	r3, [pc, #508]	; (80067e8 <checkDemoModCalisma+0x24c>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f083 0301 	eor.w	r3, r3, #1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80065f6:	2201      	movs	r2, #1
 80065f8:	2104      	movs	r1, #4
 80065fa:	487c      	ldr	r0, [pc, #496]	; (80067ec <checkDemoModCalisma+0x250>)
 80065fc:	f002 ff6d 	bl	80094da <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006600:	4b7b      	ldr	r3, [pc, #492]	; (80067f0 <checkDemoModCalisma+0x254>)
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e00e      	b.n	8006626 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006608:	2102      	movs	r1, #2
 800660a:	4874      	ldr	r0, [pc, #464]	; (80067dc <checkDemoModCalisma+0x240>)
 800660c:	f002 ff4e 	bl	80094ac <HAL_GPIO_ReadPin>
 8006610:	4603      	mov	r3, r0
 8006612:	2b01      	cmp	r3, #1
 8006614:	d107      	bne.n	8006626 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006616:	2200      	movs	r2, #0
 8006618:	2104      	movs	r1, #4
 800661a:	4874      	ldr	r0, [pc, #464]	; (80067ec <checkDemoModCalisma+0x250>)
 800661c:	f002 ff5d 	bl	80094da <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006620:	4b73      	ldr	r3, [pc, #460]	; (80067f0 <checkDemoModCalisma+0x254>)
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006626:	4b72      	ldr	r3, [pc, #456]	; (80067f0 <checkDemoModCalisma+0x254>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <checkDemoModCalisma+0xaa>
 800662e:	4b6d      	ldr	r3, [pc, #436]	; (80067e4 <checkDemoModCalisma+0x248>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <checkDemoModCalisma+0xaa>
 8006636:	4b6c      	ldr	r3, [pc, #432]	; (80067e8 <checkDemoModCalisma+0x24c>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <checkDemoModCalisma+0xaa>
 800663e:	4b68      	ldr	r3, [pc, #416]	; (80067e0 <checkDemoModCalisma+0x244>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00c      	beq.n	8006660 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006646:	2201      	movs	r2, #1
 8006648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800664c:	4867      	ldr	r0, [pc, #412]	; (80067ec <checkDemoModCalisma+0x250>)
 800664e:	f002 ff44 	bl	80094da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006652:	2201      	movs	r2, #1
 8006654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006658:	4864      	ldr	r0, [pc, #400]	; (80067ec <checkDemoModCalisma+0x250>)
 800665a:	f002 ff3e 	bl	80094da <HAL_GPIO_WritePin>
 800665e:	e00b      	b.n	8006678 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006666:	4861      	ldr	r0, [pc, #388]	; (80067ec <checkDemoModCalisma+0x250>)
 8006668:	f002 ff37 	bl	80094da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006672:	485e      	ldr	r0, [pc, #376]	; (80067ec <checkDemoModCalisma+0x250>)
 8006674:	f002 ff31 	bl	80094da <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006678:	2102      	movs	r1, #2
 800667a:	4858      	ldr	r0, [pc, #352]	; (80067dc <checkDemoModCalisma+0x240>)
 800667c:	f002 ff16 	bl	80094ac <HAL_GPIO_ReadPin>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d10d      	bne.n	80066a2 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800668a:	4854      	ldr	r0, [pc, #336]	; (80067dc <checkDemoModCalisma+0x240>)
 800668c:	f002 ff0e 	bl	80094ac <HAL_GPIO_ReadPin>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006696:	4b56      	ldr	r3, [pc, #344]	; (80067f0 <checkDemoModCalisma+0x254>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f083 0301 	eor.w	r3, r3, #1
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80066a2:	2102      	movs	r1, #2
 80066a4:	484d      	ldr	r0, [pc, #308]	; (80067dc <checkDemoModCalisma+0x240>)
 80066a6:	f002 ff01 	bl	80094ac <HAL_GPIO_ReadPin>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d125      	bne.n	80066fc <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80066b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066b4:	4849      	ldr	r0, [pc, #292]	; (80067dc <checkDemoModCalisma+0x240>)
 80066b6:	f002 fef9 	bl	80094ac <HAL_GPIO_ReadPin>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11d      	bne.n	80066fc <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80066c0:	4b4b      	ldr	r3, [pc, #300]	; (80067f0 <checkDemoModCalisma+0x254>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	f083 0301 	eor.w	r3, r3, #1
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80066ce:	4b44      	ldr	r3, [pc, #272]	; (80067e0 <checkDemoModCalisma+0x244>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	f083 0301 	eor.w	r3, r3, #1
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00f      	beq.n	80066fc <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80066dc:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <checkDemoModCalisma+0x24c>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f083 0301 	eor.w	r3, r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d008      	beq.n	80066fc <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80066ea:	2201      	movs	r2, #1
 80066ec:	2120      	movs	r1, #32
 80066ee:	483b      	ldr	r0, [pc, #236]	; (80067dc <checkDemoModCalisma+0x240>)
 80066f0:	f002 fef3 	bl	80094da <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80066f4:	4b3b      	ldr	r3, [pc, #236]	; (80067e4 <checkDemoModCalisma+0x248>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	e007      	b.n	800670c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80066fc:	2200      	movs	r2, #0
 80066fe:	2120      	movs	r1, #32
 8006700:	4836      	ldr	r0, [pc, #216]	; (80067dc <checkDemoModCalisma+0x240>)
 8006702:	f002 feea 	bl	80094da <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006706:	4b37      	ldr	r3, [pc, #220]	; (80067e4 <checkDemoModCalisma+0x248>)
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800670c:	2102      	movs	r1, #2
 800670e:	4833      	ldr	r0, [pc, #204]	; (80067dc <checkDemoModCalisma+0x240>)
 8006710:	f002 fecc 	bl	80094ac <HAL_GPIO_ReadPin>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d125      	bne.n	8006766 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800671a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800671e:	482f      	ldr	r0, [pc, #188]	; (80067dc <checkDemoModCalisma+0x240>)
 8006720:	f002 fec4 	bl	80094ac <HAL_GPIO_ReadPin>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d11d      	bne.n	8006766 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800672a:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <checkDemoModCalisma+0x254>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	f083 0301 	eor.w	r3, r3, #1
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d016      	beq.n	8006766 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006738:	4b2a      	ldr	r3, [pc, #168]	; (80067e4 <checkDemoModCalisma+0x248>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	f083 0301 	eor.w	r3, r3, #1
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00f      	beq.n	8006766 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006746:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <checkDemoModCalisma+0x244>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f083 0301 	eor.w	r3, r3, #1
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006754:	2201      	movs	r2, #1
 8006756:	2110      	movs	r1, #16
 8006758:	4820      	ldr	r0, [pc, #128]	; (80067dc <checkDemoModCalisma+0x240>)
 800675a:	f002 febe 	bl	80094da <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800675e:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <checkDemoModCalisma+0x24c>)
 8006760:	2201      	movs	r2, #1
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e007      	b.n	8006776 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006766:	2200      	movs	r2, #0
 8006768:	2110      	movs	r1, #16
 800676a:	481c      	ldr	r0, [pc, #112]	; (80067dc <checkDemoModCalisma+0x240>)
 800676c:	f002 feb5 	bl	80094da <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006770:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <checkDemoModCalisma+0x24c>)
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006776:	2104      	movs	r1, #4
 8006778:	4818      	ldr	r0, [pc, #96]	; (80067dc <checkDemoModCalisma+0x240>)
 800677a:	f002 fe97 	bl	80094ac <HAL_GPIO_ReadPin>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d139      	bne.n	80067f8 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006784:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <checkDemoModCalisma+0x254>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f083 0301 	eor.w	r3, r3, #1
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d032      	beq.n	80067f8 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <checkDemoModCalisma+0x24c>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f083 0301 	eor.w	r3, r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02b      	beq.n	80067f8 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80067a0:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <checkDemoModCalisma+0x248>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f083 0301 	eor.w	r3, r3, #1
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d024      	beq.n	80067f8 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80067ae:	2201      	movs	r2, #1
 80067b0:	2102      	movs	r1, #2
 80067b2:	480e      	ldr	r0, [pc, #56]	; (80067ec <checkDemoModCalisma+0x250>)
 80067b4:	f002 fe91 	bl	80094da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80067b8:	2201      	movs	r2, #1
 80067ba:	2101      	movs	r1, #1
 80067bc:	480b      	ldr	r0, [pc, #44]	; (80067ec <checkDemoModCalisma+0x250>)
 80067be:	f002 fe8c 	bl	80094da <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <checkDemoModCalisma+0x244>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <checkDemoModCalisma+0x258>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	e027      	b.n	8006820 <checkDemoModCalisma+0x284>
 80067d0:	20000252 	.word	0x20000252
 80067d4:	20000286 	.word	0x20000286
 80067d8:	20000251 	.word	0x20000251
 80067dc:	40011000 	.word	0x40011000
 80067e0:	2000028d 	.word	0x2000028d
 80067e4:	2000028e 	.word	0x2000028e
 80067e8:	2000028f 	.word	0x2000028f
 80067ec:	40010c00 	.word	0x40010c00
 80067f0:	2000028c 	.word	0x2000028c
 80067f4:	20000272 	.word	0x20000272
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80067f8:	2104      	movs	r1, #4
 80067fa:	48a0      	ldr	r0, [pc, #640]	; (8006a7c <checkDemoModCalisma+0x4e0>)
 80067fc:	f002 fe56 	bl	80094ac <HAL_GPIO_ReadPin>
 8006800:	4603      	mov	r3, r0
 8006802:	2b01      	cmp	r3, #1
 8006804:	d10c      	bne.n	8006820 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006806:	2200      	movs	r2, #0
 8006808:	2102      	movs	r1, #2
 800680a:	489d      	ldr	r0, [pc, #628]	; (8006a80 <checkDemoModCalisma+0x4e4>)
 800680c:	f002 fe65 	bl	80094da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006810:	2200      	movs	r2, #0
 8006812:	2101      	movs	r1, #1
 8006814:	489a      	ldr	r0, [pc, #616]	; (8006a80 <checkDemoModCalisma+0x4e4>)
 8006816:	f002 fe60 	bl	80094da <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800681a:	4b9a      	ldr	r3, [pc, #616]	; (8006a84 <checkDemoModCalisma+0x4e8>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006820:	2104      	movs	r1, #4
 8006822:	4896      	ldr	r0, [pc, #600]	; (8006a7c <checkDemoModCalisma+0x4e0>)
 8006824:	f002 fe42 	bl	80094ac <HAL_GPIO_ReadPin>
 8006828:	4603      	mov	r3, r0
 800682a:	2b01      	cmp	r3, #1
 800682c:	d10d      	bne.n	800684a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800682e:	2201      	movs	r2, #1
 8006830:	2180      	movs	r1, #128	; 0x80
 8006832:	4895      	ldr	r0, [pc, #596]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 8006834:	f002 fe51 	bl	80094da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006838:	2201      	movs	r2, #1
 800683a:	2120      	movs	r1, #32
 800683c:	4892      	ldr	r0, [pc, #584]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 800683e:	f002 fe4c 	bl	80094da <HAL_GPIO_WritePin>
			timer3 = millis;
 8006842:	4b92      	ldr	r3, [pc, #584]	; (8006a8c <checkDemoModCalisma+0x4f0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a92      	ldr	r2, [pc, #584]	; (8006a90 <checkDemoModCalisma+0x4f4>)
 8006848:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800684a:	4b90      	ldr	r3, [pc, #576]	; (8006a8c <checkDemoModCalisma+0x4f0>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	4b90      	ldr	r3, [pc, #576]	; (8006a90 <checkDemoModCalisma+0x4f4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b04      	cmp	r3, #4
 8006856:	d909      	bls.n	800686c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006858:	2200      	movs	r2, #0
 800685a:	2180      	movs	r1, #128	; 0x80
 800685c:	488a      	ldr	r0, [pc, #552]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 800685e:	f002 fe3c 	bl	80094da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006862:	2200      	movs	r2, #0
 8006864:	2120      	movs	r1, #32
 8006866:	4888      	ldr	r0, [pc, #544]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 8006868:	f002 fe37 	bl	80094da <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800686c:	2102      	movs	r1, #2
 800686e:	4883      	ldr	r0, [pc, #524]	; (8006a7c <checkDemoModCalisma+0x4e0>)
 8006870:	f002 fe1c 	bl	80094ac <HAL_GPIO_ReadPin>
 8006874:	4603      	mov	r3, r0
 8006876:	2b01      	cmp	r3, #1
 8006878:	d108      	bne.n	800688c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800687a:	2201      	movs	r2, #1
 800687c:	2140      	movs	r1, #64	; 0x40
 800687e:	4882      	ldr	r0, [pc, #520]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 8006880:	f002 fe2b 	bl	80094da <HAL_GPIO_WritePin>
			timer3 = millis;
 8006884:	4b81      	ldr	r3, [pc, #516]	; (8006a8c <checkDemoModCalisma+0x4f0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a81      	ldr	r2, [pc, #516]	; (8006a90 <checkDemoModCalisma+0x4f4>)
 800688a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800688c:	4b7f      	ldr	r3, [pc, #508]	; (8006a8c <checkDemoModCalisma+0x4f0>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4b7f      	ldr	r3, [pc, #508]	; (8006a90 <checkDemoModCalisma+0x4f4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b04      	cmp	r3, #4
 8006898:	d904      	bls.n	80068a4 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800689a:	2200      	movs	r2, #0
 800689c:	2140      	movs	r1, #64	; 0x40
 800689e:	487a      	ldr	r0, [pc, #488]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 80068a0:	f002 fe1b 	bl	80094da <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80068a4:	4b7b      	ldr	r3, [pc, #492]	; (8006a94 <checkDemoModCalisma+0x4f8>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d058      	beq.n	800695e <checkDemoModCalisma+0x3c2>
 80068ac:	4b7a      	ldr	r3, [pc, #488]	; (8006a98 <checkDemoModCalisma+0x4fc>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d054      	beq.n	800695e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80068b4:	4b79      	ldr	r3, [pc, #484]	; (8006a9c <checkDemoModCalisma+0x500>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	3301      	adds	r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	4b77      	ldr	r3, [pc, #476]	; (8006a9c <checkDemoModCalisma+0x500>)
 80068be:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80068c0:	4b76      	ldr	r3, [pc, #472]	; (8006a9c <checkDemoModCalisma+0x500>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b09      	cmp	r3, #9
 80068c6:	d908      	bls.n	80068da <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80068c8:	4b74      	ldr	r3, [pc, #464]	; (8006a9c <checkDemoModCalisma+0x500>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80068ce:	4b74      	ldr	r3, [pc, #464]	; (8006aa0 <checkDemoModCalisma+0x504>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	4b72      	ldr	r3, [pc, #456]	; (8006aa0 <checkDemoModCalisma+0x504>)
 80068d8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80068da:	4b71      	ldr	r3, [pc, #452]	; (8006aa0 <checkDemoModCalisma+0x504>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b09      	cmp	r3, #9
 80068e0:	d908      	bls.n	80068f4 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80068e2:	4b6f      	ldr	r3, [pc, #444]	; (8006aa0 <checkDemoModCalisma+0x504>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80068e8:	4b6e      	ldr	r3, [pc, #440]	; (8006aa4 <checkDemoModCalisma+0x508>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	4b6c      	ldr	r3, [pc, #432]	; (8006aa4 <checkDemoModCalisma+0x508>)
 80068f2:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80068f4:	4b6b      	ldr	r3, [pc, #428]	; (8006aa4 <checkDemoModCalisma+0x508>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b09      	cmp	r3, #9
 80068fa:	d908      	bls.n	800690e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80068fc:	4b69      	ldr	r3, [pc, #420]	; (8006aa4 <checkDemoModCalisma+0x508>)
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006902:	4b69      	ldr	r3, [pc, #420]	; (8006aa8 <checkDemoModCalisma+0x50c>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4b67      	ldr	r3, [pc, #412]	; (8006aa8 <checkDemoModCalisma+0x50c>)
 800690c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800690e:	4b66      	ldr	r3, [pc, #408]	; (8006aa8 <checkDemoModCalisma+0x50c>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b09      	cmp	r3, #9
 8006914:	d908      	bls.n	8006928 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006916:	4b64      	ldr	r3, [pc, #400]	; (8006aa8 <checkDemoModCalisma+0x50c>)
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 800691c:	4b63      	ldr	r3, [pc, #396]	; (8006aac <checkDemoModCalisma+0x510>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	4b61      	ldr	r3, [pc, #388]	; (8006aac <checkDemoModCalisma+0x510>)
 8006926:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006928:	4b60      	ldr	r3, [pc, #384]	; (8006aac <checkDemoModCalisma+0x510>)
 800692a:	781a      	ldrb	r2, [r3, #0]
 800692c:	4b60      	ldr	r3, [pc, #384]	; (8006ab0 <checkDemoModCalisma+0x514>)
 800692e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006932:	4b5d      	ldr	r3, [pc, #372]	; (8006aa8 <checkDemoModCalisma+0x50c>)
 8006934:	781a      	ldrb	r2, [r3, #0]
 8006936:	4b5e      	ldr	r3, [pc, #376]	; (8006ab0 <checkDemoModCalisma+0x514>)
 8006938:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800693a:	4b5a      	ldr	r3, [pc, #360]	; (8006aa4 <checkDemoModCalisma+0x508>)
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	4b5c      	ldr	r3, [pc, #368]	; (8006ab0 <checkDemoModCalisma+0x514>)
 8006940:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006942:	4b57      	ldr	r3, [pc, #348]	; (8006aa0 <checkDemoModCalisma+0x504>)
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	4b5a      	ldr	r3, [pc, #360]	; (8006ab0 <checkDemoModCalisma+0x514>)
 8006948:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800694a:	4b54      	ldr	r3, [pc, #336]	; (8006a9c <checkDemoModCalisma+0x500>)
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	4b58      	ldr	r3, [pc, #352]	; (8006ab0 <checkDemoModCalisma+0x514>)
 8006950:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006952:	4b58      	ldr	r3, [pc, #352]	; (8006ab4 <checkDemoModCalisma+0x518>)
 8006954:	2201      	movs	r2, #1
 8006956:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006958:	4b4f      	ldr	r3, [pc, #316]	; (8006a98 <checkDemoModCalisma+0x4fc>)
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800695e:	4b56      	ldr	r3, [pc, #344]	; (8006ab8 <checkDemoModCalisma+0x51c>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f040 8087 	bne.w	8006a76 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006968:	4a54      	ldr	r2, [pc, #336]	; (8006abc <checkDemoModCalisma+0x520>)
 800696a:	2101      	movs	r1, #1
 800696c:	2002      	movs	r0, #2
 800696e:	f001 fa77 	bl	8007e60 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006972:	4a53      	ldr	r2, [pc, #332]	; (8006ac0 <checkDemoModCalisma+0x524>)
 8006974:	2101      	movs	r1, #1
 8006976:	2001      	movs	r0, #1
 8006978:	f001 fa72 	bl	8007e60 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 800697c:	4b4b      	ldr	r3, [pc, #300]	; (8006aac <checkDemoModCalisma+0x510>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	220a      	movs	r2, #10
 8006982:	4950      	ldr	r1, [pc, #320]	; (8006ac4 <checkDemoModCalisma+0x528>)
 8006984:	4618      	mov	r0, r3
 8006986:	f005 fdbd 	bl	800c504 <itoa>
			lcd_print(2,12,snum);
 800698a:	4a4e      	ldr	r2, [pc, #312]	; (8006ac4 <checkDemoModCalisma+0x528>)
 800698c:	210c      	movs	r1, #12
 800698e:	2002      	movs	r0, #2
 8006990:	f001 fa66 	bl	8007e60 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006994:	4b44      	ldr	r3, [pc, #272]	; (8006aa8 <checkDemoModCalisma+0x50c>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	220a      	movs	r2, #10
 800699a:	494a      	ldr	r1, [pc, #296]	; (8006ac4 <checkDemoModCalisma+0x528>)
 800699c:	4618      	mov	r0, r3
 800699e:	f005 fdb1 	bl	800c504 <itoa>
			lcd_print(2,13,snum);
 80069a2:	4a48      	ldr	r2, [pc, #288]	; (8006ac4 <checkDemoModCalisma+0x528>)
 80069a4:	210d      	movs	r1, #13
 80069a6:	2002      	movs	r0, #2
 80069a8:	f001 fa5a 	bl	8007e60 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80069ac:	4b3d      	ldr	r3, [pc, #244]	; (8006aa4 <checkDemoModCalisma+0x508>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	220a      	movs	r2, #10
 80069b2:	4944      	ldr	r1, [pc, #272]	; (8006ac4 <checkDemoModCalisma+0x528>)
 80069b4:	4618      	mov	r0, r3
 80069b6:	f005 fda5 	bl	800c504 <itoa>
			lcd_print(2,14,snum);
 80069ba:	4a42      	ldr	r2, [pc, #264]	; (8006ac4 <checkDemoModCalisma+0x528>)
 80069bc:	210e      	movs	r1, #14
 80069be:	2002      	movs	r0, #2
 80069c0:	f001 fa4e 	bl	8007e60 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80069c4:	4b36      	ldr	r3, [pc, #216]	; (8006aa0 <checkDemoModCalisma+0x504>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	220a      	movs	r2, #10
 80069ca:	493e      	ldr	r1, [pc, #248]	; (8006ac4 <checkDemoModCalisma+0x528>)
 80069cc:	4618      	mov	r0, r3
 80069ce:	f005 fd99 	bl	800c504 <itoa>
			lcd_print(2,15,snum);
 80069d2:	4a3c      	ldr	r2, [pc, #240]	; (8006ac4 <checkDemoModCalisma+0x528>)
 80069d4:	210f      	movs	r1, #15
 80069d6:	2002      	movs	r0, #2
 80069d8:	f001 fa42 	bl	8007e60 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80069dc:	4b2f      	ldr	r3, [pc, #188]	; (8006a9c <checkDemoModCalisma+0x500>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	220a      	movs	r2, #10
 80069e2:	4938      	ldr	r1, [pc, #224]	; (8006ac4 <checkDemoModCalisma+0x528>)
 80069e4:	4618      	mov	r0, r3
 80069e6:	f005 fd8d 	bl	800c504 <itoa>
			lcd_print(2,16,snum);
 80069ea:	4a36      	ldr	r2, [pc, #216]	; (8006ac4 <checkDemoModCalisma+0x528>)
 80069ec:	2110      	movs	r1, #16
 80069ee:	2002      	movs	r0, #2
 80069f0:	f001 fa36 	bl	8007e60 <lcd_print>
			mesajYazildi=1;
 80069f4:	4b34      	ldr	r3, [pc, #208]	; (8006ac8 <checkDemoModCalisma+0x52c>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80069fa:	e03c      	b.n	8006a76 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80069fc:	4b33      	ldr	r3, [pc, #204]	; (8006acc <checkDemoModCalisma+0x530>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d003      	beq.n	8006a0c <checkDemoModCalisma+0x470>
 8006a04:	4b2c      	ldr	r3, [pc, #176]	; (8006ab8 <checkDemoModCalisma+0x51c>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d134      	bne.n	8006a76 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a12:	481b      	ldr	r0, [pc, #108]	; (8006a80 <checkDemoModCalisma+0x4e4>)
 8006a14:	f002 fd61 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a1e:	4818      	ldr	r0, [pc, #96]	; (8006a80 <checkDemoModCalisma+0x4e4>)
 8006a20:	f002 fd5b 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006a24:	2200      	movs	r2, #0
 8006a26:	2104      	movs	r1, #4
 8006a28:	4815      	ldr	r0, [pc, #84]	; (8006a80 <checkDemoModCalisma+0x4e4>)
 8006a2a:	f002 fd56 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2102      	movs	r1, #2
 8006a32:	4813      	ldr	r0, [pc, #76]	; (8006a80 <checkDemoModCalisma+0x4e4>)
 8006a34:	f002 fd51 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	4810      	ldr	r0, [pc, #64]	; (8006a80 <checkDemoModCalisma+0x4e4>)
 8006a3e:	f002 fd4c 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006a42:	2200      	movs	r2, #0
 8006a44:	2120      	movs	r1, #32
 8006a46:	480d      	ldr	r0, [pc, #52]	; (8006a7c <checkDemoModCalisma+0x4e0>)
 8006a48:	f002 fd47 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2110      	movs	r1, #16
 8006a50:	480a      	ldr	r0, [pc, #40]	; (8006a7c <checkDemoModCalisma+0x4e0>)
 8006a52:	f002 fd42 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006a56:	2200      	movs	r2, #0
 8006a58:	2180      	movs	r1, #128	; 0x80
 8006a5a:	480b      	ldr	r0, [pc, #44]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 8006a5c:	f002 fd3d 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006a60:	2200      	movs	r2, #0
 8006a62:	2140      	movs	r1, #64	; 0x40
 8006a64:	4808      	ldr	r0, [pc, #32]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 8006a66:	f002 fd38 	bl	80094da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2120      	movs	r1, #32
 8006a6e:	4806      	ldr	r0, [pc, #24]	; (8006a88 <checkDemoModCalisma+0x4ec>)
 8006a70:	f002 fd33 	bl	80094da <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006a74:	e7ff      	b.n	8006a76 <checkDemoModCalisma+0x4da>
 8006a76:	bf00      	nop
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	40010c00 	.word	0x40010c00
 8006a84:	2000028d 	.word	0x2000028d
 8006a88:	40010800 	.word	0x40010800
 8006a8c:	20000210 	.word	0x20000210
 8006a90:	20000220 	.word	0x20000220
 8006a94:	2000028c 	.word	0x2000028c
 8006a98:	20000272 	.word	0x20000272
 8006a9c:	20000231 	.word	0x20000231
 8006aa0:	20000232 	.word	0x20000232
 8006aa4:	20000000 	.word	0x20000000
 8006aa8:	20000001 	.word	0x20000001
 8006aac:	20000233 	.word	0x20000233
 8006ab0:	2000012c 	.word	0x2000012c
 8006ab4:	20000260 	.word	0x20000260
 8006ab8:	20000251 	.word	0x20000251
 8006abc:	0800dcc4 	.word	0x0800dcc4
 8006ac0:	0800dcd0 	.word	0x0800dcd0
 8006ac4:	2000019c 	.word	0x2000019c
 8006ac8:	20000268 	.word	0x20000268
 8006acc:	20000252 	.word	0x20000252

08006ad0 <mainLoop>:

void mainLoop() {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006ad6:	f7fe f923 	bl	8004d20 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006ada:	2101      	movs	r1, #1
 8006adc:	48ac      	ldr	r0, [pc, #688]	; (8006d90 <mainLoop+0x2c0>)
 8006ade:	f002 fce5 	bl	80094ac <HAL_GPIO_ReadPin>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d136      	bne.n	8006b56 <mainLoop+0x86>
 8006ae8:	2108      	movs	r1, #8
 8006aea:	48aa      	ldr	r0, [pc, #680]	; (8006d94 <mainLoop+0x2c4>)
 8006aec:	f002 fcde 	bl	80094ac <HAL_GPIO_ReadPin>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d12f      	bne.n	8006b56 <mainLoop+0x86>
 8006af6:	2102      	movs	r1, #2
 8006af8:	48a5      	ldr	r0, [pc, #660]	; (8006d90 <mainLoop+0x2c0>)
 8006afa:	f002 fcd7 	bl	80094ac <HAL_GPIO_ReadPin>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d128      	bne.n	8006b56 <mainLoop+0x86>
 8006b04:	2104      	movs	r1, #4
 8006b06:	48a2      	ldr	r0, [pc, #648]	; (8006d90 <mainLoop+0x2c0>)
 8006b08:	f002 fcd0 	bl	80094ac <HAL_GPIO_ReadPin>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d121      	bne.n	8006b56 <mainLoop+0x86>
 8006b12:	2108      	movs	r1, #8
 8006b14:	489e      	ldr	r0, [pc, #632]	; (8006d90 <mainLoop+0x2c0>)
 8006b16:	f002 fcc9 	bl	80094ac <HAL_GPIO_ReadPin>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d11a      	bne.n	8006b56 <mainLoop+0x86>
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	489c      	ldr	r0, [pc, #624]	; (8006d94 <mainLoop+0x2c4>)
 8006b24:	f002 fcc2 	bl	80094ac <HAL_GPIO_ReadPin>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d113      	bne.n	8006b56 <mainLoop+0x86>
 8006b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b32:	4898      	ldr	r0, [pc, #608]	; (8006d94 <mainLoop+0x2c4>)
 8006b34:	f002 fcba 	bl	80094ac <HAL_GPIO_ReadPin>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d10b      	bne.n	8006b56 <mainLoop+0x86>
 8006b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b42:	4894      	ldr	r0, [pc, #592]	; (8006d94 <mainLoop+0x2c4>)
 8006b44:	f002 fcb2 	bl	80094ac <HAL_GPIO_ReadPin>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d103      	bne.n	8006b56 <mainLoop+0x86>
			butonKontrol=0;
 8006b4e:	4b92      	ldr	r3, [pc, #584]	; (8006d98 <mainLoop+0x2c8>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	e003      	b.n	8006b5e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006b56:	4b91      	ldr	r3, [pc, #580]	; (8006d9c <mainLoop+0x2cc>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a91      	ldr	r2, [pc, #580]	; (8006da0 <mainLoop+0x2d0>)
 8006b5c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006b5e:	4b91      	ldr	r3, [pc, #580]	; (8006da4 <mainLoop+0x2d4>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d03a      	beq.n	8006bdc <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b66:	bf00      	nop
 8006b68:	488f      	ldr	r0, [pc, #572]	; (8006da8 <mainLoop+0x2d8>)
 8006b6a:	f003 fac8 	bl	800a0fe <HAL_I2C_GetError>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d0f9      	beq.n	8006b68 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006b74:	bf00      	nop
 8006b76:	488c      	ldr	r0, [pc, #560]	; (8006da8 <mainLoop+0x2d8>)
 8006b78:	f003 fab4 	bl	800a0e4 <HAL_I2C_GetState>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d1f9      	bne.n	8006b76 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b82:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b86:	9302      	str	r3, [sp, #8]
 8006b88:	236e      	movs	r3, #110	; 0x6e
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	4b87      	ldr	r3, [pc, #540]	; (8006dac <mainLoop+0x2dc>)
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	236e      	movs	r3, #110	; 0x6e
 8006b92:	2200      	movs	r2, #0
 8006b94:	21a0      	movs	r1, #160	; 0xa0
 8006b96:	4884      	ldr	r0, [pc, #528]	; (8006da8 <mainLoop+0x2d8>)
 8006b98:	f002 ff42 	bl	8009a20 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ba0:	f001 feb4 	bl	800890c <HAL_Delay>

		  hafizaYaz=0;
 8006ba4:	4b7f      	ldr	r3, [pc, #508]	; (8006da4 <mainLoop+0x2d4>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006baa:	4b81      	ldr	r3, [pc, #516]	; (8006db0 <mainLoop+0x2e0>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d105      	bne.n	8006bbe <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006bb2:	4a80      	ldr	r2, [pc, #512]	; (8006db4 <mainLoop+0x2e4>)
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	2002      	movs	r0, #2
 8006bb8:	f001 f952 	bl	8007e60 <lcd_print>
 8006bbc:	e008      	b.n	8006bd0 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006bbe:	4b7c      	ldr	r3, [pc, #496]	; (8006db0 <mainLoop+0x2e0>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d104      	bne.n	8006bd0 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006bc6:	4a7c      	ldr	r2, [pc, #496]	; (8006db8 <mainLoop+0x2e8>)
 8006bc8:	2101      	movs	r1, #1
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f001 f948 	bl	8007e60 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bd4:	f001 fe9a 	bl	800890c <HAL_Delay>
		  lcd_clear();
 8006bd8:	f001 f96e 	bl	8007eb8 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006bdc:	4b77      	ldr	r3, [pc, #476]	; (8006dbc <mainLoop+0x2ec>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f083 0301 	eor.w	r3, r3, #1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d06d      	beq.n	8006cc6 <mainLoop+0x1f6>
 8006bea:	486f      	ldr	r0, [pc, #444]	; (8006da8 <mainLoop+0x2d8>)
 8006bec:	f003 fa7a 	bl	800a0e4 <HAL_I2C_GetState>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d167      	bne.n	8006cc6 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006bf6:	4b72      	ldr	r3, [pc, #456]	; (8006dc0 <mainLoop+0x2f0>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f083 0301 	eor.w	r3, r3, #1
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d044      	beq.n	8006c8e <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006c04:	4a6f      	ldr	r2, [pc, #444]	; (8006dc4 <mainLoop+0x2f4>)
 8006c06:	2101      	movs	r1, #1
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f001 f929 	bl	8007e60 <lcd_print>
			  if(dilSecim==0) {
 8006c0e:	4b68      	ldr	r3, [pc, #416]	; (8006db0 <mainLoop+0x2e0>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d105      	bne.n	8006c22 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006c16:	4a6c      	ldr	r2, [pc, #432]	; (8006dc8 <mainLoop+0x2f8>)
 8006c18:	2101      	movs	r1, #1
 8006c1a:	2002      	movs	r0, #2
 8006c1c:	f001 f920 	bl	8007e60 <lcd_print>
 8006c20:	e008      	b.n	8006c34 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006c22:	4b63      	ldr	r3, [pc, #396]	; (8006db0 <mainLoop+0x2e0>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d104      	bne.n	8006c34 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006c2a:	4a68      	ldr	r2, [pc, #416]	; (8006dcc <mainLoop+0x2fc>)
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	2002      	movs	r0, #2
 8006c30:	f001 f916 	bl	8007e60 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c38:	f001 fe68 	bl	800890c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006c3c:	bf00      	nop
 8006c3e:	485a      	ldr	r0, [pc, #360]	; (8006da8 <mainLoop+0x2d8>)
 8006c40:	f003 fa5d 	bl	800a0fe <HAL_I2C_GetError>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d0f9      	beq.n	8006c3e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006c4a:	e003      	b.n	8006c54 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c50:	f001 fe5c 	bl	800890c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006c54:	4854      	ldr	r0, [pc, #336]	; (8006da8 <mainLoop+0x2d8>)
 8006c56:	f003 fa45 	bl	800a0e4 <HAL_I2C_GetState>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	d1f5      	bne.n	8006c4c <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006c60:	4b53      	ldr	r3, [pc, #332]	; (8006db0 <mainLoop+0x2e0>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d105      	bne.n	8006c74 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006c68:	4a59      	ldr	r2, [pc, #356]	; (8006dd0 <mainLoop+0x300>)
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	2002      	movs	r0, #2
 8006c6e:	f001 f8f7 	bl	8007e60 <lcd_print>
 8006c72:	e008      	b.n	8006c86 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006c74:	4b4e      	ldr	r3, [pc, #312]	; (8006db0 <mainLoop+0x2e0>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d104      	bne.n	8006c86 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006c7c:	4a55      	ldr	r2, [pc, #340]	; (8006dd4 <mainLoop+0x304>)
 8006c7e:	2101      	movs	r1, #1
 8006c80:	2002      	movs	r0, #2
 8006c82:	f001 f8ed 	bl	8007e60 <lcd_print>
			  }

			  ilkOkuma=1;
 8006c86:	4b4e      	ldr	r3, [pc, #312]	; (8006dc0 <mainLoop+0x2f0>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	e014      	b.n	8006cb8 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006c8e:	4b48      	ldr	r3, [pc, #288]	; (8006db0 <mainLoop+0x2e0>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d105      	bne.n	8006ca2 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006c96:	4a50      	ldr	r2, [pc, #320]	; (8006dd8 <mainLoop+0x308>)
 8006c98:	2101      	movs	r1, #1
 8006c9a:	2002      	movs	r0, #2
 8006c9c:	f001 f8e0 	bl	8007e60 <lcd_print>
 8006ca0:	e008      	b.n	8006cb4 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006ca2:	4b43      	ldr	r3, [pc, #268]	; (8006db0 <mainLoop+0x2e0>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d104      	bne.n	8006cb4 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006caa:	4a4c      	ldr	r2, [pc, #304]	; (8006ddc <mainLoop+0x30c>)
 8006cac:	2101      	movs	r1, #1
 8006cae:	2002      	movs	r0, #2
 8006cb0:	f001 f8d6 	bl	8007e60 <lcd_print>
			  }
			  lcd_clear();
 8006cb4:	f001 f900 	bl	8007eb8 <lcd_clear>
		  }

		  lcd_clear();
 8006cb8:	f001 f8fe 	bl	8007eb8 <lcd_clear>

		  eepromKontrol();
 8006cbc:	f7f9 faba 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006cc0:	4b3e      	ldr	r3, [pc, #248]	; (8006dbc <mainLoop+0x2ec>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006cc6:	4b46      	ldr	r3, [pc, #280]	; (8006de0 <mainLoop+0x310>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d11c      	bne.n	8006d08 <mainLoop+0x238>
 8006cce:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <mainLoop+0x314>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	f083 0301 	eor.w	r3, r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <mainLoop+0x238>
 8006cdc:	4b42      	ldr	r3, [pc, #264]	; (8006de8 <mainLoop+0x318>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d111      	bne.n	8006d08 <mainLoop+0x238>
			lcd_clear();
 8006ce4:	f001 f8e8 	bl	8007eb8 <lcd_clear>
			HAL_Delay(10);
 8006ce8:	200a      	movs	r0, #10
 8006cea:	f001 fe0f 	bl	800890c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006cee:	4a3f      	ldr	r2, [pc, #252]	; (8006dec <mainLoop+0x31c>)
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	f001 f8b4 	bl	8007e60 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006cf8:	4a3d      	ldr	r2, [pc, #244]	; (8006df0 <mainLoop+0x320>)
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	2002      	movs	r0, #2
 8006cfe:	f001 f8af 	bl	8007e60 <lcd_print>
			mesajYazildi=1;
 8006d02:	4b38      	ldr	r3, [pc, #224]	; (8006de4 <mainLoop+0x314>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006d08:	4b35      	ldr	r3, [pc, #212]	; (8006de0 <mainLoop+0x310>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d112      	bne.n	8006d36 <mainLoop+0x266>
 8006d10:	2102      	movs	r1, #2
 8006d12:	481f      	ldr	r0, [pc, #124]	; (8006d90 <mainLoop+0x2c0>)
 8006d14:	f002 fbca 	bl	80094ac <HAL_GPIO_ReadPin>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d10b      	bne.n	8006d36 <mainLoop+0x266>
 8006d1e:	2104      	movs	r1, #4
 8006d20:	481b      	ldr	r0, [pc, #108]	; (8006d90 <mainLoop+0x2c0>)
 8006d22:	f002 fbc3 	bl	80094ac <HAL_GPIO_ReadPin>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d104      	bne.n	8006d36 <mainLoop+0x266>
			menuGiris=1;
 8006d2c:	4b2c      	ldr	r3, [pc, #176]	; (8006de0 <mainLoop+0x310>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006d32:	f001 f8c1 	bl	8007eb8 <lcd_clear>
		}

		if(menuGiris==1) {
 8006d36:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <mainLoop+0x310>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <mainLoop+0x272>
			menu();
 8006d3e:	f7fa fb87 	bl	8001450 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d46:	4813      	ldr	r0, [pc, #76]	; (8006d94 <mainLoop+0x2c4>)
 8006d48:	f002 fbdf 	bl	800950a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d50:	4828      	ldr	r0, [pc, #160]	; (8006df4 <mainLoop+0x324>)
 8006d52:	f002 fbab 	bl	80094ac <HAL_GPIO_ReadPin>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <mainLoop+0x2a2>
 8006d5c:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <mainLoop+0x328>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f083 0301 	eor.w	r3, r3, #1
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <mainLoop+0x2a2>
			stopVar=1;
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <mainLoop+0x32c>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	e002      	b.n	8006d78 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006d72:	4b22      	ldr	r3, [pc, #136]	; (8006dfc <mainLoop+0x32c>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006d78:	f7fd ffe8 	bl	8004d4c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006d7c:	f7fe f81a 	bl	8004db4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006d80:	f7fe f85e 	bl	8004e40 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006d84:	f7fe f8ae 	bl	8004ee4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006d88:	f7ff fc08 	bl	800659c <checkDemoModCalisma>
		checkLCDBacklight();
 8006d8c:	e6a3      	b.n	8006ad6 <mainLoop+0x6>
 8006d8e:	bf00      	nop
 8006d90:	40010800 	.word	0x40010800
 8006d94:	40011000 	.word	0x40011000
 8006d98:	20000263 	.word	0x20000263
 8006d9c:	20000210 	.word	0x20000210
 8006da0:	2000022c 	.word	0x2000022c
 8006da4:	20000260 	.word	0x20000260
 8006da8:	200003bc 	.word	0x200003bc
 8006dac:	2000012c 	.word	0x2000012c
 8006db0:	20000255 	.word	0x20000255
 8006db4:	0800dce4 	.word	0x0800dce4
 8006db8:	0800dcf8 	.word	0x0800dcf8
 8006dbc:	20000261 	.word	0x20000261
 8006dc0:	20000262 	.word	0x20000262
 8006dc4:	0800dd0c 	.word	0x0800dd0c
 8006dc8:	0800dd20 	.word	0x0800dd20
 8006dcc:	0800dd34 	.word	0x0800dd34
 8006dd0:	0800dd48 	.word	0x0800dd48
 8006dd4:	0800dd5c 	.word	0x0800dd5c
 8006dd8:	0800dd70 	.word	0x0800dd70
 8006ddc:	0800dd84 	.word	0x0800dd84
 8006de0:	20000251 	.word	0x20000251
 8006de4:	20000268 	.word	0x20000268
 8006de8:	20000252 	.word	0x20000252
 8006dec:	0800dd98 	.word	0x0800dd98
 8006df0:	0800ddac 	.word	0x0800ddac
 8006df4:	40010c00 	.word	0x40010c00
 8006df8:	20000289 	.word	0x20000289
 8006dfc:	20000286 	.word	0x20000286

08006e00 <takeMachineID>:
#include "GlobalVariables.h"
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006e06:	2001      	movs	r0, #1
 8006e08:	f001 f888 	bl	8007f1c <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006e0c:	2305      	movs	r3, #5
 8006e0e:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006e10:	2303      	movs	r3, #3
 8006e12:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006e14:	2300      	movs	r3, #0
 8006e16:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006e18:	4ba4      	ldr	r3, [pc, #656]	; (80070ac <takeMachineID+0x2ac>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006e1e:	220c      	movs	r2, #12
 8006e20:	2100      	movs	r1, #0
 8006e22:	48a3      	ldr	r0, [pc, #652]	; (80070b0 <takeMachineID+0x2b0>)
 8006e24:	f005 fc95 	bl	800c752 <memset>
    HAL_Delay(100);
 8006e28:	2064      	movs	r0, #100	; 0x64
 8006e2a:	f001 fd6f 	bl	800890c <HAL_Delay>

    printTemplate(1, 0);
 8006e2e:	2100      	movs	r1, #0
 8006e30:	2001      	movs	r0, #1
 8006e32:	f7fa f8a7 	bl	8000f84 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e36:	2108      	movs	r1, #8
 8006e38:	489e      	ldr	r0, [pc, #632]	; (80070b4 <takeMachineID+0x2b4>)
 8006e3a:	f002 fb37 	bl	80094ac <HAL_GPIO_ReadPin>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d136      	bne.n	8006eb2 <takeMachineID+0xb2>
        	lcd_cursor(0);
 8006e44:	2000      	movs	r0, #0
 8006e46:	f001 f869 	bl	8007f1c <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006e4a:	4899      	ldr	r0, [pc, #612]	; (80070b0 <takeMachineID+0x2b0>)
 8006e4c:	f7f9 f9ea 	bl	8000224 <strlen>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b0c      	cmp	r3, #12
 8006e54:	d010      	beq.n	8006e78 <takeMachineID+0x78>
        		lcd_clear();
 8006e56:	f001 f82f 	bl	8007eb8 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006e5a:	4a97      	ldr	r2, [pc, #604]	; (80070b8 <takeMachineID+0x2b8>)
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f000 fffe 	bl	8007e60 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006e64:	4a95      	ldr	r2, [pc, #596]	; (80070bc <takeMachineID+0x2bc>)
 8006e66:	2101      	movs	r1, #1
 8006e68:	2002      	movs	r0, #2
 8006e6a:	f000 fff9 	bl	8007e60 <lcd_print>
        		HAL_Delay(1200);
 8006e6e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e72:	f001 fd4b 	bl	800890c <HAL_Delay>
        		goto mainSection;
 8006e76:	e7c6      	b.n	8006e06 <takeMachineID+0x6>
        	}

        	memcpy(&eepromData[idStartPos], machineIDInt, 12);
 8006e78:	4b8c      	ldr	r3, [pc, #560]	; (80070ac <takeMachineID+0x2ac>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a90      	ldr	r2, [pc, #576]	; (80070c0 <takeMachineID+0x2c0>)
 8006e7e:	4413      	add	r3, r2
 8006e80:	4a90      	ldr	r2, [pc, #576]	; (80070c4 <takeMachineID+0x2c4>)
 8006e82:	6810      	ldr	r0, [r2, #0]
 8006e84:	6851      	ldr	r1, [r2, #4]
 8006e86:	6892      	ldr	r2, [r2, #8]
 8006e88:	6018      	str	r0, [r3, #0]
 8006e8a:	6059      	str	r1, [r3, #4]
 8006e8c:	609a      	str	r2, [r3, #8]

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e8e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e92:	9302      	str	r3, [sp, #8]
 8006e94:	236e      	movs	r3, #110	; 0x6e
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	4b89      	ldr	r3, [pc, #548]	; (80070c0 <takeMachineID+0x2c0>)
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	236e      	movs	r3, #110	; 0x6e
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	21a0      	movs	r1, #160	; 0xa0
 8006ea2:	4889      	ldr	r0, [pc, #548]	; (80070c8 <takeMachineID+0x2c8>)
 8006ea4:	f002 fdbc 	bl	8009a20 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8006ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006eac:	f001 fd2e 	bl	800890c <HAL_Delay>

            break;
 8006eb0:	e13a      	b.n	8007128 <takeMachineID+0x328>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	487f      	ldr	r0, [pc, #508]	; (80070b4 <takeMachineID+0x2b4>)
 8006eb6:	f002 faf9 	bl	80094ac <HAL_GPIO_ReadPin>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d111      	bne.n	8006ee4 <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b07      	cmp	r3, #7
 8006ec4:	d102      	bne.n	8006ecc <takeMachineID+0xcc>
        		cursorPosition = 10;
 8006ec6:	230a      	movs	r3, #10
 8006ec8:	60bb      	str	r3, [r7, #8]
 8006eca:	e008      	b.n	8006ede <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b0e      	cmp	r3, #14
 8006ed0:	d102      	bne.n	8006ed8 <takeMachineID+0xd8>
                cursorPosition = 3;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	e002      	b.n	8006ede <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006ede:	2096      	movs	r0, #150	; 0x96
 8006ee0:	f001 fd14 	bl	800890c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006ee4:	2108      	movs	r1, #8
 8006ee6:	4879      	ldr	r0, [pc, #484]	; (80070cc <takeMachineID+0x2cc>)
 8006ee8:	f002 fae0 	bl	80094ac <HAL_GPIO_ReadPin>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d111      	bne.n	8006f16 <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d102      	bne.n	8006efe <takeMachineID+0xfe>
                cursorPosition = 14;
 8006ef8:	230e      	movs	r3, #14
 8006efa:	60bb      	str	r3, [r7, #8]
 8006efc:	e008      	b.n	8006f10 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b0a      	cmp	r3, #10
 8006f02:	d102      	bne.n	8006f0a <takeMachineID+0x10a>
            	cursorPosition = 7;
 8006f04:	2307      	movs	r3, #7
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	e002      	b.n	8006f10 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006f10:	2096      	movs	r0, #150	; 0x96
 8006f12:	f001 fcfb 	bl	800890c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006f16:	2102      	movs	r1, #2
 8006f18:	4866      	ldr	r0, [pc, #408]	; (80070b4 <takeMachineID+0x2b4>)
 8006f1a:	f002 fac7 	bl	80094ac <HAL_GPIO_ReadPin>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f040 80a7 	bne.w	8007074 <takeMachineID+0x274>
        	if(cursorPosition == 3) {
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d10a      	bne.n	8006f42 <takeMachineID+0x142>
        		machineID[arrayPos] = '0';
 8006f2c:	4a60      	ldr	r2, [pc, #384]	; (80070b0 <takeMachineID+0x2b0>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	2230      	movs	r2, #48	; 0x30
 8006f34:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006f36:	4a62      	ldr	r2, [pc, #392]	; (80070c0 <takeMachineID+0x2c0>)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	e07c      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 4) {
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d10a      	bne.n	8006f5e <takeMachineID+0x15e>
        		machineID[arrayPos] = '1';
 8006f48:	4a59      	ldr	r2, [pc, #356]	; (80070b0 <takeMachineID+0x2b0>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2231      	movs	r2, #49	; 0x31
 8006f50:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006f52:	4a5b      	ldr	r2, [pc, #364]	; (80070c0 <takeMachineID+0x2c0>)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	4413      	add	r3, r2
 8006f58:	2201      	movs	r2, #1
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e06e      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 5) {
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b05      	cmp	r3, #5
 8006f62:	d10a      	bne.n	8006f7a <takeMachineID+0x17a>
        		machineID[arrayPos] = '2';
 8006f64:	4a52      	ldr	r2, [pc, #328]	; (80070b0 <takeMachineID+0x2b0>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4413      	add	r3, r2
 8006f6a:	2232      	movs	r2, #50	; 0x32
 8006f6c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006f6e:	4a54      	ldr	r2, [pc, #336]	; (80070c0 <takeMachineID+0x2c0>)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	4413      	add	r3, r2
 8006f74:	2202      	movs	r2, #2
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e060      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 6) {
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b06      	cmp	r3, #6
 8006f7e:	d10a      	bne.n	8006f96 <takeMachineID+0x196>
        		machineID[arrayPos] = '3';
 8006f80:	4a4b      	ldr	r2, [pc, #300]	; (80070b0 <takeMachineID+0x2b0>)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	2233      	movs	r2, #51	; 0x33
 8006f88:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006f8a:	4a4d      	ldr	r2, [pc, #308]	; (80070c0 <takeMachineID+0x2c0>)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	4413      	add	r3, r2
 8006f90:	2203      	movs	r2, #3
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	e052      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 7) {
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b07      	cmp	r3, #7
 8006f9a:	d10a      	bne.n	8006fb2 <takeMachineID+0x1b2>
        		machineID[arrayPos] = '4';
 8006f9c:	4a44      	ldr	r2, [pc, #272]	; (80070b0 <takeMachineID+0x2b0>)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	2234      	movs	r2, #52	; 0x34
 8006fa4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006fa6:	4a46      	ldr	r2, [pc, #280]	; (80070c0 <takeMachineID+0x2c0>)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	4413      	add	r3, r2
 8006fac:	2204      	movs	r2, #4
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e044      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 10) {
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b0a      	cmp	r3, #10
 8006fb6:	d10a      	bne.n	8006fce <takeMachineID+0x1ce>
        		machineID[arrayPos] = '5';
 8006fb8:	4a3d      	ldr	r2, [pc, #244]	; (80070b0 <takeMachineID+0x2b0>)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2235      	movs	r2, #53	; 0x35
 8006fc0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006fc2:	4a3f      	ldr	r2, [pc, #252]	; (80070c0 <takeMachineID+0x2c0>)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	2205      	movs	r2, #5
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e036      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 11) {
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b0b      	cmp	r3, #11
 8006fd2:	d10a      	bne.n	8006fea <takeMachineID+0x1ea>
        		machineID[arrayPos] = '6';
 8006fd4:	4a36      	ldr	r2, [pc, #216]	; (80070b0 <takeMachineID+0x2b0>)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4413      	add	r3, r2
 8006fda:	2236      	movs	r2, #54	; 0x36
 8006fdc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006fde:	4a38      	ldr	r2, [pc, #224]	; (80070c0 <takeMachineID+0x2c0>)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	2206      	movs	r2, #6
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	e028      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 12) {
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b0c      	cmp	r3, #12
 8006fee:	d10a      	bne.n	8007006 <takeMachineID+0x206>
        		machineID[arrayPos] = '7';
 8006ff0:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <takeMachineID+0x2b0>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	2237      	movs	r2, #55	; 0x37
 8006ff8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006ffa:	4a31      	ldr	r2, [pc, #196]	; (80070c0 <takeMachineID+0x2c0>)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	4413      	add	r3, r2
 8007000:	2207      	movs	r2, #7
 8007002:	701a      	strb	r2, [r3, #0]
 8007004:	e01a      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 13) {
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b0d      	cmp	r3, #13
 800700a:	d10a      	bne.n	8007022 <takeMachineID+0x222>
        		machineID[arrayPos] = '8';
 800700c:	4a28      	ldr	r2, [pc, #160]	; (80070b0 <takeMachineID+0x2b0>)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4413      	add	r3, r2
 8007012:	2238      	movs	r2, #56	; 0x38
 8007014:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007016:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <takeMachineID+0x2c0>)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	4413      	add	r3, r2
 800701c:	2208      	movs	r2, #8
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	e00c      	b.n	800703c <takeMachineID+0x23c>
        	} else if(cursorPosition == 14) {
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b0e      	cmp	r3, #14
 8007026:	d109      	bne.n	800703c <takeMachineID+0x23c>
        		machineID[arrayPos] = '9';
 8007028:	4a21      	ldr	r2, [pc, #132]	; (80070b0 <takeMachineID+0x2b0>)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	2239      	movs	r2, #57	; 0x39
 8007030:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007032:	4a23      	ldr	r2, [pc, #140]	; (80070c0 <takeMachineID+0x2c0>)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	4413      	add	r3, r2
 8007038:	2209      	movs	r2, #9
 800703a:	701a      	strb	r2, [r3, #0]
        	}

        	if(arrayPos == machineIDCharacterLimit - 1) {
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b0b      	cmp	r3, #11
 8007040:	d102      	bne.n	8007048 <takeMachineID+0x248>
        		machineID[machineIDCharacterLimit] = '\0';
 8007042:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <takeMachineID+0x2b0>)
 8007044:	2200      	movs	r2, #0
 8007046:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	b2d9      	uxtb	r1, r3
 800704c:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <takeMachineID+0x2b0>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4413      	add	r3, r2
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	2001      	movs	r0, #1
 8007058:	f000 ff17 	bl	8007e8a <lcd_print_char>

        	writeLoc++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3301      	adds	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3301      	adds	r3, #1
 8007066:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 800706e:	2096      	movs	r0, #150	; 0x96
 8007070:	f001 fc4c 	bl	800890c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007074:	2104      	movs	r1, #4
 8007076:	480f      	ldr	r0, [pc, #60]	; (80070b4 <takeMachineID+0x2b4>)
 8007078:	f002 fa18 	bl	80094ac <HAL_GPIO_ReadPin>
 800707c:	4603      	mov	r3, r0
 800707e:	2b01      	cmp	r3, #1
 8007080:	d14b      	bne.n	800711a <takeMachineID+0x31a>
            if(strlen(machineID) >= 1) {
 8007082:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <takeMachineID+0x2b0>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d044      	beq.n	8007114 <takeMachineID+0x314>
                machineID[arrayPos] = '\0';
 800708a:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <takeMachineID+0x2b0>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007094:	4a0a      	ldr	r2, [pc, #40]	; (80070c0 <takeMachineID+0x2c0>)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	4413      	add	r3, r2
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	dd15      	ble.n	80070d0 <takeMachineID+0x2d0>
                	writeLoc--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	e016      	b.n	80070da <takeMachineID+0x2da>
 80070ac:	20000004 	.word	0x20000004
 80070b0:	200001a4 	.word	0x200001a4
 80070b4:	40010800 	.word	0x40010800
 80070b8:	0800ddc0 	.word	0x0800ddc0
 80070bc:	0800ddd4 	.word	0x0800ddd4
 80070c0:	2000012c 	.word	0x2000012c
 80070c4:	200001d8 	.word	0x200001d8
 80070c8:	200003bc 	.word	0x200003bc
 80070cc:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	dc01      	bgt.n	80070da <takeMachineID+0x2da>
                	writeLoc = 5;
 80070d6:	2305      	movs	r3, #5
 80070d8:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dd06      	ble.n	80070ee <takeMachineID+0x2ee>
                	arrayPos--;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	e007      	b.n	80070fe <takeMachineID+0x2fe>
                } else if(arrayPos < 0) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	da04      	bge.n	80070fe <takeMachineID+0x2fe>
                	arrayPos = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 80070f8:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <takeMachineID+0x330>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	3304      	adds	r3, #4
 8007104:	b2db      	uxtb	r3, r3
 8007106:	4619      	mov	r1, r3
 8007108:	2001      	movs	r0, #1
 800710a:	f000 fedf 	bl	8007ecc <lcd_delete_char>
                HAL_Delay(50);
 800710e:	2032      	movs	r0, #50	; 0x32
 8007110:	f001 fbfc 	bl	800890c <HAL_Delay>
            }

            HAL_Delay(150);
 8007114:	2096      	movs	r0, #150	; 0x96
 8007116:	f001 fbf9 	bl	800890c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	4619      	mov	r1, r3
 8007120:	2002      	movs	r0, #2
 8007122:	f000 fe7e 	bl	8007e22 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007126:	e686      	b.n	8006e36 <takeMachineID+0x36>
    }
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20000004 	.word	0x20000004

08007134 <takeWifiSSID>:

void takeWifiSSID() {
 8007134:	b5b0      	push	{r4, r5, r7, lr}
 8007136:	b08a      	sub	sp, #40	; 0x28
 8007138:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 800713a:	2001      	movs	r0, #1
 800713c:	f000 feee 	bl	8007f1c <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID)); //wifiSSID Sıfırlanıyor.
 8007140:	2214      	movs	r2, #20
 8007142:	2100      	movs	r1, #0
 8007144:	4885      	ldr	r0, [pc, #532]	; (800735c <takeWifiSSID+0x228>)
 8007146:	f005 fb04 	bl	800c752 <memset>
    HAL_Delay(100);
 800714a:	2064      	movs	r0, #100	; 0x64
 800714c:	f001 fbde 	bl	800890c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007150:	2301      	movs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007154:	2307      	movs	r3, #7
 8007156:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007158:	2301      	movs	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007160:	4b7f      	ldr	r3, [pc, #508]	; (8007360 <takeWifiSSID+0x22c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007166:	2101      	movs	r1, #1
 8007168:	2002      	movs	r0, #2
 800716a:	f7f9 ff0b 	bl	8000f84 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800716e:	2108      	movs	r1, #8
 8007170:	487c      	ldr	r0, [pc, #496]	; (8007364 <takeWifiSSID+0x230>)
 8007172:	f002 f99b 	bl	80094ac <HAL_GPIO_ReadPin>
 8007176:	4603      	mov	r3, r0
 8007178:	2b01      	cmp	r3, #1
 800717a:	d149      	bne.n	8007210 <takeWifiSSID+0xdc>
            lcd_cursor(0);
 800717c:	2000      	movs	r0, #0
 800717e:	f000 fecd 	bl	8007f1c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007182:	4876      	ldr	r0, [pc, #472]	; (800735c <takeWifiSSID+0x228>)
 8007184:	f7f9 f84e 	bl	8000224 <strlen>
 8007188:	4603      	mov	r3, r0
 800718a:	2b14      	cmp	r3, #20
 800718c:	d910      	bls.n	80071b0 <takeWifiSSID+0x7c>
                lcd_clear();
 800718e:	f000 fe93 	bl	8007eb8 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007192:	4a75      	ldr	r2, [pc, #468]	; (8007368 <takeWifiSSID+0x234>)
 8007194:	2101      	movs	r1, #1
 8007196:	2001      	movs	r0, #1
 8007198:	f000 fe62 	bl	8007e60 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 800719c:	4a73      	ldr	r2, [pc, #460]	; (800736c <takeWifiSSID+0x238>)
 800719e:	2101      	movs	r1, #1
 80071a0:	2002      	movs	r0, #2
 80071a2:	f000 fe5d 	bl	8007e60 <lcd_print>
                HAL_Delay(1250);
 80071a6:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80071aa:	f001 fbaf 	bl	800890c <HAL_Delay>
                goto mainSSIDSection;
 80071ae:	e7c4      	b.n	800713a <takeWifiSSID+0x6>
            }

            wifiSSID[arrayPosition] = '\0';
 80071b0:	4a6a      	ldr	r2, [pc, #424]	; (800735c <takeWifiSSID+0x228>)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4413      	add	r3, r2
 80071b6:	2200      	movs	r2, #0
 80071b8:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = '\0';
 80071ba:	4a6d      	ldr	r2, [pc, #436]	; (8007370 <takeWifiSSID+0x23c>)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4413      	add	r3, r2
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80071c4:	4a6b      	ldr	r2, [pc, #428]	; (8007374 <takeWifiSSID+0x240>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]

            memcpy(&eepromData[ssidStartPos], wifiSSIDInt, 20);
 80071ce:	4b64      	ldr	r3, [pc, #400]	; (8007360 <takeWifiSSID+0x22c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a68      	ldr	r2, [pc, #416]	; (8007374 <takeWifiSSID+0x240>)
 80071d4:	4413      	add	r3, r2
 80071d6:	4a66      	ldr	r2, [pc, #408]	; (8007370 <takeWifiSSID+0x23c>)
 80071d8:	6811      	ldr	r1, [r2, #0]
 80071da:	6855      	ldr	r5, [r2, #4]
 80071dc:	6894      	ldr	r4, [r2, #8]
 80071de:	68d0      	ldr	r0, [r2, #12]
 80071e0:	6019      	str	r1, [r3, #0]
 80071e2:	605d      	str	r5, [r3, #4]
 80071e4:	609c      	str	r4, [r3, #8]
 80071e6:	60d8      	str	r0, [r3, #12]
 80071e8:	6911      	ldr	r1, [r2, #16]
 80071ea:	6119      	str	r1, [r3, #16]

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071f0:	9302      	str	r3, [sp, #8]
 80071f2:	236e      	movs	r3, #110	; 0x6e
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	4b5f      	ldr	r3, [pc, #380]	; (8007374 <takeWifiSSID+0x240>)
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	236e      	movs	r3, #110	; 0x6e
 80071fc:	2200      	movs	r2, #0
 80071fe:	21a0      	movs	r1, #160	; 0xa0
 8007200:	485d      	ldr	r0, [pc, #372]	; (8007378 <takeWifiSSID+0x244>)
 8007202:	f002 fc0d 	bl	8009a20 <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 8007206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800720a:	f001 fb7f 	bl	800890c <HAL_Delay>

            break;
 800720e:	e142      	b.n	8007496 <takeWifiSSID+0x362>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007210:	2101      	movs	r1, #1
 8007212:	4854      	ldr	r0, [pc, #336]	; (8007364 <takeWifiSSID+0x230>)
 8007214:	f002 f94a 	bl	80094ac <HAL_GPIO_ReadPin>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d150      	bne.n	80072c0 <takeWifiSSID+0x18c>
        	cursorPosition++;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3301      	adds	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
        	if(cursorPosition > 80) {
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b50      	cmp	r3, #80	; 0x50
 8007228:	dd01      	ble.n	800722e <takeWifiSSID+0xfa>
        		cursorPosition = 1;
 800722a:	2301      	movs	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b10      	cmp	r3, #16
 8007232:	d13f      	bne.n	80072b4 <takeWifiSSID+0x180>
            	if(page == 1) {
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d109      	bne.n	800724e <takeWifiSSID+0x11a>
            		cursorPosition = 1;
 800723a:	2301      	movs	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
            		page++;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	3301      	adds	r3, #1
 8007242:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007244:	2102      	movs	r1, #2
 8007246:	2002      	movs	r0, #2
 8007248:	f7f9 fe9c 	bl	8000f84 <printTemplate>
 800724c:	e035      	b.n	80072ba <takeWifiSSID+0x186>
            	} else if(page == 2) {
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d109      	bne.n	8007268 <takeWifiSSID+0x134>
            		cursorPosition = 1;
 8007254:	2301      	movs	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
            		page++;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	3301      	adds	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800725e:	2103      	movs	r1, #3
 8007260:	2002      	movs	r0, #2
 8007262:	f7f9 fe8f 	bl	8000f84 <printTemplate>
 8007266:	e028      	b.n	80072ba <takeWifiSSID+0x186>
            	} else if(page == 3) {
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b03      	cmp	r3, #3
 800726c:	d109      	bne.n	8007282 <takeWifiSSID+0x14e>
            		cursorPosition = 1;
 800726e:	2301      	movs	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]
            		page++;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	3301      	adds	r3, #1
 8007276:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007278:	2104      	movs	r1, #4
 800727a:	2002      	movs	r0, #2
 800727c:	f7f9 fe82 	bl	8000f84 <printTemplate>
 8007280:	e01b      	b.n	80072ba <takeWifiSSID+0x186>
            	} else if(page == 4) {
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b04      	cmp	r3, #4
 8007286:	d109      	bne.n	800729c <takeWifiSSID+0x168>
            		cursorPosition = 1;
 8007288:	2301      	movs	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
            		page++;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3301      	adds	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007292:	2105      	movs	r1, #5
 8007294:	2002      	movs	r0, #2
 8007296:	f7f9 fe75 	bl	8000f84 <printTemplate>
 800729a:	e00e      	b.n	80072ba <takeWifiSSID+0x186>
            	} else if(page == 5) {
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2b05      	cmp	r3, #5
 80072a0:	d10b      	bne.n	80072ba <takeWifiSSID+0x186>
            		cursorPosition = 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80072a6:	2301      	movs	r3, #1
 80072a8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80072aa:	2101      	movs	r1, #1
 80072ac:	2002      	movs	r0, #2
 80072ae:	f7f9 fe69 	bl	8000f84 <printTemplate>
 80072b2:	e002      	b.n	80072ba <takeWifiSSID+0x186>
            	}
            } else {
            	cursorPosition++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80072ba:	2096      	movs	r0, #150	; 0x96
 80072bc:	f001 fb26 	bl	800890c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80072c0:	2108      	movs	r1, #8
 80072c2:	482e      	ldr	r0, [pc, #184]	; (800737c <takeWifiSSID+0x248>)
 80072c4:	f002 f8f2 	bl	80094ac <HAL_GPIO_ReadPin>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d15e      	bne.n	800738c <takeWifiSSID+0x258>
        	cursorPosition--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
        	if(cursorPosition < 1) {
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dc01      	bgt.n	80072de <takeWifiSSID+0x1aa>
        		cursorPosition = 80;
 80072da:	2350      	movs	r3, #80	; 0x50
 80072dc:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d14d      	bne.n	8007380 <takeWifiSSID+0x24c>
            	if(page == 1) {
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d108      	bne.n	80072fc <takeWifiSSID+0x1c8>
            		cursorPosition = 16;
 80072ea:	2310      	movs	r3, #16
 80072ec:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80072ee:	2305      	movs	r3, #5
 80072f0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80072f2:	2105      	movs	r1, #5
 80072f4:	2002      	movs	r0, #2
 80072f6:	f7f9 fe45 	bl	8000f84 <printTemplate>
 80072fa:	e044      	b.n	8007386 <takeWifiSSID+0x252>
            	} else if(page == 2) {
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d108      	bne.n	8007314 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8007302:	2310      	movs	r3, #16
 8007304:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007306:	2301      	movs	r3, #1
 8007308:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800730a:	2101      	movs	r1, #1
 800730c:	2002      	movs	r0, #2
 800730e:	f7f9 fe39 	bl	8000f84 <printTemplate>
 8007312:	e038      	b.n	8007386 <takeWifiSSID+0x252>
            	} else if(page == 3) {
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d108      	bne.n	800732c <takeWifiSSID+0x1f8>
            		cursorPosition = 16;
 800731a:	2310      	movs	r3, #16
 800731c:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800731e:	2302      	movs	r3, #2
 8007320:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007322:	2102      	movs	r1, #2
 8007324:	2002      	movs	r0, #2
 8007326:	f7f9 fe2d 	bl	8000f84 <printTemplate>
 800732a:	e02c      	b.n	8007386 <takeWifiSSID+0x252>
            	} else if(page == 4) {
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2b04      	cmp	r3, #4
 8007330:	d108      	bne.n	8007344 <takeWifiSSID+0x210>
            		cursorPosition = 16;
 8007332:	2310      	movs	r3, #16
 8007334:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007336:	2303      	movs	r3, #3
 8007338:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800733a:	2103      	movs	r1, #3
 800733c:	2002      	movs	r0, #2
 800733e:	f7f9 fe21 	bl	8000f84 <printTemplate>
 8007342:	e020      	b.n	8007386 <takeWifiSSID+0x252>
            	} else if(page == 5) {
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b05      	cmp	r3, #5
 8007348:	d11d      	bne.n	8007386 <takeWifiSSID+0x252>
            		cursorPosition = 16;
 800734a:	2310      	movs	r3, #16
 800734c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800734e:	2304      	movs	r3, #4
 8007350:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007352:	2104      	movs	r1, #4
 8007354:	2002      	movs	r0, #2
 8007356:	f7f9 fe15 	bl	8000f84 <printTemplate>
 800735a:	e014      	b.n	8007386 <takeWifiSSID+0x252>
 800735c:	200001b0 	.word	0x200001b0
 8007360:	20000008 	.word	0x20000008
 8007364:	40010800 	.word	0x40010800
 8007368:	0800dde8 	.word	0x0800dde8
 800736c:	0800ddfc 	.word	0x0800ddfc
 8007370:	200001e4 	.word	0x200001e4
 8007374:	2000012c 	.word	0x2000012c
 8007378:	200003bc 	.word	0x200003bc
 800737c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3b01      	subs	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007386:	2096      	movs	r0, #150	; 0x96
 8007388:	f001 fac0 	bl	800890c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800738c:	2102      	movs	r1, #2
 800738e:	4844      	ldr	r0, [pc, #272]	; (80074a0 <takeWifiSSID+0x36c>)
 8007390:	f002 f88c 	bl	80094ac <HAL_GPIO_ReadPin>
 8007394:	4603      	mov	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d130      	bne.n	80073fc <takeWifiSSID+0x2c8>
        	wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3b01      	subs	r3, #1
 800739e:	4a41      	ldr	r2, [pc, #260]	; (80074a4 <takeWifiSSID+0x370>)
 80073a0:	5cd1      	ldrb	r1, [r2, r3]
 80073a2:	4a41      	ldr	r2, [pc, #260]	; (80074a8 <takeWifiSSID+0x374>)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4413      	add	r3, r2
 80073a8:	460a      	mov	r2, r1
 80073aa:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b2d9      	uxtb	r1, r3
 80073b4:	4a3d      	ldr	r2, [pc, #244]	; (80074ac <takeWifiSSID+0x378>)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4413      	add	r3, r2
 80073ba:	460a      	mov	r2, r1
 80073bc:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b2d9      	uxtb	r1, r3
 80073c6:	4a3a      	ldr	r2, [pc, #232]	; (80074b0 <takeWifiSSID+0x37c>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	460a      	mov	r2, r1
 80073ce:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	b2d9      	uxtb	r1, r3
 80073d4:	4a34      	ldr	r2, [pc, #208]	; (80074a8 <takeWifiSSID+0x374>)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4413      	add	r3, r2
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	2001      	movs	r0, #1
 80073e0:	f000 fd53 	bl	8007e8a <lcd_print_char>

            writeLoc++;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	3301      	adds	r3, #1
 80073e8:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3301      	adds	r3, #1
 80073f4:	607b      	str	r3, [r7, #4]

            HAL_Delay(150);
 80073f6:	2096      	movs	r0, #150	; 0x96
 80073f8:	f001 fa88 	bl	800890c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80073fc:	2104      	movs	r1, #4
 80073fe:	4828      	ldr	r0, [pc, #160]	; (80074a0 <takeWifiSSID+0x36c>)
 8007400:	f002 f854 	bl	80094ac <HAL_GPIO_ReadPin>
 8007404:	4603      	mov	r3, r0
 8007406:	2b01      	cmp	r3, #1
 8007408:	d13e      	bne.n	8007488 <takeWifiSSID+0x354>
        	if(strlen(wifiSSID) >= 1) {
 800740a:	4b27      	ldr	r3, [pc, #156]	; (80074a8 <takeWifiSSID+0x374>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d037      	beq.n	8007482 <takeWifiSSID+0x34e>
        		wifiSSID[arrayPosition] = '\0';
 8007412:	4a25      	ldr	r2, [pc, #148]	; (80074a8 <takeWifiSSID+0x374>)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4413      	add	r3, r2
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[arrayPosition] = '\0';
 800741c:	4a23      	ldr	r2, [pc, #140]	; (80074ac <takeWifiSSID+0x378>)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4413      	add	r3, r2
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 8007426:	4a22      	ldr	r2, [pc, #136]	; (80074b0 <takeWifiSSID+0x37c>)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4413      	add	r3, r2
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b07      	cmp	r3, #7
 8007434:	dd03      	ble.n	800743e <takeWifiSSID+0x30a>
        			writeLoc--;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	3b01      	subs	r3, #1
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	e004      	b.n	8007448 <takeWifiSSID+0x314>
        		} else if(writeLoc < 7) {
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b06      	cmp	r3, #6
 8007442:	dc01      	bgt.n	8007448 <takeWifiSSID+0x314>
        			writeLoc = 7;
 8007444:	2307      	movs	r3, #7
 8007446:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	dd06      	ble.n	800745c <takeWifiSSID+0x328>
        			arrayPosition--;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	3b01      	subs	r3, #1
 8007452:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3b01      	subs	r3, #1
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	e007      	b.n	800746c <takeWifiSSID+0x338>
        		} else if(arrayPosition < 0) {
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	da04      	bge.n	800746c <takeWifiSSID+0x338>
        			arrayPosition = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <takeWifiSSID+0x380>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	3306      	adds	r3, #6
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4619      	mov	r1, r3
 8007476:	2001      	movs	r0, #1
 8007478:	f000 fd28 	bl	8007ecc <lcd_delete_char>
        		HAL_Delay(50);
 800747c:	2032      	movs	r0, #50	; 0x32
 800747e:	f001 fa45 	bl	800890c <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007482:	2096      	movs	r0, #150	; 0x96
 8007484:	f001 fa42 	bl	800890c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	2002      	movs	r0, #2
 8007490:	f000 fcc7 	bl	8007e22 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007494:	e66b      	b.n	800716e <takeWifiSSID+0x3a>
    }
}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bdb0      	pop	{r4, r5, r7, pc}
 800749e:	bf00      	nop
 80074a0:	40010800 	.word	0x40010800
 80074a4:	20000030 	.word	0x20000030
 80074a8:	200001b0 	.word	0x200001b0
 80074ac:	200001e4 	.word	0x200001e4
 80074b0:	2000012c 	.word	0x2000012c
 80074b4:	20000008 	.word	0x20000008

080074b8 <takeWifiPass>:

void takeWifiPass() {
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b08a      	sub	sp, #40	; 0x28
 80074bc:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 80074be:	2001      	movs	r0, #1
 80074c0:	f000 fd2c 	bl	8007f1c <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 80074c4:	2214      	movs	r2, #20
 80074c6:	2100      	movs	r1, #0
 80074c8:	4885      	ldr	r0, [pc, #532]	; (80076e0 <takeWifiPass+0x228>)
 80074ca:	f005 f942 	bl	800c752 <memset>
    HAL_Delay(100);
 80074ce:	2064      	movs	r0, #100	; 0x64
 80074d0:	f001 fa1c 	bl	800890c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80074d4:	2301      	movs	r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 80074d8:	2307      	movs	r3, #7
 80074da:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 80074dc:	2301      	movs	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 80074e0:	2300      	movs	r3, #0
 80074e2:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 80074e4:	4b7f      	ldr	r3, [pc, #508]	; (80076e4 <takeWifiPass+0x22c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	607b      	str	r3, [r7, #4]


    printTemplate(3, 1);
 80074ea:	2101      	movs	r1, #1
 80074ec:	2003      	movs	r0, #3
 80074ee:	f7f9 fd49 	bl	8000f84 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80074f2:	2108      	movs	r1, #8
 80074f4:	487c      	ldr	r0, [pc, #496]	; (80076e8 <takeWifiPass+0x230>)
 80074f6:	f001 ffd9 	bl	80094ac <HAL_GPIO_ReadPin>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d149      	bne.n	8007594 <takeWifiPass+0xdc>
            lcd_cursor(0);
 8007500:	2000      	movs	r0, #0
 8007502:	f000 fd0b 	bl	8007f1c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007506:	4876      	ldr	r0, [pc, #472]	; (80076e0 <takeWifiPass+0x228>)
 8007508:	f7f8 fe8c 	bl	8000224 <strlen>
 800750c:	4603      	mov	r3, r0
 800750e:	2b14      	cmp	r3, #20
 8007510:	d910      	bls.n	8007534 <takeWifiPass+0x7c>
                lcd_clear();
 8007512:	f000 fcd1 	bl	8007eb8 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007516:	4a75      	ldr	r2, [pc, #468]	; (80076ec <takeWifiPass+0x234>)
 8007518:	2101      	movs	r1, #1
 800751a:	2001      	movs	r0, #1
 800751c:	f000 fca0 	bl	8007e60 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8007520:	4a73      	ldr	r2, [pc, #460]	; (80076f0 <takeWifiPass+0x238>)
 8007522:	2101      	movs	r1, #1
 8007524:	2002      	movs	r0, #2
 8007526:	f000 fc9b 	bl	8007e60 <lcd_print>
                HAL_Delay(1200);
 800752a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800752e:	f001 f9ed 	bl	800890c <HAL_Delay>
                goto mainPASSSection;
 8007532:	e7c4      	b.n	80074be <takeWifiPass+0x6>
            }

            wifiPass[arrayPos] = '\0';
 8007534:	4a6a      	ldr	r2, [pc, #424]	; (80076e0 <takeWifiPass+0x228>)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	4413      	add	r3, r2
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
            wifiPassInt[arrayPos] = '\0';
 800753e:	4a6d      	ldr	r2, [pc, #436]	; (80076f4 <takeWifiPass+0x23c>)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4413      	add	r3, r2
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 8007548:	4a6b      	ldr	r2, [pc, #428]	; (80076f8 <takeWifiPass+0x240>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	2200      	movs	r2, #0
 8007550:	701a      	strb	r2, [r3, #0]

            memcpy(&eepromData[passStartPos], wifiPassInt, 20);
 8007552:	4b64      	ldr	r3, [pc, #400]	; (80076e4 <takeWifiPass+0x22c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a68      	ldr	r2, [pc, #416]	; (80076f8 <takeWifiPass+0x240>)
 8007558:	4413      	add	r3, r2
 800755a:	4a66      	ldr	r2, [pc, #408]	; (80076f4 <takeWifiPass+0x23c>)
 800755c:	6811      	ldr	r1, [r2, #0]
 800755e:	6855      	ldr	r5, [r2, #4]
 8007560:	6894      	ldr	r4, [r2, #8]
 8007562:	68d0      	ldr	r0, [r2, #12]
 8007564:	6019      	str	r1, [r3, #0]
 8007566:	605d      	str	r5, [r3, #4]
 8007568:	609c      	str	r4, [r3, #8]
 800756a:	60d8      	str	r0, [r3, #12]
 800756c:	6911      	ldr	r1, [r2, #16]
 800756e:	6119      	str	r1, [r3, #16]

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007570:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007574:	9302      	str	r3, [sp, #8]
 8007576:	236e      	movs	r3, #110	; 0x6e
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	4b5f      	ldr	r3, [pc, #380]	; (80076f8 <takeWifiPass+0x240>)
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	236e      	movs	r3, #110	; 0x6e
 8007580:	2200      	movs	r2, #0
 8007582:	21a0      	movs	r1, #160	; 0xa0
 8007584:	485d      	ldr	r0, [pc, #372]	; (80076fc <takeWifiPass+0x244>)
 8007586:	f002 fa4b 	bl	8009a20 <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 800758a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800758e:	f001 f9bd 	bl	800890c <HAL_Delay>

            break;
 8007592:	e12d      	b.n	80077f0 <takeWifiPass+0x338>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007594:	2101      	movs	r1, #1
 8007596:	4854      	ldr	r0, [pc, #336]	; (80076e8 <takeWifiPass+0x230>)
 8007598:	f001 ff88 	bl	80094ac <HAL_GPIO_ReadPin>
 800759c:	4603      	mov	r3, r0
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d150      	bne.n	8007644 <takeWifiPass+0x18c>
        	cursorPosition++;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
        	if(cursorPosition > 80) {
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b50      	cmp	r3, #80	; 0x50
 80075ac:	dd01      	ble.n	80075b2 <takeWifiPass+0xfa>
        	    cursorPosition = 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b10      	cmp	r3, #16
 80075b6:	d13f      	bne.n	8007638 <takeWifiPass+0x180>
            	if(page == 1) {
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d109      	bne.n	80075d2 <takeWifiPass+0x11a>
            		cursorPosition = 1;
 80075be:	2301      	movs	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
            		page++;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	3301      	adds	r3, #1
 80075c6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80075c8:	2102      	movs	r1, #2
 80075ca:	2003      	movs	r0, #3
 80075cc:	f7f9 fcda 	bl	8000f84 <printTemplate>
 80075d0:	e035      	b.n	800763e <takeWifiPass+0x186>
            	} else if(page == 2) {
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d109      	bne.n	80075ec <takeWifiPass+0x134>
            		cursorPosition = 1;
 80075d8:	2301      	movs	r3, #1
 80075da:	60fb      	str	r3, [r7, #12]
            		page++;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	3301      	adds	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80075e2:	2103      	movs	r1, #3
 80075e4:	2003      	movs	r0, #3
 80075e6:	f7f9 fccd 	bl	8000f84 <printTemplate>
 80075ea:	e028      	b.n	800763e <takeWifiPass+0x186>
            	} else if(page == 3) {
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d109      	bne.n	8007606 <takeWifiPass+0x14e>
            		cursorPosition = 1;
 80075f2:	2301      	movs	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]
            		page++;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	3301      	adds	r3, #1
 80075fa:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80075fc:	2104      	movs	r1, #4
 80075fe:	2003      	movs	r0, #3
 8007600:	f7f9 fcc0 	bl	8000f84 <printTemplate>
 8007604:	e01b      	b.n	800763e <takeWifiPass+0x186>
            	} else if(page == 4) {
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b04      	cmp	r3, #4
 800760a:	d109      	bne.n	8007620 <takeWifiPass+0x168>
            		cursorPosition = 1;
 800760c:	2301      	movs	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3301      	adds	r3, #1
 8007614:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007616:	2105      	movs	r1, #5
 8007618:	2003      	movs	r0, #3
 800761a:	f7f9 fcb3 	bl	8000f84 <printTemplate>
 800761e:	e00e      	b.n	800763e <takeWifiPass+0x186>
            	} else if(page == 5) {
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2b05      	cmp	r3, #5
 8007624:	d10b      	bne.n	800763e <takeWifiPass+0x186>
            		cursorPosition = 1;
 8007626:	2301      	movs	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800762a:	2301      	movs	r3, #1
 800762c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800762e:	2101      	movs	r1, #1
 8007630:	2003      	movs	r0, #3
 8007632:	f7f9 fca7 	bl	8000f84 <printTemplate>
 8007636:	e002      	b.n	800763e <takeWifiPass+0x186>
            	}
            } else {
            	cursorPosition++;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800763e:	2096      	movs	r0, #150	; 0x96
 8007640:	f001 f964 	bl	800890c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007644:	2108      	movs	r1, #8
 8007646:	482e      	ldr	r0, [pc, #184]	; (8007700 <takeWifiPass+0x248>)
 8007648:	f001 ff30 	bl	80094ac <HAL_GPIO_ReadPin>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d15e      	bne.n	8007710 <takeWifiPass+0x258>
        	cursorPosition--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3b01      	subs	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]
        	if(cursorPosition < 1) {
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	dc01      	bgt.n	8007662 <takeWifiPass+0x1aa>
        	    cursorPosition = 80;
 800765e:	2350      	movs	r3, #80	; 0x50
 8007660:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d14d      	bne.n	8007704 <takeWifiPass+0x24c>
            	if(page == 1) {
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d108      	bne.n	8007680 <takeWifiPass+0x1c8>
            		cursorPosition = 16;
 800766e:	2310      	movs	r3, #16
 8007670:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007672:	2305      	movs	r3, #5
 8007674:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007676:	2105      	movs	r1, #5
 8007678:	2003      	movs	r0, #3
 800767a:	f7f9 fc83 	bl	8000f84 <printTemplate>
 800767e:	e044      	b.n	800770a <takeWifiPass+0x252>
            	} else if(page == 2) {
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d108      	bne.n	8007698 <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 8007686:	2310      	movs	r3, #16
 8007688:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800768a:	2301      	movs	r3, #1
 800768c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800768e:	2101      	movs	r1, #1
 8007690:	2003      	movs	r0, #3
 8007692:	f7f9 fc77 	bl	8000f84 <printTemplate>
 8007696:	e038      	b.n	800770a <takeWifiPass+0x252>
            	} else if(page == 3) {
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b03      	cmp	r3, #3
 800769c:	d108      	bne.n	80076b0 <takeWifiPass+0x1f8>
            		cursorPosition = 16;
 800769e:	2310      	movs	r3, #16
 80076a0:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80076a2:	2302      	movs	r3, #2
 80076a4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80076a6:	2102      	movs	r1, #2
 80076a8:	2003      	movs	r0, #3
 80076aa:	f7f9 fc6b 	bl	8000f84 <printTemplate>
 80076ae:	e02c      	b.n	800770a <takeWifiPass+0x252>
            	} else if(page == 4) {
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d108      	bne.n	80076c8 <takeWifiPass+0x210>
            		cursorPosition = 16;
 80076b6:	2310      	movs	r3, #16
 80076b8:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80076ba:	2303      	movs	r3, #3
 80076bc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80076be:	2103      	movs	r1, #3
 80076c0:	2003      	movs	r0, #3
 80076c2:	f7f9 fc5f 	bl	8000f84 <printTemplate>
 80076c6:	e020      	b.n	800770a <takeWifiPass+0x252>
            	} else if(page == 5) {
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d11d      	bne.n	800770a <takeWifiPass+0x252>
            		cursorPosition = 16;
 80076ce:	2310      	movs	r3, #16
 80076d0:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80076d2:	2304      	movs	r3, #4
 80076d4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80076d6:	2104      	movs	r1, #4
 80076d8:	2003      	movs	r0, #3
 80076da:	f7f9 fc53 	bl	8000f84 <printTemplate>
 80076de:	e014      	b.n	800770a <takeWifiPass+0x252>
 80076e0:	200001c4 	.word	0x200001c4
 80076e4:	2000000c 	.word	0x2000000c
 80076e8:	40010800 	.word	0x40010800
 80076ec:	0800dde8 	.word	0x0800dde8
 80076f0:	0800de10 	.word	0x0800de10
 80076f4:	200001f8 	.word	0x200001f8
 80076f8:	2000012c 	.word	0x2000012c
 80076fc:	200003bc 	.word	0x200003bc
 8007700:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3b01      	subs	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800770a:	2096      	movs	r0, #150	; 0x96
 800770c:	f001 f8fe 	bl	800890c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007710:	2102      	movs	r1, #2
 8007712:	4839      	ldr	r0, [pc, #228]	; (80077f8 <takeWifiPass+0x340>)
 8007714:	f001 feca 	bl	80094ac <HAL_GPIO_ReadPin>
 8007718:	4603      	mov	r3, r0
 800771a:	2b01      	cmp	r3, #1
 800771c:	d130      	bne.n	8007780 <takeWifiPass+0x2c8>
        	wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3b01      	subs	r3, #1
 8007722:	4a36      	ldr	r2, [pc, #216]	; (80077fc <takeWifiPass+0x344>)
 8007724:	5cd1      	ldrb	r1, [r2, r3]
 8007726:	4a36      	ldr	r2, [pc, #216]	; (8007800 <takeWifiPass+0x348>)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4413      	add	r3, r2
 800772c:	460a      	mov	r2, r1
 800772e:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	3b01      	subs	r3, #1
 8007736:	b2d9      	uxtb	r1, r3
 8007738:	4a32      	ldr	r2, [pc, #200]	; (8007804 <takeWifiPass+0x34c>)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	4413      	add	r3, r2
 800773e:	460a      	mov	r2, r1
 8007740:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b2d9      	uxtb	r1, r3
 800774a:	4a2f      	ldr	r2, [pc, #188]	; (8007808 <takeWifiPass+0x350>)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4413      	add	r3, r2
 8007750:	460a      	mov	r2, r1
 8007752:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	b2d9      	uxtb	r1, r3
 8007758:	4a29      	ldr	r2, [pc, #164]	; (8007800 <takeWifiPass+0x348>)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4413      	add	r3, r2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	2001      	movs	r0, #1
 8007764:	f000 fb91 	bl	8007e8a <lcd_print_char>

            writeLoc++;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	3301      	adds	r3, #1
 800776c:	613b      	str	r3, [r7, #16]
            arrayPos++;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3301      	adds	r3, #1
 8007772:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3301      	adds	r3, #1
 8007778:	607b      	str	r3, [r7, #4]

            HAL_Delay(150);
 800777a:	2096      	movs	r0, #150	; 0x96
 800777c:	f001 f8c6 	bl	800890c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007780:	2104      	movs	r1, #4
 8007782:	481d      	ldr	r0, [pc, #116]	; (80077f8 <takeWifiPass+0x340>)
 8007784:	f001 fe92 	bl	80094ac <HAL_GPIO_ReadPin>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	d129      	bne.n	80077e2 <takeWifiPass+0x32a>
            if(strlen(wifiPass) >= 1) {
 800778e:	4b1c      	ldr	r3, [pc, #112]	; (8007800 <takeWifiPass+0x348>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d022      	beq.n	80077dc <takeWifiPass+0x324>
            	wifiPass[arrayPos] = '\0';
 8007796:	4a1a      	ldr	r2, [pc, #104]	; (8007800 <takeWifiPass+0x348>)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4413      	add	r3, r2
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
            	wifiPassInt[arrayPos] = '\0';
 80077a0:	4a18      	ldr	r2, [pc, #96]	; (8007804 <takeWifiPass+0x34c>)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4413      	add	r3, r2
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 80077aa:	4a17      	ldr	r2, [pc, #92]	; (8007808 <takeWifiPass+0x350>)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4413      	add	r3, r2
 80077b0:	2200      	movs	r2, #0
 80077b2:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	3b01      	subs	r3, #1
 80077be:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	3306      	adds	r3, #6
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	4619      	mov	r1, r3
 80077d0:	2001      	movs	r0, #1
 80077d2:	f000 fb7b 	bl	8007ecc <lcd_delete_char>
            	HAL_Delay(50);
 80077d6:	2032      	movs	r0, #50	; 0x32
 80077d8:	f001 f898 	bl	800890c <HAL_Delay>
            }

            HAL_Delay(150);
 80077dc:	2096      	movs	r0, #150	; 0x96
 80077de:	f001 f895 	bl	800890c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	4619      	mov	r1, r3
 80077e8:	2002      	movs	r0, #2
 80077ea:	f000 fb1a 	bl	8007e22 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80077ee:	e680      	b.n	80074f2 <takeWifiPass+0x3a>
    }
}
 80077f0:	bf00      	nop
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bdb0      	pop	{r4, r5, r7, pc}
 80077f8:	40010800 	.word	0x40010800
 80077fc:	20000030 	.word	0x20000030
 8007800:	200001c4 	.word	0x200001c4
 8007804:	200001f8 	.word	0x200001f8
 8007808:	2000012c 	.word	0x2000012c

0800780c <mergeData>:

char* mergeData() {
 800780c:	b580      	push	{r7, lr}
 800780e:	b09c      	sub	sp, #112	; 0x70
 8007810:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007812:	2300      	movs	r3, #0
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800781a:	2228      	movs	r2, #40	; 0x28
 800781c:	2100      	movs	r1, #0
 800781e:	4618      	mov	r0, r3
 8007820:	f004 ff97 	bl	800c752 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007824:	4b67      	ldr	r3, [pc, #412]	; (80079c4 <mergeData+0x1b8>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	713b      	strb	r3, [r7, #4]
 800782a:	4b67      	ldr	r3, [pc, #412]	; (80079c8 <mergeData+0x1bc>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	717b      	strb	r3, [r7, #5]
 8007830:	4b66      	ldr	r3, [pc, #408]	; (80079cc <mergeData+0x1c0>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	71bb      	strb	r3, [r7, #6]
 8007836:	4b66      	ldr	r3, [pc, #408]	; (80079d0 <mergeData+0x1c4>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
 800783c:	4b65      	ldr	r3, [pc, #404]	; (80079d4 <mergeData+0x1c8>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	723b      	strb	r3, [r7, #8]
 8007842:	4b65      	ldr	r3, [pc, #404]	; (80079d8 <mergeData+0x1cc>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	727b      	strb	r3, [r7, #9]
 8007848:	4b64      	ldr	r3, [pc, #400]	; (80079dc <mergeData+0x1d0>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	72bb      	strb	r3, [r7, #10]
 800784e:	4b64      	ldr	r3, [pc, #400]	; (80079e0 <mergeData+0x1d4>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	72fb      	strb	r3, [r7, #11]
 8007854:	4b63      	ldr	r3, [pc, #396]	; (80079e4 <mergeData+0x1d8>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	733b      	strb	r3, [r7, #12]
 800785a:	4b63      	ldr	r3, [pc, #396]	; (80079e8 <mergeData+0x1dc>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	737b      	strb	r3, [r7, #13]
 8007860:	4b62      	ldr	r3, [pc, #392]	; (80079ec <mergeData+0x1e0>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	73bb      	strb	r3, [r7, #14]
 8007866:	4b62      	ldr	r3, [pc, #392]	; (80079f0 <mergeData+0x1e4>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	4b61      	ldr	r3, [pc, #388]	; (80079f4 <mergeData+0x1e8>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	743b      	strb	r3, [r7, #16]
 8007872:	4b61      	ldr	r3, [pc, #388]	; (80079f8 <mergeData+0x1ec>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	747b      	strb	r3, [r7, #17]
 8007878:	4b60      	ldr	r3, [pc, #384]	; (80079fc <mergeData+0x1f0>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	74bb      	strb	r3, [r7, #18]
 800787e:	4b60      	ldr	r3, [pc, #384]	; (8007a00 <mergeData+0x1f4>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	74fb      	strb	r3, [r7, #19]
 8007884:	4b5f      	ldr	r3, [pc, #380]	; (8007a04 <mergeData+0x1f8>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	753b      	strb	r3, [r7, #20]
 800788a:	4b5f      	ldr	r3, [pc, #380]	; (8007a08 <mergeData+0x1fc>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	757b      	strb	r3, [r7, #21]
 8007890:	4b5e      	ldr	r3, [pc, #376]	; (8007a0c <mergeData+0x200>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	75bb      	strb	r3, [r7, #22]
 8007896:	4b5e      	ldr	r3, [pc, #376]	; (8007a10 <mergeData+0x204>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	75fb      	strb	r3, [r7, #23]
 800789c:	4b5d      	ldr	r3, [pc, #372]	; (8007a14 <mergeData+0x208>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	763b      	strb	r3, [r7, #24]
 80078a2:	4b5d      	ldr	r3, [pc, #372]	; (8007a18 <mergeData+0x20c>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	767b      	strb	r3, [r7, #25]
 80078a8:	4b5c      	ldr	r3, [pc, #368]	; (8007a1c <mergeData+0x210>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	76bb      	strb	r3, [r7, #26]
 80078ae:	4b5c      	ldr	r3, [pc, #368]	; (8007a20 <mergeData+0x214>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	76fb      	strb	r3, [r7, #27]
 80078b4:	4b5b      	ldr	r3, [pc, #364]	; (8007a24 <mergeData+0x218>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	773b      	strb	r3, [r7, #28]
 80078ba:	4b5b      	ldr	r3, [pc, #364]	; (8007a28 <mergeData+0x21c>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	777b      	strb	r3, [r7, #29]
 80078c0:	4b5a      	ldr	r3, [pc, #360]	; (8007a2c <mergeData+0x220>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	77bb      	strb	r3, [r7, #30]
 80078c6:	4b5a      	ldr	r3, [pc, #360]	; (8007a30 <mergeData+0x224>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	4b59      	ldr	r3, [pc, #356]	; (8007a34 <mergeData+0x228>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f887 3020 	strb.w	r3, [r7, #32]
 80078d4:	4b58      	ldr	r3, [pc, #352]	; (8007a38 <mergeData+0x22c>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80078dc:	4b57      	ldr	r3, [pc, #348]	; (8007a3c <mergeData+0x230>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078e4:	4b56      	ldr	r3, [pc, #344]	; (8007a40 <mergeData+0x234>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ec:	4b55      	ldr	r3, [pc, #340]	; (8007a44 <mergeData+0x238>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80078f4:	4b54      	ldr	r3, [pc, #336]	; (8007a48 <mergeData+0x23c>)
 80078f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80078fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80078fe:	4b52      	ldr	r3, [pc, #328]	; (8007a48 <mergeData+0x23c>)
 8007900:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007908:	4b4f      	ldr	r3, [pc, #316]	; (8007a48 <mergeData+0x23c>)
 800790a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800790e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007912:	4b4d      	ldr	r3, [pc, #308]	; (8007a48 <mergeData+0x23c>)
 8007914:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007918:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 800791c:	4b4a      	ldr	r3, [pc, #296]	; (8007a48 <mergeData+0x23c>)
 800791e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007922:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007926:	4b48      	ldr	r3, [pc, #288]	; (8007a48 <mergeData+0x23c>)
 8007928:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800792c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007930:	4b45      	ldr	r3, [pc, #276]	; (8007a48 <mergeData+0x23c>)
 8007932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800793a:	4b43      	ldr	r3, [pc, #268]	; (8007a48 <mergeData+0x23c>)
 800793c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007940:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007944:	4b40      	ldr	r3, [pc, #256]	; (8007a48 <mergeData+0x23c>)
 8007946:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800794a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800794e:	4b3e      	ldr	r3, [pc, #248]	; (8007a48 <mergeData+0x23c>)
 8007950:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007954:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007958:	2306      	movs	r3, #6
 800795a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800795e:	2300      	movs	r3, #0
 8007960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007962:	e015      	b.n	8007990 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007964:	1d3a      	adds	r2, r7, #4
 8007966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007968:	4413      	add	r3, r2
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007972:	4936      	ldr	r1, [pc, #216]	; (8007a4c <mergeData+0x240>)
 8007974:	4618      	mov	r0, r3
 8007976:	f004 fe7b 	bl	800c670 <siprintf>
	    strcat(combinedString, temp);
 800797a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800797e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007982:	4611      	mov	r1, r2
 8007984:	4618      	mov	r0, r3
 8007986:	f004 fed5 	bl	800c734 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800798a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798c:	3301      	adds	r3, #1
 800798e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007992:	2b2b      	cmp	r3, #43	; 0x2b
 8007994:	d9e6      	bls.n	8007964 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007996:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800799a:	4618      	mov	r0, r3
 800799c:	f7f8 fc42 	bl	8000224 <strlen>
 80079a0:	4603      	mov	r3, r0
 80079a2:	3301      	adds	r3, #1
 80079a4:	4618      	mov	r0, r3
 80079a6:	f004 fdaf 	bl	800c508 <malloc>
 80079aa:	4603      	mov	r3, r0
 80079ac:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80079ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079b2:	4619      	mov	r1, r3
 80079b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80079b6:	f004 ff11 	bl	800c7dc <strcpy>
	return result;
 80079ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3770      	adds	r7, #112	; 0x70
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	20000243 	.word	0x20000243
 80079c8:	20000235 	.word	0x20000235
 80079cc:	20000238 	.word	0x20000238
 80079d0:	20000239 	.word	0x20000239
 80079d4:	2000023a 	.word	0x2000023a
 80079d8:	20000241 	.word	0x20000241
 80079dc:	2000023b 	.word	0x2000023b
 80079e0:	2000023c 	.word	0x2000023c
 80079e4:	20000240 	.word	0x20000240
 80079e8:	2000023d 	.word	0x2000023d
 80079ec:	2000024d 	.word	0x2000024d
 80079f0:	2000023e 	.word	0x2000023e
 80079f4:	2000024e 	.word	0x2000024e
 80079f8:	2000023f 	.word	0x2000023f
 80079fc:	2000024f 	.word	0x2000024f
 8007a00:	20000242 	.word	0x20000242
 8007a04:	20000244 	.word	0x20000244
 8007a08:	20000245 	.word	0x20000245
 8007a0c:	20000246 	.word	0x20000246
 8007a10:	20000247 	.word	0x20000247
 8007a14:	20000248 	.word	0x20000248
 8007a18:	20000249 	.word	0x20000249
 8007a1c:	2000024a 	.word	0x2000024a
 8007a20:	2000024b 	.word	0x2000024b
 8007a24:	2000024c 	.word	0x2000024c
 8007a28:	20000250 	.word	0x20000250
 8007a2c:	20000252 	.word	0x20000252
 8007a30:	20000231 	.word	0x20000231
 8007a34:	20000232 	.word	0x20000232
 8007a38:	20000000 	.word	0x20000000
 8007a3c:	20000001 	.word	0x20000001
 8007a40:	20000233 	.word	0x20000233
 8007a44:	20000255 	.word	0x20000255
 8007a48:	2000012c 	.word	0x2000012c
 8007a4c:	0800de24 	.word	0x0800de24

08007a50 <convertAndSendData>:

void convertAndSendData() {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 8007a54:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <convertAndSendData+0x58>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <convertAndSendData+0x22>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007a5c:	4a13      	ldr	r2, [pc, #76]	; (8007aac <convertAndSendData+0x5c>)
 8007a5e:	2101      	movs	r1, #1
 8007a60:	2001      	movs	r0, #1
 8007a62:	f000 f9fd 	bl	8007e60 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007a66:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <convertAndSendData+0x60>)
 8007a68:	2101      	movs	r1, #1
 8007a6a:	2002      	movs	r0, #2
 8007a6c:	f000 f9f8 	bl	8007e60 <lcd_print>
 8007a70:	e009      	b.n	8007a86 <convertAndSendData+0x36>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007a72:	4a10      	ldr	r2, [pc, #64]	; (8007ab4 <convertAndSendData+0x64>)
 8007a74:	2101      	movs	r1, #1
 8007a76:	2001      	movs	r0, #1
 8007a78:	f000 f9f2 	bl	8007e60 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007a7c:	4a0e      	ldr	r2, [pc, #56]	; (8007ab8 <convertAndSendData+0x68>)
 8007a7e:	2101      	movs	r1, #1
 8007a80:	2002      	movs	r0, #2
 8007a82:	f000 f9ed 	bl	8007e60 <lcd_print>
	}

	sendMachineData(&huart1, machineID, mergeData());
 8007a86:	f7ff fec1 	bl	800780c <mergeData>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	490b      	ldr	r1, [pc, #44]	; (8007abc <convertAndSendData+0x6c>)
 8007a90:	480b      	ldr	r0, [pc, #44]	; (8007ac0 <convertAndSendData+0x70>)
 8007a92:	f7f8 ffe9 	bl	8000a68 <sendMachineData>

	HAL_Delay(500);
 8007a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a9a:	f000 ff37 	bl	800890c <HAL_Delay>
	lcd_clear();
 8007a9e:	f000 fa0b 	bl	8007eb8 <lcd_clear>
}
 8007aa2:	bf00      	nop
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000255 	.word	0x20000255
 8007aac:	0800de28 	.word	0x0800de28
 8007ab0:	0800de3c 	.word	0x0800de3c
 8007ab4:	0800de50 	.word	0x0800de50
 8007ab8:	0800de64 	.word	0x0800de64
 8007abc:	200001a4 	.word	0x200001a4
 8007ac0:	20000458 	.word	0x20000458

08007ac4 <iotSetup>:

void iotSetup() {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007ac8:	4b14      	ldr	r3, [pc, #80]	; (8007b1c <iotSetup+0x58>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d017      	beq.n	8007b00 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007ad0:	4813      	ldr	r0, [pc, #76]	; (8007b20 <iotSetup+0x5c>)
 8007ad2:	f7f8 fba7 	bl	8000224 <strlen>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b0c      	cmp	r3, #12
 8007ada:	d001      	beq.n	8007ae0 <iotSetup+0x1c>
			takeMachineID();
 8007adc:	f7ff f990 	bl	8006e00 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007ae0:	4810      	ldr	r0, [pc, #64]	; (8007b24 <iotSetup+0x60>)
 8007ae2:	f7f8 fb9f 	bl	8000224 <strlen>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d801      	bhi.n	8007af0 <iotSetup+0x2c>
			takeWifiSSID();
 8007aec:	f7ff fb22 	bl	8007134 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007af0:	480d      	ldr	r0, [pc, #52]	; (8007b28 <iotSetup+0x64>)
 8007af2:	f7f8 fb97 	bl	8000224 <strlen>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d801      	bhi.n	8007b00 <iotSetup+0x3c>
			takeWifiPass();
 8007afc:	f7ff fcdc 	bl	80074b8 <takeWifiPass>
		}
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007b00:	4a09      	ldr	r2, [pc, #36]	; (8007b28 <iotSetup+0x64>)
 8007b02:	4908      	ldr	r1, [pc, #32]	; (8007b24 <iotSetup+0x60>)
 8007b04:	4809      	ldr	r0, [pc, #36]	; (8007b2c <iotSetup+0x68>)
 8007b06:	f7f8 ff05 	bl	8000914 <ESP8266_Init>
	HAL_Delay(500);
 8007b0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b0e:	f000 fefd 	bl	800890c <HAL_Delay>
	convertAndSendData();
 8007b12:	f7ff ff9d 	bl	8007a50 <convertAndSendData>
}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000253 	.word	0x20000253
 8007b20:	200001a4 	.word	0x200001a4
 8007b24:	200001b0 	.word	0x200001b0
 8007b28:	200001c4 	.word	0x200001c4
 8007b2c:	20000458 	.word	0x20000458

08007b30 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	f023 030f 	bic.w	r3, r3, #15
 8007b40:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007b48:	7b7b      	ldrb	r3, [r7, #13]
 8007b4a:	f043 030c 	orr.w	r3, r3, #12
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007b52:	7b7b      	ldrb	r3, [r7, #13]
 8007b54:	f043 0308 	orr.w	r3, r3, #8
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007b5c:	7b3b      	ldrb	r3, [r7, #12]
 8007b5e:	f043 030c 	orr.w	r3, r3, #12
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007b66:	7b3b      	ldrb	r3, [r7, #12]
 8007b68:	f043 0308 	orr.w	r3, r3, #8
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b70:	bf00      	nop
 8007b72:	4825      	ldr	r0, [pc, #148]	; (8007c08 <lcd_send_cmd+0xd8>)
 8007b74:	f002 fac3 	bl	800a0fe <HAL_I2C_GetError>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d0f9      	beq.n	8007b72 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b7e:	bf00      	nop
 8007b80:	4821      	ldr	r0, [pc, #132]	; (8007c08 <lcd_send_cmd+0xd8>)
 8007b82:	f002 faaf 	bl	800a0e4 <HAL_I2C_GetState>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	d1f9      	bne.n	8007b80 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b8c:	4b1f      	ldr	r3, [pc, #124]	; (8007c0c <lcd_send_cmd+0xdc>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d116      	bne.n	8007bc2 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
 8007b98:	e00f      	b.n	8007bba <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	3310      	adds	r3, #16
 8007b9e:	443b      	add	r3, r7
 8007ba0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	f022 0208 	bic.w	r2, r2, #8
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	3310      	adds	r3, #16
 8007bae:	443b      	add	r3, r7
 8007bb0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d9ec      	bls.n	8007b9a <lcd_send_cmd+0x6a>
 8007bc0:	e015      	b.n	8007bee <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73bb      	strb	r3, [r7, #14]
 8007bc6:	e00f      	b.n	8007be8 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	3310      	adds	r3, #16
 8007bcc:	443b      	add	r3, r7
 8007bce:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f042 0208 	orr.w	r2, r2, #8
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	3310      	adds	r3, #16
 8007bdc:	443b      	add	r3, r7
 8007bde:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	3301      	adds	r3, #1
 8007be6:	73bb      	strb	r3, [r7, #14]
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d9ec      	bls.n	8007bc8 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007bee:	f107 0208 	add.w	r2, r7, #8
 8007bf2:	2364      	movs	r3, #100	; 0x64
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	214e      	movs	r1, #78	; 0x4e
 8007bfa:	4803      	ldr	r0, [pc, #12]	; (8007c08 <lcd_send_cmd+0xd8>)
 8007bfc:	f001 fe12 	bl	8009824 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200003bc 	.word	0x200003bc
 8007c0c:	20000392 	.word	0x20000392

08007c10 <lcd_send_data>:

void lcd_send_data (char data) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	4603      	mov	r3, r0
 8007c18:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	f023 030f 	bic.w	r3, r3, #15
 8007c20:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007c28:	7b7b      	ldrb	r3, [r7, #13]
 8007c2a:	f043 030d 	orr.w	r3, r3, #13
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	f043 0309 	orr.w	r3, r3, #9
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007c3c:	7b3b      	ldrb	r3, [r7, #12]
 8007c3e:	f043 030d 	orr.w	r3, r3, #13
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007c46:	7b3b      	ldrb	r3, [r7, #12]
 8007c48:	f043 0309 	orr.w	r3, r3, #9
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c50:	bf00      	nop
 8007c52:	4825      	ldr	r0, [pc, #148]	; (8007ce8 <lcd_send_data+0xd8>)
 8007c54:	f002 fa53 	bl	800a0fe <HAL_I2C_GetError>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d0f9      	beq.n	8007c52 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c5e:	bf00      	nop
 8007c60:	4821      	ldr	r0, [pc, #132]	; (8007ce8 <lcd_send_data+0xd8>)
 8007c62:	f002 fa3f 	bl	800a0e4 <HAL_I2C_GetState>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d1f9      	bne.n	8007c60 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007c6c:	4b1f      	ldr	r3, [pc, #124]	; (8007cec <lcd_send_data+0xdc>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d116      	bne.n	8007ca2 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e00f      	b.n	8007c9a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	3310      	adds	r3, #16
 8007c7e:	443b      	add	r3, r7
 8007c80:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	f022 0208 	bic.w	r2, r2, #8
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	3310      	adds	r3, #16
 8007c8e:	443b      	add	r3, r7
 8007c90:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	3301      	adds	r3, #1
 8007c98:	73fb      	strb	r3, [r7, #15]
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d9ec      	bls.n	8007c7a <lcd_send_data+0x6a>
 8007ca0:	e015      	b.n	8007cce <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73bb      	strb	r3, [r7, #14]
 8007ca6:	e00f      	b.n	8007cc8 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	3310      	adds	r3, #16
 8007cac:	443b      	add	r3, r7
 8007cae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	f042 0208 	orr.w	r2, r2, #8
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	3310      	adds	r3, #16
 8007cbc:	443b      	add	r3, r7
 8007cbe:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	73bb      	strb	r3, [r7, #14]
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d9ec      	bls.n	8007ca8 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007cce:	f107 0208 	add.w	r2, r7, #8
 8007cd2:	2364      	movs	r3, #100	; 0x64
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	2304      	movs	r3, #4
 8007cd8:	214e      	movs	r1, #78	; 0x4e
 8007cda:	4803      	ldr	r0, [pc, #12]	; (8007ce8 <lcd_send_data+0xd8>)
 8007cdc:	f001 fda2 	bl	8009824 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	200003bc 	.word	0x200003bc
 8007cec:	20000392 	.word	0x20000392

08007cf0 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007cf8:	e006      	b.n	8007d08 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff ff84 	bl	8007c10 <lcd_send_data>
	while (*str) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1f4      	bne.n	8007cfa <lcd_send_string+0xa>
	}
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <lcd_send_char>:

void lcd_send_char(char ch) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	4603      	mov	r3, r0
 8007d24:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	f023 030f 	bic.w	r3, r3, #15
 8007d2c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007d34:	7b7b      	ldrb	r3, [r7, #13]
 8007d36:	f043 030d 	orr.w	r3, r3, #13
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007d3e:	7b7b      	ldrb	r3, [r7, #13]
 8007d40:	f043 0309 	orr.w	r3, r3, #9
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007d48:	7b3b      	ldrb	r3, [r7, #12]
 8007d4a:	f043 030d 	orr.w	r3, r3, #13
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007d52:	7b3b      	ldrb	r3, [r7, #12]
 8007d54:	f043 0309 	orr.w	r3, r3, #9
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007d5c:	bf00      	nop
 8007d5e:	4825      	ldr	r0, [pc, #148]	; (8007df4 <lcd_send_char+0xd8>)
 8007d60:	f002 f9cd 	bl	800a0fe <HAL_I2C_GetError>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d0f9      	beq.n	8007d5e <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007d6a:	bf00      	nop
 8007d6c:	4821      	ldr	r0, [pc, #132]	; (8007df4 <lcd_send_char+0xd8>)
 8007d6e:	f002 f9b9 	bl	800a0e4 <HAL_I2C_GetState>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b20      	cmp	r3, #32
 8007d76:	d1f9      	bne.n	8007d6c <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007d78:	4b1f      	ldr	r3, [pc, #124]	; (8007df8 <lcd_send_char+0xdc>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d116      	bne.n	8007dae <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007d80:	2300      	movs	r3, #0
 8007d82:	73fb      	strb	r3, [r7, #15]
 8007d84:	e00f      	b.n	8007da6 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	3310      	adds	r3, #16
 8007d8a:	443b      	add	r3, r7
 8007d8c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	f022 0208 	bic.w	r2, r2, #8
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	3310      	adds	r3, #16
 8007d9a:	443b      	add	r3, r7
 8007d9c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	3301      	adds	r3, #1
 8007da4:	73fb      	strb	r3, [r7, #15]
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d9ec      	bls.n	8007d86 <lcd_send_char+0x6a>
 8007dac:	e015      	b.n	8007dda <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007dae:	2300      	movs	r3, #0
 8007db0:	73bb      	strb	r3, [r7, #14]
 8007db2:	e00f      	b.n	8007dd4 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	3310      	adds	r3, #16
 8007db8:	443b      	add	r3, r7
 8007dba:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	f042 0208 	orr.w	r2, r2, #8
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	3310      	adds	r3, #16
 8007dc8:	443b      	add	r3, r7
 8007dca:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	73bb      	strb	r3, [r7, #14]
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d9ec      	bls.n	8007db4 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007dda:	f107 0208 	add.w	r2, r7, #8
 8007dde:	2364      	movs	r3, #100	; 0x64
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	2304      	movs	r3, #4
 8007de4:	214e      	movs	r1, #78	; 0x4e
 8007de6:	4803      	ldr	r0, [pc, #12]	; (8007df4 <lcd_send_char+0xd8>)
 8007de8:	f001 fd1c 	bl	8009824 <HAL_I2C_Master_Transmit>
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	200003bc 	.word	0x200003bc
 8007df8:	20000392 	.word	0x20000392

08007dfc <lcd_init>:

void lcd_init (void) {
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007e00:	2002      	movs	r0, #2
 8007e02:	f7ff fe95 	bl	8007b30 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007e06:	2028      	movs	r0, #40	; 0x28
 8007e08:	f7ff fe92 	bl	8007b30 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007e0c:	200c      	movs	r0, #12
 8007e0e:	f7ff fe8f 	bl	8007b30 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007e12:	2080      	movs	r0, #128	; 0x80
 8007e14:	f7ff fe8c 	bl	8007b30 <lcd_send_cmd>
	lcd_backlight(1);
 8007e18:	2001      	movs	r0, #1
 8007e1a:	f000 f86d 	bl	8007ef8 <lcd_backlight>
}
 8007e1e:	bf00      	nop
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	4603      	mov	r3, r0
 8007e2a:	460a      	mov	r2, r1
 8007e2c:	71fb      	strb	r3, [r7, #7]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d106      	bne.n	8007e46 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007e38:	79bb      	ldrb	r3, [r7, #6]
 8007e3a:	337f      	adds	r3, #127	; 0x7f
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff fe76 	bl	8007b30 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007e44:	e008      	b.n	8007e58 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d105      	bne.n	8007e58 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007e4c:	79bb      	ldrb	r3, [r7, #6]
 8007e4e:	3b41      	subs	r3, #65	; 0x41
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fe6c 	bl	8007b30 <lcd_send_cmd>
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	603a      	str	r2, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007e70:	79ba      	ldrb	r2, [r7, #6]
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff ffd3 	bl	8007e22 <lcd_gotoxy>
	lcd_send_string(str);
 8007e7c:	6838      	ldr	r0, [r7, #0]
 8007e7e:	f7ff ff37 	bl	8007cf0 <lcd_send_string>
}
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	4603      	mov	r3, r0
 8007e92:	71fb      	strb	r3, [r7, #7]
 8007e94:	460b      	mov	r3, r1
 8007e96:	71bb      	strb	r3, [r7, #6]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007e9c:	79ba      	ldrb	r2, [r7, #6]
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff ffbd 	bl	8007e22 <lcd_gotoxy>
    lcd_send_char(ch);
 8007ea8:	797b      	ldrb	r3, [r7, #5]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff ff36 	bl	8007d1c <lcd_send_char>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <lcd_clear>:

void lcd_clear(void) {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	f7ff fe37 	bl	8007b30 <lcd_send_cmd>
    HAL_Delay(2);
 8007ec2:	2002      	movs	r0, #2
 8007ec4:	f000 fd22 	bl	800890c <HAL_Delay>
}
 8007ec8:	bf00      	nop
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	460a      	mov	r2, r1
 8007ed6:	71fb      	strb	r3, [r7, #7]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007edc:	79ba      	ldrb	r2, [r7, #6]
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff ff9d 	bl	8007e22 <lcd_gotoxy>

    lcd_send_char(' ');
 8007ee8:	2020      	movs	r0, #32
 8007eea:	f7ff ff17 	bl	8007d1c <lcd_send_char>
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007f02:	4a05      	ldr	r2, [pc, #20]	; (8007f18 <lcd_backlight+0x20>)
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f7ff fe11 	bl	8007b30 <lcd_send_cmd>
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000392 	.word	0x20000392

08007f1c <lcd_cursor>:

void lcd_cursor(int state) {
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d106      	bne.n	8007f38 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007f2a:	200e      	movs	r0, #14
 8007f2c:	f7ff fe00 	bl	8007b30 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007f30:	200f      	movs	r0, #15
 8007f32:	f7ff fdfd 	bl	8007b30 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007f36:	e002      	b.n	8007f3e <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007f38:	200c      	movs	r0, #12
 8007f3a:	f7ff fdf9 	bl	8007b30 <lcd_send_cmd>
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3301      	adds	r3, #1
 8007f56:	4a03      	ldr	r2, [pc, #12]	; (8007f64 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007f58:	6013      	str	r3, [r2, #0]
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr
 8007f64:	20000210 	.word	0x20000210

08007f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f6c:	f000 fc6c 	bl	8008848 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f74:	f000 fcca 	bl	800890c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f78:	f000 f89c 	bl	80080b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f7c:	f000 f9be 	bl	80082fc <MX_GPIO_Init>
  MX_CAN_Init();
 8007f80:	f000 f8de 	bl	8008140 <MX_CAN_Init>
  MX_I2C1_Init();
 8007f84:	f000 f910 	bl	80081a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007f88:	f000 f93c 	bl	8008204 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007f8c:	f000 f98c 	bl	80082a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007f90:	2201      	movs	r2, #1
 8007f92:	2140      	movs	r1, #64	; 0x40
 8007f94:	483e      	ldr	r0, [pc, #248]	; (8008090 <main+0x128>)
 8007f96:	f001 faa0 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	483c      	ldr	r0, [pc, #240]	; (8008090 <main+0x128>)
 8007fa0:	f001 fa9b 	bl	80094da <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007fa4:	200a      	movs	r0, #10
 8007fa6:	f000 fcb1 	bl	800890c <HAL_Delay>
  lcd_init();
 8007faa:	f7ff ff27 	bl	8007dfc <lcd_init>
  HAL_Delay(10);
 8007fae:	200a      	movs	r0, #10
 8007fb0:	f000 fcac 	bl	800890c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007fb4:	4837      	ldr	r0, [pc, #220]	; (8008094 <main+0x12c>)
 8007fb6:	f003 f943 	bl	800b240 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007fba:	bf00      	nop
 8007fbc:	4836      	ldr	r0, [pc, #216]	; (8008098 <main+0x130>)
 8007fbe:	f002 f89e 	bl	800a0fe <HAL_I2C_GetError>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d0f9      	beq.n	8007fbc <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007fc8:	bf00      	nop
 8007fca:	4833      	ldr	r0, [pc, #204]	; (8008098 <main+0x130>)
 8007fcc:	f002 f88a 	bl	800a0e4 <HAL_I2C_GetState>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d1f9      	bne.n	8007fca <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007fdc:	482c      	ldr	r0, [pc, #176]	; (8008090 <main+0x128>)
 8007fde:	f001 fa7c 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007fe8:	4829      	ldr	r0, [pc, #164]	; (8008090 <main+0x128>)
 8007fea:	f001 fa76 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2104      	movs	r1, #4
 8007ff2:	4827      	ldr	r0, [pc, #156]	; (8008090 <main+0x128>)
 8007ff4:	f001 fa71 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	4824      	ldr	r0, [pc, #144]	; (8008090 <main+0x128>)
 8007ffe:	f001 fa6c 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008002:	2200      	movs	r2, #0
 8008004:	2101      	movs	r1, #1
 8008006:	4822      	ldr	r0, [pc, #136]	; (8008090 <main+0x128>)
 8008008:	f001 fa67 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800800c:	2200      	movs	r2, #0
 800800e:	2120      	movs	r1, #32
 8008010:	4822      	ldr	r0, [pc, #136]	; (800809c <main+0x134>)
 8008012:	f001 fa62 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008016:	2200      	movs	r2, #0
 8008018:	2110      	movs	r1, #16
 800801a:	4820      	ldr	r0, [pc, #128]	; (800809c <main+0x134>)
 800801c:	f001 fa5d 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008020:	2200      	movs	r2, #0
 8008022:	2180      	movs	r1, #128	; 0x80
 8008024:	481e      	ldr	r0, [pc, #120]	; (80080a0 <main+0x138>)
 8008026:	f001 fa58 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800802a:	2200      	movs	r2, #0
 800802c:	2140      	movs	r1, #64	; 0x40
 800802e:	481c      	ldr	r0, [pc, #112]	; (80080a0 <main+0x138>)
 8008030:	f001 fa53 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008034:	2200      	movs	r2, #0
 8008036:	2120      	movs	r1, #32
 8008038:	4819      	ldr	r0, [pc, #100]	; (80080a0 <main+0x138>)
 800803a:	f001 fa4e 	bl	80094da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800803e:	2200      	movs	r2, #0
 8008040:	2110      	movs	r1, #16
 8008042:	4817      	ldr	r0, [pc, #92]	; (80080a0 <main+0x138>)
 8008044:	f001 fa49 	bl	80094da <HAL_GPIO_WritePin>

  i2cTest();
 8008048:	f7f8 feee 	bl	8000e28 <i2cTest>
  HAL_Delay(100);
 800804c:	2064      	movs	r0, #100	; 0x64
 800804e:	f000 fc5d 	bl	800890c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008052:	4a14      	ldr	r2, [pc, #80]	; (80080a4 <main+0x13c>)
 8008054:	2101      	movs	r1, #1
 8008056:	2001      	movs	r0, #1
 8008058:	f7ff ff02 	bl	8007e60 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 800805c:	4a12      	ldr	r2, [pc, #72]	; (80080a8 <main+0x140>)
 800805e:	2101      	movs	r1, #1
 8008060:	2002      	movs	r0, #2
 8008062:	f7ff fefd 	bl	8007e60 <lcd_print>
  HAL_Delay(1000);
 8008066:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800806a:	f000 fc4f 	bl	800890c <HAL_Delay>
  lcd_clear();
 800806e:	f7ff ff23 	bl	8007eb8 <lcd_clear>

  eepromKontrol();
 8008072:	f7f8 f8df 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800807a:	f000 fc47 	bl	800890c <HAL_Delay>

  backLightTimer = millis;
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <main+0x144>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a0b      	ldr	r2, [pc, #44]	; (80080b0 <main+0x148>)
 8008084:	6013      	str	r3, [r2, #0]

  iotSetup();
 8008086:	f7ff fd1d 	bl	8007ac4 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800808a:	f7fe fd21 	bl	8006ad0 <mainLoop>
 800808e:	e7fc      	b.n	800808a <main+0x122>
 8008090:	40010c00 	.word	0x40010c00
 8008094:	20000410 	.word	0x20000410
 8008098:	200003bc 	.word	0x200003bc
 800809c:	40011000 	.word	0x40011000
 80080a0:	40010800 	.word	0x40010800
 80080a4:	0800de78 	.word	0x0800de78
 80080a8:	0800de8c 	.word	0x0800de8c
 80080ac:	20000210 	.word	0x20000210
 80080b0:	2000022c 	.word	0x2000022c

080080b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b090      	sub	sp, #64	; 0x40
 80080b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080ba:	f107 0318 	add.w	r3, r7, #24
 80080be:	2228      	movs	r2, #40	; 0x28
 80080c0:	2100      	movs	r1, #0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f004 fb45 	bl	800c752 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080c8:	1d3b      	adds	r3, r7, #4
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	605a      	str	r2, [r3, #4]
 80080d0:	609a      	str	r2, [r3, #8]
 80080d2:	60da      	str	r2, [r3, #12]
 80080d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80080da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80080e0:	2300      	movs	r3, #0
 80080e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080e4:	2301      	movs	r3, #1
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080e8:	2302      	movs	r3, #2
 80080ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80080f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080f8:	f107 0318 	add.w	r3, r7, #24
 80080fc:	4618      	mov	r0, r3
 80080fe:	f002 fc3f 	bl	800a980 <HAL_RCC_OscConfig>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008108:	f000 f9a2 	bl	8008450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800810c:	230f      	movs	r3, #15
 800810e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008110:	2302      	movs	r3, #2
 8008112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800811c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008122:	1d3b      	adds	r3, r7, #4
 8008124:	2102      	movs	r1, #2
 8008126:	4618      	mov	r0, r3
 8008128:	f002 feac 	bl	800ae84 <HAL_RCC_ClockConfig>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008132:	f000 f98d 	bl	8008450 <Error_Handler>
  }
}
 8008136:	bf00      	nop
 8008138:	3740      	adds	r7, #64	; 0x40
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008144:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <MX_CAN_Init+0x60>)
 8008146:	4a17      	ldr	r2, [pc, #92]	; (80081a4 <MX_CAN_Init+0x64>)
 8008148:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800814a:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <MX_CAN_Init+0x60>)
 800814c:	2210      	movs	r2, #16
 800814e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008150:	4b13      	ldr	r3, [pc, #76]	; (80081a0 <MX_CAN_Init+0x60>)
 8008152:	2200      	movs	r2, #0
 8008154:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008156:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <MX_CAN_Init+0x60>)
 8008158:	2200      	movs	r2, #0
 800815a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800815c:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <MX_CAN_Init+0x60>)
 800815e:	2200      	movs	r2, #0
 8008160:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008162:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <MX_CAN_Init+0x60>)
 8008164:	2200      	movs	r2, #0
 8008166:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008168:	4b0d      	ldr	r3, [pc, #52]	; (80081a0 <MX_CAN_Init+0x60>)
 800816a:	2200      	movs	r2, #0
 800816c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800816e:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <MX_CAN_Init+0x60>)
 8008170:	2200      	movs	r2, #0
 8008172:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <MX_CAN_Init+0x60>)
 8008176:	2200      	movs	r2, #0
 8008178:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800817a:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <MX_CAN_Init+0x60>)
 800817c:	2200      	movs	r2, #0
 800817e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <MX_CAN_Init+0x60>)
 8008182:	2200      	movs	r2, #0
 8008184:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008186:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <MX_CAN_Init+0x60>)
 8008188:	2200      	movs	r2, #0
 800818a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800818c:	4804      	ldr	r0, [pc, #16]	; (80081a0 <MX_CAN_Init+0x60>)
 800818e:	f000 fbe1 	bl	8008954 <HAL_CAN_Init>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008198:	f000 f95a 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800819c:	bf00      	nop
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000394 	.word	0x20000394
 80081a4:	40006400 	.word	0x40006400

080081a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80081ac:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081ae:	4a13      	ldr	r2, [pc, #76]	; (80081fc <MX_I2C1_Init+0x54>)
 80081b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80081b2:	4b11      	ldr	r3, [pc, #68]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081b4:	4a12      	ldr	r2, [pc, #72]	; (8008200 <MX_I2C1_Init+0x58>)
 80081b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80081b8:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80081be:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80081d2:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80081d8:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081da:	2200      	movs	r2, #0
 80081dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80081de:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80081e4:	4804      	ldr	r0, [pc, #16]	; (80081f8 <MX_I2C1_Init+0x50>)
 80081e6:	f001 f9a9 	bl	800953c <HAL_I2C_Init>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80081f0:	f000 f92e 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80081f4:	bf00      	nop
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200003bc 	.word	0x200003bc
 80081fc:	40005400 	.word	0x40005400
 8008200:	00061a80 	.word	0x00061a80

08008204 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800820a:	f107 0308 	add.w	r3, r7, #8
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	605a      	str	r2, [r3, #4]
 8008214:	609a      	str	r2, [r3, #8]
 8008216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008218:	463b      	mov	r3, r7
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008220:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <MX_TIM1_Init+0x9c>)
 8008222:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <MX_TIM1_Init+0xa0>)
 8008224:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <MX_TIM1_Init+0x9c>)
 8008228:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800822c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800822e:	4b1c      	ldr	r3, [pc, #112]	; (80082a0 <MX_TIM1_Init+0x9c>)
 8008230:	2200      	movs	r2, #0
 8008232:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008234:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <MX_TIM1_Init+0x9c>)
 8008236:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800823a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800823c:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <MX_TIM1_Init+0x9c>)
 800823e:	2200      	movs	r2, #0
 8008240:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008242:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <MX_TIM1_Init+0x9c>)
 8008244:	2200      	movs	r2, #0
 8008246:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <MX_TIM1_Init+0x9c>)
 800824a:	2200      	movs	r2, #0
 800824c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800824e:	4814      	ldr	r0, [pc, #80]	; (80082a0 <MX_TIM1_Init+0x9c>)
 8008250:	f002 ffa6 	bl	800b1a0 <HAL_TIM_Base_Init>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800825a:	f000 f8f9 	bl	8008450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800825e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008264:	f107 0308 	add.w	r3, r7, #8
 8008268:	4619      	mov	r1, r3
 800826a:	480d      	ldr	r0, [pc, #52]	; (80082a0 <MX_TIM1_Init+0x9c>)
 800826c:	f003 f950 	bl	800b510 <HAL_TIM_ConfigClockSource>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008276:	f000 f8eb 	bl	8008450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800827a:	2300      	movs	r3, #0
 800827c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800827e:	2300      	movs	r3, #0
 8008280:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008282:	463b      	mov	r3, r7
 8008284:	4619      	mov	r1, r3
 8008286:	4806      	ldr	r0, [pc, #24]	; (80082a0 <MX_TIM1_Init+0x9c>)
 8008288:	f003 fb3e 	bl	800b908 <HAL_TIMEx_MasterConfigSynchronization>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008292:	f000 f8dd 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008296:	bf00      	nop
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000410 	.word	0x20000410
 80082a4:	40012c00 	.word	0x40012c00

080082a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80082ac:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082ae:	4a12      	ldr	r2, [pc, #72]	; (80082f8 <MX_USART1_UART_Init+0x50>)
 80082b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80082b2:	4b10      	ldr	r3, [pc, #64]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80082b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80082ba:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082bc:	2200      	movs	r2, #0
 80082be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80082c0:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082ce:	220c      	movs	r2, #12
 80082d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082d2:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80082d8:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082da:	2200      	movs	r2, #0
 80082dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80082de:	4805      	ldr	r0, [pc, #20]	; (80082f4 <MX_USART1_UART_Init+0x4c>)
 80082e0:	f003 fb90 	bl	800ba04 <HAL_UART_Init>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80082ea:	f000 f8b1 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80082ee:	bf00      	nop
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000458 	.word	0x20000458
 80082f8:	40013800 	.word	0x40013800

080082fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008302:	f107 0310 	add.w	r3, r7, #16
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	605a      	str	r2, [r3, #4]
 800830c:	609a      	str	r2, [r3, #8]
 800830e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008310:	4b4b      	ldr	r3, [pc, #300]	; (8008440 <MX_GPIO_Init+0x144>)
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	4a4a      	ldr	r2, [pc, #296]	; (8008440 <MX_GPIO_Init+0x144>)
 8008316:	f043 0310 	orr.w	r3, r3, #16
 800831a:	6193      	str	r3, [r2, #24]
 800831c:	4b48      	ldr	r3, [pc, #288]	; (8008440 <MX_GPIO_Init+0x144>)
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	f003 0310 	and.w	r3, r3, #16
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008328:	4b45      	ldr	r3, [pc, #276]	; (8008440 <MX_GPIO_Init+0x144>)
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	4a44      	ldr	r2, [pc, #272]	; (8008440 <MX_GPIO_Init+0x144>)
 800832e:	f043 0320 	orr.w	r3, r3, #32
 8008332:	6193      	str	r3, [r2, #24]
 8008334:	4b42      	ldr	r3, [pc, #264]	; (8008440 <MX_GPIO_Init+0x144>)
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	60bb      	str	r3, [r7, #8]
 800833e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008340:	4b3f      	ldr	r3, [pc, #252]	; (8008440 <MX_GPIO_Init+0x144>)
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	4a3e      	ldr	r2, [pc, #248]	; (8008440 <MX_GPIO_Init+0x144>)
 8008346:	f043 0304 	orr.w	r3, r3, #4
 800834a:	6193      	str	r3, [r2, #24]
 800834c:	4b3c      	ldr	r3, [pc, #240]	; (8008440 <MX_GPIO_Init+0x144>)
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	607b      	str	r3, [r7, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008358:	4b39      	ldr	r3, [pc, #228]	; (8008440 <MX_GPIO_Init+0x144>)
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	4a38      	ldr	r2, [pc, #224]	; (8008440 <MX_GPIO_Init+0x144>)
 800835e:	f043 0308 	orr.w	r3, r3, #8
 8008362:	6193      	str	r3, [r2, #24]
 8008364:	4b36      	ldr	r3, [pc, #216]	; (8008440 <MX_GPIO_Init+0x144>)
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	603b      	str	r3, [r7, #0]
 800836e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008370:	2200      	movs	r2, #0
 8008372:	21f0      	movs	r1, #240	; 0xf0
 8008374:	4833      	ldr	r0, [pc, #204]	; (8008444 <MX_GPIO_Init+0x148>)
 8008376:	f001 f8b0 	bl	80094da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800837a:	2200      	movs	r2, #0
 800837c:	f241 0130 	movw	r1, #4144	; 0x1030
 8008380:	4831      	ldr	r0, [pc, #196]	; (8008448 <MX_GPIO_Init+0x14c>)
 8008382:	f001 f8aa 	bl	80094da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008386:	2200      	movs	r2, #0
 8008388:	f640 4107 	movw	r1, #3079	; 0xc07
 800838c:	482f      	ldr	r0, [pc, #188]	; (800844c <MX_GPIO_Init+0x150>)
 800838e:	f001 f8a4 	bl	80094da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008392:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008396:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839c:	2300      	movs	r3, #0
 800839e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083a0:	f107 0310 	add.w	r3, r7, #16
 80083a4:	4619      	mov	r1, r3
 80083a6:	4828      	ldr	r0, [pc, #160]	; (8008448 <MX_GPIO_Init+0x14c>)
 80083a8:	f000 fe20 	bl	8008fec <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80083ac:	f248 130f 	movw	r3, #33039	; 0x810f
 80083b0:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ba:	f107 0310 	add.w	r3, r7, #16
 80083be:	4619      	mov	r1, r3
 80083c0:	4820      	ldr	r0, [pc, #128]	; (8008444 <MX_GPIO_Init+0x148>)
 80083c2:	f000 fe13 	bl	8008fec <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80083c6:	23f0      	movs	r3, #240	; 0xf0
 80083c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083ca:	2301      	movs	r3, #1
 80083cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083d2:	2302      	movs	r3, #2
 80083d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083d6:	f107 0310 	add.w	r3, r7, #16
 80083da:	4619      	mov	r1, r3
 80083dc:	4819      	ldr	r0, [pc, #100]	; (8008444 <MX_GPIO_Init+0x148>)
 80083de:	f000 fe05 	bl	8008fec <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80083e2:	f241 0330 	movw	r3, #4144	; 0x1030
 80083e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083e8:	2301      	movs	r3, #1
 80083ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083f0:	2302      	movs	r3, #2
 80083f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083f4:	f107 0310 	add.w	r3, r7, #16
 80083f8:	4619      	mov	r1, r3
 80083fa:	4813      	ldr	r0, [pc, #76]	; (8008448 <MX_GPIO_Init+0x14c>)
 80083fc:	f000 fdf6 	bl	8008fec <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008400:	f640 4307 	movw	r3, #3079	; 0xc07
 8008404:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008406:	2301      	movs	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800840a:	2300      	movs	r3, #0
 800840c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800840e:	2302      	movs	r3, #2
 8008410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008412:	f107 0310 	add.w	r3, r7, #16
 8008416:	4619      	mov	r1, r3
 8008418:	480c      	ldr	r0, [pc, #48]	; (800844c <MX_GPIO_Init+0x150>)
 800841a:	f000 fde7 	bl	8008fec <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800841e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008428:	2300      	movs	r3, #0
 800842a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800842c:	f107 0310 	add.w	r3, r7, #16
 8008430:	4619      	mov	r1, r3
 8008432:	4806      	ldr	r0, [pc, #24]	; (800844c <MX_GPIO_Init+0x150>)
 8008434:	f000 fdda 	bl	8008fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008438:	bf00      	nop
 800843a:	3720      	adds	r7, #32
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40021000 	.word	0x40021000
 8008444:	40010800 	.word	0x40010800
 8008448:	40011000 	.word	0x40011000
 800844c:	40010c00 	.word	0x40010c00

08008450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	bc80      	pop	{r7}
 800845a:	4770      	bx	lr

0800845c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008462:	4b15      	ldr	r3, [pc, #84]	; (80084b8 <HAL_MspInit+0x5c>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	4a14      	ldr	r2, [pc, #80]	; (80084b8 <HAL_MspInit+0x5c>)
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	6193      	str	r3, [r2, #24]
 800846e:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <HAL_MspInit+0x5c>)
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	60bb      	str	r3, [r7, #8]
 8008478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800847a:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <HAL_MspInit+0x5c>)
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	4a0e      	ldr	r2, [pc, #56]	; (80084b8 <HAL_MspInit+0x5c>)
 8008480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008484:	61d3      	str	r3, [r2, #28]
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <HAL_MspInit+0x5c>)
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <HAL_MspInit+0x60>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	4a04      	ldr	r2, [pc, #16]	; (80084bc <HAL_MspInit+0x60>)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr
 80084b8:	40021000 	.word	0x40021000
 80084bc:	40010000 	.word	0x40010000

080084c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c8:	f107 0310 	add.w	r3, r7, #16
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	605a      	str	r2, [r3, #4]
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1c      	ldr	r2, [pc, #112]	; (800854c <HAL_CAN_MspInit+0x8c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d131      	bne.n	8008544 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80084e0:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <HAL_CAN_MspInit+0x90>)
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	4a1a      	ldr	r2, [pc, #104]	; (8008550 <HAL_CAN_MspInit+0x90>)
 80084e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084ea:	61d3      	str	r3, [r2, #28]
 80084ec:	4b18      	ldr	r3, [pc, #96]	; (8008550 <HAL_CAN_MspInit+0x90>)
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084f8:	4b15      	ldr	r3, [pc, #84]	; (8008550 <HAL_CAN_MspInit+0x90>)
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	4a14      	ldr	r2, [pc, #80]	; (8008550 <HAL_CAN_MspInit+0x90>)
 80084fe:	f043 0304 	orr.w	r3, r3, #4
 8008502:	6193      	str	r3, [r2, #24]
 8008504:	4b12      	ldr	r3, [pc, #72]	; (8008550 <HAL_CAN_MspInit+0x90>)
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	60bb      	str	r3, [r7, #8]
 800850e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851a:	2300      	movs	r3, #0
 800851c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800851e:	f107 0310 	add.w	r3, r7, #16
 8008522:	4619      	mov	r1, r3
 8008524:	480b      	ldr	r0, [pc, #44]	; (8008554 <HAL_CAN_MspInit+0x94>)
 8008526:	f000 fd61 	bl	8008fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800852a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800852e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008530:	2302      	movs	r3, #2
 8008532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008534:	2303      	movs	r3, #3
 8008536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	4619      	mov	r1, r3
 800853e:	4805      	ldr	r0, [pc, #20]	; (8008554 <HAL_CAN_MspInit+0x94>)
 8008540:	f000 fd54 	bl	8008fec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008544:	bf00      	nop
 8008546:	3720      	adds	r7, #32
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	40006400 	.word	0x40006400
 8008550:	40021000 	.word	0x40021000
 8008554:	40010800 	.word	0x40010800

08008558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008560:	f107 0310 	add.w	r3, r7, #16
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	609a      	str	r2, [r3, #8]
 800856c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a15      	ldr	r2, [pc, #84]	; (80085c8 <HAL_I2C_MspInit+0x70>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d123      	bne.n	80085c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008578:	4b14      	ldr	r3, [pc, #80]	; (80085cc <HAL_I2C_MspInit+0x74>)
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	4a13      	ldr	r2, [pc, #76]	; (80085cc <HAL_I2C_MspInit+0x74>)
 800857e:	f043 0308 	orr.w	r3, r3, #8
 8008582:	6193      	str	r3, [r2, #24]
 8008584:	4b11      	ldr	r3, [pc, #68]	; (80085cc <HAL_I2C_MspInit+0x74>)
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008590:	23c0      	movs	r3, #192	; 0xc0
 8008592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008594:	2312      	movs	r3, #18
 8008596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008598:	2303      	movs	r3, #3
 800859a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800859c:	f107 0310 	add.w	r3, r7, #16
 80085a0:	4619      	mov	r1, r3
 80085a2:	480b      	ldr	r0, [pc, #44]	; (80085d0 <HAL_I2C_MspInit+0x78>)
 80085a4:	f000 fd22 	bl	8008fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80085a8:	4b08      	ldr	r3, [pc, #32]	; (80085cc <HAL_I2C_MspInit+0x74>)
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	4a07      	ldr	r2, [pc, #28]	; (80085cc <HAL_I2C_MspInit+0x74>)
 80085ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085b2:	61d3      	str	r3, [r2, #28]
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <HAL_I2C_MspInit+0x74>)
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085bc:	60bb      	str	r3, [r7, #8]
 80085be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80085c0:	bf00      	nop
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	40005400 	.word	0x40005400
 80085cc:	40021000 	.word	0x40021000
 80085d0:	40010c00 	.word	0x40010c00

080085d4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a0a      	ldr	r2, [pc, #40]	; (800860c <HAL_I2C_MspDeInit+0x38>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d10d      	bne.n	8008602 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80085e6:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <HAL_I2C_MspDeInit+0x3c>)
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	4a09      	ldr	r2, [pc, #36]	; (8008610 <HAL_I2C_MspDeInit+0x3c>)
 80085ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085f0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80085f2:	2140      	movs	r1, #64	; 0x40
 80085f4:	4807      	ldr	r0, [pc, #28]	; (8008614 <HAL_I2C_MspDeInit+0x40>)
 80085f6:	f000 fe8d 	bl	8009314 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80085fa:	2180      	movs	r1, #128	; 0x80
 80085fc:	4805      	ldr	r0, [pc, #20]	; (8008614 <HAL_I2C_MspDeInit+0x40>)
 80085fe:	f000 fe89 	bl	8009314 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40005400 	.word	0x40005400
 8008610:	40021000 	.word	0x40021000
 8008614:	40010c00 	.word	0x40010c00

08008618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a0d      	ldr	r2, [pc, #52]	; (800865c <HAL_TIM_Base_MspInit+0x44>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d113      	bne.n	8008652 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800862a:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <HAL_TIM_Base_MspInit+0x48>)
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	4a0c      	ldr	r2, [pc, #48]	; (8008660 <HAL_TIM_Base_MspInit+0x48>)
 8008630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008634:	6193      	str	r3, [r2, #24]
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <HAL_TIM_Base_MspInit+0x48>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008642:	2200      	movs	r2, #0
 8008644:	2100      	movs	r1, #0
 8008646:	2019      	movs	r0, #25
 8008648:	f000 fb57 	bl	8008cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800864c:	2019      	movs	r0, #25
 800864e:	f000 fb70 	bl	8008d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40012c00 	.word	0x40012c00
 8008660:	40021000 	.word	0x40021000

08008664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800866c:	f107 0310 	add.w	r3, r7, #16
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	609a      	str	r2, [r3, #8]
 8008678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a20      	ldr	r2, [pc, #128]	; (8008700 <HAL_UART_MspInit+0x9c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d139      	bne.n	80086f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008684:	4b1f      	ldr	r3, [pc, #124]	; (8008704 <HAL_UART_MspInit+0xa0>)
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	4a1e      	ldr	r2, [pc, #120]	; (8008704 <HAL_UART_MspInit+0xa0>)
 800868a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800868e:	6193      	str	r3, [r2, #24]
 8008690:	4b1c      	ldr	r3, [pc, #112]	; (8008704 <HAL_UART_MspInit+0xa0>)
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800869c:	4b19      	ldr	r3, [pc, #100]	; (8008704 <HAL_UART_MspInit+0xa0>)
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	4a18      	ldr	r2, [pc, #96]	; (8008704 <HAL_UART_MspInit+0xa0>)
 80086a2:	f043 0304 	orr.w	r3, r3, #4
 80086a6:	6193      	str	r3, [r2, #24]
 80086a8:	4b16      	ldr	r3, [pc, #88]	; (8008704 <HAL_UART_MspInit+0xa0>)
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	60bb      	str	r3, [r7, #8]
 80086b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80086b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ba:	2302      	movs	r3, #2
 80086bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086be:	2303      	movs	r3, #3
 80086c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086c2:	f107 0310 	add.w	r3, r7, #16
 80086c6:	4619      	mov	r1, r3
 80086c8:	480f      	ldr	r0, [pc, #60]	; (8008708 <HAL_UART_MspInit+0xa4>)
 80086ca:	f000 fc8f 	bl	8008fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80086ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d8:	2300      	movs	r3, #0
 80086da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086dc:	f107 0310 	add.w	r3, r7, #16
 80086e0:	4619      	mov	r1, r3
 80086e2:	4809      	ldr	r0, [pc, #36]	; (8008708 <HAL_UART_MspInit+0xa4>)
 80086e4:	f000 fc82 	bl	8008fec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80086e8:	2200      	movs	r2, #0
 80086ea:	2100      	movs	r1, #0
 80086ec:	2025      	movs	r0, #37	; 0x25
 80086ee:	f000 fb04 	bl	8008cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80086f2:	2025      	movs	r0, #37	; 0x25
 80086f4:	f000 fb1d 	bl	8008d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80086f8:	bf00      	nop
 80086fa:	3720      	adds	r7, #32
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	40013800 	.word	0x40013800
 8008704:	40021000 	.word	0x40021000
 8008708:	40010800 	.word	0x40010800

0800870c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008710:	e7fe      	b.n	8008710 <NMI_Handler+0x4>

08008712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008712:	b480      	push	{r7}
 8008714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008716:	e7fe      	b.n	8008716 <HardFault_Handler+0x4>

08008718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800871c:	e7fe      	b.n	800871c <MemManage_Handler+0x4>

0800871e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800871e:	b480      	push	{r7}
 8008720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008722:	e7fe      	b.n	8008722 <BusFault_Handler+0x4>

08008724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008728:	e7fe      	b.n	8008728 <UsageFault_Handler+0x4>

0800872a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800872a:	b480      	push	{r7}
 800872c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800872e:	bf00      	nop
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr

08008736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008736:	b480      	push	{r7}
 8008738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800873a:	bf00      	nop
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008742:	b480      	push	{r7}
 8008744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008746:	bf00      	nop
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr

0800874e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008752:	f000 f8bf 	bl	80088d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008756:	bf00      	nop
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008760:	4802      	ldr	r0, [pc, #8]	; (800876c <TIM1_UP_IRQHandler+0x10>)
 8008762:	f002 fdcd 	bl	800b300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008766:	bf00      	nop
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000410 	.word	0x20000410

08008770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008774:	4802      	ldr	r0, [pc, #8]	; (8008780 <USART1_IRQHandler+0x10>)
 8008776:	f003 f9cb 	bl	800bb10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000458 	.word	0x20000458

08008784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800878c:	4a14      	ldr	r2, [pc, #80]	; (80087e0 <_sbrk+0x5c>)
 800878e:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <_sbrk+0x60>)
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008798:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <_sbrk+0x64>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d102      	bne.n	80087a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80087a0:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <_sbrk+0x64>)
 80087a2:	4a12      	ldr	r2, [pc, #72]	; (80087ec <_sbrk+0x68>)
 80087a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80087a6:	4b10      	ldr	r3, [pc, #64]	; (80087e8 <_sbrk+0x64>)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4413      	add	r3, r2
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d207      	bcs.n	80087c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80087b4:	f003 ffe6 	bl	800c784 <__errno>
 80087b8:	4603      	mov	r3, r0
 80087ba:	220c      	movs	r2, #12
 80087bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80087be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087c2:	e009      	b.n	80087d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80087c4:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <_sbrk+0x64>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80087ca:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <_sbrk+0x64>)
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	4a05      	ldr	r2, [pc, #20]	; (80087e8 <_sbrk+0x64>)
 80087d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80087d6:	68fb      	ldr	r3, [r7, #12]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	2000c000 	.word	0x2000c000
 80087e4:	00000400 	.word	0x00000400
 80087e8:	200004a0 	.word	0x200004a0
 80087ec:	200005f0 	.word	0x200005f0

080087f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80087f4:	bf00      	nop
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr

080087fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80087fc:	480c      	ldr	r0, [pc, #48]	; (8008830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80087fe:	490d      	ldr	r1, [pc, #52]	; (8008834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008800:	4a0d      	ldr	r2, [pc, #52]	; (8008838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008804:	e002      	b.n	800880c <LoopCopyDataInit>

08008806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800880a:	3304      	adds	r3, #4

0800880c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800880c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800880e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008810:	d3f9      	bcc.n	8008806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008812:	4a0a      	ldr	r2, [pc, #40]	; (800883c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008814:	4c0a      	ldr	r4, [pc, #40]	; (8008840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008818:	e001      	b.n	800881e <LoopFillZerobss>

0800881a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800881a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800881c:	3204      	adds	r2, #4

0800881e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800881e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008820:	d3fb      	bcc.n	800881a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008822:	f7ff ffe5 	bl	80087f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008826:	f003 ffb3 	bl	800c790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800882a:	f7ff fb9d 	bl	8007f68 <main>
  bx lr
 800882e:	4770      	bx	lr
  ldr r0, =_sdata
 8008830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008834:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8008838:	0800df2c 	.word	0x0800df2c
  ldr r2, =_sbss
 800883c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8008840:	200005f0 	.word	0x200005f0

08008844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008844:	e7fe      	b.n	8008844 <ADC1_2_IRQHandler>
	...

08008848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800884c:	4b08      	ldr	r3, [pc, #32]	; (8008870 <HAL_Init+0x28>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a07      	ldr	r2, [pc, #28]	; (8008870 <HAL_Init+0x28>)
 8008852:	f043 0310 	orr.w	r3, r3, #16
 8008856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008858:	2003      	movs	r0, #3
 800885a:	f000 fa43 	bl	8008ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800885e:	200f      	movs	r0, #15
 8008860:	f000 f808 	bl	8008874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008864:	f7ff fdfa 	bl	800845c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	40022000 	.word	0x40022000

08008874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800887c:	4b12      	ldr	r3, [pc, #72]	; (80088c8 <HAL_InitTick+0x54>)
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	4b12      	ldr	r3, [pc, #72]	; (80088cc <HAL_InitTick+0x58>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	4619      	mov	r1, r3
 8008886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800888a:	fbb3 f3f1 	udiv	r3, r3, r1
 800888e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fa5b 	bl	8008d4e <HAL_SYSTICK_Config>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e00e      	b.n	80088c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b0f      	cmp	r3, #15
 80088a6:	d80a      	bhi.n	80088be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088a8:	2200      	movs	r2, #0
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b0:	f000 fa23 	bl	8008cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088b4:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <HAL_InitTick+0x5c>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e000      	b.n	80088c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200000b4 	.word	0x200000b4
 80088cc:	200000bc 	.word	0x200000bc
 80088d0:	200000b8 	.word	0x200000b8

080088d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <HAL_IncTick+0x1c>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <HAL_IncTick+0x20>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4413      	add	r3, r2
 80088e4:	4a03      	ldr	r2, [pc, #12]	; (80088f4 <HAL_IncTick+0x20>)
 80088e6:	6013      	str	r3, [r2, #0]
}
 80088e8:	bf00      	nop
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bc80      	pop	{r7}
 80088ee:	4770      	bx	lr
 80088f0:	200000bc 	.word	0x200000bc
 80088f4:	200004a4 	.word	0x200004a4

080088f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  return uwTick;
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <HAL_GetTick+0x10>)
 80088fe:	681b      	ldr	r3, [r3, #0]
}
 8008900:	4618      	mov	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr
 8008908:	200004a4 	.word	0x200004a4

0800890c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008914:	f7ff fff0 	bl	80088f8 <HAL_GetTick>
 8008918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008924:	d005      	beq.n	8008932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <HAL_Delay+0x44>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008932:	bf00      	nop
 8008934:	f7ff ffe0 	bl	80088f8 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	429a      	cmp	r2, r3
 8008942:	d8f7      	bhi.n	8008934 <HAL_Delay+0x28>
  {
  }
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	200000bc 	.word	0x200000bc

08008954 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e0ed      	b.n	8008b42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff fda4 	bl	80084c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0201 	orr.w	r2, r2, #1
 8008986:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008988:	f7ff ffb6 	bl	80088f8 <HAL_GetTick>
 800898c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800898e:	e012      	b.n	80089b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008990:	f7ff ffb2 	bl	80088f8 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b0a      	cmp	r3, #10
 800899c:	d90b      	bls.n	80089b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2205      	movs	r2, #5
 80089ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e0c5      	b.n	8008b42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0e5      	beq.n	8008990 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 0202 	bic.w	r2, r2, #2
 80089d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089d4:	f7ff ff90 	bl	80088f8 <HAL_GetTick>
 80089d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80089da:	e012      	b.n	8008a02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80089dc:	f7ff ff8c 	bl	80088f8 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b0a      	cmp	r3, #10
 80089e8:	d90b      	bls.n	8008a02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2205      	movs	r2, #5
 80089fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e09f      	b.n	8008b42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e5      	bne.n	80089dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	7e1b      	ldrb	r3, [r3, #24]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d108      	bne.n	8008a2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	e007      	b.n	8008a3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7e5b      	ldrb	r3, [r3, #25]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d108      	bne.n	8008a54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	e007      	b.n	8008a64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	7e9b      	ldrb	r3, [r3, #26]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d108      	bne.n	8008a7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0220 	orr.w	r2, r2, #32
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	e007      	b.n	8008a8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0220 	bic.w	r2, r2, #32
 8008a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	7edb      	ldrb	r3, [r3, #27]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d108      	bne.n	8008aa8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f022 0210 	bic.w	r2, r2, #16
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	e007      	b.n	8008ab8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f042 0210 	orr.w	r2, r2, #16
 8008ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7f1b      	ldrb	r3, [r3, #28]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d108      	bne.n	8008ad2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0208 	orr.w	r2, r2, #8
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	e007      	b.n	8008ae2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0208 	bic.w	r2, r2, #8
 8008ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7f5b      	ldrb	r3, [r3, #29]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d108      	bne.n	8008afc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f042 0204 	orr.w	r2, r2, #4
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	e007      	b.n	8008b0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0204 	bic.w	r2, r2, #4
 8008b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	ea42 0103 	orr.w	r1, r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	1e5a      	subs	r2, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <__NVIC_SetPriorityGrouping>:
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <__NVIC_SetPriorityGrouping+0x44>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b68:	4013      	ands	r3, r2
 8008b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b7e:	4a04      	ldr	r2, [pc, #16]	; (8008b90 <__NVIC_SetPriorityGrouping+0x44>)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	60d3      	str	r3, [r2, #12]
}
 8008b84:	bf00      	nop
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bc80      	pop	{r7}
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	e000ed00 	.word	0xe000ed00

08008b94 <__NVIC_GetPriorityGrouping>:
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b98:	4b04      	ldr	r3, [pc, #16]	; (8008bac <__NVIC_GetPriorityGrouping+0x18>)
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	0a1b      	lsrs	r3, r3, #8
 8008b9e:	f003 0307 	and.w	r3, r3, #7
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	e000ed00 	.word	0xe000ed00

08008bb0 <__NVIC_EnableIRQ>:
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	db0b      	blt.n	8008bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	f003 021f 	and.w	r2, r3, #31
 8008bc8:	4906      	ldr	r1, [pc, #24]	; (8008be4 <__NVIC_EnableIRQ+0x34>)
 8008bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bce:	095b      	lsrs	r3, r3, #5
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8008bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bc80      	pop	{r7}
 8008be2:	4770      	bx	lr
 8008be4:	e000e100 	.word	0xe000e100

08008be8 <__NVIC_SetPriority>:
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	6039      	str	r1, [r7, #0]
 8008bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	db0a      	blt.n	8008c12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	490c      	ldr	r1, [pc, #48]	; (8008c34 <__NVIC_SetPriority+0x4c>)
 8008c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c06:	0112      	lsls	r2, r2, #4
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c10:	e00a      	b.n	8008c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	4908      	ldr	r1, [pc, #32]	; (8008c38 <__NVIC_SetPriority+0x50>)
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	3b04      	subs	r3, #4
 8008c20:	0112      	lsls	r2, r2, #4
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	440b      	add	r3, r1
 8008c26:	761a      	strb	r2, [r3, #24]
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	e000e100 	.word	0xe000e100
 8008c38:	e000ed00 	.word	0xe000ed00

08008c3c <NVIC_EncodePriority>:
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b089      	sub	sp, #36	; 0x24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f1c3 0307 	rsb	r3, r3, #7
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	bf28      	it	cs
 8008c5a:	2304      	movcs	r3, #4
 8008c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	3304      	adds	r3, #4
 8008c62:	2b06      	cmp	r3, #6
 8008c64:	d902      	bls.n	8008c6c <NVIC_EncodePriority+0x30>
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	3b03      	subs	r3, #3
 8008c6a:	e000      	b.n	8008c6e <NVIC_EncodePriority+0x32>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	43da      	mvns	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	401a      	ands	r2, r3
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c8e:	43d9      	mvns	r1, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c94:	4313      	orrs	r3, r2
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3724      	adds	r7, #36	; 0x24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bc80      	pop	{r7}
 8008c9e:	4770      	bx	lr

08008ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cb0:	d301      	bcc.n	8008cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e00f      	b.n	8008cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008cb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ce0 <SysTick_Config+0x40>)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008cbe:	210f      	movs	r1, #15
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc4:	f7ff ff90 	bl	8008be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <SysTick_Config+0x40>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cce:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <SysTick_Config+0x40>)
 8008cd0:	2207      	movs	r2, #7
 8008cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	e000e010 	.word	0xe000e010

08008ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff ff2d 	bl	8008b4c <__NVIC_SetPriorityGrouping>
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b086      	sub	sp, #24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	4603      	mov	r3, r0
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
 8008d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008d0c:	f7ff ff42 	bl	8008b94 <__NVIC_GetPriorityGrouping>
 8008d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	6978      	ldr	r0, [r7, #20]
 8008d18:	f7ff ff90 	bl	8008c3c <NVIC_EncodePriority>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7ff ff5f 	bl	8008be8 <__NVIC_SetPriority>
}
 8008d2a:	bf00      	nop
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	4603      	mov	r3, r0
 8008d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff ff35 	bl	8008bb0 <__NVIC_EnableIRQ>
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b082      	sub	sp, #8
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff ffa2 	bl	8008ca0 <SysTick_Config>
 8008d5c:	4603      	mov	r3, r0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b085      	sub	sp, #20
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d008      	beq.n	8008d90 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2204      	movs	r2, #4
 8008d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e020      	b.n	8008dd2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 020e 	bic.w	r2, r2, #14
 8008d9e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f202 	lsl.w	r2, r1, r2
 8008dbe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr

08008ddc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d005      	beq.n	8008e00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2204      	movs	r2, #4
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	e0d6      	b.n	8008fae <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 020e 	bic.w	r2, r2, #14
 8008e0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0201 	bic.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	4b64      	ldr	r3, [pc, #400]	; (8008fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d958      	bls.n	8008ede <HAL_DMA_Abort_IT+0x102>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a62      	ldr	r2, [pc, #392]	; (8008fbc <HAL_DMA_Abort_IT+0x1e0>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d04f      	beq.n	8008ed6 <HAL_DMA_Abort_IT+0xfa>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a61      	ldr	r2, [pc, #388]	; (8008fc0 <HAL_DMA_Abort_IT+0x1e4>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d048      	beq.n	8008ed2 <HAL_DMA_Abort_IT+0xf6>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a5f      	ldr	r2, [pc, #380]	; (8008fc4 <HAL_DMA_Abort_IT+0x1e8>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d040      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xf0>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a5e      	ldr	r2, [pc, #376]	; (8008fc8 <HAL_DMA_Abort_IT+0x1ec>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d038      	beq.n	8008ec6 <HAL_DMA_Abort_IT+0xea>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a5c      	ldr	r2, [pc, #368]	; (8008fcc <HAL_DMA_Abort_IT+0x1f0>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d030      	beq.n	8008ec0 <HAL_DMA_Abort_IT+0xe4>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a5b      	ldr	r2, [pc, #364]	; (8008fd0 <HAL_DMA_Abort_IT+0x1f4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d028      	beq.n	8008eba <HAL_DMA_Abort_IT+0xde>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a52      	ldr	r2, [pc, #328]	; (8008fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d020      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0xd8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a57      	ldr	r2, [pc, #348]	; (8008fd4 <HAL_DMA_Abort_IT+0x1f8>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d019      	beq.n	8008eb0 <HAL_DMA_Abort_IT+0xd4>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a55      	ldr	r2, [pc, #340]	; (8008fd8 <HAL_DMA_Abort_IT+0x1fc>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d012      	beq.n	8008eac <HAL_DMA_Abort_IT+0xd0>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a54      	ldr	r2, [pc, #336]	; (8008fdc <HAL_DMA_Abort_IT+0x200>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00a      	beq.n	8008ea6 <HAL_DMA_Abort_IT+0xca>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a52      	ldr	r2, [pc, #328]	; (8008fe0 <HAL_DMA_Abort_IT+0x204>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d102      	bne.n	8008ea0 <HAL_DMA_Abort_IT+0xc4>
 8008e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e9e:	e01b      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ea4:	e018      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eaa:	e015      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008eac:	2310      	movs	r3, #16
 8008eae:	e013      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e011      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eb8:	e00e      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008eba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ebe:	e00b      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ec4:	e008      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eca:	e005      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed0:	e002      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008ed2:	2310      	movs	r3, #16
 8008ed4:	e000      	b.n	8008ed8 <HAL_DMA_Abort_IT+0xfc>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4a42      	ldr	r2, [pc, #264]	; (8008fe4 <HAL_DMA_Abort_IT+0x208>)
 8008eda:	6053      	str	r3, [r2, #4]
 8008edc:	e057      	b.n	8008f8e <HAL_DMA_Abort_IT+0x1b2>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a36      	ldr	r2, [pc, #216]	; (8008fbc <HAL_DMA_Abort_IT+0x1e0>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d04f      	beq.n	8008f88 <HAL_DMA_Abort_IT+0x1ac>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a34      	ldr	r2, [pc, #208]	; (8008fc0 <HAL_DMA_Abort_IT+0x1e4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d048      	beq.n	8008f84 <HAL_DMA_Abort_IT+0x1a8>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a33      	ldr	r2, [pc, #204]	; (8008fc4 <HAL_DMA_Abort_IT+0x1e8>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d040      	beq.n	8008f7e <HAL_DMA_Abort_IT+0x1a2>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a31      	ldr	r2, [pc, #196]	; (8008fc8 <HAL_DMA_Abort_IT+0x1ec>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d038      	beq.n	8008f78 <HAL_DMA_Abort_IT+0x19c>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a30      	ldr	r2, [pc, #192]	; (8008fcc <HAL_DMA_Abort_IT+0x1f0>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d030      	beq.n	8008f72 <HAL_DMA_Abort_IT+0x196>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a2e      	ldr	r2, [pc, #184]	; (8008fd0 <HAL_DMA_Abort_IT+0x1f4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d028      	beq.n	8008f6c <HAL_DMA_Abort_IT+0x190>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a26      	ldr	r2, [pc, #152]	; (8008fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d020      	beq.n	8008f66 <HAL_DMA_Abort_IT+0x18a>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a2a      	ldr	r2, [pc, #168]	; (8008fd4 <HAL_DMA_Abort_IT+0x1f8>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d019      	beq.n	8008f62 <HAL_DMA_Abort_IT+0x186>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a29      	ldr	r2, [pc, #164]	; (8008fd8 <HAL_DMA_Abort_IT+0x1fc>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d012      	beq.n	8008f5e <HAL_DMA_Abort_IT+0x182>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a27      	ldr	r2, [pc, #156]	; (8008fdc <HAL_DMA_Abort_IT+0x200>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d00a      	beq.n	8008f58 <HAL_DMA_Abort_IT+0x17c>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a26      	ldr	r2, [pc, #152]	; (8008fe0 <HAL_DMA_Abort_IT+0x204>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d102      	bne.n	8008f52 <HAL_DMA_Abort_IT+0x176>
 8008f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f50:	e01b      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f56:	e018      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f5c:	e015      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f5e:	2310      	movs	r3, #16
 8008f60:	e013      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e011      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f6a:	e00e      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f70:	e00b      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f76:	e008      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f7c:	e005      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f82:	e002      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f84:	2310      	movs	r3, #16
 8008f86:	e000      	b.n	8008f8a <HAL_DMA_Abort_IT+0x1ae>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	4a17      	ldr	r2, [pc, #92]	; (8008fe8 <HAL_DMA_Abort_IT+0x20c>)
 8008f8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
    } 
  }
  return status;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	40020080 	.word	0x40020080
 8008fbc:	40020008 	.word	0x40020008
 8008fc0:	4002001c 	.word	0x4002001c
 8008fc4:	40020030 	.word	0x40020030
 8008fc8:	40020044 	.word	0x40020044
 8008fcc:	40020058 	.word	0x40020058
 8008fd0:	4002006c 	.word	0x4002006c
 8008fd4:	40020408 	.word	0x40020408
 8008fd8:	4002041c 	.word	0x4002041c
 8008fdc:	40020430 	.word	0x40020430
 8008fe0:	40020444 	.word	0x40020444
 8008fe4:	40020400 	.word	0x40020400
 8008fe8:	40020000 	.word	0x40020000

08008fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b08b      	sub	sp, #44	; 0x2c
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ffe:	e179      	b.n	80092f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009000:	2201      	movs	r2, #1
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	fa02 f303 	lsl.w	r3, r2, r3
 8009008:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69fa      	ldr	r2, [r7, #28]
 8009010:	4013      	ands	r3, r2
 8009012:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	429a      	cmp	r2, r3
 800901a:	f040 8168 	bne.w	80092ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4a96      	ldr	r2, [pc, #600]	; (800927c <HAL_GPIO_Init+0x290>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d05e      	beq.n	80090e6 <HAL_GPIO_Init+0xfa>
 8009028:	4a94      	ldr	r2, [pc, #592]	; (800927c <HAL_GPIO_Init+0x290>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d875      	bhi.n	800911a <HAL_GPIO_Init+0x12e>
 800902e:	4a94      	ldr	r2, [pc, #592]	; (8009280 <HAL_GPIO_Init+0x294>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d058      	beq.n	80090e6 <HAL_GPIO_Init+0xfa>
 8009034:	4a92      	ldr	r2, [pc, #584]	; (8009280 <HAL_GPIO_Init+0x294>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d86f      	bhi.n	800911a <HAL_GPIO_Init+0x12e>
 800903a:	4a92      	ldr	r2, [pc, #584]	; (8009284 <HAL_GPIO_Init+0x298>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d052      	beq.n	80090e6 <HAL_GPIO_Init+0xfa>
 8009040:	4a90      	ldr	r2, [pc, #576]	; (8009284 <HAL_GPIO_Init+0x298>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d869      	bhi.n	800911a <HAL_GPIO_Init+0x12e>
 8009046:	4a90      	ldr	r2, [pc, #576]	; (8009288 <HAL_GPIO_Init+0x29c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d04c      	beq.n	80090e6 <HAL_GPIO_Init+0xfa>
 800904c:	4a8e      	ldr	r2, [pc, #568]	; (8009288 <HAL_GPIO_Init+0x29c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d863      	bhi.n	800911a <HAL_GPIO_Init+0x12e>
 8009052:	4a8e      	ldr	r2, [pc, #568]	; (800928c <HAL_GPIO_Init+0x2a0>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d046      	beq.n	80090e6 <HAL_GPIO_Init+0xfa>
 8009058:	4a8c      	ldr	r2, [pc, #560]	; (800928c <HAL_GPIO_Init+0x2a0>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d85d      	bhi.n	800911a <HAL_GPIO_Init+0x12e>
 800905e:	2b12      	cmp	r3, #18
 8009060:	d82a      	bhi.n	80090b8 <HAL_GPIO_Init+0xcc>
 8009062:	2b12      	cmp	r3, #18
 8009064:	d859      	bhi.n	800911a <HAL_GPIO_Init+0x12e>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <HAL_GPIO_Init+0x80>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	080090e7 	.word	0x080090e7
 8009070:	080090c1 	.word	0x080090c1
 8009074:	080090d3 	.word	0x080090d3
 8009078:	08009115 	.word	0x08009115
 800907c:	0800911b 	.word	0x0800911b
 8009080:	0800911b 	.word	0x0800911b
 8009084:	0800911b 	.word	0x0800911b
 8009088:	0800911b 	.word	0x0800911b
 800908c:	0800911b 	.word	0x0800911b
 8009090:	0800911b 	.word	0x0800911b
 8009094:	0800911b 	.word	0x0800911b
 8009098:	0800911b 	.word	0x0800911b
 800909c:	0800911b 	.word	0x0800911b
 80090a0:	0800911b 	.word	0x0800911b
 80090a4:	0800911b 	.word	0x0800911b
 80090a8:	0800911b 	.word	0x0800911b
 80090ac:	0800911b 	.word	0x0800911b
 80090b0:	080090c9 	.word	0x080090c9
 80090b4:	080090dd 	.word	0x080090dd
 80090b8:	4a75      	ldr	r2, [pc, #468]	; (8009290 <HAL_GPIO_Init+0x2a4>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d013      	beq.n	80090e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80090be:	e02c      	b.n	800911a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	623b      	str	r3, [r7, #32]
          break;
 80090c6:	e029      	b.n	800911c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	3304      	adds	r3, #4
 80090ce:	623b      	str	r3, [r7, #32]
          break;
 80090d0:	e024      	b.n	800911c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	3308      	adds	r3, #8
 80090d8:	623b      	str	r3, [r7, #32]
          break;
 80090da:	e01f      	b.n	800911c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	330c      	adds	r3, #12
 80090e2:	623b      	str	r3, [r7, #32]
          break;
 80090e4:	e01a      	b.n	800911c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d102      	bne.n	80090f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80090ee:	2304      	movs	r3, #4
 80090f0:	623b      	str	r3, [r7, #32]
          break;
 80090f2:	e013      	b.n	800911c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d105      	bne.n	8009108 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80090fc:	2308      	movs	r3, #8
 80090fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	69fa      	ldr	r2, [r7, #28]
 8009104:	611a      	str	r2, [r3, #16]
          break;
 8009106:	e009      	b.n	800911c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009108:	2308      	movs	r3, #8
 800910a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	615a      	str	r2, [r3, #20]
          break;
 8009112:	e003      	b.n	800911c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009114:	2300      	movs	r3, #0
 8009116:	623b      	str	r3, [r7, #32]
          break;
 8009118:	e000      	b.n	800911c <HAL_GPIO_Init+0x130>
          break;
 800911a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2bff      	cmp	r3, #255	; 0xff
 8009120:	d801      	bhi.n	8009126 <HAL_GPIO_Init+0x13a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	e001      	b.n	800912a <HAL_GPIO_Init+0x13e>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	3304      	adds	r3, #4
 800912a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	2bff      	cmp	r3, #255	; 0xff
 8009130:	d802      	bhi.n	8009138 <HAL_GPIO_Init+0x14c>
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	e002      	b.n	800913e <HAL_GPIO_Init+0x152>
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	3b08      	subs	r3, #8
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	210f      	movs	r1, #15
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	fa01 f303 	lsl.w	r3, r1, r3
 800914c:	43db      	mvns	r3, r3
 800914e:	401a      	ands	r2, r3
 8009150:	6a39      	ldr	r1, [r7, #32]
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	fa01 f303 	lsl.w	r3, r1, r3
 8009158:	431a      	orrs	r2, r3
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 80c1 	beq.w	80092ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800916c:	4b49      	ldr	r3, [pc, #292]	; (8009294 <HAL_GPIO_Init+0x2a8>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	4a48      	ldr	r2, [pc, #288]	; (8009294 <HAL_GPIO_Init+0x2a8>)
 8009172:	f043 0301 	orr.w	r3, r3, #1
 8009176:	6193      	str	r3, [r2, #24]
 8009178:	4b46      	ldr	r3, [pc, #280]	; (8009294 <HAL_GPIO_Init+0x2a8>)
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	60bb      	str	r3, [r7, #8]
 8009182:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009184:	4a44      	ldr	r2, [pc, #272]	; (8009298 <HAL_GPIO_Init+0x2ac>)
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	089b      	lsrs	r3, r3, #2
 800918a:	3302      	adds	r3, #2
 800918c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009190:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	220f      	movs	r2, #15
 800919c:	fa02 f303 	lsl.w	r3, r2, r3
 80091a0:	43db      	mvns	r3, r3
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4013      	ands	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a3c      	ldr	r2, [pc, #240]	; (800929c <HAL_GPIO_Init+0x2b0>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d01f      	beq.n	80091f0 <HAL_GPIO_Init+0x204>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a3b      	ldr	r2, [pc, #236]	; (80092a0 <HAL_GPIO_Init+0x2b4>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d019      	beq.n	80091ec <HAL_GPIO_Init+0x200>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a3a      	ldr	r2, [pc, #232]	; (80092a4 <HAL_GPIO_Init+0x2b8>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d013      	beq.n	80091e8 <HAL_GPIO_Init+0x1fc>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a39      	ldr	r2, [pc, #228]	; (80092a8 <HAL_GPIO_Init+0x2bc>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00d      	beq.n	80091e4 <HAL_GPIO_Init+0x1f8>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a38      	ldr	r2, [pc, #224]	; (80092ac <HAL_GPIO_Init+0x2c0>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d007      	beq.n	80091e0 <HAL_GPIO_Init+0x1f4>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a37      	ldr	r2, [pc, #220]	; (80092b0 <HAL_GPIO_Init+0x2c4>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d101      	bne.n	80091dc <HAL_GPIO_Init+0x1f0>
 80091d8:	2305      	movs	r3, #5
 80091da:	e00a      	b.n	80091f2 <HAL_GPIO_Init+0x206>
 80091dc:	2306      	movs	r3, #6
 80091de:	e008      	b.n	80091f2 <HAL_GPIO_Init+0x206>
 80091e0:	2304      	movs	r3, #4
 80091e2:	e006      	b.n	80091f2 <HAL_GPIO_Init+0x206>
 80091e4:	2303      	movs	r3, #3
 80091e6:	e004      	b.n	80091f2 <HAL_GPIO_Init+0x206>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e002      	b.n	80091f2 <HAL_GPIO_Init+0x206>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <HAL_GPIO_Init+0x206>
 80091f0:	2300      	movs	r3, #0
 80091f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f4:	f002 0203 	and.w	r2, r2, #3
 80091f8:	0092      	lsls	r2, r2, #2
 80091fa:	4093      	lsls	r3, r2
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009202:	4925      	ldr	r1, [pc, #148]	; (8009298 <HAL_GPIO_Init+0x2ac>)
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	089b      	lsrs	r3, r3, #2
 8009208:	3302      	adds	r3, #2
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d006      	beq.n	800922a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800921c:	4b25      	ldr	r3, [pc, #148]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	4924      	ldr	r1, [pc, #144]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	4313      	orrs	r3, r2
 8009226:	608b      	str	r3, [r1, #8]
 8009228:	e006      	b.n	8009238 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800922a:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 800922c:	689a      	ldr	r2, [r3, #8]
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	43db      	mvns	r3, r3
 8009232:	4920      	ldr	r1, [pc, #128]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 8009234:	4013      	ands	r3, r2
 8009236:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d006      	beq.n	8009252 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009244:	4b1b      	ldr	r3, [pc, #108]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	491a      	ldr	r1, [pc, #104]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	4313      	orrs	r3, r2
 800924e:	60cb      	str	r3, [r1, #12]
 8009250:	e006      	b.n	8009260 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009252:	4b18      	ldr	r3, [pc, #96]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	43db      	mvns	r3, r3
 800925a:	4916      	ldr	r1, [pc, #88]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 800925c:	4013      	ands	r3, r2
 800925e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d025      	beq.n	80092b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800926c:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	4910      	ldr	r1, [pc, #64]	; (80092b4 <HAL_GPIO_Init+0x2c8>)
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	4313      	orrs	r3, r2
 8009276:	604b      	str	r3, [r1, #4]
 8009278:	e025      	b.n	80092c6 <HAL_GPIO_Init+0x2da>
 800927a:	bf00      	nop
 800927c:	10320000 	.word	0x10320000
 8009280:	10310000 	.word	0x10310000
 8009284:	10220000 	.word	0x10220000
 8009288:	10210000 	.word	0x10210000
 800928c:	10120000 	.word	0x10120000
 8009290:	10110000 	.word	0x10110000
 8009294:	40021000 	.word	0x40021000
 8009298:	40010000 	.word	0x40010000
 800929c:	40010800 	.word	0x40010800
 80092a0:	40010c00 	.word	0x40010c00
 80092a4:	40011000 	.word	0x40011000
 80092a8:	40011400 	.word	0x40011400
 80092ac:	40011800 	.word	0x40011800
 80092b0:	40011c00 	.word	0x40011c00
 80092b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80092b8:	4b15      	ldr	r3, [pc, #84]	; (8009310 <HAL_GPIO_Init+0x324>)
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	43db      	mvns	r3, r3
 80092c0:	4913      	ldr	r1, [pc, #76]	; (8009310 <HAL_GPIO_Init+0x324>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d006      	beq.n	80092e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <HAL_GPIO_Init+0x324>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	490e      	ldr	r1, [pc, #56]	; (8009310 <HAL_GPIO_Init+0x324>)
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	4313      	orrs	r3, r2
 80092dc:	600b      	str	r3, [r1, #0]
 80092de:	e006      	b.n	80092ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80092e0:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <HAL_GPIO_Init+0x324>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	43db      	mvns	r3, r3
 80092e8:	4909      	ldr	r1, [pc, #36]	; (8009310 <HAL_GPIO_Init+0x324>)
 80092ea:	4013      	ands	r3, r2
 80092ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	3301      	adds	r3, #1
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	fa22 f303 	lsr.w	r3, r2, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f47f ae7e 	bne.w	8009000 <HAL_GPIO_Init+0x14>
  }
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop
 8009308:	372c      	adds	r7, #44	; 0x2c
 800930a:	46bd      	mov	sp, r7
 800930c:	bc80      	pop	{r7}
 800930e:	4770      	bx	lr
 8009310:	40010400 	.word	0x40010400

08009314 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009314:	b480      	push	{r7}
 8009316:	b089      	sub	sp, #36	; 0x24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009322:	e0a6      	b.n	8009472 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009324:	2201      	movs	r2, #1
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	fa02 f303 	lsl.w	r3, r2, r3
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	4013      	ands	r3, r2
 8009330:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 8099 	beq.w	800946c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800933a:	4a54      	ldr	r2, [pc, #336]	; (800948c <HAL_GPIO_DeInit+0x178>)
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	089b      	lsrs	r3, r3, #2
 8009340:	3302      	adds	r3, #2
 8009342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009346:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	220f      	movs	r2, #15
 8009352:	fa02 f303 	lsl.w	r3, r2, r3
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	4013      	ands	r3, r2
 800935a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a4c      	ldr	r2, [pc, #304]	; (8009490 <HAL_GPIO_DeInit+0x17c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d01f      	beq.n	80093a4 <HAL_GPIO_DeInit+0x90>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a4b      	ldr	r2, [pc, #300]	; (8009494 <HAL_GPIO_DeInit+0x180>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d019      	beq.n	80093a0 <HAL_GPIO_DeInit+0x8c>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a4a      	ldr	r2, [pc, #296]	; (8009498 <HAL_GPIO_DeInit+0x184>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d013      	beq.n	800939c <HAL_GPIO_DeInit+0x88>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a49      	ldr	r2, [pc, #292]	; (800949c <HAL_GPIO_DeInit+0x188>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00d      	beq.n	8009398 <HAL_GPIO_DeInit+0x84>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a48      	ldr	r2, [pc, #288]	; (80094a0 <HAL_GPIO_DeInit+0x18c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d007      	beq.n	8009394 <HAL_GPIO_DeInit+0x80>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a47      	ldr	r2, [pc, #284]	; (80094a4 <HAL_GPIO_DeInit+0x190>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d101      	bne.n	8009390 <HAL_GPIO_DeInit+0x7c>
 800938c:	2305      	movs	r3, #5
 800938e:	e00a      	b.n	80093a6 <HAL_GPIO_DeInit+0x92>
 8009390:	2306      	movs	r3, #6
 8009392:	e008      	b.n	80093a6 <HAL_GPIO_DeInit+0x92>
 8009394:	2304      	movs	r3, #4
 8009396:	e006      	b.n	80093a6 <HAL_GPIO_DeInit+0x92>
 8009398:	2303      	movs	r3, #3
 800939a:	e004      	b.n	80093a6 <HAL_GPIO_DeInit+0x92>
 800939c:	2302      	movs	r3, #2
 800939e:	e002      	b.n	80093a6 <HAL_GPIO_DeInit+0x92>
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <HAL_GPIO_DeInit+0x92>
 80093a4:	2300      	movs	r3, #0
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	f002 0203 	and.w	r2, r2, #3
 80093ac:	0092      	lsls	r2, r2, #2
 80093ae:	4093      	lsls	r3, r2
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d132      	bne.n	800941c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80093b6:	4b3c      	ldr	r3, [pc, #240]	; (80094a8 <HAL_GPIO_DeInit+0x194>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	43db      	mvns	r3, r3
 80093be:	493a      	ldr	r1, [pc, #232]	; (80094a8 <HAL_GPIO_DeInit+0x194>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80093c4:	4b38      	ldr	r3, [pc, #224]	; (80094a8 <HAL_GPIO_DeInit+0x194>)
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	43db      	mvns	r3, r3
 80093cc:	4936      	ldr	r1, [pc, #216]	; (80094a8 <HAL_GPIO_DeInit+0x194>)
 80093ce:	4013      	ands	r3, r2
 80093d0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80093d2:	4b35      	ldr	r3, [pc, #212]	; (80094a8 <HAL_GPIO_DeInit+0x194>)
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	43db      	mvns	r3, r3
 80093da:	4933      	ldr	r1, [pc, #204]	; (80094a8 <HAL_GPIO_DeInit+0x194>)
 80093dc:	4013      	ands	r3, r2
 80093de:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80093e0:	4b31      	ldr	r3, [pc, #196]	; (80094a8 <HAL_GPIO_DeInit+0x194>)
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	43db      	mvns	r3, r3
 80093e8:	492f      	ldr	r1, [pc, #188]	; (80094a8 <HAL_GPIO_DeInit+0x194>)
 80093ea:	4013      	ands	r3, r2
 80093ec:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	220f      	movs	r2, #15
 80093f8:	fa02 f303 	lsl.w	r3, r2, r3
 80093fc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80093fe:	4a23      	ldr	r2, [pc, #140]	; (800948c <HAL_GPIO_DeInit+0x178>)
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	3302      	adds	r3, #2
 8009406:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	43da      	mvns	r2, r3
 800940e:	481f      	ldr	r0, [pc, #124]	; (800948c <HAL_GPIO_DeInit+0x178>)
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	089b      	lsrs	r3, r3, #2
 8009414:	400a      	ands	r2, r1
 8009416:	3302      	adds	r3, #2
 8009418:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	2bff      	cmp	r3, #255	; 0xff
 8009420:	d801      	bhi.n	8009426 <HAL_GPIO_DeInit+0x112>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	e001      	b.n	800942a <HAL_GPIO_DeInit+0x116>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3304      	adds	r3, #4
 800942a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2bff      	cmp	r3, #255	; 0xff
 8009430:	d802      	bhi.n	8009438 <HAL_GPIO_DeInit+0x124>
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	e002      	b.n	800943e <HAL_GPIO_DeInit+0x12a>
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	3b08      	subs	r3, #8
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	210f      	movs	r1, #15
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	fa01 f303 	lsl.w	r3, r1, r3
 800944c:	43db      	mvns	r3, r3
 800944e:	401a      	ands	r2, r3
 8009450:	2104      	movs	r1, #4
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	fa01 f303 	lsl.w	r3, r1, r3
 8009458:	431a      	orrs	r2, r3
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	43db      	mvns	r3, r3
 8009466:	401a      	ands	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3301      	adds	r3, #1
 8009470:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	fa22 f303 	lsr.w	r3, r2, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	f47f af52 	bne.w	8009324 <HAL_GPIO_DeInit+0x10>
  }
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	3724      	adds	r7, #36	; 0x24
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr
 800948c:	40010000 	.word	0x40010000
 8009490:	40010800 	.word	0x40010800
 8009494:	40010c00 	.word	0x40010c00
 8009498:	40011000 	.word	0x40011000
 800949c:	40011400 	.word	0x40011400
 80094a0:	40011800 	.word	0x40011800
 80094a4:	40011c00 	.word	0x40011c00
 80094a8:	40010400 	.word	0x40010400

080094ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	887b      	ldrh	r3, [r7, #2]
 80094be:	4013      	ands	r3, r2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80094c4:	2301      	movs	r3, #1
 80094c6:	73fb      	strb	r3, [r7, #15]
 80094c8:	e001      	b.n	80094ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bc80      	pop	{r7}
 80094d8:	4770      	bx	lr

080094da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	807b      	strh	r3, [r7, #2]
 80094e6:	4613      	mov	r3, r2
 80094e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80094ea:	787b      	ldrb	r3, [r7, #1]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80094f0:	887a      	ldrh	r2, [r7, #2]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80094f6:	e003      	b.n	8009500 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80094f8:	887b      	ldrh	r3, [r7, #2]
 80094fa:	041a      	lsls	r2, r3, #16
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	611a      	str	r2, [r3, #16]
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr

0800950a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800951c:	887a      	ldrh	r2, [r7, #2]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4013      	ands	r3, r2
 8009522:	041a      	lsls	r2, r3, #16
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	43d9      	mvns	r1, r3
 8009528:	887b      	ldrh	r3, [r7, #2]
 800952a:	400b      	ands	r3, r1
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	611a      	str	r2, [r3, #16]
}
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e12b      	b.n	80097a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d106      	bne.n	8009568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fe fff8 	bl	8008558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2224      	movs	r2, #36	; 0x24
 800956c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 0201 	bic.w	r2, r2, #1
 800957e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800958e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800959e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80095a0:	f001 fdb8 	bl	800b114 <HAL_RCC_GetPCLK1Freq>
 80095a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	4a81      	ldr	r2, [pc, #516]	; (80097b0 <HAL_I2C_Init+0x274>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d807      	bhi.n	80095c0 <HAL_I2C_Init+0x84>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4a80      	ldr	r2, [pc, #512]	; (80097b4 <HAL_I2C_Init+0x278>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	bf94      	ite	ls
 80095b8:	2301      	movls	r3, #1
 80095ba:	2300      	movhi	r3, #0
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	e006      	b.n	80095ce <HAL_I2C_Init+0x92>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4a7d      	ldr	r2, [pc, #500]	; (80097b8 <HAL_I2C_Init+0x27c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	bf94      	ite	ls
 80095c8:	2301      	movls	r3, #1
 80095ca:	2300      	movhi	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e0e7      	b.n	80097a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4a78      	ldr	r2, [pc, #480]	; (80097bc <HAL_I2C_Init+0x280>)
 80095da:	fba2 2303 	umull	r2, r3, r2, r3
 80095de:	0c9b      	lsrs	r3, r3, #18
 80095e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	4a6a      	ldr	r2, [pc, #424]	; (80097b0 <HAL_I2C_Init+0x274>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d802      	bhi.n	8009610 <HAL_I2C_Init+0xd4>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	3301      	adds	r3, #1
 800960e:	e009      	b.n	8009624 <HAL_I2C_Init+0xe8>
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	4a69      	ldr	r2, [pc, #420]	; (80097c0 <HAL_I2C_Init+0x284>)
 800961c:	fba2 2303 	umull	r2, r3, r2, r3
 8009620:	099b      	lsrs	r3, r3, #6
 8009622:	3301      	adds	r3, #1
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6812      	ldr	r2, [r2, #0]
 8009628:	430b      	orrs	r3, r1
 800962a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	495c      	ldr	r1, [pc, #368]	; (80097b0 <HAL_I2C_Init+0x274>)
 8009640:	428b      	cmp	r3, r1
 8009642:	d819      	bhi.n	8009678 <HAL_I2C_Init+0x13c>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	1e59      	subs	r1, r3, #1
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009652:	1c59      	adds	r1, r3, #1
 8009654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009658:	400b      	ands	r3, r1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <HAL_I2C_Init+0x138>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1e59      	subs	r1, r3, #1
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	fbb1 f3f3 	udiv	r3, r1, r3
 800966c:	3301      	adds	r3, #1
 800966e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009672:	e051      	b.n	8009718 <HAL_I2C_Init+0x1dc>
 8009674:	2304      	movs	r3, #4
 8009676:	e04f      	b.n	8009718 <HAL_I2C_Init+0x1dc>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d111      	bne.n	80096a4 <HAL_I2C_Init+0x168>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	1e58      	subs	r0, r3, #1
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6859      	ldr	r1, [r3, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	440b      	add	r3, r1
 800968e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009692:	3301      	adds	r3, #1
 8009694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf0c      	ite	eq
 800969c:	2301      	moveq	r3, #1
 800969e:	2300      	movne	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	e012      	b.n	80096ca <HAL_I2C_Init+0x18e>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	1e58      	subs	r0, r3, #1
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6859      	ldr	r1, [r3, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	0099      	lsls	r1, r3, #2
 80096b4:	440b      	add	r3, r1
 80096b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80096ba:	3301      	adds	r3, #1
 80096bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bf0c      	ite	eq
 80096c4:	2301      	moveq	r3, #1
 80096c6:	2300      	movne	r3, #0
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <HAL_I2C_Init+0x196>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e022      	b.n	8009718 <HAL_I2C_Init+0x1dc>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10e      	bne.n	80096f8 <HAL_I2C_Init+0x1bc>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	1e58      	subs	r0, r3, #1
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6859      	ldr	r1, [r3, #4]
 80096e2:	460b      	mov	r3, r1
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	440b      	add	r3, r1
 80096e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80096ec:	3301      	adds	r3, #1
 80096ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f6:	e00f      	b.n	8009718 <HAL_I2C_Init+0x1dc>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	1e58      	subs	r0, r3, #1
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6859      	ldr	r1, [r3, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	440b      	add	r3, r1
 8009706:	0099      	lsls	r1, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	fbb0 f3f3 	udiv	r3, r0, r3
 800970e:	3301      	adds	r3, #1
 8009710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	6809      	ldr	r1, [r1, #0]
 800971c:	4313      	orrs	r3, r2
 800971e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69da      	ldr	r2, [r3, #28]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	431a      	orrs	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	430a      	orrs	r2, r1
 800973a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	6911      	ldr	r1, [r2, #16]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	68d2      	ldr	r2, [r2, #12]
 8009752:	4311      	orrs	r1, r2
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6812      	ldr	r2, [r2, #0]
 8009758:	430b      	orrs	r3, r1
 800975a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	695a      	ldr	r2, [r3, #20]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f042 0201 	orr.w	r2, r2, #1
 8009786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	000186a0 	.word	0x000186a0
 80097b4:	001e847f 	.word	0x001e847f
 80097b8:	003d08ff 	.word	0x003d08ff
 80097bc:	431bde83 	.word	0x431bde83
 80097c0:	10624dd3 	.word	0x10624dd3

080097c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e021      	b.n	800981a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2224      	movs	r2, #36	; 0x24
 80097da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f022 0201 	bic.w	r2, r2, #1
 80097ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7fe fef0 	bl	80085d4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af02      	add	r7, sp, #8
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	461a      	mov	r2, r3
 8009830:	460b      	mov	r3, r1
 8009832:	817b      	strh	r3, [r7, #10]
 8009834:	4613      	mov	r3, r2
 8009836:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009838:	f7ff f85e 	bl	80088f8 <HAL_GetTick>
 800983c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b20      	cmp	r3, #32
 8009848:	f040 80e0 	bne.w	8009a0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	2319      	movs	r3, #25
 8009852:	2201      	movs	r2, #1
 8009854:	4970      	ldr	r1, [pc, #448]	; (8009a18 <HAL_I2C_Master_Transmit+0x1f4>)
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 fe5c 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009862:	2302      	movs	r3, #2
 8009864:	e0d3      	b.n	8009a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800986c:	2b01      	cmp	r3, #1
 800986e:	d101      	bne.n	8009874 <HAL_I2C_Master_Transmit+0x50>
 8009870:	2302      	movs	r3, #2
 8009872:	e0cc      	b.n	8009a0e <HAL_I2C_Master_Transmit+0x1ea>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b01      	cmp	r3, #1
 8009888:	d007      	beq.n	800989a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0201 	orr.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2221      	movs	r2, #33	; 0x21
 80098ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2210      	movs	r2, #16
 80098b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	893a      	ldrh	r2, [r7, #8]
 80098ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4a50      	ldr	r2, [pc, #320]	; (8009a1c <HAL_I2C_Master_Transmit+0x1f8>)
 80098da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80098dc:	8979      	ldrh	r1, [r7, #10]
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	6a3a      	ldr	r2, [r7, #32]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fc16 	bl	800a114 <I2C_MasterRequestWrite>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e08d      	b.n	8009a0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f2:	2300      	movs	r3, #0
 80098f4:	613b      	str	r3, [r7, #16]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	613b      	str	r3, [r7, #16]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009908:	e066      	b.n	80099d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	6a39      	ldr	r1, [r7, #32]
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 ff1a 	bl	800a748 <I2C_WaitOnTXEFlagUntilTimeout>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00d      	beq.n	8009936 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991e:	2b04      	cmp	r3, #4
 8009920:	d107      	bne.n	8009932 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009930:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e06b      	b.n	8009a0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	781a      	ldrb	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800995e:	3b01      	subs	r3, #1
 8009960:	b29a      	uxth	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b04      	cmp	r3, #4
 8009972:	d11b      	bne.n	80099ac <HAL_I2C_Master_Transmit+0x188>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009978:	2b00      	cmp	r3, #0
 800997a:	d017      	beq.n	80099ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	781a      	ldrb	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009996:	b29b      	uxth	r3, r3
 8009998:	3b01      	subs	r3, #1
 800999a:	b29a      	uxth	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	6a39      	ldr	r1, [r7, #32]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 ff11 	bl	800a7d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00d      	beq.n	80099d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c0:	2b04      	cmp	r3, #4
 80099c2:	d107      	bne.n	80099d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e01a      	b.n	8009a0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d194      	bne.n	800990a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2220      	movs	r2, #32
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e000      	b.n	8009a0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009a0c:	2302      	movs	r3, #2
  }
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	00100002 	.word	0x00100002
 8009a1c:	ffff0000 	.word	0xffff0000

08009a20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af02      	add	r7, sp, #8
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	4608      	mov	r0, r1
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	4603      	mov	r3, r0
 8009a30:	817b      	strh	r3, [r7, #10]
 8009a32:	460b      	mov	r3, r1
 8009a34:	813b      	strh	r3, [r7, #8]
 8009a36:	4613      	mov	r3, r2
 8009a38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a3a:	f7fe ff5d 	bl	80088f8 <HAL_GetTick>
 8009a3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	f040 80d9 	bne.w	8009c00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	2319      	movs	r3, #25
 8009a54:	2201      	movs	r2, #1
 8009a56:	496d      	ldr	r1, [pc, #436]	; (8009c0c <HAL_I2C_Mem_Write+0x1ec>)
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 fd5b 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009a64:	2302      	movs	r3, #2
 8009a66:	e0cc      	b.n	8009c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <HAL_I2C_Mem_Write+0x56>
 8009a72:	2302      	movs	r3, #2
 8009a74:	e0c5      	b.n	8009c02 <HAL_I2C_Mem_Write+0x1e2>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d007      	beq.n	8009a9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009aaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2221      	movs	r2, #33	; 0x21
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2240      	movs	r2, #64	; 0x40
 8009ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6a3a      	ldr	r2, [r7, #32]
 8009ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4a4d      	ldr	r2, [pc, #308]	; (8009c10 <HAL_I2C_Mem_Write+0x1f0>)
 8009adc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ade:	88f8      	ldrh	r0, [r7, #6]
 8009ae0:	893a      	ldrh	r2, [r7, #8]
 8009ae2:	8979      	ldrh	r1, [r7, #10]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	9301      	str	r3, [sp, #4]
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	4603      	mov	r3, r0
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 fb92 	bl	800a218 <I2C_RequestMemoryWrite>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d052      	beq.n	8009ba0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e081      	b.n	8009c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 fe20 	bl	800a748 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00d      	beq.n	8009b2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d107      	bne.n	8009b26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e06b      	b.n	8009c02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d11b      	bne.n	8009ba0 <HAL_I2C_Mem_Write+0x180>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d017      	beq.n	8009ba0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	781a      	ldrb	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1aa      	bne.n	8009afe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fe13 	bl	800a7d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00d      	beq.n	8009bd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	d107      	bne.n	8009bd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e016      	b.n	8009c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	e000      	b.n	8009c02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009c00:	2302      	movs	r3, #2
  }
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	00100002 	.word	0x00100002
 8009c10:	ffff0000 	.word	0xffff0000

08009c14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08c      	sub	sp, #48	; 0x30
 8009c18:	af02      	add	r7, sp, #8
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	4611      	mov	r1, r2
 8009c20:	461a      	mov	r2, r3
 8009c22:	4603      	mov	r3, r0
 8009c24:	817b      	strh	r3, [r7, #10]
 8009c26:	460b      	mov	r3, r1
 8009c28:	813b      	strh	r3, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c32:	f7fe fe61 	bl	80088f8 <HAL_GetTick>
 8009c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	f040 8244 	bne.w	800a0ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	2319      	movs	r3, #25
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	4982      	ldr	r1, [pc, #520]	; (8009e58 <HAL_I2C_Mem_Read+0x244>)
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 fc5f 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e237      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d101      	bne.n	8009c6e <HAL_I2C_Mem_Read+0x5a>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	e230      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d007      	beq.n	8009c94 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0201 	orr.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2222      	movs	r2, #34	; 0x22
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2240      	movs	r2, #64	; 0x40
 8009cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4a62      	ldr	r2, [pc, #392]	; (8009e5c <HAL_I2C_Mem_Read+0x248>)
 8009cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cd6:	88f8      	ldrh	r0, [r7, #6]
 8009cd8:	893a      	ldrh	r2, [r7, #8]
 8009cda:	8979      	ldrh	r1, [r7, #10]
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 fb2c 	bl	800a344 <I2C_RequestMemoryRead>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e1ec      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d113      	bne.n	8009d26 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61fb      	str	r3, [r7, #28]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	61fb      	str	r3, [r7, #28]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	61fb      	str	r3, [r7, #28]
 8009d12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	e1c0      	b.n	800a0a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d11e      	bne.n	8009d6c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d3e:	b672      	cpsid	i
}
 8009d40:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d42:	2300      	movs	r3, #0
 8009d44:	61bb      	str	r3, [r7, #24]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	61bb      	str	r3, [r7, #24]
 8009d56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009d68:	b662      	cpsie	i
}
 8009d6a:	e035      	b.n	8009dd8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d11e      	bne.n	8009db2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d84:	b672      	cpsid	i
}
 8009d86:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	617b      	str	r3, [r7, #20]
 8009d9c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009dae:	b662      	cpsie	i
}
 8009db0:	e012      	b.n	8009dd8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009dc0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	613b      	str	r3, [r7, #16]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	613b      	str	r3, [r7, #16]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009dd8:	e166      	b.n	800a0a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	f200 811f 	bhi.w	800a022 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d123      	bne.n	8009e34 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 fd39 	bl	800a868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e167      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e32:	e139      	b.n	800a0a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d152      	bne.n	8009ee2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	2200      	movs	r2, #0
 8009e44:	4906      	ldr	r1, [pc, #24]	; (8009e60 <HAL_I2C_Mem_Read+0x24c>)
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 fb64 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d008      	beq.n	8009e64 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e13c      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
 8009e56:	bf00      	nop
 8009e58:	00100002 	.word	0x00100002
 8009e5c:	ffff0000 	.word	0xffff0000
 8009e60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009e64:	b672      	cpsid	i
}
 8009e66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	691a      	ldr	r2, [r3, #16]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	b2d2      	uxtb	r2, r2
 8009e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009eaa:	b662      	cpsie	i
}
 8009eac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	691a      	ldr	r2, [r3, #16]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	b2d2      	uxtb	r2, r2
 8009eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ee0:	e0e2      	b.n	800a0a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee8:	2200      	movs	r2, #0
 8009eea:	497b      	ldr	r1, [pc, #492]	; (800a0d8 <HAL_I2C_Mem_Read+0x4c4>)
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 fb11 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e0e9      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f0c:	b672      	cpsid	i
}
 8009f0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691a      	ldr	r2, [r3, #16]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009f42:	4b66      	ldr	r3, [pc, #408]	; (800a0dc <HAL_I2C_Mem_Read+0x4c8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	08db      	lsrs	r3, r3, #3
 8009f48:	4a65      	ldr	r2, [pc, #404]	; (800a0e0 <HAL_I2C_Mem_Read+0x4cc>)
 8009f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f4e:	0a1a      	lsrs	r2, r3, #8
 8009f50:	4613      	mov	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	00da      	lsls	r2, r3, #3
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d118      	bne.n	8009f9a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2220      	movs	r2, #32
 8009f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f043 0220 	orr.w	r2, r3, #32
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009f8a:	b662      	cpsie	i
}
 8009f8c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e09a      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d1d9      	bne.n	8009f5c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691a      	ldr	r2, [r3, #16]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009fea:	b662      	cpsie	i
}
 8009fec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	691a      	ldr	r2, [r3, #16]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	b2d2      	uxtb	r2, r2
 8009ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a00a:	3b01      	subs	r3, #1
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a016:	b29b      	uxth	r3, r3
 800a018:	3b01      	subs	r3, #1
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a020:	e042      	b.n	800a0a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a024:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 fc1e 	bl	800a868 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e04c      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	691a      	ldr	r2, [r3, #16]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	b2d2      	uxtb	r2, r2
 800a042:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a052:	3b01      	subs	r3, #1
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a05e:	b29b      	uxth	r3, r3
 800a060:	3b01      	subs	r3, #1
 800a062:	b29a      	uxth	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	f003 0304 	and.w	r3, r3, #4
 800a072:	2b04      	cmp	r3, #4
 800a074:	d118      	bne.n	800a0a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	691a      	ldr	r2, [r3, #16]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	b2d2      	uxtb	r2, r2
 800a082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a092:	3b01      	subs	r3, #1
 800a094:	b29a      	uxth	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f47f ae94 	bne.w	8009dda <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	e000      	b.n	800a0d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a0ce:	2302      	movs	r3, #2
  }
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3728      	adds	r7, #40	; 0x28
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	00010004 	.word	0x00010004
 800a0dc:	200000b4 	.word	0x200000b4
 800a0e0:	14f8b589 	.word	0x14f8b589

0800a0e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f2:	b2db      	uxtb	r3, r3
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bc80      	pop	{r7}
 800a0fc:	4770      	bx	lr

0800a0fe <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	bc80      	pop	{r7}
 800a112:	4770      	bx	lr

0800a114 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af02      	add	r7, sp, #8
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	607a      	str	r2, [r7, #4]
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	460b      	mov	r3, r1
 800a122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b08      	cmp	r3, #8
 800a12e:	d006      	beq.n	800a13e <I2C_MasterRequestWrite+0x2a>
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d003      	beq.n	800a13e <I2C_MasterRequestWrite+0x2a>
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a13c:	d108      	bne.n	800a150 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e00b      	b.n	800a168 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a154:	2b12      	cmp	r3, #18
 800a156:	d107      	bne.n	800a168 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a166:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f9cd 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00d      	beq.n	800a19c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a18e:	d103      	bne.n	800a198 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e035      	b.n	800a208 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1a4:	d108      	bne.n	800a1b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1a6:	897b      	ldrh	r3, [r7, #10]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1b4:	611a      	str	r2, [r3, #16]
 800a1b6:	e01b      	b.n	800a1f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a1b8:	897b      	ldrh	r3, [r7, #10]
 800a1ba:	11db      	asrs	r3, r3, #7
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	f003 0306 	and.w	r3, r3, #6
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f063 030f 	orn	r3, r3, #15
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	490e      	ldr	r1, [pc, #56]	; (800a210 <I2C_MasterRequestWrite+0xfc>)
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 fa16 	bl	800a608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e010      	b.n	800a208 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a1e6:	897b      	ldrh	r3, [r7, #10]
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	4907      	ldr	r1, [pc, #28]	; (800a214 <I2C_MasterRequestWrite+0x100>)
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 fa06 	bl	800a608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e000      	b.n	800a208 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	00010008 	.word	0x00010008
 800a214:	00010002 	.word	0x00010002

0800a218 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	4608      	mov	r0, r1
 800a222:	4611      	mov	r1, r2
 800a224:	461a      	mov	r2, r3
 800a226:	4603      	mov	r3, r0
 800a228:	817b      	strh	r3, [r7, #10]
 800a22a:	460b      	mov	r3, r1
 800a22c:	813b      	strh	r3, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a240:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	2200      	movs	r2, #0
 800a24a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 f960 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00d      	beq.n	800a276 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a268:	d103      	bne.n	800a272 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a270:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e05f      	b.n	800a336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a276:	897b      	ldrh	r3, [r7, #10]
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	461a      	mov	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a284:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	6a3a      	ldr	r2, [r7, #32]
 800a28a:	492d      	ldr	r1, [pc, #180]	; (800a340 <I2C_RequestMemoryWrite+0x128>)
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 f9bb 	bl	800a608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e04c      	b.n	800a336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a29c:	2300      	movs	r3, #0
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b4:	6a39      	ldr	r1, [r7, #32]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 fa46 	bl	800a748 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00d      	beq.n	800a2de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	d107      	bne.n	800a2da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e02b      	b.n	800a336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2de:	88fb      	ldrh	r3, [r7, #6]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d105      	bne.n	800a2f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2e4:	893b      	ldrh	r3, [r7, #8]
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	611a      	str	r2, [r3, #16]
 800a2ee:	e021      	b.n	800a334 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2f0:	893b      	ldrh	r3, [r7, #8]
 800a2f2:	0a1b      	lsrs	r3, r3, #8
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a300:	6a39      	ldr	r1, [r7, #32]
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 fa20 	bl	800a748 <I2C_WaitOnTXEFlagUntilTimeout>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00d      	beq.n	800a32a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a312:	2b04      	cmp	r3, #4
 800a314:	d107      	bne.n	800a326 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a324:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e005      	b.n	800a336 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a32a:	893b      	ldrh	r3, [r7, #8]
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	00010002 	.word	0x00010002

0800a344 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af02      	add	r7, sp, #8
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	4608      	mov	r0, r1
 800a34e:	4611      	mov	r1, r2
 800a350:	461a      	mov	r2, r3
 800a352:	4603      	mov	r3, r0
 800a354:	817b      	strh	r3, [r7, #10]
 800a356:	460b      	mov	r3, r1
 800a358:	813b      	strh	r3, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a36c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a37c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	2200      	movs	r2, #0
 800a386:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 f8c2 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00d      	beq.n	800a3b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a4:	d103      	bne.n	800a3ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e0aa      	b.n	800a508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3b2:	897b      	ldrh	r3, [r7, #10]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	6a3a      	ldr	r2, [r7, #32]
 800a3c6:	4952      	ldr	r1, [pc, #328]	; (800a510 <I2C_RequestMemoryRead+0x1cc>)
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 f91d 	bl	800a608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e097      	b.n	800a508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f0:	6a39      	ldr	r1, [r7, #32]
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f9a8 	bl	800a748 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00d      	beq.n	800a41a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a402:	2b04      	cmp	r3, #4
 800a404:	d107      	bne.n	800a416 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a414:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e076      	b.n	800a508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d105      	bne.n	800a42c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a420:	893b      	ldrh	r3, [r7, #8]
 800a422:	b2da      	uxtb	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	611a      	str	r2, [r3, #16]
 800a42a:	e021      	b.n	800a470 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a42c:	893b      	ldrh	r3, [r7, #8]
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	b29b      	uxth	r3, r3
 800a432:	b2da      	uxtb	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a43c:	6a39      	ldr	r1, [r7, #32]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f982 	bl	800a748 <I2C_WaitOnTXEFlagUntilTimeout>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00d      	beq.n	800a466 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	2b04      	cmp	r3, #4
 800a450:	d107      	bne.n	800a462 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a460:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e050      	b.n	800a508 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a466:	893b      	ldrh	r3, [r7, #8]
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a472:	6a39      	ldr	r1, [r7, #32]
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f000 f967 	bl	800a748 <I2C_WaitOnTXEFlagUntilTimeout>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00d      	beq.n	800a49c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	2b04      	cmp	r3, #4
 800a486:	d107      	bne.n	800a498 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a496:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e035      	b.n	800a508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 f82b 	bl	800a514 <I2C_WaitOnFlagUntilTimeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00d      	beq.n	800a4e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d2:	d103      	bne.n	800a4dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e013      	b.n	800a508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a4e0:	897b      	ldrh	r3, [r7, #10]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	6a3a      	ldr	r2, [r7, #32]
 800a4f4:	4906      	ldr	r1, [pc, #24]	; (800a510 <I2C_RequestMemoryRead+0x1cc>)
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 f886 	bl	800a608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e000      	b.n	800a508 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	00010002 	.word	0x00010002

0800a514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	4613      	mov	r3, r2
 800a522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a524:	e048      	b.n	800a5b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a52c:	d044      	beq.n	800a5b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52e:	f7fe f9e3 	bl	80088f8 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d302      	bcc.n	800a544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d139      	bne.n	800a5b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	0c1b      	lsrs	r3, r3, #16
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d10d      	bne.n	800a56a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	43da      	mvns	r2, r3
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	4013      	ands	r3, r2
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bf0c      	ite	eq
 800a560:	2301      	moveq	r3, #1
 800a562:	2300      	movne	r3, #0
 800a564:	b2db      	uxtb	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	e00c      	b.n	800a584 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	43da      	mvns	r2, r3
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	4013      	ands	r3, r2
 800a576:	b29b      	uxth	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bf0c      	ite	eq
 800a57c:	2301      	moveq	r3, #1
 800a57e:	2300      	movne	r3, #0
 800a580:	b2db      	uxtb	r3, r3
 800a582:	461a      	mov	r2, r3
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	429a      	cmp	r2, r3
 800a588:	d116      	bne.n	800a5b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2220      	movs	r2, #32
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	f043 0220 	orr.w	r2, r3, #32
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e023      	b.n	800a600 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	0c1b      	lsrs	r3, r3, #16
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d10d      	bne.n	800a5de <I2C_WaitOnFlagUntilTimeout+0xca>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	43da      	mvns	r2, r3
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	bf0c      	ite	eq
 800a5d4:	2301      	moveq	r3, #1
 800a5d6:	2300      	movne	r3, #0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	461a      	mov	r2, r3
 800a5dc:	e00c      	b.n	800a5f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	43da      	mvns	r2, r3
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bf0c      	ite	eq
 800a5f0:	2301      	moveq	r3, #1
 800a5f2:	2300      	movne	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d093      	beq.n	800a526 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a616:	e071      	b.n	800a6fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a626:	d123      	bne.n	800a670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a636:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2220      	movs	r2, #32
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	f043 0204 	orr.w	r2, r3, #4
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e067      	b.n	800a740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a676:	d041      	beq.n	800a6fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a678:	f7fe f93e 	bl	80088f8 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	429a      	cmp	r2, r3
 800a686:	d302      	bcc.n	800a68e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d136      	bne.n	800a6fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	0c1b      	lsrs	r3, r3, #16
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b01      	cmp	r3, #1
 800a696:	d10c      	bne.n	800a6b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	43da      	mvns	r2, r3
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	bf14      	ite	ne
 800a6aa:	2301      	movne	r3, #1
 800a6ac:	2300      	moveq	r3, #0
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	e00b      	b.n	800a6ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	43da      	mvns	r2, r3
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	4013      	ands	r3, r2
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bf14      	ite	ne
 800a6c4:	2301      	movne	r3, #1
 800a6c6:	2300      	moveq	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d016      	beq.n	800a6fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e8:	f043 0220 	orr.w	r2, r3, #32
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e021      	b.n	800a740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	0c1b      	lsrs	r3, r3, #16
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b01      	cmp	r3, #1
 800a704:	d10c      	bne.n	800a720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	43da      	mvns	r2, r3
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	4013      	ands	r3, r2
 800a712:	b29b      	uxth	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	bf14      	ite	ne
 800a718:	2301      	movne	r3, #1
 800a71a:	2300      	moveq	r3, #0
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	e00b      	b.n	800a738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	43da      	mvns	r2, r3
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	4013      	ands	r3, r2
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bf14      	ite	ne
 800a732:	2301      	movne	r3, #1
 800a734:	2300      	moveq	r3, #0
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f47f af6d 	bne.w	800a618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a754:	e034      	b.n	800a7c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 f8e3 	bl	800a922 <I2C_IsAcknowledgeFailed>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e034      	b.n	800a7d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a76c:	d028      	beq.n	800a7c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76e:	f7fe f8c3 	bl	80088f8 <HAL_GetTick>
 800a772:	4602      	mov	r2, r0
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d302      	bcc.n	800a784 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d11d      	bne.n	800a7c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a78e:	2b80      	cmp	r3, #128	; 0x80
 800a790:	d016      	beq.n	800a7c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	f043 0220 	orr.w	r2, r3, #32
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e007      	b.n	800a7d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ca:	2b80      	cmp	r3, #128	; 0x80
 800a7cc:	d1c3      	bne.n	800a756 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a7e4:	e034      	b.n	800a850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f000 f89b 	bl	800a922 <I2C_IsAcknowledgeFailed>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e034      	b.n	800a860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7fc:	d028      	beq.n	800a850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7fe:	f7fe f87b 	bl	80088f8 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d302      	bcc.n	800a814 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d11d      	bne.n	800a850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	f003 0304 	and.w	r3, r3, #4
 800a81e:	2b04      	cmp	r3, #4
 800a820:	d016      	beq.n	800a850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	f043 0220 	orr.w	r2, r3, #32
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e007      	b.n	800a860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	f003 0304 	and.w	r3, r3, #4
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d1c3      	bne.n	800a7e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a874:	e049      	b.n	800a90a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	f003 0310 	and.w	r3, r3, #16
 800a880:	2b10      	cmp	r3, #16
 800a882:	d119      	bne.n	800a8b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f06f 0210 	mvn.w	r2, #16
 800a88c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2220      	movs	r2, #32
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e030      	b.n	800a91a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8b8:	f7fe f81e 	bl	80088f8 <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d302      	bcc.n	800a8ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d11d      	bne.n	800a90a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d8:	2b40      	cmp	r3, #64	; 0x40
 800a8da:	d016      	beq.n	800a90a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2220      	movs	r2, #32
 800a8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	f043 0220 	orr.w	r2, r3, #32
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e007      	b.n	800a91a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a914:	2b40      	cmp	r3, #64	; 0x40
 800a916:	d1ae      	bne.n	800a876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a938:	d11b      	bne.n	800a972 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a942:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95e:	f043 0204 	orr.w	r2, r3, #4
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e000      	b.n	800a974 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr
	...

0800a980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e272      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 8087 	beq.w	800aaae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9a0:	4b92      	ldr	r3, [pc, #584]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f003 030c 	and.w	r3, r3, #12
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d00c      	beq.n	800a9c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a9ac:	4b8f      	ldr	r3, [pc, #572]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	f003 030c 	and.w	r3, r3, #12
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d112      	bne.n	800a9de <HAL_RCC_OscConfig+0x5e>
 800a9b8:	4b8c      	ldr	r3, [pc, #560]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9c4:	d10b      	bne.n	800a9de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9c6:	4b89      	ldr	r3, [pc, #548]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d06c      	beq.n	800aaac <HAL_RCC_OscConfig+0x12c>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d168      	bne.n	800aaac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e24c      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9e6:	d106      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x76>
 800a9e8:	4b80      	ldr	r3, [pc, #512]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a7f      	ldr	r2, [pc, #508]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800a9ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	e02e      	b.n	800aa54 <HAL_RCC_OscConfig+0xd4>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10c      	bne.n	800aa18 <HAL_RCC_OscConfig+0x98>
 800a9fe:	4b7b      	ldr	r3, [pc, #492]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a7a      	ldr	r2, [pc, #488]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	4b78      	ldr	r3, [pc, #480]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a77      	ldr	r2, [pc, #476]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	e01d      	b.n	800aa54 <HAL_RCC_OscConfig+0xd4>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa20:	d10c      	bne.n	800aa3c <HAL_RCC_OscConfig+0xbc>
 800aa22:	4b72      	ldr	r3, [pc, #456]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a71      	ldr	r2, [pc, #452]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	4b6f      	ldr	r3, [pc, #444]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a6e      	ldr	r2, [pc, #440]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	e00b      	b.n	800aa54 <HAL_RCC_OscConfig+0xd4>
 800aa3c:	4b6b      	ldr	r3, [pc, #428]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a6a      	ldr	r2, [pc, #424]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	4b68      	ldr	r3, [pc, #416]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a67      	ldr	r2, [pc, #412]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d013      	beq.n	800aa84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa5c:	f7fd ff4c 	bl	80088f8 <HAL_GetTick>
 800aa60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa62:	e008      	b.n	800aa76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa64:	f7fd ff48 	bl	80088f8 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	2b64      	cmp	r3, #100	; 0x64
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e200      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa76:	4b5d      	ldr	r3, [pc, #372]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0f0      	beq.n	800aa64 <HAL_RCC_OscConfig+0xe4>
 800aa82:	e014      	b.n	800aaae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa84:	f7fd ff38 	bl	80088f8 <HAL_GetTick>
 800aa88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa8a:	e008      	b.n	800aa9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa8c:	f7fd ff34 	bl	80088f8 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b64      	cmp	r3, #100	; 0x64
 800aa98:	d901      	bls.n	800aa9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e1ec      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa9e:	4b53      	ldr	r3, [pc, #332]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1f0      	bne.n	800aa8c <HAL_RCC_OscConfig+0x10c>
 800aaaa:	e000      	b.n	800aaae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d063      	beq.n	800ab82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aaba:	4b4c      	ldr	r3, [pc, #304]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f003 030c 	and.w	r3, r3, #12
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00b      	beq.n	800aade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aac6:	4b49      	ldr	r3, [pc, #292]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	f003 030c 	and.w	r3, r3, #12
 800aace:	2b08      	cmp	r3, #8
 800aad0:	d11c      	bne.n	800ab0c <HAL_RCC_OscConfig+0x18c>
 800aad2:	4b46      	ldr	r3, [pc, #280]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d116      	bne.n	800ab0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aade:	4b43      	ldr	r3, [pc, #268]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x176>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d001      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e1c0      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aaf6:	4b3d      	ldr	r3, [pc, #244]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	4939      	ldr	r1, [pc, #228]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab0a:	e03a      	b.n	800ab82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d020      	beq.n	800ab56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab14:	4b36      	ldr	r3, [pc, #216]	; (800abf0 <HAL_RCC_OscConfig+0x270>)
 800ab16:	2201      	movs	r2, #1
 800ab18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab1a:	f7fd feed 	bl	80088f8 <HAL_GetTick>
 800ab1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab20:	e008      	b.n	800ab34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab22:	f7fd fee9 	bl	80088f8 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d901      	bls.n	800ab34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e1a1      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab34:	4b2d      	ldr	r3, [pc, #180]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0f0      	beq.n	800ab22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab40:	4b2a      	ldr	r3, [pc, #168]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	4927      	ldr	r1, [pc, #156]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800ab50:	4313      	orrs	r3, r2
 800ab52:	600b      	str	r3, [r1, #0]
 800ab54:	e015      	b.n	800ab82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab56:	4b26      	ldr	r3, [pc, #152]	; (800abf0 <HAL_RCC_OscConfig+0x270>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab5c:	f7fd fecc 	bl	80088f8 <HAL_GetTick>
 800ab60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab62:	e008      	b.n	800ab76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab64:	f7fd fec8 	bl	80088f8 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d901      	bls.n	800ab76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e180      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab76:	4b1d      	ldr	r3, [pc, #116]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1f0      	bne.n	800ab64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0308 	and.w	r3, r3, #8
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d03a      	beq.n	800ac04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d019      	beq.n	800abca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab96:	4b17      	ldr	r3, [pc, #92]	; (800abf4 <HAL_RCC_OscConfig+0x274>)
 800ab98:	2201      	movs	r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab9c:	f7fd feac 	bl	80088f8 <HAL_GetTick>
 800aba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aba2:	e008      	b.n	800abb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aba4:	f7fd fea8 	bl	80088f8 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d901      	bls.n	800abb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e160      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abb6:	4b0d      	ldr	r3, [pc, #52]	; (800abec <HAL_RCC_OscConfig+0x26c>)
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0f0      	beq.n	800aba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800abc2:	2001      	movs	r0, #1
 800abc4:	f000 face 	bl	800b164 <RCC_Delay>
 800abc8:	e01c      	b.n	800ac04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800abca:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <HAL_RCC_OscConfig+0x274>)
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abd0:	f7fd fe92 	bl	80088f8 <HAL_GetTick>
 800abd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800abd6:	e00f      	b.n	800abf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abd8:	f7fd fe8e 	bl	80088f8 <HAL_GetTick>
 800abdc:	4602      	mov	r2, r0
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d908      	bls.n	800abf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e146      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
 800abea:	bf00      	nop
 800abec:	40021000 	.word	0x40021000
 800abf0:	42420000 	.word	0x42420000
 800abf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800abf8:	4b92      	ldr	r3, [pc, #584]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	f003 0302 	and.w	r3, r3, #2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e9      	bne.n	800abd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 80a6 	beq.w	800ad5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac12:	2300      	movs	r3, #0
 800ac14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac16:	4b8b      	ldr	r3, [pc, #556]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10d      	bne.n	800ac3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac22:	4b88      	ldr	r3, [pc, #544]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	4a87      	ldr	r2, [pc, #540]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ac28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac2c:	61d3      	str	r3, [r2, #28]
 800ac2e:	4b85      	ldr	r3, [pc, #532]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ac30:	69db      	ldr	r3, [r3, #28]
 800ac32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac36:	60bb      	str	r3, [r7, #8]
 800ac38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac3e:	4b82      	ldr	r3, [pc, #520]	; (800ae48 <HAL_RCC_OscConfig+0x4c8>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d118      	bne.n	800ac7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ac4a:	4b7f      	ldr	r3, [pc, #508]	; (800ae48 <HAL_RCC_OscConfig+0x4c8>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a7e      	ldr	r2, [pc, #504]	; (800ae48 <HAL_RCC_OscConfig+0x4c8>)
 800ac50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac56:	f7fd fe4f 	bl	80088f8 <HAL_GetTick>
 800ac5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac5c:	e008      	b.n	800ac70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac5e:	f7fd fe4b 	bl	80088f8 <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	2b64      	cmp	r3, #100	; 0x64
 800ac6a:	d901      	bls.n	800ac70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e103      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac70:	4b75      	ldr	r3, [pc, #468]	; (800ae48 <HAL_RCC_OscConfig+0x4c8>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d0f0      	beq.n	800ac5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d106      	bne.n	800ac92 <HAL_RCC_OscConfig+0x312>
 800ac84:	4b6f      	ldr	r3, [pc, #444]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	4a6e      	ldr	r2, [pc, #440]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ac8a:	f043 0301 	orr.w	r3, r3, #1
 800ac8e:	6213      	str	r3, [r2, #32]
 800ac90:	e02d      	b.n	800acee <HAL_RCC_OscConfig+0x36e>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10c      	bne.n	800acb4 <HAL_RCC_OscConfig+0x334>
 800ac9a:	4b6a      	ldr	r3, [pc, #424]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	4a69      	ldr	r2, [pc, #420]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800aca0:	f023 0301 	bic.w	r3, r3, #1
 800aca4:	6213      	str	r3, [r2, #32]
 800aca6:	4b67      	ldr	r3, [pc, #412]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	4a66      	ldr	r2, [pc, #408]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800acac:	f023 0304 	bic.w	r3, r3, #4
 800acb0:	6213      	str	r3, [r2, #32]
 800acb2:	e01c      	b.n	800acee <HAL_RCC_OscConfig+0x36e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	2b05      	cmp	r3, #5
 800acba:	d10c      	bne.n	800acd6 <HAL_RCC_OscConfig+0x356>
 800acbc:	4b61      	ldr	r3, [pc, #388]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800acbe:	6a1b      	ldr	r3, [r3, #32]
 800acc0:	4a60      	ldr	r2, [pc, #384]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800acc2:	f043 0304 	orr.w	r3, r3, #4
 800acc6:	6213      	str	r3, [r2, #32]
 800acc8:	4b5e      	ldr	r3, [pc, #376]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800acca:	6a1b      	ldr	r3, [r3, #32]
 800accc:	4a5d      	ldr	r2, [pc, #372]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800acce:	f043 0301 	orr.w	r3, r3, #1
 800acd2:	6213      	str	r3, [r2, #32]
 800acd4:	e00b      	b.n	800acee <HAL_RCC_OscConfig+0x36e>
 800acd6:	4b5b      	ldr	r3, [pc, #364]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	4a5a      	ldr	r2, [pc, #360]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800acdc:	f023 0301 	bic.w	r3, r3, #1
 800ace0:	6213      	str	r3, [r2, #32]
 800ace2:	4b58      	ldr	r3, [pc, #352]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	4a57      	ldr	r2, [pc, #348]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ace8:	f023 0304 	bic.w	r3, r3, #4
 800acec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d015      	beq.n	800ad22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800acf6:	f7fd fdff 	bl	80088f8 <HAL_GetTick>
 800acfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acfc:	e00a      	b.n	800ad14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acfe:	f7fd fdfb 	bl	80088f8 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d901      	bls.n	800ad14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e0b1      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad14:	4b4b      	ldr	r3, [pc, #300]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0ee      	beq.n	800acfe <HAL_RCC_OscConfig+0x37e>
 800ad20:	e014      	b.n	800ad4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad22:	f7fd fde9 	bl	80088f8 <HAL_GetTick>
 800ad26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad28:	e00a      	b.n	800ad40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad2a:	f7fd fde5 	bl	80088f8 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d901      	bls.n	800ad40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e09b      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad40:	4b40      	ldr	r3, [pc, #256]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1ee      	bne.n	800ad2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d105      	bne.n	800ad5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad52:	4b3c      	ldr	r3, [pc, #240]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	4a3b      	ldr	r2, [pc, #236]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ad58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 8087 	beq.w	800ae76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad68:	4b36      	ldr	r3, [pc, #216]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f003 030c 	and.w	r3, r3, #12
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	d061      	beq.n	800ae38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d146      	bne.n	800ae0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad7c:	4b33      	ldr	r3, [pc, #204]	; (800ae4c <HAL_RCC_OscConfig+0x4cc>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad82:	f7fd fdb9 	bl	80088f8 <HAL_GetTick>
 800ad86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad88:	e008      	b.n	800ad9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad8a:	f7fd fdb5 	bl	80088f8 <HAL_GetTick>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d901      	bls.n	800ad9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	e06d      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad9c:	4b29      	ldr	r3, [pc, #164]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1f0      	bne.n	800ad8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb0:	d108      	bne.n	800adc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800adb2:	4b24      	ldr	r3, [pc, #144]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	4921      	ldr	r1, [pc, #132]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800adc0:	4313      	orrs	r3, r2
 800adc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adc4:	4b1f      	ldr	r3, [pc, #124]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a19      	ldr	r1, [r3, #32]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	430b      	orrs	r3, r1
 800add6:	491b      	ldr	r1, [pc, #108]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800add8:	4313      	orrs	r3, r2
 800adda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800addc:	4b1b      	ldr	r3, [pc, #108]	; (800ae4c <HAL_RCC_OscConfig+0x4cc>)
 800adde:	2201      	movs	r2, #1
 800ade0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ade2:	f7fd fd89 	bl	80088f8 <HAL_GetTick>
 800ade6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ade8:	e008      	b.n	800adfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adea:	f7fd fd85 	bl	80088f8 <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d901      	bls.n	800adfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e03d      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800adfc:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d0f0      	beq.n	800adea <HAL_RCC_OscConfig+0x46a>
 800ae08:	e035      	b.n	800ae76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae0a:	4b10      	ldr	r3, [pc, #64]	; (800ae4c <HAL_RCC_OscConfig+0x4cc>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae10:	f7fd fd72 	bl	80088f8 <HAL_GetTick>
 800ae14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae16:	e008      	b.n	800ae2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae18:	f7fd fd6e 	bl	80088f8 <HAL_GetTick>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d901      	bls.n	800ae2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e026      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae2a:	4b06      	ldr	r3, [pc, #24]	; (800ae44 <HAL_RCC_OscConfig+0x4c4>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1f0      	bne.n	800ae18 <HAL_RCC_OscConfig+0x498>
 800ae36:	e01e      	b.n	800ae76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d107      	bne.n	800ae50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e019      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
 800ae44:	40021000 	.word	0x40021000
 800ae48:	40007000 	.word	0x40007000
 800ae4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ae50:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <HAL_RCC_OscConfig+0x500>)
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d106      	bne.n	800ae72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d001      	beq.n	800ae76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e000      	b.n	800ae78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	40021000 	.word	0x40021000

0800ae84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e0d0      	b.n	800b03a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae98:	4b6a      	ldr	r3, [pc, #424]	; (800b044 <HAL_RCC_ClockConfig+0x1c0>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f003 0307 	and.w	r3, r3, #7
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d910      	bls.n	800aec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aea6:	4b67      	ldr	r3, [pc, #412]	; (800b044 <HAL_RCC_ClockConfig+0x1c0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f023 0207 	bic.w	r2, r3, #7
 800aeae:	4965      	ldr	r1, [pc, #404]	; (800b044 <HAL_RCC_ClockConfig+0x1c0>)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeb6:	4b63      	ldr	r3, [pc, #396]	; (800b044 <HAL_RCC_ClockConfig+0x1c0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0307 	and.w	r3, r3, #7
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d001      	beq.n	800aec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e0b8      	b.n	800b03a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0302 	and.w	r3, r3, #2
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d020      	beq.n	800af16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0304 	and.w	r3, r3, #4
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d005      	beq.n	800aeec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aee0:	4b59      	ldr	r3, [pc, #356]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	4a58      	ldr	r2, [pc, #352]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800aee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aeea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0308 	and.w	r3, r3, #8
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d005      	beq.n	800af04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aef8:	4b53      	ldr	r3, [pc, #332]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	4a52      	ldr	r2, [pc, #328]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800aefe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800af02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af04:	4b50      	ldr	r3, [pc, #320]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	494d      	ldr	r1, [pc, #308]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800af12:	4313      	orrs	r3, r2
 800af14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d040      	beq.n	800afa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d107      	bne.n	800af3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af2a:	4b47      	ldr	r3, [pc, #284]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af32:	2b00      	cmp	r3, #0
 800af34:	d115      	bne.n	800af62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e07f      	b.n	800b03a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d107      	bne.n	800af52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af42:	4b41      	ldr	r3, [pc, #260]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d109      	bne.n	800af62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e073      	b.n	800b03a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af52:	4b3d      	ldr	r3, [pc, #244]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e06b      	b.n	800b03a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af62:	4b39      	ldr	r3, [pc, #228]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	f023 0203 	bic.w	r2, r3, #3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	4936      	ldr	r1, [pc, #216]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800af70:	4313      	orrs	r3, r2
 800af72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800af74:	f7fd fcc0 	bl	80088f8 <HAL_GetTick>
 800af78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af7a:	e00a      	b.n	800af92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af7c:	f7fd fcbc 	bl	80088f8 <HAL_GetTick>
 800af80:	4602      	mov	r2, r0
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	f241 3288 	movw	r2, #5000	; 0x1388
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d901      	bls.n	800af92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e053      	b.n	800b03a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af92:	4b2d      	ldr	r3, [pc, #180]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f003 020c 	and.w	r2, r3, #12
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d1eb      	bne.n	800af7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800afa4:	4b27      	ldr	r3, [pc, #156]	; (800b044 <HAL_RCC_ClockConfig+0x1c0>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0307 	and.w	r3, r3, #7
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d210      	bcs.n	800afd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afb2:	4b24      	ldr	r3, [pc, #144]	; (800b044 <HAL_RCC_ClockConfig+0x1c0>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f023 0207 	bic.w	r2, r3, #7
 800afba:	4922      	ldr	r1, [pc, #136]	; (800b044 <HAL_RCC_ClockConfig+0x1c0>)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afc2:	4b20      	ldr	r3, [pc, #128]	; (800b044 <HAL_RCC_ClockConfig+0x1c0>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0307 	and.w	r3, r3, #7
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d001      	beq.n	800afd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e032      	b.n	800b03a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d008      	beq.n	800aff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800afe0:	4b19      	ldr	r3, [pc, #100]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	4916      	ldr	r1, [pc, #88]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0308 	and.w	r3, r3, #8
 800affa:	2b00      	cmp	r3, #0
 800affc:	d009      	beq.n	800b012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800affe:	4b12      	ldr	r3, [pc, #72]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	00db      	lsls	r3, r3, #3
 800b00c:	490e      	ldr	r1, [pc, #56]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800b00e:	4313      	orrs	r3, r2
 800b010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b012:	f000 f821 	bl	800b058 <HAL_RCC_GetSysClockFreq>
 800b016:	4602      	mov	r2, r0
 800b018:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <HAL_RCC_ClockConfig+0x1c4>)
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	091b      	lsrs	r3, r3, #4
 800b01e:	f003 030f 	and.w	r3, r3, #15
 800b022:	490a      	ldr	r1, [pc, #40]	; (800b04c <HAL_RCC_ClockConfig+0x1c8>)
 800b024:	5ccb      	ldrb	r3, [r1, r3]
 800b026:	fa22 f303 	lsr.w	r3, r2, r3
 800b02a:	4a09      	ldr	r2, [pc, #36]	; (800b050 <HAL_RCC_ClockConfig+0x1cc>)
 800b02c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b02e:	4b09      	ldr	r3, [pc, #36]	; (800b054 <HAL_RCC_ClockConfig+0x1d0>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4618      	mov	r0, r3
 800b034:	f7fd fc1e 	bl	8008874 <HAL_InitTick>

  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	40022000 	.word	0x40022000
 800b048:	40021000 	.word	0x40021000
 800b04c:	0800dea0 	.word	0x0800dea0
 800b050:	200000b4 	.word	0x200000b4
 800b054:	200000b8 	.word	0x200000b8

0800b058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	60fb      	str	r3, [r7, #12]
 800b062:	2300      	movs	r3, #0
 800b064:	60bb      	str	r3, [r7, #8]
 800b066:	2300      	movs	r3, #0
 800b068:	617b      	str	r3, [r7, #20]
 800b06a:	2300      	movs	r3, #0
 800b06c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b072:	4b1e      	ldr	r3, [pc, #120]	; (800b0ec <HAL_RCC_GetSysClockFreq+0x94>)
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f003 030c 	and.w	r3, r3, #12
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d002      	beq.n	800b088 <HAL_RCC_GetSysClockFreq+0x30>
 800b082:	2b08      	cmp	r3, #8
 800b084:	d003      	beq.n	800b08e <HAL_RCC_GetSysClockFreq+0x36>
 800b086:	e027      	b.n	800b0d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b088:	4b19      	ldr	r3, [pc, #100]	; (800b0f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b08a:	613b      	str	r3, [r7, #16]
      break;
 800b08c:	e027      	b.n	800b0de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	0c9b      	lsrs	r3, r3, #18
 800b092:	f003 030f 	and.w	r3, r3, #15
 800b096:	4a17      	ldr	r2, [pc, #92]	; (800b0f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b098:	5cd3      	ldrb	r3, [r2, r3]
 800b09a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d010      	beq.n	800b0c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b0a6:	4b11      	ldr	r3, [pc, #68]	; (800b0ec <HAL_RCC_GetSysClockFreq+0x94>)
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	0c5b      	lsrs	r3, r3, #17
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	4a11      	ldr	r2, [pc, #68]	; (800b0f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b0b2:	5cd3      	ldrb	r3, [r2, r3]
 800b0b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a0d      	ldr	r2, [pc, #52]	; (800b0f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b0ba:	fb03 f202 	mul.w	r2, r3, r2
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c4:	617b      	str	r3, [r7, #20]
 800b0c6:	e004      	b.n	800b0d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a0c      	ldr	r2, [pc, #48]	; (800b0fc <HAL_RCC_GetSysClockFreq+0xa4>)
 800b0cc:	fb02 f303 	mul.w	r3, r2, r3
 800b0d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	613b      	str	r3, [r7, #16]
      break;
 800b0d6:	e002      	b.n	800b0de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b0d8:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800b0da:	613b      	str	r3, [r7, #16]
      break;
 800b0dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b0de:	693b      	ldr	r3, [r7, #16]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	371c      	adds	r7, #28
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bc80      	pop	{r7}
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	40021000 	.word	0x40021000
 800b0f0:	007a1200 	.word	0x007a1200
 800b0f4:	0800deb8 	.word	0x0800deb8
 800b0f8:	0800dec8 	.word	0x0800dec8
 800b0fc:	003d0900 	.word	0x003d0900

0800b100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b100:	b480      	push	{r7}
 800b102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b104:	4b02      	ldr	r3, [pc, #8]	; (800b110 <HAL_RCC_GetHCLKFreq+0x10>)
 800b106:	681b      	ldr	r3, [r3, #0]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bc80      	pop	{r7}
 800b10e:	4770      	bx	lr
 800b110:	200000b4 	.word	0x200000b4

0800b114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b118:	f7ff fff2 	bl	800b100 <HAL_RCC_GetHCLKFreq>
 800b11c:	4602      	mov	r2, r0
 800b11e:	4b05      	ldr	r3, [pc, #20]	; (800b134 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	0a1b      	lsrs	r3, r3, #8
 800b124:	f003 0307 	and.w	r3, r3, #7
 800b128:	4903      	ldr	r1, [pc, #12]	; (800b138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b12a:	5ccb      	ldrb	r3, [r1, r3]
 800b12c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b130:	4618      	mov	r0, r3
 800b132:	bd80      	pop	{r7, pc}
 800b134:	40021000 	.word	0x40021000
 800b138:	0800deb0 	.word	0x0800deb0

0800b13c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b140:	f7ff ffde 	bl	800b100 <HAL_RCC_GetHCLKFreq>
 800b144:	4602      	mov	r2, r0
 800b146:	4b05      	ldr	r3, [pc, #20]	; (800b15c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	0adb      	lsrs	r3, r3, #11
 800b14c:	f003 0307 	and.w	r3, r3, #7
 800b150:	4903      	ldr	r1, [pc, #12]	; (800b160 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b152:	5ccb      	ldrb	r3, [r1, r3]
 800b154:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b158:	4618      	mov	r0, r3
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	40021000 	.word	0x40021000
 800b160:	0800deb0 	.word	0x0800deb0

0800b164 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b16c:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <RCC_Delay+0x34>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a0a      	ldr	r2, [pc, #40]	; (800b19c <RCC_Delay+0x38>)
 800b172:	fba2 2303 	umull	r2, r3, r2, r3
 800b176:	0a5b      	lsrs	r3, r3, #9
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	fb02 f303 	mul.w	r3, r2, r3
 800b17e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b180:	bf00      	nop
  }
  while (Delay --);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	1e5a      	subs	r2, r3, #1
 800b186:	60fa      	str	r2, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1f9      	bne.n	800b180 <RCC_Delay+0x1c>
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	bc80      	pop	{r7}
 800b196:	4770      	bx	lr
 800b198:	200000b4 	.word	0x200000b4
 800b19c:	10624dd3 	.word	0x10624dd3

0800b1a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e041      	b.n	800b236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d106      	bne.n	800b1cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7fd fa26 	bl	8008618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4610      	mov	r0, r2
 800b1e0:	f000 fa82 	bl	800b6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b01      	cmp	r3, #1
 800b252:	d001      	beq.n	800b258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e044      	b.n	800b2e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2202      	movs	r2, #2
 800b25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68da      	ldr	r2, [r3, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f042 0201 	orr.w	r2, r2, #1
 800b26e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a1d      	ldr	r2, [pc, #116]	; (800b2ec <HAL_TIM_Base_Start_IT+0xac>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d018      	beq.n	800b2ac <HAL_TIM_Base_Start_IT+0x6c>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a1c      	ldr	r2, [pc, #112]	; (800b2f0 <HAL_TIM_Base_Start_IT+0xb0>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d013      	beq.n	800b2ac <HAL_TIM_Base_Start_IT+0x6c>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28c:	d00e      	beq.n	800b2ac <HAL_TIM_Base_Start_IT+0x6c>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a18      	ldr	r2, [pc, #96]	; (800b2f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d009      	beq.n	800b2ac <HAL_TIM_Base_Start_IT+0x6c>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a16      	ldr	r2, [pc, #88]	; (800b2f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d004      	beq.n	800b2ac <HAL_TIM_Base_Start_IT+0x6c>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a15      	ldr	r2, [pc, #84]	; (800b2fc <HAL_TIM_Base_Start_IT+0xbc>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d111      	bne.n	800b2d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	f003 0307 	and.w	r3, r3, #7
 800b2b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b06      	cmp	r3, #6
 800b2bc:	d010      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f042 0201 	orr.w	r2, r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ce:	e007      	b.n	800b2e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0201 	orr.w	r2, r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bc80      	pop	{r7}
 800b2ea:	4770      	bx	lr
 800b2ec:	40012c00 	.word	0x40012c00
 800b2f0:	40013400 	.word	0x40013400
 800b2f4:	40000400 	.word	0x40000400
 800b2f8:	40000800 	.word	0x40000800
 800b2fc:	40000c00 	.word	0x40000c00

0800b300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	f003 0302 	and.w	r3, r3, #2
 800b312:	2b02      	cmp	r3, #2
 800b314:	d122      	bne.n	800b35c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b02      	cmp	r3, #2
 800b322:	d11b      	bne.n	800b35c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f06f 0202 	mvn.w	r2, #2
 800b32c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	f003 0303 	and.w	r3, r3, #3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f9b4 	bl	800b6b0 <HAL_TIM_IC_CaptureCallback>
 800b348:	e005      	b.n	800b356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f9a7 	bl	800b69e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f9b6 	bl	800b6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	f003 0304 	and.w	r3, r3, #4
 800b366:	2b04      	cmp	r3, #4
 800b368:	d122      	bne.n	800b3b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b04      	cmp	r3, #4
 800b376:	d11b      	bne.n	800b3b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f06f 0204 	mvn.w	r2, #4
 800b380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2202      	movs	r2, #2
 800b386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f98a 	bl	800b6b0 <HAL_TIM_IC_CaptureCallback>
 800b39c:	e005      	b.n	800b3aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f97d 	bl	800b69e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f98c 	bl	800b6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	f003 0308 	and.w	r3, r3, #8
 800b3ba:	2b08      	cmp	r3, #8
 800b3bc:	d122      	bne.n	800b404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	f003 0308 	and.w	r3, r3, #8
 800b3c8:	2b08      	cmp	r3, #8
 800b3ca:	d11b      	bne.n	800b404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f06f 0208 	mvn.w	r2, #8
 800b3d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2204      	movs	r2, #4
 800b3da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	69db      	ldr	r3, [r3, #28]
 800b3e2:	f003 0303 	and.w	r3, r3, #3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d003      	beq.n	800b3f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f960 	bl	800b6b0 <HAL_TIM_IC_CaptureCallback>
 800b3f0:	e005      	b.n	800b3fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f953 	bl	800b69e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f962 	bl	800b6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	f003 0310 	and.w	r3, r3, #16
 800b40e:	2b10      	cmp	r3, #16
 800b410:	d122      	bne.n	800b458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	f003 0310 	and.w	r3, r3, #16
 800b41c:	2b10      	cmp	r3, #16
 800b41e:	d11b      	bne.n	800b458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f06f 0210 	mvn.w	r2, #16
 800b428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2208      	movs	r2, #8
 800b42e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f936 	bl	800b6b0 <HAL_TIM_IC_CaptureCallback>
 800b444:	e005      	b.n	800b452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f929 	bl	800b69e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f938 	bl	800b6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b01      	cmp	r3, #1
 800b464:	d10e      	bne.n	800b484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	f003 0301 	and.w	r3, r3, #1
 800b470:	2b01      	cmp	r3, #1
 800b472:	d107      	bne.n	800b484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f06f 0201 	mvn.w	r2, #1
 800b47c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7fc fd62 	bl	8007f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48e:	2b80      	cmp	r3, #128	; 0x80
 800b490:	d10e      	bne.n	800b4b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b49c:	2b80      	cmp	r3, #128	; 0x80
 800b49e:	d107      	bne.n	800b4b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 faa1 	bl	800b9f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ba:	2b40      	cmp	r3, #64	; 0x40
 800b4bc:	d10e      	bne.n	800b4dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c8:	2b40      	cmp	r3, #64	; 0x40
 800b4ca:	d107      	bne.n	800b4dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f8fc 	bl	800b6d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	f003 0320 	and.w	r3, r3, #32
 800b4e6:	2b20      	cmp	r3, #32
 800b4e8:	d10e      	bne.n	800b508 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	f003 0320 	and.w	r3, r3, #32
 800b4f4:	2b20      	cmp	r3, #32
 800b4f6:	d107      	bne.n	800b508 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f06f 0220 	mvn.w	r2, #32
 800b500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fa6c 	bl	800b9e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b508:	bf00      	nop
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b524:	2b01      	cmp	r3, #1
 800b526:	d101      	bne.n	800b52c <HAL_TIM_ConfigClockSource+0x1c>
 800b528:	2302      	movs	r3, #2
 800b52a:	e0b4      	b.n	800b696 <HAL_TIM_ConfigClockSource+0x186>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2202      	movs	r2, #2
 800b538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b54a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b564:	d03e      	beq.n	800b5e4 <HAL_TIM_ConfigClockSource+0xd4>
 800b566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b56a:	f200 8087 	bhi.w	800b67c <HAL_TIM_ConfigClockSource+0x16c>
 800b56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b572:	f000 8086 	beq.w	800b682 <HAL_TIM_ConfigClockSource+0x172>
 800b576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b57a:	d87f      	bhi.n	800b67c <HAL_TIM_ConfigClockSource+0x16c>
 800b57c:	2b70      	cmp	r3, #112	; 0x70
 800b57e:	d01a      	beq.n	800b5b6 <HAL_TIM_ConfigClockSource+0xa6>
 800b580:	2b70      	cmp	r3, #112	; 0x70
 800b582:	d87b      	bhi.n	800b67c <HAL_TIM_ConfigClockSource+0x16c>
 800b584:	2b60      	cmp	r3, #96	; 0x60
 800b586:	d050      	beq.n	800b62a <HAL_TIM_ConfigClockSource+0x11a>
 800b588:	2b60      	cmp	r3, #96	; 0x60
 800b58a:	d877      	bhi.n	800b67c <HAL_TIM_ConfigClockSource+0x16c>
 800b58c:	2b50      	cmp	r3, #80	; 0x50
 800b58e:	d03c      	beq.n	800b60a <HAL_TIM_ConfigClockSource+0xfa>
 800b590:	2b50      	cmp	r3, #80	; 0x50
 800b592:	d873      	bhi.n	800b67c <HAL_TIM_ConfigClockSource+0x16c>
 800b594:	2b40      	cmp	r3, #64	; 0x40
 800b596:	d058      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x13a>
 800b598:	2b40      	cmp	r3, #64	; 0x40
 800b59a:	d86f      	bhi.n	800b67c <HAL_TIM_ConfigClockSource+0x16c>
 800b59c:	2b30      	cmp	r3, #48	; 0x30
 800b59e:	d064      	beq.n	800b66a <HAL_TIM_ConfigClockSource+0x15a>
 800b5a0:	2b30      	cmp	r3, #48	; 0x30
 800b5a2:	d86b      	bhi.n	800b67c <HAL_TIM_ConfigClockSource+0x16c>
 800b5a4:	2b20      	cmp	r3, #32
 800b5a6:	d060      	beq.n	800b66a <HAL_TIM_ConfigClockSource+0x15a>
 800b5a8:	2b20      	cmp	r3, #32
 800b5aa:	d867      	bhi.n	800b67c <HAL_TIM_ConfigClockSource+0x16c>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d05c      	beq.n	800b66a <HAL_TIM_ConfigClockSource+0x15a>
 800b5b0:	2b10      	cmp	r3, #16
 800b5b2:	d05a      	beq.n	800b66a <HAL_TIM_ConfigClockSource+0x15a>
 800b5b4:	e062      	b.n	800b67c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b5c6:	f000 f980 	bl	800b8ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	609a      	str	r2, [r3, #8]
      break;
 800b5e2:	e04f      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b5f4:	f000 f969 	bl	800b8ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b606:	609a      	str	r2, [r3, #8]
      break;
 800b608:	e03c      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b616:	461a      	mov	r2, r3
 800b618:	f000 f8e0 	bl	800b7dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2150      	movs	r1, #80	; 0x50
 800b622:	4618      	mov	r0, r3
 800b624:	f000 f937 	bl	800b896 <TIM_ITRx_SetConfig>
      break;
 800b628:	e02c      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b636:	461a      	mov	r2, r3
 800b638:	f000 f8fe 	bl	800b838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2160      	movs	r1, #96	; 0x60
 800b642:	4618      	mov	r0, r3
 800b644:	f000 f927 	bl	800b896 <TIM_ITRx_SetConfig>
      break;
 800b648:	e01c      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b656:	461a      	mov	r2, r3
 800b658:	f000 f8c0 	bl	800b7dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2140      	movs	r1, #64	; 0x40
 800b662:	4618      	mov	r0, r3
 800b664:	f000 f917 	bl	800b896 <TIM_ITRx_SetConfig>
      break;
 800b668:	e00c      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f000 f90e 	bl	800b896 <TIM_ITRx_SetConfig>
      break;
 800b67a:	e003      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	73fb      	strb	r3, [r7, #15]
      break;
 800b680:	e000      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b083      	sub	sp, #12
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bc80      	pop	{r7}
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr

0800b6c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6ca:	bf00      	nop
 800b6cc:	370c      	adds	r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bc80      	pop	{r7}
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bc80      	pop	{r7}
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a33      	ldr	r2, [pc, #204]	; (800b7c8 <TIM_Base_SetConfig+0xe0>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d013      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a32      	ldr	r2, [pc, #200]	; (800b7cc <TIM_Base_SetConfig+0xe4>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d00f      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b70e:	d00b      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a2f      	ldr	r2, [pc, #188]	; (800b7d0 <TIM_Base_SetConfig+0xe8>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d007      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a2e      	ldr	r2, [pc, #184]	; (800b7d4 <TIM_Base_SetConfig+0xec>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d003      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a2d      	ldr	r2, [pc, #180]	; (800b7d8 <TIM_Base_SetConfig+0xf0>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d108      	bne.n	800b73a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b72e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	4313      	orrs	r3, r2
 800b738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a22      	ldr	r2, [pc, #136]	; (800b7c8 <TIM_Base_SetConfig+0xe0>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d013      	beq.n	800b76a <TIM_Base_SetConfig+0x82>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a21      	ldr	r2, [pc, #132]	; (800b7cc <TIM_Base_SetConfig+0xe4>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00f      	beq.n	800b76a <TIM_Base_SetConfig+0x82>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b750:	d00b      	beq.n	800b76a <TIM_Base_SetConfig+0x82>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a1e      	ldr	r2, [pc, #120]	; (800b7d0 <TIM_Base_SetConfig+0xe8>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d007      	beq.n	800b76a <TIM_Base_SetConfig+0x82>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a1d      	ldr	r2, [pc, #116]	; (800b7d4 <TIM_Base_SetConfig+0xec>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d003      	beq.n	800b76a <TIM_Base_SetConfig+0x82>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a1c      	ldr	r2, [pc, #112]	; (800b7d8 <TIM_Base_SetConfig+0xf0>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d108      	bne.n	800b77c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a09      	ldr	r2, [pc, #36]	; (800b7c8 <TIM_Base_SetConfig+0xe0>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d003      	beq.n	800b7b0 <TIM_Base_SetConfig+0xc8>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a08      	ldr	r2, [pc, #32]	; (800b7cc <TIM_Base_SetConfig+0xe4>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d103      	bne.n	800b7b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	691a      	ldr	r2, [r3, #16]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	615a      	str	r2, [r3, #20]
}
 800b7be:	bf00      	nop
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bc80      	pop	{r7}
 800b7c6:	4770      	bx	lr
 800b7c8:	40012c00 	.word	0x40012c00
 800b7cc:	40013400 	.word	0x40013400
 800b7d0:	40000400 	.word	0x40000400
 800b7d4:	40000800 	.word	0x40000800
 800b7d8:	40000c00 	.word	0x40000c00

0800b7dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	f023 0201 	bic.w	r2, r3, #1
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f023 030a 	bic.w	r3, r3, #10
 800b818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	4313      	orrs	r3, r2
 800b820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	621a      	str	r2, [r3, #32]
}
 800b82e:	bf00      	nop
 800b830:	371c      	adds	r7, #28
 800b832:	46bd      	mov	sp, r7
 800b834:	bc80      	pop	{r7}
 800b836:	4770      	bx	lr

0800b838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6a1b      	ldr	r3, [r3, #32]
 800b848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	f023 0210 	bic.w	r2, r3, #16
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	031b      	lsls	r3, r3, #12
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b874:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	011b      	lsls	r3, r3, #4
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	621a      	str	r2, [r3, #32]
}
 800b88c:	bf00      	nop
 800b88e:	371c      	adds	r7, #28
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr

0800b896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b896:	b480      	push	{r7}
 800b898:	b085      	sub	sp, #20
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	f043 0307 	orr.w	r3, r3, #7
 800b8b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	609a      	str	r2, [r3, #8]
}
 800b8c0:	bf00      	nop
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bc80      	pop	{r7}
 800b8c8:	4770      	bx	lr

0800b8ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b087      	sub	sp, #28
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	60f8      	str	r0, [r7, #12]
 800b8d2:	60b9      	str	r1, [r7, #8]
 800b8d4:	607a      	str	r2, [r7, #4]
 800b8d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	021a      	lsls	r2, r3, #8
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	431a      	orrs	r2, r3
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	609a      	str	r2, [r3, #8]
}
 800b8fe:	bf00      	nop
 800b900:	371c      	adds	r7, #28
 800b902:	46bd      	mov	sp, r7
 800b904:	bc80      	pop	{r7}
 800b906:	4770      	bx	lr

0800b908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d101      	bne.n	800b920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b91c:	2302      	movs	r3, #2
 800b91e:	e050      	b.n	800b9c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2202      	movs	r2, #2
 800b92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4313      	orrs	r3, r2
 800b950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a1b      	ldr	r2, [pc, #108]	; (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d018      	beq.n	800b996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a19      	ldr	r2, [pc, #100]	; (800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d013      	beq.n	800b996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b976:	d00e      	beq.n	800b996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a15      	ldr	r2, [pc, #84]	; (800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d009      	beq.n	800b996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a14      	ldr	r2, [pc, #80]	; (800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d004      	beq.n	800b996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a12      	ldr	r2, [pc, #72]	; (800b9dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d10c      	bne.n	800b9b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b99c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bc80      	pop	{r7}
 800b9ca:	4770      	bx	lr
 800b9cc:	40012c00 	.word	0x40012c00
 800b9d0:	40013400 	.word	0x40013400
 800b9d4:	40000400 	.word	0x40000400
 800b9d8:	40000800 	.word	0x40000800
 800b9dc:	40000c00 	.word	0x40000c00

0800b9e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bc80      	pop	{r7}
 800b9f0:	4770      	bx	lr

0800b9f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bc80      	pop	{r7}
 800ba02:	4770      	bx	lr

0800ba04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e042      	b.n	800ba9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d106      	bne.n	800ba30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7fc fe1a 	bl	8008664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2224      	movs	r2, #36	; 0x24
 800ba34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68da      	ldr	r2, [r3, #12]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fcb5 	bl	800c3b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	691a      	ldr	r2, [r3, #16]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	695a      	ldr	r2, [r3, #20]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68da      	ldr	r2, [r3, #12]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	4613      	mov	r3, r2
 800bab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b20      	cmp	r3, #32
 800babc:	d121      	bne.n	800bb02 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <HAL_UART_Transmit_IT+0x26>
 800bac4:	88fb      	ldrh	r3, [r7, #6]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e01a      	b.n	800bb04 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	88fa      	ldrh	r2, [r7, #6]
 800bad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	88fa      	ldrh	r2, [r7, #6]
 800bade:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2221      	movs	r2, #33	; 0x21
 800baea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68da      	ldr	r2, [r3, #12]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bafc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	e000      	b.n	800bb04 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bb02:	2302      	movs	r3, #2
  }
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bc80      	pop	{r7}
 800bb0c:	4770      	bx	lr
	...

0800bb10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b0ba      	sub	sp, #232	; 0xe8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bb36:	2300      	movs	r3, #0
 800bb38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bb42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb46:	f003 030f 	and.w	r3, r3, #15
 800bb4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bb4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10f      	bne.n	800bb76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d009      	beq.n	800bb76 <HAL_UART_IRQHandler+0x66>
 800bb62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb66:	f003 0320 	and.w	r3, r3, #32
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d003      	beq.n	800bb76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fb63 	bl	800c23a <UART_Receive_IT>
      return;
 800bb74:	e25b      	b.n	800c02e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bb76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 80de 	beq.w	800bd3c <HAL_UART_IRQHandler+0x22c>
 800bb80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d106      	bne.n	800bb9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 80d1 	beq.w	800bd3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00b      	beq.n	800bbbe <HAL_UART_IRQHandler+0xae>
 800bba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d005      	beq.n	800bbbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb6:	f043 0201 	orr.w	r2, r3, #1
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc2:	f003 0304 	and.w	r3, r3, #4
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00b      	beq.n	800bbe2 <HAL_UART_IRQHandler+0xd2>
 800bbca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d005      	beq.n	800bbe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbda:	f043 0202 	orr.w	r2, r3, #2
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <HAL_UART_IRQHandler+0xf6>
 800bbee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d005      	beq.n	800bc06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbfe:	f043 0204 	orr.w	r2, r3, #4
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bc06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc0a:	f003 0308 	and.w	r3, r3, #8
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d011      	beq.n	800bc36 <HAL_UART_IRQHandler+0x126>
 800bc12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc16:	f003 0320 	and.w	r3, r3, #32
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d105      	bne.n	800bc2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bc1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d005      	beq.n	800bc36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc2e:	f043 0208 	orr.w	r2, r3, #8
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 81f2 	beq.w	800c024 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc44:	f003 0320 	and.w	r3, r3, #32
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d008      	beq.n	800bc5e <HAL_UART_IRQHandler+0x14e>
 800bc4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc50:	f003 0320 	and.w	r3, r3, #32
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 faee 	bl	800c23a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bf14      	ite	ne
 800bc6c:	2301      	movne	r3, #1
 800bc6e:	2300      	moveq	r3, #0
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7a:	f003 0308 	and.w	r3, r3, #8
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d103      	bne.n	800bc8a <HAL_UART_IRQHandler+0x17a>
 800bc82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d04f      	beq.n	800bd2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f9f8 	bl	800c080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d041      	beq.n	800bd22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3314      	adds	r3, #20
 800bca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcac:	e853 3f00 	ldrex	r3, [r3]
 800bcb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bcb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bcb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bcca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bcd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1d9      	bne.n	800bc9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d013      	beq.n	800bd1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf6:	4a7e      	ldr	r2, [pc, #504]	; (800bef0 <HAL_UART_IRQHandler+0x3e0>)
 800bcf8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fd f86c 	bl	8008ddc <HAL_DMA_Abort_IT>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d016      	beq.n	800bd38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bd14:	4610      	mov	r0, r2
 800bd16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd18:	e00e      	b.n	800bd38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f99c 	bl	800c058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd20:	e00a      	b.n	800bd38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f998 	bl	800c058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd28:	e006      	b.n	800bd38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f994 	bl	800c058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bd36:	e175      	b.n	800c024 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd38:	bf00      	nop
    return;
 800bd3a:	e173      	b.n	800c024 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	f040 814f 	bne.w	800bfe4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bd46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd4a:	f003 0310 	and.w	r3, r3, #16
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 8148 	beq.w	800bfe4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bd54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd58:	f003 0310 	and.w	r3, r3, #16
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8141 	beq.w	800bfe4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd62:	2300      	movs	r3, #0
 800bd64:	60bb      	str	r3, [r7, #8]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	60bb      	str	r3, [r7, #8]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	60bb      	str	r3, [r7, #8]
 800bd76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 80b6 	beq.w	800bef4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 8145 	beq.w	800c028 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bda2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bda6:	429a      	cmp	r2, r3
 800bda8:	f080 813e 	bcs.w	800c028 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	2b20      	cmp	r3, #32
 800bdbc:	f000 8088 	beq.w	800bed0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	330c      	adds	r3, #12
 800bdc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bdd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	330c      	adds	r3, #12
 800bde8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bdec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bdf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bdf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bdfc:	e841 2300 	strex	r3, r2, [r1]
 800be00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1d9      	bne.n	800bdc0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3314      	adds	r3, #20
 800be12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be1e:	f023 0301 	bic.w	r3, r3, #1
 800be22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3314      	adds	r3, #20
 800be2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be3c:	e841 2300 	strex	r3, r2, [r1]
 800be40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1e1      	bne.n	800be0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3314      	adds	r3, #20
 800be4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be52:	e853 3f00 	ldrex	r3, [r3]
 800be56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3314      	adds	r3, #20
 800be68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e3      	bne.n	800be48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	330c      	adds	r3, #12
 800be94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be98:	e853 3f00 	ldrex	r3, [r3]
 800be9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea0:	f023 0310 	bic.w	r3, r3, #16
 800bea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	330c      	adds	r3, #12
 800beae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800beb2:	65ba      	str	r2, [r7, #88]	; 0x58
 800beb4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800beb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beba:	e841 2300 	strex	r3, r2, [r1]
 800bebe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1e3      	bne.n	800be8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beca:	4618      	mov	r0, r3
 800becc:	f7fc ff4b 	bl	8008d66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2202      	movs	r2, #2
 800bed4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bede:	b29b      	uxth	r3, r3
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	4619      	mov	r1, r3
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f8bf 	bl	800c06a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800beec:	e09c      	b.n	800c028 <HAL_UART_IRQHandler+0x518>
 800beee:	bf00      	nop
 800bef0:	0800c145 	.word	0x0800c145
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800befc:	b29b      	uxth	r3, r3
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 808e 	beq.w	800c02c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bf10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f000 8089 	beq.w	800c02c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	330c      	adds	r3, #12
 800bf20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf24:	e853 3f00 	ldrex	r3, [r3]
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	330c      	adds	r3, #12
 800bf3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bf3e:	647a      	str	r2, [r7, #68]	; 0x44
 800bf40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf46:	e841 2300 	strex	r3, r2, [r1]
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e3      	bne.n	800bf1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3314      	adds	r3, #20
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	e853 3f00 	ldrex	r3, [r3]
 800bf60:	623b      	str	r3, [r7, #32]
   return(result);
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	f023 0301 	bic.w	r3, r3, #1
 800bf68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3314      	adds	r3, #20
 800bf72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf76:	633a      	str	r2, [r7, #48]	; 0x30
 800bf78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf7e:	e841 2300 	strex	r3, r2, [r1]
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e3      	bne.n	800bf52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	e853 3f00 	ldrex	r3, [r3]
 800bfa6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f023 0310 	bic.w	r3, r3, #16
 800bfae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	330c      	adds	r3, #12
 800bfb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bfbc:	61fa      	str	r2, [r7, #28]
 800bfbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc0:	69b9      	ldr	r1, [r7, #24]
 800bfc2:	69fa      	ldr	r2, [r7, #28]
 800bfc4:	e841 2300 	strex	r3, r2, [r1]
 800bfc8:	617b      	str	r3, [r7, #20]
   return(result);
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e3      	bne.n	800bf98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f844 	bl	800c06a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfe2:	e023      	b.n	800c02c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bfe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d009      	beq.n	800c004 <HAL_UART_IRQHandler+0x4f4>
 800bff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f8b5 	bl	800c16c <UART_Transmit_IT>
    return;
 800c002:	e014      	b.n	800c02e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00e      	beq.n	800c02e <HAL_UART_IRQHandler+0x51e>
 800c010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d008      	beq.n	800c02e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f8f4 	bl	800c20a <UART_EndTransmit_IT>
    return;
 800c022:	e004      	b.n	800c02e <HAL_UART_IRQHandler+0x51e>
    return;
 800c024:	bf00      	nop
 800c026:	e002      	b.n	800c02e <HAL_UART_IRQHandler+0x51e>
      return;
 800c028:	bf00      	nop
 800c02a:	e000      	b.n	800c02e <HAL_UART_IRQHandler+0x51e>
      return;
 800c02c:	bf00      	nop
  }
}
 800c02e:	37e8      	adds	r7, #232	; 0xe8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	bc80      	pop	{r7}
 800c044:	4770      	bx	lr

0800c046 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c046:	b480      	push	{r7}
 800c048:	b083      	sub	sp, #12
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c04e:	bf00      	nop
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	bc80      	pop	{r7}
 800c056:	4770      	bx	lr

0800c058 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c060:	bf00      	nop
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	bc80      	pop	{r7}
 800c068:	4770      	bx	lr

0800c06a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b083      	sub	sp, #12
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	460b      	mov	r3, r1
 800c074:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bc80      	pop	{r7}
 800c07e:	4770      	bx	lr

0800c080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c080:	b480      	push	{r7}
 800c082:	b095      	sub	sp, #84	; 0x54
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	330c      	adds	r3, #12
 800c08e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	e853 3f00 	ldrex	r3, [r3]
 800c096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c09e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	330c      	adds	r3, #12
 800c0a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0a8:	643a      	str	r2, [r7, #64]	; 0x40
 800c0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0b0:	e841 2300 	strex	r3, r2, [r1]
 800c0b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1e5      	bne.n	800c088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3314      	adds	r3, #20
 800c0c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	e853 3f00 	ldrex	r3, [r3]
 800c0ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	f023 0301 	bic.w	r3, r3, #1
 800c0d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	3314      	adds	r3, #20
 800c0da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0e4:	e841 2300 	strex	r3, r2, [r1]
 800c0e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1e5      	bne.n	800c0bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d119      	bne.n	800c12c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	330c      	adds	r3, #12
 800c0fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	e853 3f00 	ldrex	r3, [r3]
 800c106:	60bb      	str	r3, [r7, #8]
   return(result);
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	f023 0310 	bic.w	r3, r3, #16
 800c10e:	647b      	str	r3, [r7, #68]	; 0x44
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	330c      	adds	r3, #12
 800c116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c118:	61ba      	str	r2, [r7, #24]
 800c11a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11c:	6979      	ldr	r1, [r7, #20]
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	e841 2300 	strex	r3, r2, [r1]
 800c124:	613b      	str	r3, [r7, #16]
   return(result);
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1e5      	bne.n	800c0f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2220      	movs	r2, #32
 800c130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c13a:	bf00      	nop
 800c13c:	3754      	adds	r7, #84	; 0x54
 800c13e:	46bd      	mov	sp, r7
 800c140:	bc80      	pop	{r7}
 800c142:	4770      	bx	lr

0800c144 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f7ff ff7a 	bl	800c058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c164:	bf00      	nop
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	2b21      	cmp	r3, #33	; 0x21
 800c17e:	d13e      	bne.n	800c1fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c188:	d114      	bne.n	800c1b4 <UART_Transmit_IT+0x48>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d110      	bne.n	800c1b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a1b      	ldr	r3, [r3, #32]
 800c196:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	461a      	mov	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a1b      	ldr	r3, [r3, #32]
 800c1ac:	1c9a      	adds	r2, r3, #2
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	621a      	str	r2, [r3, #32]
 800c1b2:	e008      	b.n	800c1c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	1c59      	adds	r1, r3, #1
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	6211      	str	r1, [r2, #32]
 800c1be:	781a      	ldrb	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10f      	bne.n	800c1fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68da      	ldr	r2, [r3, #12]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68da      	ldr	r2, [r3, #12]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e000      	b.n	800c200 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c1fe:	2302      	movs	r3, #2
  }
}
 800c200:	4618      	mov	r0, r3
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	bc80      	pop	{r7}
 800c208:	4770      	bx	lr

0800c20a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b082      	sub	sp, #8
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68da      	ldr	r2, [r3, #12]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2220      	movs	r2, #32
 800c226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff ff02 	bl	800c034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b08c      	sub	sp, #48	; 0x30
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b22      	cmp	r3, #34	; 0x22
 800c24c:	f040 80ae 	bne.w	800c3ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c258:	d117      	bne.n	800c28a <UART_Receive_IT+0x50>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d113      	bne.n	800c28a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	b29b      	uxth	r3, r3
 800c274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c278:	b29a      	uxth	r2, r3
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c282:	1c9a      	adds	r2, r3, #2
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	629a      	str	r2, [r3, #40]	; 0x28
 800c288:	e026      	b.n	800c2d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c290:	2300      	movs	r3, #0
 800c292:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c29c:	d007      	beq.n	800c2ae <UART_Receive_IT+0x74>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10a      	bne.n	800c2bc <UART_Receive_IT+0x82>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d106      	bne.n	800c2bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	b2da      	uxtb	r2, r3
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b8:	701a      	strb	r2, [r3, #0]
 800c2ba:	e008      	b.n	800c2ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d2:	1c5a      	adds	r2, r3, #1
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d15d      	bne.n	800c3a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68da      	ldr	r2, [r3, #12]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f022 0220 	bic.w	r2, r2, #32
 800c2fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c30a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	695a      	ldr	r2, [r3, #20]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f022 0201 	bic.w	r2, r2, #1
 800c31a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2220      	movs	r2, #32
 800c320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d135      	bne.n	800c39e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	330c      	adds	r3, #12
 800c33e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	e853 3f00 	ldrex	r3, [r3]
 800c346:	613b      	str	r3, [r7, #16]
   return(result);
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	f023 0310 	bic.w	r3, r3, #16
 800c34e:	627b      	str	r3, [r7, #36]	; 0x24
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	330c      	adds	r3, #12
 800c356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c358:	623a      	str	r2, [r7, #32]
 800c35a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	69f9      	ldr	r1, [r7, #28]
 800c35e:	6a3a      	ldr	r2, [r7, #32]
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	61bb      	str	r3, [r7, #24]
   return(result);
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e5      	bne.n	800c338 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 0310 	and.w	r3, r3, #16
 800c376:	2b10      	cmp	r3, #16
 800c378:	d10a      	bne.n	800c390 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c37a:	2300      	movs	r3, #0
 800c37c:	60fb      	str	r3, [r7, #12]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	60fb      	str	r3, [r7, #12]
 800c38e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c394:	4619      	mov	r1, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7ff fe67 	bl	800c06a <HAL_UARTEx_RxEventCallback>
 800c39c:	e002      	b.n	800c3a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7ff fe51 	bl	800c046 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e002      	b.n	800c3ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e000      	b.n	800c3ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c3ac:	2302      	movs	r3, #2
  }
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3730      	adds	r7, #48	; 0x30
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	431a      	orrs	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	695b      	ldr	r3, [r3, #20]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c3f2:	f023 030c 	bic.w	r3, r3, #12
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	68b9      	ldr	r1, [r7, #8]
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	699a      	ldr	r2, [r3, #24]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a2c      	ldr	r2, [pc, #176]	; (800c4cc <UART_SetConfig+0x114>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d103      	bne.n	800c428 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c420:	f7fe fe8c 	bl	800b13c <HAL_RCC_GetPCLK2Freq>
 800c424:	60f8      	str	r0, [r7, #12]
 800c426:	e002      	b.n	800c42e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c428:	f7fe fe74 	bl	800b114 <HAL_RCC_GetPCLK1Freq>
 800c42c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	4613      	mov	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	4413      	add	r3, r2
 800c436:	009a      	lsls	r2, r3, #2
 800c438:	441a      	add	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	fbb2 f3f3 	udiv	r3, r2, r3
 800c444:	4a22      	ldr	r2, [pc, #136]	; (800c4d0 <UART_SetConfig+0x118>)
 800c446:	fba2 2303 	umull	r2, r3, r2, r3
 800c44a:	095b      	lsrs	r3, r3, #5
 800c44c:	0119      	lsls	r1, r3, #4
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	4613      	mov	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	009a      	lsls	r2, r3, #2
 800c458:	441a      	add	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	fbb2 f2f3 	udiv	r2, r2, r3
 800c464:	4b1a      	ldr	r3, [pc, #104]	; (800c4d0 <UART_SetConfig+0x118>)
 800c466:	fba3 0302 	umull	r0, r3, r3, r2
 800c46a:	095b      	lsrs	r3, r3, #5
 800c46c:	2064      	movs	r0, #100	; 0x64
 800c46e:	fb00 f303 	mul.w	r3, r0, r3
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	011b      	lsls	r3, r3, #4
 800c476:	3332      	adds	r3, #50	; 0x32
 800c478:	4a15      	ldr	r2, [pc, #84]	; (800c4d0 <UART_SetConfig+0x118>)
 800c47a:	fba2 2303 	umull	r2, r3, r2, r3
 800c47e:	095b      	lsrs	r3, r3, #5
 800c480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c484:	4419      	add	r1, r3
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	4613      	mov	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	009a      	lsls	r2, r3, #2
 800c490:	441a      	add	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	fbb2 f2f3 	udiv	r2, r2, r3
 800c49c:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <UART_SetConfig+0x118>)
 800c49e:	fba3 0302 	umull	r0, r3, r3, r2
 800c4a2:	095b      	lsrs	r3, r3, #5
 800c4a4:	2064      	movs	r0, #100	; 0x64
 800c4a6:	fb00 f303 	mul.w	r3, r0, r3
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	011b      	lsls	r3, r3, #4
 800c4ae:	3332      	adds	r3, #50	; 0x32
 800c4b0:	4a07      	ldr	r2, [pc, #28]	; (800c4d0 <UART_SetConfig+0x118>)
 800c4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b6:	095b      	lsrs	r3, r3, #5
 800c4b8:	f003 020f 	and.w	r2, r3, #15
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	440a      	add	r2, r1
 800c4c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c4c4:	bf00      	nop
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	40013800 	.word	0x40013800
 800c4d0:	51eb851f 	.word	0x51eb851f

0800c4d4 <__itoa>:
 800c4d4:	1e93      	subs	r3, r2, #2
 800c4d6:	2b22      	cmp	r3, #34	; 0x22
 800c4d8:	b510      	push	{r4, lr}
 800c4da:	460c      	mov	r4, r1
 800c4dc:	d904      	bls.n	800c4e8 <__itoa+0x14>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	461c      	mov	r4, r3
 800c4e2:	700b      	strb	r3, [r1, #0]
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	bd10      	pop	{r4, pc}
 800c4e8:	2a0a      	cmp	r2, #10
 800c4ea:	d109      	bne.n	800c500 <__itoa+0x2c>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	da07      	bge.n	800c500 <__itoa+0x2c>
 800c4f0:	232d      	movs	r3, #45	; 0x2d
 800c4f2:	700b      	strb	r3, [r1, #0]
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	4240      	negs	r0, r0
 800c4f8:	4421      	add	r1, r4
 800c4fa:	f000 f8d9 	bl	800c6b0 <__utoa>
 800c4fe:	e7f1      	b.n	800c4e4 <__itoa+0x10>
 800c500:	2100      	movs	r1, #0
 800c502:	e7f9      	b.n	800c4f8 <__itoa+0x24>

0800c504 <itoa>:
 800c504:	f7ff bfe6 	b.w	800c4d4 <__itoa>

0800c508 <malloc>:
 800c508:	4b02      	ldr	r3, [pc, #8]	; (800c514 <malloc+0xc>)
 800c50a:	4601      	mov	r1, r0
 800c50c:	6818      	ldr	r0, [r3, #0]
 800c50e:	f000 b823 	b.w	800c558 <_malloc_r>
 800c512:	bf00      	nop
 800c514:	2000010c 	.word	0x2000010c

0800c518 <sbrk_aligned>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	4e0e      	ldr	r6, [pc, #56]	; (800c554 <sbrk_aligned+0x3c>)
 800c51c:	460c      	mov	r4, r1
 800c51e:	6831      	ldr	r1, [r6, #0]
 800c520:	4605      	mov	r5, r0
 800c522:	b911      	cbnz	r1, 800c52a <sbrk_aligned+0x12>
 800c524:	f000 f91e 	bl	800c764 <_sbrk_r>
 800c528:	6030      	str	r0, [r6, #0]
 800c52a:	4621      	mov	r1, r4
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 f919 	bl	800c764 <_sbrk_r>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d00a      	beq.n	800c54c <sbrk_aligned+0x34>
 800c536:	1cc4      	adds	r4, r0, #3
 800c538:	f024 0403 	bic.w	r4, r4, #3
 800c53c:	42a0      	cmp	r0, r4
 800c53e:	d007      	beq.n	800c550 <sbrk_aligned+0x38>
 800c540:	1a21      	subs	r1, r4, r0
 800c542:	4628      	mov	r0, r5
 800c544:	f000 f90e 	bl	800c764 <_sbrk_r>
 800c548:	3001      	adds	r0, #1
 800c54a:	d101      	bne.n	800c550 <sbrk_aligned+0x38>
 800c54c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c550:	4620      	mov	r0, r4
 800c552:	bd70      	pop	{r4, r5, r6, pc}
 800c554:	200004ac 	.word	0x200004ac

0800c558 <_malloc_r>:
 800c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c55c:	1ccd      	adds	r5, r1, #3
 800c55e:	f025 0503 	bic.w	r5, r5, #3
 800c562:	3508      	adds	r5, #8
 800c564:	2d0c      	cmp	r5, #12
 800c566:	bf38      	it	cc
 800c568:	250c      	movcc	r5, #12
 800c56a:	2d00      	cmp	r5, #0
 800c56c:	4607      	mov	r7, r0
 800c56e:	db01      	blt.n	800c574 <_malloc_r+0x1c>
 800c570:	42a9      	cmp	r1, r5
 800c572:	d905      	bls.n	800c580 <_malloc_r+0x28>
 800c574:	230c      	movs	r3, #12
 800c576:	2600      	movs	r6, #0
 800c578:	603b      	str	r3, [r7, #0]
 800c57a:	4630      	mov	r0, r6
 800c57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c580:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c654 <_malloc_r+0xfc>
 800c584:	f000 f868 	bl	800c658 <__malloc_lock>
 800c588:	f8d8 3000 	ldr.w	r3, [r8]
 800c58c:	461c      	mov	r4, r3
 800c58e:	bb5c      	cbnz	r4, 800c5e8 <_malloc_r+0x90>
 800c590:	4629      	mov	r1, r5
 800c592:	4638      	mov	r0, r7
 800c594:	f7ff ffc0 	bl	800c518 <sbrk_aligned>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	4604      	mov	r4, r0
 800c59c:	d155      	bne.n	800c64a <_malloc_r+0xf2>
 800c59e:	f8d8 4000 	ldr.w	r4, [r8]
 800c5a2:	4626      	mov	r6, r4
 800c5a4:	2e00      	cmp	r6, #0
 800c5a6:	d145      	bne.n	800c634 <_malloc_r+0xdc>
 800c5a8:	2c00      	cmp	r4, #0
 800c5aa:	d048      	beq.n	800c63e <_malloc_r+0xe6>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	4631      	mov	r1, r6
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	eb04 0903 	add.w	r9, r4, r3
 800c5b6:	f000 f8d5 	bl	800c764 <_sbrk_r>
 800c5ba:	4581      	cmp	r9, r0
 800c5bc:	d13f      	bne.n	800c63e <_malloc_r+0xe6>
 800c5be:	6821      	ldr	r1, [r4, #0]
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	1a6d      	subs	r5, r5, r1
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	f7ff ffa7 	bl	800c518 <sbrk_aligned>
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	d037      	beq.n	800c63e <_malloc_r+0xe6>
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	442b      	add	r3, r5
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d038      	beq.n	800c64e <_malloc_r+0xf6>
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	42a2      	cmp	r2, r4
 800c5e0:	d12b      	bne.n	800c63a <_malloc_r+0xe2>
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	605a      	str	r2, [r3, #4]
 800c5e6:	e00f      	b.n	800c608 <_malloc_r+0xb0>
 800c5e8:	6822      	ldr	r2, [r4, #0]
 800c5ea:	1b52      	subs	r2, r2, r5
 800c5ec:	d41f      	bmi.n	800c62e <_malloc_r+0xd6>
 800c5ee:	2a0b      	cmp	r2, #11
 800c5f0:	d917      	bls.n	800c622 <_malloc_r+0xca>
 800c5f2:	1961      	adds	r1, r4, r5
 800c5f4:	42a3      	cmp	r3, r4
 800c5f6:	6025      	str	r5, [r4, #0]
 800c5f8:	bf18      	it	ne
 800c5fa:	6059      	strne	r1, [r3, #4]
 800c5fc:	6863      	ldr	r3, [r4, #4]
 800c5fe:	bf08      	it	eq
 800c600:	f8c8 1000 	streq.w	r1, [r8]
 800c604:	5162      	str	r2, [r4, r5]
 800c606:	604b      	str	r3, [r1, #4]
 800c608:	4638      	mov	r0, r7
 800c60a:	f104 060b 	add.w	r6, r4, #11
 800c60e:	f000 f829 	bl	800c664 <__malloc_unlock>
 800c612:	f026 0607 	bic.w	r6, r6, #7
 800c616:	1d23      	adds	r3, r4, #4
 800c618:	1af2      	subs	r2, r6, r3
 800c61a:	d0ae      	beq.n	800c57a <_malloc_r+0x22>
 800c61c:	1b9b      	subs	r3, r3, r6
 800c61e:	50a3      	str	r3, [r4, r2]
 800c620:	e7ab      	b.n	800c57a <_malloc_r+0x22>
 800c622:	42a3      	cmp	r3, r4
 800c624:	6862      	ldr	r2, [r4, #4]
 800c626:	d1dd      	bne.n	800c5e4 <_malloc_r+0x8c>
 800c628:	f8c8 2000 	str.w	r2, [r8]
 800c62c:	e7ec      	b.n	800c608 <_malloc_r+0xb0>
 800c62e:	4623      	mov	r3, r4
 800c630:	6864      	ldr	r4, [r4, #4]
 800c632:	e7ac      	b.n	800c58e <_malloc_r+0x36>
 800c634:	4634      	mov	r4, r6
 800c636:	6876      	ldr	r6, [r6, #4]
 800c638:	e7b4      	b.n	800c5a4 <_malloc_r+0x4c>
 800c63a:	4613      	mov	r3, r2
 800c63c:	e7cc      	b.n	800c5d8 <_malloc_r+0x80>
 800c63e:	230c      	movs	r3, #12
 800c640:	4638      	mov	r0, r7
 800c642:	603b      	str	r3, [r7, #0]
 800c644:	f000 f80e 	bl	800c664 <__malloc_unlock>
 800c648:	e797      	b.n	800c57a <_malloc_r+0x22>
 800c64a:	6025      	str	r5, [r4, #0]
 800c64c:	e7dc      	b.n	800c608 <_malloc_r+0xb0>
 800c64e:	605b      	str	r3, [r3, #4]
 800c650:	deff      	udf	#255	; 0xff
 800c652:	bf00      	nop
 800c654:	200004a8 	.word	0x200004a8

0800c658 <__malloc_lock>:
 800c658:	4801      	ldr	r0, [pc, #4]	; (800c660 <__malloc_lock+0x8>)
 800c65a:	f000 b8bd 	b.w	800c7d8 <__retarget_lock_acquire_recursive>
 800c65e:	bf00      	nop
 800c660:	200005e8 	.word	0x200005e8

0800c664 <__malloc_unlock>:
 800c664:	4801      	ldr	r0, [pc, #4]	; (800c66c <__malloc_unlock+0x8>)
 800c666:	f000 b8b8 	b.w	800c7da <__retarget_lock_release_recursive>
 800c66a:	bf00      	nop
 800c66c:	200005e8 	.word	0x200005e8

0800c670 <siprintf>:
 800c670:	b40e      	push	{r1, r2, r3}
 800c672:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c676:	b500      	push	{lr}
 800c678:	b09c      	sub	sp, #112	; 0x70
 800c67a:	ab1d      	add	r3, sp, #116	; 0x74
 800c67c:	9002      	str	r0, [sp, #8]
 800c67e:	9006      	str	r0, [sp, #24]
 800c680:	9107      	str	r1, [sp, #28]
 800c682:	9104      	str	r1, [sp, #16]
 800c684:	4808      	ldr	r0, [pc, #32]	; (800c6a8 <siprintf+0x38>)
 800c686:	4909      	ldr	r1, [pc, #36]	; (800c6ac <siprintf+0x3c>)
 800c688:	f853 2b04 	ldr.w	r2, [r3], #4
 800c68c:	9105      	str	r1, [sp, #20]
 800c68e:	6800      	ldr	r0, [r0, #0]
 800c690:	a902      	add	r1, sp, #8
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	f000 f94c 	bl	800c930 <_svfiprintf_r>
 800c698:	2200      	movs	r2, #0
 800c69a:	9b02      	ldr	r3, [sp, #8]
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	b01c      	add	sp, #112	; 0x70
 800c6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a4:	b003      	add	sp, #12
 800c6a6:	4770      	bx	lr
 800c6a8:	2000010c 	.word	0x2000010c
 800c6ac:	ffff0208 	.word	0xffff0208

0800c6b0 <__utoa>:
 800c6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6b2:	b08b      	sub	sp, #44	; 0x2c
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	466e      	mov	r6, sp
 800c6ba:	4c1d      	ldr	r4, [pc, #116]	; (800c730 <__utoa+0x80>)
 800c6bc:	f104 0c20 	add.w	ip, r4, #32
 800c6c0:	4637      	mov	r7, r6
 800c6c2:	6820      	ldr	r0, [r4, #0]
 800c6c4:	6861      	ldr	r1, [r4, #4]
 800c6c6:	3408      	adds	r4, #8
 800c6c8:	c703      	stmia	r7!, {r0, r1}
 800c6ca:	4564      	cmp	r4, ip
 800c6cc:	463e      	mov	r6, r7
 800c6ce:	d1f7      	bne.n	800c6c0 <__utoa+0x10>
 800c6d0:	7921      	ldrb	r1, [r4, #4]
 800c6d2:	6820      	ldr	r0, [r4, #0]
 800c6d4:	7139      	strb	r1, [r7, #4]
 800c6d6:	1e91      	subs	r1, r2, #2
 800c6d8:	2922      	cmp	r1, #34	; 0x22
 800c6da:	6038      	str	r0, [r7, #0]
 800c6dc:	f04f 0100 	mov.w	r1, #0
 800c6e0:	d904      	bls.n	800c6ec <__utoa+0x3c>
 800c6e2:	7019      	strb	r1, [r3, #0]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	b00b      	add	sp, #44	; 0x2c
 800c6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ec:	1e58      	subs	r0, r3, #1
 800c6ee:	4684      	mov	ip, r0
 800c6f0:	fbb5 f7f2 	udiv	r7, r5, r2
 800c6f4:	fb02 5617 	mls	r6, r2, r7, r5
 800c6f8:	3628      	adds	r6, #40	; 0x28
 800c6fa:	446e      	add	r6, sp
 800c6fc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c700:	460c      	mov	r4, r1
 800c702:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c706:	462e      	mov	r6, r5
 800c708:	42b2      	cmp	r2, r6
 800c70a:	463d      	mov	r5, r7
 800c70c:	f101 0101 	add.w	r1, r1, #1
 800c710:	d9ee      	bls.n	800c6f0 <__utoa+0x40>
 800c712:	2200      	movs	r2, #0
 800c714:	545a      	strb	r2, [r3, r1]
 800c716:	1919      	adds	r1, r3, r4
 800c718:	1aa5      	subs	r5, r4, r2
 800c71a:	42aa      	cmp	r2, r5
 800c71c:	dae3      	bge.n	800c6e6 <__utoa+0x36>
 800c71e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c722:	780e      	ldrb	r6, [r1, #0]
 800c724:	3201      	adds	r2, #1
 800c726:	7006      	strb	r6, [r0, #0]
 800c728:	f801 5901 	strb.w	r5, [r1], #-1
 800c72c:	e7f4      	b.n	800c718 <__utoa+0x68>
 800c72e:	bf00      	nop
 800c730:	0800deca 	.word	0x0800deca

0800c734 <strcat>:
 800c734:	4602      	mov	r2, r0
 800c736:	b510      	push	{r4, lr}
 800c738:	7814      	ldrb	r4, [r2, #0]
 800c73a:	4613      	mov	r3, r2
 800c73c:	3201      	adds	r2, #1
 800c73e:	2c00      	cmp	r4, #0
 800c740:	d1fa      	bne.n	800c738 <strcat+0x4>
 800c742:	3b01      	subs	r3, #1
 800c744:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c748:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c74c:	2a00      	cmp	r2, #0
 800c74e:	d1f9      	bne.n	800c744 <strcat+0x10>
 800c750:	bd10      	pop	{r4, pc}

0800c752 <memset>:
 800c752:	4603      	mov	r3, r0
 800c754:	4402      	add	r2, r0
 800c756:	4293      	cmp	r3, r2
 800c758:	d100      	bne.n	800c75c <memset+0xa>
 800c75a:	4770      	bx	lr
 800c75c:	f803 1b01 	strb.w	r1, [r3], #1
 800c760:	e7f9      	b.n	800c756 <memset+0x4>
	...

0800c764 <_sbrk_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	2300      	movs	r3, #0
 800c768:	4d05      	ldr	r5, [pc, #20]	; (800c780 <_sbrk_r+0x1c>)
 800c76a:	4604      	mov	r4, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	602b      	str	r3, [r5, #0]
 800c770:	f7fc f808 	bl	8008784 <_sbrk>
 800c774:	1c43      	adds	r3, r0, #1
 800c776:	d102      	bne.n	800c77e <_sbrk_r+0x1a>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	b103      	cbz	r3, 800c77e <_sbrk_r+0x1a>
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	bd38      	pop	{r3, r4, r5, pc}
 800c780:	200005ec 	.word	0x200005ec

0800c784 <__errno>:
 800c784:	4b01      	ldr	r3, [pc, #4]	; (800c78c <__errno+0x8>)
 800c786:	6818      	ldr	r0, [r3, #0]
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	2000010c 	.word	0x2000010c

0800c790 <__libc_init_array>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	2600      	movs	r6, #0
 800c794:	4d0c      	ldr	r5, [pc, #48]	; (800c7c8 <__libc_init_array+0x38>)
 800c796:	4c0d      	ldr	r4, [pc, #52]	; (800c7cc <__libc_init_array+0x3c>)
 800c798:	1b64      	subs	r4, r4, r5
 800c79a:	10a4      	asrs	r4, r4, #2
 800c79c:	42a6      	cmp	r6, r4
 800c79e:	d109      	bne.n	800c7b4 <__libc_init_array+0x24>
 800c7a0:	f000 fbc6 	bl	800cf30 <_init>
 800c7a4:	2600      	movs	r6, #0
 800c7a6:	4d0a      	ldr	r5, [pc, #40]	; (800c7d0 <__libc_init_array+0x40>)
 800c7a8:	4c0a      	ldr	r4, [pc, #40]	; (800c7d4 <__libc_init_array+0x44>)
 800c7aa:	1b64      	subs	r4, r4, r5
 800c7ac:	10a4      	asrs	r4, r4, #2
 800c7ae:	42a6      	cmp	r6, r4
 800c7b0:	d105      	bne.n	800c7be <__libc_init_array+0x2e>
 800c7b2:	bd70      	pop	{r4, r5, r6, pc}
 800c7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7b8:	4798      	blx	r3
 800c7ba:	3601      	adds	r6, #1
 800c7bc:	e7ee      	b.n	800c79c <__libc_init_array+0xc>
 800c7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c2:	4798      	blx	r3
 800c7c4:	3601      	adds	r6, #1
 800c7c6:	e7f2      	b.n	800c7ae <__libc_init_array+0x1e>
 800c7c8:	0800df24 	.word	0x0800df24
 800c7cc:	0800df24 	.word	0x0800df24
 800c7d0:	0800df24 	.word	0x0800df24
 800c7d4:	0800df28 	.word	0x0800df28

0800c7d8 <__retarget_lock_acquire_recursive>:
 800c7d8:	4770      	bx	lr

0800c7da <__retarget_lock_release_recursive>:
 800c7da:	4770      	bx	lr

0800c7dc <strcpy>:
 800c7dc:	4603      	mov	r3, r0
 800c7de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7e2:	f803 2b01 	strb.w	r2, [r3], #1
 800c7e6:	2a00      	cmp	r2, #0
 800c7e8:	d1f9      	bne.n	800c7de <strcpy+0x2>
 800c7ea:	4770      	bx	lr

0800c7ec <_free_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	2900      	cmp	r1, #0
 800c7f2:	d040      	beq.n	800c876 <_free_r+0x8a>
 800c7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7f8:	1f0c      	subs	r4, r1, #4
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	bfb8      	it	lt
 800c7fe:	18e4      	addlt	r4, r4, r3
 800c800:	f7ff ff2a 	bl	800c658 <__malloc_lock>
 800c804:	4a1c      	ldr	r2, [pc, #112]	; (800c878 <_free_r+0x8c>)
 800c806:	6813      	ldr	r3, [r2, #0]
 800c808:	b933      	cbnz	r3, 800c818 <_free_r+0x2c>
 800c80a:	6063      	str	r3, [r4, #4]
 800c80c:	6014      	str	r4, [r2, #0]
 800c80e:	4628      	mov	r0, r5
 800c810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c814:	f7ff bf26 	b.w	800c664 <__malloc_unlock>
 800c818:	42a3      	cmp	r3, r4
 800c81a:	d908      	bls.n	800c82e <_free_r+0x42>
 800c81c:	6820      	ldr	r0, [r4, #0]
 800c81e:	1821      	adds	r1, r4, r0
 800c820:	428b      	cmp	r3, r1
 800c822:	bf01      	itttt	eq
 800c824:	6819      	ldreq	r1, [r3, #0]
 800c826:	685b      	ldreq	r3, [r3, #4]
 800c828:	1809      	addeq	r1, r1, r0
 800c82a:	6021      	streq	r1, [r4, #0]
 800c82c:	e7ed      	b.n	800c80a <_free_r+0x1e>
 800c82e:	461a      	mov	r2, r3
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	b10b      	cbz	r3, 800c838 <_free_r+0x4c>
 800c834:	42a3      	cmp	r3, r4
 800c836:	d9fa      	bls.n	800c82e <_free_r+0x42>
 800c838:	6811      	ldr	r1, [r2, #0]
 800c83a:	1850      	adds	r0, r2, r1
 800c83c:	42a0      	cmp	r0, r4
 800c83e:	d10b      	bne.n	800c858 <_free_r+0x6c>
 800c840:	6820      	ldr	r0, [r4, #0]
 800c842:	4401      	add	r1, r0
 800c844:	1850      	adds	r0, r2, r1
 800c846:	4283      	cmp	r3, r0
 800c848:	6011      	str	r1, [r2, #0]
 800c84a:	d1e0      	bne.n	800c80e <_free_r+0x22>
 800c84c:	6818      	ldr	r0, [r3, #0]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	4408      	add	r0, r1
 800c852:	6010      	str	r0, [r2, #0]
 800c854:	6053      	str	r3, [r2, #4]
 800c856:	e7da      	b.n	800c80e <_free_r+0x22>
 800c858:	d902      	bls.n	800c860 <_free_r+0x74>
 800c85a:	230c      	movs	r3, #12
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	e7d6      	b.n	800c80e <_free_r+0x22>
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	1821      	adds	r1, r4, r0
 800c864:	428b      	cmp	r3, r1
 800c866:	bf01      	itttt	eq
 800c868:	6819      	ldreq	r1, [r3, #0]
 800c86a:	685b      	ldreq	r3, [r3, #4]
 800c86c:	1809      	addeq	r1, r1, r0
 800c86e:	6021      	streq	r1, [r4, #0]
 800c870:	6063      	str	r3, [r4, #4]
 800c872:	6054      	str	r4, [r2, #4]
 800c874:	e7cb      	b.n	800c80e <_free_r+0x22>
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	200004a8 	.word	0x200004a8

0800c87c <__ssputs_r>:
 800c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	461f      	mov	r7, r3
 800c882:	688e      	ldr	r6, [r1, #8]
 800c884:	4682      	mov	sl, r0
 800c886:	42be      	cmp	r6, r7
 800c888:	460c      	mov	r4, r1
 800c88a:	4690      	mov	r8, r2
 800c88c:	680b      	ldr	r3, [r1, #0]
 800c88e:	d82c      	bhi.n	800c8ea <__ssputs_r+0x6e>
 800c890:	898a      	ldrh	r2, [r1, #12]
 800c892:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c896:	d026      	beq.n	800c8e6 <__ssputs_r+0x6a>
 800c898:	6965      	ldr	r5, [r4, #20]
 800c89a:	6909      	ldr	r1, [r1, #16]
 800c89c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8a0:	eba3 0901 	sub.w	r9, r3, r1
 800c8a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8a8:	1c7b      	adds	r3, r7, #1
 800c8aa:	444b      	add	r3, r9
 800c8ac:	106d      	asrs	r5, r5, #1
 800c8ae:	429d      	cmp	r5, r3
 800c8b0:	bf38      	it	cc
 800c8b2:	461d      	movcc	r5, r3
 800c8b4:	0553      	lsls	r3, r2, #21
 800c8b6:	d527      	bpl.n	800c908 <__ssputs_r+0x8c>
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	f7ff fe4d 	bl	800c558 <_malloc_r>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	b360      	cbz	r0, 800c91c <__ssputs_r+0xa0>
 800c8c2:	464a      	mov	r2, r9
 800c8c4:	6921      	ldr	r1, [r4, #16]
 800c8c6:	f000 fb1c 	bl	800cf02 <memcpy>
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8d4:	81a3      	strh	r3, [r4, #12]
 800c8d6:	6126      	str	r6, [r4, #16]
 800c8d8:	444e      	add	r6, r9
 800c8da:	6026      	str	r6, [r4, #0]
 800c8dc:	463e      	mov	r6, r7
 800c8de:	6165      	str	r5, [r4, #20]
 800c8e0:	eba5 0509 	sub.w	r5, r5, r9
 800c8e4:	60a5      	str	r5, [r4, #8]
 800c8e6:	42be      	cmp	r6, r7
 800c8e8:	d900      	bls.n	800c8ec <__ssputs_r+0x70>
 800c8ea:	463e      	mov	r6, r7
 800c8ec:	4632      	mov	r2, r6
 800c8ee:	4641      	mov	r1, r8
 800c8f0:	6820      	ldr	r0, [r4, #0]
 800c8f2:	f000 fade 	bl	800ceb2 <memmove>
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	68a3      	ldr	r3, [r4, #8]
 800c8fa:	1b9b      	subs	r3, r3, r6
 800c8fc:	60a3      	str	r3, [r4, #8]
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	4433      	add	r3, r6
 800c902:	6023      	str	r3, [r4, #0]
 800c904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c908:	462a      	mov	r2, r5
 800c90a:	f000 faa3 	bl	800ce54 <_realloc_r>
 800c90e:	4606      	mov	r6, r0
 800c910:	2800      	cmp	r0, #0
 800c912:	d1e0      	bne.n	800c8d6 <__ssputs_r+0x5a>
 800c914:	4650      	mov	r0, sl
 800c916:	6921      	ldr	r1, [r4, #16]
 800c918:	f7ff ff68 	bl	800c7ec <_free_r>
 800c91c:	230c      	movs	r3, #12
 800c91e:	f8ca 3000 	str.w	r3, [sl]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c92c:	81a3      	strh	r3, [r4, #12]
 800c92e:	e7e9      	b.n	800c904 <__ssputs_r+0x88>

0800c930 <_svfiprintf_r>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	4698      	mov	r8, r3
 800c936:	898b      	ldrh	r3, [r1, #12]
 800c938:	4607      	mov	r7, r0
 800c93a:	061b      	lsls	r3, r3, #24
 800c93c:	460d      	mov	r5, r1
 800c93e:	4614      	mov	r4, r2
 800c940:	b09d      	sub	sp, #116	; 0x74
 800c942:	d50e      	bpl.n	800c962 <_svfiprintf_r+0x32>
 800c944:	690b      	ldr	r3, [r1, #16]
 800c946:	b963      	cbnz	r3, 800c962 <_svfiprintf_r+0x32>
 800c948:	2140      	movs	r1, #64	; 0x40
 800c94a:	f7ff fe05 	bl	800c558 <_malloc_r>
 800c94e:	6028      	str	r0, [r5, #0]
 800c950:	6128      	str	r0, [r5, #16]
 800c952:	b920      	cbnz	r0, 800c95e <_svfiprintf_r+0x2e>
 800c954:	230c      	movs	r3, #12
 800c956:	603b      	str	r3, [r7, #0]
 800c958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c95c:	e0d0      	b.n	800cb00 <_svfiprintf_r+0x1d0>
 800c95e:	2340      	movs	r3, #64	; 0x40
 800c960:	616b      	str	r3, [r5, #20]
 800c962:	2300      	movs	r3, #0
 800c964:	9309      	str	r3, [sp, #36]	; 0x24
 800c966:	2320      	movs	r3, #32
 800c968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c96c:	2330      	movs	r3, #48	; 0x30
 800c96e:	f04f 0901 	mov.w	r9, #1
 800c972:	f8cd 800c 	str.w	r8, [sp, #12]
 800c976:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cb18 <_svfiprintf_r+0x1e8>
 800c97a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c97e:	4623      	mov	r3, r4
 800c980:	469a      	mov	sl, r3
 800c982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c986:	b10a      	cbz	r2, 800c98c <_svfiprintf_r+0x5c>
 800c988:	2a25      	cmp	r2, #37	; 0x25
 800c98a:	d1f9      	bne.n	800c980 <_svfiprintf_r+0x50>
 800c98c:	ebba 0b04 	subs.w	fp, sl, r4
 800c990:	d00b      	beq.n	800c9aa <_svfiprintf_r+0x7a>
 800c992:	465b      	mov	r3, fp
 800c994:	4622      	mov	r2, r4
 800c996:	4629      	mov	r1, r5
 800c998:	4638      	mov	r0, r7
 800c99a:	f7ff ff6f 	bl	800c87c <__ssputs_r>
 800c99e:	3001      	adds	r0, #1
 800c9a0:	f000 80a9 	beq.w	800caf6 <_svfiprintf_r+0x1c6>
 800c9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9a6:	445a      	add	r2, fp
 800c9a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 80a1 	beq.w	800caf6 <_svfiprintf_r+0x1c6>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9be:	f10a 0a01 	add.w	sl, sl, #1
 800c9c2:	9304      	str	r3, [sp, #16]
 800c9c4:	9307      	str	r3, [sp, #28]
 800c9c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c9cc:	4654      	mov	r4, sl
 800c9ce:	2205      	movs	r2, #5
 800c9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d4:	4850      	ldr	r0, [pc, #320]	; (800cb18 <_svfiprintf_r+0x1e8>)
 800c9d6:	f000 fa86 	bl	800cee6 <memchr>
 800c9da:	9a04      	ldr	r2, [sp, #16]
 800c9dc:	b9d8      	cbnz	r0, 800ca16 <_svfiprintf_r+0xe6>
 800c9de:	06d0      	lsls	r0, r2, #27
 800c9e0:	bf44      	itt	mi
 800c9e2:	2320      	movmi	r3, #32
 800c9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9e8:	0711      	lsls	r1, r2, #28
 800c9ea:	bf44      	itt	mi
 800c9ec:	232b      	movmi	r3, #43	; 0x2b
 800c9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f8:	d015      	beq.n	800ca26 <_svfiprintf_r+0xf6>
 800c9fa:	4654      	mov	r4, sl
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	f04f 0c0a 	mov.w	ip, #10
 800ca02:	9a07      	ldr	r2, [sp, #28]
 800ca04:	4621      	mov	r1, r4
 800ca06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca0a:	3b30      	subs	r3, #48	; 0x30
 800ca0c:	2b09      	cmp	r3, #9
 800ca0e:	d94d      	bls.n	800caac <_svfiprintf_r+0x17c>
 800ca10:	b1b0      	cbz	r0, 800ca40 <_svfiprintf_r+0x110>
 800ca12:	9207      	str	r2, [sp, #28]
 800ca14:	e014      	b.n	800ca40 <_svfiprintf_r+0x110>
 800ca16:	eba0 0308 	sub.w	r3, r0, r8
 800ca1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	46a2      	mov	sl, r4
 800ca22:	9304      	str	r3, [sp, #16]
 800ca24:	e7d2      	b.n	800c9cc <_svfiprintf_r+0x9c>
 800ca26:	9b03      	ldr	r3, [sp, #12]
 800ca28:	1d19      	adds	r1, r3, #4
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	9103      	str	r1, [sp, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	bfbb      	ittet	lt
 800ca32:	425b      	neglt	r3, r3
 800ca34:	f042 0202 	orrlt.w	r2, r2, #2
 800ca38:	9307      	strge	r3, [sp, #28]
 800ca3a:	9307      	strlt	r3, [sp, #28]
 800ca3c:	bfb8      	it	lt
 800ca3e:	9204      	strlt	r2, [sp, #16]
 800ca40:	7823      	ldrb	r3, [r4, #0]
 800ca42:	2b2e      	cmp	r3, #46	; 0x2e
 800ca44:	d10c      	bne.n	800ca60 <_svfiprintf_r+0x130>
 800ca46:	7863      	ldrb	r3, [r4, #1]
 800ca48:	2b2a      	cmp	r3, #42	; 0x2a
 800ca4a:	d134      	bne.n	800cab6 <_svfiprintf_r+0x186>
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	3402      	adds	r4, #2
 800ca50:	1d1a      	adds	r2, r3, #4
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	9203      	str	r2, [sp, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	bfb8      	it	lt
 800ca5a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca5e:	9305      	str	r3, [sp, #20]
 800ca60:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cb1c <_svfiprintf_r+0x1ec>
 800ca64:	2203      	movs	r2, #3
 800ca66:	4650      	mov	r0, sl
 800ca68:	7821      	ldrb	r1, [r4, #0]
 800ca6a:	f000 fa3c 	bl	800cee6 <memchr>
 800ca6e:	b138      	cbz	r0, 800ca80 <_svfiprintf_r+0x150>
 800ca70:	2240      	movs	r2, #64	; 0x40
 800ca72:	9b04      	ldr	r3, [sp, #16]
 800ca74:	eba0 000a 	sub.w	r0, r0, sl
 800ca78:	4082      	lsls	r2, r0
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	3401      	adds	r4, #1
 800ca7e:	9304      	str	r3, [sp, #16]
 800ca80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca84:	2206      	movs	r2, #6
 800ca86:	4826      	ldr	r0, [pc, #152]	; (800cb20 <_svfiprintf_r+0x1f0>)
 800ca88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca8c:	f000 fa2b 	bl	800cee6 <memchr>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d038      	beq.n	800cb06 <_svfiprintf_r+0x1d6>
 800ca94:	4b23      	ldr	r3, [pc, #140]	; (800cb24 <_svfiprintf_r+0x1f4>)
 800ca96:	bb1b      	cbnz	r3, 800cae0 <_svfiprintf_r+0x1b0>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	3307      	adds	r3, #7
 800ca9c:	f023 0307 	bic.w	r3, r3, #7
 800caa0:	3308      	adds	r3, #8
 800caa2:	9303      	str	r3, [sp, #12]
 800caa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa6:	4433      	add	r3, r6
 800caa8:	9309      	str	r3, [sp, #36]	; 0x24
 800caaa:	e768      	b.n	800c97e <_svfiprintf_r+0x4e>
 800caac:	460c      	mov	r4, r1
 800caae:	2001      	movs	r0, #1
 800cab0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cab4:	e7a6      	b.n	800ca04 <_svfiprintf_r+0xd4>
 800cab6:	2300      	movs	r3, #0
 800cab8:	f04f 0c0a 	mov.w	ip, #10
 800cabc:	4619      	mov	r1, r3
 800cabe:	3401      	adds	r4, #1
 800cac0:	9305      	str	r3, [sp, #20]
 800cac2:	4620      	mov	r0, r4
 800cac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cac8:	3a30      	subs	r2, #48	; 0x30
 800caca:	2a09      	cmp	r2, #9
 800cacc:	d903      	bls.n	800cad6 <_svfiprintf_r+0x1a6>
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0c6      	beq.n	800ca60 <_svfiprintf_r+0x130>
 800cad2:	9105      	str	r1, [sp, #20]
 800cad4:	e7c4      	b.n	800ca60 <_svfiprintf_r+0x130>
 800cad6:	4604      	mov	r4, r0
 800cad8:	2301      	movs	r3, #1
 800cada:	fb0c 2101 	mla	r1, ip, r1, r2
 800cade:	e7f0      	b.n	800cac2 <_svfiprintf_r+0x192>
 800cae0:	ab03      	add	r3, sp, #12
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	462a      	mov	r2, r5
 800cae6:	4638      	mov	r0, r7
 800cae8:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <_svfiprintf_r+0x1f8>)
 800caea:	a904      	add	r1, sp, #16
 800caec:	f3af 8000 	nop.w
 800caf0:	1c42      	adds	r2, r0, #1
 800caf2:	4606      	mov	r6, r0
 800caf4:	d1d6      	bne.n	800caa4 <_svfiprintf_r+0x174>
 800caf6:	89ab      	ldrh	r3, [r5, #12]
 800caf8:	065b      	lsls	r3, r3, #25
 800cafa:	f53f af2d 	bmi.w	800c958 <_svfiprintf_r+0x28>
 800cafe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb00:	b01d      	add	sp, #116	; 0x74
 800cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb06:	ab03      	add	r3, sp, #12
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	4b06      	ldr	r3, [pc, #24]	; (800cb28 <_svfiprintf_r+0x1f8>)
 800cb10:	a904      	add	r1, sp, #16
 800cb12:	f000 f87d 	bl	800cc10 <_printf_i>
 800cb16:	e7eb      	b.n	800caf0 <_svfiprintf_r+0x1c0>
 800cb18:	0800deef 	.word	0x0800deef
 800cb1c:	0800def5 	.word	0x0800def5
 800cb20:	0800def9 	.word	0x0800def9
 800cb24:	00000000 	.word	0x00000000
 800cb28:	0800c87d 	.word	0x0800c87d

0800cb2c <_printf_common>:
 800cb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb30:	4616      	mov	r6, r2
 800cb32:	4699      	mov	r9, r3
 800cb34:	688a      	ldr	r2, [r1, #8]
 800cb36:	690b      	ldr	r3, [r1, #16]
 800cb38:	4607      	mov	r7, r0
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	bfb8      	it	lt
 800cb3e:	4613      	movlt	r3, r2
 800cb40:	6033      	str	r3, [r6, #0]
 800cb42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb46:	460c      	mov	r4, r1
 800cb48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb4c:	b10a      	cbz	r2, 800cb52 <_printf_common+0x26>
 800cb4e:	3301      	adds	r3, #1
 800cb50:	6033      	str	r3, [r6, #0]
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	0699      	lsls	r1, r3, #26
 800cb56:	bf42      	ittt	mi
 800cb58:	6833      	ldrmi	r3, [r6, #0]
 800cb5a:	3302      	addmi	r3, #2
 800cb5c:	6033      	strmi	r3, [r6, #0]
 800cb5e:	6825      	ldr	r5, [r4, #0]
 800cb60:	f015 0506 	ands.w	r5, r5, #6
 800cb64:	d106      	bne.n	800cb74 <_printf_common+0x48>
 800cb66:	f104 0a19 	add.w	sl, r4, #25
 800cb6a:	68e3      	ldr	r3, [r4, #12]
 800cb6c:	6832      	ldr	r2, [r6, #0]
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	42ab      	cmp	r3, r5
 800cb72:	dc2b      	bgt.n	800cbcc <_printf_common+0xa0>
 800cb74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb78:	1e13      	subs	r3, r2, #0
 800cb7a:	6822      	ldr	r2, [r4, #0]
 800cb7c:	bf18      	it	ne
 800cb7e:	2301      	movne	r3, #1
 800cb80:	0692      	lsls	r2, r2, #26
 800cb82:	d430      	bmi.n	800cbe6 <_printf_common+0xba>
 800cb84:	4649      	mov	r1, r9
 800cb86:	4638      	mov	r0, r7
 800cb88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb8c:	47c0      	blx	r8
 800cb8e:	3001      	adds	r0, #1
 800cb90:	d023      	beq.n	800cbda <_printf_common+0xae>
 800cb92:	6823      	ldr	r3, [r4, #0]
 800cb94:	6922      	ldr	r2, [r4, #16]
 800cb96:	f003 0306 	and.w	r3, r3, #6
 800cb9a:	2b04      	cmp	r3, #4
 800cb9c:	bf14      	ite	ne
 800cb9e:	2500      	movne	r5, #0
 800cba0:	6833      	ldreq	r3, [r6, #0]
 800cba2:	f04f 0600 	mov.w	r6, #0
 800cba6:	bf08      	it	eq
 800cba8:	68e5      	ldreq	r5, [r4, #12]
 800cbaa:	f104 041a 	add.w	r4, r4, #26
 800cbae:	bf08      	it	eq
 800cbb0:	1aed      	subeq	r5, r5, r3
 800cbb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cbb6:	bf08      	it	eq
 800cbb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	bfc4      	itt	gt
 800cbc0:	1a9b      	subgt	r3, r3, r2
 800cbc2:	18ed      	addgt	r5, r5, r3
 800cbc4:	42b5      	cmp	r5, r6
 800cbc6:	d11a      	bne.n	800cbfe <_printf_common+0xd2>
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e008      	b.n	800cbde <_printf_common+0xb2>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	4652      	mov	r2, sl
 800cbd0:	4649      	mov	r1, r9
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	47c0      	blx	r8
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	d103      	bne.n	800cbe2 <_printf_common+0xb6>
 800cbda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe2:	3501      	adds	r5, #1
 800cbe4:	e7c1      	b.n	800cb6a <_printf_common+0x3e>
 800cbe6:	2030      	movs	r0, #48	; 0x30
 800cbe8:	18e1      	adds	r1, r4, r3
 800cbea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbf4:	4422      	add	r2, r4
 800cbf6:	3302      	adds	r3, #2
 800cbf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbfc:	e7c2      	b.n	800cb84 <_printf_common+0x58>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4622      	mov	r2, r4
 800cc02:	4649      	mov	r1, r9
 800cc04:	4638      	mov	r0, r7
 800cc06:	47c0      	blx	r8
 800cc08:	3001      	adds	r0, #1
 800cc0a:	d0e6      	beq.n	800cbda <_printf_common+0xae>
 800cc0c:	3601      	adds	r6, #1
 800cc0e:	e7d9      	b.n	800cbc4 <_printf_common+0x98>

0800cc10 <_printf_i>:
 800cc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc14:	7e0f      	ldrb	r7, [r1, #24]
 800cc16:	4691      	mov	r9, r2
 800cc18:	2f78      	cmp	r7, #120	; 0x78
 800cc1a:	4680      	mov	r8, r0
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	469a      	mov	sl, r3
 800cc20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc26:	d807      	bhi.n	800cc38 <_printf_i+0x28>
 800cc28:	2f62      	cmp	r7, #98	; 0x62
 800cc2a:	d80a      	bhi.n	800cc42 <_printf_i+0x32>
 800cc2c:	2f00      	cmp	r7, #0
 800cc2e:	f000 80d5 	beq.w	800cddc <_printf_i+0x1cc>
 800cc32:	2f58      	cmp	r7, #88	; 0x58
 800cc34:	f000 80c1 	beq.w	800cdba <_printf_i+0x1aa>
 800cc38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc40:	e03a      	b.n	800ccb8 <_printf_i+0xa8>
 800cc42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc46:	2b15      	cmp	r3, #21
 800cc48:	d8f6      	bhi.n	800cc38 <_printf_i+0x28>
 800cc4a:	a101      	add	r1, pc, #4	; (adr r1, 800cc50 <_printf_i+0x40>)
 800cc4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc50:	0800cca9 	.word	0x0800cca9
 800cc54:	0800ccbd 	.word	0x0800ccbd
 800cc58:	0800cc39 	.word	0x0800cc39
 800cc5c:	0800cc39 	.word	0x0800cc39
 800cc60:	0800cc39 	.word	0x0800cc39
 800cc64:	0800cc39 	.word	0x0800cc39
 800cc68:	0800ccbd 	.word	0x0800ccbd
 800cc6c:	0800cc39 	.word	0x0800cc39
 800cc70:	0800cc39 	.word	0x0800cc39
 800cc74:	0800cc39 	.word	0x0800cc39
 800cc78:	0800cc39 	.word	0x0800cc39
 800cc7c:	0800cdc3 	.word	0x0800cdc3
 800cc80:	0800cce9 	.word	0x0800cce9
 800cc84:	0800cd7d 	.word	0x0800cd7d
 800cc88:	0800cc39 	.word	0x0800cc39
 800cc8c:	0800cc39 	.word	0x0800cc39
 800cc90:	0800cde5 	.word	0x0800cde5
 800cc94:	0800cc39 	.word	0x0800cc39
 800cc98:	0800cce9 	.word	0x0800cce9
 800cc9c:	0800cc39 	.word	0x0800cc39
 800cca0:	0800cc39 	.word	0x0800cc39
 800cca4:	0800cd85 	.word	0x0800cd85
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	1d1a      	adds	r2, r3, #4
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	602a      	str	r2, [r5, #0]
 800ccb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e0a0      	b.n	800cdfe <_printf_i+0x1ee>
 800ccbc:	6820      	ldr	r0, [r4, #0]
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	0607      	lsls	r7, r0, #24
 800ccc2:	f103 0104 	add.w	r1, r3, #4
 800ccc6:	6029      	str	r1, [r5, #0]
 800ccc8:	d501      	bpl.n	800ccce <_printf_i+0xbe>
 800ccca:	681e      	ldr	r6, [r3, #0]
 800cccc:	e003      	b.n	800ccd6 <_printf_i+0xc6>
 800ccce:	0646      	lsls	r6, r0, #25
 800ccd0:	d5fb      	bpl.n	800ccca <_printf_i+0xba>
 800ccd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ccd6:	2e00      	cmp	r6, #0
 800ccd8:	da03      	bge.n	800cce2 <_printf_i+0xd2>
 800ccda:	232d      	movs	r3, #45	; 0x2d
 800ccdc:	4276      	negs	r6, r6
 800ccde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cce2:	230a      	movs	r3, #10
 800cce4:	4859      	ldr	r0, [pc, #356]	; (800ce4c <_printf_i+0x23c>)
 800cce6:	e012      	b.n	800cd0e <_printf_i+0xfe>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	6820      	ldr	r0, [r4, #0]
 800ccec:	1d19      	adds	r1, r3, #4
 800ccee:	6029      	str	r1, [r5, #0]
 800ccf0:	0605      	lsls	r5, r0, #24
 800ccf2:	d501      	bpl.n	800ccf8 <_printf_i+0xe8>
 800ccf4:	681e      	ldr	r6, [r3, #0]
 800ccf6:	e002      	b.n	800ccfe <_printf_i+0xee>
 800ccf8:	0641      	lsls	r1, r0, #25
 800ccfa:	d5fb      	bpl.n	800ccf4 <_printf_i+0xe4>
 800ccfc:	881e      	ldrh	r6, [r3, #0]
 800ccfe:	2f6f      	cmp	r7, #111	; 0x6f
 800cd00:	bf0c      	ite	eq
 800cd02:	2308      	moveq	r3, #8
 800cd04:	230a      	movne	r3, #10
 800cd06:	4851      	ldr	r0, [pc, #324]	; (800ce4c <_printf_i+0x23c>)
 800cd08:	2100      	movs	r1, #0
 800cd0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd0e:	6865      	ldr	r5, [r4, #4]
 800cd10:	2d00      	cmp	r5, #0
 800cd12:	bfa8      	it	ge
 800cd14:	6821      	ldrge	r1, [r4, #0]
 800cd16:	60a5      	str	r5, [r4, #8]
 800cd18:	bfa4      	itt	ge
 800cd1a:	f021 0104 	bicge.w	r1, r1, #4
 800cd1e:	6021      	strge	r1, [r4, #0]
 800cd20:	b90e      	cbnz	r6, 800cd26 <_printf_i+0x116>
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	d04b      	beq.n	800cdbe <_printf_i+0x1ae>
 800cd26:	4615      	mov	r5, r2
 800cd28:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd2c:	fb03 6711 	mls	r7, r3, r1, r6
 800cd30:	5dc7      	ldrb	r7, [r0, r7]
 800cd32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd36:	4637      	mov	r7, r6
 800cd38:	42bb      	cmp	r3, r7
 800cd3a:	460e      	mov	r6, r1
 800cd3c:	d9f4      	bls.n	800cd28 <_printf_i+0x118>
 800cd3e:	2b08      	cmp	r3, #8
 800cd40:	d10b      	bne.n	800cd5a <_printf_i+0x14a>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	07de      	lsls	r6, r3, #31
 800cd46:	d508      	bpl.n	800cd5a <_printf_i+0x14a>
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	6861      	ldr	r1, [r4, #4]
 800cd4c:	4299      	cmp	r1, r3
 800cd4e:	bfde      	ittt	le
 800cd50:	2330      	movle	r3, #48	; 0x30
 800cd52:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd56:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd5a:	1b52      	subs	r2, r2, r5
 800cd5c:	6122      	str	r2, [r4, #16]
 800cd5e:	464b      	mov	r3, r9
 800cd60:	4621      	mov	r1, r4
 800cd62:	4640      	mov	r0, r8
 800cd64:	f8cd a000 	str.w	sl, [sp]
 800cd68:	aa03      	add	r2, sp, #12
 800cd6a:	f7ff fedf 	bl	800cb2c <_printf_common>
 800cd6e:	3001      	adds	r0, #1
 800cd70:	d14a      	bne.n	800ce08 <_printf_i+0x1f8>
 800cd72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd76:	b004      	add	sp, #16
 800cd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	f043 0320 	orr.w	r3, r3, #32
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	2778      	movs	r7, #120	; 0x78
 800cd86:	4832      	ldr	r0, [pc, #200]	; (800ce50 <_printf_i+0x240>)
 800cd88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	6829      	ldr	r1, [r5, #0]
 800cd90:	061f      	lsls	r7, r3, #24
 800cd92:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd96:	d402      	bmi.n	800cd9e <_printf_i+0x18e>
 800cd98:	065f      	lsls	r7, r3, #25
 800cd9a:	bf48      	it	mi
 800cd9c:	b2b6      	uxthmi	r6, r6
 800cd9e:	07df      	lsls	r7, r3, #31
 800cda0:	bf48      	it	mi
 800cda2:	f043 0320 	orrmi.w	r3, r3, #32
 800cda6:	6029      	str	r1, [r5, #0]
 800cda8:	bf48      	it	mi
 800cdaa:	6023      	strmi	r3, [r4, #0]
 800cdac:	b91e      	cbnz	r6, 800cdb6 <_printf_i+0x1a6>
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	f023 0320 	bic.w	r3, r3, #32
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	2310      	movs	r3, #16
 800cdb8:	e7a6      	b.n	800cd08 <_printf_i+0xf8>
 800cdba:	4824      	ldr	r0, [pc, #144]	; (800ce4c <_printf_i+0x23c>)
 800cdbc:	e7e4      	b.n	800cd88 <_printf_i+0x178>
 800cdbe:	4615      	mov	r5, r2
 800cdc0:	e7bd      	b.n	800cd3e <_printf_i+0x12e>
 800cdc2:	682b      	ldr	r3, [r5, #0]
 800cdc4:	6826      	ldr	r6, [r4, #0]
 800cdc6:	1d18      	adds	r0, r3, #4
 800cdc8:	6961      	ldr	r1, [r4, #20]
 800cdca:	6028      	str	r0, [r5, #0]
 800cdcc:	0635      	lsls	r5, r6, #24
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	d501      	bpl.n	800cdd6 <_printf_i+0x1c6>
 800cdd2:	6019      	str	r1, [r3, #0]
 800cdd4:	e002      	b.n	800cddc <_printf_i+0x1cc>
 800cdd6:	0670      	lsls	r0, r6, #25
 800cdd8:	d5fb      	bpl.n	800cdd2 <_printf_i+0x1c2>
 800cdda:	8019      	strh	r1, [r3, #0]
 800cddc:	2300      	movs	r3, #0
 800cdde:	4615      	mov	r5, r2
 800cde0:	6123      	str	r3, [r4, #16]
 800cde2:	e7bc      	b.n	800cd5e <_printf_i+0x14e>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	2100      	movs	r1, #0
 800cde8:	1d1a      	adds	r2, r3, #4
 800cdea:	602a      	str	r2, [r5, #0]
 800cdec:	681d      	ldr	r5, [r3, #0]
 800cdee:	6862      	ldr	r2, [r4, #4]
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	f000 f878 	bl	800cee6 <memchr>
 800cdf6:	b108      	cbz	r0, 800cdfc <_printf_i+0x1ec>
 800cdf8:	1b40      	subs	r0, r0, r5
 800cdfa:	6060      	str	r0, [r4, #4]
 800cdfc:	6863      	ldr	r3, [r4, #4]
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	2300      	movs	r3, #0
 800ce02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce06:	e7aa      	b.n	800cd5e <_printf_i+0x14e>
 800ce08:	462a      	mov	r2, r5
 800ce0a:	4649      	mov	r1, r9
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	6923      	ldr	r3, [r4, #16]
 800ce10:	47d0      	blx	sl
 800ce12:	3001      	adds	r0, #1
 800ce14:	d0ad      	beq.n	800cd72 <_printf_i+0x162>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	079b      	lsls	r3, r3, #30
 800ce1a:	d413      	bmi.n	800ce44 <_printf_i+0x234>
 800ce1c:	68e0      	ldr	r0, [r4, #12]
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	4298      	cmp	r0, r3
 800ce22:	bfb8      	it	lt
 800ce24:	4618      	movlt	r0, r3
 800ce26:	e7a6      	b.n	800cd76 <_printf_i+0x166>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	4632      	mov	r2, r6
 800ce2c:	4649      	mov	r1, r9
 800ce2e:	4640      	mov	r0, r8
 800ce30:	47d0      	blx	sl
 800ce32:	3001      	adds	r0, #1
 800ce34:	d09d      	beq.n	800cd72 <_printf_i+0x162>
 800ce36:	3501      	adds	r5, #1
 800ce38:	68e3      	ldr	r3, [r4, #12]
 800ce3a:	9903      	ldr	r1, [sp, #12]
 800ce3c:	1a5b      	subs	r3, r3, r1
 800ce3e:	42ab      	cmp	r3, r5
 800ce40:	dcf2      	bgt.n	800ce28 <_printf_i+0x218>
 800ce42:	e7eb      	b.n	800ce1c <_printf_i+0x20c>
 800ce44:	2500      	movs	r5, #0
 800ce46:	f104 0619 	add.w	r6, r4, #25
 800ce4a:	e7f5      	b.n	800ce38 <_printf_i+0x228>
 800ce4c:	0800df00 	.word	0x0800df00
 800ce50:	0800df11 	.word	0x0800df11

0800ce54 <_realloc_r>:
 800ce54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce58:	4680      	mov	r8, r0
 800ce5a:	4614      	mov	r4, r2
 800ce5c:	460e      	mov	r6, r1
 800ce5e:	b921      	cbnz	r1, 800ce6a <_realloc_r+0x16>
 800ce60:	4611      	mov	r1, r2
 800ce62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce66:	f7ff bb77 	b.w	800c558 <_malloc_r>
 800ce6a:	b92a      	cbnz	r2, 800ce78 <_realloc_r+0x24>
 800ce6c:	f7ff fcbe 	bl	800c7ec <_free_r>
 800ce70:	4625      	mov	r5, r4
 800ce72:	4628      	mov	r0, r5
 800ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce78:	f000 f851 	bl	800cf1e <_malloc_usable_size_r>
 800ce7c:	4284      	cmp	r4, r0
 800ce7e:	4607      	mov	r7, r0
 800ce80:	d802      	bhi.n	800ce88 <_realloc_r+0x34>
 800ce82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce86:	d812      	bhi.n	800ceae <_realloc_r+0x5a>
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	f7ff fb64 	bl	800c558 <_malloc_r>
 800ce90:	4605      	mov	r5, r0
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d0ed      	beq.n	800ce72 <_realloc_r+0x1e>
 800ce96:	42bc      	cmp	r4, r7
 800ce98:	4622      	mov	r2, r4
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	bf28      	it	cs
 800ce9e:	463a      	movcs	r2, r7
 800cea0:	f000 f82f 	bl	800cf02 <memcpy>
 800cea4:	4631      	mov	r1, r6
 800cea6:	4640      	mov	r0, r8
 800cea8:	f7ff fca0 	bl	800c7ec <_free_r>
 800ceac:	e7e1      	b.n	800ce72 <_realloc_r+0x1e>
 800ceae:	4635      	mov	r5, r6
 800ceb0:	e7df      	b.n	800ce72 <_realloc_r+0x1e>

0800ceb2 <memmove>:
 800ceb2:	4288      	cmp	r0, r1
 800ceb4:	b510      	push	{r4, lr}
 800ceb6:	eb01 0402 	add.w	r4, r1, r2
 800ceba:	d902      	bls.n	800cec2 <memmove+0x10>
 800cebc:	4284      	cmp	r4, r0
 800cebe:	4623      	mov	r3, r4
 800cec0:	d807      	bhi.n	800ced2 <memmove+0x20>
 800cec2:	1e43      	subs	r3, r0, #1
 800cec4:	42a1      	cmp	r1, r4
 800cec6:	d008      	beq.n	800ceda <memmove+0x28>
 800cec8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cecc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ced0:	e7f8      	b.n	800cec4 <memmove+0x12>
 800ced2:	4601      	mov	r1, r0
 800ced4:	4402      	add	r2, r0
 800ced6:	428a      	cmp	r2, r1
 800ced8:	d100      	bne.n	800cedc <memmove+0x2a>
 800ceda:	bd10      	pop	{r4, pc}
 800cedc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cee0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cee4:	e7f7      	b.n	800ced6 <memmove+0x24>

0800cee6 <memchr>:
 800cee6:	4603      	mov	r3, r0
 800cee8:	b510      	push	{r4, lr}
 800ceea:	b2c9      	uxtb	r1, r1
 800ceec:	4402      	add	r2, r0
 800ceee:	4293      	cmp	r3, r2
 800cef0:	4618      	mov	r0, r3
 800cef2:	d101      	bne.n	800cef8 <memchr+0x12>
 800cef4:	2000      	movs	r0, #0
 800cef6:	e003      	b.n	800cf00 <memchr+0x1a>
 800cef8:	7804      	ldrb	r4, [r0, #0]
 800cefa:	3301      	adds	r3, #1
 800cefc:	428c      	cmp	r4, r1
 800cefe:	d1f6      	bne.n	800ceee <memchr+0x8>
 800cf00:	bd10      	pop	{r4, pc}

0800cf02 <memcpy>:
 800cf02:	440a      	add	r2, r1
 800cf04:	4291      	cmp	r1, r2
 800cf06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf0a:	d100      	bne.n	800cf0e <memcpy+0xc>
 800cf0c:	4770      	bx	lr
 800cf0e:	b510      	push	{r4, lr}
 800cf10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf14:	4291      	cmp	r1, r2
 800cf16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf1a:	d1f9      	bne.n	800cf10 <memcpy+0xe>
 800cf1c:	bd10      	pop	{r4, pc}

0800cf1e <_malloc_usable_size_r>:
 800cf1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf22:	1f18      	subs	r0, r3, #4
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	bfbc      	itt	lt
 800cf28:	580b      	ldrlt	r3, [r1, r0]
 800cf2a:	18c0      	addlt	r0, r0, r3
 800cf2c:	4770      	bx	lr
	...

0800cf30 <_init>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	bf00      	nop
 800cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf36:	bc08      	pop	{r3}
 800cf38:	469e      	mov	lr, r3
 800cf3a:	4770      	bx	lr

0800cf3c <_fini>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	bf00      	nop
 800cf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf42:	bc08      	pop	{r3}
 800cf44:	469e      	mov	lr, r3
 800cf46:	4770      	bx	lr
